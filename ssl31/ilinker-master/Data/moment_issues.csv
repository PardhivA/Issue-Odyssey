Id,repo,issue_id,title,body,user,state,comments,created_at,closed_at,assignee,labels,milestone,PR,type
14249,moment/moment,1,namespace,Hi   Wouldn t it be cleaner to mixin all these methods as a separate object  say   _.time ? Just like they did in JS when they separated  Date    Math  and so on?  Best regards    Vladimir ,dvv,closed,6,2011-03-20 19:27:08,2011-03-25 16:07:07,,,,0,1
14248,moment/moment,2,Add a package.json,Hi   I would like to use underscore.date in nodejs. Can you add a package.json and publish it with npm ?  Thanks ,francois2metz,closed,1,2011-05-01 16:22:42,2011-05-02 18:17:55,,,,0,1
14247,moment/moment,3,Issues with Safari,I know this is mainly a node based library  but I happen to use this library on the browser side. I noticed some issues when parsing dates in Safari.  I resorted to creating a function in my app that does this before it sends the date to _.date  sorry this is coffeescript       coffeescript parseDate:  str   >   parts = _.map str.split        part   > parseInt part    date = new Date parts[0]  parts[1] 1  parts[2]       The date strings are YYYY MM DD. Works in every other browser  so I m not sure if you want to implement manual parsing or not but if you want to support Safari you re going to have to. : / ,lancecarlson,closed,2,2011-05-03 00:32:26,2011-05-09 16:06:50,,,,0,1
14246,moment/moment,4,Wrap with _date   instead of _date.date  ,Hey   Have you thought of setting _date up so that it could be used like Underscore with  _date foo .format ...  ? What was your reason to require typing  date  twice  as in  _date.date foo .format ...   ? :   Andri ,moll,closed,1,2011-06-02 08:50:21,2011-06-13 16:23:30,,,,0,1
14245,moment/moment,5,Fixed mixin with Underscore.,Underscore s mixin fn wants a hash that also names the mixin. ,moll,closed,1,2011-06-16 18:51:28,2011-06-16 19:36:59,,,,1,1
14244,moment/moment,6,Minified version breaks Underscore.js mixin,_.date is undefined with the current minified version. I ran the un minified version through YUI s compressor and it worked fine. Size difference was minimal  original compressed: 4292  YUI compressed: 4433 . ,miwillhite,closed,2,2011-06-28 18:21:34,2011-07-06 19:41:06,,,,0,1
14243,moment/moment,7,Versioning,Hi Tim   this looks very awesome  about to play with it now. Minor nitpick: I chose release 0.5.1 from the Downloads button here but package.json and underscore.date.js state 0.5.0... did I miss out on the 0.5.1 additions or did the number just not get bumped up in these source files? ,pearjoint,closed,1,2011-07-03 12:37:07,2011-07-11 16:03:53,,,,0,1
14242,moment/moment,8, 1 minutes ago  instead of  a minute ago ,Hi   I notice from your readme there s a special case to show  a minute ago  but the simplest _date myTicks .fromNow   test case still gives me  1 minutes ago . What to do? ,pearjoint,closed,5,2011-07-03 13:26:42,2011-07-11 16:01:31,,,,0,1
14241,moment/moment,9,Check for window object,Check for a undefined variable directly causes ReferenceError in nodejs. ,fabianonunes,closed,1,2011-07-06 23:39:39,2011-07-11 15:59:38,,,,1,1
14240,moment/moment,10,FF and Chrome inconsistency   Firefox is one day shorter,Try this code in FF 5.0.1 and Chrome  Mac :  var today = _date  .format  YYYY MM DD  ; var today_plus_7 = _date today .add   d: 7   .format  YYYY MM DD  ; console.log today  today_plus_7 ;  http://jsfiddle.net/jboesch26/b3wkM/  Chrome will log 7 days from the  today  date  Firefox will log 6 days. :   Also  the unit tests fail in Firefox 5.0.1 and Chrome on a Mac. ,jboesch,closed,6,2011-08-12 22:18:23,2011-08-15 17:29:35,,,,0,1
14239,moment/moment,11,Feature: improved parsing,I ve searched the net on many occasions trying to find a good date library.  In primarily use two features: parsing and formatting. Of the two  most date libraries are sufficient in the formatting category.  It s parsing that usually lacks.  The native  Date.parse  is weak as it cannot parse a lot of common date formats.  Also  it is not that useful to be required to pass a second parameter to a  parse  function in order to specify the date template from which to parse.  In most cases  I grab my dates from some input field  perhaps a text field .  I generally allow the person to enter the date in whatever format he sees fit.  As such  I just wanna pass a date  no format template  over to a parse function and have it decipher the date if possible and return it as a date object.  Sugar.js does this but it modifies all native object prototypes  which I m not necessarily against .  The trouble is it comes with a lot of other baggage.  It s date library is not yet separate.  I ve even tried date.js and find that it doesn t always successfully parse a date in some format.  Anyway  I know this is a biggie.  So I ll take no offense if you opt to close it. :  ,mlanza,closed,5,2011-09-02 00:16:18,2011-09-21 16:58:47,,,,0,1
14238,moment/moment,12,Create file that suport languages.,I included just my language  but the format is open to add any language. ,jalex79,closed,2,2011-09-14 13:39:42,2011-09-14 16:47:19,,,,1,1
14237,moment/moment,13,Offset changes when using add   with different options on NOW,I don t suppose this is intentional?      javascript _.date  .add  d : 14       //  > date: Fri Oct 14 2011 11:42:25 GMT 0300  EEST  _.date  .add  M : 2        //  > date: Wed Nov 30 2011 11:42:38 GMT 0200  EET      ,polarblau,closed,3,2011-09-30 08:45:26,2011-09-30 17:22:31,,,,0,1
14236,moment/moment,14,Add speed comparisons for DateJS  phpjs.date  Jacob Wright  Steven Levithan  jPaq,http://jpaq.org/documentation/Date.prototype.format 28 29/1.0/ http://blog.stevenlevithan.com/archives/date time format http://jacwright.com/projects/javascript/date_format/ ,timrwood,closed,2,2011-10-05 17:37:07,2011-12-02 21:26:54,,,,0,1
14235,moment/moment,15,added italian language,,zenlor,closed,1,2011-10-06 09:05:39,2011-10-06 16:15:45,,,,1,1
14234,moment/moment,16,French Translation   one second relativeTime ,I suggest to add french translation directly in loading.  And also to manage case for one second relativeTime which case happend for me during my test.  Thank you in advance for your time and your work. ,jfroffice,closed,7,2011-10-09 19:11:08,2011-10-13 17:12:10,,,,1,1
14233,moment/moment,17,Add moment.fn.closest  ,See requirements here  https://gist.github.com/1280098 ,timrwood,closed,2,2011-10-12 02:41:39,2011-12-16 00:52:53,,New Feature,,1.3.0,0,1
14232,moment/moment,18,Add _date.fn to allow for prototype modification,    _date.fn == UnderscoreDate.prototype     ,timrwood,closed,0,2011-10-12 02:42:41,2011-10-14 22:39:50,,New Feature,,0.7.0,0,1
14231,moment/moment,19,Add _date  .diff  ,Just returns the diff of two dates numerically.  Should replace  _date  .from date  true  true   ,timrwood,closed,0,2011-10-12 02:43:38,2011-10-14 22:40:06,,New Feature,,0.7.0,0,1
14230,moment/moment,20,Add tests for all languages,All new languages should have tests for  _date.fn.format  and  _date.fn.from . ,timrwood,closed,0,2011-10-12 02:46:05,2011-10-14 23:42:19,,,0.7.0,0,1
14229,moment/moment,21,Bundle and minify language files,Add a step to the build script to jshint and minify the lang files for delivery to the browser.  Add a step to bundle the lang and lang test files for testing.  ,timrwood,closed,0,2011-10-12 02:47:39,2011-10-14 22:41:52,,Enhancement,,0.7.0,0,1
14228,moment/moment,22,Add convenience methods,Add convenience methods for accessing the getters and setters of the date parts   _date  .month    ==  new Date  .getMonth      _date  .month 5   =  new Date  .setMonth 5    Chaining should also be allowed.   _date.month 5 .date 3   ,timrwood,closed,1,2011-10-13 05:33:22,2011-10-14 22:40:36,,New Feature,,0.7.0,0,1
14227,moment/moment,23,Add sugar for add / substract like datejs,For example  instead of  _date.add    d:3      we could write  _date.addDays 3   Same again for hours/weeks etc  Also should be chainable  so _date.addWeeks 1 .subtractDays 2   This really increases readability in complex date manipulation. ,dmmalam,closed,8,2011-10-13 20:43:51,2011-10-17 20:07:13,,Enhancement,,0.7.0,0,1
14226,moment/moment,24,Add _date.native   to retrieve the native Date object,Right now  there is no official way to retrieve the native Date object. You could access it before by _date  .date  but that will break when adding the getters and setters  as the internal date object will be called  _date._d .  There should be a function that returns the native date object that is safe in the future. ,timrwood,closed,0,2011-10-14 18:03:47,2011-10-14 22:41:52,,New Feature,,0.7.0,0,1
14225,moment/moment,25,Fix for moment not working under browserify,Small fix to the NodeJS detection to make the module work when run client side using browserify.  I think the way underscore does its client/server side check best  but didn t want to make that big a change. ,spmason,closed,4,2011-10-18 12:39:37,2011-10-18 16:41:47,,,,1,1
14224,moment/moment,26,Add moment.zone   to support multiple time zones., moment.zone    should return the default timezone.  moment.zone number   should change the default timezone.  Each moment should have a timezone.   moment.fn.zone    should return that moment s timezone.  moment.fn.zone number   should change that moment s timezone.  Upon creation  each moment should set it s timezone to the default timezone. ,timrwood,closed,1,2011-10-18 19:03:07,2011-10-27 23:23:02,,New Feature,,1.2.0,0,1
14223,moment/moment,27,Graceful failure tests,Add tests for graceful failures.   moment  10    MM DD YYYY     moment.lang  undef      NodeJS   browser. ,timrwood,closed,0,2011-10-18 19:05:17,2011-10-25 16:57:00,,,1.1.0,0,1
14222,moment/moment,28,More human relative time for seconds.,I noticed while doing sampling the library that seconds strings for relative time weren t really that  good  especially in the french translation so I kind of fixed it for both english and french  if some more experimented people could fix those in the other language files it would also be cool. ,keeguon,closed,5,2011-10-19 22:24:49,2011-10-20 02:47:47,,,,1,1
14221,moment/moment,29,i18n: format date,First I just want  to say that this is a great lib  gets the job done and has great i18n support.  Anyway  I m dealing with a website that has to show dates both in english and in portuguese  great to see that pt was already implemented  . It was all good  until I found this place where I need to write a full date in both languages.   I realized I would need 2 different formats: one for english   MMMM D  YYYY    October 20  2011  and one for portuguese   D  de MMMM  de YYYY    20 de Outubro de 2011 [and just now I see that I don t know if it s possible to escape the lowercase d  but anyway  focus] .  Is there a way to call  moment  .format    with no parameters so that it assumes a default formatting for the whole date?   If there isn t  it would be nice to implement it  I could give it a go.  Maybe a new token that contains the whole date and whole time  like  moment  .format  T  ; // 2:17 PM in english and 14:17 in portuguese . Though I have no idea what a good token would be for the whole date... ,rachel-carvalho,closed,5,2011-10-20 16:20:53,2011-10-21 20:21:40,,Enhancement,,1.1.0,0,1
14220,moment/moment,30,long date format,As discussed in  29 ,rachel-carvalho,closed,0,2011-10-21 19:55:49,2011-10-21 20:20:56,,,,1,1
14219,moment/moment,31,setters   falsey values,When using setters with falsey values  e.g.  0   the getter is called instead.  This is fixed by a null comparison to use the setter for anything but  null  and  undefined . ,braddunbar,closed,2,2011-10-24 22:19:25,2011-10-25 03:52:37,,,1.1.0,1,1
14218,moment/moment,32,setters   falsey values,When using setters with falsey values  e.g.  0   the getter is called instead.  This is fixed by a null comparison to use the setter for anything but  null  and  undefined . ,braddunbar,closed,4,2011-10-25 03:55:07,2011-10-25 16:05:16,,,,1,1
14217,moment/moment,33,Added ability to show unix timestamp in formatted date,Now you can use  U  for unix timestamp with second resolution and  u  for unix timestamp with millisecond resolution. ,bobrik,closed,4,2011-10-25 08:07:07,2011-11-28 18:20:51,,,,1,1
14216,moment/moment,34,moment doesn t compile with closure compiler,Thanks for a nice library.  Using: http://code.google.com/closure/compiler/  Around line 403 is this:          native : function              return this._d;             http://en.wikibooks.org/wiki/JavaScript/Reserved_Words  native is a reserved word in ECMAScript v3.  Commenting out the above code makes things compile. ,lookfirst,closed,18,2011-10-29 01:08:05,2011-12-01 02:07:39,,,,0,1
14215,moment/moment,35,Add some common masks,pulled from another library...       default :       ddd mmm dd yyyy HH:MM:ss   shortDate:       m/d/yy   mediumDate:      mmm d  yyyy   longDate:        mmmm d  yyyy   fullDate:        dddd  mmmm d  yyyy   shortTime:       h:MM TT   mediumTime:      h:MM:ss TT   longTime:        h:MM:ss TT Z   isoDate:         yyyy mm dd   isoTime:         HH:MM:ss   isoDateTime:     yyyy mm dd T HH:MM:ss   isoUtcDateTime:  UTC:yyyy mm dd T HH:MM:ss Z    fbDateTime:      mmm dS @ h:MMtt      ,lookfirst,closed,1,2011-10-31 03:41:02,2011-10-31 16:53:42,,,,0,1
14214,moment/moment,36,a few changes...,Added the concepts of masks. Added a toDate   method. Added parsing and generation for the  standard  AM/PM key of  tt  or  TT . ,lookfirst,closed,4,2011-10-31 04:37:13,2011-10-31 05:01:29,,,,1,1
14213,moment/moment,37,fix for french language   time elapsed in the same second,  February month is  F v  and not  Fev  in french   If difference between moment and new.date   is equal to zero  it write that moment will happend in the future or it s in the past. ,jfroffice,closed,3,2011-11-02 00:19:31,2011-11-03 16:29:13,,,1.1.1,1,1
14212,moment/moment,38,Various fixes for French.,Various fixes for French. Lots of spelling rules where not respected. ,martoche,closed,6,2011-11-05 19:31:49,2011-11-07 22:43:33,,,1.1.1,1,1
14211,moment/moment,39,Moment.format  YY   Returns Zero filled Year,A really quick modification to have the  YY  output formatter return the year leftZeroFilled to the two digits the format suggests. This is the one thing that tripped me up with this wonderful library. ,jgwhite,closed,1,2011-11-07 01:41:31,2011-11-07 17:21:28,,,1.1.1,1,1
14210,moment/moment,40,Timezone localization in unit tests is tied to PST,lang tests.js expects to see  zz  localize to  PST   which fails in other timezones.  I ve been trying to figure a way round this without introducing extra untested logic or crazy mock dates  but so far have drawn a blank  so posting it up for discussion  ,jgwhite,closed,4,2011-11-08 09:22:49,2011-11-08 18:34:18,,,1.1.1,0,1
14209,moment/moment,41,Generalized Unit Test for  zz ,Changed lang tests such that  moment.format  zz    is expected to simply return 3 or 4 uppercase letters  rather than specifically  PST .  Also moved my own  moment.format  YY    test in alongside the lang tests. ,jgwhite,closed,3,2011-11-08 18:32:52,2011-11-08 21:42:58,,,1.1.1,1,1
14208,moment/moment,42,Add time specific diffs,Placeholder issue for adding the functionality.  Committed in b82b34b97f03aedc788176c381120e402a6a220b ,timrwood,closed,0,2011-11-08 21:52:21,2011-11-08 21:52:33,,,1.1.1,0,1
14207,moment/moment,43,November 31 is not a valid date,Changed to November 30 ,wesbos,closed,1,2011-11-09 18:52:44,2011-11-09 19:29:23,,,,1,1
14206,moment/moment,44,Contain scope in unit tests,The unit tests were breaking in IE because the presence of  var moment  was stamping over  window.moment .  To fix this  I ve wrapped the unit tests and lang tests in a closure. ,jgwhite,closed,1,2011-11-09 19:49:35,2011-11-10 17:40:23,,,,1,1
14205,moment/moment,45,Allow numbers and letters as field separators in parsing format,For instance  when parsing a ISO 8601 date string where the letter T is a separator between the date and the time values. The following code sample results incorrectly as  2011 11 01T00:11:11 .      moment  2011 11 11T11:11:11    YYYY MM DDTHH:mm:ss  .format  YYYY MM DDTHH:mm:ss  ;      This is due to the regex  [0 9a zA Z]  in the format to array parsing ending up with a token  DDTHH  instead of  DD  and  HH  being separate tokens. My suggestion would be introducing an escape character for alphanumeric separators. ,hleinone,closed,5,2011-11-10 12:27:36,2011-11-10 18:01:58,,,,0,1
14204,moment/moment,46,Why use split   to create array?,I like looking at other peoples  code because I always seem to learn something new. As I was looking through moment.js I noticed you initialize some member variables with split   to create an array instead of just creating an array. So  what s the reasoning for doing this:  shortcuts =  Month Date Hours Minutes Seconds .split       instead of this:  shortcuts = [ Month   Date   Hours   Minutes   Seconds ]  Thanks  ,chadhutchins,closed,3,2011-11-10 13:57:55,2011-11-10 17:30:29,,,,0,1
14203,moment/moment,47,Re generated site w/ spanish translation,Re generated site w/ spanish translation  ,julionc,closed,1,2011-11-10 15:50:12,2011-11-10 17:13:39,,,,1,1
14202,moment/moment,48,French locale,I came to the website today and found the site displaying this in French.   Jeudi  Novembre 10er 2011  4:55:30 pm   just wanted to point out that  10er  is not correct it should be only  10 . the suffix  er is only used for 1. Otherwise no suffixes are used in dates. ,Floby,closed,12,2011-11-10 15:58:30,2011-11-11 16:30:14,,,,0,1
14201,moment/moment,49,use conventional syntax for formatting,I don t know why you invented your own format specifiers  but things like stftime  and that family of methods  have a well known set of format specifiers. Would be nice if you could just use those instead of making new ones which won t match up to what someone may already be using. ,defunctzombie,closed,5,2011-11-10 16:44:21,2011-11-10 17:23:55,,,,0,1
14200,moment/moment,50,Closure for unit tests.js,This is just the little bit that was missing from merge commit https://github.com/timrwood/moment/commit/b4f446aecca306ea9970266f6b0f1fb3b92cb3e5  This should see the tests passing completely in IE. ,jgwhite,closed,0,2011-11-10 21:52:39,2011-11-11 16:04:08,,,,1,1
14199,moment/moment,51,Dutch Translation,As requested  the dutch translation in a Pull Request  Regards  Joris ,jorisroling,closed,0,2011-11-11 08:41:11,2011-11-11 16:03:14,,,,1,1
14198,moment/moment,52,Added support for Swedish i18n,Use language code  sv  Unit tests added and checked ,ulmus,closed,1,2011-11-11 19:10:04,2011-11-12 02:12:23,,,,1,1
14197,moment/moment,53,Added support for the Polish language.,Simple Polish language support. Language code: pl. ,evoL,closed,1,2011-11-11 19:51:50,2011-11-12 02:12:29,,,,1,1
14196,moment/moment,54,Add German translation,Language code  de ; tests pass. ,lluchs,closed,0,2011-11-11 20:46:47,2011-11-12 01:35:13,,,,1,1
14195,moment/moment,55,All  format timezone  tests fail for me in Chrome and FF  but pass in IE9,via http://www.momentjs.com/test/  Chrome: Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/535.2  KHTML  like Gecko  Chrome/15.0.874.106 Safari/535.2 Tests completed in 72 milliseconds. 621 tests of 633 passed  12 failed.  FF: Mozilla/5.0  Windows NT 6.1; WOW64; rv:7.0.1  Gecko/20100101 Firefox/7.0.1 Tests completed in 70 milliseconds. 621 tests of 633 passed  12 failed.  IE9:  Mozilla/5.0  compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; MDDC; InfoPath.2; .NET4.0C; .NET4.0E  Tests completed in 189 milliseconds. 633 tests of 633 passed  0 failed.   lulz at IE9 s duration  ,Lobstrosity,closed,14,2011-11-11 23:15:58,2011-11-14 17:58:38,,,1.1.2,0,1
14194,moment/moment,56,Moments can t be cloned,This was unexpected for me:      javascript var first = moment  2011 11 11  ; var second = moment first ; first.add  days   1 ; second.valueOf   === first.valueOf  ; // true       The second line assigns the same  Date  object to the new moment  so whenever the first changes  the second does too.  This is a workaround:      javascript var second = moment first.valueOf   ;      But it s not really intuitive. I think it d be nice for the constructor to handle that for you   and/or add a  clone    method. ,mhart,closed,1,2011-11-12 05:58:58,2011-11-15 17:27:37,,,1.1.2,0,1
14193,moment/moment,57,dateFromArray should construct native Date with UTC rather than varying local timezone,,welwood08,closed,1,2011-11-12 09:47:39,2011-11-12 10:13:22,,,1.1.2,1,1
14192,moment/moment,58,Passing null as dateTimeString to moment dateTimeString  format  should give null out  not error,Se title ,ulmus,closed,4,2011-11-12 11:52:24,2011-11-12 19:57:59,,,1.1.2,0,1
14191,moment/moment,59,See issue  58,,ulmus,closed,0,2011-11-12 11:58:26,2011-11-12 19:58:24,,,1.1.2,1,1
14190,moment/moment,60,Added support for functions in addition to strings in the relativeTime object,More information at evoL@c7edf55e4b02d878e497df14284b8e44e5ccfc91.  Also I ve updated the Polish language file to reflect those changes. ,evoL,closed,4,2011-11-12 14:02:48,2011-11-14 17:12:15,,,1.1.2,1,1
14189,moment/moment,61,Custom  LDML like pattern language which is not LDML,Why does moment create yet another custom datetime pattern language instead of using [LDML s date formats patterns] http://unicode.org/reports/tr35/ Date_Format_Patterns ? ,masklinn,closed,2,2011-11-12 14:04:24,2011-11-14 23:52:04,,,,0,1
14188,moment/moment,62,Added russian translation,Thanks for nice JS tool  ,Viktorminator,closed,0,2011-11-13 12:33:35,2011-11-14 17:40:20,,,1.1.2,1,1
14187,moment/moment,63,Use of  float  as a variable name,Google s Closure Compiler is unable to deal with moment.js as it considers  float  a future reserved word which it has probably taken from the es3 spec  interestingly enough  not es5 .  I don t necessarily think this should be  fixed   but thought it potentially useful to document the issue here in case anyone else stumbles across the same problem. ,davidpadbury,closed,1,2011-11-14 15:17:34,2011-11-14 17:59:02,,,1.1.2,0,1
14186,moment/moment,64,fromNow   on dates in the past is wrong,Today is 2011 11 14.      var aWhileAgo = moment [2011  10  30] ; console.log aWhileAgo.fromNow   ;  in 15 days   var aWhileAgo = moment [2011  11  5] ; console.log aWhileAgo.fromNow   ;  in 20 days   var aWhileAgo = moment [2010  11  5] ; console.log aWhileAgo.fromNow   ;  11 months ago   var aWhileAgo = moment [2011  10  5] ; console.log aWhileAgo.fromNow   ;  10 days ago       It seems that  fromNow    is broken for dates in the recent past. ,vandrijevik,closed,4,2011-11-14 17:33:43,2011-11-14 17:49:56,,,1.1.2,0,1
14185,moment/moment,65,Cleaned up the Polish language file,Cleaned up according to the docs. ,evoL,closed,1,2011-11-14 18:15:39,2011-11-14 18:20:04,,,1.1.2,1,1
14184,moment/moment,66,Add Norwegian  Bokm l  translation,,rexxars,closed,3,2011-11-15 15:14:19,2011-11-15 17:06:46,,,,1,1
14183,moment/moment,67,AM/PM should be part of i18n,I think AM/PM should be part of i18n.  For example   10:30 AM =>    10:30  Korean  ,kyungw00k,closed,1,2011-11-15 17:02:17,2011-11-15 17:43:34,,,,0,1
14182,moment/moment,68,Validation,I would like to use moment in a project  but it does not provide any kind of reliable validation. For example:      > moment  yams    HH:ss     _d: Mon  01 Jan 1900 05:00:00 GMT        Unfortunately moment treats  yams  as a valid date string because it has  am  in it. Ideally  when the input doesn t match the provided format string  it would somehow present an error instead of continuing as if the user had actually given valid input. ,chrisfarber,closed,3,2011-11-15 21:00:29,2011-12-21 18:14:12,,,,0,1
14181,moment/moment,69,iso8601,Hey   Do you plan on supporting iso8601? It would be really nice as the javascript Date object doesn t support it.  Thanks ,karellm,closed,5,2011-11-15 22:52:03,2011-11-16 00:58:39,,,,0,1
14180,moment/moment,70,Add Korean Translation,I added korean translation kr.js and test/kr.js ,kyungw00k,closed,1,2011-11-16 02:26:17,2011-11-16 17:05:40,,,,1,1
14179,moment/moment,71,Timezone Translation,I currently store my dates in UTC  and I d like to use Moment.js and jQuery to translate them into the local timezone. Is Moment.js capable of doing this?  ,naftulikay,closed,7,2011-11-16 05:15:24,2011-11-16 23:38:46,,,,0,1
14178,moment/moment,72,parse by month name not supported?,var str = moment [2011  11  19] .format  DD MMM YYYY  ; console.log moment str   DD MMM YYYY  .native  .toString   ; // ==>  Tue Dec 19 1899 00:00:00 GMT 0800  China Standard Time   ,jackysee,closed,2,2011-11-16 08:30:51,2011-11-17 01:20:58,,,,0,1
14177,moment/moment,73,Meridiem is misspelled as meridian,https://github.com/timrwood/moment/blob/52216a525ba4f6a2bd1eb85a9d99b17823da3a59/moment.js L366 ,timrwood,closed,0,2011-11-16 23:39:27,2011-11-17 01:30:54,,,,0,1
14176,moment/moment,74,Fixed 12:00 am bug,The string  12:00 am  was being parsed as 12:00 pm.  I fixed that and added a test.  This was the bug:      moment  12:00 am    h:mm a  .hours   == moment  12:00 pm    h:mm a  .hours       ,rockymeza,closed,0,2011-11-18 19:57:04,2011-11-28 17:33:54,,,,1,1
14175,moment/moment,75,Add timezone information to parser and formatter,Moment.js does not support parsing dates formatted according to ISO8601  with timezone offset . Most browsers support that format natively  but IE9 doesn t. ,NetForce1,closed,9,2011-11-21 13:40:01,2011-12-01 18:43:42,,,1.2.0,0,1
14174,moment/moment,76,A localized format with abbreviated month would be nice,It would really be nice to have a localized format that uses abbreviated month names  like Java s DateFormat.MEDIUM . ,NetForce1,closed,3,2011-11-21 13:43:05,2012-04-23 18:13:01,,Enhancement,,,0,1
14173,moment/moment,77,improvements for Dutch localization:,  no plural forms for  uur  and  jaar     een minuutje  is informal language ,NetForce1,closed,3,2011-11-21 16:14:10,2011-11-28 17:34:08,,,,1,1
14172,moment/moment,78,Adding across DST results in a difference of an hour,    js // create a date outside of Daylight Savings Time var m = moment new Date 2011  0  1  0  0  0  ; m.format  h:mm a  ; // 12:00 am  // change it to a date inside Daylight Savings Time m.add  weeks   20 ; m.format  h:mm a  ; // 1:00 am      If we cross the DST line by adding days  this also occurs      js // the day before DST in the US var m = moment new Date 2011  2  12  5  0  0  ; m.format  h:mm a  ; // 5:00 am  // DST day in the US m.add  days   1 ; m.format  h:mm a  ; // 6:00 am     ,rockymeza,closed,6,2011-11-21 18:26:15,2011-12-01 21:48:58,,,,0,1
14171,moment/moment,79,invalid parse if not using separator,I m getting this:  moment  15112011    DDMMYYYY  .year   == 43275  using any separator  it works  moment  15/11/2011    DD/MM/YYYY  .year   == 2011 ,anmaso,closed,1,2011-11-22 12:56:08,2011-11-28 17:40:10,,,,0,1
14170,moment/moment,80,error on documentation regarding constructor,The parser ignores non alphanumeric characters  so both moment  12 25 1995    MM DD YYYY  and moment  12  995    MM DD YYYY  will return the same thing.  may be it should say:  The parser ignores non alphanumeric characters  so both moment  12 25 1995    MM DD YYYY  and moment  12 25 1  995    MMDDYYYY  will return the same thing. ,anmaso,closed,2,2011-11-22 15:16:19,2011-11-28 18:13:18,,,,0,1
14169,moment/moment,81,added isDST method to moment.fn,Added an isDST method with tests as per discussion in  78. ,rockymeza,closed,0,2011-11-29 05:25:04,2011-11-29 17:19:55,,,1.2.0,1,1
14168,moment/moment,82,Add documentation for moment.fn.isDST,See issue  81 and  78 ,timrwood,closed,1,2011-11-29 17:22:02,2011-12-01 18:55:48,,,1.2.0,0,1
14167,moment/moment,83,Add unit tests and documentation for moment.fn.zone,See this commit:  3aa1ad5 ,timrwood,closed,0,2011-11-29 17:30:41,2011-12-01 19:21:32,,,,0,1
14166,moment/moment,84,Add GB language file.,Added British language file for correct date formats. ,chrisgedrim,closed,0,2011-11-30 16:04:51,2011-11-30 17:22:46,,,1.2.0,1,1
14165,moment/moment,85,Add documentation for parsing and formatting timezones,,timrwood,closed,0,2011-12-01 01:19:58,2011-12-01 18:38:47,,,1.2.0,0,1
14164,moment/moment,86,correct monthsShort  Feb  to  Fev ,,ruanmer,closed,0,2011-12-02 06:36:02,2011-12-02 17:17:33,,,,1,1
14163,moment/moment,87,if millis are less than an hour moment will return one hour,I spotted out  that if you have millis like 3 390 000. this amount is less than an hour   3 600 000 .  here is what i do:   moment 3390000 .format  mm  ;  // result: 56 moment 3390000 .format  H  ;  // result: 1  it should be 0. ,chrkaatz,closed,3,2011-12-02 10:30:17,2011-12-21 18:13:58,,,,0,1
14162,moment/moment,88,if you pass today s date and do fromNow it should say today,if you pass today s date and do fromNow it should say today it tells you that it is in one yea and should tell you it is today ,ghost,closed,6,2011-12-05 18:12:41,2011-12-19 17:57:32,,,,0,1
14161,moment/moment,89,Retrieve date of day in a given week,It would be neat to have something like this:  moment 30 .week  .monday  ; //this would retrieve the monday of the given week number ,cburgdorf,closed,3,2011-12-07 11:53:29,2011-12-16 00:59:25,,,,0,1
14160,moment/moment,90,incorrect result on iPhone,Just ran a quick test app on the iPhone simulator and it seems to measure time differently.  I was getting the diff of two moments and on a desktop browser the result was 1 hour  on iPhone it was 1 year ,urbian,closed,6,2011-12-07 14:59:15,2011-12-21 18:02:15,,,,0,1
14159,moment/moment,91,Failed tests in Chrome   timezone and DST,Everyone s favourite part of JS Dates   timezones and DST.  4 failures on tests in Chrome  I ve removed the passed ones . I m in Hong Kong  HKT  which is GMT 0800.      18. add and subtract: adding across DST  1  2  3   2  adding hours over DST difference should result in a different hour Expected:   6 Result:     5 Diff:       6 5    29. format: format timezone  2  2  4   3    8:00    > Something like   07:30  4    800    > Something like   0700    30. format: isDST  1  1  2   2  2011 March 14 is DST      I m really keen to switch to using moment.js instead of dateJS in our app at work  but we deal with a lot of dates cross timezones so gotta make sure it can handle whatever we throw at it   Great work so far by the way.  Cheers  ,wjcrowcroft,closed,5,2011-12-08 04:24:27,2011-12-09 17:32:45,,Unit Test Failed,,,0,1
14158,moment/moment,92,diff is calculating wrong when I use 24 hours,    javascript var end = moment  11:00    HH:mm  ; var start = moment  08:00    HH:mm  ; end.diff start   hours   // it returns 3  so that s OK  var end = moment  12:00    HH:mm  ; var start = moment  08:00    HH:mm  ; end.diff start   hours   // it returns  8 instead of 4     ,harlley,closed,3,2011-12-09 12:36:08,2011-12-09 17:35:00,,,,0,1
14157,moment/moment,93,fixes format for negative timezone offsets  Z  and  ZZ ,The last two  format timezone  tests were broken here in Switzerland.  E.g. Z returned  1:00 instead of  01:00 ,caillou,closed,0,2011-12-09 12:46:03,2011-12-09 17:14:55,,,,1,1
14156,moment/moment,94,No support comparison APIs,while moment.diff does a good job of displaying the difference visually/textually  it is important  at least for my selfish needs  to have comparison tools available from JS itself.  For example  to determine if a given moment is between two other moments  if a moment is before or after another moment   etc.  Basically some of the tools that Date.js supports :  ,aroman,closed,2,2011-12-10 22:45:08,2011-12-11 02:32:48,,,,0,1
14155,moment/moment,95,Cross Browser TimeWithZone Support,It would be great if we could have Moment transparently persisting the zone for a momentized date.  For example  when creating a moment from a timestamp with zone  I would expect the following behaviour:      javascript var m = moment  2009 12 05T10:00:00 0500  ; m.zone  ;       // =>  300 m.format  ZZ  ; // =>   0500       I understand this is a significant extension of native javascript behaviour  but thought it would be worth raising as a possible goal for future versions.  Also  please forgive me if I ve missed something and not realised that Moment actually does already support this  ,jgwhite,closed,4,2011-12-11 18:26:33,2012-02-02 18:32:44,,,,0,1
14154,moment/moment,96,npm install moment faild,When I  install moment use       npm install moment      got the error below:      npm ERR  Failed unpacking /tmp/npm 1323692479516/1323692479516 0.8442311841063201/tmp.tgz npm ERR  couldn t unpack /tmp/npm 1323692479516/1323692479516 0.8442311841063201/tmp.tgz to /tmp/npm 1323692479516/1323692479516 0.8442311841063201/contents npm ERR  Error:  tar   zmvxpf   /tmp/npm 1323692479516/1323692479516 0.8442311841063201/tmp.tgz   npm ERR  failed with 2 npm ERR      at ChildProcess.<anonymous>  /opt/node/lib/node_modules/npm/lib/utils/tar.js:217:20  npm ERR      at ChildProcess.emit  events.js:67:17  npm ERR      at Socket.<anonymous>  child_process.js:172:12  npm ERR      at Socket.emit  events.js:64:17  npm ERR      at Array.0  net.js:831:12  npm ERR      at EventEmitter._tickCallback  node.js:126:26  npm ERR  Report this  entire  log at: npm ERR      <http://github.com/isaacs/npm/issues> npm ERR  or email it to: npm ERR      <npm @googlegroups.com> npm ERR   npm ERR  System Linux 2.6.18 164.11.1.el5 npm ERR  command  node   /opt/node/bin/npm   install   moment  npm ERR  cwd /home/wwwroot/fenxiang/server npm ERR  node  v v0.4.12 npm ERR  npm  v 1.0.106 npm ERR   npm ERR  Additional logging details can be found in: npm ERR      /home/wwwroot/fenxiang/server/npm debug.log      but  when I use version 1.1.1 . there is no error and I got it installed.      npm install moment@1.1.1      It is like someting wrong with the version 1.2.0.  ,maxbbn,closed,2,2011-12-12 11:01:41,2011-12-16 00:53:49,,,,0,1
14153,moment/moment,97,[translations] Added euskara as a language  eu ,Euskara translation added  with tests. I haven t committed the minified versions in  /site  and I haven t added the language to the  build.js  file  but it is tested and should be ready to go. ,eillarra,closed,3,2011-12-12 15:43:39,2011-12-12 18:11:46,,,,1,1
14152,moment/moment,98,danish translation added,added danish translation and test files ,mrbase,closed,1,2011-12-13 11:35:57,2011-12-15 21:30:51,,,,1,1
14151,moment/moment,99,Added shortcut for getting / setting milliseconds,Looks like it was the only one missing. ,chetan51,closed,1,2011-12-14 10:50:57,2011-12-15 21:16:49,,,,1,1
14150,moment/moment,100,Relative date and localized time,  Adds the relativeDate method that gives a date relative to now. E.g.  moment  .add  d:1  .relativeDate    returns _Tomorrow at 1:00 PM_   Adds the localized time format  LT  that returns _13:00_ in Europe and _1:00 PM_ in the USA ,caillou,closed,2,2011-12-14 13:17:22,2011-12-15 21:48:33,,,,1,1
14149,moment/moment,101,Add moment.fn.day as a setter,Setting to 0 to 6 should set to this week s equivalent.   Setting to 7 to 13 should set to next week s equivalent.  Setting to  7 to  1 should set to last week s equivalent.  Etc... ,timrwood,closed,0,2011-12-16 00:57:44,2011-12-22 17:55:31,,New Feature,,1.3.0,0,1
14148,moment/moment,102,Add moment.fn.calendar documentation,See  100 and  17 ,timrwood,closed,0,2011-12-16 01:02:37,2011-12-21 18:01:27,,,1.3.0,0,1
14147,moment/moment,103,Add moment.fn.format escape blocks documentation,See  100  17 ,timrwood,closed,1,2011-12-16 01:03:12,2011-12-21 01:42:51,,,1.3.0,0,1
14146,moment/moment,104,Add moment.fn.format escape blocks tests,See  100  17 ,timrwood,closed,0,2011-12-16 01:03:46,2011-12-21 01:42:31,,,1.3.0,0,1
14145,moment/moment,105,Moment for unix time not working?,I must be doing something wrong.  But when typing into Firefox console in my site with moment 1.2.0: moment 1324011850   The result is: Thu Jan 15 1970 23:46:51 GMT 0800  PST    _d=Date  clone=function    valueOf=function    more...   Is it possible that unix time is broken? ,mb-dev,closed,2,2011-12-16 05:07:12,2011-12-16 07:56:49,,,,0,1
14144,moment/moment,106,Error with fromNow function,I use moment.js and the fromNow function to get the age of a user. Normally  the age should change between yesterday and today but it doesn t and instead  it change during June  and we are in December .  Here is a demo : http://jsfiddle.net/gPZ9V/3/ ,pjehan,closed,2,2011-12-16 08:22:56,2011-12-20 21:16:49,,,,0,1
14143,moment/moment,107,ISO8601 UTC Support?,Looking to replace Date.js and a bunch of hacks in a JS Application. Does moment.js support  cross browser  parsing of and conversion to the ISO8601 UTC Format? 2011 12 16T06:00:00.000Z ,topherez,closed,6,2011-12-16 17:46:33,2011-12-20 23:05:48,,,,0,1
14142,moment/moment,108,Incorrect parsing of times without separators   20101112   etc ,This works:      moment  2010    YYYY  .format  YYYY  ;  2010       These don t work:      moment  201211    YYYYMM  .format  YYYY  ;  201210  moment  20101112    YYYYMMDD  .format  YYYY  ;  NaN      ,davidcalhoun,closed,1,2011-12-17 04:17:33,2011-12-19 17:34:43,,,,0,1
14141,moment/moment,109,moment  .date   should be zero indexed,Documentation on http://momentjs.com/docs/ /display/month implies that date   is zero indexed. However  it is not.    moment  .date  ; // get the date  0   31   day    year    month   are all zero indexed.  If today is Jan  1:     moment  .month   // returns 0    moment  .date   // returns 1 ,shuw,closed,1,2011-12-19 00:32:45,2011-12-19 17:14:12,,,,0,1
14140,moment/moment,110,Add moment.calendar translation for danish,See  100 for the background on the feature.  See https://github.com/timrwood/moment/blob/b9c0176c205e427212130e227a88016b0848590e/moment.js L413 for the format for the code.  @mrbase  do you mind helping out with this? ,timrwood,closed,2,2011-12-21 17:59:21,2011-12-22 17:00:22,,,1.3.0,0,1
14139,moment/moment,111,Add moment.calendar translation for euskara,See  100 for the background on the feature.  See https://github.com/timrwood/moment/blob/b9c0176c205e427212130e227a88016b0848590e/moment.js L413 for the format for the code.  @eillarra  do you mind helping out with this? ,timrwood,closed,2,2011-12-21 18:00:52,2012-01-05 17:26:46,,,1.3.0,0,1
14138,moment/moment,112,Add moment.calendar translation for danish,Here is the patch for issue  110 ,mrbase,closed,1,2011-12-22 07:47:55,2011-12-22 16:59:45,,,,1,1
14137,moment/moment,113,12:00 calculate wrong when I use 24 hours,var t = moment  12:00   H:mm  ; t.hours   will be 0  and not 12 ,giomi88,closed,1,2011-12-22 08:03:20,2011-12-22 17:08:48,,,1.3.0,0,1
14136,moment/moment,114,Parsing twitter date string gives wrong result,Using Twitter API  you can retrieve the created_at attribute of a tweet  ie.  Tue Dec 20 11:08:50  0000 2011  Trying to parse it with Moment :   moment  Tue Dec 20 11:08:50  0000 2011    ddd MMM DD HH:mm:ss ZZ YYYY    I get this result: Sat Nov 10 1900 02:33:31 GMT 0100  CET .  I saw on previous issue  that un separated strings are not supported at this time  but this one has everything separated. ,emmanuelgeoffray,closed,5,2011-12-23 09:55:52,2012-01-13 17:24:19,,,,0,1
14135,moment/moment,115,ISO calendar relative dates useful?,I have written an application that uses what I m calling ISO calendar relative dates   year  week number  day of week  minute of day   instead of absolute dates.  I added a couple of methods to moment to convert back and forth between ISO calendar relative dates and moment objects.  This is useful because I am building a week calendar  and I only need the dates in terms of weeks.  It allows me to copy events across weeks and to not have to deal with full dates when I don t need to.  Do you think this would be useful for anybody else?  Would moment be benefited by having it?    Example Usage      javascript moment new Date 2011  11  23  .toRelative  ; // [2011  51  5  0]     ,rockymeza,closed,8,2011-12-24 04:26:59,2012-01-13 17:21:17,,,,0,1
14134,moment/moment,116,Parse dates in RFC 2822 format as seen in HTTP headers,Hi. Have you ever seen a HTTP response header? The  last modified  field looks like this       last modified :  Tue  27 Dec 2011 02:12:35 GMT        It s a string representing a date and time according to a format defined in [RFC 2822] http://tools.ietf.org/html/rfc2822 section 3.3 . Alas  [JavaScript s date object] https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date  and methods are too weak to parse it. It would be extremely helpful to offer a capable helper method to parse this string to Javascript Date object. ,hickford,closed,1,2011-12-27 15:33:55,2011-12-27 16:57:44,,,,0,1
14133,moment/moment,117,Add support for parsing month names,,timrwood,closed,0,2011-12-28 18:53:15,2011-12-28 18:55:13,,,1.3.0,0,1
14132,moment/moment,118,Add documentation for parsing month names,,timrwood,closed,0,2011-12-28 18:54:58,2012-01-05 17:58:22,,,1.3.0,0,1
14131,moment/moment,119,Any chance we can support native JSON encoded strings?,It would be awesome to provide a JSON encoded string as a parameter and have it be understood and correctly parsed. ,joliver,closed,6,2011-12-29 05:14:29,2012-01-13 17:00:46,,,1.4.0,1,1
14130,moment/moment,120,Add galician locale  es gl ,Galician locale strings file and tests added. ,juanghurtado,closed,3,2011-12-29 12:52:16,2012-01-03 18:30:56,,,,1,1
14129,moment/moment,121,toISO method,rather than manually specify the ISO format  would be nice to have a shortcut method that returns the ISO string representation. ,peterbraden,closed,10,2012-01-02 21:30:40,2012-02-28 18:16:49,,,1.5.0,0,1
14128,moment/moment,122,make test    make build,It is not obvious how to run the tests or how to build the site for moment.  It would be nice to have some documentation on how to contribute to the project  how to run the tests from the command line  and how to build the site.  Additionally  it would be nice to have a familiar interface  via a Makefile  for testing and building the site. ,rockymeza,closed,6,2012-01-04 08:20:06,2012-02-12 03:22:30,,,Move to makefiles,0,1
14127,moment/moment,123,00:00:00 should not be equal to 12:00:00 when parsed with h:m:s format,These seem to be the wrong results   am I doing something wrong?  moment  12:00:00    hh:mm:ss  .format  hh:mm:ss  ; //  12:00:00  moment  00:00:00    hh:mm:ss  .format  hh:mm:ss  ; //  12:00:00   seems to be incorrect   moment  12:30:00    hh:mm:ss  .format  hh:mm:ss  ; //  12:30:00  moment  00:30:00    hh:mm:ss  .format  hh:mm:ss  ; //  12:30:00   seems to be incorrect  ,davidcalhoun,closed,4,2012-01-06 22:45:40,2012-01-13 17:20:11,,,1.4.0,0,1
14126,moment/moment,124,added datePart  ,A few things here:   The actual purpose: added a  datePart    that strips out hours  minutes  seconds  and milliseconds   Some simple tests   I added the node modules required to build to devDependencies in package.json. That made it a lot easier to get it building. I hope I didn t misunderstand something.   I couldn t build as is because of file name case sensitivity  so I renamed en GB.js to en gb.js. ,icambron,closed,3,2012-01-09 22:07:34,2012-01-11 17:30:13,,,1.4.0,1,1
14125,moment/moment,125,isDst   test fails,    format: isDST  1  1  2  March 12 2011 is not DST March 14 2011 is DST  Note: this unit test should fail if your timezone does not have Daylight Savings Time       Most likely it is caused by my timezone: it is New Zealand Auckland  NZDT  so we have summer in december january fabruary thus DST is in these months ,zerkms,closed,3,2012-01-10 03:38:30,2012-02-03 19:07:32,,,1.4.0,0,1
14124,moment/moment,126,parsing works without format  doesn t with,Hi there   I m having issues parsing a date with a format string  whereas without the string is works  I can t just parse without the format all the time as I actually need to pass multiple formats and some of those aren t parsed properly   Examples  run in Chrome   also true in most other browsers I ve tried        moment  May 20  2011  .native  .toString    >  Fri May 20 2011 00:00:00 GMT 0100  BST     moment  May 20  2011    MM DD  YYYY  .native  .toString    >  Fri Feb 01 1907 00:00:00 GMT 0000  GMT     moment  May 20  2011    MMM DD  YYYY  .native  .toString    >  Fri Jul 01 2067 00:00:00 GMT 0100  BST     moment  May 20  2011    M D  YYYY  .native  .toString    >  Fri Feb 01 1907 00:00:00 GMT 0000  GMT        Thanks  Steve ,spmason,closed,4,2012-01-11 12:47:43,2012-02-02 18:41:33,,,,0,1
14123,moment/moment,127,clarify 24 hour time  H/HH is 24 hour  h/hh is 12 hour ,based on comments on issue  123 ,davidcalhoun,closed,3,2012-01-11 16:22:34,2012-01-11 17:13:34,,,1.4.0,1,1
14122,moment/moment,128,Add requirejs  AMD  support,,mlegenhausen,closed,5,2012-01-11 20:21:09,2012-11-09 00:06:43,,,1.4.0,0,1
14121,moment/moment,129,Add Catalan  ca  locale,Add Catalan  Catalonia  Spain  locale file and tests. ,juanghurtado,closed,1,2012-01-11 21:51:17,2012-01-13 16:55:35,,,1.4.0,1,1
14120,moment/moment,130,Issue  128,RequireJS allows to use moment as a module  which is nice when building larger javascript applications.  I added a simple check that looks for the  define  method and look if it is compatible with CommonJS AMD. I took the code from jquery so it should be correct ;  ,mlegenhausen,closed,0,2012-01-11 22:03:08,2012-01-13 17:18:53,,,1.4.0,1,1
14119,moment/moment,131,Diff shouldn t be rounded.,If I compare  _.date  2012 01 13    YYYY MM DD  .diff _.date     days    and today is  2012 01 13 12:00:01  the diff is above 0.5 so it says that there is one day difference. ,masylum,closed,6,2012-01-13 12:31:02,2012-01-13 17:29:38,,,1.4.0,1,1
14118,moment/moment,132,Introduced  added  and  subtracted  functions,Introduced  added  and  subtracted  functions on moment prototype  for adding and subtracting time but returning a modified object copy  leaving the original moment object intact. Also made a short  simple unit test and updated the docs. Did not commit build generated files. ,magwo,closed,9,2012-01-13 14:24:13,2012-01-30 16:41:59,,,1.4.0,1,1
14117,moment/moment,133,Add documentation for parsing ASP.NET json dates,See  119 ,timrwood,closed,0,2012-01-13 17:01:40,2012-02-03 18:46:23,,,1.4.0,0,1
14116,moment/moment,134,Add documentation for developing library  node build   node test ,See  122 ,timrwood,closed,1,2012-01-13 17:02:47,2012-03-30 17:10:45,,,Move to makefiles,0,1
14115,moment/moment,135,Turkish language files added.,,erhangundogan,closed,1,2012-01-13 22:45:03,2012-01-19 16:42:05,,,1.4.0,1,1
14114,moment/moment,136,added sod and eod,I m not sure how to attach new diffs to an existing pull request  so here s a new one. Per your request  I haven t checked in the built files  just the changed source files. ,icambron,closed,2,2012-01-14 17:42:46,2012-01-19 16:37:05,,,1.4.0,1,1
14113,moment/moment,137,b.match is not a function.,Easily fixed on line 214; type cast the string argument to a string.  ,richard-clifford,closed,2,2012-01-17 09:41:12,2012-02-02 18:03:10,,,1.4.0,0,1
14112,moment/moment,138,Moment.calendar wrong example in documentation,in the documentation  the snippet for moment.calendar refers to moment.meridiem       moment.meridiem =   lastDay :  [Yesterday at] LT   sameDay :  [Today at] LT   nextDay :  [Tomorrow at] LT   lastWeek :  [last] dddd [at] LT   nextWeek :  dddd [at] LT   sameElse :  L   ;      should be      moment.calendar =   lastDay :  [Yesterday at] LT   sameDay :  [Today at] LT   nextDay :  [Tomorrow at] LT   lastWeek :  [last] dddd [at] LT   nextWeek :  dddd [at] LT   sameElse :  L   ;     ,danielepolencic,closed,1,2012-01-20 17:26:51,2012-01-22 19:05:41,,,1.4.0,0,1
14111,moment/moment,139,Timezone offsets flipped?,I m pretty sure I must be doing something wrong here. it _appears_ that parsing  2012 01 21T17:08:01 05:00   EST  with or without the pattern  YYYY MM DDTHH:mm:ssZ  is subtracting 5 hours to get to UTC  rather than adding. As a result  my times when written back with format   are 10 hours behind. I get the expected result by flipping the comparison at line 301:      // reverse offsets if  a[0] ===            timezoneHours =  timezoneHours;     timezoneMinutes =  timezoneMinutes;        Surely this isn t right  am I parsing incorrectly? ,drinks,closed,17,2012-01-21 22:38:19,2012-01-30 16:38:11,,,1.4.0,0,1
14110,moment/moment,140, native  is a non standard  google reserved keyword,Closure compiler chokes on calls to  moment  .native   . There are probably no other contexts in which it would be problematic  but it s unfortunate to have to use _d rather than the proper date getter in code that will be compiled. ,drinks,closed,9,2012-01-21 22:59:26,2012-01-21 23:44:33,,,1.4.0,0,1
14109,moment/moment,141,getting a conversion error,moment  2012 01 24T00:00:00.000Z  .format  MM/DD/YYYY     01/23/2012  ,winterlightning,closed,2,2012-01-22 02:04:11,2012-01-22 22:34:32,,,1.4.0,0,1
14108,moment/moment,142,iOS 3.2/4.0 format errors,A simple test case   moment  2012 01 22T17:00:00 10:00  .format  h mm  ;   fails to be parsed correctly on iOS 3.x/4.x devices  tested with the iPhone simulator .  The output from the above code is  12 NaN .   These dates also fail:    2012 01 22T17:00:00     2012 01 22T17:00     1327215600000  ,brendo,closed,7,2012-01-22 14:24:59,2012-02-02 18:24:15,,,1.4.0,0,1
14107,moment/moment,143,Formatted diffs,Hi   Is there a way to easily format a diff between to dates ?  I would like to do for example :      var a = moment [2011  11  25  11  00] ; var b = moment [2011  11  25  12  30] ; console.log b.diff a   H[h]mm[min]   ;      and have  1h30min  in the console...  Do you think that kind of matter should handled by moment ? Would you like me to work on a PR ?  Cheers. ,hsablonniere,closed,7,2012-01-23 21:51:45,2012-02-02 18:34:22,,,1.4.0,0,1
14106,moment/moment,144,turn off debugging output?,I m trying out moment; so far it looks like a great module.  But when I make the following call I get about 100 lines of output on node s stdout  mentioning compiled functions:  moment [2012  0  1] .fromNow    Can this output be turned off?  This seems like odd default behavior.  Sorry if the answer is obvious; I m new to this. ,bobmayo56,closed,4,2012-01-24 07:58:59,2012-01-24 22:29:18,,,1.4.0,0,1
14105,moment/moment,145,Incorrect parsing when passing string with format at 12 Noon.,moment  2012 01 25T11:00:00    YYYY MM DDTHH:mm:ss  .format  HH   returns  11  moment  2012 01 25T12:00:00    YYYY MM DDTHH:mm:ss  .format  HH   returns  0  moment  2012 01 25T13:00:00    YYYY MM DDTHH:mm:ss  .format  HH   returns  13  ,topherez,closed,2,2012-01-25 16:58:36,2012-01-25 20:40:35,,,1.4.0,1,1
14104,moment/moment,146,Parsing time spans,I can t even imagine how hard this might be  but I would love it if moment.js could parse time spans. i.e.  moment  2 sec  ; //would return a time span of 2 seconds moment  3 min  ; //would return a time span of 3 minutes ,drusellers,closed,4,2012-01-27 03:53:27,2012-01-27 16:12:22,,,1.4.0,0,1
14103,moment/moment,147,Parsing String   Format doesn t handle timezone,Parsing an email date string doesn t work by default:  var email_date =  Mon  23 Jan 2012 08:36:10  0500 ; moment email_date ;  Outputs: 2012 01 23 05:36:10 Expected: 2012 01 23 13:36:10  So I decided to specify the format  but that doesn t work either  maybe I m doing it wrong: var email_date =  Mon  23 Jan 2012 08:36:10  0500 ; moment email_date   ddd  DD MM YYYY h:m:s ZZ  ;  Output: 2011 12 22 19:36:10 Expected: 2012 01 23 13:36:10 ,deepwell,closed,8,2012-01-28 01:31:23,2012-02-03 19:09:30,,,1.5.0,0,1
14102,moment/moment,148,Add documentation on the immutability of moments,See  132 ,timrwood,closed,0,2012-01-30 16:41:35,2012-02-03 18:46:27,,,1.4.0,0,1
14101,moment/moment,149,Diff across DST,It ran into the same problems that adding and subtracting ran into in  78. ,rockymeza,closed,1,2012-01-31 23:33:24,2012-02-02 18:18:07,,,1.4.0,1,1
14100,moment/moment,150,Bad label in French language,The word  denier  should be replaced with  dernier   in fr files.  Ex:  > moment [2012 0 29] .calendar   >  dimanche denier   00:00  ,parmentf,closed,1,2012-02-01 17:12:22,2012-02-02 18:21:58,,,1.4.0,0,1
14099,moment/moment,151,Formatted dates crashing in regex parser,I am trying to  against all recommendations in the documentation  I realize  use an array of formatted date strings and there seems to be a crash in the regex parser when specifying timezone offsets as part of the format.  Example:  var bem = moment datestring  [  YYYY ZZ ] ;  will pass with the input  2012  0600 .  However  if I add:  YYYY MM ZZ  to the formatted strings array  so my array is now [  YYYY ZZ     YYYY MM ZZ  ] I get the following crash:  TypeError: Cannot call method  match  of undefined     at addTime  /home/jat850/project/node_modules/moment/moment.js:293:27   This crash occurs even when specifying my original input of 2012  0600. ,jat850,closed,1,2012-02-01 23:57:55,2012-02-03 18:46:19,,,1.4.0,0,1
14098,moment/moment,152,Wrong diff when passed string as parameter,> > > moment   > > > Thu Feb 02 2012 10:43:54 GMT 0400   _d=Date  clone=function    valueOf=function    more...  > > >  > > > moment  .add  days    02    > > > Wed Feb 22 2012 10:43:42 GMT 0400   _d=Date  clone=function    valueOf=function    more...  ,sshikov,closed,1,2012-02-02 06:48:59,2012-02-02 18:23:12,,,1.4.0,0,1
14097,moment/moment,153,Add automatic ISO parsing,Passing in a string that matches a ISO string should automatically parse  as there are a limited number of known formats.  We should also evaluate the filesize increase with this addition  as it will likely be a map of strings and regexes that won t minify well. ,timrwood,closed,1,2012-02-02 18:47:12,2012-03-02 00:26:04,,,1.5.0,0,1
14096,moment/moment,154,Add documentation on moment.strftime plugin,https://github.com/benjaminoakes/moment strftime ,timrwood,closed,1,2012-02-02 19:09:44,2012-02-03 18:46:30,,,1.4.0,0,1
14095,moment/moment,155,Testing process is suboptimal.,If I am mistaken about this  please ignore the rest.  As far as I can tell  in order to test moment  you need to build the HTML site.  I don t think this is a good idea for several reasons: 1.  It slows down the testing process.  Testing should be fast to encourage people to test. 2.  It s not immediately obvious.  From a new contributor s point of view  simply running    node test.js  seems like the correct way to test. 3.  It dirties up commits.  I think that commits should be as atomic as possible and should only contain the changes necessary.  The additional changes could make pull requests difficult to merge in.  In addition  I feel that the test output is inappropriate for a terminal.  I usually have to  grep  it in order to find failures.  Right now  in order to run the tests  I have to do this:      shell   node build.js    node test.js   grep fail      Instead I feel that it should be simple  like this:      shell   node test.js     ,rockymeza,closed,1,2012-02-02 20:45:37,2012-02-20 19:05:09,,,Move to makefiles,0,1
14094,moment/moment,156,Add documentation on moment.fn.toDate and moment.fn.native,See  140 ,timrwood,closed,1,2012-02-03 01:28:28,2012-02-03 18:47:17,,,1.4.0,0,1
14093,moment/moment,157,Parsing string with no spaces,The following node script fails to correctly parse date strings that do not have spaces.  var moment = require  moment  ; console.log moment  20120126    YYYYMMDD   ; // fails console.log moment  2012 01 26    YYYY MM DD   ; // succeeds console.log moment  01042011    MMDDYYYY   ; // fails console.log moement  01 04 2011    MM DD YYYY   ; // throws exception ,bengladwell,closed,5,2012-02-03 16:41:51,2012-03-01 23:55:33,,,,0,1
14092,moment/moment,158,Add utc mode,See comments starting here.  https://github.com/timrwood/moment/issues/147 issuecomment 3746188 ,timrwood,closed,4,2012-02-03 18:39:07,2012-03-02 00:01:09,,New Feature,,1.5.0,0,1
14091,moment/moment,159,Add changelog for 1.4.0,,timrwood,closed,0,2012-02-03 19:18:58,2012-03-02 01:07:58,,,1.4.0,0,1
14090,moment/moment,160,Fix package.json to remove NPM warning,    npm WARN moment@1.4.0 devDependencies field should be hash of <name>:<version range> pairs     ,thomasfr,closed,2,2012-02-06 10:00:04,2012-02-08 16:39:15,,,,0,1
14089,moment/moment,161,Asp net json date parsing,Sometimes json date s interval can be negative: /Date  1198908717056 / All you need to do change 18 s line from  jsonRegex = /^ /?Date   d  /i  to jsonRegex = /^ /?Date   ? d  /i  ,vmakhaev,closed,0,2012-02-06 17:58:47,2012-02-28 18:12:15,,,1.5.0,0,1
14088,moment/moment,162,Unable to find timezone abbreviation from Date.prototype.toString  ,Hello I came across the moment.js site via a forum and clicked my way through it  when I came across the unit test   which failed 2 tests what I want to report here:  UserAgent:   Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/535.7  KHTML  like Gecko  Chrome/16.0.912.77 Safari/535.7    Chrome 16.0.912.77 m   Timezone:   UTC 1    Failed tests    28 :   http://pastebin.com/bQsDuxdH     Title edited by timrwood ,ghost,closed,30,2012-02-06 22:12:05,2012-04-23 18:10:47,,Bug,,,0,1
14087,moment/moment,163,added a day only option in calendar method,allow moment  .calendar  withoutTime   method to accept a boolean parameter as an option to display date strings format without the time.  eg:  now = feb 7 moment  .calendar  ; // Today at 10:59pm  moment  .calendar true ; // Today ,ginotria,closed,5,2012-02-07 10:15:20,2012-02-08 06:05:08,,,,1,1
14086,moment/moment,164,moment  .day 0  sets to Monday instead of Sunday,Documentation says moment  .day 0  should set the day to Sunday  but in 1.4.0 moment  .day 0  and moment  .day  7  sets the day to Monday.  From more tests  seems like Monday   0 and Sunday   6 ,jkarmel,closed,2,2012-02-08 01:26:45,2012-02-08 01:50:37,,,,0,1
14085,moment/moment,165,Update package.json,  Added  .js  suffix to   main  :  ./money   in order to avoid [this] https://github.com/josscrowcroft/money.js/pull/7  type of npm warning   devDependencies should be hash instead of array since npm throws warning about that.  npm WARN moment@1.4.0 devDependencies field should be hash of <name>:<version range> pairs  ,panosru,closed,0,2012-02-08 07:27:05,2012-02-08 16:38:19,,,,1,1
14084,moment/moment,166,Change the day the week starts with,Is there a way to change the day the week starts with? In Germany the week starts with monday  for example.  Thanks  ,rubenmueller,closed,10,2012-02-08 16:26:13,2012-04-10 13:31:38,,Enhancement,,1.6.0,0,1
14083,moment/moment,167,Makefile improved,I updated the Makefile to follow some general conventions:   renamed test   to test     added a clean target   used the .PHONY target for rules that are not tied to files.   tied rules to actual filenames so that they will be updated when their prerequisites are updated  I also changed some things:   added a pretty target   added a hint target for jshint ing  although perhaps that should be called lint to be more generic.   fixed the paths to the executables  for jshint  nodeunit  and uglifyjs    reduced the devDependencies to jshint  nodeunit  and uglify  I also removed one target   langtests   which created the test/all tests.js file.  I m not sure what the point of that rule was because it  cat ed some files that didn t even exist.  In addition  I moved test/non lang to test/moment because I felt that was a better name. ,rockymeza,closed,1,2012-02-12 03:20:41,2012-02-20 17:29:42,,,,1,1
14082,moment/moment,168,adding Chinese zh_CN locale,new file:   lang/zh_CN.js ,suupic,closed,1,2012-02-17 04:23:31,2012-02-20 18:00:03,,,,1,1
14081,moment/moment,169,Adding correct plural forms for Russian language,,fduch2k,closed,7,2012-02-18 19:46:10,2012-02-20 19:29:58,,,,1,1
14080,moment/moment,170,Add traditional chinese support zh tw,New file: lang/zh tw.js ,ben-lin,closed,3,2012-02-20 04:01:23,2012-02-20 17:58:54,,,,1,1
14079,moment/moment,171,Unit test error: format timezone,format timezone 2 passed  2 failed.     > Something like  PST  AssertionError:     > Something like  PST      at Object.ok  http://momentjs.com/js/tests.js?_=120203_183019:1526:39      at http://momentjs.com/js/tests.js?_=120203_183019:2413:14     at Object.runTest  http://momentjs.com/js/tests.js?_=120203_183019:1702:9      at http://momentjs.com/js/tests.js?_=120203_183019:1748:25     at http://momentjs.com/js/tests.js?_=120203_183019:1006:13     at http://momentjs.com/js/tests.js?_=120203_183019:616:13     at http://momentjs.com/js/tests.js?_=120203_183019:627:25     at http://momentjs.com/js/tests.js?_=120203_183019:1008:17     at http://momentjs.com/js/tests.js?_=120203_183019:1589:17    > Something like  PST   AssertionError:     > Something like  PST      at Object.ok  http://momentjs.com/js/tests.js?_=120203_183019:1526:39      at http://momentjs.com/js/tests.js?_=120203_183019:2414:14     at Object.runTest  http://momentjs.com/js/tests.js?_=120203_183019:1702:9      at http://momentjs.com/js/tests.js?_=120203_183019:1748:25     at http://momentjs.com/js/tests.js?_=120203_183019:1006:13     at http://momentjs.com/js/tests.js?_=120203_183019:616:13     at http://momentjs.com/js/tests.js?_=120203_183019:627:25     at http://momentjs.com/js/tests.js?_=120203_183019:1008:17     at http://momentjs.com/js/tests.js?_=120203_183019:1589:17  01:00    > Something like   07:30   0100    > Something like   0700   Hope it helps. ,stephanos,closed,1,2012-02-20 14:35:00,2012-02-20 19:26:12,,,,0,1
14078,moment/moment,172,Add chinese lang test files,,timrwood,closed,2,2012-02-20 18:01:53,2012-03-09 00:56:33,,,,0,1
14077,moment/moment,173,Docs for ISO parsing  ISO default format, 121  153 ,timrwood,closed,0,2012-02-20 19:04:35,2012-03-09 00:56:30,,,,0,1
14076,moment/moment,174,Add traditional chinese test zh tw,The test runs ok however the grammer logic for chinese is a little weird. For example we put  am / pm  before time  and we say  midnight 2:00  instead of  2:00 pm ... etc. But I guess every language has its own grammer rule  it is too difficult to fit them all in one library. ,ben-lin,closed,6,2012-02-21 05:34:10,2012-02-22 16:55:11,,,,1,1
14075,moment/moment,175,A problem with moment.format.,I ve just started using moment and am seeing a problem with the following:  value = moment  .format   Do MMM YYYY hh:mm am   ;  results in: 22nd Feb 2012 07:06 pm  6    Notice the last digit of the time is repeated after the  pm .   I get similar results when passing a Date  to moment.   I m using moment in the Browser and using Require.js to load the .min files.  I also had a problem where the language was not English and I had to add: moment.lang  en  ; to fix this. The Docs indicate English is sued by default.   Neville http://www.surfulater.com ,nevf,closed,3,2012-02-22 08:13:19,2012-02-26 18:44:35,,,,0,1
14074,moment/moment,176,Error running tests from Ireland  without daylight savings time ,Running tests  http://momentjs.com/test/  today  February 22  2012  from Ireland.  From a browser  Safari  JavaScript console I got these info:  > myDate = new Date  ; > Wed Feb 22 2012 10:56:06 GMT 0000  GMT  > timezone = myDate.getTimezoneOffset   > 0  The output of the failing test is this:  31  zone 2 passed 1 failed. When the zone   offset is equal to 0  the ISO offset should be positive zero fail@http://momentjs.com/js/tests.js?_=120203_183019:1240 ok@http://momentjs.com/js/tests.js?_=120203_183019:1255 @http://momentjs.com/js/tests.js?_=120203_183019:1526 zone@http://momentjs.com/js/tests.js?_=120203_183019:2464 runTest@http://momentjs.com/js/tests.js?_=120203_183019:1702 @http://momentjs.com/js/tests.js?_=120203_183019:1748 @http://momentjs.com/js/tests.js?_=120203_183019:1009 iterate@http://momentjs.com/js/tests.js?_=120203_183019:630 @http://momentjs.com/js/tests.js?_=120203_183019:627 @http://momentjs.com/js/tests.js?_=120203_183019:1008 @http://momentjs.com/js/tests.js?_=120203_183019:1589 [native code] moment.fn.zone should be a multiple of 30  was 0  zone should equal getTimezoneOffset ,gcsolaroli,closed,2,2012-02-22 10:57:55,2012-02-22 17:11:29,,,,0,1
14073,moment/moment,177,Display moment at a specific timezone?,This is a great library   It d be great if I could display a UTC date such as:      // Mon  26 Mar 2012 15:00:00 GMT d = moment 1332774000000 ;      at a specific timezone  maybe something like:      // Output: 8:00am d.timezoneOffset  7 .format  LT        Is this currently possible and maybe I just missed it in the docs?  Thanks  Sandro ,spadin,closed,7,2012-02-23 20:58:37,2012-02-24 00:06:12,,,,0,1
14072,moment/moment,178,Added a  duration to humanized output  converter,Added a relative time converter  takes in units  a duration  and an optional suffix remover boolean  and returns humanized output  e.g. moment  .formatted_duration  minutes  20000 true ; //  14 days  ,wulftone,closed,11,2012-02-24 01:19:17,2012-03-02 00:27:01,,,,1,1
14071,moment/moment,179,Unit Test failed,Using the Unit Test  http://momentjs.com/test/  under Opera 11.00   My timezone is: Europe/Madrid  no DST in effect right now.  Two Tests failed:  format format YY 1 passed 0 failed. format escape brackets 5 passed 0 failed. format timezone 2 passed 2 failed.    > Something like  PST  AssertionError:     > Something like  PST     > Something like  PST  AssertionError:     > Something like  PST   01:00    > Something like   07:30   0100    > Something like   0700  ,raulferras,closed,1,2012-02-24 15:50:49,2012-02-28 17:24:43,,Unit Test Failed,,,0,1
14070,moment/moment,180,Request for daysInMonth   method,Hello  I d like to see daysInMonth   method in Moment. I ve written a fork wich https://github.com/mrandersson/moment/commit/455bf946af62057f9ad1e37fc79b8ee62b1f0e2a  P0 includes this. Hope others finds this useful. ,davidutterman,closed,1,2012-02-26 15:20:03,2012-02-28 17:44:01,,,,0,1
14069,moment/moment,181,Error evaluating  format.match tokenCharacters   when running in browser,I get the following error in the console when running in the browser:      <script src= js/moment.js ></script>  TypeError:  undefined  is not a function  evaluating  format.match tokenCharacters     moment.js:218       Safari 5.1.3  ,lsuk,closed,0,2012-02-27 07:59:49,2012-02-27 08:13:57,,,,0,1
14068,moment/moment,182,Fixed test for Russian language,,fduch2k,closed,1,2012-02-28 17:11:39,2012-02-28 17:25:07,,,,1,1
14067,moment/moment,183,Add docs for moment.fn.daysInMonth,,timrwood,closed,0,2012-02-28 18:06:43,2012-03-09 00:56:07,,,,0,1
14066,moment/moment,184,Handling of empty dates,Thanks so much for this library  it really has been very helpful. That being said  it would be nice if various versions of creating empty dates could be handled similarly. Currently:      moment    ; >> Invalid Date  moment null ; >> null  moment      YYYY MM DD  ; >> TypeError: i is null  moment    .format  YYYY MM DD  ; >>  NaN NaN NaN       This has produced problems for me in passing date values back and forth with the server  when the date field is nullable. Obviously it can be dealt with  but more consistency would be helpful. Or is this the intended functionality?  Thanks  ,rquantz,closed,3,2012-02-29 21:29:09,2012-03-02 00:03:54,,,,0,1
14065,moment/moment,185,Failing timezone unit tests,I have run the test suite and received the following test failures.  format timezone 2 passed 2 failed. AUSEDT    > Something like  PST  AssertionError: AUSEDT    > Something like  PST      at Object.ok  http://momentjs.com/js/tests.js?_=120203_183019:1526:39      at http://momentjs.com/js/tests.js?_=120203_183019:2413:14     at Object.runTest  http://momentjs.com/js/tests.js?_=120203_183019:1702:9      at http://momentjs.com/js/tests.js?_=120203_183019:1748:25     at http://momentjs.com/js/tests.js?_=120203_183019:1006:13     at http://momentjs.com/js/tests.js?_=120203_183019:616:13     at http://momentjs.com/js/tests.js?_=120203_183019:627:25     at http://momentjs.com/js/tests.js?_=120203_183019:1008:17     at http://momentjs.com/js/tests.js?_=120203_183019:1589:17 AUSEDT    > Something like  PST  AssertionError: AUSEDT    > Something like  PST      at Object.ok  http://momentjs.com/js/tests.js?_=120203_183019:1526:39      at http://momentjs.com/js/tests.js?_=120203_183019:2414:14     at Object.runTest  http://momentjs.com/js/tests.js?_=120203_183019:1702:9      at http://momentjs.com/js/tests.js?_=120203_183019:1748:25     at http://momentjs.com/js/tests.js?_=120203_183019:1006:13     at http://momentjs.com/js/tests.js?_=120203_183019:616:13     at http://momentjs.com/js/tests.js?_=120203_183019:627:25     at http://momentjs.com/js/tests.js?_=120203_183019:1008:17     at http://momentjs.com/js/tests.js?_=120203_183019:1589:17  11:00    > Something like   07:30   1100    > Something like   0700  ,JProgrammer,closed,1,2012-02-29 22:45:26,2012-03-02 00:20:15,,,,0,1
14064,moment/moment,186,Include  fromnow  as a format.,This is very handy when getting a format string from a remote source. ,braddunbar,closed,4,2012-02-29 22:57:58,2012-03-19 18:28:15,,,,1,1
14063,moment/moment,187,Update lang/ca.js,,jllahi,closed,3,2012-03-01 09:46:11,2012-03-02 19:43:56,,,,1,1
14062,moment/moment,188,Failing unit test,User Agent: MSIE 9.0 Timezone:  UTC  Dublin  Edinburgh  Lisbon  London Failing Test: 31   Should be mutiple of 30  was 0  ,Daxaar,closed,1,2012-03-01 13:29:42,2012-03-02 00:10:08,,,,0,1
14061,moment/moment,189,Docs for moment.humanizeDuration,,timrwood,closed,0,2012-03-02 00:59:26,2012-03-09 00:56:07,,,,0,1
14060,moment/moment,190,Token delimiter?,Hey Tim  have you considered using a prepended token such as     so users could do something like  now.format   D  MMMM  YYYY at  h: m a    to receive  2 March 2012 at 1:27pm ? I ve got my own simple parser I m using  but would love to switch to moment.js  this is just blocking me.   I realize it s slightly less elegant  but it seems to open up a very powerful world. If it s something you re open to  I d be happy to work on a pull request. Thanks  ,jpcody,closed,4,2012-03-02 19:32:17,2012-03-02 19:42:45,,,,0,1
14059,moment/moment,191,zh cn.js fixed,I had fixed some bugs in zh cn.js and test file. Now it seems ok ,suupic,closed,0,2012-03-03 05:41:41,2012-03-09 00:07:24,,,,1,1
14058,moment/moment,192,Formatted diffs,Hi Tim   We talked about formatted diffs in  143. My code is ready to be discussed and reviewed  I encountered some problems and I have questions here s some details...   My function doesn t work if units aren t in decreasing order. Is it a problem? Should we throw an Error? I can work on a different implementation that can handle that case  but code will be bigger and maybe slower.   I assume that DST is always 1 hour but it s not ALWAYS the case. What do you think we should do about that?   The  calendar  function doesn t work anymore  but I m not sure I m responsible. ;   You ll find details by running the tests. Please tell me if I ve done something wrong.   Some tests in diff weren t correct :      test.equal moment [2010] .diff [2010  0  21]   weeks     3   week diff  ;      January 1st to January 21th => 20 days => not 3 weeks      test.equal moment [2010] .diff [2011  6]   years   true    1.5   year diff  float  ;      In France  DST change accurs in March so this diff is not exactly 1.5 years. What do you think we should do about that?  There s problably adjusments to make the code better  prettier or faster  feel free to make any remarks I ll correct my PR...  Thanks again for this library and for letting me having huge headaches on this ;    Regards. ,hsablonniere,closed,10,2012-03-03 14:01:03,2012-03-09 00:47:03,,,,1,1
14057,moment/moment,193,Fixing french locale Aujourd hui instead of Ajourd hui,The french word for today is not correct.  http://translate.google.fr/ en fr today 0A ,hsablonniere,closed,0,2012-03-03 14:11:02,2012-03-09 00:08:23,,,,1,1
14056,moment/moment,194,Unit test failure: When zone   offset is 0  the ISO offset s/b positive zero,Unit test 31 fails for me  I m in the UK and we re not currently on DST  so our timezone offset is 0 :  <pre>31. zone 2 passed 1 failed. When the zone   offset is equal to 0  the ISO offset should be positive zero AssertionError: When the zone   offset is equal to 0  the ISO offset should be positive zero     at Object.ok  http://momentjs.com/js/tests.js?_=120203_183019:1526:39      at http://momentjs.com/js/tests.js?_=120203_183019:2464:18     at Object.runTest  http://momentjs.com/js/tests.js?_=120203_183019:1702:9      at http://momentjs.com/js/tests.js?_=120203_183019:1748:25     at http://momentjs.com/js/tests.js?_=120203_183019:1006:13     at http://momentjs.com/js/tests.js?_=120203_183019:616:13     at http://momentjs.com/js/tests.js?_=120203_183019:627:25     at http://momentjs.com/js/tests.js?_=120203_183019:1008:17     at http://momentjs.com/js/tests.js?_=120203_183019:1589:17 moment.fn.zone should be a multiple of 30  was 0  zone should equal getTimezoneOffset</pre>   I m confused by the failure  though  since if I run [this code] http://jsbin.com/elepam :      display  moment  .zone   === 0?            moment  .zone   === 0  ; display  moment  .zone   === new Date  .getTimezoneOffset  ?            moment  .zone   === new Date  .getTimezoneOffset    ;      ...both statements show  true . Looking at [the test] https://github.com/timrwood/moment/blob/master/test/moment/format.js L73   I don t see why the assertion fails given my test doesn t. ,tjcrowder,closed,1,2012-03-07 14:27:24,2012-03-19 18:33:10,,,,0,1
14055,moment/moment,195,Unit tests failing: 146. calendar last week 10 passed 5 failed.,Mozilla/5.0  Macintosh; Intel Mac OS X 10_7_3  AppleWebKit/535.11  KHTML  like Gecko  Chrome/17.0.963.66 Safari/535.11 Eastern Standard Time      146. calendar last week 10 passed 5 failed. Today   2 days current time AssertionError: Today   2 days current time     at Object.equal  http://momentjs.com/js/tests.js?_=120203_183019:1526:39      at http://momentjs.com/js/tests.js?_=120203_183019:4653:18     at Object.runTest  http://momentjs.com/js/tests.js?_=120203_183019:1702:9      at http://momentjs.com/js/tests.js?_=120203_183019:1748:25     at http://momentjs.com/js/tests.js?_=120203_183019:1006:13     at http://momentjs.com/js/tests.js?_=120203_183019:616:13     at http://momentjs.com/js/tests.js?_=120203_183019:627:25     at http://momentjs.com/js/tests.js?_=120203_183019:1008:17     at http://momentjs.com/js/tests.js?_=120203_183019:1589:17 Today   2 days beginning of day Today   2 days end of day Today   3 days current time AssertionError: Today   3 days current time     at Object.equal  http://momentjs.com/js/tests.js?_=120203_183019:1526:39      at http://momentjs.com/js/tests.js?_=120203_183019:4653:18     at Object.runTest  http://momentjs.com/js/tests.js?_=120203_183019:1702:9      at http://momentjs.com/js/tests.js?_=120203_183019:1748:25     at http://momentjs.com/js/tests.js?_=120203_183019:1006:13     at http://momentjs.com/js/tests.js?_=120203_183019:616:13     at http://momentjs.com/js/tests.js?_=120203_183019:627:25     at http://momentjs.com/js/tests.js?_=120203_183019:1008:17     at http://momentjs.com/js/tests.js?_=120203_183019:1589:17 Today   3 days beginning of day Today   3 days end of day Today   4 days current time AssertionError: Today   4 days current time     at Object.equal  http://momentjs.com/js/tests.js?_=120203_183019:1526:39      at http://momentjs.com/js/tests.js?_=120203_183019:4653:18     at Object.runTest  http://momentjs.com/js/tests.js?_=120203_183019:1702:9      at http://momentjs.com/js/tests.js?_=120203_183019:1748:25     at http://momentjs.com/js/tests.js?_=120203_183019:1006:13     at http://momentjs.com/js/tests.js?_=120203_183019:616:13     at http://momentjs.com/js/tests.js?_=120203_183019:627:25     at http://momentjs.com/js/tests.js?_=120203_183019:1008:17     at http://momentjs.com/js/tests.js?_=120203_183019:1589:17 Today   4 days beginning of day Today   4 days end of day Today   5 days current time AssertionError: Today   5 days current time     at Object.equal  http://momentjs.com/js/tests.js?_=120203_183019:1526:39      at http://momentjs.com/js/tests.js?_=120203_183019:4653:18     at Object.runTest  http://momentjs.com/js/tests.js?_=120203_183019:1702:9      at http://momentjs.com/js/tests.js?_=120203_183019:1748:25     at http://momentjs.com/js/tests.js?_=120203_183019:1006:13     at http://momentjs.com/js/tests.js?_=120203_183019:616:13     at http://momentjs.com/js/tests.js?_=120203_183019:627:25     at http://momentjs.com/js/tests.js?_=120203_183019:1008:17     at http://momentjs.com/js/tests.js?_=120203_183019:1589:17 Today   5 days beginning of day Today   5 days end of day Today   6 days current time AssertionError: Today   6 days current time     at Object.equal  http://momentjs.com/js/tests.js?_=120203_183019:1526:39      at http://momentjs.com/js/tests.js?_=120203_183019:4653:18     at Object.runTest  http://momentjs.com/js/tests.js?_=120203_183019:1702:9      at http://momentjs.com/js/tests.js?_=120203_183019:1748:25     at http://momentjs.com/js/tests.js?_=120203_183019:1006:13     at http://momentjs.com/js/tests.js?_=120203_183019:616:13     at http://momentjs.com/js/tests.js?_=120203_183019:627:25     at http://momentjs.com/js/tests.js?_=120203_183019:1008:17     at http://momentjs.com/js/tests.js?_=120203_183019:1589:17 Today   6 days beginning of day Today   6 days end of day     ,amichal,closed,5,2012-03-08 06:25:11,2012-03-13 21:24:15,,Unit Test Failed,,,0,1
14054,moment/moment,196,Fail test 31. zone,Hi   I ran the test suite and the 31st  zone  failed  so I figure that you want to know ;   Error message with Fx  Mozilla/5.0  Windows NT 6.1; WOW64; rv:10.0.2  Gecko/20100101 Firefox/10.0.2          zone 2 passed 1 failed.      When the zone   offset is equal to 0  the ISO offset should be positive zero      AssertionError: When the zone   offset is equal to 0  the ISO offset should be positive zero      moment.fn.zone should be a multiple of 30  was 0      zone should equal getTimezoneOffset            And with Chromium  Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/535.4  KHTML  like Gecko  Chrome/16.0.885.0 Safari/535.4       zone 2 passed 1 failed. When the zone   offset is equal to 0  the ISO offset should be positive zero AssertionError: When the zone   offset is equal to 0  the ISO offset should be positive zero     at Object.ok  http://momentjs.com/js/tests.js?_=120203_183019:1526:39      at http://momentjs.com/js/tests.js?_=120203_183019:2464:18     at Object.runTest  http://momentjs.com/js/tests.js?_=120203_183019:1702:9      at http://momentjs.com/js/tests.js?_=120203_183019:1748:25     at http://momentjs.com/js/tests.js?_=120203_183019:1006:13     at http://momentjs.com/js/tests.js?_=120203_183019:616:13     at http://momentjs.com/js/tests.js?_=120203_183019:627:25     at http://momentjs.com/js/tests.js?_=120203_183019:1008:17     at http://momentjs.com/js/tests.js?_=120203_183019:1589:17 moment.fn.zone should be a multiple of 30  was 0  zone should equal getTimezoneOffset      My timezone is the one of Dublin  so UTC   unless I m mistaken   .  I hope this help.  Edit: this test also failed on Opera  I haven t the time to paste the output now but I can later . ,Alexis-D,closed,1,2012-03-08 08:14:23,2012-03-08 10:28:53,,,,0,1
14053,moment/moment,197,Failing timezone testcase 28,    UserAgent: Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/535.11  KHTML  like Gecko  Chrome/17.0.963.66 Safari/535.11 Timezone:    0100    format timezone 2 passed 2 failed.    > Something like  PST  AssertionError:     > Something like  PST      at Object.ok  http://momentjs.com/js/tests.js?_=120203_183019:1526:39      at http://momentjs.com/js/tests.js?_=120203_183019:2413:14     at Object.runTest  http://momentjs.com/js/tests.js?_=120203_183019:1702:9      at http://momentjs.com/js/tests.js?_=120203_183019:1748:25     at http://momentjs.com/js/tests.js?_=120203_183019:1006:13     at http://momentjs.com/js/tests.js?_=120203_183019:616:13     at http://momentjs.com/js/tests.js?_=120203_183019:627:25     at http://momentjs.com/js/tests.js?_=120203_183019:1008:17     at http://momentjs.com/js/tests.js?_=120203_183019:1589:17    > Something like  PST  AssertionError:     > Something like  PST      at Object.ok  http://momentjs.com/js/tests.js?_=120203_183019:1526:39      at http://momentjs.com/js/tests.js?_=120203_183019:2414:14     at Object.runTest  http://momentjs.com/js/tests.js?_=120203_183019:1702:9      at http://momentjs.com/js/tests.js?_=120203_183019:1748:25     at http://momentjs.com/js/tests.js?_=120203_183019:1006:13     at http://momentjs.com/js/tests.js?_=120203_183019:616:13     at http://momentjs.com/js/tests.js?_=120203_183019:627:25     at http://momentjs.com/js/tests.js?_=120203_183019:1008:17     at http://momentjs.com/js/tests.js?_=120203_183019:1589:17  01:00    > Something like   07:30   0100    > Something like   0700      ,pstuifzand,closed,1,2012-03-08 09:41:18,2012-03-09 00:48:01,,,,0,1
14052,moment/moment,198,Range,Hi   I didn t find this feature in the documentation. I often want to generate an array of days  hours  months  years  based on two dates  the way I think about it  would be like that :      javascript     moment  .from end_of_last_year .to today .type  months  ;      Would generate this kind of array :      javascript     [ January    February    March ];      What do you think about it ? ,jjaffeux,closed,6,2012-03-10 09:10:49,2012-03-10 18:54:25,,,,0,1
14051,moment/moment,199,Unit test failing: format timezone,Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/535.11  KHTML  like Gecko  Chrome/17.0.963.78 Safari/535.11  Screenshot: http://i.imgur.com/lY3a3.png  Not sure if this is related to the other two reported last few days  just wanted to let you know.  Cheers.  Edit  asserts:      javascript AssertionError:     > Something like  PST      at Object.ok  http://momentjs.com/js/tests.js?_=120203_183019:1526:39   AssertionError:     > Something like  PST      at Object.ok  http://momentjs.com/js/tests.js?_=120203_183019:1526:39      ,peol,closed,1,2012-03-12 12:13:49,2012-03-13 21:25:27,,,,0,1
14050,moment/moment,200,.npmignore: site  sitesrc,The folders  site  and  sitesrc  feels unnecessary to bundle in the npm distribution. These are about half a meg each and doesn t really add something when using moment in your application. ,jbergstroem,closed,1,2012-03-12 20:42:29,2012-03-13 21:30:56,,,,0,1
14049,moment/moment,201,Failed unit test: format timezone,UA: Opera/9.80  Windows NT 6.1; U; en  Presto/2.10.229 Version/11.62 Timezone:  3      > Something like  PST  AssertionError:     > Something like  PST      > Something like  PST  AssertionError:     > Something like  PST   03:00    > Something like   07:30   0300    > Something like   0700   ,CheloXL,closed,1,2012-03-12 22:01:35,2012-03-13 21:25:09,,Unit Test Failed,,,0,1
14048,moment/moment,202,Correcting days of week forms for calendar method localization,,fduch2k,closed,0,2012-03-13 08:34:58,2012-03-13 08:35:31,,,,1,1
14047,moment/moment,203,Correcting day of week forms in localization for .calendar method ,,fduch2k,closed,0,2012-03-13 09:52:06,2012-03-19 18:23:05,,,,1,1
14046,moment/moment,204,Add rockymeza s ISO week plugin to the docs,,timrwood,closed,0,2012-03-13 21:34:41,2012-03-19 19:37:44,,,,0,1
14045,moment/moment,205,Add  moment.isMoment   ,The problem is that how to compare with a moment object is not prepared. It is possible if it writes in this way.      function isMoment obj        return obj    typeof obj.native ===  function     obj.native   instanceof Date;        However  this function is not exact.      var myObj =       native: function     return new Date    ;  isMoment myObj ; //=> true      This patch solves this. For example.      var m = moment  ; moment.isMoment m ; //=> true moment.isMoment myObj ; //=> false      Thanks. ,hokaccha,closed,0,2012-03-15 09:52:07,2012-03-19 18:23:53,,,,1,1
14044,moment/moment,206,UnitTest TimeZone error.,Error in unit test in point 28  format :      28. format timezone 2 passed 2 failed.         > Something like  PST       AssertionError:     > Something like  PST          > Something like  PST       AssertionError:     > Something like  PST        06:00    > Something like   07:30       0600    > Something like   0700       windows 7  firefox 10.2 My Timezone:  UTC 06:00 Ekaterinburg   Maybe  due to the fact that: On February 8  2011  Russian President Dmitry Medvedev issued a decree that Russia would observe year round DST  wiki  ,aavezel,closed,1,2012-03-15 10:06:23,2012-03-19 18:31:48,,,,0,1
14043,moment/moment,207,minor typo in Doc for Display Seconds, moment  .minutes  ; // get the seconds  0   59    ;  ,kktos,closed,1,2012-03-15 11:02:58,2012-03-19 18:29:04,,,,0,1
14042,moment/moment,208,Add norwegian language file.,,sveisvei,closed,1,2012-03-15 13:40:20,2012-03-18 17:19:38,,,,1,1
14041,moment/moment,209,Display as .NET ticks,Similar to [valueOf] http://momentjs.com/docs/ /display/valueOf . Either add a param to this arguement  or create a new method  e.g.  moment.fn.toTicks .  Conversion details [here] http://stackoverflow.com/questions/7966559/how to convert javascript date object into ticks . ,christophercliff,closed,3,2012-03-16 21:07:13,2012-03-23 19:25:13,,New Feature,,1.6.0,0,1
14040,moment/moment,210,Test 31. fails in GMT timezone,Timezone: GMT  User agent:  Mozilla/5.0  Macintosh; Intel Mac OS X 10_7_3  AppleWebKit/535.19  KHTML  like Gecko  Chrome/18.0.1025.45 Safari/535.19   Failing test: 31. zone 2 passed 1 failed.  When the zone   offset is equal to 0  the ISO offset should be positive zero AssertionError: When the zone   offset is equal to 0  the ISO offset should be positive zero     at Object.ok  http://momentjs.com/js/tests.js?_=120203_183019:1526:39      at http://momentjs.com/js/tests.js?_=120203_183019:2464:18     at Object.runTest  http://momentjs.com/js/tests.js?_=120203_183019:1702:9      at http://momentjs.com/js/tests.js?_=120203_183019:1748:25     at http://momentjs.com/js/tests.js?_=120203_183019:1006:13     at http://momentjs.com/js/tests.js?_=120203_183019:616:13     at http://momentjs.com/js/tests.js?_=120203_183019:627:25     at http://momentjs.com/js/tests.js?_=120203_183019:1008:17     at http://momentjs.com/js/tests.js?_=120203_183019:1589:17 moment.fn.zone should be a multiple of 30  was 0  zone should equal getTimezoneOffset  ,tomgco,closed,1,2012-03-19 14:43:22,2012-03-19 18:32:58,,,,0,1
14039,moment/moment,211,Unit tests fail on Android,The unit tests don t run on Android at all  I think there is likely a syntax error preventing them from running.  I haven t had a chance to delve into it yet. ,mattpal,closed,8,2012-03-19 16:45:21,2012-03-23 16:19:51,,Bug,,1.6.0,0,1
14038,moment/moment,212,Fixed weekday returned when isUTC date,Before:      moment 1332291600000 .utc  .add  minutes    3   60 .format  dddd D   //=> Wednesday 20       After:      moment 1332291600000 .utc  .add  minutes    3   60 .format  dddd D   //=> Tuesday 20            Date.prototype.toString = Wed Mar 21 2012 00:22:46 GMT 0530  IST  Date.prototype.toLocaleString = Wed Mar 21 2012 00:22:46 GMT 0530  IST  Date.prototype.getTimezoneOffset =  330 navigator.userAgent = Mozilla/5.0  X11; Linux x86_64  AppleWebKit/535.11  KHTML  like Gecko  Chrome/17.0.963.79 Safari/535.11 ,vroy,closed,1,2012-03-20 19:03:58,2012-03-20 19:10:09,,,,1,1
14037,moment/moment,213,Add support for creation with unix timestamp in seconds,This is something that we wanted to avoid doing  1000 on every single UTC timestamp we receive  in seconds .  Figured I would suggest it as I think it makes a nicer API.  I can look into writing tests/docs for it first if you want. ,vroy,closed,8,2012-03-21 02:51:31,2012-03-30 17:37:28,,New Feature,,1.6.0,1,1
14036,moment/moment,214,Add S SS SSS millisecond formatting tokens,like: http://blog.stevenlevithan.com/archives/date time format        l or L    Milliseconds. l gives 3 digits. L gives 2 digits.     ,baryon,closed,11,2012-03-21 04:35:02,2012-04-23 18:04:59,timrwood,New Feature,,1.6.0,0,1
14035,moment/moment,215,Date parsing bug?,In both Firefox 10.0.2 and Chrome 17 typing the following:      moment  Wed Mar 21 2012 11:32:01 GMT 0000  GMT Standard Time   .toDate        returns:       Thu Dec 21 1899 00:00:00 GMT 0000  GMT Standard Time        The Date string passed into  moment    is obtained by typing   new Date   .toString    in the javascript console of the browser. I ve checked my system and all the dates are set correctly  but moment interprets the string as 112 years in the past.  Is this a bug in moment.js or is there somethign I ve done wrong  I dont think what I ve done on my side leaves much room for human error .  This appears when using the version of moment on the homepage of  momentjs.com  ,christopherdebeer,closed,5,2012-03-21 11:55:10,2012-03-23 19:11:37,,Bug,,1.6.0,0,1
14034,moment/moment,216,Deprecate moment.fn.native,Replace with moment.fn.toDate ,timrwood,closed,2,2012-03-21 17:28:42,2012-04-11 04:03:24,,Deprecate,,1.6.0,0,1
14033,moment/moment,217,Issue with Indian Standard Time Zone,I just run the tests  9 failing tests  here s the requested info:      Date.prototype.toString = Wed Mar 21 2012 23:13:56 GMT 0530  India Standard Time  Date.prototype.toLocaleString = Wednesday  March 21  2012 11:13:56 PM Date.prototype.getTimezoneOffset =  330 navigator.userAgent = Mozilla/5.0  Windows NT 6.1; WOW64; rv:11.0  Gecko/20100101 Firefox/11.0      Funny  I came from datejs because issues with the same timezone ;   Good luck  ,gr2m,closed,6,2012-03-21 17:46:04,2012-03-22 17:19:14,,Bug,,,0,1
14032,moment/moment,218,Finnish translation,So I ve been working on creating a Finnish translation for moment.js  but it looks like I have to touch code here...  In Finnish when you want to refer to future  it s not actually enough to just replace the string of few seconds with muutama sekunti and use a prefix or a suffix  but you actually have to inflect the words to muutaman sekunnin and then add p  st  after them.  The phrase  in few seconds  would translate to  muutaman sekunnin p  st    here both of the words muutama and minuutti are inflected. The phrase  few seconds ago  actually translates to  muutama sekunti sitten  and here the words are in their standard non inflected form. The phrase  a minute ago  would translate to  minuutin p  st   and here again minuutti is inflected. The phrase  in a minute  would translate to  minuutti sitten  and here it s not.  So I suggest adding at least future  but also past for all of the relativeTime strings.   I can actually do this myself today and tomorrow  since we really need to get the Finnish translation done soon. :   ,bleadof,closed,5,2012-03-22 16:08:07,2012-03-23 19:09:58,,Enhancement,Language,,,0,1
14031,moment/moment,219,Rounded diffs,These tests are bugging me :      test.equal moment [2010] .diff [2010  0  7]   weeks     1   week diff  ; test.equal moment [2010] .diff [2010  0  21]   weeks     3   week diff  ; test.equal moment [2010] .diff [2010  0  4]   days     3   day diff  ;      Even that would pass :      test.equal moment [2010] .diff [2010  0  5]   weeks     1   week diff  ;      Documentation says number are rounded by default. So we could understand why the function returns this result. It is not really what I expected. It would feel more natural to me to have a floored result than a rounded one. Maybe I just needed a warning on the doc. I don t know...  What do you think ? ,hsablonniere,closed,3,2012-03-22 21:16:48,2012-05-04 17:33:41,,,,0,1
14030,moment/moment,220,Add support for numbers in the month format names.,I wrote a Japanese extension and fixed Chinese lang. in Japanese and Chinese  I use               months :    _  _  _  _  _  _  _  _  _  _   _    .split  _            monthsShort :  1 _2 _3 _4 _5 _6 _7 _8 _9 _10 _11 _12  .split  _         as month title. test failed.  Could  you fix inputCharacters regex to support digit character?          inputCharacters = /    ? [0 9]   [a zA Z u00A0  uD7FF uF900  uFDCF uFDF0  uFFEF]    [    ] d d:? d d  /gi       the jp lang and test case in a fork https://github.com/baryon/moment ,baryon,closed,9,2012-03-23 01:54:55,2012-04-11 04:07:05,,Enhancement,,,0,1
14029,moment/moment,221,fixed ordering of longDateFormat for traditional and simplified Chinese,In Chinese  the dates are always expressed in a specific order.  It goes from biggest container to smallest:      Year > Month > Day of Month > Day of Week > Meridiem  sort of  > Hour > Minute > Second      I updated the  longDateFormat  definition in both of the Chinese language files.  I also changed the  :  to a         but that is not related to ordering error.  Sorry for combining the commits. ,rockymeza,closed,0,2012-03-23 06:21:27,2012-03-23 17:48:15,,Bug,Language,,,1,1
14028,moment/moment,222,Fixed the meridiem value for Chinese.,In Chinese  there are more values for the meridiem value than just AM and PM.  There are values that mean morning  before noon  noon  afternoon  and night time.  I had to modify moment.js to handle a callback or default to the previous behavior.  If you accept  221  I am pretty sure that you will have a merge conflict in the  calendar day  tests.  Here is what those tests should look like:      javascript // zh cn.js test.equal moment a .calendar                             2 00        today at the same time  ; test.equal moment a .add   m: 25   .calendar              2 25        Now plus 25 min  ; test.equal moment a .add   h: 1   .calendar               3 00        Now plus 1 hour  ; test.equal moment a .add   d: 1   .calendar               2 00        tomorrow at the same time  ; test.equal moment a .subtract   h: 1   .calendar          1 00        Now minus 1 hour  ; test.equal moment a .subtract   d: 1   .calendar          2 00        yesterday at the same time  ;          javascript // zh tw.js test.equal moment a .calendar                             2 00        today at the same time  ; test.equal moment a .add   m: 25   .calendar              2 25        Now plus 25 min  ; test.equal moment a .add   h: 1   .calendar               3 00        Now plus 1 hour  ; test.equal moment a .add   d: 1   .calendar               2 00        tomorrow at the same time  ; test.equal moment a .subtract   h: 1   .calendar          1 00        Now minus 1 hour  ; test.equal moment a .subtract   d: 1   .calendar          2 00        yesterday at the same time  ;     ,rockymeza,closed,13,2012-03-23 07:10:09,2012-03-26 16:29:27,,Bug,Language,,,1,1
14027,moment/moment,223,Failing Unit Tests.,This wasn t happening around an hour ago...  The tests that are failing are in  lang:gl   calendar last week .  Here are the failures  emphasis added : 1.  157.1 Today   2 days current time  o M rcores pasado   a   1:23 == o M rcores pasado 1:23  2.  157.4 Today   3 days current time  o Martes pasado   a   1:23 == o Martes pasado 1:23  3.  157.7 Today   4 days current time  o Luns pasado   a   1:23 == o Luns pasado 1:23  4.  157.10 Today   5 days current time  o Domingo pasado   a   1:23 == o Domingo pasado 1:23  5.  157.13 Today   6 days current time  o S bado pasado   a   1:23 == o S bado pasado 1:23       Date.prototype.toString = Fri Mar 23 2012 01:21:34 GMT 0600  MDT  Date.prototype.toLocaleString = Fri 23 Mar 2012 01:21:34 AM MDT Date.prototype.getTimezoneOffset = 420 navigator.userAgent = Mozilla/5.0  Ubuntu; X11; Linux x86_64; rv:9.0.1  Gecko/20100101 Firefox/9.0.1      I don t speak Galician  but I looked at the code and I think I know what s wrong  code coming. ,rockymeza,closed,1,2012-03-23 07:31:51,2012-03-23 17:09:30,,Bug,Language,,,0,1
14026,moment/moment,224,Fixed one o clock bug for Galician with calendar.,I also added a regression test to be able to test this without having to wake up at 1 o clock in the morning.  This addresses  223. ,rockymeza,closed,0,2012-03-23 07:47:01,2012-03-23 16:50:02,,,,1,1
14025,moment/moment,225,The Finnish translation,Here s the Finnish translation. I didn t add a separate test for the isFuture  but at least all the other translations work and the current test cases passed  so it should be good to go. ,bleadof,closed,1,2012-03-23 11:42:38,2012-03-23 11:56:46,,,,1,1
14024,moment/moment,226,The Finnish translation,Okay  so here s the Finnish translation with the tests included. I didn t do a test for the added isFuture argument   but I tested that all the tests and translation tests passed. This should be good to go.  Also my friend had a read and spotted an issue which is also fixed here.  Closes issue https://github.com/timrwood/moment/issues/218 ,bleadof,closed,1,2012-03-23 12:00:12,2012-03-23 17:44:26,,Language,,,1,1
14023,moment/moment,227,Deprecate format tokens  z zz ,See  162 ,timrwood,closed,0,2012-03-23 17:36:00,2012-04-11 04:03:14,,Deprecate,,,0,1
14022,moment/moment,228,Deprecate moment.meridiem.am/AM/pm/PM,Replace with moment.meridiem.upper/lower functions and default to  am/pm  ,timrwood,closed,1,2012-03-23 17:37:20,2012-04-11 04:04:00,,Deprecate,,,0,1
14021,moment/moment,229,Added Japanese ext and Changed some format in Chinese,If the digit was allowed in month  please merge those code. ,baryon,closed,0,2012-03-24 10:48:53,2012-04-02 15:20:21,,Language,,,1,1
14020,moment/moment,230,Summer Time Issue?,calendar day 6 passed 1 failed. 59.1 today at the same time 59.2 Now plus 25 min 59.3 Now plus 1 hour 59.4 tomorrow at the same time 59.5 tomorrow minus 1 hour  dem  a la 1:00 == dem  a les 0:00  AssertionError: tomorrow minus 1 hour     at Object.equal  http://momentjs.com/js/tests.js?_=120322_094056:1526:39      at http://momentjs.com/js/tests.js?_=120322_094056:2989:14     at Object.runTest  http://momentjs.com/js/tests.js?_=120322_094056:1702:9      at http://momentjs.com/js/tests.js?_=120322_094056:1748:25     at http://momentjs.com/js/tests.js?_=120322_094056:1006:13     at http://momentjs.com/js/tests.js?_=120322_094056:616:13     at http://momentjs.com/js/tests.js?_=120322_094056:627:25     at http://momentjs.com/js/tests.js?_=120322_094056:1008:17     at http://momentjs.com/js/tests.js?_=120322_094056:1589:17 59.6 Now minus 1 hour 59.7 yesterday at the same time  calendar day 6 passed 1 failed. 118.1 today at the same time 118.2 Now plus 25 min 118.3 Now plus 1 hour 118.4 tomorrow at the same time 118.5 tomorrow minus 1 hour  ma ana a la 1:00 == ma ana a las 0:00  AssertionError: tomorrow minus 1 hour     at Object.equal  http://momentjs.com/js/tests.js?_=120322_094056:1526:39      at http://momentjs.com/js/tests.js?_=120322_094056:4122:14     at Object.runTest  http://momentjs.com/js/tests.js?_=120322_094056:1702:9      at http://momentjs.com/js/tests.js?_=120322_094056:1748:25     at http://momentjs.com/js/tests.js?_=120322_094056:1006:13     at http://momentjs.com/js/tests.js?_=120322_094056:616:13     at http://momentjs.com/js/tests.js?_=120322_094056:627:25     at http://momentjs.com/js/tests.js?_=120322_094056:1008:17     at http://momentjs.com/js/tests.js?_=120322_094056:1589:17 118.6 Now minus 1 hour 118.7 yesterday at the same time  calendar day 6 passed 1 failed. 155.1 today at the same time 155.2 Now plus 25 min 155.3 Now plus 1 hour 155.4 tomorrow at the same time 155.5 tomorrow minus 1 hour  ma   a 1:00 == ma    s 0:00  AssertionError: tomorrow minus 1 hour     at Object.equal  http://momentjs.com/js/tests.js?_=120322_094056:1526:39      at http://momentjs.com/js/tests.js?_=120322_094056:4829:14     at Object.runTest  http://momentjs.com/js/tests.js?_=120322_094056:1702:9      at http://momentjs.com/js/tests.js?_=120322_094056:1748:25     at http://momentjs.com/js/tests.js?_=120322_094056:1006:13     at http://momentjs.com/js/tests.js?_=120322_094056:616:13     at http://momentjs.com/js/tests.js?_=120322_094056:627:25     at http://momentjs.com/js/tests.js?_=120322_094056:1008:17     at http://momentjs.com/js/tests.js?_=120322_094056:1589:17 155.6 Now minus 1 hour 155.7 yesterday at the same time  The clocks go forward tonight. ,Jaybuz,closed,4,2012-03-24 18:59:10,2012-06-11 16:45:23,,Bug,,,0,1
14019,moment/moment,231,format timezone unit test failed,info:  Date.prototype.toString = Sat Mar 24 2012 22:45:26 GMT 0600  Hora est ndar central  M xico    Date.prototype.toLocaleString = Sat Mar 24 2012 22:45:26 GMT 0600  Hora est ndar central  M xico    Date.prototype.getTimezoneOffset = 360  navigator.userAgent = Mozilla/5.0  Windows NT 6.1  AppleWebKit/535.11  KHTML  like Gecko  Chrome/17.0.963.79 Safari/535.11  format timezone 2 passed 2 failed. 33.1 moment  .format  z   = It should be something like  PST   true == null  AssertionError: moment  .format  z   =  It should be something like  PST      at Object.ok  http://momentjs.com/js/tests.js?_=120322_094056:1526:39      at http://momentjs.com/js/tests.js?_=120322_094056:2485:14     at Object.runTest  http://momentjs.com/js/tests.js?_=120322_094056:1702:9      at http://momentjs.com/js/tests.js?_=120322_094056:1748:25     at http://momentjs.com/js/tests.js?_=120322_094056:1006:13     at http://momentjs.com/js/tests.js?_=120322_094056:616:13     at http://momentjs.com/js/tests.js?_=120322_094056:627:25     at http://momentjs.com/js/tests.js?_=120322_094056:1008:17     at http://momentjs.com/js/tests.js?_=120322_094056:1589:17 33.2 moment  .format  z   = It should be something like  PST   true == null  AssertionError: moment  .format  z   =  It should be something like  PST      at Object.ok  http://momentjs.com/js/tests.js?_=120322_094056:1526:39      at http://momentjs.com/js/tests.js?_=120322_094056:2486:14     at Object.runTest  http://momentjs.com/js/tests.js?_=120322_094056:1702:9      at http://momentjs.com/js/tests.js?_=120322_094056:1748:25     at http://momentjs.com/js/tests.js?_=120322_094056:1006:13     at http://momentjs.com/js/tests.js?_=120322_094056:616:13     at http://momentjs.com/js/tests.js?_=120322_094056:627:25     at http://momentjs.com/js/tests.js?_=120322_094056:1008:17     at http://momentjs.com/js/tests.js?_=120322_094056:1589:17 33.3  06:00 should be something like   07:30  33.4  0600 should be something like   0700  ,jcruzram,closed,2,2012-03-25 04:49:24,2012-03-30 16:52:45,,Unit Test Failed,,,0,1
14018,moment/moment,232,Show   d seconds ,I have a website where user can check status of batch run. Time varies from several hours to few minutes  and people tend to wait last minutes watching countdown.   moment timestamp .fromNow     was really useful  but it shows  a few seconds  awfully long period  one minute is long time to wait  when you think it s just ten seconds or so .  Changed logic for relativeTime:       javascript if  seconds > 10    seconds < 55     show   d seconds    else if  seconds < 10     show  a few seconds         Unfortunately  I don t have Node installed  so I didn t update minified version or tests  which might be enough reason to reject this pull request . ,ojarva,closed,4,2012-03-26 09:26:27,2012-04-05 07:23:50,,Enhancement,New Feature,,,1,1
14017,moment/moment,233,Moment.js unit test with 19 failed units.,Date.prototype.toString = Mon Mar 26 2012 12:30:30 GMT 0200  Central Europe Daylight Time   Date.prototype.toLocaleString = 26. marec 2012 12:30:30  Date.prototype.getTimezoneOffset =  60  navigator.userAgent = Mozilla/5.0  Windows NT 5.1; rv:9.0.1  Gecko/20100101 Firefox/9.0.1   language used   Slovak   add_subtract add and subtract short All 12 passed. add and subtract long All 8 passed. add and subtract string long All 9 passed. add and subtract string short All 8 passed. add across DST All 3 passed. create array All 8 passed. number All 2 passed. date All 1 passed. moment All 2 passed. undefined All 1 passed. string without format All 2 passed. string from Date.toString All 1 passed. string without format   json All 5 passed. string with format All 23 passed. string with format  timezone  All 8 passed. string with format  timezone offset  All 3 passed. string with array of formats All 3 passed. string with format   years All 2 passed. implicit cloning All 2 passed. explicit cloning All 2 passed. parsing iso All 8 passed. null All 3 passed. days_in_month days in month All 12 passed. days in month leap years All 4 passed. diff diff All 5 passed. diff key after All 9 passed. diff key before All 9 passed. diff month All 1 passed. diff across DST All 2 passed. diff overflow All 4 passed. format format YY All 1 passed. format escape brackets All 5 passed. format timezone All 4 passed. format multiple with zone All 1 passed. isDST All 2 passed. zone All 3 passed. default format All 1 passed. getters_setters getters All 8 passed. setters All 8 passed. setters   falsey values All 1 passed. chaining setters All 7 passed. day setter All 18 passed. humanize_duration humanize duration All 32 passed. humanize duration with suffix All 2 passed. is_moment is moment object All 11 passed. leapyear leap year All 4 passed. eod_sod sod All 7 passed. eod All 7 passed. utc utc and local All 7 passed. creating with utc All 6 passed. lang:ca parse All 96 passed. format ordinal All 31 passed. format month All 12 passed. format week All 7 passed. from All 30 passed. suffix All 2 passed. now from now All 1 passed. fromNow All 2 passed. calendar day 6 passed 1 failed.      59.1 today at the same time 59.2 Now plus 25 min 59.3 Now plus 1 hour 59.4 tomorrow at the same time 59.5 tomorrow minus 1 hour 59.6 Now minus 1 hour 59.7 yesterday at the same time  ahir a les 2:00 == ahir a la 1:00   AssertionError: yesterday at the same time      calendar next week All 15 passed. calendar last week All 15 passed. calendar all else All 4 passed. lang:da parse All 96 passed. format All 18 passed. format ordinal All 31 passed. format month All 12 passed. format week All 7 passed. from All 30 passed. suffix All 2 passed. now from now All 1 passed. fromNow All 2 passed. lang:de parse All 96 passed. format All 18 passed. format ordinal All 31 passed. format month All 12 passed. format week All 7 passed. from All 30 passed. suffix All 2 passed. fromNow All 2 passed. calendar day 5 passed 1 failed.      80.1 today at the same time 80.2 Now plus 25 min 80.3 Now plus 1 hour 80.4 tomorrow at the same time 80.5 Now minus 1 hour 80.6 yesterday at the same time  Gestern um 2:00 Uhr == Gestern um 1:00 Uhr   AssertionError: yesterday at the same time      calendar next week All 15 passed. calendar last week All 15 passed. calendar all else All 4 passed. lang:en gb parse All 96 passed. format All 18 passed. format ordinal All 31 passed. format month All 12 passed. format week All 7 passed. from All 30 passed. suffix All 2 passed. now from now All 1 passed. fromNow All 2 passed. calendar day 5 passed 1 failed.      93.1 today at the same time 93.2 Now plus 25 min 93.3 Now plus 1 hour 93.4 tomorrow at the same time 93.5 Now minus 1 hour 93.6 yesterday at the same time  Yesterday at 2:00 AM == Yesterday at 1:00 AM   AssertionError: yesterday at the same time      calendar next week All 15 passed. calendar last week All 15 passed. calendar all else All 4 passed. lang:en parse All 96 passed. format All 18 passed. format ordinal All 31 passed. format month All 12 passed. format week All 7 passed. from All 30 passed. suffix All 2 passed. now from now All 1 passed. fromNow All 2 passed. calendar day 5 passed 1 failed.      106.1 today at the same time 106.2 Now plus 25 min 106.3 Now plus 1 hour 106.4 tomorrow at the same time 106.5 Now minus 1 hour 106.6 yesterday at the same time  Yesterday at 2:00 AM == Yesterday at 1:00 AM   AssertionError: yesterday at the same time      calendar next week All 15 passed. calendar last week All 15 passed. calendar all else All 4 passed. lang:es parse All 96 passed. format ordinal All 31 passed. format month All 12 passed. format week All 7 passed. from All 30 passed. suffix All 2 passed. now from now All 1 passed. fromNow All 2 passed. calendar day 6 passed 1 failed.      118.1 today at the same time 118.2 Now plus 25 min 118.3 Now plus 1 hour 118.4 tomorrow at the same time 118.5 tomorrow minus 1 hour 118.6 Now minus 1 hour 118.7 yesterday at the same time  ayer a las 2:00 == ayer a la 1:00   AssertionError: yesterday at the same time      calendar next week All 15 passed. calendar last week All 15 passed. calendar all else All 4 passed. lang:eu parse All 96 passed. format All 18 passed. format ordinal All 31 passed. format month All 12 passed. format week All 7 passed. from All 30 passed. suffix All 2 passed. now from now All 1 passed. fromNow All 2 passed. calendar day 5 passed 1 failed.      131.1 today at the same time 131.2 now plus 25 min 131.3 now plus 1 hour 131.4 tomorrow at the same time 131.5 now minus 1 hour 131.6 yesterday at the same time  atzo 02:00etan == atzo 01:00etan   AssertionError: yesterday at the same time      calendar next week All 15 passed. calendar last week All 15 passed. calendar all else All 4 passed. lang:fr parse All 96 passed. format All 18 passed. format ordinal All 31 passed. format month All 12 passed. format week All 7 passed. from All 30 passed. suffix All 2 passed. fromNow All 2 passed. same day 5 passed 1 failed.      143.1 today at the same time 143.2 Now plus 25 min 143.3 Now plus 1 hour 143.4 tomorrow at the same time 143.5 Now minus 1 hour 143.6 yesterday at the same time  Hier   02:00 == Hier   01:00   AssertionError: yesterday at the same time      same next week All 15 passed. same last week All 15 passed. same all else All 4 passed. lang:gl parse All 96 passed. format ordinal All 31 passed. format month All 12 passed. format week All 7 passed. from All 30 passed. suffix All 2 passed. now from now All 1 passed. fromNow All 2 passed. calendar day 6 passed 1 failed.      155.1 today at the same time 155.2 Now plus 25 min 155.3 Now plus 1 hour 155.4 tomorrow at the same time 155.5 tomorrow minus 1 hour 155.6 Now minus 1 hour 155.7 yesterday at the same time  onte   2:00 == onte a 1:00   AssertionError: yesterday at the same time      calendar next week All 15 passed. calendar last week All 15 passed. calendar all else All 4 passed. lang:it parse All 96 passed. format All 18 passed. format ordinal All 31 passed. format month All 12 passed. format week All 7 passed. from All 30 passed. suffix All 2 passed. fromNow All 2 passed. calendar day 5 passed 1 failed.      167.1 today at the same time 167.2 Now plus 25 min 167.3 Now plus 1 hour 167.4 tomorrow at the same time 167.5 Now minus 1 hour 167.6 yesterday at the same time  Ieri alle 02:00 == Ieri alle 01:00   AssertionError: yesterday at the same time      calendar next week All 15 passed. calendar last week All 15 passed. calendar all else All 4 passed. lang:kr format All 18 passed. format ordinal All 31 passed. format month All 12 passed. format week All 7 passed. from All 30 passed. suffix All 2 passed. now from now All 1 passed. fromNow All 2 passed. calendar day 5 passed 1 failed.      179.1 today at the same time 179.2 Now plus 25 min 179.3 Now plus 1 hour 179.4 tomorrow at the same time 179.5 Now minus 1 hour 179.6 yesterday at the same time        2  00  ==       1  00    AssertionError: yesterday at the same time      calendar next week All 15 passed. calendar last week All 15 passed. calendar all else All 4 passed. lang:nb parse All 96 passed. format All 18 passed. format ordinal All 31 passed. format month All 12 passed. format week All 7 passed. from All 30 passed. suffix All 2 passed. now from now All 1 passed. fromNow All 2 passed. calendar day 5 passed 1 failed.      192.1 today at the same time 192.2 Now plus 25 min 192.3 Now plus 1 hour 192.4 tomorrow at the same time 192.5 Now minus 1 hour 192.6 yesterday at the same time  I g r klokken 02:00 == I g r klokken 01:00   AssertionError: yesterday at the same time      calendar next week All 15 passed. calendar last week All 15 passed. calendar all else All 4 passed. lang:nl parse All 96 passed. format All 18 passed. format ordinal All 31 passed. format month All 12 passed. format week All 7 passed. from All 30 passed. suffix All 2 passed. now from now All 1 passed. fromNow All 2 passed. calendar day 5 passed 1 failed.      205.1 today at the same time 205.2 Now plus 25 min 205.3 Now plus 1 hour 205.4 tomorrow at the same time 205.5 Now minus 1 hour 205.6 yesterday at the same time  Gisteren om 02:00 == Gisteren om 01:00   AssertionError: yesterday at the same time      calendar next week All 15 passed. calendar last week All 15 passed. calendar all else All 4 passed. lang:pl parse All 96 passed. format All 18 passed. format ordinal All 31 passed. format month All 12 passed. format week All 7 passed. from All 30 passed. suffix All 2 passed. now from now All 1 passed. fromNow All 3 passed. calendar day 5 passed 1 failed.      218.1 today at the same time 218.2 Now plus 25 min 218.3 Now plus 1 hour 218.4 tomorrow at the same time 218.5 Now minus 1 hour 218.6 yesterday at the same time  Wczoraj o 02:00 == Wczoraj o 01:00   AssertionError: yesterday at the same time      calendar next week All 15 passed. calendar last week All 15 passed. calendar all else All 4 passed. lang:pt parse All 96 passed. format All 18 passed. format ordinal All 31 passed. format month All 12 passed. format week All 7 passed. from All 30 passed. suffix All 2 passed. fromNow All 2 passed. calendar day 5 passed 1 failed.      230.1 today at the same time 230.2 Now plus 25 min 230.3 Now plus 1 hour 230.4 tomorrow at the same time 230.5 Now minus 1 hour 230.6 yesterday at the same time  Ontem  s 02:00 == Ontem  s 01:00   AssertionError: yesterday at the same time      calendar next week All 15 passed. calendar last week All 15 passed. calendar all else All 4 passed. lang:ru parse All 96 passed. format All 18 passed. format ordinal All 31 passed. format month All 12 passed. format week All 7 passed. from All 32 passed. suffix All 2 passed. fromNow All 2 passed. calendar day 5 passed 1 failed.      242.1 today at the same time 242.2 Now plus 25 min 242.3 Now plus 1 hour 242.4 tomorrow at the same time 242.5 Now minus 1 hour 242.6 yesterday at the same time          02:00 ==         01:00   AssertionError: yesterday at the same time      calendar next week All 15 passed. calendar last week All 15 passed. calendar all else All 4 passed. lang:sv parse All 96 passed. format All 18 passed. format ordinal All 31 passed. format month All 12 passed. format week All 7 passed. from All 30 passed. suffix All 2 passed. now from now All 1 passed. fromNow All 2 passed. calendar day 5 passed 1 failed.      255.1 today at the same time 255.2 Now plus 25 min 255.3 Now plus 1 hour 255.4 tomorrow at the same time 255.5 Now minus 1 hour 255.6 yesterday at the same time  Ig r klockan 02:00 == Ig r klockan 01:00   AssertionError: yesterday at the same time      calendar next week All 15 passed. calendar last week All 15 passed. calendar all else All 4 passed. lang:tr parse All 96 passed. format All 18 passed. format ordinal All 31 passed. format month All 12 passed. format week All 7 passed. from All 30 passed. suffix All 2 passed. now from now All 1 passed. fromNow All 2 passed. calendar day 5 passed 1 failed.      268.1 today at the same time 268.2 Now plus 25 min 268.3 Now plus 1 hour 268.4 tomorrow at the same time 268.5 Now minus 1 hour 268.6 yesterday at the same time  d n 02:00 == d n 01:00   AssertionError: yesterday at the same time      calendar next week All 15 passed. calendar last week All 15 passed. calendar all else All 4 passed. lang:zh cn parse All 96 passed. format All 18 passed. format month All 12 passed. format week All 7 passed. from All 30 passed. suffix All 2 passed. now from now All 1 passed. fromNow All 2 passed. calendar day 5 passed 1 failed.      280.1 today at the same time 280.2 Now plus 25 min 280.3 Now plus 1 hour 280.4 tomorrow at the same time 280.5 Now minus 1 hour 280.6 yesterday at the same time     2:00    ==    1:00      AssertionError: yesterday at the same time      calendar next week All 15 passed. calendar last week All 15 passed. calendar all else All 4 passed. lang:zh tw parse All 96 passed. format All 18 passed. format month All 12 passed. format week All 7 passed. from All 30 passed. suffix All 2 passed. now from now All 1 passed. fromNow All 2 passed. calendar day 5 passed 1 failed.      292.1 today at the same time 292.2 Now plus 25 min 292.3 Now plus 1 hour 292.4 tomorrow at the same time 292.5 Now minus 1 hour 292.6 yesterday at the same time     2:00    ==    1:00      AssertionError: yesterday at the same time      calendar next week All 15 passed. calendar last week All 15 passed. calendar all else All 4 passed. ,senky,closed,2,2012-03-26 10:35:12,2012-03-30 16:33:45,,Unit Test Failed,,,0,1
14016,moment/moment,234,Failing tests:  yesterday at the same time ,    Date.prototype.toString = Mon Mar 26 2012 16:43:48 GMT 0200  CEST   Date.prototype.toLocaleString = Mon Mar 26 2012 16:43:48 GMT 0200  CEST   Date.prototype.getTimezoneOffset =  60  navigator.userAgent = Mozilla/5.0  Macintosh; Intel Mac OS X 10_7_3  AppleWebKit/535.11  KHTML  like Gecko  Chrome/17.0.963.83 Safari/535.11      My system timezone is  Europe/Copenhagen  and I think that the issue is caused by the fact that Summer time has started here yesterday. http://en.wikipedia.org/wiki/European_Summer_Time    lang:ca        59.7 yesterday at the same time  ahir a les 2:00 == ahir a la 1:00  AssertionError: yesterday at the same time   at Object.equal  http://momentjs.com/js/tests.js?_=120322_094056:1526:39    at http://momentjs.com/js/tests.js?_=120322_094056:2991:14   at Object.runTest  http://momentjs.com/js/tests.js?_=120322_094056:1702:9    at http://momentjs.com/js/tests.js?_=120322_094056:1748:25   at http://momentjs.com/js/tests.js?_=120322_094056:1006:13   at http://momentjs.com/js/tests.js?_=120322_094056:616:13   at http://momentjs.com/js/tests.js?_=120322_094056:627:25   at http://momentjs.com/js/tests.js?_=120322_094056:1008:17   at http://momentjs.com/js/tests.js?_=120322_094056:1589:17        lang:de        80.6 yesterday at the same time  Gestern um 2:00 Uhr == Gestern um 1:00 Uhr  AssertionError: yesterday at the same time   at Object.equal  http://momentjs.com/js/tests.js?_=120322_094056:1526:39    at http://momentjs.com/js/tests.js?_=120322_094056:3413:14   at Object.runTest  http://momentjs.com/js/tests.js?_=120322_094056:1702:9    at http://momentjs.com/js/tests.js?_=120322_094056:1748:25   at http://momentjs.com/js/tests.js?_=120322_094056:1006:13   at http://momentjs.com/js/tests.js?_=120322_094056:616:13   at http://momentjs.com/js/tests.js?_=120322_094056:627:25   at http://momentjs.com/js/tests.js?_=120322_094056:1008:17   at http://momentjs.com/js/tests.js?_=120322_094056:1589:17        lang:en gb        93.6 yesterday at the same time  Yesterday at 2:00 AM == Yesterday at 1:00 AM  AssertionError: yesterday at the same time   at Object.equal  http://momentjs.com/js/tests.js?_=120322_094056:1526:39    at http://momentjs.com/js/tests.js?_=120322_094056:3660:14   at Object.runTest  http://momentjs.com/js/tests.js?_=120322_094056:1702:9    at http://momentjs.com/js/tests.js?_=120322_094056:1748:25   at http://momentjs.com/js/tests.js?_=120322_094056:1006:13   at http://momentjs.com/js/tests.js?_=120322_094056:616:13   at http://momentjs.com/js/tests.js?_=120322_094056:627:25   at http://momentjs.com/js/tests.js?_=120322_094056:1008:17   at http://momentjs.com/js/tests.js?_=120322_094056:1589:17        lang:en        106.6 yesterday at the same time  Yesterday at 2:00 AM == Yesterday at 1:00 AM  AssertionError: yesterday at the same time   at Object.equal  http://momentjs.com/js/tests.js?_=120322_094056:1526:39    at http://momentjs.com/js/tests.js?_=120322_094056:3907:14   at Object.runTest  http://momentjs.com/js/tests.js?_=120322_094056:1702:9    at http://momentjs.com/js/tests.js?_=120322_094056:1748:25   at http://momentjs.com/js/tests.js?_=120322_094056:1006:13   at http://momentjs.com/js/tests.js?_=120322_094056:616:13   at http://momentjs.com/js/tests.js?_=120322_094056:627:25   at http://momentjs.com/js/tests.js?_=120322_094056:1008:17   at http://momentjs.com/js/tests.js?_=120322_094056:1589:17        lang:es        118.7 yesterday at the same time  ayer a las 2:00 == ayer a la 1:00  AssertionError: yesterday at the same time   at Object.equal  http://momentjs.com/js/tests.js?_=120322_094056:1526:39    at http://momentjs.com/js/tests.js?_=120322_094056:4124:14   at Object.runTest  http://momentjs.com/js/tests.js?_=120322_094056:1702:9    at http://momentjs.com/js/tests.js?_=120322_094056:1748:25   at http://momentjs.com/js/tests.js?_=120322_094056:1006:13   at http://momentjs.com/js/tests.js?_=120322_094056:616:13   at http://momentjs.com/js/tests.js?_=120322_094056:627:25   at http://momentjs.com/js/tests.js?_=120322_094056:1008:17   at http://momentjs.com/js/tests.js?_=120322_094056:1589:17        lang:eu        131.6 yesterday at the same time  atzo 02:00etan == atzo 01:00etan  AssertionError: yesterday at the same time   at Object.equal  http://momentjs.com/js/tests.js?_=120322_094056:1526:39    at http://momentjs.com/js/tests.js?_=120322_094056:4371:14   at Object.runTest  http://momentjs.com/js/tests.js?_=120322_094056:1702:9    at http://momentjs.com/js/tests.js?_=120322_094056:1748:25   at http://momentjs.com/js/tests.js?_=120322_094056:1006:13   at http://momentjs.com/js/tests.js?_=120322_094056:616:13   at http://momentjs.com/js/tests.js?_=120322_094056:627:25   at http://momentjs.com/js/tests.js?_=120322_094056:1008:17   at http://momentjs.com/js/tests.js?_=120322_094056:1589:17        lang:fr        143.6 yesterday at the same time  Hier   02:00 == Hier   01:00  AssertionError: yesterday at the same time   at Object.equal  http://momentjs.com/js/tests.js?_=120322_094056:1526:39    at http://momentjs.com/js/tests.js?_=120322_094056:4611:14   at Object.runTest  http://momentjs.com/js/tests.js?_=120322_094056:1702:9    at http://momentjs.com/js/tests.js?_=120322_094056:1748:25   at http://momentjs.com/js/tests.js?_=120322_094056:1006:13   at http://momentjs.com/js/tests.js?_=120322_094056:616:13   at http://momentjs.com/js/tests.js?_=120322_094056:627:25   at http://momentjs.com/js/tests.js?_=120322_094056:1008:17   at http://momentjs.com/js/tests.js?_=120322_094056:1589:17        lang:gl        155.7 yesterday at the same time  onte   2:00 == onte a 1:00  AssertionError: yesterday at the same time   at Object.equal  http://momentjs.com/js/tests.js?_=120322_094056:1526:39    at http://momentjs.com/js/tests.js?_=120322_094056:4831:14   at Object.runTest  http://momentjs.com/js/tests.js?_=120322_094056:1702:9    at http://momentjs.com/js/tests.js?_=120322_094056:1748:25   at http://momentjs.com/js/tests.js?_=120322_094056:1006:13   at http://momentjs.com/js/tests.js?_=120322_094056:616:13   at http://momentjs.com/js/tests.js?_=120322_094056:627:25   at http://momentjs.com/js/tests.js?_=120322_094056:1008:17   at http://momentjs.com/js/tests.js?_=120322_094056:1589:17        lang:it        167.6 yesterday at the same time  Ieri alle 02:00 == Ieri alle 01:00  AssertionError: yesterday at the same time   at Object.equal  http://momentjs.com/js/tests.js?_=120322_094056:1526:39    at http://momentjs.com/js/tests.js?_=120322_094056:5071:14   at Object.runTest  http://momentjs.com/js/tests.js?_=120322_094056:1702:9    at http://momentjs.com/js/tests.js?_=120322_094056:1748:25   at http://momentjs.com/js/tests.js?_=120322_094056:1006:13   at http://momentjs.com/js/tests.js?_=120322_094056:616:13   at http://momentjs.com/js/tests.js?_=120322_094056:627:25   at http://momentjs.com/js/tests.js?_=120322_094056:1008:17   at http://momentjs.com/js/tests.js?_=120322_094056:1589:17        lang:kr        179.6 yesterday at the same time        2  00  ==       1  00   AssertionError: yesterday at the same time   at Object.equal  http://momentjs.com/js/tests.js?_=120322_094056:1526:39    at http://momentjs.com/js/tests.js?_=120322_094056:5296:14   at Object.runTest  http://momentjs.com/js/tests.js?_=120322_094056:1702:9    at http://momentjs.com/js/tests.js?_=120322_094056:1748:25   at http://momentjs.com/js/tests.js?_=120322_094056:1006:13   at http://momentjs.com/js/tests.js?_=120322_094056:616:13   at http://momentjs.com/js/tests.js?_=120322_094056:627:25   at http://momentjs.com/js/tests.js?_=120322_094056:1008:17   at http://momentjs.com/js/tests.js?_=120322_094056:1589:17        lang:nb        192.6 yesterday at the same time  I g r klokken 02:00 == I g r klokken 01:00  AssertionError: yesterday at the same time   at Object.equal  http://momentjs.com/js/tests.js?_=120322_094056:1526:39    at http://momentjs.com/js/tests.js?_=120322_094056:5543:14   at Object.runTest  http://momentjs.com/js/tests.js?_=120322_094056:1702:9    at http://momentjs.com/js/tests.js?_=120322_094056:1748:25   at http://momentjs.com/js/tests.js?_=120322_094056:1006:13   at http://momentjs.com/js/tests.js?_=120322_094056:616:13   at http://momentjs.com/js/tests.js?_=120322_094056:627:25   at http://momentjs.com/js/tests.js?_=120322_094056:1008:17   at http://momentjs.com/js/tests.js?_=120322_094056:1589:17        lang:nl        AssertionError: yesterday at the same time   at Object.equal  http://momentjs.com/js/tests.js?_=120322_094056:1526:39    at http://momentjs.com/js/tests.js?_=120322_094056:5790:14   at Object.runTest  http://momentjs.com/js/tests.js?_=120322_094056:1702:9    at http://momentjs.com/js/tests.js?_=120322_094056:1748:25   at http://momentjs.com/js/tests.js?_=120322_094056:1006:13   at http://momentjs.com/js/tests.js?_=120322_094056:616:13   at http://momentjs.com/js/tests.js?_=120322_094056:627:25   at http://momentjs.com/js/tests.js?_=120322_094056:1008:17   at http://momentjs.com/js/tests.js?_=120322_094056:1589:17        lang:pl        218.6 yesterday at the same time  Wczoraj o 02:00 == Wczoraj o 01:00  AssertionError: yesterday at the same time   at Object.equal  http://momentjs.com/js/tests.js?_=120322_094056:1526:39    at http://momentjs.com/js/tests.js?_=120322_094056:6038:14   at Object.runTest  http://momentjs.com/js/tests.js?_=120322_094056:1702:9    at http://momentjs.com/js/tests.js?_=120322_094056:1748:25   at http://momentjs.com/js/tests.js?_=120322_094056:1006:13   at http://momentjs.com/js/tests.js?_=120322_094056:616:13   at http://momentjs.com/js/tests.js?_=120322_094056:627:25   at http://momentjs.com/js/tests.js?_=120322_094056:1008:17   at http://momentjs.com/js/tests.js?_=120322_094056:1589:17        lang:pt        230.6 yesterday at the same time  Ontem  s 02:00 == Ontem  s 01:00  AssertionError: yesterday at the same time   at Object.equal  http://momentjs.com/js/tests.js?_=120322_094056:1526:39    at http://momentjs.com/js/tests.js?_=120322_094056:6278:14   at Object.runTest  http://momentjs.com/js/tests.js?_=120322_094056:1702:9    at http://momentjs.com/js/tests.js?_=120322_094056:1748:25   at http://momentjs.com/js/tests.js?_=120322_094056:1006:13   at http://momentjs.com/js/tests.js?_=120322_094056:616:13   at http://momentjs.com/js/tests.js?_=120322_094056:627:25   at http://momentjs.com/js/tests.js?_=120322_094056:1008:17   at http://momentjs.com/js/tests.js?_=120322_094056:1589:17        lang:ru        AssertionError: yesterday at the same time   at Object.equal  http://momentjs.com/js/tests.js?_=120322_094056:1526:39    at http://momentjs.com/js/tests.js?_=120322_094056:6520:14   at Object.runTest  http://momentjs.com/js/tests.js?_=120322_094056:1702:9    at http://momentjs.com/js/tests.js?_=120322_094056:1748:25   at http://momentjs.com/js/tests.js?_=120322_094056:1006:13   at http://momentjs.com/js/tests.js?_=120322_094056:616:13   at http://momentjs.com/js/tests.js?_=120322_094056:627:25   at http://momentjs.com/js/tests.js?_=120322_094056:1008:17   at http://momentjs.com/js/tests.js?_=120322_094056:1589:17        lang:sv        255.6 yesterday at the same time  Ig r klockan 02:00 == Ig r klockan 01:00  AssertionError: yesterday at the same time   at Object.equal  http://momentjs.com/js/tests.js?_=120322_094056:1526:39    at http://momentjs.com/js/tests.js?_=120322_094056:6789:14   at Object.runTest  http://momentjs.com/js/tests.js?_=120322_094056:1702:9    at http://momentjs.com/js/tests.js?_=120322_094056:1748:25   at http://momentjs.com/js/tests.js?_=120322_094056:1006:13   at http://momentjs.com/js/tests.js?_=120322_094056:616:13   at http://momentjs.com/js/tests.js?_=120322_094056:627:25   at http://momentjs.com/js/tests.js?_=120322_094056:1008:17 at http://momentjs.com/js/tests.js?_=120322_094056:1589:17        lang:tr        268.6 yesterday at the same time  d n 02:00 == d n 01:00  AssertionError: yesterday at the same time   at Object.equal  http://momentjs.com/js/tests.js?_=120322_094056:1526:39    at http://momentjs.com/js/tests.js?_=120322_094056:7036:14   at Object.runTest  http://momentjs.com/js/tests.js?_=120322_094056:1702:9    at http://momentjs.com/js/tests.js?_=120322_094056:1748:25   at http://momentjs.com/js/tests.js?_=120322_094056:1006:13   at http://momentjs.com/js/tests.js?_=120322_094056:616:13   at http://momentjs.com/js/tests.js?_=120322_094056:627:25   at http://momentjs.com/js/tests.js?_=120322_094056:1008:17   at http://momentjs.com/js/tests.js?_=120322_094056:1589:17        lang:zh cn        280.6 yesterday at the same time     2:00    ==    1:00     AssertionError: yesterday at the same time   at Object.equal  http://momentjs.com/js/tests.js?_=120322_094056:1526:39    at http://momentjs.com/js/tests.js?_=120322_094056:7243:14   at Object.runTest  http://momentjs.com/js/tests.js?_=120322_094056:1702:9    at http://momentjs.com/js/tests.js?_=120322_094056:1748:25   at http://momentjs.com/js/tests.js?_=120322_094056:1006:13   at http://momentjs.com/js/tests.js?_=120322_094056:616:13   at http://momentjs.com/js/tests.js?_=120322_094056:627:25   at http://momentjs.com/js/tests.js?_=120322_094056:1008:17   at http://momentjs.com/js/tests.js?_=120322_094056:1589:17        lang:zh tw        292.6 yesterday at the same time     2:00    ==    1:00     AssertionError: yesterday at the same time   at Object.equal  http://momentjs.com/js/tests.js?_=120322_094056:1526:39    at http://momentjs.com/js/tests.js?_=120322_094056:7451:14   at Object.runTest  http://momentjs.com/js/tests.js?_=120322_094056:1702:9    at http://momentjs.com/js/tests.js?_=120322_094056:1748:25   at http://momentjs.com/js/tests.js?_=120322_094056:1006:13   at http://momentjs.com/js/tests.js?_=120322_094056:616:13   at http://momentjs.com/js/tests.js?_=120322_094056:627:25   at http://momentjs.com/js/tests.js?_=120322_094056:1008:17   at http://momentjs.com/js/tests.js?_=120322_094056:1589:17     ,jakubroztocil,closed,1,2012-03-26 14:56:03,2012-03-30 16:32:42,,,,0,1
14015,moment/moment,235,Moment.js overflows in parsing,When doing a parsing on a nonexistent date  moment  overflows   eg.      javascript moment  2011 01 41        is parsed as February 10th 2011. The date parser could probably throw an exception or indicate that there s been an error returning null/False or something else  that can t be mixed with a date. ,nailor,closed,9,2012-03-26 19:04:38,2012-06-08 23:41:47,timrwood,Bug,Enhancement,,1.7.0,0,1
14014,moment/moment,236,Use a duration object,Instead of passing a string and number to the add/subtract functions  it would be nice to use a Duration object. Same object can be used for humanize as well. It would be nice if this duration object can be used independent of moment as well. ,nilakanta,closed,19,2012-03-26 19:11:06,2012-04-23 17:57:08,,New Feature,,,0,1
14013,moment/moment,237,Documentation typo,I m not native english speaker so instead of following clone pull request cycle I d like to ask here:  You use the word  deprec  i  ated  instead of  deprecated . Is it intended or a typo?  From: http://momentjs.com/docs/ /displaying/native javascript date/ ,zerkms,closed,1,2012-03-28 03:37:16,2012-03-30 17:24:21,,,,0,1
14012,moment/moment,238,Incorrect age calculation.,Hi   I don t know if this is known or if I am doing something wrong.  The following line: moment [2012 1 19] .diff moment [2002 1 20]    years    Should return 9 years  although it is returning 10.  Can somebody please explain this behavior?  Thanks ,marcalc,closed,2,2012-03-29 20:11:48,2012-05-24 19:25:38,timrwood,Bug,,,0,1
14011,moment/moment,239,Awesomeness ,Yes  I have an issue... this date library is awesome    _Keep up the good work everyone  : _ ,AndrewEQ,closed,2,2012-03-30 08:24:14,2012-04-01 00:20:42,,,,0,1
14010,moment/moment,240,Add unit tests for Korean month parsing,,timrwood,closed,2,2012-03-30 17:21:44,2012-04-23 18:04:17,,Language,,,0,1
14009,moment/moment,241,Add docs on moment.unix and moment.fn.unix,,timrwood,closed,5,2012-03-30 17:46:23,2012-04-26 17:02:03,,,,0,1
14008,moment/moment,242,Get last day of the month?,Will be great to be able to get/set moment instance to last day of the month   similar to eod. ,mb-dev,closed,9,2012-03-30 19:24:27,2012-04-23 18:03:42,,New Feature,,,0,1
14007,moment/moment,243,Better support for quantity of minute/hour/day/month/year  etc,This library only uses the singular form of minute/hour/day/month/year when the quantity is exactly 1. However  in Icelandic  the singular form is used with any number that ends in 1  except when it ends in 11  this is analogous to the written/spoken form:  _one_  eleven  twenty _one_  thirty _one_  :      1 dag 2 daga 3 daga ... 11 daga ... 19 daga 21 dag 22 daga ... 31 dag 32 daga      Could you add support for this? ,hinrik,closed,4,2012-03-30 23:41:52,2012-04-02 05:51:47,,Language,,,0,1
14006,moment/moment,244,Support word inflections in relative time,In the case of relative times  some languages use different inflections for the nouns in  1 day ago  and  in 1 day . The relativeTime hash would need to contain two groups of nouns instead of one. For example  in Icelandic  we say  fyrir 1   degi   s  an   1 day ago  and  eftir 1   dag     in 1 day . ,hinrik,closed,2,2012-03-30 23:56:10,2012-04-02 05:51:30,,Language,,,0,1
14005,moment/moment,245,Moment 1.5 does not parse  YYYYMMDD  formatted dates.,For example:      javascript moment  20120115    YYYYMMDD  .valueOf   // => NaN     ,sfsekaran,closed,5,2012-03-31 01:59:54,2012-04-23 18:08:32,timrwood,Bug,Enhancement,,1.7.0,0,1
14004,moment/moment,246,Icelandic translation,Those couple of failing tests are due to missing inflection   244  and limited quantity support   243 . ,hinrik,closed,2,2012-03-31 15:39:47,2012-04-02 14:36:29,,Language,,,1,1
14003,moment/moment,247,Incorrect parsing of year with format mask  dddd  MMMM Do  YYYY ,Attempting the following:      javascript moment  Saturday  March 31st  2012    dddd  MMMM Do  YYYY  ;      The result will be Sat Mar 31   1900  .  I think this may be an error in the parsing regex  my own investigations found that the parser was attempting to turn the  st  in  31st  into the year  which of course resulted in 0  or 1900.  Here s a basic jsfiddle demonstrating the problem with the most current push: http://jsfiddle.net/TUNet/ ,Twipped,closed,6,2012-03-31 18:05:44,2012-04-06 05:05:10,,Bug,,,0,1
14002,moment/moment,248,Milliseconds formatting  precise ISO times,Milliseconds formatting in moment date  format   support for ISO dates that supply extremely precise times  .000001 seconds .  Example of a date like this would be: 2012 04 02T22:25:45.276419 08:00  This comes from JSON.NET s serialization of DateTimeOffset objects. Enabled this format to function when passed in to the moment date  constructor as a valid ISO format.  Results:  > moment  2012 04 02T22:25:45.276419 08:00  .toString    Before:  Thu Apr 05 2012 09:44:45 GMT 0500  Central Daylight Time    After:  Tue Apr 03 2012 01:25:45 GMT 0500  Central Daylight Time   ,stirno,closed,2,2012-04-03 03:35:30,2012-04-23 18:07:55,,Enhancement,New Feature,,,1,1
14001,moment/moment,249,It would be nice to have a possibility to set timezone but not to always have a local time or UTC ,var pst_time = moment 1332657000   Europe/Vienna   // pst_time   has one time pst_time.zone  America/New_York   // pst_time   has another time  result is based on time difference on this two regions  This is a big issue because for example it I have a Unix timestamp from PST it s hard to convert to another time zone because we need to count if it is PST or PDT. Maybe there is already a good solution ? ,odats,closed,2,2012-04-03 13:17:16,2012-04-10 11:31:44,,New Feature,,,0,1
14000,moment/moment,250,Documented method to retrieve the wrapped Date,It would be nice if there was a  .unwrap    or similar method to return the JavaScript  Date  which is being wrapped. I ve found that this is sometimes necessary for interop with legacy code. ,wolever,closed,2,2012-04-03 20:15:07,2012-04-03 20:17:10,,,,0,1
13999,moment/moment,251,Document method for determining whether a  moment    is valid,Currently there doesn t seem to be any straight forward method of determining whether a  moment    is valid or not  ex  because a parse failed .  Various methods  ex   isNaN  moment  asdf      work  but it would be nice if there was a documented right way to do this.  I would propose:      moment.fn.valid = function         return isNaN  this ;        But there is no doubt a better way. ,wolever,closed,1,2012-04-03 20:45:07,2012-04-03 20:58:17,,,,0,1
13998,moment/moment,252,.valueOf   Unix timestamp   documentation doesn t mention milliseconds,It claims that the return value is a  Unix timestamp   when in fact it returns  milliseconds since the epoch   similar to  but very definitely not  a Unix timestamp .  This is understandable  given the behaviour of  Date    but it would be nice if the documentation made the distinction clear.  See: http://momentjs.com/docs/ /displaying/unix timestamp/  doesn t mention that the return value is milliseconds  and http://momentjs.com/docs/ /parsing/unix timestamp/  mentions that the return value is milliseconds  but calls  milliseconds since the epoch  a  unix timestamp  . ,wolever,closed,4,2012-04-03 21:41:59,2012-04-26 17:02:20,,,,0,1
13997,moment/moment,253,play nicely within an Ender build,The default behaviour of Ender is to attach everything on  module.exports  to the global  ender /    object which messes up _moment_  you get all of the  moment.   methods attached  and lose  moment   . You also get  window.moment  which is unnecessary.  This PR attaches _moment_ as   .moment  so it can be used as   .moment date .add  days   10  .format  YY MM DD   . The  ender  keyword in _package.json_ also makes it show up as an Ender compatible lib in an  ender search .  Hope this is acceptable   Thanks for the   great   lib  ,rvagg,closed,3,2012-04-04 04:37:28,2012-04-23 17:55:52,,Enhancement,New Feature,,,1,1
13996,moment/moment,254,Add support for S SS SSS parsing tokens  milliseconds ,,timrwood,closed,2,2012-04-04 04:40:31,2012-04-23 18:05:24,timrwood,New Feature,,,0,1
13995,moment/moment,255,moment  .diff returns negative value, //Wed  04 Apr 2012 21:09:16 GMT to   = moment.utc  .add  m   60 .toDate  ; seconds = moment.diff to   seconds  ;   I m trying to get the seconds from the current time in UTC and another date that is set in UTC.  I m using  moment.diff    the above code returns a negative value of  3600 instead of 3600.    Is this the correct way to do this? Shouldn t the negative only be if the date has passed? ,btmdave,closed,1,2012-04-04 20:40:17,2012-04-08 18:59:12,,Bug,,,0,1
13994,moment/moment,256,Include momentjs on the documentation site.,When browsing documentation  I love to run the examples in the console.  For instance  try pasting  _.map _.range 10   function i   return i   i;   ;  into the console at http://underscorejs.org.  It s quite convenient.  I was going to create a pull request for it  but it seems that the docs are in a different repo?  Can you direct me towards that repo for future requests?  Thanks  ,braddunbar,closed,2,2012-04-04 23:07:49,2012-04-04 23:42:11,,,,0,1
13993,moment/moment,257,Date comparison functions,Would you accept these additions if I made them?      javascript aMoment.isBefore otherMoment ;         //=> true or false aMoment.isAfter otherMoment ;            //=> true or false aMoment.compareTo otherMoment ;  //=>  1 0  or 1      If so  do you think it would be best to wrap the parameter with a  moment otherMoment   call so you could pass in strings too? My bias is to do exactly that. ,icambron,closed,3,2012-04-05 01:24:22,2012-04-05 02:29:04,,,,0,1
13992,moment/moment,258,New release?,I stumbled onto a nasty bug in 1.5:      > moment  5/25/1982 5:30 AM     _d: Tue  25 May 1982 09:30:00 GMT  _isUTC: false    //but  > moment  5/25/1982 11:30 PM     _d: Tue  04 Jun 1912 00:00:00 GMT  _isUTC: false    //even though  > new Date  5/25/1982 11:00   Tue  25 May 1982 15:00:00 GMT      Since I write Twix s unit tests use that format  they re all broken  leading to an awesome   oh my god  what the hell did I do?  moment . Here s the thing: the bug is fixed in master  though I didn t dig deep enough to figure out what fixed it. But it would be useful if you cut a new release soon. In the meantime  I m just locking Twix to 1.4. ,icambron,closed,3,2012-04-05 05:50:17,2012-04-06 02:12:37,,,,0,1
13991,moment/moment,259,Consider adding support for all formatting tokens as parsing tokens ,These are the unsupported parsing tokens.  Mo Do DDDo do w wo ww z zz LT L LL LLL LLLL   See  247 and  220 for more discussions. ,timrwood,closed,1,2012-04-06 05:03:42,2012-06-08 23:42:28,,New Feature,,,0,1
13990,moment/moment,260,A grammatical change ,I took out the space between dddd AND [en klockan] in the sentence:  lastWeek:  [F rra] dddd[en klockan] LT    previously: lastWeek:  [F rra] dddd [en klockan] LT   Because dddd refers to the name of the day AND [en... to the specific day  e.g.  F rra tisdagen klockan 12:00 . tisdag   en needs to be concatenated to get it grammatically correct. ,iMetro,closed,4,2012-04-06 05:14:07,2012-04-23 17:52:51,,Language,,,1,1
13989,moment/moment,261,Diff does not take into account utc mode.,    javascript var a = moment.utc  .add  hours   1 ; var b = moment  ; console.log a.diff b   hours   ; //  = 1     ,timrwood,closed,1,2012-04-06 06:15:12,2012-04-11 04:10:08,timrwood,Bug,,,0,1
13988,moment/moment,262,Support for two letter days of week,This would be useful for a datepicker or other calendar implementation  for example  where the convention is two letter day column headers. ,eternicode,closed,32,2012-04-06 14:04:17,2012-05-24 16:42:30,,Enhancement,,,1,1
13987,moment/moment,263,Consider switching to iterative parser,Currently  moment parses by converting strings to arrays based on regexes.      javascript  2001 10 5 4:50 AM  = [2001  10  5  4  50   AM ]  YYYY MM DD HH:mm a  = [ YYYY    MM    DD    HH    mm    a ]      Then  the parser loops through each item in the array and converts it to the correct argument for parsing an array to a date.  Instead  perhaps the parser should only chuck up the tokens  then loop through them  tearing chunks of the input string apart.      javascript  2001 10 5 4:50 AM   YYYY MM DD HH:mm a  = [ YYYY    MM    DD    HH    mm    a ] getNextPart  YYYY    2001 10 5 4:50 AM  ; getNextPart  MM     10 5 4:50 AM  ; getNextPart  DD     5 4:50 AM  ; getNextPart  HH     4:50 AM  ; getNextPart  mm    :50 AM  ; getNextPart  a     AM  ;      This could solve both the ISO8601  T  problem/CJK number/month name problem  and the  YYYYMMDD  problem as well.      javascript  20011005   YYYYMMDD  = [ YYYY    MM    DD ] getNextPart  YYYY    20011005  ; getNextPart  MM    1005  ; getNextPart  DD    05  ;     ,timrwood,closed,7,2012-04-06 16:15:16,2012-04-23 18:05:58,timrwood,Enhancement,New Feature,,,0,1
13986,moment/moment,264,Support display of durations as HH:MM:SS.mm,As far as I ve seen the only way of displaying durations is the humanize duration function. It would be nice to format a duration as hours  minutes  etc... ,enyo,closed,4,2012-04-07 11:16:30,2012-05-11 20:16:10,,New Feature,,,0,1
13985,moment/moment,265,Feature/durations,This is a new feature based on the discussion in  236.  I created a new object called Duration that can be  add ed and  subtract ed.  It can be instantiated using the  moment.duration  function.  There are three ways to instantiate a Duration object: Object  key/value  and millisecond.  The following five invocations result in essentially the same Duration object.      javascript moment.duration  seconds: 45  ; moment.duration  s: 45  ; moment.duration 45   seconds  ; moment.duration 45   s  ; moment.duration 45000 ;      I exposed the  Duration.prototype  on  moment.duration.fn .  On it currently there are two methods:  toValue  and  humanize .   toValue  returns the milliseconds of all the options added together.   humanize  contains the functionality that  moment.humanizeDuration  used to contain.  I deprecated  moment.humanizeDuration   but I left it and the tests in place.  It now relies on  Duration.prototype.humanize .   moment.fn.from  also relies on the  Duration.prototype.humanize  now instead of  humanizeDuration .    Things that it doesn t do  yet      There is no  isDuration  function to type check Duration objects.     When  add ing using a duration  it basically clones the duration object by calling  moment.duration  on it.  So  there is no special handling of Durations versus normal Objects in adding and subtracting.     If you create a Duration of 7 days and check the  weeks  property  it will still be zero.    Don t merge this in yet.  I am opening this pull request so that we can continue the conversation and also start developing this feature.  cc @nilakanta ,rockymeza,closed,10,2012-04-07 16:30:05,2012-04-23 17:10:52,,New Feature,,,1,1
13984,moment/moment,266,Add a getter for moment.lang  ,@eternicode get a problem to implement in a calendar widget a per instance translations with moment.js. Changing language on the same page doesn t seem to work.  See https://github.com/eternicode/bootstrap datepicker/issues/24 issuecomment 5008767 .  I have to take the time to see what append but perhaps it s a know limitation of moment.js? ,gagarine,closed,5,2012-04-07 22:25:38,2012-04-23 18:02:03,timrwood,Enhancement,Language,,,0,1
13983,moment/moment,267,Fix for issue 261.,It appears when you are working with two moment objects and you take the diff  the input moment s _isUTC is ignored when you parse the input into inputMoment. I ve done a check to see if it looks like a moment object  by checking the _isUTC to see if it is defined  and if it is  then it just copies the input rather than parsing it. I think it should work fine on regular date objects as there is no _isUTC member. ,damienwhaley,closed,1,2012-04-08 06:19:46,2012-04-08 22:07:31,,Bug,,,1,1
13982,moment/moment,268,Release 1.6.0 discussion,  Note:   this pull request is not ready to be merged in.  I am opening up the version 1.6.0 release for discussion.  In this pull request  I think we should talk about the features that need to be added or removed before we can cut a new version of moment.  Here are some changes that I think should be in version 1.6.    Languages      260  grammatical change for Swedish      229  Japanese      246  Icelandic      222   221  Chinese fixes      226  Finnish    To be removed      228  old style am/AM/pm/PM handling      227  z zz timezone tokens      216  moment.fn.native    New Features that have already been written      253  Ender compatibility      222  new style am/AM/pm/PM handling      266  Adding a getter for moment.lang        263  new parser      254  support for S SS and SSS millisecond tokens      236/ 265  Durations      267   moment.clone   does not copy the  _isUTC  property      261   moment.diff   does not take into account utc mode      213   moment.unix   and moment.fn.unix        275   moment.utc string  parses ISO8601 as local time when timezone is missing    New features that have not been written    Things that should not go into this release      266  per instance language configuration    1.7 ???      235  moment.fn.isValid    1.7 ???      262  Two letter month name formatting tokens    1.7 ???      283  Generic endOf and startOf to abstract sod/eod    1.7 ??? ,rockymeza,closed,9,2012-04-08 13:48:09,2012-04-26 16:55:32,,,,1,1
13981,moment/moment,269,Second attempt at a fix for issue 261. ,This actually does an explicit moment check when parsing to create a moment object. ,damienwhaley,closed,1,2012-04-08 22:14:38,2012-04-09 16:40:48,,,,1,1
13980,moment/moment,270,Moment is buggy in distant dates  years 100000   0 ,   moment  0000 01 01T00:00:00.000Z     moment  62198755200000 .format      // extended years not supported   expect  moment   275760 09 13T00:00:00Z   .toBe 8.64e15 ;    // Opera bug   moment  3509827334573292 .month   === 12 in Opera 11.6x/12 ,Yaffle,closed,1,2012-04-10 10:19:37,2012-06-08 23:40:26,,Bug,,,0,1
13979,moment/moment,271,failed tests,format timezone 2 passed 2 failed.      33.1 moment  .format  z   = It should be something like  PST   true == null   AssertionError: moment  .format  z   =  It should be something like  PST   33.2 moment  .format  z   = It should be something like  PST   true == null   AssertionError: moment  .format  z   =  It should be something like  PST   33.3  01:00 should be something like   07:30  33.4  0100 should be something like   0700       Date.prototype.toString = Tue Apr 10 2012 17:57:52 GMT 0200  Date.prototype.toLocaleString = mardi 10 avril 2012 17:57:52  Date.prototype.getTimezoneOffset =  60  navigator.userAgent = Mozilla/5.0  Windows NT 5.1; rv:11.0  Gecko/20100101 Firefox/11.0 ,sylis,closed,1,2012-04-10 15:59:27,2012-04-11 04:04:11,,Unit Test Failed,,,0,1
13978,moment/moment,272,format differs between linux and windows,My testmoment.js script:      javascript var moment = require  moment  ;  moment.utc  04/22/2012  .format moment.isoFormat ;      When I run this on Windows I get 07:00      bash  C: Program Files nodejs node.exe  adhoctests testmoment.js 2012 04 22T07:00:00 00:00      When I run this on Linux I get 00:00      bash [user  ]  node adhoctests/testmoment.js 2012 04 22T00:00:00 00:00      I d be happy to see if I can fix this up if you point me in the right direction. ,katowulf,closed,10,2012-04-10 18:17:51,2012-04-12 17:18:00,,,,0,1
13977,moment/moment,273,1.5.1 Release Notes,    Release Date  April 5 2012     Bugfixes  215    moment string   would sometimes inaccurately parse a non ISO8601 string as ISO8601. ,timrwood,closed,1,2012-04-11 04:16:14,2012-04-11 04:16:50,,,,0,1
13976,moment/moment,274,Other Calendars?,Please add other calendars to moment? http://en.wikipedia.org/wiki/List_of_calendars In_use ,omid,closed,6,2012-04-12 06:52:33,2012-04-17 16:38:07,,,,0,1
13975,moment/moment,275,moment.utc string  parses ISO8601 as local time when timezone is missing,See this comment: https://github.com/timrwood/moment/issues/272 issuecomment 5095486 ,timrwood,closed,21,2012-04-12 16:56:47,2012-04-25 00:18:12,timrwood,Bug,,,0,1
13974,moment/moment,276,wrong result in daysInMonth  ,Example: date: 01/29/2012 d_in_month: 31 date: 01/30/2012 d_in_month: 29 date: 01/31/2012 d_in_month: 29 date: 02/01/2012 d_in_month: 29  For dates 01/30/2012 and 01/31/2012 result of daysInMonth   is 29  but thats wrong  must be 31  Patch for this method:          daysInMonth : function              var next_month = this.clone  .month this.month     1 ;         if  this.date    = next_month.date                  next_month.date 0 ;                    return next_month.date 0 .date  ;           ,DmitryMarkin,closed,1,2012-04-12 20:33:55,2012-04-12 22:37:44,,,,0,1
13973,moment/moment,277,Failing tests,Just try to run the tests on momentjs.com got 5 faling tests :  calendar last week 10 passed 5 failed. 157.1 Today   2 days current time  o Xoves pasado a 1:44 == o Xoves pasado 1:44  AssertionError: Today   2 days current time     at Object.equal  http://momentjs.com/js/tests.js?_=120322_094056:1526:39      at http://momentjs.com/js/tests.js?_=120322_094056:4859:18     at Object.runTest  http://momentjs.com/js/tests.js?_=120322_094056:1702:9      at http://momentjs.com/js/tests.js?_=120322_094056:1748:25     at http://momentjs.com/js/tests.js?_=120322_094056:1006:13     at http://momentjs.com/js/tests.js?_=120322_094056:616:13     at http://momentjs.com/js/tests.js?_=120322_094056:627:25     at http://momentjs.com/js/tests.js?_=120322_094056:1008:17     at http://momentjs.com/js/tests.js?_=120322_094056:1589:17 157.2 Today   2 days beginning of day 157.3 Today   2 days end of day 157.4 Today   3 days current time  o M rcores pasado a 1:44 == o M rcores pasado 1:44  AssertionError: Today   3 days current time     at Object.equal  http://momentjs.com/js/tests.js?_=120322_094056:1526:39      at http://momentjs.com/js/tests.js?_=120322_094056:4859:18     at Object.runTest  http://momentjs.com/js/tests.js?_=120322_094056:1702:9      at http://momentjs.com/js/tests.js?_=120322_094056:1748:25     at http://momentjs.com/js/tests.js?_=120322_094056:1006:13     at http://momentjs.com/js/tests.js?_=120322_094056:616:13     at http://momentjs.com/js/tests.js?_=120322_094056:627:25     at http://momentjs.com/js/tests.js?_=120322_094056:1008:17     at http://momentjs.com/js/tests.js?_=120322_094056:1589:17 157.5 Today   3 days beginning of day 157.6 Today   3 days end of day 157.7 Today   4 days current time  o Martes pasado a 1:44 == o Martes pasado 1:44  AssertionError: Today   4 days current time     at Object.equal  http://momentjs.com/js/tests.js?_=120322_094056:1526:39      at http://momentjs.com/js/tests.js?_=120322_094056:4859:18     at Object.runTest  http://momentjs.com/js/tests.js?_=120322_094056:1702:9      at http://momentjs.com/js/tests.js?_=120322_094056:1748:25     at http://momentjs.com/js/tests.js?_=120322_094056:1006:13     at http://momentjs.com/js/tests.js?_=120322_094056:616:13     at http://momentjs.com/js/tests.js?_=120322_094056:627:25     at http://momentjs.com/js/tests.js?_=120322_094056:1008:17     at http://momentjs.com/js/tests.js?_=120322_094056:1589:17 157.8 Today   4 days beginning of day 157.9 Today   4 days end of day 157.10 Today   5 days current time  o Luns pasado a 1:44 == o Luns pasado 1:44  AssertionError: Today   5 days current time     at Object.equal  http://momentjs.com/js/tests.js?_=120322_094056:1526:39      at http://momentjs.com/js/tests.js?_=120322_094056:4859:18     at Object.runTest  http://momentjs.com/js/tests.js?_=120322_094056:1702:9      at http://momentjs.com/js/tests.js?_=120322_094056:1748:25     at http://momentjs.com/js/tests.js?_=120322_094056:1006:13     at http://momentjs.com/js/tests.js?_=120322_094056:616:13     at http://momentjs.com/js/tests.js?_=120322_094056:627:25     at http://momentjs.com/js/tests.js?_=120322_094056:1008:17     at http://momentjs.com/js/tests.js?_=120322_094056:1589:17 157.11 Today   5 days beginning of day 157.12 Today   5 days end of day 157.13 Today   6 days current time  o Domingo pasado a 1:44 == o Domingo pasado 1:44  AssertionError: Today   6 days current time     at Object.equal  http://momentjs.com/js/tests.js?_=120322_094056:1526:39      at http://momentjs.com/js/tests.js?_=120322_094056:4859:18     at Object.runTest  http://momentjs.com/js/tests.js?_=120322_094056:1702:9      at http://momentjs.com/js/tests.js?_=120322_094056:1748:25     at http://momentjs.com/js/tests.js?_=120322_094056:1006:13     at http://momentjs.com/js/tests.js?_=120322_094056:616:13     at http://momentjs.com/js/tests.js?_=120322_094056:627:25     at http://momentjs.com/js/tests.js?_=120322_094056:1008:17     at http://momentjs.com/js/tests.js?_=120322_094056:1589:17 157.14 Today   6 days beginning of day 157.15 Today   6 days end of day  My timezone is Europe/Paris. ,jjaffeux,closed,1,2012-04-13 23:45:51,2012-04-17 09:44:40,,,,0,1
13972,moment/moment,278,problem with eod   and UTC date,Hi   I think there is a problem with how eod   handle UTC formatted date. I use the version bundled with Kalendae a JS calendar widget.  In the documentation it s written:  > Set the time to the end of the day. >  > moment  .eod  ; // set the time to 11:59:59.999 pm tonight > This is essentially the same as the following. >  > moment  .hours 23 .minutes 59 .seconds 59 .milliseconds 999 ;  But when you use eod    the date is converted to localtime. ex:   > moment.utc  03 07 2012   MM DD YYYY  .eod  .toString   >  Wed Mar 07 2012 23:59:59 GMT 0100  CET   > Kalendae.moment.utc  03 07 2012   MM DD YYYY  .hours 23 .minutes 59 .seconds 59 .milliseconds 999 .toString   >  Thu Mar 08 2012 00:59:59 GMT 0100  CET    I ve created a unit test to verify the behavior.   regards  PS: Thanks for this great lib ,egguy,closed,4,2012-04-16 17:11:51,2012-04-23 17:43:43,,,,1,1
13971,moment/moment,279,1.5.2 Release Notes Discussion,    Release Date  ???     Bugfixes  275   moment.utc string  parses ISO8601 as local time when timezone is missing  267   moment.clone   does not copy the  _isUTC  property  261   moment.diff   does not take into account utc mode ,timrwood,closed,2,2012-04-17 16:30:49,2012-04-24 16:07:52,,,,0,1
13970,moment/moment,280,Limit granularity of humanized output,Is it possible to limit humanized output to a certain granularity?  For example:      javascript  // current moment  2012 04 18  .from moment  2012 04 18     >  a few seconds ago   // desired moment  2012 04 18  .from moment  2012 04 18     >  today      ,martinpengellyphillips,closed,3,2012-04-18 13:39:16,2012-04-23 18:00:56,,,,0,1
13969,moment/moment,281,Use Moment instead of moment,Would be nice if  Moment.isMoment myMoment   could be used instead of the lowercase  moment.isMoment myMoment  . Everything that is class like is usually uppercase.  Otherwise  the library is great   ,sandstrom,closed,3,2012-04-19 15:20:57,2012-04-23 18:00:43,,,,0,1
13968,moment/moment,282,Return a duration in moment.fn.diff?,Right now   moment.fn.diff  is in need of a re write. What do you guys think about returning a duration from moment.fn.diff? Because of the  valueOf   it will work similarly to how it does now  but there could be some problems.      javascript var a = moment [2012  10  20] .diff [2012  10  21] ; // returns duration object if  a > 1000        // this will work   if  a        // this won t work   var b = a   100; // will work      The benefit from this is that we can deprecate the keys from  moment.fn.diff val  key   and use the  .asYears  instead. ,timrwood,closed,5,2012-04-23 16:42:15,2012-07-02 20:39:34,,Deprecate,New Feature,,,0,1
13967,moment/moment,283,Added generic functions endOf and startOf,Hi   I have created generic endOf and startOf methods that fill the same purpose as the methods eod and sod but not just for days. You supply a string parameter  years    months    days    hours    minutes  or  seconds  and get the end or start of the year or month for example. Also changed the existing eod and sod methods to use the generic methods to reduce duplication.  Unit tests added and passed in the sod_eod.js.  I think this is a usefull feature which reduces the code needed to do it for a user of the library.  Thank you  Mattias ,mattiasrunge,closed,7,2012-04-23 18:27:55,2012-04-27 00:19:33,,New Feature,,,1,1
13966,moment/moment,284,korean lang kr.js  is have error,I found one error in kr.js that is    moment  .subtract  days   3 .calendar            undefined 3  44    so i fixed kr.js.  undefined  >   /     thanks. ,hsj1023,closed,1,2012-04-25 06:52:04,2012-04-25 13:50:42,,,,1,1
13965,moment/moment,285,2.0.0 Release discussion,This is for the 2.0.0 release. All code should be on the  develop  branch.    Bugfixes    Language updates    416 Indonesian  id     414 Esperanto  eo     415 Latvian  lv     413 Danish  da  capital day fixes  update the issue number when there is the new pull request     483 Nepali  ne     New Features    373 Adding  YYYYY  token to support   270 000  to  270 000  years    444 Added  moment.fn.toJSON     405 Add  lang.preparse  and  lang.postformat     406 Switch to grunt    128 Add AMD support for languages    579 Change add/subtract to allow for  add 1   second    as well as  add  second   1      584 Added short form localized tokens    Backwards Incompatible changes      283  Replace sod/eod with startOf/endOf      293  Removing kr and jp in favor of ko and ja      468  Changing two digit year parsing to match  strptime       334  Deprecate langData objects on the moment namespace.      577  Changing lang.ordinal to return number   ordinal instead of just the ordinal ,timrwood,closed,9,2012-04-25 16:21:32,2013-02-08 22:53:18,,,,0,1
13964,moment/moment,286,UTC mode isn t retained after cloning nor after .sod  ,After cloning a moment the UTC mode isn t retained. Same goes with .sod    These lines illustrate the problem:      var m = moment.utc  ; m.format   === m.clone  .format  ; // false m.hours 0 .minutes 0 .seconds 0 .milliseconds 0 .format   === m.sod  .format  ; // false  m.clone  .valueOf   == m.valueOf  ; // true m.hours 0 .minutes 0 .seconds 0 .milliseconds 0 .valueOf   === m.sod  .valueOf  ; // false     ,sandstrom,closed,1,2012-04-26 13:44:43,2012-04-26 14:22:31,,,,0,1
13963,moment/moment,287,1.6.2 release notes,   Release date: May 4 2012    Bugfixes    291 moment.utc   always returns Sat Jan 1 2000    297  moment  1    M a    should not blow up if it am/pm is not found    295 auto parsing ISO8601 should allow partial seconds and  Z  timezone identifier    301 Fixing thrown error when parsing an empty string with multiple formats    299 Fixing moment.humanizeDuration 100  true  syntax    Language updates    300 Correct the chinese translation of  future  ,timrwood,closed,1,2012-04-26 16:56:44,2012-05-04 17:27:46,,,,0,1
13962,moment/moment,288,1.7.0 Changelog,   New features    283 Added generic endOf and startOf functions    306 Add  moment.fn.isValid     317 Cached formatting functions    313 Add support for month/weekday callbacks in moment.fn.format    296 Add singular/plural forms for startOf/endOf    332 Instance languages    262 Support for two letter days of week    Bugfixes    235 Moment.js overflows in parsing    323  moment.utc number   is broken    314 False positive when checking for NodeJS alongside QUnit    367 Parsing first century years and creating a moment with   270 000 years in array    371 Parsing  moment.utc string  format   was broken when the string had a timezone offset    Language updates    318 Add Hungarian language    316 Add Persian language    326 Add Romanian language    305 Add Chuvash Language    307 Minor fix for  LLL  format in Japanese    312 Fix month name nominative case in Russian    327 Remove ordinal from Turkish language    293 Switch from TLD to two letter language code ,timrwood,closed,11,2012-04-26 16:57:19,2012-08-03 16:32:14,,,,0,1
13961,moment/moment,289,Parsing ISO unit tests failed,Data: Date.prototype.toString = Sat Apr 28 2012 12:37:36 GMT 0530  IST  Date.prototype.toLocaleString = Sat 28 Apr 2012 12:37:36 PM IST Date.prototype.getTimezoneOffset =  330 navigator.userAgent = Mozilla/5.0  X11; Linux i686; rv:12.0  Gecko/20100101 Firefox/12.0  Test results: parsing iso 0 passed 8 failed.  23.1 moment should be able to parse ISO 2011 10 08  2011 10 08T00:00:00 06:0 30 == 2011 10 08T00:00:00 05:30  AssertionError: moment should be able to parse ISO 2011 10 08  23.2 moment should be able to parse ISO 2011 10 08T18  2011 10 08T18:00:00 06:0 30 == 2011 10 08T18:00:00 05:30  AssertionError: moment should be able to parse ISO 2011 10 08T18  23.3 moment should be able to parse ISO 2011 10 08T18:04  2011 10 08T18:04:00 06:0 30 == 2011 10 08T18:04:00 05:30  AssertionError: moment should be able to parse ISO 2011 10 08T18:04  23.4 moment should be able to parse ISO 2011 10 08T18:04:20  2011 10 08T18:04:20 06:0 30 == 2011 10 08T18:04:20 05:30  AssertionError: moment should be able to parse ISO 2011 10 08T18:04:20  23.5 moment should be able to parse ISO 2011 10 08T18:04 06:0 30  2011 10 08T18:04:00 06:0 30 == 2011 10 08T18:04:00 05:30  AssertionError: moment should be able to parse ISO 2011 10 08T18:04 06:0 30  23.6 moment should be able to parse ISO 2011 10 08T18:04:20 06:0 30  2011 10 08T18:04:20 06:0 30 == 2011 10 08T18:04:20 05:30  AssertionError: moment should be able to parse ISO 2011 10 08T18:04:20 06:0 30  23.7 moment should be able to parse ISO 2011 10 08T18:04 060 30  2011 10 08T18:04:00 06:0 30 == 2011 10 08T18:04:00 05:30  AssertionError: moment should be able to parse ISO 2011 10 08T18:04 060 30  23.8 moment should be able to parse ISO 2011 10 08T18:04:20 060 30  2011 10 08T18:04:20 06:0 30 == 2011 10 08T18:04:20 05:30  AssertionError: moment should be able to parse ISO 2011 10 08T18:04:20 060 30 ,kvprashant,closed,3,2012-04-28 07:12:38,2012-05-04 17:30:55,,Unit Test Failed,,,0,1
13960,moment/moment,290,ISO week number,For calendars it is useful to be able to get the ISO week number. I took the code [from a blog post] http://techblog.procurios.nl/k/n618/news/view/33796/14863/Calculate ISO 8601 week and year in javascript.html  on the subject and  translated  it to use the moment API. My manual testing has shown no incorrect results  but since I didn t write unit test nor change the original file I have no pull request to share.      // return the day of the week starting with Monday  Monday = 0 .. Sunday = 6  moment.fn.dayISO = function         return  this.day     6    7;    // return the ISO week number from 1..52 or 53 // note: the first days of a year can belong to last year s week in some cases moment.fn.weekISO = function         var firstThursday  target;     target = this.clone  ;     target.add  days   3   target.dayISO   ;     firstThursday = target.clone  ;     target.month 0 ;     target.date 1 ;     target.add  days    10   target.dayISO      7 ;     return Math.ceil firstThursday.diff target   days   / 7    1;       ,avonwyss,closed,7,2012-04-29 22:24:17,2012-06-17 01:37:22,,New Feature,,,0,1
13959,moment/moment,291,moment.utc   always returns Sat Jan 1 2000,It seems that the timezone handling code broke the  moment.utc    call without parameters. According to documentation it should return the current date as utc. ,avonwyss,closed,2,2012-04-30 00:02:25,2012-05-04 17:29:14,,Bug,,,0,1
13958,moment/moment,292,Multiple languages,Probably I m missing something  but as far as I can see from the source is not possible to have multiple languages and create a context with that language.  This is obviously not an issue in the browser  where once  moment  has loaded that instance will run for one sole user  but in a Node.js application where the same  moment  function will serve multiple users  how could I create a context  remember Node s ayncronicity   with a specific language?  A simple solution would be to set the language before any use  but a race conditions could easily break things   moment  at this moment is a big singleton and currentLanguage resides in a _private_ variable shared by every function. This is good  but not so useful in SSJS   What I d like to do is the following:      javascript  var express = require   express   ; var moment = require   moment   ; var translate = require   translate   ; // Some i18n util  var app = express  ;  var starttime = new Date  ;  app.use  function   err  req  res  next       // Imagine a middleware which understand which language to   // use based on HTTP Request headers...   var lang = req.lang;   // Creates a moment context...  possibly memoized    req.moment = moment.forLang  lang  ;   req.translate = translate.forLang  lang  ;   next  ;   ;  // And later...  app.get   /info   function   req  res       // Translating using an instance of the i18n util   var msg = req.translate       Application started  0        req.moment  starttime  .fromNow      ;   // Passing the translated message   res.locals.message = msg;   // A view which uses the message   res.render   info   ;   ;      ,yuchi,closed,8,2012-04-30 14:08:07,2012-06-12 17:10:10,,Language,New Feature,,,0,1
13957,moment/moment,293,Switch from TLD to two letter language code ?,[See this comment] https://github.com/timrwood/moment/issues/285 issuecomment 5401030  ,timrwood,closed,6,2012-04-30 17:46:27,2012-07-25 16:46:41,,Deprecate,,,0,1
13956,moment/moment,294,Switch to LDML?,[Relevant spreadsheet] https://docs.google.com/spreadsheet/ccc?key=0AtgZluze7WMJdDBOLUZfSFIzenIwOHNjaWZoeGFqbWc hl=en_US gid=0   Also  see  61 ,timrwood,closed,7,2012-04-30 17:48:48,2012-05-11 16:18:28,,Deprecate,,,0,1
13955,moment/moment,295,Parsing date strings isn t handling timezones correctly,I ve noticed that if I parse an ISO 8601 date string then the timezone in the string will be ignored  producing an incorrect time. I can reproduce by doing this:      javascript // the current time   note that it s 10:41 in GMT 10:00 date = moment  .toDate   // Tue May 01 2012 10:41:45 GMT 1000  EST   // convert the date object to an iso 8601 string   note that the time has been converted to UTC dateStr = date.toISOString   //  2012 05 01T00:42:45.229Z   // parse the date string back in   now the time is in UTC but the timezone is GMT 10:00  so I ve lost 10 hours  moment dateStr .toDate   // Tue May 01 2012 00:42:45 GMT 1000  EST       I m seeing this bug in Safari 5.1.5 and Chrome 18  I ve been able to fix this in my own app by using  Date.parse dateStr   and then passing the integer result to  moment    instead. ,iainbeeston,closed,3,2012-05-01 00:45:52,2012-05-04 17:29:03,,Bug,,,0,1
13954,moment/moment,296,Add singular/plural forms for durations and startOf/endOf?,See [this comment] https://github.com/timrwood/moment/pull/283 issuecomment 5448397   Adding support for either form adds 136 bytes to the minified version and 39 bytes to the gzipped version. ,timrwood,closed,6,2012-05-01 21:20:20,2012-06-11 21:15:07,,Enhancement,,,0,1
13953,moment/moment,297,Parse Bug for AM/PM Check,I came across a small issue where Moment would error when checking for AM/PM if the input string was too short. Which kind of makes sense because the input is too short. If it failed nicely  it allows for partial inputs. In my case the user can search by whatever will parse first.   The culprit: https://github.com/timrwood/moment/blob/1.2.0/moment.js L244      javascript config.isPm =  input.toLowerCase   ===  pm  ;      This can be reproduced by:       javascript moment  05/1/2012    MM/DD/YYYY h:m:s a  ;      A quick fix can be implemented by changing that line to:      javascript config.isPm =  typeof input ==  string     input.toLowerCase   ===  pm  ;      Verfied by the tests:      javascript moment  05/1/2012    MM/DD/YYYY h:m:s a  ; moment  05/1/2012 12:25:00 am    MM/DD/YYYY h:m:s a  ; moment  05/1/2012 12:25:00 pm    MM/DD/YYYY h:m:s a  ;      Thanks for the great work on Moment. It is great to use. I makes Javascript s wonky dates much simpler.   Seth ,four43,closed,4,2012-05-01 22:28:00,2012-05-04 17:27:54,,Bug,,,0,1
13952,moment/moment,298,Add  make test all zones  to run the tests in all timezones.,This will need to use  systemsetup settimezone .  See this for potential inspiration https://bitbucket.org/pellepim/jstimezonedetect/issue/3/so ,timrwood,closed,4,2012-05-02 21:54:32,2012-05-04 17:29:23,,,,0,1
13951,moment/moment,299,Moment.js Documentation errors,at this page: http://momentjs.com/docs/ /displaying/humanize duration/   moment.humanizeDuration 60000  true ;   should be  moment.humanizeDuration 60000  null true ;   ,conanca,closed,2,2012-05-03 06:21:19,2012-05-04 17:28:03,,Bug,,,0,1
13950,moment/moment,300,correct the translation of  future ,it should be     instead of     ,conanca,closed,6,2012-05-03 07:28:27,2012-05-04 17:01:16,,Language,,,1,1
13949,moment/moment,301,Error on trying to make date from  empty  string and format,moment      someFormat  will throw an error:   inputParts is null  on line:  len = Math.min inputParts.length  formatParts.length  ,anton-107,closed,2,2012-05-03 15:12:14,2012-05-04 17:28:32,,Bug,,,0,1
13948,moment/moment,302,Parse all S SS SSS tokens the same way.,https://github.com/timrwood/moment/commit/05b2573c509b0a9723d687f551cc935929650b97 L2R49  @rockymeza we can merge these three lines into one if we switch the way the parser handles  S SS SSS . Instead of handling them all separately  we could just have them fall through to one block like the hours do.      javascript case  S  : case  SS  : case  SSS  :     datePartArray[6] = parseFloat  0.    input    1000;     break;      The drawback for this is it may break in the following cases.      javascript moment  001    S  ; // 1 ms  .001 s  instead of 100 moment  1    SSS  ; // 100 ms  .1 s  instead of 1      This could shave a few bytes off elsewhere as well  eliminating  parseTokenOneDigit  and  parseTokenTwoDigits  and their use in  getParseRegexForToken   .  Looks like it can shave 136/24 bytes off. ,timrwood,closed,1,2012-05-03 17:01:56,2012-05-04 17:31:38,,Enhancement,,,0,1
13947,moment/moment,303,Add moment.fn.isValid,See  235. Possible implementation below. Would need to add a flag or something when parsing  maybe in  dateFromArray   ?      javascript moment.fn.isValid = function         return   this._isValid      this._d     isNaN this._d.getTime   ;       ,timrwood,closed,1,2012-05-04 17:36:41,2012-05-15 16:32:39,,New Feature,,,0,1
13946,moment/moment,304,Added Chuvash language,Chuvash language file  test file and minified files. ,mirontoli,closed,2,2012-05-05 19:10:35,2012-05-08 06:49:57,,,,1,1
13945,moment/moment,305,Added Chuvash Language,Now I updated to pull into develop branch. Thank you  ,mirontoli,closed,1,2012-05-08 06:48:46,2012-05-08 16:30:32,,,,1,1
13944,moment/moment,306,Adding moment.fn.isValid,Not ready to be pulled in yet  just wanted to open the discussion. ,timrwood,closed,8,2012-05-10 17:10:38,2012-06-08 00:01:48,,New Feature,,,1,1
13943,moment/moment,307,fixed minor for LLL format of Japanese,,baryon,closed,2,2012-05-15 03:09:34,2012-06-08 02:47:35,,Language,,,1,1
13942,moment/moment,308,Not Parsing British Dates Correctly,I m using the en GB language file expecting dates like 16/04/1990 to parse as April 4  1990  but instead moment.js produces an  invalid date . Am I missing something or is there nothing I can to make moment.js parse dd/mm/yyyy dates correctly?  Note  I m aware that you can give format hints to moment  e.g. moment  16/04/1990    DD/MM/YYYY    but I d rather avoid placing this throughout my code as it could potentially give rise to greater headaches when dates in other formats need to be parsed. It would be much better if I could just tell moment to assume british date format  so whenever the day/month order is ambiguous  it can prefer dd/mm/yyyy or yyyy mm dd. ,Wardrop,closed,4,2012-05-15 04:12:05,2012-05-29 17:17:29,,New Feature,,,0,1
13941,moment/moment,309,Correct translation of durations in Japanese,Duration strings should be appended with     in Japanese to indicate a length in time. However   hours       is already OK. Examples:      During a few seconds  3    During 3 minutes  3    During 3 hours  3    During 3 days  3     During 3 months  3    During 3 years   Moment currently returns the following strings:    3  3   3  3   3   This is only required for duration. Current translations of time in the past and future are OK: 3    3 minutes ago  3    in 3 minutes   In case of complex durations      is only appended at the end of the string: 3 20 15    During 3 hours 20 minutes and 15 seconds   Is there a way to suffix durations at the moment? ,gmarty,closed,10,2012-05-15 12:13:55,2012-06-11 16:28:19,,Language,,,0,1
13940,moment/moment,310,Incorrect date and time parsing,moment can t parse some simple formats like:  > var m = moment  20120515    YYYYMMDD  ; > m.toString   >  Invalid Date  >  > var t = moment  081000    HHmmss  ; > t.toString   >  Tue Mar 30 1909 00:00:00 GMT 0300  BRT    I had to make an ugly workaround to overcome these limitations. ,stackoverflow,closed,4,2012-05-17 12:58:40,2012-05-17 16:06:56,,,,0,1
13939,moment/moment,311,Added isPast   and isFuture   methods,I just added  moment.isPast    and  moment.isFuture    comparison methods. This can be used when you may want to conditionally print something that is dependent on a moment being in the future or in the past. e.g.:      javascript var eventStartTime = moment eventModel.get  start_time   ;  if  eventStartTime.isPast        return  Last Event:     eventStartTime.fromNow  ;   else if  eventStartTime.isFuture        return  Next Event:     eventStartTime.fromNow  ;        I m thinking about whether an  isPresent    method with an optional tolerance passed in would be useful  e.g.  moment  .subtract  minutes   30 .isPresent  hours   1 ;  would return  true . This could be used in cases where you want to do something like:       javascript if  eventStartTime.isPresent  hours   1       return  This event is happening now ;         ,andrewdeandrade,closed,6,2012-05-17 23:03:30,2012-06-01 00:18:13,,New Feature,,,1,1
13938,moment/moment,312,Russian translations are incorrect,Just checked samples at http://momentjs.com/   Russian translations seems to be incorrect: endings of words in Russian differ depending on the context  case   and this also applies to weekdays and month names.  Example from your web site  incorrect :  Russian :                     20:44   Correct:  Russian :                 _ _   20:44   Example from your web site  incorrect :  Russian :              21     2012 20:45   Correct:  Russian :              21   _ _ 2012_  . _ 20:45  ,iafan,closed,13,2012-05-21 16:50:25,2012-07-02 20:46:01,,Language,,,0,1
13937,moment/moment,313,Add support for month/weekday callbacks in moment.fn.format, 312 ,timrwood,closed,3,2012-05-21 21:56:36,2012-06-14 17:04:51,timrwood,Enhancement,Language,,,1,1
13936,moment/moment,314,NodeJS check gives a false positive when running QUnit, typeof module  ==  undefined   will return true if QUnit is on the page. A more thorough test should be used. Here s [one possibility] http://stackoverflow.com/a/5197219/100335 . ,kpozin,closed,4,2012-05-22 15:18:16,2012-06-12 17:27:23,,Bug,,,0,1
13935,moment/moment,315,Explore CLDR for locale database,The Unicode Common Locale Data Repository  CLDR  http://cldr.unicode.org/   contains a ton of locale data that Moment could use  instead of maintaining its own database  avoiding the many tickets that just deal with new locales or fixing existing ones. They ve got a few overview slides of what the CLDR covers: https://docs.google.com/present/view?id=dfqr8rd5_303ckth2zhn  For now this is just an invitation to explore the CLDR  I don t really know if it can be of use here. Though I d be very interested in any research and potential collaboration in that area  as the Globalize project  https://github.com/jquery/globalize  deals with very similar issues. Globalize and Moment actually have a good bunch in common  while Globalize lacks the DSL for creating dates.  If there s interest in collaboration between Moment and Globalize  let me  @rdworth or @scottgonzalez know. ,jzaefferer,closed,13,2012-05-23 16:44:09,2013-01-10 18:43:47,,Language,,,0,1
13934,moment/moment,316,persian language,hi  please add persian language to moment. very thanx. ,KiarashS,closed,5,2012-05-24 14:11:40,2012-07-15 18:18:51,,Language,,,0,1
13933,moment/moment,317,Add cached format functions for 3x faster formatting.,Not ready to pull in  opening discussion.  TODO: inline L LL LLL LLLL LT tokens.  Some speed tests:  http://jsperf.com/date formatting/8 http://jsperf.com/momentjs cached format functions  All  make test moment  tests are passing now  need to add support for  L LL LLL LLLL LT  for all tests to pass.  File size difference  108b minified  75b gzipped  Though there are probably some byte squeezing techniques we could add. ,timrwood,closed,3,2012-05-24 22:33:59,2012-06-06 21:45:59,,Enhancement,,,1,1
13932,moment/moment,318,Hungarian language with unit tests,,bankyadam,closed,1,2012-05-27 21:02:13,2012-06-07 23:47:35,,Language,,,1,1
13931,moment/moment,319,npm install fails for version 1.6.2,On Ubuntu 12.04 and npm version 1.1.21 and node 0.6.18 with the following message:        npm install moment@1.6.2 npm http GET https://registry.npmjs.org/moment/1.6.2 npm http 304 https://registry.npmjs.org/moment/1.6.2 npm ERR  untar error /home/kyle/.npm/moment/1.6.2/package.tgz npm ERR  untar error /home/kyle/.npm/moment/1.6.2/package.tgz  npm ERR  Error: invalid tar file npm ERR      at Extract._startEntry  /usr/local/lib/node_modules/npm/node_modules/tar/lib/parse.js:144:13  npm ERR      at Extract._process  /usr/local/lib/node_modules/npm/node_modules/tar/lib/parse.js:125:12  npm ERR      at BlockStream.<anonymous>  /usr/local/lib/node_modules/npm/node_modules/tar/lib/parse.js:46:8  npm ERR      at BlockStream.emit  events.js:67:17  npm ERR      at BlockStream._emitChunk  /usr/local/lib/node_modules/npm/node_modules/block stream/block stream.js:145:10  npm ERR      at BlockStream.flush  /usr/local/lib/node_modules/npm/node_modules/block stream/block stream.js:70:8  npm ERR      at BlockStream.end  /usr/local/lib/node_modules/npm/node_modules/block stream/block stream.js:66:8  npm ERR      at Extract.end  /usr/local/lib/node_modules/npm/node_modules/tar/lib/parse.js:85:23  npm ERR      at Unzip.onend  stream.js:80:10  npm ERR      at Unzip.emit  events.js:88:20  npm ERR  You may report this log at: npm ERR      <http://github.com/isaacs/npm/issues> npm ERR  or email it to: npm ERR      <npm @googlegroups.com> npm ERR   npm ERR  System Linux 3.2.0 24 generic npm ERR  command  node   /usr/local/bin/npm   install   moment@1.6.2  npm ERR  cwd /var/www/node journal npm ERR  node  v v0.6.18 npm ERR  npm  v 1.1.21 npm ERR  message invalid tar file  npm ERR  Error: ENOENT  lstat  /var/www/node journal/node_modules/moment/moment.js  npm ERR  You may report this log at: npm ERR      <http://github.com/isaacs/npm/issues> npm ERR  or email it to: npm ERR      <npm @googlegroups.com> npm ERR   npm ERR  System Linux 3.2.0 24 generic npm ERR  command  node   /usr/local/bin/npm   install   moment@1.6.2  npm ERR  cwd /var/www/node journal npm ERR  node  v v0.6.18 npm ERR  npm  v 1.1.21 npm ERR  path /var/www/node journal/node_modules/moment/moment.js npm ERR  fstream_path /var/www/node journal/node_modules/moment/moment.js npm ERR  fstream_type File npm ERR  fstream_class FileWriter npm ERR  code ENOENT npm ERR  message ENOENT  lstat  /var/www/node journal/node_modules/moment/moment.js  npm ERR  errno    npm ERR  fstream_stack Object.oncomplete  /usr/local/lib/node_modules/npm/node_modules/fstream/lib/writer.js:284:26  npm ERR   npm ERR  Additional logging details can be found in: npm ERR      /var/www/node journal/npm debug.log npm not ok      Installing 1.6.1 works just fine. ,KyleAMathews,closed,2,2012-05-28 00:25:47,2012-06-04 16:53:24,,,,0,1
13930,moment/moment,320,Unexpected formatting of Rails created_at dates  when using PostGres ,d =  2012 05 15T12:35:03 11:00   moment d   Moment _d: Wed May 16 2012 09:35:03 GMT 1000  EST  _isUTC: false __proto__: Object  When I do a slice 0 19  I get the expected date:  d.slice 0 19   2012 05 15T12:35:03   moment d.slice 0 19   Moment _d: Tue May 15 2012 12:35:03 GMT 1000  EST  _isUTC: false __proto__: Object ,wiseleyb,closed,2,2012-05-28 21:20:02,2012-06-04 16:53:52,,,,0,1
13929,moment/moment,321,Serving the deployment  minified  version from GitHub Pages or moments.com,It will be great to serve the minified script from GitHub pages or  momentjs.com   as a CDN .  raw.github.com  is not suitable for CDN purpose. ,baoshan,closed,1,2012-05-31 05:37:05,2012-06-08 00:29:10,,,,0,1
13928,moment/moment,322,Added language no nb  Norwegian ,,oyms,closed,1,2012-05-31 18:26:00,2012-06-07 23:46:47,,Language,,,1,1
13927,moment/moment,323,utc Number  not working,<h3>Example</h3>  <code>moment.utc 1338499506000 ;</code>  <h3>Result</h3>  <code>  _d: Invalid Date  _isUTC: true  </code> ,tonyka,closed,1,2012-05-31 22:23:43,2012-05-31 23:09:54,,,,0,1
13926,moment/moment,324,Can moment handle BCE and CE dates?,In relation to this question:  http://stackoverflow.com/questions/10848878/how do you store datetimes in a database on the scale of the history of the univ  ... can moment handle dates like:   13.7 billion years ago: origin of the universe   Photon epoch: Between 10 seconds and 380 000 years after the Big Bang  so 13.7 Billion years   10 seconds ago    8 000 BCE: end of last ice age   356 BCE: Alexander the Great s birth  If not  any point in the right direction on how to do this would be awesome.  Thanks  ,lancejpollard,closed,4,2012-06-01 11:05:42,2012-06-04 16:44:17,,,,0,1
13925,moment/moment,325,Removed formatting dots from Dutch month/weekday abbreviations.,This allows for custom formats such as  D MMM YYYY . Current code gives f.e.  23 jun. 2012  while  23 jun 2012  is expected/preferred. ,cgbeekman,closed,12,2012-06-01 12:16:36,2012-06-18 16:08:15,,Language,,,1,1
13924,moment/moment,326,Romanian localization,Hey Tim   Here is the Romanian localization.  Thank you for the great moment  ;   ,gurdiga,closed,6,2012-06-02 10:47:21,2012-07-25 17:42:25,,Language,,,1,1
13923,moment/moment,327,Remove ordinal from TR translations,Turkish language do not use ordinal suffixes for any date patterns so removed that function from TR translations file. ,BYK,closed,10,2012-06-03 09:57:33,2012-06-15 21:59:56,,Language,,,1,1
13922,moment/moment,328,Humanized input?,I really like what you re doing w/ this library.  I wanted to know if there is a way  or will there be a way  to do humanized input; a feature that some other libraries have  e.g. datejs  that let you provide certain known input tokens  e.g.  next friday   and get a date back.  I don t like datejs b/c of how they override the Date prototype and also they don t let you pick your date  all the parsing is based on now .    If there s not a current method like this  I may try and find time to do it msyelf.  Are there docs on how you want plugins made  or should i just use the existing plugins as an example?    For reference  I mean something like this:  var d = moment  .parse  next tuesday  ; console.log d ;  // d is the moment object for next tuesday s date. ,pvencill,closed,2,2012-06-04 13:15:31,2012-06-14 17:02:55,,New Feature,,,0,1
13921,moment/moment,329,Minified localizations out of sync,It appears that the latest meridiem changes have not been propagated to the minified versions of the localization files. ,cgbeekman,closed,1,2012-06-04 14:59:58,2012-06-04 17:03:11,,Language,,,0,1
13920,moment/moment,330,Feature/library instances,In order to allow multiple languages on one page  we need to allow for different instances of the moment library that allow simultaneously different settings.  In this commit  I split up the code into two parts  the library instance specific code and the global  never changing code. Everything instance specific falls into the new  instantiateLibrary  function which is exposed at  moment.instantiateLibrary .  This is related to  292.  It is not ready to be merged in  for the record. ,rockymeza,closed,12,2012-06-06 00:07:57,2012-06-08 23:39:02,,,,1,1
13919,moment/moment,331,updated Japanese plugin,,baryon,closed,1,2012-06-08 02:47:00,2012-06-08 17:04:40,,,,1,1
13918,moment/moment,332,Feature/instance lang,I have provided a  lang  method on both moment.fn and moment.duration.fn to allow for instances of moments and durations to have their own language configuration.  Additionally  the  lang  method is a getter which returns either the moment s language definition object or the global language definition object if the moment did not have one set.  Also  I modified the code surrounding meridiem to always expect a function.  This simplifies the formatter code  and also ensures inheritability of language configuration values. ,rockymeza,closed,9,2012-06-08 04:54:08,2012-06-12 17:07:59,,,,1,1
13917,moment/moment,333,Add a formated date,Hi   Is it possible to make something like this ?      moment  rootDate   YYYY MM DD   .add  relativeDate   HH:mm        ,arcanis,closed,11,2012-06-08 18:02:36,2012-07-02 20:32:33,,Enhancement,New Feature,,,0,1
13916,moment/moment,334,Deprecate langData objects on the moment namespace.,All of these are going away in 2.0.0.      javascript moment.calendar moment.relativeTime moment.months moment.monthsShort moment.monthsMin moment.weekdays moment.weekdaysShort moment.longDateFormat moment.meridiem moment.ordinal      They are going to be replaced by  moment.langData  .calendar  or  moment.langData  en  .calendar . ,timrwood,closed,6,2012-06-11 16:23:58,2013-01-10 18:53:53,,Deprecate,New Feature,,,0,1
13915,moment/moment,335,sod  eod do not update date object,The start of day and end of day methods clone the date object instead of editing the original reference. This behavior was unexpected  in particular because the documentation says that it s  essentially the same as the following       javascript moment  .hours 0 .minutes 0 .seconds 0 .milliseconds 0 ;      I forked the repo  added some tests  and fixed these methods to not clone  but you probably have reasons for cloning.  Why clone the date? ,deleteme,closed,7,2012-06-12 14:49:24,2012-06-14 17:02:30,,Enhancement,,,0,1
13914,moment/moment,336,Test description for one diff test was wrong,Nothing critical  but when I was presented your lib by a colleague  I reviewed some unit tests   and  thanks to Murphy s law   I found this one. The test itself is okay  just the description was wrong. This patch fixes it. ,mcs,closed,2,2012-06-14 13:29:01,2012-06-14 13:52:41,,,,1,1
13913,moment/moment,337,2nd try: Fix for wrong test description // Wrong branch   again :  ,This time against the develop branch :    Edit: Argh  wrong again  Sorry  my first try to use this GitHub feature :     ,mcs,closed,1,2012-06-14 14:02:18,2012-06-14 14:08:02,,,,1,1
13912,moment/moment,338,3rd try: Fix for test description ...,Please  this time a correct pull request?  Fixes the test description for the diff test  1   .5  ,mcs,closed,1,2012-06-14 14:07:06,2012-06-14 15:58:41,,,,1,1
13911,moment/moment,339,Feature/mutable manipulation,Adds new tests to assert the policy that manipulation methods are mutable.  Also asserts that sod and eod are not mutable. ,deleteme,closed,3,2012-06-14 14:14:16,2012-06-14 16:00:57,,,,1,1
13910,moment/moment,340,Fixed ordinal strings for TR language,Fixed ordinal function in TR translations  where it was left the same as the English version. This required some more tests to cover edge cases  which are included. All language tests are green for me. ,BYK,closed,3,2012-06-17 11:06:19,2012-07-02 21:27:02,,Language,,,1,1
13909,moment/moment,341,Russian: Wrong noun case for  last <day> ,    moment.lang  ru  ; moment  06 19 2012    MM DD YYYY  .subtract  days   3 .calendar  ;                       00:00       Should be:          ...          Saturday            Friday          Wednesday  ,ypomortsev,closed,2,2012-06-19 22:21:55,2012-06-19 22:24:37,,,,0,1
13908,moment/moment,342,Establish the root object   window  in the browser  or  global  on the server.,Instead of using  window  object directly  establish the root object which will be  window  in the browser or  global  on the server.  The change imitated underscore.js. This change would also make moment.js possible to use on mongoDB shell. ,p-baleine,closed,4,2012-06-20 04:31:12,2012-07-05 16:44:24,,,,1,1
13907,moment/moment,343,Fix month/weekday grammatical cases in Russian, 341   312  The regexes used to determine the cases might need tweaking  but so far it seems to work OK for formats like  31         2010 00:00  and                      23:53 . ,ypomortsev,closed,5,2012-06-20 06:58:19,2012-07-16 16:09:03,,Language,,,1,1
13906,moment/moment,344,Minor grammar corrections on the Italian lang file,Basically just accents on the days of the week and   un ora   instead of   un ora     an hour   which  being feminine in Italian  requires an apostrophe  ,lucaong,closed,6,2012-06-20 15:03:31,2012-06-21 13:21:47,,Language,,,1,1
13905,moment/moment,345,Feature/diff duration,As discussed in  282  the diff function now returns a duration instead of just a millisecond number for the one parameter incantation. Internally  diff uses the duration to perform the math.  This commit passes all but two of the unit tests  fails regarding returning years as floats .  This is not ready to be merged in.  I am opening this pull request to ask for help as to how to correctly write this function and to start some momentum on the feature. ,rockymeza,closed,12,2012-06-20 17:56:08,2013-01-23 18:59:01,,New Feature,,,1,1
13904,moment/moment,346,Month abbreviation improvements for language nl,Month abbreviations for nl are out of sync with CLDR  specifically  mar.   >  mrt.  and  mei.   >  mei . Additionally when a month abbreviation is surrounded by dashes  f.e. D MMM YYYY    the dot is now omitted for a cleaner representation. For the original discussion  see  325. ,cgbeekman,closed,1,2012-06-20 21:02:07,2012-07-05 16:31:35,,,,1,1
13903,moment/moment,347,Grammar fixes in the Italian translation,In the Italian translation file  add accents to week days  like  Lunedi   >  Luned    and an apostrophe to  un ora   an hour . Update tests as well. ,lucaong,closed,1,2012-06-21 13:25:15,2012-07-05 16:34:08,,,,1,1
13902,moment/moment,348,Feature request: A more accurate .humanize,.humanize isn t really accurate when it comes to seconds.      javascript moment.duration 40   s  .humanize   ===  a few seconds  // expected  40 seconds  moment.duration 45   s  .humanize   ===  a minute  // expected  45 seconds       I understand that we don t often want this level of accuracy but sometimes we do want the exact value in a human readable way.  I suggest a change to the API  which seems backwards compatible from what I actually see  to support this feature:       javascript moment.duration 40   s  .humanize   ===  a few seconds  moment.duration 40   s  .humanize true  ===  in a few seconds   moment.duration 40   s  .humanize  precise:true   ===  40 seconds   moment.duration 40   s  .humanize  suffix:true  precise:true   ===  in 40 seconds  moment.duration 40   s  .humanize  precise:false  suffix:true   ===  in a few seconds       What do you think ? ,FGRibreau,closed,79,2012-06-24 14:57:37,2012-07-25 17:48:33,,Enhancement,New Feature,,,0,1
13901,moment/moment,349,Errors in docs,http://momentjs.com/docs/ /parsing/unix timestamp/   var day = moment 1318781876 ;  should be  var day = moment.unix 1318781876    http://momentjs.com/docs/ /displaying/unix timestamp/   moment 1318874398806 .valueOf  ; // 1318874399  should be  moment 1318874398806 .unix  .valueOf  ; // 1318874398   on my machine  arch x64   node.js 0.6.18  it rounds to 98  but that is not so important  ,ichernev,closed,1,2012-06-26 17:01:09,2012-06-26 17:18:17,,,,0,1
13900,moment/moment,350,Add Moment.js to cdnjs,It would be nice to have Moment.js on http://cdnjs.com/   Shouldn t be too complicated to get it added by following [these] http://github.com/cdnjs/cdnjs  procedures. ,mainerror,closed,2,2012-06-28 11:16:56,2012-07-02 20:45:16,,,,0,1
13899,moment/moment,351,moment.relativeTime does not seem to update.,I am trying to write a jQuery plugin to do create fuzzy timestamps.  I had looked at other fuzzy timestamps out there but they did not offer the flexibility that i required.  I need my timestamps to reflect certain aspects of a date in a specified format when certain periods of elapsed time are reached as opposed to upgrading from hours to days  to weeks  then months etc  in the days range it needs the time of day HH:mm  and in Months and Years a full original timestamp .  I already have my setInterval etc for my plugin done  so i will just paste the relevant part of my refresh function.  I want to be able to specify parts of the moments date object like so:      javascript refresh: function         var ts = new moment   this.element .attr  title     YYYY MM DD HH:mm:ss tz  ;      ts.relativeTime =           future: function     return this.format  YYYY MM DD HH:mm:ss  ;            past:   s ago           s:  seconds ago           m:  a minute ago           mm:   d minutes ago           h:  an hour ago           hh:   d hours ago           d: function     return   d yesterday at     this.format  HH:mm  ;            dd: function     return   d days ago at     this.format  HH:mm  ;            M: function     return this.format  YYYY MM DD HH:mm:ss  ;            MM: function     return this.format  YYYY MM DD HH:mm:ss  ;            y: function     return this.format  YYYY MM DD HH:mm:ss  ;            yy: function     return this.format  YYYY MM DD HH:mm:ss  ;        ;      var message = ts.from  ;        this.element .text message ;         Notice how in ts.relativeTime i set the further date points to just show an exact timestamp  and prior to that anything in the range of days includes the time of that day the item was posted at.  How is this possible  or rather how can i make this work? Is relativeTime what i am looking for? or is this a bad use case and i need to find another approach?  If the usage of the date formatting tokens is not permitted in the moment.relativeTime  can we make this a feature request please?  I am using Safari  but i have also tested this in Chrome as well and it still does not work.  Thanks  Reece. ,reecefowell,closed,3,2012-06-30 23:40:23,2012-07-15 16:24:30,,,,0,1
13898,moment/moment,352,dot separation bug in firefox,Recently I found the way  that fixes this bug:  This format  YYYY.MM.DD  worked well in Chrome and IE  but not in FF.  If you could push this 3 rows  marked with    of code to moment.js: row 495      javascript moment = function input  format            if input === null    input ===                   return null;                    if  typeof input ===  string                  input = input.replace  .    /  .replace  .    /  ;                    var date  matched  isUTC;         // parse Moment object         if moment.isMoment input      ...      Then this bug will disappear ;  ,seniorpreacher,closed,3,2012-07-06 09:45:42,2012-07-15 18:16:13,,,,0,1
13897,moment/moment,353,Brazilian Portuguese i18n,Hi  this is my contribution sending the brazilian date patterns  ,caio-ribeiro-pereira,closed,5,2012-07-10 20:17:04,2012-07-10 23:36:15,,,,1,1
13896,moment/moment,354,Add Canadian i18n ,Adding i18n for Canadian English and Canadian French. Unit tests based on existing fr and en languages. Formats based on MacOS X date formats for Canadian localizations. ,jonbca,closed,1,2012-07-10 22:54:15,2012-07-10 22:57:25,,,,1,1
13895,moment/moment,355,Add English and French Canadian i18n ,Added support for Canadian variants of English and French. Formatting based on MacOS date representations for that locale  and also personal experience . ,jonbca,closed,5,2012-07-10 23:29:33,2012-07-16 16:09:59,,Language,,,1,1
13894,moment/moment,356,Default format in future versions?,Hello   I m wondering how likely it is that the exact default format string will change in future versions of the lib.  We have database entries that are based on moment default date formatting of ISO8601:  2012 07 11T08:11:47 00:00 . Is this a bad idea   should we rather define our own explicit format  and use that everywhere?  It s nice to use the default date format because it keeps the code clean and simple.. and as long as it is very  _very_ unlikely that moment will change the format in future releases  we might continue using that.  Your thoughts? ,magwo,closed,5,2012-07-11 06:15:45,2012-07-15 16:22:49,,,,0,1
13893,moment/moment,357,add method issue when is DST,Hello Folks   I m seeing a strange error when I execute add  days   1  one day before DST.  In fact  my code is very simple:      javascript moment.locale =  pt BR ;  var today = moment  2012 10 01  ;  // First day at the month var firstDateMonth = today.clone  .date 1 .sod    // First Sunday of the current month var nextDay = firstDateMonth.clone  .day 0   for i = 1; i <= 42; i      //  ...    console.log nextDay.format       DST?     nextDay.isDST   ;   nextDay.add  days   1 ;        And in firebug I have  look at 20th :      ... 2012 10 17T00:00:00 03:00 DST? false 2012 10 18T00:00:00 03:00 DST? false 2012 10 19T00:00:00 03:00 DST? false 2012 10 20T00:00:00 03:00 DST? false 2012 10 20T23:00:00 03:00 DST? false 2012 10 21T23:00:00 02:00 DST? true 2012 10 22T23:00:00 02:00 DST? true 2012 10 23T23:00:00 02:00 DST? true 2012 10 24T23:00:00 02:00 DST? true 2012 10 25T23:00:00 02:00 DST? true 2012 10 26T23:00:00 02:00 DST? true ...      If it s not a bug  sorry for any inconvenience. Or If I can help please let me know.  Thanks for awesome lib  ,felipefontoura,closed,7,2012-07-11 11:29:45,2013-01-10 19:46:42,,Bug,,,0,1
13892,moment/moment,358,Re send Brazilian i18n,Now I am sending on develop branch   ,caio-ribeiro-pereira,closed,1,2012-07-11 17:16:47,2012-07-16 16:11:26,,Language,,,1,1
13891,moment/moment,359,moment   returns null in IE8,Attempting to call moment   with no parameters  or passing a string  ISO8601 or not  with or without a format always returns null. Attempting to run the unit tests at http://momentjs.com/test/ in IE8 results in a console error without any output on the page.  ,sgrif,closed,3,2012-07-11 21:26:12,2012-07-11 23:02:59,,,,0,1
13890,moment/moment,360,BUG: unable to validate date,If I feed moment with some invalid string  something like moment  sdfsdfasd   it returns Invalid date  as expected.  But if I try to define some input format  like moment  sdfasdfa    YYYY MM DD     it always returns Jan 01 1900  which  apparently  IS valid date  but it is not about input string.  I d expect second version returning invalid date as well  since it is not  really. ,creage,closed,4,2012-07-12 09:39:04,2012-07-12 18:42:34,,,,0,1
13889,moment/moment,361,Added support for mocking the current time,This is especially useful in testing.  Usage      js moment.mockNow = moment  .day 3 ; moment  .valueOf   === moment.mockNow.valueOf  ;      You can assign anything to  moment.mockNow  that you would normally pass to a moment constructor  except it doesn t allow string   format . ,ichernev,closed,7,2012-07-15 14:42:47,2012-07-15 17:52:14,,,,1,1
13888,moment/moment,362,Added startOf to moment.fn,his is a generalized version of sod  that works for years  months  days  hours  minutes and seconds.  Usage      javascript moment  .startOf  year  ;  // x = new Date  ; x.setMonth 0 ; x.setDate 1 ; x.setHours 0  0  0  0 ; moment  .startOf  month  ; // x = new Date  ; x.setDate 1 ; x.setHours 0  0  0  0 ; moment  .startOf  day  ; // moment  .sod   OR x = new Date  ; x.setHours 0  0  0  0 ; moment  .startOf  hour  ; // x = new Date  ; x.setMinutes 0 ; x.setSeconds 0  0 ; moment  .startOf  minute  ; // x = new Date  ; x.setSeconds 0  0 ; moment  .startOf  second  ; // x = new Date  ; x.setMilliseconds 0 ;     ,ichernev,closed,1,2012-07-15 15:29:33,2012-07-15 16:18:19,,,,1,1
13887,moment/moment,363,Update master,Wrong days number in  days in month  test case ,rando,closed,2,2012-07-16 21:08:11,2012-07-17 18:24:36,,,,1,1
13886,moment/moment,364,moment.fn.daysInMonth unit tests have inaccurate messages,Wrong days number in days in month test case message. ,rando,closed,1,2012-07-17 09:22:25,2012-07-25 17:39:26,,,,1,1
13885,moment/moment,365,Support ISO 8601 week date format,Being so impressed with Moment  I threw an ISO 8601 week date at it thinking it would have no problem.      coffee> moment  2012 W02  moment  2012 W02    _d: Invalid Date  _isUTC: false        Crap.  I would expect the following instead  for me :        _d: Mon Jan 09 2012 00:00:00 GMT 0800  PST     _isUTC: false        Any chance we will see support for this and similar formats  like  2012 W02 1 ? ,mratzloff,closed,1,2012-07-17 20:27:30,2012-07-25 17:49:21,,New Feature,,,0,1
13884,moment/moment,366,Fix parsing/formatting of first century dates.,According to ECMA 262   new Date y      will auto convert  y  to  1900   y  if  0   y   99   hence setFullYear or setUTCFullYear is used instead.  This also zero pads the year for the  YYYY  format  since the year may not necessarily have four digits. ,jasondavies,closed,1,2012-07-17 22:54:16,2012-07-17 23:53:08,,,,1,1
13883,moment/moment,367,Fix parsing/formatting of first century dates.,Updated version of  366 for the develop branch.  According to ECMA 262   new Date y      will auto convert  y  to  1900   y  if  0   y   99   hence setFullYear or setUTCFullYear is used instead.  This also zero pads the year for the  YYYY  format  since the year may not necessarily have four digits.  Lastly  the pt br test is adjusted to test for the first day of the month instead of the zeroth  which was causing it to fail . ,jasondavies,closed,4,2012-07-18 10:16:19,2012-07-25 17:37:29,,,,1,1
13882,moment/moment,368,Develop,Sorry for requesting this against master  and not develop. Blunder on my part. Can t find anywhere to correct it. Let me know if I should submit it again towards the correct branch.  Added a new feature isSameDay  that compares two moments and checks that they are on the same day. ,joelmheim,closed,1,2012-07-18 19:24:53,2012-07-19 00:11:24,,,,1,1
13881,moment/moment,369,How about escaping the language strings ,Have you considered escaping the string defenitins in the language files? As in going form   janvier_f vrier_mars_avril_mai_juin_juillet_ao t_septembre_octobre_novembre_d cembre  to  janvier_f u00e9vrier_mars_avril_mai_juin_juillet_ao u00fbt_septembre_octobre_novembre_d u00e9cembre  in the FR file for example.  Would make it easier to use in conjunction with file that may not be in UTF8.  ,lagosr,closed,10,2012-07-20 07:39:43,2012-08-13 20:27:39,,Enhancement,Language,,,0,1
13880,moment/moment,370,Adding moment.fn.isSame,Have added a simple feature for comparing a moment to another moment and determining whether they are on the same day. A new prototype method isSameDay that takes another moment as input.  Also fixed a bug in the current develop branch with the pt br language tests. ,joelmheim,closed,9,2012-07-20 15:17:58,2012-09-01 23:45:39,,,,1,1
13879,moment/moment,371,Parsing String   Format doesn t handle timezone,This is a regression of Issue  147 in Moment 1.6.0  When parsing a date with a timezone offset   0700  the offset is not applied.  Example:      var emailHeader =  Fri  20 Jul 2012 16:14:09  0700 ; var receivedAt = moment.utc emailHeader   ddd  DD MMM YYYY HH:mm:ss ZZ  ; var formatted = receivedAt.format  YYYY MM DD HH:mm:ss ZZ  ;  console.log  input      emailHeader ; console.log  parsed     formatted ; console.log  expect 2012 07 20 23:14:09  0000  ;      Output in Moment 1.6.0 1.6.2      input  Fri  20 Jul 2012 16:14:09  0700 parsed 2012 07 20 16:14:09  0000 expect 2012 07 20 23:14:09  0000      Output in Moment 1.5.1      input  Fri  20 Jul 2012 16:14:09  0700 parsed 2012 07 20 23:14:09  0000 expect 2012 07 20 23:14:09  0000      This was working fine in moment 1.5  but is now broken in moment 1.6 ,deepwell,closed,2,2012-07-24 18:24:25,2012-07-25 17:18:30,,,,0,1
13878,moment/moment,372,Adding support for bulgarian localization,Here is my contribution attempt with a bulgarian language/localization support. If there is something out of standarts or needs some final touches   i will try to fix it :  Thanks. ,kraz,closed,1,2012-07-24 19:29:39,2012-07-25 17:50:43,,,,1,1
13877,moment/moment,373,Add support for years outside 0000 9999.,It seems reasonable to support all the dates that JavaScript s Date can support. However  extending the existing YYYY format specifier to include 6 digit dates  and negative dates  will break when there are no separators  e.g. it would incorrectly attempt to parse 12345678/YYYYMMDD as the year 123456. ,jasondavies,closed,9,2012-07-25 18:01:58,2012-08-19 22:12:41,,,,1,1
13876,moment/moment,374,Norwegian,Added norwegian language file. ,finnjohnsen,closed,0,2012-07-26 13:13:02,2012-07-26 13:14:33,,,,1,1
13875,moment/moment,375,Minified JS version shows errors in ReSharper,The minified moment.min.js downloaded from your site has errors  according to ReSharper. Issues are mainly missing semi colons  end parentheses and identifiers.  Full development code does not have these issues  nor does a minified version produced by http://www.minifyjavascript.com/ ,daggmano,closed,2,2012-07-29 23:43:35,2012-08-13 18:49:01,,,,0,1
13874,moment/moment,376,Add  no conflict  mode to library ,Similar to jQuery  it would be useful to have a way to keep the moment.js library from conflicting with another unexpected instance of moment.js that be on the page. jQuery has a  .noConflict bool . ,andruxin,closed,15,2012-07-30 14:18:51,2012-08-03 02:52:37,,,,0,1
13873,moment/moment,377,Moment 1.7.0 unusable in Google Chrome extension,The dynamic function generation in Moment 1.7.0 makes it unusable in a Google Chrome extension  where it violates the Content Security Policy on unsafe eva   . See  for example:  http://code.google.com/chrome/extensions/contentSecurityPolicy.html and https://groups.google.com/a/chromium.org/forum/?fromgroups  topic/chromium extensions/1zzN1Yc9fig   In general it s possible to add  unsafe evel  to a policy  but Chrome disallows this.  This is a real shame. Might it be possible to make the dynamic behaviour configurable?  Thanks  Andy    Exception details:  Exception  Code generation from strings disallowed for this context   in   return new Fn  t    v    o    p    m   output ;  Call stack:  makeFormatFunction moment.min.js:363 formatMoment moment.min.js:386 moment.fn.Moment.format moment.min.js:874 ,andyoxus,closed,15,2012-07-30 15:35:08,2012-09-02 00:36:49,,,,0,1
13872,moment/moment,378,Invalid January daysInMonth if the object was created using December add  months  1 ,Here are the test cases to understand this issue. I tried this from Chrome JS console using Moment v1.6.2    Happy path   var nov2012 = moment  2012 11 30   YYYY MM DD  ; nov2012.daysInMonth  ;// returns 30 nov2012.format  LLL  ; // November 30 2012 12:00 AM  var dec2012 = nov2012.add  months  1 ; dec2012.daysInMonth  ; //31 dec2012.format  LLL  ; // December 30 2012 12:00 AM   Should this be Dec 31 st?     Failure path  var dec2012 = moment  2012 12 31   YYYY MM DD  ; dec2012.daysInMonth  ; // returns 31 dec2012.format  LL  ; //  December 31 2012   var jan2013 = dec2012.add  months  1 ; jan2013.daysInMonth  ; // 28 is WRONG jan2013.format  LL  ; // January 31 2013  ,siddii,closed,2,2012-07-31 14:09:57,2012-07-31 16:24:01,,,,0,1
13871,moment/moment,379,moment.week  ,I am wondering how you feel about me adding a moment.week   method that will return that week of the year what we are currently in.  ,coleGillespie,closed,3,2012-08-01 12:13:08,2012-08-05 19:40:20,,,,0,1
13870,moment/moment,380,moment.fn.format escape multiple characters is partially broken by Localized date format,It appears that the substitution for localized date format doesn t respect the multiple character escape.   moment  .format  [Last] dddd    >  MM/DD/YYYYast Monday    moment  .format  [LLL] LLL    >  MMMM D YYYY h:mm A July 30 2012 8:47 AM   ,yelvert,closed,8,2012-08-01 13:51:39,2012-08-13 20:33:21,,Bug,,,0,1
13869,moment/moment,381,Estonian i18n,With complete test ,madhenry,closed,1,2012-08-02 19:46:20,2012-08-03 03:43:35,,,,1,1
13868,moment/moment,382,add natural language parsing  similar to Remember The Milk,e.g.  today tomorrow yesterday Apr Apr 25th 25 April 2 days 3 weeks ago last year ,troynt,closed,3,2012-08-02 22:21:31,2012-08-03 16:40:37,,,,1,1
13867,moment/moment,383,would like to add support for Nepali language  but stuck on am/pm,Hey  Cool project btw    I d like to add support for Nepali Language  and have almost completed writing the tests. I m however a bit stuck  because we don t tend to have the am/pm format  but only the meridian. To put it easily in english  our time format tend to be like      3 o clock in the morning/during the day/.....             /        / ...      and we have no am/pm. so how do i go about adding support to this library exclusively using only  time  meridian format. ,suvash,closed,26,2012-08-02 23:11:07,2012-10-23 16:20:29,,,,0,1
13866,moment/moment,384,1.7.1 Changelog,  Bugfixes    380 moment.fn.format does not escape  L LL LLL LLLL LT  tokens    389 isValid   returns false for a valid ISO 8601 string with timezone    377 Moment 1.7.0 unusable in Google Chrome extension due to the use of  new Function     408 moment.fn.format breaks with single and double quotes    409 Issue detecting invalid months in dates entered in other languages.    434 moment  xx 2001   MM YYYY  .isValid   should be false   New Features    398 Added support for a callback function in  lang.relativeTime.future  and  lang.relativeTime.past  ,timrwood,closed,1,2012-08-03 16:34:29,2012-10-02 17:27:21,,,,0,1
13865,moment/moment,385,Precise durations,Hi  I have tow dates and am trying to get more precise difference between them. So for example:      var a = moment [2006  0  26] ; var b = moment [2007  0  29] ;      Current options will return as following      b.diff a  years  ;    //  output: 1 b.diff a  months  ;  // output: 12      aproximating values to the term specified in the params.  What I need is to get  a year and 3 days   with       b.diffPrecise a  years  ;      and  12 months and 3 days  with      b.diffPrecise a  months  ;      I know it is not trivial.  Thanks in advance ,husayt,closed,1,2012-08-04 12:01:23,2012-08-20 04:42:56,,,,0,1
13864,moment/moment,386,Add strftime method for unix style date output formating.,Hello  This is only a prototype  still not finished. But I would like to know  whether it is feasible to integrate it into the core of  moment   when finalized  and created the respective tests.  I saw the plugin  moment strftime  and is made in coffescript which adds an additional dependency  also not quite complete. Not everyone uses and not all want coffescript use. I think it would be interesting to have this feature in the core of  moment .  I have many projects needed a good interaction between the unix format  they are almost the same as python  and many cases I had to do it by hand. Datejs know  but the code is quite complex  and has given me enough problems in web browsers.  With this  you want to convey  I think I m not the only one who would appreciate having this feature on  moment ;  ,niwinz,closed,5,2012-08-04 17:16:53,2012-08-06 21:22:15,,,,1,1
13863,moment/moment,387,Invalid Date when assigning moment   to now,Tested on Chrome 21.0.1180 Mac OS X. Here is the code:      var now = moment  ;  console.log now ; console.log moment   ;      Outputs:      G _a: null _d: Invalid Date _a: null __proto__: Invalid Date _isUTC: false _lang: false __proto__: Object   G _a: null _d: Sun Aug 05 2012 22:45:11 GMT 0900  KST  _isUTC: false _lang: false __proto__: Object      Expect  var now  to correctly hold the value of  moment   . ,kadishmal,closed,5,2012-08-05 13:47:20,2012-09-17 18:25:08,,,,0,1
13862,moment/moment,388,Proper Romanian  ro  translations,Proper Romanian  ro  translations   tests to match. ,avaly,closed,1,2012-08-07 19:58:51,2012-08-07 20:58:45,,,,1,1
13861,moment/moment,389,isValid   returns false for a valid ISO 8601 string with timezone,The following behavior seems incorrect:      moment  2012 01 01T20:00:00 05:00  .isValid   //  > returns false      That ISO 8601 string should be a valid timestamp. The problem stems from the timezone offset being added to the hours of the  datePartArray . In the  makeDateFromStringAndFormat    function  the string is properly parsed into the following  datePartArray :      [2012  0  1  20  0  0  0]      However  since there is a timezone included in the ISO 8601 string  the offset gets added to the hours near the end of the function  which turn the  datePartArray  into this:      [2012  0  1  25  0  0  0]      The hours element in the array is now 25. This properly causes an overflow to the next day in the  dateFromArray    function  but the  isValid    function returns false because the parsed date array  [2012  0  1  25  0  0  0]  does not equal the array generated from the Date object  [2012  0  2  1  0  0  0] .  http://jsfiddle.net/nPJ49/1/ ,mattbradley,closed,9,2012-08-08 05:51:35,2012-09-05 16:14:52,,Bug,,,0,1
13860,moment/moment,390,optional immutability,I wrote this as an experiment and figured I d submit it as a pull request. I created a global flag that makes moment objects immutable  forcing each of the manipulation functions to clone the moment object before doing their work. So:      js mutable = moment   mutable.add  s   3  == mutable  // => true moment.immutable = true immutable = moment   immutable.add  s   3  == immutable  // => false      I do like immutability a lot  but I could see where this might not be ideal maintainability wise  so NBD if you don t want it. Let me know what you guys think. ,icambron,closed,24,2012-08-08 06:50:57,2012-09-17 18:12:21,,,,1,1
13859,moment/moment,391,isValid   returns true for invalid date string,I m using the new isValid   method  which is great  to validate a time being entered by the user and realized that some invalid times are being returned as valid. Specifically  this seems to be an issue with using the format provided to create the time.  I want to specify that it must be 12 hour time  but it appears that the following is being read as 8:09 PM: moment  209:00 PM    h:mm A  .isValid    http://jsfiddle.net/ZHMAG/2/ ,brendanblackwood,closed,6,2012-08-08 19:33:35,2013-01-14 19:32:46,,,,0,1
13858,moment/moment,392,Web site busted...,Due to Github no longer allowing frames. It doesn t allow access to the documentation. ,bledek,closed,1,2012-08-08 23:57:02,2012-08-09 01:55:46,,,,0,1
13857,moment/moment,393,When using diff on the same date with different hours,Hi I ve found that the difference for two date instances with the same date but different hours for some values of hours give a non zero value.  var from = new Date 2007  3  7  19  0  0 ; var to = new Date 2007  3  7  6  0  0 ; console.log moment from .diff to  days   ; console.log moment to .diff from  days   ; This behavior is present in version : 1.7.0 of moment js.  ,wallymathieu,closed,3,2012-08-09 08:20:22,2013-01-11 20:49:04,,,,0,1
13856,moment/moment,394,consider using year designations A.D.  in long/some form.,Foreign languages designate calendars A.D.  with different letters  to avoid confusion with their own calendars. For eg. in Nepal The major calendar in use isn t the Gregorian  hence any english dates used  are always followed by the  designation    .     . / A.D.   so that it s clear that the date being used in context isn t of the more common one. The common calendar is called Bikram Sambat and is more commonly used. The designation for it is     .   . / B.S.    It would be nice if moment could support this in some form. ,suvash,closed,8,2012-08-09 16:10:34,2014-02-03 03:31:08,,New Feature,,,0,1
13855,moment/moment,395,Add testcase for wrong escaping of  L  token.,Actually  the documentation says:      moment  .format      L  ; // outputs  L       but this not works properly. I tried to find a solution  but for now  I could not find any. ,niwinz,closed,4,2012-08-10 21:47:44,2012-08-13 18:43:54,,,,1,1
13854,moment/moment,396,Duration calculation inaccurate,Is it me  or is the duration calculation a bit too lazy? When calculating the difference between 17 febr 1996 and 14 aug 2012  the month count  200  is not the expected 197 .8  months. When using moment.js to e.g. perform a minimum age check  this is killing.  Just dividing the interval number of days with 30 to get the months seems a bit lame to me. ,ghost,closed,5,2012-08-14 13:19:49,2013-04-15 17:41:54,,,,0,1
13853,moment/moment,397,Support for natural language input.,moment.natural  today   should return a moment object representing today. Things like tomorrow  yesterday  next monday  last friday  or multiple input formats should be supported.  See: http://www.datejs.com/  This goes hand in hand with moment s excellent support for human readable _display_    why not support humanized _input_ as well? ,aroman,closed,1,2012-08-16 01:04:02,2012-08-16 01:05:14,,,,0,1
13852,moment/moment,398,Support for Chuvash suffix changes in future fromNow,Chuvash uses an affix to express the future  fromNow . This affix can have different forms depending on preceeding sound. I wrote about this issue in my blog post: [Chuvash localization of moment.js] http://sharepointkunskap.wordpress.com/2012/08/11/chuvash localization of moment js/ . To solve this  the core moment.js has to support custom logic for future expressions.  In this PR I added tests for this for Chuvash  changes in lang/cv.js  a function instead of a string  and a change in  humanize  function in moment.js file. ,mirontoli,closed,7,2012-08-16 07:00:42,2012-08-19 22:22:11,,,,1,1
13851,moment/moment,399,Intermittent test failure   utc: creating with utc,It s infrequent  but periodically the first test in  creating with utc  fails.      javascript test.equal moment.utc  .valueOf    moment  .valueOf     Calling moment.utc   should default to the current time  ;      The output of the failed test shows:  Calling moment.utc   should default to the current time  expected: 1345143709878 result: 1345143709877  diff: 1345143709878 1345143709877   which clearly indicates that the 2 tested moments are created at slightly different times resulting in the failure. ,chrisakers,closed,1,2012-08-16 19:56:35,2012-08-19 22:47:23,,,,0,1
13850,moment/moment,400,String   Format fails on EDT timezone,      on the momentjs.com website  > window.navigator.appVersion    5.0  Macintosh; Intel Mac OS X 10_6_8  AppleWebKit/536.11  KHTML  like Gecko  Chrome/20.0.1132.47 Safari/536.11   > moment.version    1.7.0   > moment  .zone     240  > moment  12/25/2010    MM/DD/YYYY  .zone     300  >  new Date   .getTimezoneOffset     240     ,steve9001,closed,1,2012-08-17 15:44:12,2012-08-17 15:57:13,,,,0,1
13849,moment/moment,401,Slovenian translation,,dz0ny,closed,2,2012-08-18 09:27:45,2012-08-19 22:11:16,,,,1,1
13848,moment/moment,402,Ability to use a different timezone  without converting the dates to the timezone of the browser / operating system.,Is there any way to display dates in the timezone specified  instead of the browser or the system?      [3/5.0.0]niwi@vaio: /moment> node > var moment = require  ./moment   undefined > var d1 = moment  2011 08 18T19:53:26Z  ; undefined > d1.format    2011 08 18T21:53:26 02:00  > var d2 = moment  2011 08 18T19:53:26  0300   undefined > d2.format    2011 08 18T18:53:26 02:00       Sometimes  the user specifies the timezone in the settings you want to use and there is a possibility that can put one other than your default OS.  Then I  the application must show the dates in the timezone specified by the user.  I see that passing a specific timezone date with the  moment    moment  transforms the date timezone of the machine  local   this does not always match the settings for the user in the web application.  There are two possible solutions. Specify the timezone to  moment   just as with the locale and always use the specified timezone instead of the system  or if the date comes in one explicit timezone  not convert dates to local timezone. ,niwinz,closed,4,2012-08-18 10:29:36,2012-10-23 16:18:51,,,,0,1
13847,moment/moment,403,Bug in format output for Apr 1  2000,    coffeescript source =  2000 04 01T00:00:00.000Z  m = moment.utc source   YYYY MM DDTHH:MM:SS.SSSZ  value = m.format  MMM D       The expected result for value is  Apr 1   but I m getting  Dec 1 . ,drauschenbach,closed,2,2012-08-18 19:36:13,2012-08-18 20:04:10,,,,0,1
13846,moment/moment,404,1.8.0 Release Notes,This is for the 1.8.0 release. All code should be on the  develop  branch.   Bugfixes   Language updates    416 Indonesian  id     414 Esperanto  eo     415 Latvian  lv     413 Danish  da  capital day fixes  update the issue number when there is the new pull request     483 Nepali  ne    New Features  already written     373 Adding  YYYYY  token to support   270 000  to  270 000  years    444 Added  moment.fn.toJSON    New Features  to be written     405 Add  lang.preparse  and  lang.postformat     406 Switch to grunt    128 Add requirejs  AMD  support  to languages  ,timrwood,closed,7,2012-08-19 22:15:07,2012-12-12 19:45:45,,New Feature,,,0,1
13845,moment/moment,405,Add lang.preparse and lang.postformat,See  383 ,timrwood,closed,15,2012-08-19 22:48:58,2012-10-22 22:23:59,,New Feature,,,0,1
13844,moment/moment,406,Switch to grunt,Because  grunt watch:test  is so awesome. ,timrwood,closed,5,2012-08-20 17:35:06,2012-09-02 00:36:23,,New Feature,,,0,1
13843,moment/moment,407,1 hour difference when adding days,hi All   I am using moment.js version 1.7.0 and have noticed what may be an issue when adding days. I have checked over my example a few times  but I could very well be missing something and this may not be an issue at all.  In any case  it appears that when adding a specific amount of days to a given timestamp  the result is off by 1 minute  i.e.  1 minute more than expected . Here is some JavaScript that can produce the issue over a range of days:      javascript // Dependency warning: moment.js  underscore.js var now = moment  .unix  ; var limit = 1000; JSON.stringify _.range 1  limit .map function a     var m = moment.unix now ;   var res = m.add  days   a .unix  ;   var expected = now   a   24   60   60;   return       days: a      isEqual: res === expected      difference: res   expected    ;          And a snippet of the output:      json [             isEqual  : true         difference  : 0         days  : 1                   isEqual  : true         difference  : 0         days  : 2                   isEqual  : true         difference  : 0         days  : 3                   isEqual  : true         difference  : 0         days  : 4                   isEqual  : true         difference  : 0         days  : 5                   isEqual  : true         difference  : 0         days  : 6                   isEqual  : true         difference  : 0         days  : 7                   isEqual  : true         difference  : 0         days  : 8                   isEqual  : true         difference  : 0         days  : 9                   isEqual  : true         difference  : 0         days  : 10          ...             isEqual  : true         difference  : 0         days  : 75                   isEqual  : false         difference  : 3600         days  : 76                   isEqual  : false         difference  : 3600         days  : 77                   isEqual  : false         difference  : 3600         days  : 78                   isEqual  : false         difference  : 3600         days  : 79                   isEqual  : false         difference  : 3600         days  : 80                   isEqual  : false         difference  : 3600         days  : 81                   isEqual  : false         difference  : 3600         days  : 82          ...             isEqual  : false         difference  : 3600         days  : 201                   isEqual  : true         difference  : 0         days  : 202                   isEqual  : true         difference  : 0         days  : 203                   isEqual  : true         difference  : 0         days  : 204                   isEqual  : true         difference  : 0         days  : 205          .... ]      From the output  the off by 1 minute looks to occur only for specific ranges. Maybe this is expected behaviour  or I am missing something here  but I just wanted to raise this.  Cheers    Eric ,ethul,closed,3,2012-08-20 21:22:56,2012-08-20 23:04:16,,,,0,1
13842,moment/moment,408,moment.fn.format with single and double quotes,In previous version I was able to do formatting with apostrophe inside like  moment  .format  MMM  YY   moment  .format  MMM   YY   With 2.0 version I get   SyntaxError: Unexpected string arguments: Array[0] get message: function      [native code]   get stack: function      [native code]   set message: function      [native code]   set stack: function      [native code]   type:  unexpected_token_string    proto  : Error ,bytnar,closed,3,2012-08-22 15:12:44,2012-09-02 00:32:36,,,,0,1
13841,moment/moment,409,Issue detecting invalid months in dates entered in other languages.,Not sure that there is a real bug here  but perhaps someone could spare some advice and help with a work around.   My users have free form input into date field and i am having some issues detecting if their input is invalid.  DD MMM YYYY is the standard format in my world.  I noticed this behavior: moment  01 Aug 2012   DD MMM YYYY  ._d;  > Wed Aug 01 2012 00:00:00 GMT 0600  MDT   moment  01 Nam 2012   DD MMM YYYY  ._d;  > Sun Jan 01 2012 00:00:00 GMT 0700  MST   Unfortunately moment seems to assume that it hasn t received a month and assumes January. I don t think this is ideal.  It would be nice if this could be fixed or if the isValid   call could return false in this case.   I worked around this by just checking without the format moment  01 Nam 2012  .isValid  ;  > false  But my application is internationalized and the moment String  call would not consider the current global language when parsing.    moment.lang  fr   Excluded for Brevity  ; moment  01 Fev 2012  .isValid  ;  > false  Beyond manually parsing user input myself I can t think of a way that I can tell if a french user entered a valid month  01 Fev 2012  or and invalid month  01 Nam 2012  with this library.   Thanks ,brksrly,closed,3,2012-08-23 19:46:03,2012-09-17 18:05:35,,Bug,,,0,1
13840,moment/moment,410,Accept singular object in add/subtract/duration,Currently  moment  .add  weeks   1   works  but  moment  .add  week   1   does not. Same with  subtract  and  moment.duration   there may be others also. I think all singular forms should be aliased to the plural form    so  add  week   5   would also work    that is not so pretty  but it is the easiest to develop  and it improves readability if the variable is a constant. ,ichernev,closed,4,2012-08-24 13:33:25,2013-01-10 18:42:00,,,,0,1
13839,moment/moment,411,add/subtract vs moment.duration argument order,  adding to a moment:  moment  .add  minutes   5     creating duration  moment.duration 5   minutes     I think this is inconsistent. It is also not fluent to read.  moment  .add 5   minutes    sounds much better  when read . I think add can support both styles of arguments  current and duration  without much trouble    just check which one is the string ;   What do you think? ,ichernev,closed,3,2012-08-24 13:51:53,2013-01-14 20:15:55,,Deprecate,,,0,1
13838,moment/moment,412, as  functions on durations,Durations have these auto generated functions like  asYears    asMinutes   etc. It seems like it would be more consistent with the general direction of moment  e.g.  startOf  and now  isSame   if it were  as  years      as  minutes     etc.   I could add that easily enough  although the string casing is a bit annoying  and then maybe deprecate the individual ones? Toss them in 2.0? What do you think? ,icambron,closed,2,2012-08-25 19:39:51,2013-04-03 17:15:00,,New Feature,,,0,1
13837,moment/moment,413,Correcting the Danish translation.,Weekdays and month names are not capitalized in Danish  unless they start a sentence. ,jchillerup,closed,6,2012-08-27 06:11:07,2012-08-27 18:43:16,,,,1,1
13836,moment/moment,414,Esperanto translation / Esperanta traduko,,colindean,closed,9,2012-08-27 21:12:20,2012-08-28 03:20:00,,,,1,1
13835,moment/moment,415,Latvian  lv  language configuration,,skakri,closed,3,2012-08-28 02:10:05,2012-08-28 03:09:48,,,,1,1
13834,moment/moment,416,Indonesian  id  translation with tests,Indonesian translations with tests.  There s one itch though: in English  ordinal numbers can be written with suffix:      1st 2nd 3rd 4th      Unfortunately  in Indonesian such ordinal numbers are written with prefix:      ke 1 ke 2 ke 3 ke 4      Anyway  in practice Indonesians never express date in the form like  February 14th  so I m currently leaving the ordinals in their English form. ,tyok,closed,7,2012-08-28 03:08:53,2012-08-28 03:34:39,,,,1,1
13833,moment/moment,417,Implemented moment.fn.isSame,Requested by @rockymeza in  370. ,ichernev,closed,3,2012-08-28 08:09:48,2012-09-01 23:52:11,,,,1,1
13832,moment/moment,418,moment creation tests fail in develop,https://gist.github.com/3496104  There are 2 issues here:    getUTCFullYear  implies the use of  moment.utc   instead of  just  moment   or use  getFullYear      moment.utc  tries to detect timezone  and the regexp thinks   sth  is a timezone  when it is a year instead  So if  getFullYear  is used all tests pass  but then moment.utc String  String  does not work    so shall I change that and also add failing tests with  moment.utc     getUTCFullYear ? ,ichernev,closed,1,2012-08-28 08:25:07,2012-08-28 08:46:10,,,,0,1
13831,moment/moment,419,timezone detection issue,Fixed tests for  moment String  String   and introduced failing tests for  moment.utc String  String  .  One possible solution of the timezone issue is to search for timezone format pattern in format   Z  or  ZZ  . So if you want to parse sth that has  /  in front of the year    you d better specify a format  otherwise it won t work :  What do you think? ,ichernev,closed,1,2012-08-28 08:43:59,2012-09-01 23:52:56,,,,1,1
13830,moment/moment,420,add lang.meridiem trans and change to 24 hr time,I read up a bit and confirmed my suspicion that the Esperantist community primary uses 24 hour time.  Also fixed an errant English header pointed out by @wilkie. ,colindean,closed,1,2012-08-28 22:27:44,2012-09-01 23:53:33,,,,1,1
13829,moment/moment,421,Reset language after loading all language strings.,Currently  if I include the lang all.min.js file  it sets the current language to the last one in that file. There is no way to simply load all available language strings  yet retain the default language. At the very least  the last line of that file should set:  moment.lang window.navigator.language ;  to use the best guess instead of whatever happens to be last in that list. ,manastungare,closed,4,2012-08-29 00:52:58,2013-01-10 20:00:04,,Language,,,0,1
13828,moment/moment,422,Setting a language with the full locale  e.g. en us  should set the language correctly  en .,Actual: 1. Load moment.js. 2. Load lang all.js. 3. At this point  moment.lang   returns  zh tw .  filed separately as  421 . 4. Set moment.lang window.navigator.language ; My window.navigator.language is  en US . 5. Now  moment.lang   still returns  zh tw .  Expected: 5. moment.lang   should return  en   since although it doesn t have strings for  en us   it does have strings for  en . ,manastungare,closed,6,2012-08-29 00:57:11,2013-10-04 20:57:15,,Language,,,0,1
13827,moment/moment,423,setting milliseconds is inValid,Try to set millisecond on a moment instance result in      Javascript var m = moment  2012 08 29 17:49:17    YYYY MM DD HH:mm:ss  ; m.isValid  ; //true m.milliseconds 886 ; m.isValid  ; // false       but if I just initialize an instance with nothing  it works      Javascript moment  .milliseconds 886 .isVaid  ; //return true     ,jackysee,closed,1,2012-08-29 10:47:27,2012-08-29 11:03:21,,,,0,1
13826,moment/moment,424,Bug in ru locale in IE7,In lang/ru.js:58 there is unnececery comma. ,Lehych,closed,2,2012-08-30 14:47:28,2012-08-30 15:09:12,,,,0,1
13825,moment/moment,425,Feature/grunt,Here s grunt   To see tasks  use  grunt  h .  Now  while writing code  you can do  grunt watch  to automatically run the unit tests and jshint on every file save.  Also   grunt zones  can be used to run unit tests in all timezones  on a unix system . ,timrwood,closed,5,2012-08-31 17:14:09,2012-09-01 23:45:04,,,,1,1
13824,moment/moment,426, n not allowed in format?,someDate.format  MMM nYY   gives me a strange  unexpected token ILLEGAL  error on Chrome  22.0.1229.14 beta . I don t see the error after I remove the   n . ,egonSchiele,closed,2,2012-09-01 05:49:38,2012-09-11 19:20:03,,,,0,1
13823,moment/moment,427,parsing AM/PM,I use version 1.6.2  I did this...  moment   2012 09 03T03:00PM    YYYY MM DDThh:mmA  .format   YYYY MM DDThh:mmA     But get this  it should PM but it returns AM??  2012 09 03T03:00AM  Thanks a lot  ,cardinal27513,closed,4,2012-09-03 19:43:50,2012-09-05 17:11:54,,Bug,,,0,1
13822,moment/moment,428,Add day to unix timestamp,I m building a date based on a defined hour and minute  i.e.        var end_date = moment.utc  ; end_date.hours hour ; end_date.minutes minute ;  //Then a unix timestamp is what we want console.log end_date.unix   ;      In some cases  I need to add a day to this.  So I m doing   end_date.add  days   1 ;   However  this seems to give inconsistent results.  It seems it doesn t maintain UTC.  Is there a better to way be doing this?  Thank you  ,btmdave,closed,4,2012-09-04 01:25:07,2012-10-23 00:42:52,,,,0,1
13821,moment/moment,429,Improved some grammatical cases in Polish localization,Present Polish translation has some grammatical inaccuracies on  lastWeek  cases. I have improved them  and Polish translation is grammatically correct at the moment. ,m-kas,closed,6,2012-09-04 13:33:27,2012-11-25 22:42:01,,Language,,,1,1
13820,moment/moment,430,isValid doesn t seem to work when providing an array of date formats,It seems like the month rollover doesn t invalidate the date if multiple formats are specified  moment  12 13 2012   DD MM YYYY  .isValid  ;  > false     Rollover occurred but  valid  moment  12 13 2012  [ DD MM YYYY   YYYY MM DD ] .isValid  ;  > true  moment  12 13 2012  [ DD MM YYYY   YYYY MM DD ] ._d  > Sat Jan 12 2013 00:00:00 GMT 0700  MST      Doesn t matter which format was specified moment  12 13 2012  [ DD MM YYYY   DD MM YYYY ] .isValid  ;  > true     Day rollover is also affected  doesn t matter if the list only contains one element moment  38 12 2012  [ DD MM YYYY ] .isValid  ;  > true ,brksrly,closed,4,2012-09-04 22:26:54,2012-09-05 17:36:54,,Bug,,,0,1
13819,moment/moment,431,Iteration?,Some way of iterating between a start and end date  using some duration would be super useful.  Maybe like the jquery .each where you could get back a moment instance and the index of the iteration. ,stuaxo,closed,4,2012-09-05 09:58:13,2013-01-10 19:37:35,,,,0,1
13818,moment/moment,432,Adding parsing of PnYnMnDTnHnMnS to duration,We ve a need to read in duration in  PnYnMnDTnHnMnS  format.. right now we did a regexp parsing and then create a moment./duration. It will be great if it can be added to moment.  Thanks ,cardinal27513,closed,2,2012-09-06 01:26:21,2012-09-08 13:36:52,,,,0,1
13817,moment/moment,433,Add/Subtract duration,I use duration to hold the time delta info. Thinking that would that be easier if  Duration can be Add/Subtract directly.      javascript var duration =  moment.duration   ...   ;   moment  .add duration ; moment  .subtract duration ;       ,cardinal27513,closed,2,2012-09-08 14:21:57,2012-10-01 16:36:38,,,,0,1
13816,moment/moment,434,moment  xx 2001   MM YYYY  .isValid   should be false,Hi  I have some issues with the .isValid   function. You can find 2 example below :      moment  xx xx 2001   DD MM YYY  .isValid    => true moment  12 13 2001  [ DD MMM YYY   DD MM YYY ] .isValid    => true      These dates are clearly not valid but it still return true. Is it the wanted behaviour of the isValid   function? ,pgn-vole,closed,4,2012-09-11 08:58:59,2012-09-17 18:04:58,,Bug,,,0,1
13815,moment/moment,435,Hebrew translation,,tomer,closed,2,2012-09-11 19:02:32,2012-10-30 21:24:31,,Language,,,1,1
13814,moment/moment,436,Add more internationalization formats,9/3/10 12:05 pm is the big missing one  Eg:   medium : equivalent to  MMM d  y h:mm:ss a  for en_US locale  e.g. Sep 3  2010 12:05:08 pm   short : equivalent to  M/d/yy h:mm a  for en_US locale  e.g. 9/3/10 12:05 pm   fullDate : equivalent to  EEEE  MMMM d y  for en_US locale  e.g. Friday  September 3  2010   longDate : equivalent to  MMMM d  y  for en_US locale  e.g. September 3  2010  mediumDate : equivalent to  MMM d  y  for en_US locale  e.g. Sep 3  2010   shortDate : equivalent to  M/d/yy  for en_US locale  e.g. 9/3/10   mediumTime : equivalent to  h:mm:ss a  for en_US locale  e.g. 12:05:08 pm   shortTime : equivalent to  h:mm a  for en_US locale  e.g. 12:05 pm  http://docs.angularjs.org/api/ng.filter:date ,coli,closed,1,2012-09-18 17:30:03,2013-01-14 21:57:56,,,,0,1
13813,moment/moment,437,IT Translation for the month of September is incorrect,The translation for IT September is incorrect  months :  Gennaio_Febbraio_Marzo_Aprile_Maggio_Giugno_Luglio_Agosto_Settebre_Ottobre_Novembre_Dicembre .split  _     it should be  Settembre   ,lagosr,closed,8,2012-09-19 22:10:22,2012-09-22 22:58:26,,Bug,Language,,,0,1
13812,moment/moment,438,In spanish the months should be in lower case,In spanish the months should be in lower case.  Please see: http://spanish.about.com/od/writtenspanish/a/capitalization.htm   months: enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre .split  _   monthsShort: ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic. . ,mikeyie,closed,3,2012-09-20 21:58:43,2012-09-25 04:19:53,,Bug,Language,,,0,1
13811,moment/moment,439,Arabic translation,test will be added soon =  ,ElFadiliY,closed,1,2012-09-21 22:41:02,2012-09-22 22:52:50,,,,1,1
13810,moment/moment,440,New documentation site is unusable,The header uses fixed positioning.   The primary means of navigation for the site is a CSS dropdown menu which emanates from the header using fixed positioning.   The dropdown menus extend below the bottom of the viewport in many cases.  You cannot scroll down to see any of these menus  content  because they re stuck using fixed positioning.   It s also ugly as sin  but that s not a bug.  ,ghost,closed,2,2012-09-21 22:54:48,2012-10-01 16:22:40,,,,0,1
13809,moment/moment,441,Arabic  ar  translation,,ElFadiliY,closed,4,2012-09-22 01:37:47,2012-11-27 20:06:52,,Language,,,1,1
13808,moment/moment,442,UTC Parsing Broken in 1.7?,Hi there  I m trying to parse dates as UTC time and appear to be either hitting a bug or misunderstanding the documentation.  I m trying to do this:  moment  .utc  09/22/2012 09:45 AM    MM/DD/YYYY hh:mm A    And get a proper UTC time from it.  I ve tried a few different formats  but just can t get it to parse properly.  I always end up with the current local time  rather than the time I m supplying  for the moment.  I m running this under Chrome 21.  Am I missing something with regard to parsing for UTC times  or did I hit a bug in the utc parsing?  Thank you  ,carterventures,closed,2,2012-09-22 17:34:19,2012-09-22 17:43:23,,,,0,1
13807,moment/moment,443,Export moment for require.js,The pull request at https://github.com/timrwood/moment/commit/57ccb0ca3825d090fc911ef0a3acccfa33c2f0a7 added a section to export moment for AMD modules but this doesn t work for require.js. When trying to load moment.js from require I always get undefined.  I added an additional check to see if require is defined and if so export moment using require s define function  different set of parameters than what must be standard AMD . With this change I can load moment using require.js. ,yanivtal,closed,1,2012-09-23 18:38:04,2012-10-22 21:03:14,,,,1,1
13806,moment/moment,444,implement Moment toJSON  ,This should make it a bit easier to serialize objects which use moment objects as properties. :   I m using this with Backbone  where my models use moment objects which are serialized through JSON.stringify  . ,topaxi,closed,11,2012-09-23 20:08:43,2012-10-22 21:24:53,,,,1,1
13805,moment/moment,445,Updated Spanish translation,Changes:   Months and days names in Spanish are written in lowercase. See  438   Added tests  It is correctly explained in Wikipedia  as in the Spanish Royal Academy of the Language  RAE :  http://es.wikipedia.org/wiki/Wikipedia:Convenci C3 B3n_para_nombrar_nombres_propios Errores_t.C3.ADpicos ,julionc,closed,0,2012-09-23 21:40:04,2012-09-24 01:50:46,,,,1,1
13804,moment/moment,446,Updated Spanish translation,Changes:   Months and days names in Spanish are written in lowercase.   Added tests  It is correctly explained in Wikipedia  as in the Spanish Royal Academy of the Language  RAE :  http://es.wikipedia.org/wiki/Wikipedia:Convenci C3 B3n_para_nombrar_nombres_propios Errores_t.C3.ADpicos  cc @timrwood ,julionc,closed,0,2012-09-24 01:54:02,2012-09-24 17:14:24,,,,1,1
13803,moment/moment,447,Support  1 minute  for humanize  ....,Is there any method that does what humanize does but use 1 instead of  a ?  Use case is to localize a drop down of timeout settings...   Eg:  1 minute 5 minutes 1 hour ,coli,closed,4,2012-09-24 21:19:01,2012-10-01 16:22:22,,,,0,1
13802,moment/moment,448,Is timestamp conversion off?,Hi   I use moment.js to format in the frontend timestamps generated with ruby. Let s consider the timestamp  1370044800000 . It is  Sat  01 Jun 2013 00:00:00 GMT  according to the date I gave and also any epoch converter  epochconverter.com .  Though  if I do  date = moment 1370044800000    then  date._d  gives me  Fri May 31 2013 20:00:00 GMT 0400  EDT  .  It is very confusing for me as it is used in graphs and the months label are all off of a month.  Thanks for your help  ,karellm,closed,2,2012-09-26 15:08:42,2012-09-26 17:08:56,,,,0,1
13801,moment/moment,449,Inconsistent isValid  ,It seems that moment isValid   is not very consistent across different input format. Here is an example that validates a leap day on a non leap year: http://jsfiddle.net/hv3aZ/ When I check the Moment objects afterwards  both correctly change the internal date to March 1st; so I m not sure what s causing this problem. ,dangmai,closed,2,2012-09-26 23:36:31,2012-10-19 21:48:02,,,,0,1
13800,moment/moment,450,how to use with node.js,The section in the docs is blank:  In Node.js:   nothing here . ,chovy,closed,2,2012-09-28 02:15:10,2012-10-01 16:21:58,,,,0,1
13799,moment/moment,451,Remove Date locally scoped variable from iife so mock can be inserted by unit tests etc,Its currently hard to mock the native Date object for the purposes of unit tests etc because moment has a  locally scoped reference. You can mock Date before moment is initialised but this is a  not reversible afterwards and b  hard to do when using modular code  e.g. requirejs    If we remove Date from the iife then it can be mocked as needed.  Note: this issue is also discussed in https://github.com/cjohansen/Sinon.JS/issues/171  P.S. Ive tried to follow the recommend pull request process but please do let me know if Ive made any mistakes as this is my first pull request  :  ,gregtillbrook,closed,9,2012-09-28 10:11:45,2012-10-01 16:10:13,,,,1,1
13798,moment/moment,452,Firefox 1900s dates,If a user enters a date like  2/2/12   they would expect it to become February 2  2012  but in Firefox the date created is February 2  1912  which is pretty confusing. This isn t a problem in Chrome or Safari.  http://jsfiddle.net/Pqpwn/ ,aelnaiem,closed,2,2012-09-28 16:25:03,2012-10-01 16:14:31,,,,0,1
13797,moment/moment,453,Please add support for startOf  week   and endOf  week  ,I don t know if this is possible as the week starts/ends on different days in different countries  typically start Sunday vs start Monday  but it would be nice if moment supported  startOf  week    and  endOf  week    even if it normalizes on starting Monday.  Currently   startOf  week    returns the same date and  endOf  week    returns a date 7 days from input. ,philipmat,closed,2,2012-09-29 14:51:01,2012-09-30 13:08:42,,,,0,1
13796,moment/moment,454,Add ability to default moment to UTC parsing,Could moment have a configuration option to parse in UTC instead of local time? ,jgornick,closed,4,2012-10-01 17:01:59,2012-10-23 15:25:24,,,,0,1
13795,moment/moment,455,.calendar   not respecting .lang  ,This is half true. It respects getting the lang  but not if the lang config uses references to other formats. Let me give an example for my country  Portugal.  In file pt.js you have:      javascript                 sameDay:  [Hoje  s] LT        [Line 19] https://github.com/timrwood/moment/blob/master/lang/pt.js L19   And   LT   is:      javascript                 LT :  HH:mm        [Line 12] https://github.com/timrwood/moment/blob/master/lang/pt.js L12   Notice there s no AM/PM in Portugal. Now doing this on node REPL:      javascript require  moment  .utc  .lang  pt  .calendar        Gives me:       Hoje  s 10:57 AM      ,dresende,closed,3,2012-10-02 10:58:13,2012-10-02 17:24:24,,Bug,,,0,1
13794,moment/moment,456,1.7.2 Release Notes,  Bugfixes    455 moment.fn..calendar   does not respect moment.fn.lang   ,timrwood,closed,0,2012-10-02 17:26:10,2012-10-02 17:26:23,,,,0,1
13793,moment/moment,457,moment  .lang   has different behavior from moment.lang  ,I m not sure this is the expected behavior or not.  moment.lang    works correctly  as stated in the documentation . If you provide a language  it will change the global language. If you don t provide anything it will return the global language.  But if you have a  moment    instance you no longer have the ability to see the local language. Instead   .lang    returns the language definition. ,dresende,closed,3,2012-10-02 18:50:04,2012-10-05 22:45:29,,,,0,1
13792,moment/moment,458,Constructor refactor,This cleans up a few hacks that had been used for constructing moments. 1. [Attaching the source array to the date object it created  then pulling it back off later] https://github.com/timrwood/moment/blob/7bf7d3f99ee1ee631bcbe29ac7778e6e6529b0e8/moment.js L222  2. [Attaching the  asUTC  boolean as the eighth item in the input array] https://github.com/timrwood/moment/blob/7bf7d3f99ee1ee631bcbe29ac7778e6e6529b0e8/moment.js L354  3. [Attaching the  isValid  boolean as the ninth item in the input array] https://github.com/timrwood/moment/blob/7bf7d3f99ee1ee631bcbe29ac7778e6e6529b0e8/moment.js L357   Now  when  moment    or  moment.utc    are called  a  config  object is created that gets passed through all the functions necessary to convert the input to a  Moment . Then  all the cases above can just attach their data to the config object. 1. [config._a] https://github.com/timrwood/moment/blob/1fca58d212e1cf3f9a436f4b981bf79c1957643b/moment.js L621  2. [config._useUTC] https://github.com/timrwood/moment/blob/1fca58d212e1cf3f9a436f4b981bf79c1957643b/moment.js L564  3. [config._isValid] https://github.com/timrwood/moment/blob/1fca58d212e1cf3f9a436f4b981bf79c1957643b/moment.js L513  ,timrwood,closed,1,2012-10-03 16:33:11,2012-10-05 17:54:31,,,,1,1
13791,moment/moment,459,incorrect date calculation using decimal hours,With reference to the two lines below:  alert moment  .add  hours   0.7 .fromNow   ; //in 42 minutes  alert moment  .add  hours   0.75 .fromNow   ; // in an hour  Should the second produce in 45 minutes. Ideally I want to take arguments from a duration text field which is a decimal and convert to minutes. But when the value is greate than 0.7 it just goes straight up to an hour.   Think this is a possible bug. ,matthewfedak,closed,1,2012-10-04 03:34:12,2012-10-19 21:47:51,,,,0,1
13790,moment/moment,460,Language cleanup,This is a bit of a restructure  so I thought I would add it as a PR so that other people can comment.  Basically  instead of having to handle callbacks vs array vs strings all throughout the codebase  we can now call a consistent callback function on a  Language  object.  When setting language config options  if the option is a function  it will replace the prototype function  otherwise  it will replace the data object that the prototype function uses. [See these lines] https://github.com/timrwood/moment/commit/03d8e7f5319e291ea63685c965100e8e725d50f3 L0R199 . ,timrwood,closed,0,2012-10-05 22:35:43,2012-10-22 21:02:54,,,,1,1
13789,moment/moment,461,Indonesian  id  translation with tests,Translations of Indonesian time format in Bahasa Indonesia. ,mdamt,closed,1,2012-10-06 13:10:48,2012-10-06 13:11:55,,,,1,1
13788,moment/moment,462,fix the parsing of ISO8601 date string which omitted  T  ,according to Wikipedia http://en.wikipedia.org/wiki/ISO_8601   it s allowed to omit the letter  T  when putting the date and the time togethor  so  2012 10 08 21:58:21  is a  valid ISO_8601 format date string.  the variable  isoRegex  recognized  2012 10 08 15:15:00  as iso time format see line 49 50   but when parse the iso time format with variable  isoTimes   it needs  T   so after parsing   only date is left  the time is lost. ,TooBug,closed,6,2012-10-08 14:00:06,2012-11-05 17:32:40,,,,1,1
13787,moment/moment,463,Duration missing features,I m working on a project and momentjs is really useful for date manipulation so thanks for that.   To give you an example  we re making somekind of store for plane tickets. The  duration.humanize    function is way to imprecise for us.   For example when leaving at:  12:00 and landing at 13:30. It will round it to 2 hours. But we need some kind of granularity which is missing from momentjs.  humanize could default to 1 level of precision starting from the highest value.       // 1:30 duration.humanize   2 hour duration.humanize  precision: 2   1 hour 30 minutes duration.humanize  precision: 3   1 hour 30 minutes 0 seconds      The second problem is when there is the number 0. Momentjs translates it as  few seconds . I m not so sure how it could be achieved but it would be cool to have some kind of formatting.       // 3 days and 0 minutes duration.format  D [and] M   > 3 days and 0 minutes duration.format  H [and] M   > 72 hours and 0 minutes duration.format  H [and] m   > 72 hours and few minutes      That way the highest value could be mapped in the format. So even if there is 1 year  the format tells us how to display it correctly. I d be happy to push a commit for that because it s very useful and having to do it by hand when momentjs already handle localization feels bad. ,llacroix,closed,165,2012-10-10 14:57:16,2016-06-25 13:50:03,,New Feature,,,0,1
13786,moment/moment,464,Test for equality?,Hello  with a  diff    method available  it seems like there should be a compatible  equals    as well. Have I missed anything obvious?  I d assume any of the following should work  but most sorting algorithms expect  equals    to always be  true  whenever  diff   === 0  and it d certainly be convenient if moment provided an equals  .  Cheers; thanks for the great resource  ,katowulf,closed,2,2012-10-11 18:36:06,2012-10-11 19:42:54,,,,0,1
13785,moment/moment,465,parsing differences on IE9 than on FF/Chrome/Safari,So granted that this is not the proper syntax  but thought you should know:  running:     moment  09:07 AM Oct/12/2012    on FF  Chrome   Safari returns a valid date. on IE9 it returns an invalid date.  running:    moment  09:07 AM Oct  12  2012    works the same on all the browsers ,bishopZ,closed,1,2012-10-12 15:19:50,2012-10-19 21:47:38,,,,0,1
13784,moment/moment,466,moment.min/.max,These would be useful  I realise that it would just syntatic sugar for  Math.min moment.toDate  .getTime   ;  but the above is still a bit of a linefull. ,stuaxo,closed,2,2012-10-12 15:33:01,2012-10-15 07:43:06,,,,0,1
13783,moment/moment,467,DDDD give incorrect results if number is not zero padded ,This link http://jsfiddle.net/ttskh/1/ illustrates the problem. If number  which designates day of the year  is not padded with zeros  moment parse it incorrectly. ,uruz,closed,1,2012-10-13 13:00:50,2012-10-19 21:48:14,,,,0,1
13782,moment/moment,468,YY format threshold between 19xx/20xx is incompatible with implementations of  strptime  in other languages,moment.js currently assumes  if century is omitted  that years 00 70 are from 2000  and 71 99 are from 1900. http://jsfiddle.net/KpmwL/ illustrates that. This behaviour is incompatible with date parsing implementations in other languages  like PHP s  strptime   Python s  datetime.strptime  and UNIX C s  strptime . All of that implementations assumes that 00 68 years belong to 2000 and 69 99 belong to 1900.  Fixing that would be dead simple  but introduces a backwards incompatibility.  ,uruz,closed,2,2012-10-13 13:14:53,2013-01-11 19:41:01,,,,0,1
13781,moment/moment,469,Feature/cents,Adding the ability to format to cents  1/100 of a minute . I started looking in to adding cents as an input :     date = moment  00:00.50   HH:mm.cc  ;  But was unable to follow the token path in such a way that I could catch cc and do the translation to seconds. ,notbenh,closed,1,2012-10-19 05:54:05,2012-10-19 16:10:03,,,,1,1
13780,moment/moment,470,Parsing  10Sep2001  should work and should be valid.,See https://github.com/timrwood/moment/issues/391 issuecomment 8763283 ,timrwood,closed,1,2012-10-22 23:44:06,2012-10-23 00:41:41,,Bug,,,0,1
13779,moment/moment,471,moment.before  moment.after,Hi there   Could you please add these basic helpers : var a = moment  ; var b = moment  .add  seconds   1 ; b.before b  // false b.after a  // true  maybe with the same arguments than moment.fn.diff  as it basically means moment.diff > 0 or < 0 easy stuff so worth it :  ,sylvainpolletvillard,closed,4,2012-10-24 12:34:18,2012-10-31 00:16:08,,,,0,1
13778,moment/moment,472,New language   Hebrew,he.js file ,moshest,closed,7,2012-10-25 07:01:59,2012-10-30 21:00:50,,,,1,1
13777,moment/moment,473,Parsing validation may not be strict enough  1.7.0 and 1.7.2 ,Date parsing on usual dates:   moment  20120101   gives Invalid Date  probably it would understand it as unix time?    moment  2012 01 01   parses the date correctly   moment  20120101    YYYYMMDD   parses it correctly as well  However with a bogus date string I noticed an odd behaviour:   moment  a   correctly gives Invalid Date   moment  a    YYYYMMDD   on the other hand results in: Sat Jan 01 0 00:00:00 GMT 0000  GMT   I really hoped the date parsing would do some validity checks for me  e.g. check against the length specified in the format and check for numbers vs. strings .  Is this the desired behaviour or a bug?  Also: moment     and moment null  both result in null being returned. For an empty string should that be null or Invalid Date? ,axic,closed,1,2012-10-25 10:52:47,2013-01-11 19:59:49,,,,0,1
13776,moment/moment,474,Firefox Month Year parse incompatibilitty.,moment  December 2012   works in chrome and other browsers and returns December 1rst 2012.  In Firefox  it returns an invalid date. ,maxmx,closed,2,2012-10-25 15:01:07,2012-10-25 15:37:21,,,,0,1
13775,moment/moment,475,toString returns localized string on utc moment,http://jsfiddle.net/nEzA5/   moment.utc  .toString    returns a string in local time  while format  ...   uses the utc values. I think  toString  should return utc values as well. ,ichernev,closed,10,2012-10-25 18:57:33,2013-01-08 05:35:52,,,,0,1
13774,moment/moment,476,moment NaN  in IE8, moment NaN   in IE8 results in a moment object with an  _d  of     T:Z  . In modern browsers   _d  is just null.  Tested with 1.7.2. ,wachunga,closed,4,2012-10-25 19:56:37,2012-11-09 00:04:57,,,,0,1
13773,moment/moment,477,Month parser matches just against the beginning  not the whole word,In  loadLang     the regular expression for months is constructed to match agains just the beginning of the word  i.e. it tests for  ^July ^Jul .      parse[i] = new RegExp  ^     values.months[i]    values.months m             ^     values.monthsShort[i]    values.monthsShort m      .replace  .         i  ;      In Czech  the word for June is   erven  and for July   ervenec   which means that if parsing the string   ervenec   it s mistakenly picked up as June  in the cycle for   MMMM   case in  addTimeToArrayFromToken    .  Now  I tried to change the parser to match against the whole word  but it caused Finnish  syys  and Turkish  MAYIS  KASIM  ARALIK  translation to fail. So I d like to ask @bleadof and @erhangundogan for comments on whether they need such behaviour  and hopefully we ll find a solution that works for all our languages. ,petrbela,closed,2,2012-10-25 21:20:02,2012-10-26 05:39:07,,,,0,1
13772,moment/moment,478,Czech language translation,I created Czech translation  using new Language feature currently in  develop  branch  as suggested in  447 . There are three tests failing in  create.js   but they were already failing when I pulled the branch. ,petrbela,closed,4,2012-10-26 05:35:32,2012-10-26 16:24:13,,,,1,1
13771,moment/moment,479,Language files are not real AMD?,Hi  would it be nice if all the language files were AMD modules?  Here an example for the norwegian  nb.js  language file      if  typeof define ===  function     define.amd        define [ moment ]  function              moment.lang  nb   lang ;       ;        I m quite new to Require.js  so it may not be the best way to require a language file?  If this is a good idea  I will make a pull request later ,trondkla,closed,2,2012-10-26 10:39:38,2012-12-12 19:42:41,,,,0,1
13770,moment/moment,480,Parsing docs should explicitly cover error case and reference isValid  ,I  for one  briefly had trouble figuring out how to handle invalid date strings because the docs don t use the words  invalid    fail   or  error  _anywhere_. Plus  the individual function docs don t mention the error case at all. ,cvrebert,closed,2,2012-10-26 18:12:45,2012-10-26 19:04:22,,,,0,1
13769,moment/moment,481,Failing unit tests in other timezones,See this comment. https://github.com/timrwood/moment/pull/478 issuecomment 9818664      Testing create.js..........................FF >> create   six digit years >> AssertionMessage: parse utc BC 270 001 >> AssertionError  270001 ==  270000 >>   at Object.assertWrapper [as equal]  /usr/local/lib/node_modules/grunt/node_modules/nodeunit/lib/types.js:83:39  >>   at Object.exports.create.six digit years  /Applications/MAMP/htdocs/moment/test/moment/create.js:342:14  >>   at Object.wrapTest  /usr/local/lib/node_modules/grunt/node_modules/nodeunit/lib/core.js:233:16  >>   at Object.wrapTest  /usr/local/lib/node_modules/grunt/node_modules/nodeunit/lib/core.js:233:16  >>   at wrapTest  /usr/local/lib/node_modules/grunt/node_modules/nodeunit/lib/core.js:233:16  >>   at Object.exports.runTest  /usr/local/lib/node_modules/grunt/node_modules/nodeunit/lib/core.js:69:9  >>   at exports.runSuite  /usr/local/lib/node_modules/grunt/node_modules/nodeunit/lib/core.js:115:25  >>   at _concat  /usr/local/lib/node_modules/grunt/node_modules/nodeunit/deps/async.js:508:13  >>   at async.forEachSeries.iterate  /usr/local/lib/node_modules/grunt/node_modules/nodeunit/deps/async.js:118:13  >>   at async.forEachSeries.iterate  /usr/local/lib/node_modules/grunt/node_modules/nodeunit/deps/async.js:129:25   >> create   six digit years >> AssertionMessage: parse utc AD  270 000 >> AssertionError 269999 == 270000 >>   at Object.assertWrapper [as equal]  /usr/local/lib/node_modules/grunt/node_modules/nodeunit/lib/types.js:83:39  >>   at Object.exports.create.six digit years  /Applications/MAMP/htdocs/moment/test/moment/create.js:344:14  >>   at Object.wrapTest  /usr/local/lib/node_modules/grunt/node_modules/nodeunit/lib/core.js:233:16  >>   at Object.wrapTest  /usr/local/lib/node_modules/grunt/node_modules/nodeunit/lib/core.js:233:16  >>   at wrapTest  /usr/local/lib/node_modules/grunt/node_modules/nodeunit/lib/core.js:233:16  >>   at Object.exports.runTest  /usr/local/lib/node_modules/grunt/node_modules/nodeunit/lib/core.js:69:9  >>   at exports.runSuite  /usr/local/lib/node_modules/grunt/node_modules/nodeunit/lib/core.js:115:25  >>   at _concat  /usr/local/lib/node_modules/grunt/node_modules/nodeunit/deps/async.js:508:13  >>   at async.forEachSeries.iterate  /usr/local/lib/node_modules/grunt/node_modules/nodeunit/deps/async.js:118:13  >>   at async.forEachSeries.iterate  /usr/local/lib/node_modules/grunt/node_modules/nodeunit/deps/async.js:129:25   >> create   negative four digit years >> AssertionMessage: parse utc BC 1 001 >> AssertionError  1001 ==  1000 >>   at Object.assertWrapper [as equal]  /usr/local/lib/node_modules/grunt/node_modules/nodeunit/lib/types.js:83:39  >>   at Object.exports.create.negative four digit years  /Applications/MAMP/htdocs/moment/test/moment/create.js:351:14  >>   at Object.wrapTest  /usr/local/lib/node_modules/grunt/node_modules/nodeunit/lib/core.js:233:16  >>   at Object.wrapTest  /usr/local/lib/node_modules/grunt/node_modules/nodeunit/lib/core.js:233:16  >>   at wrapTest  /usr/local/lib/node_modules/grunt/node_modules/nodeunit/lib/core.js:233:16  >>   at Object.exports.runTest  /usr/local/lib/node_modules/grunt/node_modules/nodeunit/lib/core.js:69:9  >>   at exports.runSuite  /usr/local/lib/node_modules/grunt/node_modules/nodeunit/lib/core.js:115:25  >>   at _concat  /usr/local/lib/node_modules/grunt/node_modules/nodeunit/deps/async.js:508:13  >>   at async.forEachSeries.iterate  /usr/local/lib/node_modules/grunt/node_modules/nodeunit/deps/async.js:118:13  >>   at async.forEachSeries.iterate  /usr/local/lib/node_modules/grunt/node_modules/nodeunit/deps/async.js:129:25      ,timrwood,closed,5,2012-10-26 19:01:55,2012-10-30 19:19:17,,Bug,,,0,1
13768,moment/moment,482,Dealing with timezones in moment.js,Forgive me if this isn t the write place to ask this  as I can t appear to find any IRC/mailing list/forum  however I am asking if moment.js supports setting custom timezones  and if not  is there any plan to do this and if so is there an ETA   I came from jvm where I used joda time  and moment.js seems to be the perfect candidate apart from the fact that it doesn t implement one of the major features that joda time  that is  ability to read timezone data from the latest Olson files  similar to what https://github.com/mde/timezone js does  and the ability to deal easily with setting/adjusting/converting between different timezones   The reason I am asking this is I noticed this  https://github.com/timrwood/moment timezone  however its quite old  and I was wondering if there is any progress with this  I also checked the documentation from the moment.js website  and it appears to only support setting timezone if you manually specify the offset  ,mdedetrich,closed,21,2012-10-29 05:41:46,2012-10-30 19:20:18,,,,0,1
13767,moment/moment,483,Adds language definition for Nepali  Yay  ,  with preParse/postFormat support ,suvash,closed,4,2012-10-29 19:02:10,2012-10-29 19:12:04,,,,1,1
13766,moment/moment,484,Feature request   Allow ordinal function to return whole new words instead of just suffixes.,As of my understanding  currently the ordinal function is used to return proper suffix for a number.      1 returns  1 st 2 returns  2 nd 3 returns  3 rd 4 returns  4 th 5 returns  5 th      and so on.  Once again  in Nepali we have an uncommon way of handling      1 returns                not to be suffixed after 1  but totally replaces it 2 returns                   i.e. we don t have 1st 2nd 3rd but First         Second          Third           3 retuns                    and so on...   4 returns      5 retuns                   but these are only for special letter/cases   6 returns       7 returns  7             most of the letters after 7 have a standard suffix   8 returns  8               i.e.      9 returns  9    10 returns  10         At the moment  I have omitted this in the lang/tests to simplify the language definition  but would be great if this could be handled as well. ,suvash,closed,11,2012-10-29 19:38:11,2013-01-14 19:26:29,,Deprecate,Enhancement,Language,,,0,1
13765,moment/moment,485,Adding AMD wrapper to lang files,This addresses  128 and  479.  This changes the way language files are defined. Rather than adding the [complex environment forking] https://github.com/timrwood/moment/blob/1445773224bdc284c70bc317fa5d764958805785/lang/bg.js L59  to each language file  the source files are instead [only targeting Node.js] https://github.com/timrwood/moment/blob/a775f290a7d0f4156ecd72575356370d115eddcb/lang/bg.js L5 .  Then  during the build process  the  require  ../moment    string is replaced with  moment  and is wrapped with the AMD/browser code.      javascript // en.js source file require  ../moment  .lang  en         // the good stuff   ;          javascript // en.min.js file targeted towards browsers and Require.js  function        function onload  moment            moment.lang  en                 // the good stuff           ;           if  typeof define ===  function     define.amd            define [ moment ]  onload ;           if  typeof window  ==  undefined     window.moment            onload window.moment ;                 Thoughts @mlegenhausen  @Morriz  and @trondkla? ,timrwood,closed,3,2012-10-30 18:44:58,2012-12-12 19:31:07,,,,1,1
13764,moment/moment,486,Changing month when day is 31,Hi     I ran into unexpected behavior.      javascript    date = moment  2012 10 31 00:00      date.month 10     date.format   // returns 2012 12 01...       This is a bit surprising. I think the date should be converted to 30th Nov  rather then to 1st Dec.  moment.add works as expected      javascript    date = moment  2012 10 31 00:00      date.add  months   1     date.format   // returns 2012 11 30...      ,mlomnicki,closed,3,2012-10-30 20:33:48,2012-10-30 21:31:41,,,,0,1
13763,moment/moment,487,Fixed Bulgarian ordinal numbers,Bulgarian ordinal numbers were not implemented  returned a fixed suffix  .   Now the correct suffix is returned. ,ichernev,closed,1,2012-10-30 22:55:11,2012-11-05 10:05:09,,,,1,1
13762,moment/moment,488,Hebrew special two days difference terms Dual form,Hebrew is missing 2 days prior after terms       /        .  There are also several other dual forms which are similar to Arabic: 1. Day   2 Days :              2. Week   2 Weeks :                3. Hour   2 Hours :               4. Month   2 Months :                5. Year   2 Years :              Another case would be  time   like one time  two times...  which is               irrelevant to this app  just a rule in Hebrew.  Kind regards  Yaron Shahrabani. ,yarons,closed,3,2012-10-31 10:53:18,2013-03-19 05:17:13,,,,0,1
13761,moment/moment,489,Slovenian translation.,,sedovsek,closed,2,2012-11-02 00:46:06,2012-11-05 10:32:25,,,,1,1
13760,moment/moment,490,Feature Request   In format just return affix of date or month.,Running  formate  Do    result is something like  3rd   But what if I want just affix like  rd .   This feature is requested because one can format that affix with  <sup>  tag. to display like 3<sup>rd</sup> insted of 3rd ,hiteshchavda,closed,1,2012-11-02 05:48:56,2013-01-11 05:16:30,,,,0,1
13759,moment/moment,491,Slovenian translation.,,sedovsek,closed,0,2012-11-02 07:15:45,2012-11-05 10:31:31,,,,1,1
13758,moment/moment,492,fix bug of get week number of year,Sometimes  codes below got error result:      javascript moment  .format  w        test cases from here: [http://en.wikipedia.org/wiki/ISO_week_date] http://en.wikipedia.org/wiki/ISO_week_date  ,aleafs,closed,1,2012-11-02 12:34:05,2012-11-02 12:46:19,,,,1,1
13757,moment/moment,493,fix bug to get week number of year, 492  Sometimes  codes below got error result:      javascript moment  .format  w        test cases from here: [http://en.wikipedia.org/wiki/ISO_week_date] http://en.wikipedia.org/wiki/ISO_week_date  ,aleafs,closed,4,2012-11-02 13:02:50,2012-11-03 08:35:11,,,,1,1
13756,moment/moment,494,How to keep a reference of the original object used to create a moment,Hello   This is something that we needed  and we monkey patched our way through. We re just wondering if moment has something close to this  or if you would be interested to accept this as a patch.      var m = moment  2012 11 08T04:00:00 08:00   m._originalInput //=>  2012 11 08T04:00:00 08:00       Let me know. ,vroy,closed,2,2012-11-02 17:11:26,2012-11-02 19:36:56,,,,0,1
13755,moment/moment,495,fix bug to get week number of year, 492    493  Sometimes  codes below got error result:      javascript moment  .format  w        test cases from here: [http://en.wikipedia.org/wiki/ISO_week_date] http://en.wikipedia.org/wiki/ISO_week_date  ,aleafs,closed,2,2012-11-03 08:34:37,2012-11-03 10:31:46,,,,1,1
13754,moment/moment,496,Pull requests against develop vs master,It seems to me that every single soul that wants to contribute to this project develops his patch on top of master  the common sense option  and then somebody tells them to rebase against develop  so they have to make a new pull request  because github cannot handle force push on the branch that is being pulled .  I think this is  to say the least  frustrating for the to become contributors. I don t know what are the advantages of this approach  but I m pretty sure keeping the contributors happy is also an important consideration. ,ichernev,closed,7,2012-11-03 10:43:02,2013-01-11 19:21:24,,,,0,1
13753,moment/moment,497,Avoid mutating the passed array on initialization,Dangerous practice in general; in my case  messed up the data keys  which were the orders  months  like  [2012  11]    only because I printed the month labels with  moment myKeyArray .format ...   ,ikr,closed,1,2012-11-04 15:24:21,2012-11-08 23:35:55,,,,1,1
13752,moment/moment,498,sod   breaks when daylight savings changes,If I m in the Pacific timezone and instantiate a new moment object  the wrapped date has the correct GMT offset:   today = moment     gives me:   Sun Nov 04 2012 23:33:58 GMT 0800  PST    which is perfect. If I try to find the  start of day  with this object   start_of_day = moment today .sod     leaves me with:   Sun Nov 04 2012 00:00:00 GMT 0700  PDT    which is absolutely dead wrong. ,ghost,closed,7,2012-11-05 07:48:24,2012-11-05 17:45:09,,,,0,1
13751,moment/moment,499,Feature/lang sl, 491 rebased  fixed jshint warning  merging. ,ichernev,closed,1,2012-11-05 10:27:51,2012-11-05 10:29:38,,,,1,1
13750,moment/moment,500,Feature/lang sl, 491  fixed jshint issues  merging  @sedovsek thank you for contributing  ,ichernev,closed,0,2012-11-05 10:30:59,2012-11-05 10:31:18,,,,1,1
13749,moment/moment,501,Week of year cleanup,This is to address  495.  There are a few different ways to define when the week of year should start. Right now   moment  .format  w    does not have a documented definition of when the week starts.  Here are a few definitions from around the web.    ISO 8601 week number    http://en.wikipedia.org/wiki/ISO_week_date  The first week of a year is the week that contains the first Thursday of the year. The weeks start on Mondays.  strftime token   V  php date format token  W  django date format token  W     First Sunday    The first week of a year is the week that contains the first Sunday of the year. The weeks start on Sundays.  strftime token   U     First Monday    The first week of a year is the week that contains the first Monday of the year. The weeks start on Mondays.  strftime token   W     Current Moment Method    The first week of a year is the week that contains the first Friday of the year. The weeks start on Sunday.  I definitely think we should change the current functionality to match one of the more common formats  so here are my suggestions.  First  we change  w ww wo  to the   First Sunday   method. This will only have the effect of changing the day of the year that the weeks start on  so this will change the results for 2/7 moments  all Sat and Sun moments . As this is a breaking change  we would have to release this in  2.0.0 .  Second  we add  W WW Wo  for ISO 8601 week dates.  Third  we add a bunch of tests for these formatting tokens and much clearer documentation on what rules we are using when we say  week of year .  Thoughts?  /cc @aleafs ,timrwood,closed,8,2012-11-05 18:10:25,2012-11-08 23:39:08,,,,0,1
13748,moment/moment,502,Fixed race condition in tests created by preparse/postformat,Sometimes  format YY  test breaks  because numbers get replaced by characters  which comes from the postformat test    it didn t clean up properly. Now it does clean up  so the issue should not arise again.  It is not a complete solution tough. If in the future there are more languages that require postformat  all tests that change the language should also  at the end set the language back to English. ,ichernev,closed,4,2012-11-06 22:43:51,2012-11-09 17:44:05,,,,1,1
13747,moment/moment,503,Weeks,See  501  Note: This is not ready to be merged in yet  just wanted to open it up for comments.  This PR will add  moment.fn.isoWeek  and  moment.fn.week  as getter/setter methods.   moment.fn.isoWeek  is the ISO week as defined at [1].  moment.fn.week  is a localized week numbering based on the rules at [2].  Each localization is able to specify which day of the week should be included in the first week of the year and which day of the week starts a new week.  It also adds  W WW Wo  tokens to the format which map to  isoWeek  and redefines the  w ww wo  tokens to use  moment.fn.week .  [1] http://en.wikipedia.org/wiki/ISO_week_date [2] http://www.pjh2.de/datetime/weeknumber/wnd.php?l=en ,timrwood,closed,6,2012-11-07 21:03:00,2012-11-26 18:22:51,,,,1,1
13746,moment/moment,504,Convenience methods for determining if a moment is in the past/future,Just a couple of simple wrappers around  diff    which let you determine if a moment is in the past or future of another moment  i.e. you can do this:      javascript var past = moment  ; // .. sleep var future = moment  ;  past.isPast future  // true future.isFuture past  // true       I ve seen the change to diff in https://github.com/timrwood/moment/pull/345/ which returns a  duration    so I know that this implementation will have to change slightly when that branch gets integrated. I m really happy to make those changes when you integrate that branch and if you want these new methods  :  ,petedmarsh,closed,3,2012-11-09 11:37:07,2012-11-09 17:34:51,,,,1,1
13745,moment/moment,505,Avoid mutating the passed array on initialization  resubmitting against dev branch ,Dangerous practice in general; in my case  messed up the data keys  which were the orders  months  like  [2012  11]    only because I printed the month labels with  moment myKeyArray .format ...   ,ikr,closed,1,2012-11-10 11:09:54,2012-11-16 09:47:27,,,,1,1
13744,moment/moment,506,Improper weekday usage in Chinese, Monday =      is okay  but   Next Monday  should be       not         which is too long and seldom used   Recommendation: Change the prefix      to     when using next  or previous day. ,tianshuo,closed,9,2012-11-12 05:59:51,2013-01-11 18:19:55,,,,0,1
13743,moment/moment,507,unix      value is rounded to the nearest second ,Documentation for the moment.unix   method states:      Note: This value is rounded to the nearest second  and does not include a milliseconds component.      It should actually read  value is floored  which is the correct algorithm for converting ms since epoch to sec since epoch. ,thesmart,closed,1,2012-11-12 07:47:38,2012-11-12 16:36:35,,,,0,1
13742,moment/moment,508,Parsing does not use language setting,moment  .lang  nl  ;  moment  .format  dddd D MMMM YYYY  ; //   >  maandag 15 maart 2010     ok moment  15 MAA 2010   //   > invalid MAArt not recognized moment  15 MAR 2010   //   > MARch  english  hower IS recognized; but should not be... ,cardalda,closed,6,2012-11-12 09:46:50,2013-01-11 18:58:44,,,,0,1
13741,moment/moment,509,subtract function turns PST time into PDT time,    moment.utc  .startOf  week  .startOf  day     Moment   _a: null   _d: Sun Nov 11 2012 16:00:00 GMT 0800  PST    _isUTC: true   _lang: false __proto__: Object  moment.utc  .startOf  week  .startOf  day  .subtract  days   14    Moment   _a: null   _d: Sun Oct 28 2012 17:00:00 GMT 0700  PDT    _isUTC: true   _lang: false   __proto__: Object      I would expect the substract function to just subtract 14 days but keep the PST time instead of getting a PDT time. Now the two times are possibly the same  it just seems inconsistent. ,Veejay,closed,1,2012-11-12 23:19:04,2012-11-12 23:20:20,,,,0,1
13740,moment/moment,510,ISO Parsing Bug,This date is being parsed incorrectly and returns day of month as 14:       1978 03 15T00:00:00.000Z   Since this format is used by some major REST services on the web  I d like to request support for it.  EDIT:  Maybe I m just not understanding ISO dates well enough  is there any reason this should return date of month as 14?  Thanks ,whitneyland,closed,2,2012-11-14 17:21:31,2012-11-27 20:15:38,,,,0,1
13739,moment/moment,511,work out time left,What i am trying to do is do a countdown to work out the time left from now.  example i have          var countDownTill =  2012 11 19 00:00:00  0000 ;     document.write moment countDownTill .diff moment     months       months<br>  ;     document.write moment countDownTill .diff moment     weeks       weeks<br>  ;     document.write moment countDownTill .diff moment     days       days<br>  ;      which will output           0 months     1 weeks     4 days      but its not working out overall its doing it individuals for each value  days weeks months   so if i up the date by say 12 months like below.          var countDownTill =  2013 11 19 00:00:00  0000 ;      document.write moment countDownTill .diff moment     months       months<br>  ;         document.write moment countDownTill .diff moment     weeks       weeks<br>  ;      document.write moment countDownTill .diff moment     days       days<br>  ;      it outputs.          12 months     53 weeks     369 days      where as i am trying to get it to output          12 months     2 weeks     5 days  example here http://jsfiddle.net/fDmWH/3/      I posted on stack overflow and go some help but their still seems to be issues with weeks here is the solution we came to.      // Start date var countDownTill = new Date  2013 11 19 00:00:00  0000  ; var now = new Date  ;  document.write countDownTill    <br />  ;  // Get the months var months = moment countDownTill .diff moment     months  ; console.log months ;  // Add months to the date now.setMonth now.getMonth     months ; document.write now    <br />  ;  // Get the weeks var weeks = moment countDownTill .diff now   weeks  ; // Seems like moment is doing something wrong here... it should be 0 weeks... // 15 Nov to 19 Nov is 0 weeks to me at least... console.log weeks ;  // Add the weeks to the date now.setDate now.getDate      7   weeks  ; document.write now    <br />  ;  var days = moment countDownTill .diff now   days  ;  document.write months     months   ; document.write weeks     weeks   ; document.write days     days   ;      http://jsfiddle.net/fDmWH/6/ ,seabannan,closed,4,2012-11-15 12:13:24,2012-11-27 20:07:38,,,,0,1
13738,moment/moment,512,Fixed flaky test,There was one place left where 2 separately created dates are compared for equality. I checked all moment constructors without arguments and all Date constructors without arguments. They all seem safe now. Hope this error doesn t appear again. ,ichernev,closed,0,2012-11-16 09:59:59,2012-11-19 17:15:55,,,,1,1
13737,moment/moment,513,Moment.js not compatible with ContentSecurityPolicy,Content Security Policy was just [advanced to candidate recommendation] http://updates.html5rocks.com/2012/11/Content Security Policy 1 0 is officially awesome  status by w3c and it adds some important security features to how js is executed on a web page. By default eval   and new Function   are not allowed on a web page by the security policy. However  moment.js uses new Function in makeFormatFunction  which obviously prevents using the new no evals allowed security measures. It d be great if moment was also compatible with CSP without the  unsafe eval . I know that the eval d function creation is a performance optimization  but some kind of alternative for this would be nice. ,Mumakil,closed,2,2012-11-16 11:59:48,2012-11-19 09:16:22,,,,0,1
13736,moment/moment,514,Feature/is before is after,As discussed in https://github.com/timrwood/moment/pull/504 I have implemented the  isBefore  and  isAfter  methods. ,petedmarsh,closed,5,2012-11-16 18:25:10,2012-11-27 17:40:07,,,,1,1
13735,moment/moment,515,Can moment parse this format ?,Hi guys   I m retrieving this date from a JSON API :  Mon Jun 25 16:33:12  0000 2012   Can moment convert it ? I m not sure by reading the docs  since I don t see mention of short versions of months and days names.  I would use something like :  moment  Mon Jun 25 16:33:12  0000 2012    dd mm DD HH:mm:ss  0000 YYYY   . ,DjebbZ,closed,2,2012-11-19 17:14:30,2012-11-19 17:56:55,,,,0,1
13734,moment/moment,516,Token for ISO 8601 format?,Is there a token for formatting date to ISO 8601? Like in ExtJS:      javascript Ext.Date.format new Date     c  ;     ,milep,closed,2,2012-11-21 08:47:19,2012-11-21 17:18:48,,,,0,1
13733,moment/moment,517,Suggestions,1. Why does not support ISODate? MongoDB use is ISODate  sometimes have to manually conversion 2. Can you consider support plan task? ,3kqing,closed,2,2012-11-21 08:58:58,2012-11-27 20:35:07,,,,0,1
13732,moment/moment,518,less robotic way to write   une ann e  >  un an  ,,baptistedeleplace,closed,5,2012-11-23 00:26:22,2012-11-26 17:36:38,,,,1,1
13731,moment/moment,519,Failed tests in web page,Date.prototype.toString = Fri Nov 23 2012 12:46:03 GMT 0200  Montevideo Daylight Time  Date.prototype.toLocaleString = Fri Nov 23 2012 12:46:03 GMT 0200  Montevideo Daylight Time  Date.prototype.getTimezoneOffset = 120 navigator.userAgent = Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.11  KHTML  like Gecko  Chrome/23.0.1271.64 Safari/537.11  115.1 Calling moment.utc   should default to the current time  1353681960073 == 1353681960072  AssertionError: Calling moment.utc   should default to the current time     at Object.equal  http://momentjs.com/js/tests.js:1531:39      at exports.utc.creating with utc  http://momentjs.com/js/tests.js:3861:14      at Object.exports.runTest  http://momentjs.com/js/tests.js:1707:9      at http://momentjs.com/js/tests.js:1753:25     at http://momentjs.com/js/tests.js:1011:13     at iterate  http://momentjs.com/js/tests.js:621:13      at http://momentjs.com/js/tests.js:632:25     at http://momentjs.com/js/tests.js:1013:17     at http://momentjs.com/js/tests.js:1594:17 ,machador,closed,1,2012-11-23 14:49:57,2012-11-27 20:07:17,,Unit Test Failed,,,0,1
13730,moment/moment,520,Improved polish translations for  last week ,Ok  I finally managed to put this together  with help from @m kas and @evoL. Original pull request  429.  @timrwood  the changes is 4 patches  because I wanted to preserve the original authors. Let me know if you want me to merge all the changes together. ,ichernev,closed,1,2012-11-25 22:41:28,2012-11-26 17:27:53,,,,1,1
13729,moment/moment,521,Fix to issue  441,Central Atlas Tamazi t in both latin and Tifina . Added Moroccan Arabic and Standard Arabic.  This will solve  441 ,vimdude,closed,2,2012-11-25 22:47:09,2012-11-26 13:54:41,,,,1,1
13728,moment/moment,522,remove trailing comma,This was making the Clojure compiler complain ,djmitche,closed,1,2012-11-25 23:11:47,2012-11-26 17:20:25,,,,1,1
13727,moment/moment,523,french : xx ann e s   > xx an s ,see https://github.com/timrwood/moment/pull/518 ,baptistedeleplace,closed,3,2012-11-25 23:51:28,2012-11-26 17:35:00,,,,1,1
13726,moment/moment,524,add a dojo build profile,This:   Adds a Dojo build profile   Uses define   anonymously  so that Dojo assigns the module ID at build time  the previous form tickled http://bugs.dojotoolkit.org/ticket/16387   Note that this only includes  moment.js .  The languages are dynamically included using a relative path   lang/whatever    and I don t see an easy way to make that work. ,djmitche,closed,8,2012-11-26 00:43:06,2013-01-02 17:16:18,,,,1,1
13725,moment/moment,525,Parse minute contains letter return true in isValid  ,    javascript moment  30 12 2012 1x:1y:00    DD MM YYYY HH:mm:SS  .isValid   //==> true      Is it an expected behavior? ,jackysee,closed,4,2012-11-26 09:36:12,2012-11-27 20:15:19,,,,0,1
13724,moment/moment,526,Validation of a date fails on  01/01/1970  in Firefox.,When attempting to run following command in Firefox:      moment birthDate   DD/MM/YYYY  .isValid        It returns false  all other date report correctly  true   http://jsfiddle.net/UZCh8/ ,nirth,closed,12,2012-11-26 14:06:09,2013-02-27 19:28:12,,,,0,1
13723,moment/moment,527,Fix to issue  521,There is an issue with grunt throwing  [L1:C0] Unsafe character. . This issue is fixed on 0.4 version but not released yet. ,vimdude,closed,2,2012-11-26 18:18:18,2012-11-27 19:12:47,,,,1,1
13722,moment/moment,528,utc  format  format  behavior,Hello. Here is a behavior I can t understand :  // 3 same dates   console.log  date 1 :  j   moment.utc [2012  10  27  8  35]   ;  console.log  date 2 :  j   moment.utc  2012 11 27T08:35   ;  console.log  date 3 :  j   moment.utc  27 11 2012 08:35    DD MM YYYY HH:mm   ;  // output via console log  node.js test  : date 1 :   _d : 2012 11 27T08:35:00.000Z   _isUTC :true  _a :[2012 10 27 8 35 0 0 true]  _lang :false  date 2 :   _d : 2012 11 27T08:35:00.000Z   _isUTC :true  _a :[2012 10 27 8 35 0 0 true]  _lang :false  date 3 :   _d : 2012 11 27T07:35:00.000Z   _isUTC :true  _a :[2012 10 27 8 35 0 0 null]  _lang :false   I expect date 3 to be exactly the same as date 1 and date 2 as stated by the documentation  UTC section . ,MrGreenRubato,closed,1,2012-11-27 06:56:09,2012-12-17 18:59:30,,Bug,,,0,1
13721,moment/moment,529,Get week ranges for a given month?,I needed a way to get the week ranges  start/end day  for a given month. I ended up with this hacky solution:      js function weeks  month        month = moment month   YYYY MM DD  ;      var first = month.day   == 0 ? 6 : month.day   1;     var day = 7 first;      var last = month.daysInMonth  ;     var count =  last day /7;      var weeks = [];     weeks.push [1  day] ;     for  var i=0; i < count; i              weeks.push [ day 1    Math.min day =7  last  ] ;            return weeks;        http://jsfiddle.net/simo/xPcEm/ Is there a better  cleaner  way to accomplish this? Thanks  ,simov,closed,16,2012-11-27 15:59:57,2012-11-27 20:14:31,,,,0,1
13720,moment/moment,530,Set Moment to a specific timezone?,Hi   Is there a way to set a Moment to a specific timezone?  For example  currently I m creating a Moment like so:      var sgx_open =  moment new Date   .hours 11 .minutes 0 .seconds 0 .milliseconds 0 ;      This creates a Moment that is set to 11:00 AM today  in my local timezone  UTC   11 . However  I would like this to be say  Singapore s timezone  UTC  8 .  I was looking for something like  sgx_open.zone   9     but I couldn t seem to find a setter like this?  Cheers  Victor ,victorhooi,closed,1,2012-11-29 03:55:39,2013-01-14 21:57:05,,Timezones,,,0,1
13719,moment/moment,531,Calling moment.utc   should default to the current time  1354182271896 == 1354182271895 ,I found this error while running the tests.      Date.prototype.toString = Thu Nov 29 2012 15:14:34 GMT 0530  Sri Lanka Standard Time  Date.prototype.toLocaleString = Thu Nov 29 2012 15:14:34 GMT 0530  Sri Lanka Standard Time  Date.prototype.getTimezoneOffset =  330 navigator.userAgent = Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.11  KHTML  like Gecko  Chrome/23.0.1271.64 Safari/537.11          javascript 115.1 Calling moment.utc   should default to the current time  1354182271896 == 1354182271895  AssertionError: Calling moment.utc   should default to the current time     at Object.equal  http://momentjs.com/js/tests.js:1531:39      at exports.utc.creating with utc  http://momentjs.com/js/tests.js:3861:14      at Object.exports.runTest  http://momentjs.com/js/tests.js:1707:9      at http://momentjs.com/js/tests.js:1753:25     at http://momentjs.com/js/tests.js:1011:13     at iterate  http://momentjs.com/js/tests.js:621:13      at http://momentjs.com/js/tests.js:632:25     at http://momentjs.com/js/tests.js:1013:17     at http://momentjs.com/js/tests.js:1594:17 115.2 the day should be correct for utc array 115.3 the hours should be correct for utc array 115.4 the day should be correct for utc parsing format 115.5 the hours should be correct for utc parsing format 115.6 the day should be correct for utc parsing iso 115.7 the hours should be correct for utc parsing iso      ,Ranhiru,closed,1,2012-11-29 09:49:35,2012-11-30 18:44:54,,,,0,1
13718,moment/moment,532,What is wrong with this format?,Hi       moment  Nov 29th 2012    MMM Do YYYY  .format  D/MM/YYYY  ;      gives  01/11/2012  but it should be  29/11/2012 .  To parse  Nov 29th 2012  momentjs needs  MMM DDo YYYY . Is it normal?  DDo  is not present in the documentation... ,cbou,closed,1,2012-11-29 22:32:29,2012-11-29 22:37:16,,,,0,1
13717,moment/moment,533,Documentation bug:  z  token,The documentation for ISO 8601 date formats references the  z  token  which is no longer supported. ,jpriebe,closed,3,2012-11-30 14:14:18,2013-01-08 19:42:26,,,,0,1
13716,moment/moment,534,Skip global variable assignment if AMD found,Generally  users of AMD frameworks are against having any pollution of the global scope whatsoever.  Since moment already has full AMD support  users of AMD frameworks can  and should  reference moment using a declaration in a  define  block  and not as a global.  Therefore  If AMD is found  the global variable assignment is redundant and should be skipped.  Old code:      javascript     / global ender:false  /     if  typeof ender ===  undefined             // here   this  means  window  in the browser  or  global  on the server         // add  moment  as a global object via a string identifier          // for Closure Compiler  advanced  mode         this[ moment ] = moment;           / global define:false  /     if  typeof define ===  function     define.amd            define  moment   []  function                  return moment;           ;            New code:      javascript     var useGlobal = true;     / global define:false  /     if  typeof define ===  function     define.amd            useGlobal = false;         define  moment   []  function                  return moment;           ;           / global ender:false  /     if  useGlobal    typeof ender ===  undefined             // here   this  means  window  in the browser  or  global  on the server         // add  moment  as a global object via a string identifier          // for Closure Compiler  advanced  mode         this[ moment ] = moment;           ,geekdave,closed,3,2012-11-30 18:19:43,2013-01-11 20:07:28,,,,0,1
13715,moment/moment,535,Found a unit test failure while showing off Moment.js to a colleague,Date.prototype.toString = Fri Nov 30 2012 10:26:38 GMT 0800  PST  Date.prototype.toLocaleString = Fri Nov 30 2012 10:26:38 GMT 0800  PST  Date.prototype.getTimezoneOffset = 480 navigator.userAgent = Mozilla/5.0  Macintosh; Intel Mac OS X 10_8_2  AppleWebKit/537.11  KHTML  like Gecko  Chrome/23.0.1271.95 Safari/537.11  It doesn t seem to be repeatable  and I m afraid I don t see what the error is from the information above. My apologies for an incomplete bug report  ,drd,closed,1,2012-11-30 18:29:27,2012-11-30 18:44:01,,,,0,1
13714,moment/moment,536,Iso year format option,I couldn t find an Iso year format option in the documentation which makes the week option quirky for some dates:      > moment [2012 11 31] .format  w YYYY   >  1 2012        The equivalent in postgresql is:      > SELECT EXTRACT WEEK FROM DATE  2012 12 31             EXTRACT ISOYEAR FROM DATE  2012 12 31  ; >  1 2013       As you can see the year is wrong. So the week is the right week but I couldn t find a way to get the matching year. ,toxaq,closed,2,2012-12-05 08:03:10,2013-01-11 19:08:33,,,,0,1
13713,moment/moment,537,moment  .fromNow    a few seconds ago ,moment  .fromNow   is returning  a few seconds ago . Why not  just now  ? ,renansantos,closed,17,2012-12-06 14:06:43,2013-07-14 06:51:37,,New Feature,,,0,1
13712,moment/moment,538,.from   and .fromNow   not humanized,Is there a way to use .fromNow   to output a different format  like  h:mm:ss  ? ,renansantos,closed,1,2012-12-06 14:10:07,2013-01-14 19:32:59,,,,0,1
13711,moment/moment,539,Quotes in month name,Hi there   I am currently working on a breton translation. Breton is a funny language with single quotes all around the place :   For instance February is C hwevrer. Unfortunately that leads too some tests failing. I suspect it has something to do with the code around lines 396 of the moment.js file.  Do you have any idea how I can fix that and move forward?  Thanks  Jean Baptiste ,jbleduigou,closed,2,2012-12-06 15:34:17,2012-12-06 16:20:15,,,,0,1
13710,moment/moment,540,Adding support for format rendering of fiscal quarters  with tests .,Adds tokens  Q  and  QQ  to format code for outputting fiscal quarter  e.g.  Q3  . See the test cases in  test/moment/format . This was useful for me in a recent project.  Also note that I had to change the use of UglifyJS in the  mincomment  grunt task  which was throwing an error with the  latest   2.x  version of UglifyJS as specified in package.json. I considered changing the dependency to 1.x which worked  but instead just changed it to the new API. You don t have to accept that commit  bc170a5 . ,AndersDJohnson,closed,8,2012-12-06 19:49:36,2013-01-14 19:20:54,,,,1,1
13709,moment/moment,541,1 failed Issue while test,Date.prototype.toString = Fri Dec 07 2012 14:23:51 GMT 0200  T rkiye Standart Saati  Date.prototype.toLocaleString = Fri Dec 07 2012 14:23:51 GMT 0200  T rkiye Standart Saati  Date.prototype.getTimezoneOffset =  120 navigator.userAgent = Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.11  KHTML  like Gecko  Chrome/23.0.1271.95 Safari/537.11  115.1 Calling moment.utc   should default to the current time  1354883028911 == 1354883028910  AssertionError: Calling moment.utc   should default to the current time     at Object.equal  http://momentjs.com/js/tests.js:1531:39      at exports.utc.creating with utc  http://momentjs.com/js/tests.js:3861:14      at Object.exports.runTest  http://momentjs.com/js/tests.js:1707:9      at http://momentjs.com/js/tests.js:1753:25     at http://momentjs.com/js/tests.js:1011:13     at iterate  http://momentjs.com/js/tests.js:621:13      at http://momentjs.com/js/tests.js:632:25     at http://momentjs.com/js/tests.js:1013:17     at http://momentjs.com/js/tests.js:1594:17 115.2 the day should be correct for utc array 115.3 the hours should be correct for utc array 115.4 the day should be correct for utc parsing format 115.5 the hours should be correct for utc parsing format 115.6 the day should be correct for utc parsing iso 115.7 the hours should be correct for utc parsing iso ,ramesaliyev,closed,1,2012-12-07 12:27:27,2013-01-11 19:09:04,,Unit Test Failed,,,0,1
13708,moment/moment,542,moment.duration 1   years  .asDays   === 360,See https://twitter.com/danmartens/status/277083063924686848 ,timrwood,closed,0,2012-12-08 03:07:29,2013-04-25 06:12:35,,Bug,,,0,1
13707,moment/moment,543,Add Thai language support,This pull request adds Thai language locale as well as related test. In Thailand  we actually use this [weird 6 hour clock] http://en.wikipedia.org/wiki/Six hour_clock  system for referring time but there doesn t seems to be an easy way to do this  so the second  most common 24 hour clock is used for  LT  instead.  We don t use 12 hour clock in Thailand . ,sirn,closed,3,2012-12-09 20:36:51,2012-12-10 23:11:22,,,,1,1
13706,moment/moment,544,Typo in docs,From the  Manipulate  >  Add  section in http://momentjs.com/docs/:      js moment.duration   days   1  ;      Should be:      js moment.duration   days  : 1  ;     ,ejain,closed,1,2012-12-09 21:04:59,2012-12-12 18:36:12,,,,0,1
13705,moment/moment,545,Error while parcing,I do the following:  moment  2012 12 13T01:13:11.000Z   [ DD/MM/YYYY HH:mm:ss    YYYY MM DD HH:mm:ss ] ; and when day is equal to minutes   13 in this case I have this result:  Date  Mon Aug 12 0013 13:13:11 GMT 0300  BRT   ,ki-zz-rra,closed,3,2012-12-10 17:05:44,2013-01-11 19:08:54,,,,0,1
13704,moment/moment,546,Change from round ...  to Math.floor ...  when calculating relative number of months,I noticed that:      moment  2012 02 01T00:00:00  .from  2012 12 11T11:29:59   ==  10 months ago  //but... moment  2012 02 01T00:00:00  .from  2012 12 11T11:30:00   ==  11 months ago       I expected  10 months ago  in both cases  this is the behaviour of  time_ago_in_words  in Rails . I ve made a small commit which  changes this behaviour. I haven t had a chance to run the full suit of tests as I m not on my development machine  but I thought I should open this pull request for some feedback as to weather this change in behaviour is appropriate for Moment. If so I ll go through and fix anything this change breaks  ,petedmarsh,closed,4,2012-12-11 18:19:51,2012-12-12 17:25:01,,,,1,1
13703,moment/moment,547,Proper singular text labels,,thomasclausen,closed,3,2012-12-11 22:07:01,2012-12-19 17:15:45,,,,1,1
13702,moment/moment,548,Add epoch timestamp token parsing and formatting,Add  ET  format token to parse and print Epoch timestamp in seconds. ,dax,closed,4,2012-12-14 21:19:50,2012-12-21 14:15:20,,,,1,1
13701,moment/moment,549,Fixed typos,,pborreli,closed,1,2012-12-15 23:49:33,2012-12-17 17:40:15,,,,1,1
13700,moment/moment,550,Fix issues with danish localization,Denmark uses 24 hour time  not am/pm.  M nede   month  was misspelled  should be  M ned   see http://da.wikipedia.org/wiki/M C3 A5ned  ,st33n,closed,2,2012-12-18 11:26:53,2012-12-19 17:15:29,,,,1,1
13699,moment/moment,551,Please include language settings for Persian,The code is here: https://gist.github.com/4323667  Thanks  Omid ,omidkrad,closed,2,2012-12-18 21:38:30,2013-01-11 20:00:50,,,,0,1
13698,moment/moment,552,startOf   and endOf   are timezone aware and cannot be adjusted,I use Moment both on the server side and on the client side. Both need to determine a day interval by doing  moment date .startOf  day    and  moment date .endOf  day     where  date  is a unix timestamp . However  if the client and the server are not in the same timezone  this leads to different dates.  I wouldn t mind this difference it if was possible to specify a timezone on either the client or the server side  but it is not possible.  local    and  UTC    are too limited.  Is there an alternative for dealing with timezones? I have checked [moment timezone] https://github.com/timrwood/moment timezone  but as far as I understand  it only deals with formatting  not manipulation... ,fzaninotto,closed,4,2012-12-18 22:03:37,2013-07-14 06:54:22,,Timezones,,,0,1
13697,moment/moment,553,added localized date formats with the short form for months,this allows to format localized dates using the short format for the months. examples:   en: Dec 18  2012   de: 18. Dez. 2012  we need this shorter form. the existing localized format  LL  uses the long format of the month which needs to much space. we prefer to have the shorter form where the months are abbreviated.  Sorry that I directly made the pull request for the developer branch. I created a feature branch for the changes  but finished the feature with git flow before I pushed to my forked repo. I m new to git flow. I ll try to do that the right way the next time.  Cheers   Andreas  ,anfuerer,closed,5,2012-12-19 15:18:19,2013-01-17 01:40:04,,,,1,1
13696,moment/moment,554,Add epoch timestamp token parsing and formatting,Add  ET  format token to parse and print Epoch timestamp in seconds.  Rebased on develop branch. ,dax,closed,3,2012-12-21 14:14:39,2013-01-23 18:58:44,,,,1,1
13695,moment/moment,555,Value of 0 with humanize function returning  a few seconds ,Test: moment.duration 0   minutes  .humanize  ; Result:  a few seconds    a few seconds  does not properly represent a humanized version of the value 0  is there a default value that can be passed into moment for the return if 0 is attempted to be humanized? Even moment.duration 0   seconds  .humanize  ; returns  a few seconds .   Expected result would be  never  or something to that similar effect. It seems redundant to have to check if your value is 0 prior to humanizing it. ,chuckpearce,closed,1,2012-12-22 15:41:20,2012-12-26 18:10:52,,,,0,1
13694,moment/moment,556,shared function in global namespaces causing incompatibilities with other libs,Date parsing fails  dates consistently return Dec 31 instead of actual date  when used in conjunction with certain other libs that put shared functions in the global namespace. e.g. http://www.dynarch.com/projects/calendar/  used in web2py   See: https://groups.google.com/d/msg/web2py/G5u_KsiiMaQ/P5o96 YUw1oJ http://code.google.com/p/web2py/issues/detail?id=1243 ,ykessler,closed,2,2012-12-23 21:55:58,2012-12-24 14:38:12,,,,0,1
13693,moment/moment,557,Broken missing languages,The stable branch breaks when switching to a missing locale. I couldn t test this properly and I see that you did a major rewrite on master.  Basically the problem is:          function loadLang key  values            var i  m              parse = [];          if   values    hasModule                values = require  ./lang/    key ;                    for  i = 0; i < langConfigProperties.length; i                  // If a language definition does not provide a value  inherit             // from English             values[langConfigProperties[i]] = values[langConfigProperties[i]]                  languages.en[langConfigProperties[i]];                This piece of code is assuming that values will always exist. When you do  moment.lang  missing    values is undefined and this code breaks.  The fix is easy  just add a little bit of defensive coding before the  for  loop  values = values      ; .  I couldn t test it because in node it tries to load a missing module  ./lang/missing  and I didn t want to add a stub library. ,masylum,closed,3,2012-12-24 16:39:14,2013-07-14 06:55:51,,Bug,,,0,1
13692,moment/moment,558,Add start of week,Hi    It would be nice to have also a StartOf  week   and maybe a differetn tag for weeks starting at sunday or monday.  Bye.  PS: This is the best js tool I have found in a lot of time . ,jorgeecardona,closed,2,2012-12-26 22:04:28,2013-01-23 19:01:36,,,,0,1
13691,moment/moment,559,Getting Next/Previous Specific Month  Next/Prev Quarter  Next/Prev Specific Quarter,I am writing some scripts to figure out the  next  or  previous  occurrence of a specific month  quarter  etc.  For example  I wrote a function for next occurrence of month           /           @var date is a JS date or moment         @var month is the month in the 0 11 format       /     var getNextMonthOccurrence: function date  month           var m = moment date ;          var this_year = new Date m.year    month  1 ;         var next_year = new Date m.year     1  month  1 ;          return this_year > m ? this_year : next_year;            It would be great if there were also function for:   next xth quarter  ex: Now it s Jan 1  1st Quarter . I would like to ask next 3rd quarter. It would return July 1.   next quarter  ex: Now it s Jan 1  1st Quarter . I would like to ask next quarter. It would return April 1  start of 2nd Quarter  ,nycitt,closed,3,2012-12-26 23:22:38,2013-01-14 18:50:10,,,,0,1
13690,moment/moment,560,Date diff bug,Assign two dates // December 31 2012 var date1 = moment new Date 2012  11  31  0  0  0  ; // January 1 2010 var date2 = moment new Date 2010  0  1  0  0  0  ;  // Calculate the difference between the dates in years  this produces 3 but it should not  should be 2.99999  date2.diff date1   years   true   // The correct answer is 2 years  11 months  4 weeks  2 days or 1095 days  Assign two dates // January 1 2013 var date3 = moment new Date 2013  0  1  0  0  0  ; // January 1 2010 var date4 = moment new Date 2010  0  1  0  0  0  ; date3.diff date4   years   true   is correct equals 3  Both of these give the same result but they should not  I used the windows calculator to verify. Only the second example should produce 3 not the first. ,markoj21,closed,3,2012-12-27 21:37:01,2013-01-11 20:01:12,,Bug,,,0,1
13689,moment/moment,561,Bad parse behavior when giving moment.utc multiple patterns, moment.utc STRING  [PATTERNS ...]   is not parsing the same way as  moment STRING  [PATTERNS ...]  .  The utc version appears to fail when using the multiple pattern parsing method. See this fiddle http://jsfiddle.net/sYeTW/2/. The only difference between those strings in the fiddle should be the difference caused by the timezone  but when using multiple patterns the utc parser fails to parse everything besides the month. ,mmcguinn,closed,2,2013-01-01 18:38:59,2013-01-14 18:45:44,,,,0,1
13688,moment/moment,562,Create vi.js,,alexbosworth,closed,2,2013-01-03 03:49:48,2013-01-11 20:53:02,,,,1,1
13687,moment/moment,563,Add Greek language support  WIP ,Hi. I know this doesn t adhere to the contribution guidelines  but I don t know if I ll ever manage to finish this... so I thought I d make a pull request in case someone else wants to finish the Greek language support.  Issues so far: 1. The tests don t pass of course 2. Greek language is harder to translate because the months are written a little differently in their possessive form ,XhmikosR,closed,3,2013-01-04 08:22:51,2013-02-19 17:58:11,,,,1,1
13686,moment/moment,564,Add: Date Manipulation Function SetDay xx ,It would be nice if there is an Possibility to add a Date Manipulationfunction for Days like for Month and Year. The Function Name Day xx   Day of the Week  is very Surprising when you try to use it like the  Month  Function. ,squadwuschel,closed,1,2013-01-05 15:18:29,2013-01-14 18:44:55,,,,0,1
13685,moment/moment,565,toString now uses a fixed format,This commit is the product of discussions in  475.   toString  ==  format  ddd MMM DD YYYY HH:mm:ss [GMT]ZZ     so that    works properly on utc and non utc moments   its uniform across browsers ,ichernev,closed,0,2013-01-08 05:34:24,2013-01-08 05:34:38,,,,1,1
13684,moment/moment,566,toString now returns a fixed format that looks like unix data,This commit is the product of discussions in  475.   toString  ==  format  ddd MMM DD YYYY HH:mm:ss [GMT]ZZ     so that    works properly on utc and non utc moments   its uniform across browsers ,ichernev,closed,1,2013-01-08 05:35:27,2013-01-08 23:44:19,,,,1,1
13683,moment/moment,567,adding a start/endOf week support,adding weeks support to startOf/endOf for convenience and consistency with startOf/endOf  month    fixes issue raised here: https://github.com/timrwood/moment/issues/558 ,stuartleigh,closed,4,2013-01-08 10:31:07,2013-01-23 18:28:44,,,,1,1
13682,moment/moment,568,moment  31 11 2011    DD MM YYYY  .add  years   1 .format  L   =  12/01/2012  ?,moment  31 11 2011    DD MM YYYY  .add  years   1 .format  L  ;  12/01/2012   In my  Human  life that is incorrent. I m adding 1 year  not 365 days. ,bespired,closed,4,2013-01-08 11:52:07,2013-01-09 18:01:50,,,,0,1
13681,moment/moment,569,moment  10DEC12    DDMMMYY   = Dec 10 2000,moment  10DEC12    DDMMMYY   = Dec 10 2000  Though  moment  10 DEC 12    DD MMM YY   = Dec 10 2012 moment  101212    DDMMYY   = Dec 10 2012 ,mikhailmelnik,closed,1,2013-01-08 21:58:36,2013-01-10 19:40:10,,,,0,1
13680,moment/moment,570,isValid for parts of the moment,I noticed that internally  Moment knows which parts of the parsed date were valid and thought it would be nice to have isValid   support the same kind of parameters that add   support. If this were the case  if I got moment ... .isValid   == false  I could then ask which part s  were invalid and inform the user. For example: moment ... .isValid  M  . This looks like it might be a relatively small addition to implement. ,jpa00,closed,7,2013-01-10 09:28:05,2013-07-14 07:16:31,,New Feature,,,0,1
13679,moment/moment,571,Fix month and year diffs,This is a potential solution to the buggy month/year diffs. However  when working on this I ran into some tricky problems  so I want to outline them here for posterity.  There are a few different ways to calculate the difference in years. The first way is to compare the percentages through the year.      javascript startPercent = 45 / 365; // 0.1232876712328767 endPercent = 57 / 365; // 0.15616438356164383 diffPercent = endPercent   startPercent; // 0.03287671232876713      However  this has unexpected results when crossing leap years due to the extra day. 45 days into the year is a slightly smaller percentage on years with 366 days than years with 365 days.      javascript startPercent = 45 / 365; // 0.1232876712328767 endPercent = 45 / 366; // 0.12295081967213115 diffPercent = endPercent   startPercent; //  0.0003368515607455602      The solution I am proposing is that we use the percentages through the months divided by 12.  We calculate the percentage through the year with month accuracy  0/12  1/12  2/12 ... 11/12 .  We then calculate the percentages through the start and end months with millisecond accuracy. For example   189798626 /  31    24    60    60    1000  .  Then  the combination of those two diffs results in a slightly more expected result.  An added bonus to this methodology is that we can use the same calculation for difference in months. Month diff = year diff    12. ,timrwood,closed,6,2013-01-10 18:26:33,2013-01-16 18:43:13,,,,1,1
13678,moment/moment,572,Removing eod/sod and humanizeDuration,These are three methods that were replaced by better solutions.  For  moment.humanizeDuration   you should use  moment.duration  .humanize .  For  moment  .eod    and  moment  .sod    you should use  moment  .endOf  day    and  moment.startOf  day   . ,timrwood,closed,5,2013-01-10 19:24:30,2013-02-05 18:57:16,,Deprecate,,,1,1
13677,moment/moment,573,Days of this week reported as last week,Hello    thanks for your great work    I would like to point out the following:   Today is Friday. And  for some reason  entries in my blog  where I use MomentJs  of course  written this Wednesday  are reported as  Last Wednesday at xx:yy . I m using this in Russian  and here if we say  Last Wednesday   that would mean on Wednesday January the 2nd  not the 9th.   So  it would be nice to have this displayed as  This wednesday  or just  On wednesday .   Thanks    http://jsfiddle.net/Oire/Z9FvA/ ,Menelion,closed,5,2013-01-11 16:40:01,2013-03-19 05:09:59,,,,0,1
13676,moment/moment,574,Adding ability to set the parse language,This is to support  508 so that you can set a parsing language for in input string   format.  This way  you don t have to change the global language to parse a moment into another language. Without a language key  it defaults to the current behavior using the global language.      javascript moment  2012 July    YYYY MMM    en  ; moment  2012 juillet    YYYY MMM    fr  ;     ,timrwood,closed,1,2013-01-11 18:58:09,2013-01-15 19:48:06,,,,1,1
13675,moment/moment,575,Change to written instead of spoken swedish.,,tregusti,closed,4,2013-01-13 12:53:14,2013-01-23 18:58:12,,,,1,1
13674,moment/moment,576,validation question,Hello and thanks for your work. I would like to ask you something about date validation. You state in the documentation that   The parser ignores non alphanumeric characters  so both moment  12 25 1995    MM DD YYYY  and moment  12 25 1995    MM DD YYYY  will return the same thing.  I would like to use moment.js in a huge project that i m working on. My problem is that i cannot use a simple function like isValid in order to validate any date because you ignore non alphanumeric characters but this is very important to me. Are there any solutions without having to write my own validations? Thanks. ps: moment  111 12 2011    YYYY MM DD  .isValid   why is this valid?  moment.fn.isValid   was added to check if the input for a moment is actually valid input.  ,tasoss,closed,3,2013-01-14 09:53:11,2013-01-14 18:05:47,,,,0,1
13673,moment/moment,577,Changing lang.ordinal to return number   ordinal instead of just the ordinal,See https://github.com/timrwood/moment/issues/484 issuecomment 9923454    Note   the following comment was copied here for simplicity.  With the new internals of the languages  all of the properties of a language config get added as  lang._property  if they are not a function  and  lang.property  if they are a function.   [Line 119] https://github.com/timrwood/moment/blob/294685a55a971e3f27291a3659f2708e9a210204/moment.js L199       javascript function Language config        var prop  i;     for  i in config            prop = config[i];         if  typeof prop ===  function                 this[i] = prop;           else               this[ _    i] = prop;                        Then  the default method and property on the  Language.prototype  could be something like this.      javascript Language.prototype.ordinal = function  number        return this._ordinal.replace   d   number ;  ; Language.prototype._ordinal =   d ;      Then  languages like Bulgarian  Catalan  Chuvash  and many others can just set a string as the ordinal property which would then overwrite  Language.prototype._ordinal   but would still use  Language.prototype.ordinal .      javascript moment.lang  bg        ordinal :   d.    ; moment.lang  ca        ordinal :   d     ; moment.lang  cv        ordinal :   d        ;      Then  no other internals would need to change except for [ordinalizeToken] https://github.com/timrwood/moment/blob/294685a55a971e3f27291a3659f2708e9a210204/moment.js L173  which would actually be simpler.      javascript // before function ordinalizeToken func        return function  a            var b = func.call this  a ;         return b   this.lang  .ordinal b ;      ;   // after function ordinalizeToken func        return function  a            return this.lang  .ordinal func.call this  a  ;      ;       ,timrwood,closed,1,2013-01-14 19:23:42,2013-01-15 19:47:07,,Deprecate,,,1,1
13672,moment/moment,578,removing kr and jp files  293,Finishing  293 ,timrwood,closed,0,2013-01-14 19:31:33,2013-01-14 21:55:26,,Deprecate,,,1,1
13671,moment/moment,579,Adding support for moment.add 1   second  ,See  411.  This is to ease developer pain.  The following syntaxes are now supported.      javascript moment  .add  seconds:1  ; moment  .add  seconds   1 ; moment  .add  seconds    1  ; moment  .add 1   seconds  ;      This syntax is not supported.      javascript moment  .add  1    seconds  ;     ,timrwood,closed,1,2013-01-14 20:10:43,2013-01-15 20:13:12,,,,1,1
13670,moment/moment,580,Best way to override meridiem for short am/pm format.,Is there a best practice for changing the meridiem behavior to return a or p instead of am/pm without side effects?  I get that I can change the function to return lowercase p/a and have done so  http://momentjs.com/docs/ /customization/ . But I was wondering if there was a better way to do so or if we could implement a new format character for shorthand am/pm. .NET allows this via the t character  http://msdn.microsoft.com/en us/library/8kb3ddd4.aspx section: The  t  custom format specifier   ,niemyjski,closed,5,2013-01-15 18:14:59,2013-01-16 19:26:24,,,,0,1
13669,moment/moment,581,Added format token X  that will parse/print unix timestamp with ms,Added format token X  that will parse/print unix timestamp with ms  This is strongly related to  554  I was somewhat lazy on the test site  @timrwood may propose something more interesting. ,ichernev,closed,4,2013-01-16 08:26:25,2013-02-05 18:54:42,,,,1,1
13668,moment/moment,582,Default Timezone,I looked through the code and the customization documentation and couldn t figure out how to set a default timezone. I looked over the docs and it also wasn t very clear how to even change the time zone of a moment date.  So here is some context. I have a reporting application that I m building. All dates are stored in UTC and returned from a web api  rest  call in UTC   2012 12 14T00:29:40.276Z  <   no time zone info . Multiple different users might be using the application and all data displayed needs to be and sometimes posted in a specific time zone  determined by the project . So the user may not be in the right timezone.  I noticed that doing:  console.log moment.utc  2012 12 14T00:29:40.276Z   ;   _d: Thu Dec 13 2012 18:29:40 GMT 0600  Central Standard Time   _isUTC: true   console.log moment.utc  2012 12 14T00:29:40.276Z  .format   ; 2012 12 14T00:29:40 00:00  console.log moment.utc  2012 12 14T00:29:40.276Z  .toDate   ; Thu Dec 13 2012 18:29:40 GMT 0600  Central Standard Time   creates a date that is stored internally as utc but is displayed as my browsers timezone as shown above. Is there an config option or a setting I can set that sets a default timezone  via offset or zone  for all instances of moment e.g. moment  .format   and moment.utc  2012 12 14T00:29:40.276Z  .format   would display this time in a specific time zone. ,niemyjski,closed,5,2013-01-16 19:21:54,2013-02-13 06:41:59,,,,0,1
13667,moment/moment,583,Feature Request: Add support for getting Date instance that for epoch as well as minvalue.,This is a feature request. I noticed that the API had methods for handling epoch but really no way to get the epoch date  e.g.  todate    > 1/1/1970 . Granted  it s easy to put in your own code  just thought it would be there.  Also  I came across a bunch of posts where people were trying to do the conversion between .NET s DateTime.MinValue and JavaScript.  I know that this isn t .NET but it would be useful to have a value that represents a min date.  I had to pass the MinValue to a controller and came up short. I actually had to serialize DateTime.MinValue to JSON in order to get the value I needed to post back   0001 01 01T00:00:00  . I think it would be useful to have a constant for a MinValue date as well as epoch.   Let me know what you think  either way  my feelings will not be hurt : .  P.S.  I love your library  you do an amazing job. ,niemyjski,closed,2,2013-01-16 19:34:05,2013-01-16 20:24:03,,,,0,1
13666,moment/moment,584,Adding short form localized tokens.,See  533.  Lowercase  L  should be the shorter counterpart to uppercase  L . The same units would exist in both formats. Choosing between an ordinal  zero filled  or plain number will depend on whether the format is uppercase or lowercase  L . The same consideration should be made between long form names and abbreviated names.      javascript moment  .format  L  ; // 01/14/2013 moment  .format  l  ; // 1/14/2013 moment  .format  LL  ; // January 14th 2013 moment  .format  ll  ; // Jan 14 2013 moment  .format  LLL  ; // January 14th 2013 2:08 PM moment  .format  lll  ; // Jan 14 2013 2:08 PM moment  .format  LLLL  ; // Monday  January 14th 2013 2:08 PM moment  .format  llll  ; // Mon  Jan 14 2013 2:08 PM      The number of characters defines which types of tokens are used.      1    L/l     Month numeral  day of month  year 2   LL/ll    Month name  day of month  year 3  LLL/lll   Month name  day of month  year  time 4 LLLL/llll  Month name  day of month  day of week  year  time      If the  l ll lll llll  tokens do not exist  they are automatically created by replacing  MMMM  with  MMM    dddd  with  ddd    MM  with  M   and  DD  with  D . ,timrwood,closed,0,2013-01-17 01:35:20,2013-01-23 17:43:24,,,,1,1
13665,moment/moment,585,Changed three letter shortenings to tam  > tammi and so forth,Well  this isn t perfect  but since somebody might want to shorten the literal form of months to something  this is the best option I could come up with. ,bleadof,closed,2,2013-01-18 11:36:47,2013-01-23 18:30:34,,,,1,1
13664,moment/moment,586,Node: Cannot find module uglify js,Hello Tim    Sorry to bother you with it but I m not a node.js developer for now  I write in JS for browsers only . However  I really appreciate moment.js and would like to contribute.   I ve installed Node.JS and Grunt as you described in the contributing instructions.   However  for some reason I m getting this:          D: gitrepos moment test>grunt test Loading  grunt.js  tasks and helpers...ERROR >> Error: Cannot find module  uglify js  >> No  test  targets found. <WARN> Task  test  failed. Use   force to continue. </WARN> Aborted due to warnings.      I ve installed UglifyJs especially once more but this error persists.   Could you help  please?   Thanks  ,Menelion,closed,3,2013-01-20 13:56:33,2013-02-27 19:21:32,,,,0,1
13663,moment/moment,587,Date parsing odd behavior , moment  2001 12xxxxxxx 10    YYYY MM DD  .isValid  =>  true   moment  2001 12xxxxxxx 10    YYYY MM DD  .toDate    =>  Mon Dec 10 2001   This behavior prevent using moment to check the format of a date. ,pgn-vole,closed,3,2013-01-21 11:13:06,2013-01-23 19:01:50,,,,0,1
13662,moment/moment,588,diff does not obey common sense for dates,HI        love Moment in general. Using it in a Titanium mobile app. Weird logic in the following using  diff :  var today =  Moment  ; var birthDay =  Moment _birthDate ; var diff = today.diff birthDay   years  ;  This calculates the age of someone. Now if the date today is 21 Jan  2013 =  2013 01 21  and one enters a birthday  _birthDate  of tomorrow 22 Jan  2013 =  2013 01 22  it returns the age of 65 which is incorrect because the person is actually still 64. I worked out that this is probably due to integer rounding errors as the age switches between 64 and 65 years old at the 6 month from today boundary.  So I can see you are doing common rounding arithmetic from a float to an integer but this is completely non sensical in terms of dates. Decimal calculation of integer values like years makes no sense. This should obey the common sense understanding of difference when using the appropriate units of date e.g. years  months  weeks etc  Cheers Simon Buckingham simon@icecandy.com ,icecandy,closed,4,2013-01-21 17:24:04,2013-02-27 19:19:04,,,,0,1
13661,moment/moment,589,Ukrainian translation,There s some problem with Makefile in develop branch  so I cannot minimize language file ,zemlanin,closed,0,2013-01-21 20:25:10,2013-01-21 20:28:15,,,,1,1
13660,moment/moment,590,Ukrainian translation  fixed ,There s some problem with installition of uglify js  so I cannot minimize language file ,zemlanin,closed,0,2013-01-21 20:57:18,2013-01-21 20:57:41,,,,1,1
13659,moment/moment,591,Ukrainian translation  fixed ,There s some problem with installition of uglify js  so I cannot minimize language file  And I m sorry for two erroneous pull requests ,zemlanin,closed,2,2013-01-21 21:02:25,2013-01-23 18:06:08,,,,1,1
13658,moment/moment,592,moment   should not modify the passed argument. Instead should create a new object.,I have a cached  stat  object obtained from  fs.stats   . I pass  mtime  of this  stat  object to  moment    as shown below:      response.setHeader  Expires   moment stat.mtime .add  months   3 .utc  .format  ddd  DD MMM YYYY HH:mm:ss ZZ   ;      For quite a long time I was wondering why  stat  object in my cache gets modified. Then I found out that  moment    was operating on the received object directly instead of creating its own new object.  It s not a good design to let  moment    to modify the passed argument. If user wanted to update the object itself  he would have called something like  stat.mtime.moment   . But calling the main  moment      MUST NOT   modify the original object. ,kadishmal,closed,8,2013-01-22 13:34:15,2013-02-13 06:40:42,,,,0,1
13657,moment/moment,593,cloning moments acts strange,If you clone a moment  you receive a moment  that has a copy of each and every function from moment s prototype. Just issue in a terminal:      > var moment = require  moment  ; > x = moment moment         and you ll see a bunch a functions  which are also found in  x.__proto__ . I don t think that s right. ,ichernev,closed,1,2013-01-23 01:47:26,2013-01-23 18:27:25,,,,0,1
13656,moment/moment,594,Time not being parsed, moment  24Jan2013 11:00    DDMMMYYYY HH:mm  .hours    => 0 Shouldn t it be 11?  Version 1.7.2 on chrome 24 ,dxg,closed,1,2013-01-23 05:56:41,2013-01-23 18:31:55,,,,0,1
13655,moment/moment,595,expressions in require     browserify ,browserify is doesnt like computed require as it complicates dependency tracking  so including       javascript var moment      = require  moment  ;      results       javascript Expressions in require   statements:     require  ./lang/    key       this warning does not appear to affect function  is there a cleaner way to quiet it? ,jakeluck,closed,6,2013-01-23 22:26:28,2013-02-27 19:16:00,,,,0,1
13654,moment/moment,596,Suffix problem in Turkish Language,There is a problem with suffixes in Turkish language. Not a technical problem but while reading formatted date is sounds weird and funny in Turkish.  In English moment.lang  en  ; moment  .format  Do MMMM YYYY  ;   //This returns 25th January 2013 which is fine. moment  .format  MMMM Do YYYY  ;   // and this January 25th 2013 which is fine too  but in Turkish moment.lang  tr  ; moment  .format  Do MMMM YYYY  ;   //This returns 25 inci Ocak 2013 moment  .format  MMMM Do YYYY  ;   // and this Ocak 25 inci 2013  We never use/read suffix in a date formatted like this. They should return 25 Ocak 2013 and Ocak 25 2013 respectively. ,ergec,closed,1,2013-01-25 08:31:32,2013-02-23 08:42:40,,,,0,1
13653,moment/moment,597,UTC mode parsing doesn t account for milliseconds,    var utcStamp =  2013 01 18T16:56:23 249 0800 ; var ts = moment.utc utcStamp ; moment ts .format  HH:mm:ss SSS  ;     ,rahulsom,closed,1,2013-01-25 18:06:28,2013-02-13 06:23:35,,,,0,1
13652,moment/moment,598,Failing utc test 115.1 in Chrome 24,Got a failing test running from the website: 115.1 Calling moment.utc   should default to the current time  1359136912128 == 1359136912127   The strange thing is  it only failed the one time.  So maybe it s just a fluke in the test harness?  I reloaded the page and all tests pass.  Stack trace: AssertionError: Calling moment.utc   should default to the current time     at Object.equal  http://momentjs.com/js/tests.js:1531:39      at exports.utc.creating with utc  http://momentjs.com/js/tests.js:3861:14      at Object.exports.runTest  http://momentjs.com/js/tests.js:1707:9      at http://momentjs.com/js/tests.js:1753:25     at http://momentjs.com/js/tests.js:1011:13     at iterate  http://momentjs.com/js/tests.js:621:13      at http://momentjs.com/js/tests.js:632:25     at http://momentjs.com/js/tests.js:1013:17     at http://momentjs.com/js/tests.js:1594:17  Date.prototype.toString = Fri Jan 25 2013 13:01:55 GMT 0500  EST  Date.prototype.toLocaleString = 1/25/2013 1:01:55 PM Date.prototype.getTimezoneOffset = 300 navigator.userAgent = Mozilla/5.0  Macintosh; Intel Mac OS X 10_8_2  AppleWebKit/537.17  KHTML  like Gecko  Chrome/24.0.1312.56 Safari/537.17 ,michaelcox,closed,1,2013-01-25 18:09:24,2013-01-25 18:14:01,,,,0,1
13651,moment/moment,599,Chuvash incorrectly labeled as  Catalan  on moment.js,Under  Languages  on http://moment.js  Catalan  is listed twice. The second instance seems to be Chuvash rather than Catalan. ,jonkeegan,closed,2,2013-01-28 19:53:29,2013-02-05 16:37:31,,,,0,1
13650,moment/moment,600,toDate returns internal private date,Consider this code:      var a = moment  ; var b = a.toDate  ; console.info a.toDate    b ; a.add  days   1 ; console.info a.toDate    b ;      prints      Mon Jan 28 2013 15:12:33 GMT 0600  CST  Mon Jan 28 2013 15:12:33 GMT 0600  CST  Tue Jan 29 2013 15:12:33 GMT 0600  CST  Tue Jan 29 2013 15:12:33 GMT 0600  CST       toDate returns the internal property  _d   which is a Date instance.  Modifying the moment then modifies the returned date.  To me  this would be expected only if the function were called  getDate  rather than  toDate .    I propose renaming  toDate  to  getDate  and adding a new  toDate  that returns a deep copy of _d. ,thesmart,closed,2,2013-01-28 21:14:24,2013-01-29 20:47:58,,,,0,1
13649,moment/moment,601,Confusion when validating using String   Format,I may well be misunderstanding something  but I m confused by the following:  // false  as expected moment  12341234    MM/DD/YYYY  .isValid  ;    // true... why?  ignoring non alphanumerics  it would be the same as above... moment  1234/1234    MM/DD/YYYY  .isValid  ;  // also true?  I d expect H and m to allow only 2 digits each. moment  12341234    H:m  .isValid  ; ,jmwohl,closed,2,2013-01-29 18:20:38,2013-02-04 03:00:32,,,,0,1
13648,moment/moment,602,month manipulation is broken,moment  .month 1 or 2 .format  MMMM   both give  March ...  It wasn t doing this yesterday  so I guess it is date dependent. ,dijs,closed,1,2013-01-29 20:40:13,2013-01-29 21:51:24,,,,0,1
13647,moment/moment,603,Formatting Date Cross Browser Issue,So we ran into an issue when running the following code in Firefox and Chrome. Using latest for each Firefox 18.0.1 and Chrome 24.0.1312.56.      result =  January 31 ; moment result .format  MMM DD  ;      When using  console.log  Chrome s response is good.      Jan 31      Firefox not so much.      undefined NaN     ,sjlu,closed,3,2013-01-30 15:03:06,2013-01-31 15:15:29,,,,0,1
13646,moment/moment,604,Difference between 2 dates using  diff  function,We just ran in to this issue with  diff  function: <code> var a = moment  ;   // Yesterday i.e.   1/31/2013 var b = moment  2/01/2013  ;  if  a.diff b   days     >=   0       return true;  </code>  As you can see if <b>a  todate </b> is 2/1/2013 i am trying to return TRUE. >  First condition <code><b>a.diff b   days  </b></code> returns 0 for these dates <b>1 31 2013 5:10:10 PM</b> and <b>2/01/2013</b> diff  which seems to be wrong.  If i change dates to these <b>1 31 2013 5:10:10 AM</b> and <b>2/01/2013</b> i.e. use <b>AM</b> instead of <b>PM</b> then it returns  1 and works the was expected.  It looks something odd going on in this function  diff : https://github.com/timrwood/moment/blob/develop/moment.js L1122 L1149 ,skusunam,closed,2,2013-02-01 19:54:42,2013-02-05 20:52:36,,,,0,1
13645,moment/moment,605,Failing Unit Test,Date.prototype.toString = Fri Feb 01 2013 15:09:38 GMT 0600  Hora est ndar central  M xico   Date.prototype.toLocaleString = 1/2/2013 15:09:38 Date.prototype.getTimezoneOffset = 360 navigator.userAgent = Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.17  KHTML  like Gecko  Chrome/24.0.1312.56 Safari/537.17  creating with utc 6 passed 1 failed. 115.1 Calling moment.utc   should default to the current time  1359752975004 == 1359752975003  AssertionError: Calling moment.utc   should default to the current time     at Object.equal  http://momentjs.com/js/tests.js:1531:39      at exports.utc.creating with utc  http://momentjs.com/js/tests.js:3861:14      at Object.exports.runTest  http://momentjs.com/js/tests.js:1707:9      at http://momentjs.com/js/tests.js:1753:25     at http://momentjs.com/js/tests.js:1011:13     at iterate  http://momentjs.com/js/tests.js:621:13      at http://momentjs.com/js/tests.js:632:25     at http://momentjs.com/js/tests.js:1013:17     at http://momentjs.com/js/tests.js:1594:17 ,chisko,closed,1,2013-02-01 21:14:48,2013-02-04 02:51:22,,,,0,1
13644,moment/moment,606,moment.diff across timezone shifts,I m experiencing some unexpected behavior which may well be correct but I m not sure I understand time well enough to judge.  If I m not mistaken:      javascript moment  2013 03 10T03:00  .diff moment  2013 03 10T00:00     hours   true       Should return 2  as the the clock jumps forward an hour from 1:59:59 to 3:00:00 am   but at least for me  EST/EDT  it returns 3.  zone    for each of those objects returns  240  and  300  respectively for me. ,sbirch,closed,4,2013-02-03 06:40:13,2013-07-07 19:06:02,,Bug,,,0,1
13643,moment/moment,607,Round moment diff down.,,timrwood,closed,1,2013-02-04 22:17:55,2013-02-05 19:24:41,,Deprecate,,,1,1
13642,moment/moment,608,Floor moment diff instead of round,The diff rounding issue comes up so often  that I m wondering if it would be better to  floor  instead of  round .  The  2.0.0  release would be the ideal time for this  as it can introduce backwards incompatible changes.  What do you think @ichernev?  Here are some relevant issues.  393  131  588  219 ,timrwood,closed,0,2013-02-05 19:25:43,2013-02-08 17:21:58,,Deprecate,,,1,1
13641,moment/moment,609,Ability to create a duration through string shorthand,I wish to create duration objects for comparison.  The api would look like:      moment.duration  1:30   < moment.duration  2:00   // returns true  1 hr and 30 mins vs 2 hrs       If given such a string right now  I would have to parse it myself before feeding it into moment s shorthand  example :      javascript     var parts =  1:30 .split  :  ;     var duration = moment.duration           hours: parseInt parts[0]           minutes: parseInt parts[1]      ;      As you can see  given my use case  its not quite a shorthand.  I couldn t find docs stating this could be done or open enhancements with this feature.  If I submit a pull request  is this something you would consider?  I could also add support for   hours:minutes:milliseconds  ,badunk,closed,1,2013-02-05 23:52:17,2013-02-10 08:06:56,,,,0,1
13640,moment/moment,610,1.7.2    ordinal        ,           ordinal              string                   . ,everedifice,closed,3,2013-02-06 00:20:18,2013-02-28 17:29:27,,,,1,1
13639,moment/moment,611,.zone   always returns the local zone,If I create a moment such as:      var m = moment  2013 01 01T00:00:00 04:00  ;      And then look at the zone:      var z = m.zone  ;      I would expect to always get back  240  because I created it with the specific  4:00 offset.  Instead  I always get back 420.  I am in UTC 7  Arizona   so this is coming from my local clock.  Even that seems wrong though  because I would expect  420.  This seems to be a direct passthrough to getTimezoneOffset    which also exhibits this behavior.  I expect more from moment.js.  It seems that as soon as you create a moment with an offset  that offset is applied and then lost.  Is that correct? ,mj1856,closed,19,2013-02-06 03:29:39,2013-05-12 18:07:11,,Timezones,,,0,1
13638,moment/moment,612,Proposed enhancement for french translation related to year,It sounds more natural to say  il y a un an  than  il y a une ann e  and same for  dans un an  than  dans une ann e . ,francisbesset,closed,1,2013-02-07 08:48:34,2013-02-08 17:22:05,,,,1,1
13637,moment/moment,613,week number is not compliant with ISO standard,I found a bug today  assuming that  moment  Jan 1  2005  .format  YYYY   Www d    would follow the ISO 8601 standard.  The code sample would return:      > moment  Jan 1  2005  .format  YYYY   Www d    2005 W53 6       but this is the expected output:       2004 W53 6       http://en.wikipedia.org/wiki/ISO_week_date Examples ,thesmart,closed,13,2013-02-08 09:27:40,2013-07-14 06:58:17,,New Feature,,,0,1
13636,moment/moment,614,[Lang fr] Fixed typo,It s not  une an  but  un an . ,francisbesset,closed,1,2013-02-08 17:37:15,2013-02-08 17:41:05,,,,1,1
13635,moment/moment,615,Moment modifies array of acceptable formats,If the user passes an array of acceptable formats into moment   to create a new moment  the array is modified.  The array of formats should not be modified.  Not sure if this is part of  592 or whether that s discussing the date object rather than all the parameters for creating a moment.  Either way  it s odd that the array just pops an element.  Relevant jsfiddle  not very exciting but you can see the bug : http://jsfiddle.net/fGp5N/ ,andrewjennings,closed,2,2013-02-08 21:10:36,2013-02-13 06:18:30,,Bug,,,0,1
13634,moment/moment,616,Add unit tests for  moment zone  setter,  [x] getters/setters   [x] add/subtract   [x] startOf/endOf   [x] from/fromNow   [x] zones outside the  12 to  12 range   [x] diffs   [x] unix offset   unix timestamp   [x] JS Date output   [x] Cloning   [x] isBefore isAfter isSame   [ ] isDST   [x] ignore zone with local or utc ,timrwood,closed,2,2013-02-09 02:00:27,2013-09-27 23:36:54,,Enhancement,,,0,1
13633,moment/moment,617,Failing unit test 52.2 in Chrome 24,Got failing unit test when running unit test on moment.js website.  Date.prototype.toString = Sat Feb 09 2013 15:42:46 GMT 0700  SE Asia Standard Time  Date.prototype.toLocaleString = 2/9/2013 3:42:46 PM Date.prototype.getTimezoneOffset =  420 navigator.userAgent = Mozilla/5.0  Windows NT 6.1  AppleWebKit/537.17  KHTML  like Gecko  Chrome/24.0.1312.57 Safari/537.17  52.2 month diff  2 == 1  AssertionError: month diff     at Object.equal  http://momentjs.com/js/tests.js?v=2013 02 08T11:26:32 08:00:1531:39      at Object.exports.diff.diff between utc and local  http://momentjs.com/js/tests.js?v=2013 02 08T11:26:32 08:00:2824:14      at http://momentjs.com/js/tests.js?v=2013 02 08T11:26:32 08:00:1867:16     at Object.exports.runTest  http://momentjs.com/js/tests.js?v=2013 02 08T11:26:32 08:00:1707:9      at http://momentjs.com/js/tests.js?v=2013 02 08T11:26:32 08:00:1753:25     at http://momentjs.com/js/tests.js?v=2013 02 08T11:26:32 08:00:1011:13     at iterate  http://momentjs.com/js/tests.js?v=2013 02 08T11:26:32 08:00:621:13      at http://momentjs.com/js/tests.js?v=2013 02 08T11:26:32 08:00:632:25     at http://momentjs.com/js/tests.js?v=2013 02 08T11:26:32 08:00:1013:17     at http://momentjs.com/js/tests.js?v=2013 02 08T11:26:32 08:00:1594:17 ,alukito,closed,1,2013-02-09 08:56:56,2013-02-11 21:44:10,,,,0,1
13632,moment/moment,618,[2.0] in browser languages    last language is always on and can t be changed,Hi there   See test.html at https://gist.github.com/scottsd/4744888 Languages loaded per instructions at http://momentjs.com/docs/ /i18n/loading into browser/  Expecting to see time in english  but it s in french.  Thanks for your moments :  ,scottsd,closed,2,2013-02-09 11:11:16,2013-02-12 04:55:58,,,,0,1
13631,moment/moment,619,[2.0] Simple change to calendar settings,Before 2.0 the following would work as expected:      javascript require  moment  .calendar.sameElse =  LL ;      Since 2.0 this throws an exception because  moment.calendar  is undefined.  What would be the correct way to update the  calendar.sameElse ? It isn t clear to me from the documentation.  I would expect something like the following to work  not necessarily this  but something like this :      javascript    moment.langData  en  .calendar  sameElse    LLLL        I should note that a solution should not require redefining the entire  lang.calendar .  Thanks   Cheers ,brianmhunt,closed,2,2013-02-09 17:55:44,2013-02-13 05:52:36,,,,0,1
13630,moment/moment,620,Failing Unit Test,Date.prototype.toString = Sun Feb 10 2013 16:13:29 GMT 1100  AUS Eastern Daylight Time  Date.prototype.toLocaleString = 10/2/2013 16:13:29 Date.prototype.getTimezoneOffset =  660 navigator.userAgent = Mozilla/5.0  Windows NT 6.2; WOW64  AppleWebKit/537.17  KHTML  like Gecko  Chrome/24.0.1312.57 Safari/537.17  AssertionError: month diff     at Object.equal  http://momentjs.com/js/tests.js?v=2013 02 08T11:26:32 08:00:1531:39      at Object.exports.diff.diff between utc and local  http://momentjs.com/js/tests.js?v=2013 02 08T11:26:32 08:00:2824:14      at http://momentjs.com/js/tests.js?v=2013 02 08T11:26:32 08:00:1867:16     at Object.exports.runTest  http://momentjs.com/js/tests.js?v=2013 02 08T11:26:32 08:00:1707:9      at http://momentjs.com/js/tests.js?v=2013 02 08T11:26:32 08:00:1753:25     at http://momentjs.com/js/tests.js?v=2013 02 08T11:26:32 08:00:1011:13     at iterate  http://momentjs.com/js/tests.js?v=2013 02 08T11:26:32 08:00:621:13      at http://momentjs.com/js/tests.js?v=2013 02 08T11:26:32 08:00:632:25     at http://momentjs.com/js/tests.js?v=2013 02 08T11:26:32 08:00:1013:17     at http://momentjs.com/js/tests.js?v=2013 02 08T11:26:32 08:00:1594:17 ,ctolkien,closed,1,2013-02-10 05:13:59,2013-02-11 21:43:57,,,,0,1
13629,moment/moment,621,Added support for duration creations through string,I followed the spec according to wikipedia  http://en.wikipedia.org/wiki/ISO_8601 Durations  ,badunk,closed,3,2013-02-10 08:05:29,2013-02-27 19:35:58,,,,1,1
13628,moment/moment,622,diff between utc and local  month diff fails,Hello   This test fails on my browser : diff between utc and local  month diff  Date.prototype.toString = Mon Feb 11 2013 01:02:05 GMT 0100  CET  Date.prototype.toLocaleString = 11/2/2013 01:02:05 Date.prototype.getTimezoneOffset =  60 navigator.userAgent = Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.22  KHTML  like Gecko  Chrome/25.0.1364.68 Safari/537.22  month diff  2 == 1  AssertionError: month diff     at Object.equal  http://momentjs.com/js/tests.js?v=2013 02 08T11:26:32 08:00:1531:39      at Object.exports.diff.diff between utc and local  http://momentjs.com/js/tests.js?v=2013 02 08T11:26:32 08:00:2824:14      at http://momentjs.com/js/tests.js?v=2013 02 08T11:26:32 08:00:1867:16     at Object.exports.runTest  http://momentjs.com/js/tests.js?v=2013 02 08T11:26:32 08:00:1707:9      at http://momentjs.com/js/tests.js?v=2013 02 08T11:26:32 08:00:1753:25     at http://momentjs.com/js/tests.js?v=2013 02 08T11:26:32 08:00:1011:13     at iterate  http://momentjs.com/js/tests.js?v=2013 02 08T11:26:32 08:00:621:13      at http://momentjs.com/js/tests.js?v=2013 02 08T11:26:32 08:00:632:25     at http://momentjs.com/js/tests.js?v=2013 02 08T11:26:32 08:00:1013:17     at http://momentjs.com/js/tests.js?v=2013 02 08T11:26:32 08:00:1594:17  In the Inspector console i tried:    moment [2010  2] .utc  .format    2010 02 28T23:00:00 00:00    moment [2010  2] .format    2010 03 01T00:00:00 01:00    moment [2010  2] .utc  .diff [2010]   months   1   moment [2010  2] .diff [2010]   months   2   moment [2010  2] .utc  .diff [2010]  5097600000 ,gilles-duboscq,closed,2,2013-02-11 00:14:03,2013-02-11 00:16:28,,,,0,1
13627,moment/moment,623,Capitalize  Last  when referring to last week, Today    Yesterday   etc. were capitalized while  last  was not  which seems very inconsistent. ,toofishes,closed,4,2013-02-11 00:30:07,2013-02-23 07:53:27,,,,1,1
13626,moment/moment,624,moment.toDate   returns some internal object when using the array constructor, moment [2012 11 24] .toDate    does not really return a  Date  object.  moment [2012 11 24] .clone  .toDate    works. ,mitar,closed,3,2013-02-11 19:47:00,2013-02-12 02:46:27,,,,0,1
13625,moment/moment,625,Test failure in diff/1 hour from now,On Firefox i get an error in the 45.5 test  diff/1 hour from now  :  45.5 1 hour from now = 360000  3600000 == 3600211  AssertionError: 1 hour from now = 360000  Date.prototype.toString = Tue Feb 12 2013 16:34:16 GMT 0100  CET  Date.prototype.toLocaleString = mar. 12 f vr. 2013 16:34:16 CET Date.prototype.getTimezoneOffset =  60 navigator.userAgent = Mozilla/5.0  X11; Linux x86_64; rv:18.0  Gecko/20100101 Firefox/18.0  I tried multiple times and got different values for the tert failure  3600211  3600054  3600661... . However  when trying in the console  i could not reproduce:        var oneHourDate = new Date  ;   undefined   var nowDate = new Date oneHourDate ;   undefined   oneHourDate.setHours oneHourDate.getHours     1 ;   1360687085471   moment oneHourDate .diff nowDate    3600000      or  not that it should make any difference  just to be sure         var oneHourDate = new Date              nowDate = new Date oneHourDate ;   undefined   oneHourDate.setHours oneHourDate.getHours     1 ;   1360687403332   moment oneHourDate .diff nowDate    3600000     ,gilles-duboscq,closed,3,2013-02-12 15:48:32,2013-02-23 08:13:05,,,,0,1
13624,moment/moment,626,Failed Unit tests,Well  here goes my environment info...      Date.prototype.toString = Tue Feb 12 2013 11:57:21 GMT 0200  BRST  Date.prototype.toLocaleString = 2/12/2013 11:57:21 AM Date.prototype.getTimezoneOffset = 180 navigator.userAgent = Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.17  KHTML  like Gecko  Chrome/24.0.1312.69 Safari/537.17      And the failing tests: _Month diffs_ has 2 failing tests:     55.4   1.0013888888888889 ===  1  Jan 28 to Feb 28 should be 1 month  true == false         AssertionError:   1.0013888888888889 ===  1  Jan 28 to Feb 28 should be 1 month   at Object.ok  http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:1531:39    at equal  http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:2729:10    at Object.exports.diff.month diffs  http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:2863:9    at http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:1867:16   at Object.exports.runTest  http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:1707:9    at http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:1753:25   at http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:1011:13   at iterate  http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:621:13    at http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:632:25   at http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:1013:17     55.5   0.9347222222222222 ===  0.9333333333333333  Jan 31 to Feb 29 should be 1    2/30  months  true == false         AssertionError:   0.9347222222222222 ===  0.9333333333333333  Jan 31 to Feb 29 should be 1    2/30  months   at Object.ok  http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:1531:39    at equal  http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:2729:10    at Object.exports.diff.month diffs  http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:2864:9    at http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:1867:16   at Object.exports.runTest  http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:1707:9    at http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:1753:25   at http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:1011:13   at iterate  http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:621:13    at http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:632:25   at http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:1013:17 ,victorgama,closed,3,2013-02-12 21:48:45,2013-06-10 16:50:19,,Bug,Unit Test Failed,,,0,1
13623,moment/moment,627,how to get a person s age,Hi  this is more a question then an issue but here it go. I want to use moment to check if a person is more then 18 years old. What is the best way to do this? Since if i use the .fromNow   function i will get 18 years if the person has more then 17 and a half. ,rollbackpt,closed,3,2013-02-12 22:45:47,2013-02-13 00:17:46,,,,0,1
13622,moment/moment,628,failed tests   chrome 24   pt BR,Please submit an issue to github.com/timrwood/moment/issues with the information below and the failing tests.  Date.prototype.toString = Wed Feb 13 2013 21:43:16 GMT 0300  Hor rio de Ver o Brasil Central  Date.prototype.toLocaleString = 13/2/2013 21:43:16 Date.prototype.getTimezoneOffset = 180 navigator.userAgent = Mozilla/5.0  Windows NT 6.1  AppleWebKit/537.17  KHTML  like Gecko  Chrome/24.0.1312.57 Safari/537.17  month diffs 6 passed 2 failed. 55.1   1 ===  1  Jan 1 to Feb 1 should be 1 month 55.2   0.016129032258064516 ===  0.016129032258064516  Jan 1 to Jan 1 noon should be 0.5/31 months 55.3   1 ===  1  Jan 15 to Feb 15 should be 1 month 55.4   1.0013888888888889 ===  1  Jan 28 to Feb 28 should be 1 month  true == false  AssertionError:   1.0013888888888889 ===  1  Jan 28 to Feb 28 should be 1 month     at Object.ok  http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:1531:39      at equal  http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:2729:10      at Object.exports.diff.month diffs  http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:2863:9      at http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:1867:16     at Object.exports.runTest  http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:1707:9      at http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:1753:25     at http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:1011:13     at iterate  http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:621:13      at http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:632:25     at http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:1013:17 55.5   0.9347222222222222 ===  0.9333333333333333  Jan 31 to Feb 29 should be 1    2/30  months  true == false  AssertionError:   0.9347222222222222 ===  0.9333333333333333  Jan 31 to Feb 29 should be 1    2/30  months     at Object.ok  http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:1531:39      at equal  http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:2729:10      at Object.exports.diff.month diffs  http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:2864:9      at http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:1867:16     at Object.exports.runTest  http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:1707:9      at http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:1753:25     at http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:1011:13     at iterate  http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:621:13      at http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:632:25     at http://momentjs.com/js/tests.js?v=2013 02 11T22:41:18 01:00:1013:17 55.6   1.032258064516129 ===  1.032258064516129  Jan 31 to Mar 1 should be 2    30/31  months 55.7   1.0483870967741935 ===  1.0483870967741935  Jan 31 to Mar 1 should be 2    29.5/31  months 55.8   0.967741935483871 ===  0.967741935483871  Jan 1 to Jan 31 should be 30/31 months ,jpolvora,closed,1,2013-02-14 00:46:16,2013-02-19 17:49:28,,Unit Test Failed,,,0,1
13621,moment/moment,629,Fixed a bug in cloning a Date,To clone a Date object d you need to convert it to a Number first and then pass it to Date constructor  like new Date  d . Otherwise some browsers  firefox  cut milliseconds.  Related to https://github.com/timrwood/moment/issues/625 ,ichernev,closed,3,2013-02-14 05:34:03,2013-02-16 18:53:54,,,,1,1
13620,moment/moment,630,No  dateOnly  or equivalent?,Just started looking at moment as the base Javascript date object is so poor   but the first thing I need is a  date only  function  that strips the time element from a date   yet there does not seem to be one  equivalent to c  DateTime.Date   method .  Okay  it s not exactly difficult to fix   but why isn t it part of the library? Or if it is  why am I not able to find such a basic function in the docs? ,conficient,closed,1,2013-02-15 10:41:23,2013-02-15 11:04:13,,,,0,1
13619,moment/moment,631,Missing tokens for ordinals without the number,I want to do something like this:      js moment  .format  D[<sup>]o[</sup>] MMM YYYY  ;      i.e. place a number ordinal into a  <sup>  tag.  Reading the format documentation  I don t see a token available for this. I came up with a workaround:      js var date = moment  ; date.format  D[  moment.ordinal date.date     ] MMM YYYY  ;      but come on  that s just dirty :  ,darsain,closed,1,2013-02-15 13:41:58,2013-03-19 05:08:14,,,,0,1
13618,moment/moment,632,Adding Days in Duration Produces Incorrect Date and Difference,The following code      javascript console.log             now:     moment  .format   ;  var manyDaysFromNow = moment.duration  days: 1095  ;  var start = moment   var end = moment start .add manyDaysFromNow ; console.log  start:     start.format   ; console.log  end  :     end.format   ; console.log  Many days from now is:     end.diff start   years   true  ; console.log  Many days from now is:     end.diff start   days   true  ;      produces the following output:                 now: 2013 02 15T10:48:28 05:00 start: 2013 02 15T10:48:28 05:00 end  : 2016 03 02T10:48:28 05:00 Many days from now is: 3.0466101694915255 Many days from now is: 1111      It should produce      start: 2013 02 15T10:48:28 05:00 end  : 2016 02 14T ....not sure of the time ... Many days from now is: 2.998 .... approximately Many days from now is: 1095      Here s a fiddle: http://jsfiddle.net/futureturnip/GPeFe/4/ ,futureturnip,closed,2,2013-02-15 15:57:32,2013-03-19 05:22:14,,Bug,,,0,1
13617,moment/moment,633,One failed test,On http://momentjs.com/test/   13818 tests passed. 1 failed.  ....  Date.prototype.toString = Fri Feb 15 2013 11:20:55 GMT 0600  CST  Date.prototype.toLocaleString = Fri Feb 15 11:20:55 2013 Date.prototype.getTimezoneOffset = 360 navigator.userAgent = Mozilla/5.0  Macintosh; Intel Mac OS X 10.7; rv:19.0  Gecko/20100101 Firefox/19.0  ....  diff diff 4 passed 1 failed.      45.1 1 second   0 = 1000 45.2 1 second   0.5 seconds = 500 45.3 0   1 second =  1000 45.4 1 second   1 second = 0 45.5 1 hour from now = 360000  3600000 == 3600510   AssertionError: 1 hour from now = 360000     ,bvanslyke,closed,1,2013-02-15 17:24:33,2013-02-18 16:57:57,,Unit Test Failed,,,0,1
13616,moment/moment,634,Fix start/endOf week for first weekday is monday langs,When trying to fix a weekly dataset export bug I ran into the following:  startOf  week    should set the day by using  lang  ._week.dow  instead of  0   which is only correct for langs that start their week on a sunday.  Hope I could be of help  this is my first ever public Github excursion  kinda exciting actually :   grtz    Jurgen ,jubr,closed,18,2013-02-16 13:55:29,2013-05-11 20:02:02,,,,1,1
13615,moment/moment,635,Default year should be this year,It would make sense to me if the default  guessed  year would be this year  i.e.      moment  jan 15  .year   == 2013      would be true.  However the year seems to default to 2001 when not supplied.  The functionality as is might be a design choice  but I thought to mention it just in case.  Cheers ,brianmhunt,closed,4,2013-02-16 14:25:03,2013-07-14 07:17:36,,New Feature,,,0,1
13614,moment/moment,636,Serbian language support,,DVSoftware,closed,6,2013-02-16 22:41:40,2013-11-29 20:21:15,,Language,Needs tests,,,1,1
13613,moment/moment,637,Parse  Do  styled dates,It seems Moment.js does not handle parsing of dates formatted with the  Do  style. In otherwords   February 16th  2012  will not parse as expected by Moment.js.  It would be quite nice if it did. :  ,brianmhunt,closed,3,2013-02-16 23:22:43,2013-03-19 05:03:44,,,,0,1
13612,moment/moment,638,add translation for bahasa melayu,Hi this is translation for malay language  ms MY  .  Please review. Thanks ,weldan,closed,3,2013-02-18 11:33:30,2013-02-20 17:20:22,,Language,,,1,1
13611,moment/moment,639,UT KO on WP7,On Windows Phone 7  one test  diff 45.5  is KO:  45.5 1 hour from now = 360000  3600000 == 3600076    Date.prototype.toString = Mon Feb 18 15:57:57 UTC 0100 2013 Date.prototype.toLocaleString = lundi 18 f vrier 2013 15:57:57 Date.prototype.getTimezoneOffset =  60 navigator.userAgent = Mozilla/5.0  compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0; HTC; TITAN X310e  ,marob,closed,1,2013-02-18 15:33:58,2013-02-18 17:47:38,,,,0,1
13610,moment/moment,640,i18n: add greek language,,mehiel,closed,8,2013-02-19 02:37:56,2013-02-19 17:57:51,,Language,,,1,1
13609,moment/moment,641,fix grunt version,Hi   I changed the grunt version for   0.3.17  instead of  latest . If someone run the command grunt with the latest version  this kind of message will appear:  Fatal error: Unable to find Gruntfile .  Thanks. ,igorlima,closed,1,2013-02-19 04:30:21,2013-02-19 08:03:59,,,,1,1
13608,moment/moment,642,Failed Unit Test,Hi   here are my results:  Date.prototype.toString = Tue Feb 19 2013 21:50:14 GMT 0100  CET  Date.prototype.toLocaleString = Di 19 Feb 2013 21:50:14 CET Date.prototype.getTimezoneOffset =  60 navigator.userAgent = Mozilla/5.0  X11; Ubuntu; Linux x86_64; rv:18.0  Gecko/20100101 Firefox/18.0  diff diff 4 passed 1 failed.      45.1 1 second   0 = 1000 45.2 1 second   0.5 seconds = 500 45.3 0   1 second =  1000 45.4 1 second   1 second = 0 45.5 1 hour from now = 360000  3600000 == 3600499   AssertionError: 1 hour from now = 360000     ,rmacnell,closed,2,2013-02-19 20:50:56,2013-02-20 17:40:24,,Unit Test Failed,,,0,1
13607,moment/moment,643,Failed unit test,Hi there       Date.prototype.toString = Wed Feb 20 14:32:47 UTC 1300 2013Date.prototype.toLocaleString = Wednesday  20 February 2013 2:32:47 p.m.Date.prototype.getTimezoneOffset =  780navigator.userAgent = Mozilla/5.0  compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0       Also  ie 9 as Ie7 completely crashes while attempting to run the tests.  Thanks  Pedro ,droope,closed,3,2013-02-20 01:34:48,2013-02-20 18:54:44,,Unit Test Failed,,,0,1
13606,moment/moment,644,Upgrading from 0.3 to 0.4 grunt version,Hi   I upgraded from 0.3 to 0.4 grunt version. There were a lot of modifications. The main modification is: Core Tasks are now Grunt Plugins.  I think I could not update the minify lang.js file at line 48. Also  I could not update the minify.js file at line 29. Can you help me at two lines?  Thanks.  PS.: Upgrading from 0.3 to 0.4 can be found at: http://gruntjs.com/upgrading from 0.3 to 0.4 ,igorlima,closed,5,2013-02-20 04:06:35,2013-03-25 17:26:59,,Enhancement,,,1,1
13605,moment/moment,645,Adding Hindi Lang with unit tests,Hi  I have added Hindi language support  at least the very basic module. There are some linguistic technicalities I can think of  where the generated strings might be called inaccurate by experts but for most cases  and 99  of people   I think these changes should suffice.  Unit tests as included as well.  Thanks for the great library  :  Mayank Singhal ,mayanksinghal,closed,1,2013-02-20 10:13:47,2013-02-20 18:20:30,,,,1,1
13604,moment/moment,646,Fixed incorrect result of toJSON for dates with timezone other than UTC,The  toJSON  function makes a conversion that loses timezone information. The result is a string that describes a different moment in time. For example:      moment  2012 10 09T20:30:40.678 0300  .toJSON    2012 10 09T19:30:40.678Z  // depends on your locale setting      but the expected value is       2012 10 09T17:30:40.678Z       The attached patch fixes this problem. ,jdudek,closed,5,2013-02-20 21:57:04,2013-02-22 22:59:28,,,,1,1
13603,moment/moment,647,Upgrading from 1.0 to 2.0 uglify version,Hi   the uglify stuff is not failing more. I updated to uglify 2.0.  Thanks. ,igorlima,closed,1,2013-02-21 02:32:42,2013-02-22 22:20:50,,,,1,1
13602,moment/moment,648,Difference Calculation in Years is Greater for an Earlier Date,    javascript var start = moment [2012  2  1] ; var theFirstEnd = moment [2015  2  1] ; var theSecondEnd = moment [2015  1  31] ;  console.log   first end:     theFirstEnd.diff start   years   true  ; console.log   second end:     theSecondEnd.diff start   years   true  ;      The  theFirstEnd  is later than   theSecondEnd . Unfortunately  the difference with the second produces a larger number than the difference with the first. The output of the console is:                 now: 2013 02 20T22:40:29 05:00 fiddle.jshell.net:25 first end: 3 second end: 3.0053763440860215      Here s a fiddle: http://jsfiddle.net/HsA7A/1/ ,futureturnip,closed,3,2013-02-21 03:46:12,2013-02-25 16:51:00,,,,0,1
13601,moment/moment,649,Parse meridiem string in Chinese,In moment.js   function addTimeToArrayFromToken token  input  config    ...     // AM / PM     case  a  : // fall through to A     case  A  :         config._isPm =   input      .toLowerCase   ===  pm  ;         break; ...    This doesn t work for Chinese locale  zh cn  zh tw  as Chinese has its own word     for pm . In this case  config._isPm is always false if the input is in Chinese.  For example. I can format a date to:  2013 10 08 1:00     2013 10 08 1:00pm . But when I try to parse it back  it gives me:  2013 10 08 1:00     2013 10 08 1:00am . ,ssun-sfdc,closed,4,2013-02-21 07:02:12,2013-09-30 08:34:50,,New Feature,,,0,1
13600,moment/moment,650,Fixed syntax error in test in old IEs,Caused errors when running tests in IE7 at http://momentjs.com/test/ ,tsareg,closed,2,2013-02-21 10:58:25,2013-02-21 17:59:08,,,,1,1
13599,moment/moment,651,minified version does not compile/build with require.js,Just want to inform that i had problems with require.js build when i included moment.min.js. I would get Error: Line 3: Unexpected end of input from r.jr It was not easy to find this error. But when i omitted the moment.min.js from libs catalog it  the build worked. It also worked when i used the development version of moment.js ,exoer,closed,2,2013-02-21 17:41:46,2013-02-22 10:13:48,,,,0,1
13598,moment/moment,652,JSHint all unit tests,,timrwood,closed,2,2013-02-21 18:43:15,2013-07-14 22:22:28,,Enhancement,,,0,1
13597,moment/moment,653,Date header format parsing problem,Hi  I ve a problem when I want to parse header dates from Apache  I d like to support the 3 formats defined in [RFC 2616] http://tools.ietf.org/html/rfc2616 section 3.3   so I use the hability of Momentjs to parse various formats  but it seems my second definition override the first one.  1  ddd  DD MMM YYYY HH:mm:ss [GMT]  > it s the input format 2  dddd  DD MMM YY HH:mm:ss [GMT] 3  ddd MMM D HH:mm:ss YYYY  I ve tested in IE10/FF and Chrome and I ve the same problems  the year is 2019  where it must be 1994  so I think it parse correctly with the 2  def as it takes the 19 part .  http://jsfiddle.net/waf6M/ ,dinacel,closed,3,2013-02-24 02:53:57,2013-06-03 18:40:09,,Bug,,,0,1
13596,moment/moment,654,Issue in timezone  0300,Date.prototype.toString = Mon Feb 25 2013 11:09:30 GMT 0300  BRT  Date.prototype.toLocaleString = 2/25/2013 11:09:30 AM Date.prototype.getTimezoneOffset = 180 navigator.userAgent = Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.22  KHTML  like Gecko  Chrome/25.0.1364.97 Safari/537.22 ,reinaldorauch,closed,1,2013-02-25 14:11:21,2013-02-26 08:39:23,,,,0,1
13595,moment/moment,655,Short date format in longDateFormat for Latvian language is [kinda] wrong.,lv.js contains this currently.     longDateFormat :           LT :  HH:mm           L :  YYYY.MM.DD.           LL :  YYYY. [gada] D. MMMM           LLL :  YYYY. [gada] D. MMMM  LT           LLLL :  YYYY. [gada] D. MMMM  dddd  LT         All is fine except  L . In Latvia most common format for  short  date is  DD.MM.YYYY   no dot in the end  See http://en.wikipedia.org/wiki/Date_format_by_country or http://www.localeplanet.com/icu/lv LV/index.html ,salixzs,closed,5,2013-02-25 15:08:58,2013-02-26 08:46:59,,,,0,1
13594,moment/moment,656,Changed short format for Latvian to DD.MM.YYYY,Requested by @salixzs in  655 ,ichernev,closed,0,2013-02-26 08:46:16,2013-03-30 08:09:22,,,,1,1
13593,moment/moment,657,Wrong parsing using  DD MM YYYY ,I m trying to parse a date using the  DD MM YYYY  format  this way: moment  01 09 1972    DD MM YYYY   but both the methods month   and date   return wrong values  as it was MM DD YYYY  ,lordkada,closed,2,2013-02-27 07:27:52,2013-02-27 08:47:55,,,,0,1
13592,moment/moment,658,Wrong parsing using  DD MM YYYY ,I m trying to parse a date using the  DD MM YYYY  format  this way: moment  01 09 1972    DD MM YYYY   but both the methods month   and date   return wrong values  as it was MM DD YYYY  ,lordkada,closed,1,2013-02-27 07:28:06,2013-02-27 07:28:54,,,,0,1
13591,moment/moment,659,utc confusion,    javascript m.utc  02/26/2013 22:21:22  .format  YYYY MM DDTHH:mm:ssZZ   > 2013 02 27T06:21:22 0000  m.utc  02/26/2013 22:21:22 0000  .format  YYYY MM DDTHH:mm:ssZZ  ; > 2013 02 26T22:21:22 0000  m.utc  02/26/2013 22:21:22 0000   >   _useUTC: true    _isUTC: true    _l: undefined    _i:  02/26/2013 22:21:22 0000     _f: undefined    _d: Tue Feb 26 2013 14:21:22 GMT 0800  PST         I do i tell moment to just take that date as utc directly without adding the timezone to the string   0000 .  Wouldn t it assume utc  if i am calling utc? ,i--i,closed,3,2013-02-27 19:36:47,2013-03-19 05:07:49,,,,0,1
13590,moment/moment,660,Day of week parse format error,The docs indicate a single  d  in a parse format string would indicate a  day of week  string  but the parse function only allows 2  3  or 4 d s for that  and a single  d  resolves to a number at moment.js line 608. ,scpurcell,closed,4,2013-02-27 22:46:24,2013-03-19 05:24:06,,,,0,1
13589,moment/moment,661,Bug in Adding Day,Did you try this command in your firebug console ?    moment  Sat  Mar 12 2013  .add  days   5   Why it returns  Sat  Mar 16 2013  ?  but normally it should returns  Sat  Mar 17 2013  ,Foroughi,closed,1,2013-02-28 13:13:38,2013-03-19 05:03:33,,,,0,1
13588,moment/moment,662,[Question] Manage momentjs   i18n   almond,Hello   I use moment.js with almond and french version and I d like to know how to configure my requirejs config to be able to compile it correctly.  Since lang is now AMDised  I can t compile it anymore.  My config:      /      Configure your app  mate.   / require.config       deps: [ app ]  // First script called     baseUrl:  js   // Scripts folder     paths:           // Libraries supported by Bower  http://twitter.github.com/bower/          zepto:           components/zepto/zepto                             // http://zeptojs.com/         underscore:      components/lodash/lodash                           // http://lodash.com/ instead of underscore for better performance         backbone:        components/backbone/backbone                       // http://backbonejs.org/         moment:          components/moment/moment                           // http://momentjs.com/         momentFr:        components/moment/lang/fr                          // http://momentjs.com/         lazyload:        components/lazyload/lazyload                       // https://github.com/fasterize/lazyload         //q:               components/q/q                                     // https://github.com/kriskowal/q         modernizr:       components/modernizr/modernizr                     // https://github.com/Modernizr/Modernizr         handlebars:      components/handlebars.js/dist/handlebars.runtime   // http://handlebarsjs.com/ Version for precompiled templates         swfobject:       components/swfobject/swfobject/src/swfobject       // http://code.google.com/p/swfobject/         fastclick:       components/fastclick/lib/fastclick                 // https://github.com/ftlabs/fastclick         //hammer:          components/hammer/hammer                           // https://github.com/EightMedia/hammer.js            // Define dependencies and object names     shim:            zepto :               exports:                         underscore :               exports:  _                      backbone :               deps: [  underscore    zepto ]              exports:  Backbone                     moment :               exports:  Moment                      momentFr :               deps: [ moment ]              exports:  Moment                    ;     ,kud,closed,6,2013-02-28 13:18:06,2013-03-19 05:07:25,,,,0,1
13587,moment/moment,663,Bug in Adding Day,Did you try this comment in firebug console  moment  Sat  Mar 12 2013  .add  days   5   Look at http://jsfiddle.net/AHJqw/  It returns  Sat  Mar 16 2013    but normally it should returns  Sat  Mar 17 2013  ,Foroughi,closed,1,2013-02-28 13:25:27,2013-02-28 17:45:04,,,,0,1
13586,moment/moment,664,[Question] Can I explicetly tell moment to parse a .net date?,I was wondering how to pass a format for .net dates  http://momentjs.com/docs/ /parsing/string format/  I hasd a look here: http://momentjs.com/docs/ /parsing/asp net json date/  I d like the parse to just inValid    > false  if the string passed is not a valid asp.net json date. ,opensas,closed,1,2013-03-01 04:18:48,2013-03-19 05:02:42,,,,0,1
13585,moment/moment,665,Moment should parse according to locale,If I do something like:      javascript moment.lang  it  ; var d = moment  01/03/2013  ;      I expect to get back a date in the Italian format  March 1st  2013   not the American one  January 3rd  2013  that momentjs in fact returns.  If this behavior can t be modified  how can I parse with a date format such as  L  or  LL  without having to do all of this:      javascript moment stringDate  moment  .lang moment.lang   ._lang._longDateFormat.L ;      Thank you. ,frapontillo,closed,3,2013-03-01 11:57:25,2013-08-19 18:21:40,,New Feature,,,0,1
13584,moment/moment,666,Adding Persian language support,How could i help to add my language Persian farsi  to this awesome js library?  Actually there are more that 110 million speakers around the worlds that speaking in Persian language in countries like Iran  Afghanistan  Tajikistan. http://en.wikipedia.org/wiki/Persian_language ,salisa,closed,1,2013-03-01 18:38:28,2013-07-02 18:32:34,,Language,,,0,1
13583,moment/moment,667,Update ar.js,Two versions in months together and changes in weekdays  so that the translation is more general. ,mar-chi-pan,closed,11,2013-03-05 12:43:11,2013-04-06 06:51:54,,,,1,1
13582,moment/moment,668,2012 2 30,Is parsed as March/1/2012  shouldn t it be an invalid date? ,nijikokun,closed,2,2013-03-06 01:07:03,2013-03-19 05:25:11,,,,0,1
13581,moment/moment,669,Format date in a given Time zone,Lately I ve been missing a feature and I think it can be useful for many cases. I needed to format a date in a given Time zone. As far as I understand  the format method formats the date in the current auto detected Time zone.   The next code would work. This code is not mine but I can t remember where I found it:      javascript moment.fn.formatInZone = function format  offset        return this.clone  .utc  .add  hours   offset .format format ;    moment  .formatInZone  HH:mm:ss   7 ; moment  .formatInZone  HH:mm:ss    7 ;     ,mllocs,closed,6,2013-03-06 15:06:20,2013-03-08 09:49:45,,,,0,1
13580,moment/moment,670,Respecting timezones,So  this could have been answered already  but I m having quite a tough time on moment.js respecting the timezone I ve given it. Using node.js 0.8.x  Given the timestring:  2013 03 07T07:00:00 08:00   And then passing that timestring:  console.log moment time   YYYY MM DD HH:mm:ssZZ  .format   ;   It gives me the time string in my computer s or server s timezone.  2013 03 07T03:00:00 05:00   But according to the docs  shouldn t it respect the timezone and display the same exact time if I use  .format   ? ,sjlu,closed,5,2013-03-07 02:21:49,2013-03-19 05:26:20,,,,0,1
13579,moment/moment,671,Making moment zone a setter,This change allows you to set the intended offset for a moment.      javascript moment  .format  ;           // 2013 03 08T20:36:21 08:00 moment  .utc  .format  ;     // 2013 03 09T04:36:21 00:00 moment  .zone 120 .format  ; // 2013 03 09T02:36:21 02:00      Additionally  because the offset changes during daylight saving time  there is a callback hook for external libraries to use to update the moment whenever it is mutated.      javascript moment.updateOffset = function  m        // check if the offset needs to be changed     if  dst            m.zone 60 ;       else           m.zone 120 ;        ;      The way the offset setting works is by switching the moment to utc mode and adding the offset to the moment.  This is kind of hacky  and it requires that we correct for the offset whenever exporting the unix timestamp or the original date. ,timrwood,closed,12,2013-03-09 04:47:07,2013-05-11 18:08:27,,,,1,1
13578,moment/moment,672,added Georgian  ka  language,added Georgian  ka  language with tests ,iJaniashvili,closed,1,2013-03-09 23:20:51,2013-03-12 21:44:56,,,,1,1
13577,moment/moment,673,2 failed tests,    Date.prototype.toString = Sun Mar 10 2013 21:42:53 GMT 0300 Date.prototype.toLocaleString = domingo  10 de mar o de 2013 21:42:53 Date.prototype.getTimezoneOffset = 120 navigator.userAgent = Mozilla/5.0  Windows NT 6.1; WOW64; rv:19.0  Gecko/20100101 Firefox/19.0      failed      55.4   1.0013888888888889 ===  1  Jan 28 to Feb 28 should be 1 month  true == false   AssertionError:   1.0013888888888889 ===  1  Jan 28 to Feb 28 should be 1 month          55.5   0.9347222222222222 ===  0.9333333333333333  Jan 31 to Feb 29 should be 1    2/30  months  true == false   AssertionError:   0.9347222222222222 ===  0.9333333333333333  Jan 31 to Feb 29 should be 1    2/30  months     ,pocesar,closed,1,2013-03-11 00:44:22,2013-03-19 04:54:55,,Unit Test Failed,,,0,1
13576,moment/moment,674,Tests Failing due to DST?,45 tests fail today  all related to  Yesterday at the same time  in various locales.  Looks like it s related to DST.   Yesterday at 2:00 AM == Yesterday at 1:00 AM       Date.prototype.toString = Mon Mar 11 2013 12:18:31 GMT 0700  PDT  Date.prototype.toLocaleString = 3/11/2013 12:18:31 PM Date.prototype.getTimezoneOffset = 480 navigator.userAgent = Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.17  KHTML  like Gecko  Chrome/24.0.1312.56 Safari/537.17     ,aearly,closed,1,2013-03-11 19:30:09,2013-05-11 21:39:10,,,,0,1
13575,moment/moment,675,Parsing date does not work in every case,I try to parse dates from several languages to a date object.  Example German:  string: 9. Dezember 2012 isValid: false lang: de date: NaN  string: 24. November 2012 isValid: true lang: de date: 1353711600000  Example French:  string: 21 d cembre 2012 isValid: false lang: fr date: NaN  string: 14 octobre 2012 isValid: true lang: fr date: 1350165600000  I am using moment in a NodeJS project where 2.0.0 is installed via NPM.  Code:  var moment = require  moment  ; moment.lang  de  ; var dateString =  9. Dezember 2012 ; var date = moment dateString ; console.log  string:     dateString ; console.log  isValid:     moment dateString .isValid   ; console.log  lang:     moment.lang   ; console.log  date:     date ; ,martinstolz,closed,4,2013-03-14 13:50:46,2013-03-19 04:57:10,,,,0,1
13574,moment/moment,676,moment  .toJSON   adds  Z  to the end of JSON string in spite of the date represented not in UTC,Sorry for my ugly english. Here is simple test.  js Date.toJSON   returns right json  date represented in UTC and  Z  is at the end of string  but moment.toJSON adds  Z  at the end of string inspite of date represented not in UTC  tested in Google Chrom  25.0.1364.152 m  on last version of moment.js downloaded from http://momentjs.com/  var m = moment  ; var testResult = m.toJSON   == m._d.toJSON  ; console.log  Test      testResult ?  success  :  fail     Thank you. ,deedoc,closed,2,2013-03-15 06:55:14,2013-03-15 21:04:52,,,,0,1
13573,moment/moment,677,Parsing format hmm doesn t work correctly,If the user attempts to create a moment using the format  hmm   e.g.  415   moment seems to use the format HHm instead.  jsfiddle example for you: http://jsfiddle.net/p6gDa/3/  Thanks   Love the library  BTW.  Keep up the good work.    After looking into the bug  I got [this song] https://www.youtube.com/watch?v=XF2ayWcJfxo  stuck in my head. Format made me go hmmmmmmm. ,andrewjennings,closed,4,2013-03-15 19:48:32,2013-09-30 07:21:52,,Forgiving parsing,,,0,1
13572,moment/moment,678,A fix for Ukrainian  uk  language translation,Made amendments to Ukrainian translation to fix the issue with displaying calendar dates like this:      javascript moment  .subtract  days   3 .calendar  ;    //                   23:05    Last Wednesday at 11:05 PM         In the example above          is in nominative instead of the needed accusative           .  Fixed by changing the format of  Last  weekday   expression in Ukrainian to the more grammatically accurate  which uses genitive case  like in the example below:      javascript moment  .subtract  days   3 .calendar  ;    //                  23:05      ,terrapass,closed,4,2013-03-16 21:15:34,2013-03-17 22:26:14,,,,1,1
13571,moment/moment,679,Failing tests,Date.prototype.toString = Mon Mar 18 2013 09:13:34 GMT 0300  BRT  Date.prototype.toLocaleString = 18/3/2013 09:13:34 Date.prototype.getTimezoneOffset = 180 navigator.userAgent = Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.22  KHTML  like Gecko  Chrome/25.0.1364.160 Safari/537.22  55.4   1.0013888888888889 ===  1  Jan 28 to Feb 28 should be 1 month  true == false  AssertionError:   1.0013888888888889 ===  1  Jan 28 to Feb 28 should be 1 month     at Object.ok  http://momentjs.com/js/tests.js?v=2013 03 07T15:15:04 08:00:1531:39      at equal  http://momentjs.com/js/tests.js?v=2013 03 07T15:15:04 08:00:2729:10      at Object.exports.diff.month diffs  http://momentjs.com/js/tests.js?v=2013 03 07T15:15:04 08:00:2863:9      at http://momentjs.com/js/tests.js?v=2013 03 07T15:15:04 08:00:1867:16     at Object.exports.runTest  http://momentjs.com/js/tests.js?v=2013 03 07T15:15:04 08:00:1707:9      at http://momentjs.com/js/tests.js?v=2013 03 07T15:15:04 08:00:1753:25     at http://momentjs.com/js/tests.js?v=2013 03 07T15:15:04 08:00:1011:13     at iterate  http://momentjs.com/js/tests.js?v=2013 03 07T15:15:04 08:00:621:13      at http://momentjs.com/js/tests.js?v=2013 03 07T15:15:04 08:00:632:25     at http://momentjs.com/js/tests.js?v=2013 03 07T15:15:04 08:00:1013:17  55.5   0.9347222222222222 ===  0.9333333333333333  Jan 31 to Feb 29 should be 1    2/30  months  true == false  AssertionError:   0.9347222222222222 ===  0.9333333333333333  Jan 31 to Feb 29 should be 1    2/30  months     at Object.ok  http://momentjs.com/js/tests.js?v=2013 03 07T15:15:04 08:00:1531:39      at equal  http://momentjs.com/js/tests.js?v=2013 03 07T15:15:04 08:00:2729:10      at Object.exports.diff.month diffs  http://momentjs.com/js/tests.js?v=2013 03 07T15:15:04 08:00:2864:9      at http://momentjs.com/js/tests.js?v=2013 03 07T15:15:04 08:00:1867:16     at Object.exports.runTest  http://momentjs.com/js/tests.js?v=2013 03 07T15:15:04 08:00:1707:9      at http://momentjs.com/js/tests.js?v=2013 03 07T15:15:04 08:00:1753:25     at http://momentjs.com/js/tests.js?v=2013 03 07T15:15:04 08:00:1011:13     at iterate  http://momentjs.com/js/tests.js?v=2013 03 07T15:15:04 08:00:621:13      at http://momentjs.com/js/tests.js?v=2013 03 07T15:15:04 08:00:632:25     at http://momentjs.com/js/tests.js?v=2013 03 07T15:15:04 08:00:1013:17 ,awvalenti,closed,1,2013-03-18 12:15:30,2013-03-19 04:54:39,,,,0,1
13570,moment/moment,680,Year 0000 is considered valid,moment  11/02/0000    DD/MM/YYYY  .isValid   returns true. PostgreSQL  on the other hand  says ERROR: date/time field value out of range:  11/02/0000 .  I believe there s no such thing as year 0  so PostrgreSQL is probably right. ,awvalenti,closed,2,2013-03-18 12:17:35,2013-04-25 06:23:12,,,,0,1
13569,moment/moment,681,Setting an unknown language on Node.js implementation throws an error.,    javascript var moment = require   moment     date = moment  ;  date.lang   en US   ; // Throws error          text Error: Cannot find module  ./lang/en US      at Function.Module._resolveFilename  module.js:338:15      at Function.Module._load  module.js:280:25      at Module.require  module.js:362:17      at require  module.js:378:17      at getLangDefinition  ./node_modules/moment/moment.js:507:13      at Object.moment.fn.Moment.lang  ./node_modules/moment/moment.js:1276:30      ...     at callbacks  ./node_modules/express/lib/router/index.js:161:37      at param  ./node_modules/express/lib/router/index.js:135:11       My current workaround is using try/catch to set the language  but would it make more sense to provide an isValid method or something similar to verify setting a language? ,JasonCust,closed,2,2013-03-18 20:48:24,2013-07-14 22:24:39,,New Feature,,,0,1
13568,moment/moment,682,Documentation incorrect: lang  .months returns function rather than months array,Documentation states:      javascript var fr = moment  .lang  fr  ; fr.lang  .months // [ janvier    f vrier    mars   ...]      but on a Node.js REPL:      javascript var fr = moment  .lang  fr  ; fr.lang  .months // [Function]      Side note: executing the function throws an error      javascript fr.lang  .months   TypeError: Cannot call method  month  of undefined     at Object.Language.months  ./node_modules/moment/moment.js:352:35      at repl:1:12     at REPLServer.self.eval  repl.js:109:21      at Interface.<anonymous>  repl.js:248:12      at Interface.EventEmitter.emit  events.js:96:17      at Interface._onLine  readline.js:200:10      at Interface._line  readline.js:518:8      at Interface._ttyWrite  readline.js:736:14      at ReadStream.onkeypress  readline.js:97:10      at ReadStream.EventEmitter.emit  events.js:126:20      at emitKey  readline.js:1058:12      at ReadStream.onData  readline.js:807:7      ,JasonCust,closed,7,2013-03-18 20:55:11,2013-04-27 07:36:55,,,,0,1
13567,moment/moment,683,Allow fallbacks for setting language,Similar to the format array option  would it be advisable to allow multiple languages in an array as an option? The setter would work in order till the first successful load.      javascript var moment = require   moment     date = moment  .lang  [  en US    en    fr  ]  ; date.lang   //   ordinal: [Function]  _abbr:  en        ,JasonCust,closed,4,2013-03-18 21:05:28,2013-07-14 22:26:02,,New Feature,,,0,1
13566,moment/moment,684,Fix duration  as  getters,An year was converted to 12 months and a month is 30 days  so a year was 360 days. Fixed that by taking into account full years when computing milliseconds since unix epoch and fixing duration.asMonth to convert back a year to 12 months.  Fixes  542. ,ichernev,closed,0,2013-03-19 06:28:56,2013-04-02 06:55:39,,,,1,1
13565,moment/moment,685,DateTime parsing 31th of March,I think I found a bug during parsing datetime. With Firefox 19.0.2:  var datetime = moment  03/31/2013 01:00   MM/DD/YYYY HH:mm  ; datetime.isValid   is false;   Sun Mar 31 2013 00:00:00 GMT 0000   _i= 03/31/2013 01:00   _f= MM/DD/YYYY HH:mm   _isUTC=false  more...   var datetime = moment  03/31/2014 01:00   MM/DD/YYYY HH:mm  ; datetime.isValid   is false;   var datetime = moment  01/31/2013 01:00   MM/DD/YYYY HH:mm  ; datetime.isValid   is true;   var datetime = moment  03/30/2013 01:00   MM/DD/YYYY HH:mm  ; datetime.isValid   is true;  ,szbeni,closed,12,2013-03-20 13:14:07,2013-03-23 16:47:15,,,,0,1
13564,moment/moment,686,Duration parsing for serialized .NET TimeSpan,refactored regex  location of the expression variable and application of the expression ,spring1975,closed,17,2013-03-20 17:19:41,2013-04-02 06:54:14,,,,1,1
13563,moment/moment,687,Tests failing for BRT,Date.prototype.toString = Wed Mar 20 2013 14:22:04 GMT 0300  BRT  Date.prototype.toLocaleString = 3/20/2013 2:22:04 PM Date.prototype.getTimezoneOffset = 180 navigator.userAgent = Mozilla/5.0  Macintosh; Intel Mac OS X 10_8_2  AppleWebKit/537.22  KHTML  like Gecko  Chrome/25.0.1364.172 Safari/537.22 ,fcoury,closed,3,2013-03-20 17:23:01,2013-03-21 06:52:28,,,,0,1
13562,moment/moment,688,Throw exception on invalid time intervals, moment.duration  will silently return 0 is you misspell the time interval. Please change that and throw Exception. This applies to other methods that rely on String for determining the interval. ,edzhelyov,closed,9,2013-03-21 13:48:17,2014-06-05 07:11:13,,Enhancement,,,0,1
13561,moment/moment,689,Parse weekday names,I wish to be able to create a moment based on a named weekday. I can use  moment  February    MMMM     so why can t I use  moment  Sunday    dddd    in a similar manner?  In other words  parsing  Sunday  should return the same thing as  moment  .startOf  week    and parsing  Monday  should return the same thing as  moment  .startOf  week  .day 1  .  If additional date information is provided  e.g.   Sunday Feb 1    that other info should take precedence in the parser  e.g.  ignore  Sunday  in this case . ,quietmint,closed,5,2013-03-21 19:38:43,2013-10-14 06:25:28,,New Feature,,,0,1
13560,moment/moment,690,Create String setters for moment month and moment day,I wish to be able to set the month or weekday based on a name   January  or  Sunday   instead of a number  0 . In other words  I want to use  moment  .month  February    or  moment  .day  Sunday   .  I should note that you can work around this limitation for month names by creating a second moment:  moment  .month  moment  February    MMMM  .month     . ,quietmint,closed,5,2013-03-21 19:42:08,2013-03-31 17:14:57,,New Feature,,,1,1
13559,moment/moment,691,isValid   for MM/DD/YY doesn t work for years with more than digits,    javascript moment  02/18/122222234    MM/DD/YY  .isValid  ; // returns true      Instead  we should also check whether you re actually entering 2 digits for the year.  Fiddle is at http://jsfiddle.net/44U34/2/ ,christianvuerings,closed,3,2013-03-22 18:24:57,2013-03-22 21:47:28,,,,0,1
13558,moment/moment,692,Want  format     Time from X 1.0.0,var start = moment [2007  0  5] ; var end = moment [2007  0  10] ; start.from end ;       //  in 5 days  start.from end  true ; //  5 days     would be nice to have a format option...  start.from end .format  s   //   > 450000 start.from end .format  m   //   > 7500 ... ,dzlabs,closed,1,2013-03-22 19:13:27,2013-03-26 21:03:55,,,,0,1
13557,moment/moment,693,Make moment startOf and moment endOf accept abbreviated units,Now  moment startOf  y   == moment startOf  year    ,quietmint,closed,3,2013-03-23 00:40:16,2013-03-30 05:51:31,,,,1,1
13556,moment/moment,694,GWT,This is not really an issue but I do not know ehere else to tell you.   I have made a complete wrapper of momentjs for GWT  java  at https://github.com/cancerberoSgx/momentgwt  so GWT users can use your great library in their projects. Thanks  and keep the good work  ,cancerberoSgx,closed,2,2013-03-24 14:01:38,2013-05-11 22:08:26,,,,0,1
13555,moment/moment,695,Failing tests,As requested in [momentjs test page] http://momentjs.com/test/  I m reporting two failing unit tests:  Information:      javascript Date.prototype.toString = Mon Mar 25 2013 09:33:42 GMT 0300  Hora oficial do Brasil  Date.prototype.toLocaleString = 3/25/2013 9:33:42 AM Date.prototype.getTimezoneOffset = 120 navigator.userAgent = Mozilla/5.0  Windows NT 6.2; WOW64  AppleWebKit/537.22  KHTML  like Gecko  Chrome/25.0.1364.172 Safari/537.22      Failing tests:   month diffs:   55.4   1.0013888888888889 ===  1  Jan 28 to Feb 28 should be 1 month  true == false    month diffs:   55.5   0.9347222222222222 ===  0.9333333333333333  Jan 31 to Feb 29 should be 1    2/30  months  true == false  ,luizdamim,closed,1,2013-03-25 12:39:52,2013-03-26 07:43:41,,,,0,1
13554,moment/moment,696,Modify filetype,  755  > 644  These files doesn t have to have execute authority. ,tricknotes,closed,1,2013-03-28 11:23:23,2013-03-29 16:37:19,,,,1,1
13553,moment/moment,697,confusing behaviour of .utc  ,    javascript > moment.utc  20 June 2013  .format  DD MMM YYYY   >  19 Jun 2013  > moment.utc  20 June 2013  .format   >  2013 06 19T23:00:00 00:00  > moment.utc  20 June 2013  .zone   > 0     ,michalkot,closed,1,2013-03-28 18:18:00,2013-04-27 07:43:54,,,,0,1
13552,moment/moment,698,How can I extract a coordinated year and week number from a string,From: http://jsfiddle.net/SvJ8Q/1/   moment  2012 12 31  .year    => 2012  moment  2012 12 31  .week    => 1  moment  2013 01 01  .week    => 1  moment  2013 11 08  .year    => 2013  moment  2013 01 08  .week    => 2  I understand why the week function returns 1 in the above   but this really coincides with week 1 of year 2013  right? How do I get the year part of the week function?   Maybe there is a better way to achieve what I am after. I have incidents per date from many years. I want to graph the number of incidents by week. But the year/week behavior above will group 12 31 2012 data into the first week of 2012. ,mikeymckay,closed,4,2013-03-28 18:50:12,2013-04-27 07:55:24,,,,0,1
13551,moment/moment,699,Added moment.fn. isoYear  iso ?[Ww]eekday  and format tokens,Initial implementation of iso week year. Related to  613.  I ll add some tests  just let me know if I m on the right track. If I m not mistaken  the fact that iso week year can be different than the year should also mean that the localized week year might be different than the year. In that case we need more functions/tokens :  ,ichernev,closed,3,2013-03-30 05:07:24,2013-04-26 07:52:41,,,,1,1
13550,moment/moment,700,Serbian latin tranlsation.,Serbian latin translation.  ,draganbabic,closed,4,2013-03-30 14:27:49,2013-09-15 10:16:40,,Language,,,1,1
13549,moment/moment,701,adding as   and get   to durations,Fix for  412. Allows:   moment.duration  .as  months  ;   and   moment.duration  .get  months  ;  ,icambron,closed,2,2013-03-31 19:49:28,2013-04-03 16:19:45,,,,1,1
13548,moment/moment,702,Added dot net style duration parser,New pull request referencing  686. ,spring1975,closed,2,2013-04-01 05:35:44,2013-04-02 06:53:12,,,,1,1
13547,moment/moment,703,Failing tests   45 failed,Please submit an issue to github.com/timrwood/moment/issues with the information below and the failing tests.  Date.prototype.toString = Mon Apr 01 2013 20:57:39 GMT 0200  CEST  Date.prototype.toLocaleString = Mon 01 Apr 2013 08:57:39 PM CEST Date.prototype.getTimezoneOffset =  60 navigator.userAgent = Mozilla/5.0  X11; Ubuntu; Linux x86_64; rv:19.0  Gecko/20100101 Firefox/19.0 ,js402882,closed,13,2013-04-01 19:03:45,2013-04-27 08:04:39,,Unit Test Failed,,,0,1
13546,moment/moment,704,h:mm:ss to seconds and vice versa,Is there any way to get seconds from say 5:45:15? ,fxck,closed,8,2013-04-02 14:27:17,2013-09-16 07:26:09,,New Feature,,,0,1
13545,moment/moment,705,TypeError .. has no method  isAfter ,    var expirationDate = moment  .subtract  hours   3 .format  YYYY MM DD HH:mm:ss  ; item.date_created =  2013 04 02 10:47:33 ; var after = moment item.date_created.toString   .isAfter expirationDate ;      I get the following error:      TypeError: Object Tue Apr 02 2013 10:47:33 GMT 0400  EDT  has no method  isAfter       Any ideas as to why this may be? ,durango,closed,1,2013-04-02 16:42:06,2013-04-02 16:48:00,,,,0,1
13544,moment/moment,706,Added nodeunit as devDependency,nodeunit is needed as a direct dependency for grunt tasks zone and zones.  Most of you have it already installed so you don t see the error  but if you clear the node_modules file grunt won t work in the current setup. ,ichernev,closed,0,2013-04-03 07:06:43,2013-04-03 07:08:00,,,,1,1
13543,moment/moment,707,fix as   tests,My pull  701 conflicted with https://github.com/timrwood/moment/commit/04a19aaeb8b31883e25e559821734a77465c574c and broke the tests. Here s the fix. ,icambron,closed,1,2013-04-03 17:42:04,2013-04-06 06:35:27,,,,1,1
13542,moment/moment,708, minute  is missing,Evidently Moment used to have an alias of  minutes  called  minute .  I say  evidently  because this page:      http://momentjs.com/docs/ /get set/minute/      claims that moment has such a method  but if you download the latest version of Moment  or even the older copy I have  1.7.2  you ll find that no such method exists.  I m guessing that this alias was deliberately removed  and this issue is just one of out of date documentation.  However  I m by no means certain of that  so maybe the  minute  alias should be there and the bug is that it s not.  Either way  the docs and the library should be consistent  so I think something is wrong. ,machineghost,closed,3,2013-04-03 22:35:17,2013-04-04 18:59:43,,,,0,1
13541,moment/moment,709,added slovak language,,k2s,closed,1,2013-04-04 00:15:05,2013-04-06 06:38:58,,,,1,1
13540,moment/moment,710,Make it easier to normalize strings internally.,More specifically  the whole  minutes    minute    m  string normalization.  This can be used in  701 and  693. ,timrwood,closed,1,2013-04-04 03:58:50,2013-04-27 07:07:51,,,,0,1
13539,moment/moment,711,Add isBeforeNow   and isAfterNow     la Joda Time,[Joda Time] http://joda time.sourceforge.net/   a Java library akin to moment  offers convenience methods  isAfterNow    and  isBeforeNow    in addition to the typical  isAfter    and  isBefore   . Is it alright to add analogs to moment?  If so  I ll convert this issue into a pull request.  ,quietmint,closed,2,2013-04-05 00:14:53,2013-04-09 12:04:57,,,,0,1
13538,moment/moment,712,Bugfix/fixed arabic months,This is the same as  667  but I added a cleanup commit at the end. ,ichernev,closed,1,2013-04-06 06:48:29,2013-04-06 06:53:09,,,,1,1
13537,moment/moment,713,fromNow  future  15 passed 1 failed.,Date.prototype.toString = Sat Apr 06 2013 22:03:56 GMT 1100  AUS Eastern Daylight Time  Date.prototype.toLocaleString = 4/6/2013 10:03:56 PM Date.prototype.getTimezoneOffset =  660    navigator.userAgent = Mozilla/5.0  Windows NT 6.1  AppleWebKit/537.31  KHTML  like Gecko  Chrome/26.0.1410.43 Safari/537.31  fromNow  future  15 passed 1 failed. 264.1 in a few seconds 264.2 in a minute 264.3 in 3 minutes 264.4 in 10 minutes 264.5 in an hour 264.6 in 3 hours 264.7 in 10 hours  za 10 hodin == za 9 hodin  AssertionError: in 10 hours     at Object.equal  http://momentjs.com/js/tests.js?v=2013 03 25T20:21:43 07:00:1531:39      at Object.exports.lang:cs.fromNow  future   http://momentjs.com/js/tests.js?v=2013 03 25T20:21:43 07:00:6632:14      at http://momentjs.com/js/tests.js?v=2013 03 25T20:21:43 07:00:1863:20     at Object.exports.lang:cs.setUp  http://momentjs.com/js/tests.js?v=2013 03 25T20:21:43 07:00:6454:9      at http://momentjs.com/js/tests.js?v=2013 03 25T20:21:43 07:00:1859:19     at Object.exports.runTest  http://momentjs.com/js/tests.js?v=2013 03 25T20:21:43 07:00:1707:9      at http://momentjs.com/js/tests.js?v=2013 03 25T20:21:43 07:00:1753:25     at http://momentjs.com/js/tests.js?v=2013 03 25T20:21:43 07:00:1011:13     at iterate  http://momentjs.com/js/tests.js?v=2013 03 25T20:21:43 07:00:621:13      at http://momentjs.com/js/tests.js?v=2013 03 25T20:21:43 07:00:632:25 ,davegardner,closed,2,2013-04-06 11:06:28,2013-05-20 17:17:42,,Bug,Unit Test Failed,,,0,1
13536,moment/moment,714,Simplified units,Fix for  710. ,icambron,closed,4,2013-04-07 03:54:04,2013-04-08 16:26:02,,,,1,1
13535,moment/moment,715,Added Component 1  support,By adding a  component.json  file we can add Moment as a dependency in Component. Otherwise I have to maintain a fork :cry:  ,anthonyshort,closed,2,2013-04-07 07:15:05,2013-04-08 08:50:34,,,,1,1
13534,moment/moment,716,Moment returns null when passing an empty string,Is this part of the specification or is it documented somewhere? I m having a hard time validating user input and thought I d just throw it into moment and check if it was able to parse it. Since it returns  null   calling  isValid  will of course result in an error.      js console.log moment  KITTEN    DD.MM.YYYY   ; console.log moment       DD.MM.YYYY   ; console.log moment      DD.MM.YYYY   ;//This returns null      http://jsfiddle.net/Gcuxf/ ,Prinzhorn,closed,11,2013-04-08 15:51:24,2013-10-14 06:15:54,,Enhancement,,,0,1
13533,moment/moment,717,Inconsistent toJSON behaviour,Hi  I m trying to serialize/unserialize date objects and having some troubles:      // unserialize date as UTC  and printed in local time moment  2013 03 29T00:00:00.000Z  .format    2013 03 28T21:00:00 03:00   // not serialized in utc :S moment  2013 03 29T00:00:00.000Z  .toJSON    2013 03 28T21:00:00.000Z   // different from native toJSON moment  2013 03 29T00:00:00.000Z  .toDate  .toJSON    2013 03 29T00:00:00.000Z   // unserializing gives wrong object moment moment  2013 03 29T00:00:00.000Z  .toJSON   .toJSON    2013 03 28T18:00:00 03:00  //  =  2013 03 29T00:00:00.000Z       Is this the expected behavior? ,mpaulucci,closed,8,2013-04-08 19:10:09,2013-04-27 07:11:30,,,,0,1
13532,moment/moment,718,Error on set year 1,Hi  it s happening this on set year 1  moment  1/1/1  .toDate   Mon Jan 01 2001 00:00:00 GMT 0500  COT   moment  1/1/0000  .toDate   Mon Jan 01 2000 00:00:00 GMT 0500  COT   moment  1/1/0  .toDate   Mon Jan 01 2000 00:00:00 GMT 0500  COT  ,nathanredblur,closed,1,2013-04-10 15:10:03,2013-04-17 16:33:14,,,,0,1
13531,moment/moment,719,Feature: support display the prefix AD and the suffixes CE,Support display and set dates AD and CE. ,nathanredblur,closed,2,2013-04-10 15:15:45,2014-02-03 03:41:45,,New Feature,,,0,1
13530,moment/moment,720,package.json errors,my error close ,taf2,closed,0,2013-04-10 15:23:11,2013-04-10 15:23:57,,,,0,1
13529,moment/moment,721,Text Error in Momentjs.com site,Line 1092  the site say:  <p>Accepts numbers from  270 00 to 270 000.</p>   Must say  <p>Accepts numbers from  270 000 to 270 000.</p> ,nathanredblur,closed,1,2013-04-10 15:24:09,2013-04-11 06:42:00,,,,0,1
13528,moment/moment,722,Feature: Day in earth. month in earth.,It s two function that return day or month respect to year 1. Example: moment  01/12/0002  .monthFull  ;  = 24  moment  01/12/2001  .monthFull  ;  = 24012  moment  01/01/ 0001  .monthFull  ;  =  12  moment  01/12/0002  .dayFull  ;  = 730 ,nathanredblur,closed,2,2013-04-10 15:34:28,2013-04-27 07:08:40,,,,0,1
13527,moment/moment,723,Problem with the diff   function,I try for example this code :  moment  2012 02 03  .diff moment  2012 02 06     d    it gives me 0  but the answer should be 3... am I not using the function correctly or is it a bug ? ,pierre0042,closed,6,2013-04-11 09:33:15,2013-04-27 07:07:05,,,,0,1
13526,moment/moment,724,On Android 4.0.4 Moment.js 2.0.0 produces errors because of a JavaScript problem,On this Android 4.0.4 device:  Model number LT28h Android 4.0.4 Build Nummer: 6.1.E.0.233 AppleWebKit/534.30  KHTML  like Gecko  Version/4.0 Mobile Safari/534.30  this code produces these results:  y = new Date  ; y.setHours 0 0 0 0 ; y.setFullYear XXXX 1 1 ; alert y.getSeconds   ;  For XXXX you insert these values und get these results:  input: 1901   result: 52 input: 1902   result: 0  input: 2037   result: 0 input: 2038   result: 7  It should always return 0 because we set y.setHours 0 0 0 0 ;  A workaround could be that if you only analyse a time like this: var test = moment   12:00:32    HH:mm:ss  ; You also provide JavaScript with a date like 01.01.1970 so that getSeconds   always returns the correct value. ,googol7,closed,9,2013-04-11 15:27:16,2014-06-05 07:04:00,,Troubleshooting,,,0,1
13525,moment/moment,725,Corrected galician translations gl.js,  Corrected  Octubro    >  Outubro    Corrected  fai    >  hai .  fai  is a spanized fail. Correct example:  two days ago    >  hai dous d as   not  fai dous d as     Corrected  uns segundo    >  un segundo   number agreement  ,DaAira,closed,5,2013-04-12 08:06:37,2013-05-11 21:35:18,,,,1,1
13524,moment/moment,726,Ukrainian long format year error ,    longDateFormat :       LT :  HH:mm       L :  DD.MM.YYYY       LL :  D MMMM YYYY  .       LLL :  D MMMM YYYY  .  LT       LLLL :  dddd  D MMMM YYYY  .  LT          Error in the symbol of the year in  uk.js  file.   .    it s from russian language. In ukrainian language must be   . . Correct example:      longDateFormat :       LT :  HH:mm       L :  DD.MM.YYYY       LL :  D MMMM YYYY  .       LLL :  D MMMM YYYY  .  LT       LLLL :  dddd  D MMMM YYYY  .  LT          Thanks. ,tstar,closed,5,2013-04-13 14:01:39,2013-05-11 22:00:53,,,,0,1
13523,moment/moment,727,startOf/endOf  week   are not locale aware,When I set week.dow to 1 and let s assume it s Saturday 14th April today and I say      moment  .startOf  week        It gives me today instead of Monday 8th April.  http://jsfiddle.net/zQx23/ ,fuwaneko,closed,22,2013-04-14 09:14:32,2013-05-11 21:58:40,,,,0,1
13522,moment/moment,728,Months is not defined,Hi   I am using moment together with require  backbone and underscore.  I am getting this error msg on IE   SCRIPT5007: Unable to get value of the property  months : object is null or undefined  moment.min.js  line 6 character 6208  I tried using the shortMonths  but it is the same result as the one above.  Can you help me out please?  I am passing jquery as a dependency for moment  like this    moment:              deps:[ jquery ]           ,kaizaan,closed,9,2013-04-15 07:28:50,2013-04-24 07:22:27,,,,0,1
13521,moment/moment,729,ordinal in french,from http://momentjs.com/  moment  .format  MMMM Do YYYY  h:mm:ss a  ; => avril 15 me 2013  6:14:29 pm moment  .format  MMM Do YY  ; => avr. 15 me 13 ,MasseGuillaume,closed,1,2013-04-15 22:17:17,2013-04-17 16:45:45,,,,0,1
13520,moment/moment,730,ordinals in french are only for the first day of the month,,MasseGuillaume,closed,5,2013-04-15 22:37:33,2013-04-24 06:31:14,,,,1,1
13519,moment/moment,731,performance,When you give the format to the Moment.js function  it works in many cases slower than just giving no format.  Compare these tests: http://jsperf.com/moment js parse iso date/8  Sometimes  the difference is really big.  It looks like  when you don t give a format  moment.js test if it s in ISO format  and calls a native function. If you give a format  it just starts regexing and loses time.  Would it be possible to first test if the given format is an ISO format  and if it is  work with the native function?  ,sanderd17,closed,9,2013-04-16 07:45:19,2013-04-18 11:12:49,,,,0,1
13518,moment/moment,732,isValid   exception on empty value,Hello   moment  test  .isValid     return false   super. But moment    .isValid   or moment null .isValid     throw exception.  This is bug or feature?  Thanks. ,tstar,closed,2,2013-04-16 13:00:42,2013-05-11 21:56:26,,,,0,1
13517,moment/moment,733,Is there a version that does not require  Require.js  ?,Before 2.0 I don t believe the language files were using:  require  ../moment     Has this change? Have I missed something somewhere.... is there a version of the language files  where I don t HAVE to go in and strip this syntax out? ,UTGuy,closed,5,2013-04-16 14:10:37,2013-04-27 07:41:42,,,,0,1
13516,moment/moment,734,Add duration.add method,Mostly I just copied over code from the moment   s add   method    similar functionality for durations. ,chbrown,closed,5,2013-04-17 10:45:52,2013-06-05 09:20:10,,New Feature,,,1,1
13515,moment/moment,735,Wrong language in docs sample,The docs for the meridiem setting show a Chinese example  but using the  en  culture.  http://momentjs.com/docs/ /customization/am pm/ ,mj1856,closed,1,2013-04-17 16:35:10,2013-05-11 21:55:38,,,,0,1
13514,moment/moment,736,isValid   inaccurate on IE9,On the Moment.js website  in the console :      moment  01/32/99  .isValid   // returns true in IE9  false elsewhere.     ,jnewman,closed,1,2013-04-18 00:15:32,2013-04-18 16:43:30,,,,0,1
13513,moment/moment,737,Nepalese language affects ISO formatting,Not that I speak Nepalese  but I was just playing with the language buttons on the main momentjs.com website  and I noticed that when Nepalese is selected  the numerals change.  This is probably the right thing to do for normal formatting  if that s what Nepalese looks like.  However  the ISO8601 format is also changed  and that is supposed to be culture invariant.  moment.format    when no parameters are supplied  and moment.toJSON   should probably not be affected by the language setting. ,mj1856,closed,6,2013-04-19 03:41:16,2013-04-27 07:04:05,,Bug,,,0,1
13512,moment/moment,738,unused currentDate variable,super minor: line 785 currentDate is unused. ,lookfirst,closed,1,2013-04-22 01:36:27,2013-04-22 08:22:30,,,,0,1
13511,moment/moment,739,Logic in zh cn.js to judge AM or PM is wrong,https://github.com/timrwood/moment/blame/develop/lang/zh cn.js L25 I think the following code may correct it:  hour < 11     hour == 11    minute < 30     return     ;   else if  hour < 13     hour == 13    minute < 30     return     ;    similar in zh tw.js ,waythe,closed,4,2013-04-23 08:35:44,2013-10-31 17:37:05,,Language,,,0,1
13510,moment/moment,740,add moment  .intervalNow   for bidding  etc...,moment  2013 04 27T05:48:29.000Z  .intervalNow    3 days 15 hours 2 minutes 53 seconds   moment  2013 04 27T05:48:29.000Z  .intervalNow 1   in 3 days 15 hours 2 minutes 53 seconds   need for exact left time without timezone  thank you.      diff     moment.orig.js  2013 04 23 23:38:38.945626866  0900     moment.js   2013 04 23 23:34:49.304488112  0900 @@  436 6  436 7 @@              future :  in  s                past :   s ago                s :  a few seconds                ss :   d seconds                m :  a minute                mm :   d minutes                h :  an hour   @@  1163 6  1164 25 @@              return this.from moment    withoutSuffix ;                      interval : function  time  withoutSuffix                var i = this.diff time                   d = moment.duration Math.abs i                    a = d._data                  l = d.lang                    f = [];             if a.years  f.push l.relativeTime a.years  0   yy   ;             if a.months  f.push l.relativeTime a.months  0   MM   ;             if a.days  f.push l.relativeTime a.days  0   dd   ;             if a.hours  f.push l.relativeTime a.hours  0   hh   ;             if a.minutes  f.push l.relativeTime a.minutes  0   mm   ;             if a.seconds  f.push l.relativeTime a.seconds  0   ss   ;             return withoutSuffix ? l.pastFuture i  f.join       : f.join     ;                      intervalNow : function  withoutSuffix                return this.interval moment    withoutSuffix ;                       calendar : function                   var diff = this.diff moment  .startOf  day     days   true                    format = diff <  6 ?  sameElse  :     ,crucifyer,closed,3,2013-04-23 14:49:11,2013-05-11 21:53:19,,,,0,1
13509,moment/moment,741,moment date .format  MMMM YYYY   not working on Safari and IE8,Hi   I have a date with only the year and month. For example   2013 02 .  When i tried to do this:  moment mydate .format  MMMM YYYY  ; in the other Firefox  IE9  Chrome  Opera 12 I get no error and i correctly get my date formatted as February 2013.  But the same thing in Safari and IE8 give me  undefined0NaN  and sometimes  undefined0undefined .  Can you please check this issue. ,kaizaan,closed,2,2013-04-24 07:19:54,2013-04-25 05:31:20,,,,0,1
13508,moment/moment,742,AMD is not really optional,Hi  I ve noticed that after this https://github.com/timrwood/moment/issues/479 issue  all the language files are supporting AMD.  In the main library you use      javascript     /                                             Exposing Moment                                         /       // CommonJS module is defined     if  hasModule            module.exports = moment;           / global ender:false  /     if  typeof ender ===  undefined             // here   this  means  window  in the browser  or  global  on the server         // add  moment  as a global object via a string identifier          // for Closure Compiler  advanced  mode         this[ moment ] = moment;           / global define:false  /     if  typeof define ===  function     define.amd            define  moment   []  function                  return moment;           ;            to optionally support AMD if present. Problem is that the language files are just using a  require    method and if you don t have require.js  like I do  it breaks.  Is it possible to make the require optional even in all the lang files=? :   ,vshjxyz,closed,1,2013-04-24 13:13:42,2013-04-27 06:47:39,,,,0,1
13507,moment/moment,743,TypeError: Result of expression  string.slice  [undefined] is not a function. at moment.min.js:758,https://github.com/timrwood/moment/blob/develop/moment.js L795 On android default browser  when: moment  .format  DD.MM.YY  ; Quick fix is: string = new String string .slice string.indexOf parsedInput    parsedInput.length ; ,Kirill89,closed,3,2013-04-24 23:54:57,2013-05-11 21:51:17,,,,0,1
13506,moment/moment,744,Chinese time format like  4   25    for  Apr 25th  not support,The codes and the outputs:       js moment  .lang  en  .format  MMM DD   //  Apr 25  moment  .lang  en  .format  MMM Do   //  Apr 25th  moment  .lang  zh cn  .format  MMM DD   //  4  25  moment  .lang  zh cn  .format  MMM Do   //  4  25       Usually we use a date format like  4   25    in Chinese      is not omitted. Is there any solution for me to customize? ,jiyinyiyong,closed,8,2013-04-25 02:42:09,2013-04-27 06:42:31,,,,0,1
13505,moment/moment,745,add moment  .intervalNow   for exact left time without timezone,moment  2013 04 27T05:48:29.000Z  .intervalNow    3 days 15 hours 2 minutes 53 seconds   moment  2013 04 27T05:48:29.000Z  .intervalNow 1   in 3 days 15 hours 2 minutes 53 seconds   need for exact left time without timezone  thank you. ,crucifyer,closed,5,2013-04-25 05:56:17,2013-06-03 17:15:24,,New Feature,,,1,1
13504,moment/moment,746,Added Norwegian nynorsk localization,Added norwegian nynorsk ,mrtnjrrtt,closed,0,2013-04-25 07:26:31,2013-04-25 08:00:44,,,,1,1
13503,moment/moment,747,Ignore DST for day  week  month and year diffs,Diffs across timezones behave better now:   diffing days  weeks  months and years units ignores DST  meaning you can take the two local times  they are in potentially different timezones   and then do the arithmetic   diffing hours  minutes  seconds and ms takes DST into account  meaning you take the two utc times  and then do the arithmetic  That mostly worked up to now  excluding some very special month  year cases and all day  week cases  across dst . This should hopefully fix  626   606  but the problem is that tests expect DST to happen on particular dates  USA DST   so I m not sure how to tackle this for now :   ,ichernev,closed,6,2013-04-25 08:14:51,2013-06-10 16:50:19,,Enhancement,,,1,1
13502,moment/moment,748,Added Norwegian nynorsk localization,Added Norwegian nynorsk localization ,mrtnjrrtt,closed,2,2013-04-25 09:10:57,2013-04-27 06:45:54,,,,1,1
13501,moment/moment,749,Fix translation for Swedish, f r  shouldn t be prepended ,jmagnusson,closed,10,2013-04-26 08:41:13,2013-04-28 07:28:15,,,,1,1
13500,moment/moment,750,set hook to add ordinal for Chinese cn    tw  with modifing the tests,Try to fix https://github.com/timrwood/moment/issues/744 by adding a hook. If it is ok  the docs need to be updated for this issue. ,jiyinyiyong,closed,3,2013-04-27 02:55:31,2013-04-27 06:41:35,,,,1,1
13499,moment/moment,751,toJSON should not call lang.postformat,As discussed here:  737 ,ichernev,closed,1,2013-04-27 07:03:40,2013-04-29 17:56:45,,,,1,1
13498,moment/moment,752,Bugfix/gl lang,I merged two branches from @DaAria and fixed the lang file a bit so tests pass. ,ichernev,closed,3,2013-04-27 07:32:25,2013-06-03 17:18:58,,Language,,,1,1
13497,moment/moment,753,Corrected Ukrainian and optimized Russian,Here s what I ve done:       Optimized Russian and Ukrainian plural rules. Actually there are only three forms  and there s no reason to duplicate the second one  cf. original lang/ru.js ;   Changed Ukrainian messages to fit literary standard  fixes  726. ,Menelion,closed,5,2013-04-28 12:49:55,2013-04-29 19:01:32,,,,1,1
13496,moment/moment,754,Get month for February works incorrectly,Actual result: moment  .month 0 .format  MMM   //  Jan  moment  .month 1 .format  MMM   //  Mar  <   there is a bug moment  .month 2 .format  MMM   //  Mar  moment  .month 3 .format  MMM   //  Apr   Expected result for moment  .month 1 .format  MMM      Feb  ,legaev-stas,closed,5,2013-04-29 09:07:22,2013-07-08 01:35:16,,Troubleshooting,,,0,1
13495,moment/moment,755,Added pastFromNow,This is a useful alternative to fromNow when you know the date is in the past. See @icambron comment in issue  537. Let me know if you prefer adding an option parameter to  fromNow . ,jazzzz,closed,20,2013-04-29 11:54:58,2013-06-03 17:19:23,,Enhancement,,,1,1
13494,moment/moment,756,Separate messages for the day before yesterday and the day after tomorrow,Creating this issue for discussion as suggested by @ichernev.   In many languages there are separate words for the day before yesterday and for the day after tomorrow:       Ukrainian:                          Russian:                          French: Avant hier  apr s demain   Spanish: Anteayer  Pasado ma ana   Swedish: F rrg r   vermorgon   German: Vorgestern   bermorgen  So do we need this in Moment.js?   If the answer is  yes   I can code this out as well as modify corresponding languages and unit tests : . ,Menelion,closed,16,2013-04-29 19:12:26,2013-05-10 11:50:10,,,,0,1
13493,moment/moment,757,moment  .endOf  week   returning wrong dates/times,Hello   If I run a simple  moment  .endOf  week  .format  ;  right now  1:29 pm on Monday  4/29   I m getting the following back:   2013 05 06T13:29:58 07:00   next Monday at 1p   Obviously  I d expect endOf  week   to return 11:59 on the last day of this week  Saturday  presumably  since I haven t modified any of the config options   as opposed to a date/time exactly one week from now.  Cheers    [image] https://f.cloud.github.com/assets/959972/440994/dfc009c8 b10c 11e2 8f83 c70caaab6256.png    [image] https://f.cloud.github.com/assets/959972/440996/e848cd5a b10c 11e2 95b3 a6a5a75239e2.png  ,katowulf,closed,5,2013-04-29 20:41:54,2013-04-30 17:09:29,,,,0,1
13492,moment/moment,758,Moment str  fmts  seems to be mutating second argument when it is a list,I am not sure if this is intended behaviour  but it sure looks strange. The following snippet of code:      var moment = require  moment        fmts = [ YYYY MM DD    MM DD YYYY ];  console.log  fmts before:     fmts ; var d = moment  2013 05 05   fmts ; console.log  first parse:     d ; console.log  fmts after:     fmts ;  d = moment  2013 05 05   fmts ; console.log  fmts before:     fmts ; console.log  second parse:     d ;      Produces the following output:      fmts before: YYYY MM DD MM DD YYYY first parse: 1367704800000 fmts after:  fmts before:  second parse: NaN      I am a bit confused by the above output. It seems as if the fmts array is cleared somehow during the parse? At the moment I ve sovled the issue by always cloning the array of format strings before passing them to the moment function but I just want to raise this as a possible issue.  This is with moment 2.0.0 on node 0.10.5 ,nicokruger,closed,1,2013-04-29 21:22:32,2013-04-30 08:41:58,,,,0,1
13491,moment/moment,759,Please submit an issue to github.com/timrwood/moment/issues with the information below and the failing tests.,Date.prototype.toString = Tue Apr 30 2013 09:35:17 GMT 0300  Hora oficial do Brasil  Date.prototype.toLocaleString = 30/4/2013 09:35:17 Date.prototype.getTimezoneOffset = 120 navigator.userAgent = Mozilla/5.0  Windows NT 6.2; WOW64  AppleWebKit/537.31  KHTML  like Gecko  Chrome/26.0.1410.64 Safari/537.31 ,gustavoconci,closed,1,2013-04-30 12:36:14,2013-04-30 16:58:11,,,,0,1
13490,moment/moment,760,new version/tag for bower,There are some translations in the repository that have been added after the latest tag and those are not accessible when using bower.  Could you please create a new release? ,stream7,closed,1,2013-04-30 12:43:22,2013-04-30 20:20:40,,,,0,1
13489,moment/moment,761,isValid should check if it s valid : , moment    .isValid    and  moment null .isValid    break. They ideally should return false and not require a pre validation check. ,cyberwombat,closed,4,2013-04-30 17:48:42,2013-05-11 20:43:36,,,,0,1
13488,moment/moment,762,Dutch  nl  short months are wrong,When I do       javascript var L10n = moment  .lang  nl  ; L10n.lang  [ _monthsShort ];      I expect to see the short month names in Dutch  but instead  I see       javascript [ Jan    Feb    Mar    Apr    May    Jun    Jul    Aug    Sep    Oct    Nov    Dec ]      Which are the English abbreviations. Note that the Dutch language file has them correct: https://github.com/timrwood/moment/blob/develop/lang/nl.js  most notably   May  vs  mei    but they don t come correct out of the function.  This problem doesn t exist in the other language I tested  and doesn t exist in the other localised Dutch fields  s.a.  _months  or  _weekdays  . ,sanderd17,closed,2,2013-05-01 09:50:42,2013-05-01 23:09:51,,,,0,1
13487,moment/moment,763,Documentation  Wrong  for Day of Week Formattypes,The Documentation on the Website Says for String   Format: d  dd  ddd  dddd    Day of week  NOTE: the input for these tokens is ignored  as there are 4 5 weeks in a month  and it would be impossible to get the day of the month based off the day of the week   But the Documentation for Display Format Says  d do ddd dddd  thats not the same like in String   Format  mfg SquadWuschel ,squadwuschel,closed,1,2013-05-01 20:14:09,2013-05-11 21:38:02,,,,0,1
13486,moment/moment,764,inconsistent parse results between IE8 and Chrome, disclaimer: this could be a limitation of IE  so I m tagging it as a question and not a bug   The following examples:      javascript moment  March 2013  .isValid  ; moment  03 March 2013  .isValid  ;       in Chrome26  returns true   in IE8  returns false ,morficus,closed,2,2013-05-02 05:00:33,2013-05-03 07:51:07,,,,0,1
13485,moment/moment,765,Recommended way to get uppercase short month name?,To get this format  02 MAY 2013  I m currently doing this:      JavaScript  moment  .format  DD MMM YYYY  .toUpperCase  ;      Is there a better way?  I m aware that I could introduce some custom [month abbreviations] http://momentjs.com/docs/ /customization/month abbreviations/   but I currently only want to apply the formatting to this instance of the date. ,paulyoung,closed,2,2013-05-02 16:36:42,2013-05-02 23:18:59,,,,0,1
13484,moment/moment,766,Format function now uses  instanceof  on a var rather than  typeof  on t...,...hat var s call to determine if the variable is a function.  This fixes an incompatibility with ClojureScript  which defines String.prototype.call as a function.  That ClojureScript defines String.prototype.call is admittedly undesirable  but the timeline for changing that behavior is unknown  and this fix will allow ClojureScript uses to use moment.js in the interim  with no downside that I m aware of. ,gensym,closed,1,2013-05-05 04:25:31,2013-05-09 06:38:33,,,,1,1
13483,moment/moment,767,Added support for breton language,Added support for breton language ,jbleduigou,closed,5,2013-05-07 08:57:55,2013-05-17 04:56:47,,Language,,,1,1
13482,moment/moment,768,Accept  a.m.  and  p.m.  for  am  and  pm ,Would like moment to recognize  a.m.  as  am  and  p.m.  as  pm . ,gerald101,closed,1,2013-05-08 13:43:30,2013-05-09 08:18:38,,,,0,1
13481,moment/moment,769,Ru localization problems,There s the  require  directive on 53d row  so it doesn t work for those who don t use require.js in their projects. Also  the minified version of ru.js is outdated. ,mngr,closed,3,2013-05-08 13:55:19,2013-05-11 20:25:57,,,,0,1
13480,moment/moment,770,Updated minified lang files,I ve updated minified lang files as requested in  769. I could add the fix for Russian if I know how to do that  ,Menelion,closed,3,2013-05-08 14:30:05,2013-05-10 07:45:22,,,,1,1
13479,moment/moment,771,add .clearTime   function,There is a frequent task of zeroing all time properties in some Date object. It would be great to have a function for that  like .clearTime   in this library: https://code.google.com/p/datejs/wiki/APIDocumentation ,mngr,closed,2,2013-05-08 17:19:09,2013-05-08 18:08:36,,,,0,1
13478,moment/moment,772, npm test  warns  Recursive process.nextTick detected   crashes with  RangeError: Maximum call stack size exceeded ,When I run the unit tests  they crash on a stack overflow.        npm test  > moment@2.0.0 test c: Documents and Settings apenneba Desktop src moment > grunt  Running  jshint:all   jshint  task >> 51 files lint free.  Running  nodeunit:all   nodeunit  task Testing ar ma.js.....................OK Testing ar.js.....................OK Testing bg.js.....................OK Testing ca.js....................OK Testing cs.js.......................OK Testing cv.js.....................OK Testing da.js.................OK Testing de.js....................OK Testing el.js.....................OK Testing en ca.js.....................OK Testing en gb.js.....................OK Testing en.js.....................OK Testing eo.js.....................OK Testing es.js.....................OK Testing et.js.....................OK Testing eu.js.....................OK Testing fi.js.....................OK Testing fr ca.js....................OK Testing fr.js....................OK Testing gl.js.....................OK Testing he.js....................OK Testing hi.js......................OK Testing hu.js.....................OK Testing id.js....................OK Testing is.js.....................OK Testing it.js....................OK Testing ja.js....................OK Testing ka.js.....................OK Testing ko.js.....................OK Testing lv.js.....................OK Testing ms my.js.....................OK Testing nb.js.....................OK Testing ne.js......................OK Testing nl.js......................OK Testing nn.js.....................OK Testing pl.js.....................OK Testing pt br.js....................OK Testing pt.js....................OK Testing ro.js.....................OK Testing ru.js.....................OK Testing sk.js.......................OK Testing sl.js.....................OK Testing sv.js.....................OK Testing th.js....................OK Testing tr.js.....................OK Testing tzm la.js.....................OK Testing tzm.js.....................OK Testing uk.js..................... node  warning: Recursive process.nextTick detected. This will break in the next version of node. Please use setImmediate for recursive deferral.  node  warning: Recursive process.nextTick detected. This will break in the next version of node. Please use setImmediate for recursive deferral.  node  warning: Recursive process.nextTick detected. This will break in the next version of node. Please use setImmediate for recursive deferral.  node  warning: Recursive process.nextTick detected. This will break in the next version of node. Please use setImmediate for recursive deferral.  node  warning: Recursive process.nextTick detected. This will break in the next version of node. Please use setImmediate for recursive deferral.  ...   node  warning: Recursive process.nextTick detected. This will break in the next version of node. Please use setImmediate for recursive deferral.  node  warning: Recursive process.nextTick detected. This will break in the next version of node. Please use setImmediate for recursive deferral.  node  warning: Recursive process.nextTick detected. This will break in the next version of node. Please use setImmediate for recursive deferral.  node  warning: Recursive process.nextTick detected. This will break in the next version of node. Please use setImmediate for recursive deferral.  util.js:35   var str = String f .replace formatRegExp  function x                          ^ RangeError: Maximum call stack size exceeded npm ERR  Test failed.  See above for more details. npm ERR  not ok code 0      This seems to happen in more recent versions of Node.js. mocha was able to fix [similar errors] https://github.com/visionmedia/mocha/pull/754  by replacing with  setImmediate  when available.  System:    specs node os Specs:  specs 0.4 https://github.com/mcandre/specs readme  npm   version 1.2.17  node   version v0.10.3  systeminfo   findstr /B /C: OS Name  /C: OS Version  OS Name:                   Microsoft Windows XP Professional OS Version:                5.1.2600 Service Pack 3 Build 2600 ,mcandre,closed,4,2013-05-08 19:49:20,2013-05-09 08:00:32,,,,0,1
13477,moment/moment,773,Accept A.M. and P.M. in addition to AM and PM,This is related to  768.  @timrwood I m not too happy that a change in the parsing regexp is needed. Also I m not sure how useful it is. There are also requests for localizing this  so I d personally vote no merge :  ,ichernev,closed,4,2013-05-09 08:18:18,2013-05-23 05:25:06,,New Feature,,,1,1
13476,moment/moment,774,EN GB localization may be wrong,I don t know if I m right  but the  en gb  localization says that the  L  format is  DD/MM/YYYY . Shouldn t it be  MM/DD/YYYY ? ,frapontillo,closed,2,2013-05-09 11:42:46,2013-05-09 19:23:35,,,,0,1
13475,moment/moment,775,Feature: toJSON   options,Add an option to allow either the current time zone designator  which only displays GMT as the time zone  or additionally allow the time zone offset to be displayed  ie.  hh:mm or  hh:mm  in the JSON return. ,crmerriman,closed,2,2013-05-09 12:34:06,2013-05-11 21:36:24,,,,0,1
13474,moment/moment,776,startOf  week   always returns Sunday,When you set  dow  to Monday with the lang method   moment  .startOf  week    still returns Sunday.  The fiddle to demonstrate it: http://jsfiddle.net/hzYMx/  Am I using moment the wrong way? ,smhg,closed,1,2013-05-11 18:37:26,2013-05-11 20:33:20,,,,0,1
13473,moment/moment,777,Adding hooks for external libs to supply timezone name and timezone abbreviations,This is to allow libs like  moment timezone  and others to provide timezone information by overwriting  moment.fn.zoneName  and  moment.fn.zoneAbbr . ,timrwood,closed,6,2013-05-11 21:12:37,2013-05-23 00:20:25,,New Feature,Timezones,,,1,1
13472,moment/moment,778,calendar   display with time OR without time,Sometimes I want to display the calendar date without the time  such as  Today  instead of  Today at 12:00 AM   I realize you can edit the localization strings  but then this prevents the possibility of also occasionally using calendar   to display _with_ the time  I think there should be an option  or a sibling function to be able to do this ,mgray88,closed,6,2013-05-14 05:01:10,2014-06-05 07:13:07,,New Feature,,,0,1
13471,moment/moment,779,Fix AMD support  remove the module name, You can explicitly name modules yourself  but it makes the modules less portable.     It is normally best to avoid coding in a name for the module and just let the optimization tool burn in the module names.   Please see http://requirejs.org/docs/api.html modulename. ,Baggz,closed,2,2013-05-14 11:33:01,2013-05-14 19:08:46,,New Feature,,,1,1
13470,moment/moment,780,Fix escaping,,balazsmeszegeto,closed,4,2013-05-14 11:34:39,2013-05-20 17:56:26,,Language,,,1,1
13469,moment/moment,781,Update it.js,changed  relativeTime.future  from  in  to  tra  ,nostalgiaz,closed,5,2013-05-14 16:22:02,2013-05-20 15:12:03,,Language,,,1,1
13468,moment/moment,782,Adding Albanina to Momentjs project,please add it ,diamantsallahu,closed,5,2013-05-14 16:38:30,2013-07-14 22:27:30,,,,0,1
13467,moment/moment,783,Supported browsers missing from docs,The documentation should make it clear which versions of which browsers are supported.  Thanks. ,mj1856,closed,5,2013-05-14 16:50:00,2014-02-03 03:59:12,,Documentation,,,0,1
13466,moment/moment,784,Add composer.json,Please add this to packagist.org so Symfony/Zend framework users can pull this in via composer.   also was not sure if to do this on master or develop  i can move it to master if you prefer .  Thanks. ,reecefowell,closed,1,2013-05-15 12:47:44,2013-05-17 07:54:56,,,,1,1
13465,moment/moment,785,Add composer.json  on master , was unsure if doing that on develop was best  as i am guessing it could be some time until you rebase master from develop  so it would be best to do this on master instead.  Here was the other PR  ill probably close the other  and hope that this one gets merged instead:  https://github.com/timrwood/moment/pull/784 ,reecefowell,closed,1,2013-05-15 13:07:08,2013-05-17 07:56:27,,,,1,1
13464,moment/moment,786,Get localized formats more precise,_LLL_ and _LLLL_ formats add the time to the date. What if I want to write a localized full date without time ?  Correct me if there is already a build in solution for this  but I would suggest this more precise set of formats:   LT           8:30 PM   L             09/04/1986   LL           September 4th 1986   LLT         September 4th 1986 8:30 PM   LLLL        Thursday  September 4th 1986   LLLLT      Thursday  September 4th 1986 8:30 PM  Other suggestion:   L     09/04/1986   LL        September 4th 1986   LLL       Thursday  September 4th 1986   T              8:30 PM   LT           09/04/1986 8:30 PM   LLT         September 4th 1986 8:30 PM   LLLT       Thursday  September 4th 1986  8:30 PM ,jokesterfr,closed,7,2013-05-16 09:53:28,2014-02-03 04:00:19,,Enhancement,,,0,1
13463,moment/moment,787,Localized formats,When I apply the format LL  I get this:      September 4 1986      But the expected result is this:      September 4th 1986      Is possible that other localized formats fails in the same way  I didn t check it.  Fiddle demostration: http://jsfiddle.net/QrFzh/ ,magarcia,closed,2,2013-05-16 15:03:46,2013-07-14 22:55:26,,,,0,1
13462,moment/moment,788,String   Formats not working as expected,The following does not work as I expect:      moment  02 11 1999   [ DD MM YYYY    YYYY MM DD ]       It yields:        _i:  02 11 1999     _f:  YYYY MM DD     _l: undefined    _isUTC: false    _a:     [ 2       10       19       0       0       0       0 ]    _d: Tue Nov 19 2 00:00:00 GMT 0100  CET     _isValid: true        ...when Jesus was just born.  makeDateFromStringAndArray config  seems to completely ignore the defined lengths in format string and only validate some values  i. e. the month must be <13 and the day  or the first two digits of the actual year part  must be smaller or equal to the number of days in that month. The unit tests seem to pass  because the example date and example formats are well chosen such that only in the correct format no month constraint is violated.       string with array of formats  : function test            test.expect 3 ;         test.equal moment  13 02 1999   [ MM DD YYYY    DD MM YYYY ] .format  MM DD YYYY     02 13 1999    switching month and day  ;         test.equal moment  02 13 1999   [ MM/DD/YYYY    YYYY MM DD    MM DD YYYY ] .format  MM DD YYYY     02 13 1999    year last  ;         test.equal moment  1999 02 13   [ MM/DD/YYYY    YYYY MM DD    MM DD YYYY ] .format  MM DD YYYY     02 13 1999    year first  ;         test.done  ;             I expect the format to be sensitive to the given lengths and separators in the format strings. ,ToniTornado,closed,3,2013-05-17 13:28:34,2013-07-14 22:57:38,,Bug,,,0,1
13461,moment/moment,789,languages returned by moment.langData run on server should work when set in client,If you install the npm module of moment and use it in your server  and use momentjs as a script in your browser  you cannot take the output of moment.langData  fr   and use it in the client as a dictionary when doing  moment.lang . Instead you first have to strip a underscore off all members of the dictionary/object/language definition  and as of 2.0.0  make sure that you skip doing that for any member field with a type of function .  Perhaps I ve missed the right functions for transferring a language definition  but the currently approach I ve found is fragile and hacky. Either a pointer to the correct way of doing this or support to make this easier in moment in the future would be great.  Thanks. ,bpytlik,closed,2,2013-05-18 02:35:50,2013-05-23 00:27:57,,,,0,1
13460,moment/moment,790,startOf week  should move to a locale specific day.,As it is now  that function always goes to Sunday.  I think it should rather pick the first day of the week  as per i18n settings. ,akoprow,closed,1,2013-05-20 00:17:21,2013-05-20 15:08:18,,,,0,1
13459,moment/moment,791,Supporting A.M. and P.M. and moving isPM check to Language,Based on comments in  773. ,timrwood,closed,3,2013-05-20 15:20:31,2013-05-29 00:29:26,,,,1,1
13458,moment/moment,792,Information about running under Java/Rhino,I just wanted to share the code we re using to run moment using Java s JS scripting engine. Not everything is tested  but so far the basics have worked fine. Maybe this can be included in a wiki somewhere.  https://gist.github.com/UnquietCode/5614860 ,UnquietCode,closed,2,2013-05-20 19:40:44,2013-07-14 22:59:38,,,,0,1
13457,moment/moment,793,method to check utc flag of moment.,It appears your API is missing a method to check whether the moment object has been put into utc or local time mode.  Perhaps a few methods needed like so...  var m = moment  ; // local timezone  m.isLocalTime  ; // return true m.isUTCTime  ; // return false  m.utc  ;  // convert moment to UTC display mode  m.isLocalTime  ; // return false m.isUTCTime  ; // return true ,bcowgill,closed,10,2013-05-21 13:09:39,2013-07-14 23:01:33,,,,0,1
13456,moment/moment,794,Moment.isMoment doesn t always work in node.js, I can t reproduce this in an jsFiddle   I have a rather complicated problem with  Moment.isMoment  which I have narrowed down to the following.  The current implementation of  Moment.isMoment  makes use of the  instanceof  operator which checks a pointer to the actual class  or more correctly function .  This dosen t work if I where to define a new class with the exact same properties and names and this is what happens when  require  fails to reuse the same object the next time you call  require  moment  ; .  When loading a module which in turn loads moment  it won t load the same moment as if you use require directly in your app. So if you use a library which uses  isMoment   it will always return  false  for moments that you yourself creates.  One way to solve it would be to use something like this:      javascript isMoment = function o      return       Object.keys o .length === 4        o.hasOwnProperty  _d          o.hasOwnProperty  _isUTC          o.hasOwnProperty  _a          o.hasOwnProperty  _lang     ;  ;      This test could possible made more stricter by checking the type of each property. ,SLM-Linus,closed,4,2013-05-21 14:41:14,2013-05-22 08:29:21,,,,0,1
13455,moment/moment,795,UK time format fix,GB uses 24H format       love this project  keep up the good work : 1:  ,gdibble,closed,5,2013-05-22 01:23:31,2013-05-23 05:18:19,,,,1,1
13454,moment/moment,796,Unit Test failed  two errors ,> 55.4   1.0013888888888889 ===  1  Jan 28 to Feb 28 should be 1 month  true == false  > 55.5   0.9347222222222222 ===  0.9333333333333333  Jan 31 to Feb 29 should be 1    2/30  months  true == false   Please submit an issue to github.com/timrwood/moment/issues with the information below and the failing tests.  Date.prototype.toString = Wed May 22 2013 13:29:44 GMT 0300  Hora oficial do Brasil  Date.prototype.toLocaleString = 22/5/2013 13:29:44 Date.prototype.getTimezoneOffset = 120 navigator.userAgent = Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.31  KHTML  like Gecko  Chrome/26.0.1410.64 Safari/537.31 ,LeaveSpaceBlank,closed,1,2013-05-22 16:37:16,2013-05-23 05:19:28,,Unit Test Failed,,,0,1
13453,moment/moment,797,test updates for en GB time formatting,ex. 2:00 AM >>> 02:00 ,gdibble,closed,1,2013-05-23 03:59:34,2013-05-23 04:02:47,,,,1,1
13452,moment/moment,798,Format LLL returns 12:00 but moment hours are 0,Hello   my issue is already described in the title. I working with a date that is a calendar day  for instance 05/13/2013 00:00. If I format the moment with LLL or LT  it returns me 12:00 AM. If i call hours    this function returns 0. So is this a Bug  or where das it come from that it shows me 12:00 AM instead of 00:00 AM? The actual moment language I m using is  en . ,bigvibez,closed,2,2013-05-23 06:30:16,2013-05-23 17:15:59,,,,0,1
13451,moment/moment,799,Formatting broken?,I just downloaded moment.js and tried the following in Chrome:      Javascript moment  .format  ddd  hA  ;      Which outputs:  Thunullundefined11AM   What am I missing?  David ,dubiousdavid,closed,4,2013-05-23 15:34:42,2013-07-14 23:10:53,,,,0,1
13450,moment/moment,800,Adding moment min and moment max  755,This adds the  max  and  min  methods noted in  755.  The max method returns the original moment only if it is before the max. Otherwise  it returns the max.      javascript pastMoment.max moment   ; // pastMoment futureMoment.max moment   ; // now futureMoment.max pastMoment ; // pastMoment      The min method returns the original moment only if it is after the min. Otherwise  it returns the min.      javascript pastMoment.min moment   ; // now futureMoment.min moment   ; // futureMoment futureMoment.min pastMoment ; // futureMoment      Both methods accept anything that can be passed to  moment   .      javascript moment  .max  septiembre 3 2006    MMMM D YYYY    es  ;      Passing no arguments defaults to now.      javascript // all different names for the same thing moment  .max  ; moment  .max moment   ;      Edit: Removed  now  argument. ,timrwood,closed,6,2013-05-23 19:26:22,2013-06-03 17:26:46,,,,1,1
13449,moment/moment,801,Test failed,Date.prototype.toString = Fri May 24 2013 11:18:15 GMT 0300  Hora oficial do Brasil  Date.prototype.toLocaleString = 24/5/2013 11:18:15 Date.prototype.getTimezoneOffset = 120 navigator.userAgent = Mozilla/5.0  Windows NT 6.2; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/27.0.1453.93 Safari/537.36 ,pleiadess,closed,5,2013-05-24 14:21:51,2013-09-12 11:05:28,,Unit Test Failed,,,0,1
13448,moment/moment,802,Added macedonian language,Added Macedonian Language. ,B0k0,closed,7,2013-05-24 21:49:39,2013-11-13 21:57:47,,Language,Needs tests,,,1,1
13447,moment/moment,803,More fixes to Ukrainian: literary standard fix plus special case for 11 hours processing,What I ve done:       Fixed Ukrainian pseudo dual  plural for few  forms for days and months to fit the literary standard  mea culpa  didn t notice this when made the previous PR ;   Added special processing for 11 hours. @ichernev  you ll understand  as you can read Cyrillic :  . the thing is that in Ukrainian we say hours with preposition    which I ve fixed in the previous PR . However  the number 11 starts with a vowel  as in Bulgarian  but from    not from   . And  if the next word starts with a vowel    becomes     so            at 10 o clock   but                 at 11 o clock . ,Menelion,closed,11,2013-05-24 23:30:23,2013-06-03 16:43:47,,,,1,1
13446,moment/moment,804,ISO 8601 parsing doesn t work with named timezones,If I parse an ISO 8601 with a three letter timezone at the end  it comes out as invalid.  Curiously  if I call Date.parse then it works fine  which points to it being a bug in the extra browser compatible ISO 8601 parser in moment.      javascript > moment  2013 04 23 15:23:47 UTC  .isValid   false > moment Date.parse  2013 04 23 15:23:47 UTC   .isValid   true > moment  2013 04 23 15:23:47 UTC   D  _i:  2013 04 23 15:23:47 UTC   _f:  YYYY MM DDTHH:mm:ss   _l: undefined  _isUTC: false  _a: Array[7]   > moment Date.parse  2013 04 23 15:23:47 UTC    D  _i: 1366730627000  _f: undefined  _l: undefined  _isUTC: false  _d: Tue Apr 23 2013 16:23:47 GMT 0100  BST        ,frabcus,closed,4,2013-05-25 03:18:15,2013-06-03 17:53:59,,Bug,,,0,1
13445,moment/moment,805,Feature: Get next occurrence of...,I don t think this is possible with moment.js presently  please correct me if I m wrong.  I d like to be able to do date/time calculations with Moment  which allow me to do things like:      time = moment  .next_occurrence  weekday    tuesday  ;      or...      time = moment  .next_occurrence  hour   9 ;      or...      time = moment  .next_occurrence  month    september  ;      and so on  for second  minute  year  day of the month.  Is something like this possible already? ,jasonm23,closed,3,2013-05-26 02:29:28,2013-06-01 11:39:40,,,,0,1
13444,moment/moment,806,toISOString helper method.,I thought that adding in this helper method would improve readability for when you want an ISO datestring out of moment. Right now you would have to call either  moment  .toJSON    or  moment  .format  YYYY MM DD[T]HH:mm:ss.SSS[Z]   . This also follows the method naming and expected results that you get from the javascript date object. ,kevinmarx,closed,7,2013-05-27 19:00:26,2013-06-03 17:28:05,,,,1,1
13443,moment/moment,807,Changed  L  date format for  nn  and  nb  to DD MM YYYY,Correct dateformat for norwegian bokm l and norwegian nynorsk is DD MM YYYY See: http://www.xn  sprkrdet c0ac.no/nb no/Sprakhjelp/Raad/Spoersmaal_og_svar/ dato and http://en.wikipedia.org/wiki/Date_format_by_country ,AndreasPresthammer,closed,1,2013-05-28 07:53:32,2013-05-29 07:50:17,,,,1,1
13442,moment/moment,808,mirror Date logic for empty strings,new moment  .isValid   === true   new moment  blah  .isValid   === false   new moment    .isValid   === no such method exception  why does new moment     return null?   in plain js new Date     and new Date  blah   === invalid date. Is there a reason for this design decision  it seems contrary but I m probably missing something. ,fredkingham,closed,3,2013-05-28 09:15:38,2013-05-29 15:36:22,,,,0,1
13441,moment/moment,809,Ordinals for Russian and Ukrainian,Hi guys    The issue I would like to discuss is quite complicated to implement  maybe it will trigger other changes.   The problem is that in Russian and Ukrainian we have three grammatical genders: masculine  feminine and neuter. And the suffix for ordinals  such as  st    nd or  th in English  depends not only on the number itself but on the related noun  since ordinals are treated as adjectives of the corresponding gender .   So  say  2nd week  2nd month and 2nd day of the month would have three different forms: 2           2nd week   feminine   2          2nd month   masculine   2          2nd of the month  for example  June the 2nd   neuter  since in Russian we say literally  the second number   and even when the month is named  the neuter form is implied .   So when writing a properly formatted ordinals processing in MomentJs we need to know what actually is being passed as a number  not only the number itself. Is that possible at all? If yes  what changes in the core does it need to be done?   Thanks  ,Menelion,closed,2,2013-05-28 21:22:07,2013-05-29 15:43:47,,,,0,1
13440,moment/moment,810,Setting dates/times inconsistent between Firefox and other browsers,When you create a moment from milliseconds  and then apply the setters for day/month/year/hour/etc.  the behaviour is inconsistent between Firefox and Chrome/Safari/IE.  Here s a test case  given my local time zone is UTC 1:      moment 0 .date 23 .month 5 .year 2013 .format  ;      Firefox:       2013 06 23T01:00:00 01:00       Everywhere else:       2013 06 23T00:00:00 01:00       Firefox appears to interpret the date as a UTC date  so  note that the given value is midnight UTC time on 2013 06 23   whereas the other browsers interpret as local  this is midnight in my local time zone .  I would expect Firefox to be consistent with other browsers. For what it s worth  I believe Firefox is actually correct  and the other three browsers are wrong. ,jonbca,closed,4,2013-05-29 14:53:17,2013-05-29 18:49:41,,,,0,1
13439,moment/moment,811,14105 tests passed. 2 failed. from website tests,Date.prototype.toString = Wed May 29 2013 16:45:56 GMT 0300  BRT  Date.prototype.toLocaleString = Wed May 29 2013 16:45:56 GMT 0300  BRT  Date.prototype.getTimezoneOffset = 180 navigator.userAgent = Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.11  KHTML  like Gecko  Chrome/23.0.1271.95 Safari/537.11 ,morenopc,closed,1,2013-05-29 19:48:33,2013-06-01 11:43:24,,Unit Test Failed,,,0,1
13438,moment/moment,812,Millisecond formatting does not work. ,http://jsfiddle.net/yBGND/ is an example.  It always shows  000 . ,rahulsom,closed,2,2013-05-29 20:43:54,2013-06-01 11:47:49,,Bug,,,0,1
13437,moment/moment,813,Documentation for startOf incorrect,Documentation states that startOf  week   is available in 1.7.0 when it is definitely not available. The weekday function doesn t exist in the 1.7.0 series and it is critical for startOf  week   to do it s thing.  The documentation should be updated to accurately display which features are available in which versions. This isn t the first time I ve run across this problem. I ve tweeted at the twitter account about this with no reply. ,shellscape,closed,2,2013-05-30 00:23:33,2013-09-14 21:28:57,,,,0,1
13436,moment/moment,814,Formatting ASP.Net old style dates?,Not that I d want to use them myself  but...  I see we can parse ASP.Net old style dates like  /Date 1198908717056 /  and  /Date 1198908717056 0700 / .  But do we have a way to output in this format?  I guess some folks are still writing APIs against  JavaScriptSerializer  and the like that use this clumsy format.  IMHO  we should either not support it at all  or support it round trip. ,mj1856,closed,2,2013-05-30 01:11:18,2013-05-31 03:47:07,,,,0,1
13435,moment/moment,815,More detail in fromNow,Is there any way of getting  fromNow  to display more detail than just a day/hour/minute count? For example  rather than showing      in 5 days      It should      in 5 days  7 hours  2 minutes      What s the best approach for implementing this? ,pareeohnos,closed,3,2013-05-30 01:49:07,2013-06-01 23:40:25,,New Feature,,,0,1
13434,moment/moment,816,Test fails,Date.prototype.toString = Thu May 30 2013 10:51:34 GMT 0300  ART  Date.prototype.toLocaleString = jue 30 may 2013 10:51:34 ART Date.prototype.getTimezoneOffset = 180 navigator.userAgent = Mozilla/5.0  X11; Ubuntu; Linux x86_64; rv:21.0  Gecko/20100101 Firefox/21.0 weeks year starting tuesday 5 passed 1 failed.  Tests fails:      1101.1 Dec 30 2007 should be week 1  1 == 52   AssertionError: Dec 30 2007 should be week 1  1101.2 Jan 1 2008 should be week 1 1101.3 Jan 5 2008 should be week 1 1101.4 Jan 6 2008 should be week 2 1101.5 Jan 12 2008 should be week 2 1101.6 Jan 13 2008 should be week 3     ,Abuelodelanada,closed,0,2013-05-30 13:54:06,2013-09-17 02:44:02,,Bug,,,0,1
13433,moment/moment,817,Setting start day of week not working.,I m trying to set the start of the week as Monday but can t manage to do so. I m using the Swedish translation found in /lang. I tried with multiple translations that have Monday as start of the week  like French and the same problem occurs in these languages.  console.log  Start  ; console.log moment.utc  .startOf  week  .format  dddd  MMMM Do   ; console.log moment.utc  .endOf  week  .format  dddd  MMMM Do   ; console.log  End  ;  The output is: s ndag  maj 26e l rdag  juni 1a  Is there anything I m forgetting? ,gonace,closed,2,2013-05-30 15:01:03,2013-05-31 07:15:33,,,,0,1
13432,moment/moment,818,Potential parsing bug,I m not sure if the results from this method call are as expected or not      moment   05 Mar   98    DD MMM YYYY  .toDate        Returns the following in Firefox      Wed Mar 05 0098 00:00:00 GMT 0500  Eastern Daylight Time       Where in Chrome it returns the   somewhat more expected   value of      Wed Mar 05 98 00:00:00 GMT 0500  Eastern Standard Time       Since the provided format expects a 4 digit long year and we only provided a 2 year one  I d have expected this to result in an Invalid Date ,dcherman,closed,4,2013-05-30 17:30:51,2013-07-14 23:09:03,,Bug,,,0,1
13431,moment/moment,819,Parsing toJSON   back to a moment  time zone problems ,I m having some trouble parsing back a moment from the ISO 8601 string produced by  toJSON   .  It seems like  toJSON  does not take time zones into account when serializing.  Therefore when parsing the date with  moment    the date will be offset by the time zone difference.  To show what I mean i have created a short jsFiddle: http://jsfiddle.net/MarkusK/ER3t3/1/  The output when run against moment.js 2.0.0:      Original date: Thu May 30 2013 21:42:07 GMT 0200 Origial as JSON 2013 05 30T21:42:07.616Z Original toDate   Thu May 30 2013 21:42:07 GMT 0200  CEST  Parsing back moment jsonDate  Thu May 30 2013 23:42:07 GMT 0200 Parsed date as json 2013 05 30T23:42:07.616Z Parsed date toDate   Thu May 30 2013 23:42:07 GMT 0200  CEST       One way to fix it would be to make  toJSON  revert to GMT for its ISO 8601 output or to include the time zone info. ,mkrogh,closed,1,2013-05-30 19:53:53,2013-06-01 11:58:49,,,,0,1
13430,moment/moment,820,Test fails,Date.prototype.toString = Fri May 31 2013 14:06:51 GMT 0300  Hora oficial do Brasil  Date.prototype.toLocaleString = 31/5/2013 14:06:51 Date.prototype.getTimezoneOffset = 120 navigator.userAgent = Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/27.0.1453.94 Safari/537.36 ,marceloweber,closed,1,2013-05-31 17:07:08,2013-09-12 11:01:34,,,,0,1
13429,moment/moment,821,Support for Component 1  doesn t provide i18n support.,Installing with [Component] https://github.com/component/component  fails on requiring language definitions.  I get the following error:      js Error: Failed to require  ./lang/es.js  from  timrwood moment/moment.js       This is what I m doing:      js moment  .lang  es  ; // or even moment  .lang  es.js  ;     ,cristiandouce,closed,3,2013-05-31 19:31:36,2013-08-19 22:16:33,,,,0,1
13428,moment/moment,822,Fix JavaScript setMonth   behavior,JavaScript does some weird stuff with setMonth  . This change makes its behavior more consistent.  If you have a moment object with a date around the end of the month and you try to change the month to a month that doesn t have that many days you end up with an unexpected result. You can see this exhibited using moment like this:      >>> var m = moment  20130531    YYYYMMDD  ; >>> m.month  ; 4 >>> m.month 3 ; >>> m.month  ; 4      In JS the  setMonth    method sets the month and then applies the date and rolls over into the next month if the date  e.g. 31  is higher than the last day of the month.  While this is the normal behavior of the JS  Date  object  I would argue that it is the wrong behavior. It causes bugs that users unfamiliar with the oddities of the language won t expect. In addition the date you end up with is somewhat arbitrary and not helpful in any case I can imagine because it s not consistent or predictable without extra logic. If I m using an object and I try to explicitly set the month I want the object to go to that month  not occasionally end up on both a different month AND date from what I expect.  If the month doesn t have enough days it s much less buggy or unexpected for it to consistently go to the last day of the month than to end up on some day toward the start of the month depending on what day of the month it is and what month I m switching to.  In my particular case it caused a bug that could only be observed on certain days of certain months  like today. In my code it creates a new moment object and then tries to set the month based on a value returned from the server. But since the object was created today it causes it to set the month wrong. If I tried the exact same thing yesterday it would have worked fine. At least with this fix it creates consistent and predictable behavior and always sets the month to the one requested. ,jwarkentin,closed,5,2013-05-31 20:29:54,2013-06-24 15:16:10,,,,1,1
13427,moment/moment,823,Formatting where timezone information is preserved,If this already exists  my apologies  but I haven t found it yet.  I have a date that isn t in my server/browser s local time can i format it to maintain the original timezone?  If you d like a code snippet I can whip it up  but hopefully this is just something I m missing. ,wavded,closed,6,2013-06-01 02:14:18,2013-06-10 04:06:07,,,,0,1
13426,moment/moment,824,Error on unit tests using pt bbr localization,Date.prototype.toString = Sun Jun 02 2013 11:54:02 GMT 0300  Hora oficial do Brasil  Date.prototype.toLocaleString = 6/2/2013 11:54:02 AM Date.prototype.getTimezoneOffset = 120 navigator.userAgent = Mozilla/5.0  Windows NT 6.2; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/27.0.1453.94 Safari/537.36  55.4   1.0013888888888889 ===  1  Jan 28 to Feb 28 should be 1 month  true == false  AssertionError:   1.0013888888888889 ===  1  Jan 28 to Feb 28 should be 1 month     at Object.ok  http://momentjs.com/js/tests.js?v=2013 04 30T10:23:12 07:00:1531:39      at equal  http://momentjs.com/js/tests.js?v=2013 04 30T10:23:12 07:00:2729:10      at Object.exports.diff.month diffs  http://momentjs.com/js/tests.js?v=2013 04 30T10:23:12 07:00:2863:9      at http://momentjs.com/js/tests.js?v=2013 04 30T10:23:12 07:00:1867:16     at Object.exports.runTest  http://momentjs.com/js/tests.js?v=2013 04 30T10:23:12 07:00:1707:9      at http://momentjs.com/js/tests.js?v=2013 04 30T10:23:12 07:00:1753:25     at http://momentjs.com/js/tests.js?v=2013 04 30T10:23:12 07:00:1011:13     at iterate  http://momentjs.com/js/tests.js?v=2013 04 30T10:23:12 07:00:621:13      at http://momentjs.com/js/tests.js?v=2013 04 30T10:23:12 07:00:632:25     at http://momentjs.com/js/tests.js?v=2013 04 30T10:23:12 07:00:1013:17 55.5   0.9347222222222222 ===  0.9333333333333333  Jan 31 to Feb 29 should be 1    2/30  months  true == false   AssertionError:   0.9347222222222222 ===  0.9333333333333333  Jan 31 to Feb 29 should be 1    2/30  months     at Object.ok  http://momentjs.com/js/tests.js?v=2013 04 30T10:23:12 07:00:1531:39      at equal  http://momentjs.com/js/tests.js?v=2013 04 30T10:23:12 07:00:2729:10      at Object.exports.diff.month diffs  http://momentjs.com/js/tests.js?v=2013 04 30T10:23:12 07:00:2864:9      at http://momentjs.com/js/tests.js?v=2013 04 30T10:23:12 07:00:1867:16     at Object.exports.runTest  http://momentjs.com/js/tests.js?v=2013 04 30T10:23:12 07:00:1707:9      at http://momentjs.com/js/tests.js?v=2013 04 30T10:23:12 07:00:1753:25     at http://momentjs.com/js/tests.js?v=2013 04 30T10:23:12 07:00:1011:13     at iterate  http://momentjs.com/js/tests.js?v=2013 04 30T10:23:12 07:00:621:13      at http://momentjs.com/js/tests.js?v=2013 04 30T10:23:12 07:00:632:25     at http://momentjs.com/js/tests.js?v=2013 04 30T10:23:12 07:00:1013:17 ,aledpardo,closed,1,2013-06-02 14:58:42,2013-06-05 09:22:58,,,,0,1
13425,moment/moment,825,Appropriate ordinals processing in Russian and Ukrainian,As suggested by @timrwood in comments to  809  I ve written functions to match ordinals format for Russian and Ukrainian and modified the tests appropriately. ,Menelion,closed,7,2013-06-03 22:30:48,2013-06-23 03:41:27,,,,1,1
13424,moment/moment,826,10  perf improvement with eval,I can get a 10  perf improvement by using eval:      function makeFormatFunction2 format            var array = format.match formattingTokens   i  length;          var func =  func = function mom   var output=  ;  ;          for  i = 0  length = array.length; i < length; i                  if  formatTokenFunctions[array[i]]                   func  =  output  = formatTokenFunctions[     array[i]     ].call mom  format ;   ;               else                  func  =  output  =       removeFormattingTokens array[i] .replace /  /g        .replace / /g            ;  ;                                 func  =   return output;   ;          return eval func ;             Trouble is ... eval ... and I don t know if you want that in moment.  http://jsperf.com/micro opt moment  Additionally adding a cache for:        var i = 5;          function replaceLongDateFormatTokens input                return m.lang  .longDateFormat input     input;                    while  i      localFormattingTokens.test format                 format = format.replace localFormattingTokens  replaceLongDateFormatTokens ;                Can speed stuff a lot for LLL style loclisations  would you be interested in any of these optimisations or take a pass on them ?  ,SamSaffron,closed,4,2013-06-04 07:02:49,2013-07-07 19:25:00,,,,0,1
13423,moment/moment,827,longDateFormat isn t considered for parsing,If a  longDateFormat  is passed as the second argument to  moment     the i18n options aren t considered.      javascript var m = moment  May 31 2013 1:20 PM    LL LT    en  ; console.log m._d ; // Sat Jan 01 0 00:00:00 GMT 0500  EST      ,terinjokes,closed,3,2013-06-04 20:15:02,2013-08-19 22:42:28,,Bug,,,0,1
13422,moment/moment,828,week.dow doesn t affect .startOf  week  , .startOf  week    keep returning me Sunday  but I defined  week.dow  as 1. As I see from the code  dow  is used only in one place  and doesn t connected to  .startOf  ,soswow,closed,1,2013-06-04 21:42:44,2013-06-05 09:28:38,,,,0,1
13421,moment/moment,829,moment.format doesn t work correctly for dates prior to the DST change in 2007 in Firefox and Chrome,The script below will run correctly in IE10 but not in Firefox or Chrome.  The script below will result in  2004 11 04T00:00:00 05:00  on IE10 which is correct  but in Chrome and Firefox it results in  2004 11 04T00:00:00 04:00  which is not correct.    var m = new moment  11/04/2004  ; var d = new Date m ; alert moment d .format  YYYY MM DDTHH:mm:ssZ   ; ,ItWorksOnMyMachine,closed,2,2013-06-05 16:30:50,2013-06-05 23:19:58,,,,0,1
13420,moment/moment,830,Bump version to 2.0.X?,There have been some substantial changes since the official 2.0.0 release  and I would love to see those make there way up to cdnjs.  Right now  versioning is critical to getting that done.  Maybe there could be a small version bump in the near future? ,jarcoal,closed,2,2013-06-06 02:17:38,2013-09-17 02:45:37,,,,0,1
13419,moment/moment,831,Effects of ECMAScript 15.9.1.8,It s recently come to my attention that there is a flaw in the ECMAScript specification that almost all browsers use for their JavaScript implementation.  This is discussed here: http://stackoverflow.com/a/16951442/634824  The actual spec is in [ECMAScript 5.1 section 15.9.1.8] http://es5.github.io/ x15.9.1.8   The troubling part is as follows:  > The implementation of ECMAScript should not try to determine whether the exact time was subject to daylight saving time  but just whether daylight saving time would have been in effect if the current daylight saving time algorithm had been used at the time. This avoids complications such as taking into account the years that the locale observed daylight saving time year round. >  > If the host environment provides functionality for determining daylight saving time  the implementation of ECMAScript is free to map the year in question to an equivalent year  same leap year ness and same starting week day for the year  for which the host environment provides daylight saving time information. The only restriction is that all equivalent years should produce the same result.  It ends up that Firefox  Chrome  Safari and Node.js all take the  easy route  and apply the current time zone rules to past dates.  Even if the operating system has more data about past dates  they do not pick it up   Of those tested  only IE is going the route of providing accurate data for past dates  and we all know that Windows time zones are proprietary anyway .  I am really upset with ECMA right now.  This is messed up on so many levels.  That said  there are now many JS libraries I will have to evaluate to see how they are affected by this.  Off hand  do you know of anything with in moment.js that assumes that the local system time has the correct time zone offset?  Just to restate the severity of the issue another way:  Even if the local operating system has a fully consistent and up to date time zone database  regardless of Windows or TZDB zones    most JavaScript runtimes will only ask for the _current rule_ and then apply that to ALL dates.  My gut says that probably momentjs might only be affected for parsing and formatting  but moment timezone might be affected more severely   depending on how little or how much it relies on the host environment instead of the raw tzdb data.  Please let me know your thoughts on this subject.  And thanks as always. ,mj1856,closed,9,2013-06-06 04:55:17,2014-02-03 04:02:43,,Timezones,,,0,1
13418,moment/moment,832,Why does  startOf  modify object itself?,I am not is it a bug or a feature. If later one  than I don  see any point to make one.      m = moment  2013 05 31  .subtract 1   month   m.toDate    // >Tue Apr 30 2013 00:00:00 GMT 0300  EEST  m2 = m.startOf  month   m.toDate   // > Mon Apr 01 2013 00:00:00 GMT 0300  EEST       Methods like  startOf  should only create new object. This is even semantically not right. I mean if you want to change object inplace the method should be like  setStartOf  or something. I totally frustrated  that it doesn t create a copy by default. That I need to add .clone   all over the place. ,soswow,closed,10,2013-06-06 11:28:31,2013-06-20 16:56:46,,,,0,1
13417,moment/moment,833,String   Format eating array,See http://jsfiddle.net/DjcbW/1/  When passing an array for format  the length is offset by  1 after every usage of moment function.  Same as Issue  788 ? ,fipartners,closed,1,2013-06-07 07:36:28,2013-06-10 19:34:30,,,,0,1
13416,moment/moment,834,Remove  Klockan  in  moment.calendar   ,   Klockan  is kinda superflous.   This makes the Swedish translation more similar to English. ,JensRantil,closed,3,2013-06-07 13:44:41,2013-06-07 16:45:24,,,,1,1
13415,moment/moment,835,Adjust relative time  or UTC time  based on remote time, I have just finished writing a extremely small js class similar to some moment.js functionality. ...if only moment.js had shown up on the previous searches :  I would have saved a few hours.   One of the features I needed  and implemented  was to adjust relative times based on server time  obtained at page render  or via RPC   because of a few number of users with grossly incorrect timezones  which usually results in incorrect UTC timestamps  as seen by the user  .  Basically  the UTC time is adjusted with n seconds before beeing used anywhere.  Does moment.js support this?  If not  could it be added  I am willing to do it  as my time allows it ? ,oxygen,closed,8,2013-06-07 18:38:54,2013-09-17 04:14:14,,,,0,1
13414,moment/moment,836,Can t get array of months,Hi   I can t figure out any simple way how to generate simple array  which will include list of all months in some specified format  it feels awkward to use solution like this one http://stackoverflow.com/questions/16909553/how to get list of months javascript  So am I missing anything?  Thanks ,elmariofredo,closed,2,2013-06-09 20:59:45,2013-06-11 16:40:46,,,,0,1
13413,moment/moment,837,Invalid date format,I encounter with this problem:   Actually don t know the date format  unknown date format    Want to recognize it.   Use String   format      javascript moment  27 05 2011 13:05   [      YYYYMMDD        DD MM YYYY        YYYY MM DD        MM/DD/YYYY        YYYY/MM/DD        DD MMM YYYY         DD MMMM YYYY        YYYYMMDDhhmm        YYYYMMDD hhmm        DD MM YYYY hh:mm        YYYY MM DD hh:mm        MM/DD/YYYY hh:mm        YYYY/MM/DD hh:mm        DD MMM YYYY hh:mm        DD MMMM YYYY hh:mm        YYYYMMDDhhmmss        YYYYMMDD hhmmss        DD MM YYYY hh:mm:ss        YYYY MM DD hh:mm:ss        MM/DD/YYYY hh:mm:ss        YYYY/MM/DD hh:mm:ss        DD MMM YYYY hh:mm:ss        DD MMMM YYYY hh:mm:ss  ] .format  ;      The return is invalid  I mean  it doesn t fit the format  for example  if I use fromNow   it returns  1987 years ago   ,raitucarp,closed,4,2013-06-10 03:01:23,2013-09-17 05:36:12,,Forgiving parsing,,,0,1
13412,moment/moment,838,Browser  i18n and require.js dependency,It is not possible to use i18n files in browser without require.js  because every lang file starts with  require  ../moment    ,zakjan,closed,2,2013-06-11 14:58:40,2013-06-18 22:29:35,,,,0,1
13411,moment/moment,839,toJSON is not returning the right local time,If moment is initialized with time in local time zone  moment.toJSON   will return a ISO8601 string with the local timezone offset stripped off. However  moment.toDate  .toJSON   will return the correct time string.  The only workaround for now is to convert it to utc first like so moment.utc    Then moment.toJSON   will match moment.toDate  .toJSON    Please fix this bug. ,pencilcheck,closed,1,2013-06-11 20:30:12,2013-06-17 17:37:16,,,,0,1
13410,moment/moment,840,changing week day for sunday date switches to next week,    javascript a = moment  2013 06 16T23:59:59   // Sun a.milliseconds 999  // So  now it s a last moment of some week a.format  dddd  MMMM Do YYYY  HH:mm:ss.SSS   //  >  Sunday  June 16th 2013  23:59:59.999   a.day 5  //I wan to change week date to friday  a.format  dddd  MMMM Do YYYY  HH:mm:ss.SSS   //  >  Friday  June 21st 2013  23:59:59.999   // It is Friday  but from the next week.     ,soswow,closed,7,2013-06-13 07:57:54,2013-07-14 23:10:09,,,,0,1
13409,moment/moment,841,Fixed some warnings uglifyjs gave when compressing., uglifyjs   lint  c json3.js  should ideally do its thing without noting any warnings like unused variables   etc. ,CmdrMoozy,closed,1,2013-06-13 18:06:08,2013-06-20 17:13:39,,,,1,1
13408,moment/moment,842,If calling moment fromNow with second Parameter  true ....,... in the German language the plural forms of days  months and years will lost their trailing  n :  <pre> var from = moment  ; from.subtract 2   day  ; console.log from.from moment    ;           //:  in 2 Tagen   > correct console.log from.from moment    true  ;     //:  2 Tagen   > false  has to be  2 Tage  from.subtract 2   month  ; console.log from.from moment    ;           //:  in 2 Monaten   > correct console.log from.from moment    true  ;     //:  2 Monaten   > false  has to be  2 Monate  from.subtract 2   year  ; console.log from.from moment    ;           //:  in 2 Jahren   > correct console.log from.from moment    true  ;     //:  2 Jahren   > false  has to be  2 Jahre  </pre>   I apologize for our language ;  And for I don t have the time to dig me into source and change it myself :D ,MEBrach,closed,3,2013-06-14 09:29:35,2013-06-24 15:54:05,,Bug,Language,,,0,1
13407,moment/moment,843,Get a list of available locales,The page needs to initialize the moment.lang xxx . There is no way to find out which languages are available and implement a fall back strategy. ,a701440,closed,11,2013-06-14 13:20:27,2016-02-02 22:23:38,jisaacks,Language,New Feature,,,0,1
13406,moment/moment,844,Initializing the lang to something that does not exist then crashes in the lang  ,moment.lang  crap   moment.lang    Results in error: TypeError: moment.fn._lang is undefined ,a701440,closed,0,2013-06-14 13:22:59,2013-09-14 21:27:35,,,,0,1
13405,moment/moment,845,API for formatting localized month names and day names from day number and month number,Is there a way to format the day name from the 0..6 number ? Same for month names. i.e. something like: moment.format  ddd   5   ,a701440,closed,4,2013-06-14 13:59:34,2013-06-20 17:21:01,,,,0,1
13404,moment/moment,846,If lang requested not found  resort to default lang,in response to Issue  844 ,dperrymorrow,closed,1,2013-06-14 18:20:47,2013-06-18 22:41:19,,,,1,1
13403,moment/moment,847,Fixed polish date format   months usage,,tpaszun,closed,2,2013-06-15 18:37:48,2013-06-18 23:36:40,,,,1,1
13402,moment/moment,848,Unable to set the default year for a date string / assumes year 0000,Working on a little page to calculate the difference between two date and times. One of the formats I allow is  MMM DD HH:mm  which works if the other field is the same as they both get assumed year 0000. Is there a way to have it assume the current year if its missing from the string?   example jsfiddle: http://jsfiddle.net/vCGAp/71/ outage begin: Feb 22 10:36 outage end: 10:36 02/23/2013  This should result in 1d but it returns 735235d due to one date being in 2013 while the other in 0000.  Tested on OSX with Firefox 21 ,thezoggy,closed,3,2013-06-16 05:30:37,2013-06-20 17:24:56,,,,0,1
13401,moment/moment,849,Switching timezone of moment without changing the values?,Use case: User has a different timezone in app preference than local browser timezone. Using a jQuery datetime picker  user selects a date and time which is in local timezone  different from preference timezone . I want to change the timezone of the selected date without altering actual date and time selected by the user then of course I can convert it to UTC and send back to server.      moment selectedDate  //convert javascript date to moment moment.setTimezone   0200    // this should change timezone keeping the date and time unchanged moment.utc  .toJSON   //back to server     ,amitava82,closed,6,2013-06-16 14:36:28,2013-06-21 03:57:05,,,,0,1
13400,moment/moment,850,Parsing week numbers,Hi   It is possible to format a date using the  w    wo    W  and  Wo  tokens to display week numbers  ISO or other . However  it is not  understandibly  not possible to parse strings containing only a week number and a year. It would be great if this was possible. The day of the week that determines the weeknumber  first Sunday or first Monday or whatever is the determining dow  could be used to set the day on the parsed date.  For example:  moment  Week 25  2013    [Week] W  yyyy    parses as the Monday of week 25 of the year 2013.  I tried to put a pull request together for this  but could not get past the nitty gritty of parsing tokens etc. ,jvhellemond,closed,4,2013-06-17 14:34:47,2013-10-14 08:55:16,,New Feature,,,0,1
13399,moment/moment,851,Timezone offset is reversed  Z and ZZ,In the documentation  and examples   Z is         and ZZ is   ZZ:ZZ   however the actual implementation is reversed. It doesn t appear that it makes a difference when passing in a date with Z or ZZ to be read  however for .format   it does make a difference  since Z is outputting     :    whereas ZZ is outputting          contradicting the documentation. ,ZeeStorm,closed,3,2013-06-17 20:22:52,2013-06-18 23:52:34,,,,0,1
13398,moment/moment,852,more precise moment fromNow,hi   what about this:      javascript // assuming today = 2013 06 18 12:00:00 moment  2013 06 16 00:00:00   YYYY MM DD HH:mm:ss  .fromNow  ; // 2 days 12 hours. even seconds or milli...     ,hanzheng,closed,1,2013-06-18 06:40:35,2013-06-19 05:41:10,,,,0,1
13397,moment/moment,853,Ignore nonessential files when installing via bower,This pull requests tells bower to [ignore] https://github.com/bower/bower defining a package  all nonessential files and folders  excluding LICENSE and readme.md  so they aren t sent over the wire when installing moment. ,Caged,closed,3,2013-06-18 18:35:22,2013-06-18 23:35:33,,,,1,1
13396,moment/moment,854,Add/subtract methods should use real months/years,If I try to add or subtract a moment.duration 1   month   to a date  it always adds or subtracts 30 days  which is not correct.  Is this a bug  a known limitation or am I missing something? Wouldn t be better for the add/subtract methods to increase the month number in these cases? If I would want to add 30 days  I still could do it by using moment.duration 30   days  .  Same happens with years  I found myself having to check for isLeapYear.  Does this makes sense? I could PR this if you guys agree. ,luisfarzati,closed,9,2013-06-18 20:39:32,2013-09-17 05:05:12,,Enhancement,,,0,1
13395,moment/moment,855,Support for ISO 8601 Week,The American Week is the Christian/Islamic/Jewish Week starting with Sunday. it would be great  if moment.js s support for ISO 8601 could also include weeks starting with monday.  currently its like that:      javascript moment  2013 06 17  .isSame  2013 06 23    week  ; //false     ,sclausen,closed,2,2013-06-19 08:47:41,2013-07-14 23:33:01,,,,0,1
13394,moment/moment,856,localization modules leak into the global context,Some localization modules leak functions into the global context. For example  RU  locale has functions like:  function plural word  num    that end up in the global context and may collide with other functions of the same name.  Also the  require  loader should be removed. ,a701440,closed,1,2013-06-19 14:15:32,2013-07-07 19:14:23,,Bug,,,0,1
13393,moment/moment,857,In response to Issue  843,moment.langKeys   returns an array of all available language keys ,dperrymorrow,closed,18,2013-06-19 23:15:07,2013-10-31 17:27:44,,Enhancement,,,1,1
13392,moment/moment,858,fix lengthy durations not being cloned properly, moment.duration  when passed a lengthy duration may return a duration that is not equal to the input.  Add a test and a fix for this bug. ,frasertweedale,closed,3,2013-06-20 09:02:51,2013-06-27 19:07:20,,,,1,1
13391,moment/moment,859,Expose API for accessing locale specific first day of week,Short of using  moment.fn._lang._week.dow  there does not seem to be a way to get the locale specific first day of week. ,a701440,closed,3,2013-06-20 13:10:11,2013-07-14 04:51:42,,,,0,1
13390,moment/moment,860,Parsing dates back from .fromNow  .from  .humanize  etc,Hi  I have what can t be an unusual requirement: that users can enter dates and durations into inputs naturally. For example  the user can write  in a month  and the application will be able to parse that into something useful. Essentially the reverse of methods like  .fromNow    .from  and  .humanize   etc.  Have I missed a way of doing this included in the excellent moment.js library  extended or otherwise?  If not  I would seek to implement such functionality. My first thought is that  having parsed out the numbers from a duration string  I can use  moment.duration . For example  with input  1 month  2 days       javascript moment  .add moment.duration  month:1  day:2  .asMilliseconds     milliseconds  ;      when I need it as a date from some time  or just using asMilliseconds when I need it as an abstract duration.  Ideally  the parsing would account for localisation  so is there a way to obtain whatever data structure it is that contributes to parsing dates using  .humanize   etc? I looked at  moment.langData     but I could do with a pointer to any more documentation.  Many thanks  Dan. ,fakeh,closed,5,2013-06-20 17:50:18,2013-09-17 03:19:01,,,,0,1
13389,moment/moment,861,Ability to parse an ISO Duration string,Hi  It would be nice if moment supported [ISO duration] http://en.wikipedia.org/wiki/ISO_8601 Durations  format  like : moment.duration  PT16H40M  ; ,redben,closed,3,2013-06-21 09:29:33,2013-10-03 23:14:09,,New Feature,,,0,1
13388,moment/moment,862,Fix fromNow in German,This addresses and hopefully fixes  842.   @ichernev  there are some tests that don t pass but I m sure I haven t touched this  diff.js or whatever . Could it be merged anyway? :  ,Menelion,closed,1,2013-06-23 21:14:33,2013-06-24 15:54:06,,,,1,1
13387,moment/moment,863,fix durations not being cloned properly, moment.duration  does not return an equivalent Duration for all inputs.  Add a test for this and fix the issue by reusing the Duration s constructor argument.  This is an alternative approach to https://github.com/timrwood/moment/pull/858. ,frasertweedale,closed,1,2013-06-24 06:34:53,2013-06-27 19:06:53,,,,1,1
13386,moment/moment,864,_offset  zone  isn t being looked at everywhere.,In  671 moment added the ability to set an offset  but if you call month   it isn t taking this into account.  Here is what standard js does:      new Date 1267426800000  Sun Feb 28 2010 23:00:00 GMT 0800  PST       This doesn t work because I want to get this date in  0700.  So using moment I do:      moment 1267426800000 .format    2010 02 28T23:00:00 08:00   moment 1267426800000 .zone   0700  .format    2010 03 01T00:00:00 07:00       and format returns me exactly what I want.  But then if I grab the month out of it:      moment 1267426800000 .zone   0700  .month   2      It is back to February instead of March. ,sontek,closed,5,2013-06-24 22:03:45,2013-07-07 19:20:29,,,,0,1
13385,moment/moment,865,fix  739   wrong Chinese meridiem time,By now I just fixed the time. Now it s:      morning < 9 <= forenoon < 11:30 <= noon < 12:30 <= afternoon < 18 <= night      I plan to adjust the details once I got accurate concept of the time in Chinese. And I asked a question at Zhihu: http://www.zhihu.com/question/21251131 ,jiyinyiyong,closed,6,2013-06-25 02:52:00,2013-09-09 01:06:46,,,,1,1
13384,moment/moment,866,toString   and toJSON   is not a same time .,    javascript a = moment  2013 01 01 00:00:00 08:00   //D  _i:  2013 01 01 00:00:00 08:00   _f:  YYYY MM DDTHH:mm:ss Z   _l: undefined  _isUTC: false  _a: Array[7]   a.toString  ; // Tue Jan 01 2013 00:00:00 GMT 0800   a.toJSON     bug there // 2013 01 01T00:00:00.000Z  a.format  YYYY MM DDTHH:mm:ssZ   // 2013 01 01T00:00:00 08:00        ,lxbzmy,closed,1,2013-06-25 09:02:22,2013-07-03 05:08:46,,,,0,1
13383,moment/moment,867,IE7 failed unit test   toJSON,When running the unit tests  1 failed in IE7.  Date.prototype.toString = Thu Jun 27 09:45:49 UTC 2013 Date.prototype.toLocaleString = Thursday  June 27  2013 9:45:49 AM Date.prototype.getTimezoneOffset = 0 navigator.userAgent = Mozilla/4.0  compatible; MSIE 7.0; Windows NT 5.2; .NET CLR 1.1.4322   toJSON 1 passed 1 failed. 79.1 should output ISO8601 on moment.fn.toJSON 79.2  JSON  is undefined  undefined undefined undefined  [object Error]  Though as I m typing this  I m guessing it s because IE7 doesn t have inbuilt support for converting to JSON  so needs to be polyfilled with e.g. json2 .  Perhaps it would be good to add a little note in the documentation  perhaps there already is one  but I haven t spotted it    saying to polyfil JSON in older browsers.  Keep up the good work. Alex. ,AlexKeySmith,closed,1,2013-06-27 09:52:29,2013-07-07 19:20:08,,Bug,Unit Test Failed,,,0,1
13382,moment/moment,868,Fixing first day of the week in french,Hello   I use moment.js for my projet and I configured it like this :       moment.lang  fr     months :  janvier_f vrier_mars_avril_mai_juin_juillet_ao t_septembre_octobre_novembre_d cembre .split  _    monthsShort :  janv._f vr._mars_avr._mai_juin_juil._ao t_sept._oct._nov._d c. .split  _    weekdays :  dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi .split  _    weekdaysShort :  dim._lun._mar._mer._jeu._ven._sam. .split  _    weekdaysMin :  Di_Lu_Ma_Me_Je_Ve_Sa .split  _    longDateFormat :       LT :  HH:mm       L :  DD/MM/YYYY       LL :  D MMMM YYYY       LLL :  D MMMM YYYY LT       LLLL :  dddd D MMMM YYYY LT     calendar :       sameDay:  [Aujourd hui  ] LT       nextDay:  [Demain  ] LT       nextWeek:  dddd [ ] LT       lastDay:  [Hier  ] LT       lastWeek:  dddd [dernier  ] LT       sameElse:  L     relativeTime :       future :  dans  s       past :  il y a  s       s :  quelques secondes       m :  une minute       mm :   d minutes       h :  une heure       hh :   d heures       d :  un jour       dd :   d jours       M :  un mois       MM :   d mois       y :  une ann e       yy :   d ann es     ordinal : function  number        return number    number === 1 ?  er  :   me  ;    week :       dow : 1  // Monday is the first day of the week.     doy : 4  // The week that contains Jan 4th is the first week of the year.          ;  And when I do that :       moment.lang  fr  ; moment  .startOf  week        It returns me sunday and not monday. But I specified dow : 1  // Monday is the first day of the week.  What do I do wrong? ,sebfie,closed,2,2013-06-27 13:30:15,2013-06-27 14:30:44,,,,0,1
13381,moment/moment,869,Language Variant File Names should be aligned with ISO 3166,This ISO standard defines country codes in capitals: http://en.wikipedia.org/wiki/ISO_3166 1_alpha 2 Also this standard defines language tags in the form de AT or en GB etc. http://en.wikipedia.org/wiki/IETF_language_tag  Therefore  I think the files in the lang folder should be renamed to mach this form. Currently we have en gb.js but this should be en GB.js ,vanthome,closed,4,2013-06-29 08:55:15,2013-09-17 02:52:44,,,,0,1
13380,moment/moment,870,Adding Persian Support,It contains needed tests and is passing them well ,ebraminio,closed,4,2013-06-30 11:54:55,2013-07-02 17:49:52,,,,1,1
13379,moment/moment,871,grunt is enough,There was not test task   grunt  is enough for testing. In fact this was misleading for me ,ebraminio,closed,0,2013-06-30 22:24:16,2013-06-30 22:40:46,,,,1,1
13378,moment/moment,872,Added Albanian language,,flakerimi,closed,4,2013-07-02 17:23:03,2013-07-11 04:50:49,,,,1,1
13377,moment/moment,873,Localisation for Javascript Date,i looked into the docs but could not find out in which function they are converting months into different languages  ,js08,closed,2,2013-07-02 19:34:01,2013-07-07 19:16:14,,,,0,1
13376,moment/moment,874,Buddist Calendar / Thai solar Calendar support with format code BB  BBBB,Buddist Calendar / Thai solar Calendar support with format code BB  BBBB THAI YEAR  BE.  is  543 years greater than AD.  that s all  http://en.wikipedia.org/wiki/Thai_solar_calendar  Microsoft Excel 2003 and later uses b or B for Buddhist Calendar http://office.microsoft.com/en us/excel help/format dates using alternate calendars HP005262656.aspx ,jojosati,closed,6,2013-07-03 17:32:47,2013-07-19 15:05:37,,,,1,1
13375,moment/moment,875,added hour fraction option to  diff,I needed to calculate the difference between two moment objects as hours   tenths of an hour  i.e. 3:14   > 3.2 .  I added a new option to the  diff function  hour decimal  which assumes / forces float representation  then performs the calculation as desired. ,goochrules,closed,1,2013-07-03 20:39:08,2013-07-14 04:24:55,,,,1,1
13374,moment/moment,876,Added tests for Albanian,Added tests for Albanian translation by @flakerimi. See  872. ,Menelion,closed,1,2013-07-04 10:25:35,2013-07-07 18:11:49,,,,1,1
13373,moment/moment,877,Unit test failed,Date.prototype.toString = Thu Jul 04 2013 11:09:03 GMT 0300  Hora oficial do Brasil  Date.prototype.toLocaleString = 4/7/2013 11:09:03 Date.prototype.getTimezoneOffset = 120 navigator.userAgent = Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/27.0.1453.116 Safari/537.36 ,renatocarrico,closed,2,2013-07-04 14:14:54,2013-09-16 03:47:29,,TZ Testing,Unit Test Failed,,,0,1
13372,moment/moment,878,Implicit moment   call on undefined input silently succeeds  sometimes ,Look:        cat undefined.js var moment = require  moment  ;  var m = moment        x = undefined;  if  m.isSame x             console.log m.format     and   x   are the same.  ;     node undefined   node undefined   node undefined   node undefined   node undefined   node undefined 2013 07 07T15:00:57 00:00 and undefined are the same.        This is because of an implicit moment input  call inside isSame   and others that doesn t make sure input exists before using it.  I think it s the wrong behavior because the same input results in different output depending on timing.  If this is expected behavior then it should be documented. ,simplej,closed,3,2013-07-07 15:11:10,2013-07-27 06:59:39,,,,0,1
13371,moment/moment,879,Duration Add/Subtract/Format,I am using moment.js to create a countdown timer. Durations seem to be a better solution than moments as durations represent a date less time as opposed to moments. However  since there are no Add/Subtract/Format operations on durations  I m forced to do a lot of converting between moment objects and duration in order to take advantage of moment s Add/Subtract/Format methods. Has there been any thought in creating these methods for durations? ,dcc635,closed,4,2013-07-07 20:56:40,2013-07-07 22:45:19,,,,0,1
13370,moment/moment,880,add permissive year format    YY ,add permissive year format    YY  create : accept both 2 and 4 digit year format : display 4 digit same as  YYYY   http://james.padolsey.com/javascript/permissive user input validation/  example:  http://jsfiddle.net/kBQ8k/17/ ,jojosati,closed,6,2013-07-07 22:00:44,2013-07-14 14:12:11,,,,1,1
13369,moment/moment,881,Release files are not found,Links to minified  https://rawgithub.com/timrwood/moment//min/moment.min.js  and full  https://rawgithub.com/timrwood/moment//moment.js  source both return 404 Not Found. ,slav,closed,1,2013-07-07 22:49:59,2013-07-07 23:05:19,,,,0,1
13368,moment/moment,882,PHP Date constants,A lot of projects uses PHP Date constants for parse and display dates and also libraries like ExtJS uses them. Could you add a way to specify it?  Maybe a flag will be required to set if you are using current constants or PHP constants. ,lopezdonaque,closed,2,2013-07-08 08:04:42,2013-07-27 07:18:00,,,,0,1
13367,moment/moment,883,Failed unit test in GMT,Date.prototype.toString = Mon Jul 08 2013 13:46:16 GMT 0100  BST  Date.prototype.toLocaleString = 7/8/2013 1:46:16 PM Date.prototype.getTimezoneOffset = 0 navigator.userAgent = Mozilla/5.0  Macintosh; Intel Mac OS X 10_8_4  AppleWebKit/537.36  KHTML  like Gecko  Chrome/27.0.1453.116 Safari/537.36 ,drei01,closed,3,2013-07-08 12:47:34,2013-07-30 05:23:30,,Bug,Unit Test Failed,,,0,1
13366,moment/moment,884,Formatting: omitting minute zero in time display, Minute  format is currently expressed with two tokens:  mm  for padded minutes  00 59    m  for unpadded  0 59 . When formatting time  the padded format is normally used but you may want to omit the 00 completely. For instance: 5.45pm  but 4pm instead of 4.00pm. Shouldn t there be a third token to implement this behaviour? ,nltesown,closed,2,2013-07-08 14:06:00,2013-07-09 18:28:27,,,,0,1
13365,moment/moment,885,Language Tests Failed,Date.prototype.toString = Mon Jul 08 2013 11:21:52 GMT 0400  EDT  Date.prototype.toLocaleString = 7/8/2013 11:21:52 AM Date.prototype.getTimezoneOffset = 300 navigator.userAgent = Mozilla/5.0  Macintosh; Intel Mac OS X 10_8_4  AppleWebKit/537.36  KHTML  like Gecko  Chrome/28.0.1500.71 Safari/537.36  140.5 Expected 5 assertions  4 ran  undefined undefined undefined  Error: Expected 5 assertions  4 ran     at Object.test.done  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1569:25      at Object.exports.runTest  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1710:14      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753:25     at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011:13     at iterate  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621:13      at async.forEachSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:637:9      at _concat  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1010:9      at Object.concatSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:650:23      at Object.exports.runSuite  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1732:11      at Object.exports.runModule  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1792:13  140.6 Cannot read property  _abbr  of undefined  undefined undefined undefined  TypeError: Cannot read property  _abbr  of undefined     at Function.P.lang  http://momentjs.com/static/js/global.min.js?v=2013 07 07T16:03:01 07:00:1:11497      at Object.exports.lang.library getter  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:4663:27      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1867:16     at Object.exports.runTest  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1707:9      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753:25     at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011:13     at iterate  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621:13      at async.forEachSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:637:9      at _concat  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1010:9      at Object.concatSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:650:23  ,engemasa,closed,3,2013-07-08 15:24:10,2013-09-26 11:54:21,,Unit Test Failed,,,0,1
13364,moment/moment,886,Test failure Bug,Date.prototype.toString = Mon Jul 08 2013 18:32:26 GMT 0100  GMT Daylight Time  Date.prototype.toLocaleString = 7/8/2013 6:32:26 PM Date.prototype.getTimezoneOffset = 0 navigator.userAgent = Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/27.0.1453.116 Safari/537.36  library getter 4 passed 2 failed. 140.1 Lang should return en by default 140.2 Lang should return the changed language 140.3 Lang should return the changed language 140.4 Lang should reset 140.5 Expected 5 assertions  4 ran  undefined undefined undefined  Error: Expected 5 assertions  4 ran     at Object.test.done  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1569:25      at Object.exports.runTest  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1710:14      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753:25     at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011:13     at iterate  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621:13      at async.forEachSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:637:9      at _concat  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1010:9      at Object.concatSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:650:23      at Object.exports.runSuite  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1732:11      at Object.exports.runModule  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1792:13  140.6 Cannot read property  _abbr  of undefined  undefined undefined undefined  TypeError: Cannot read property  _abbr  of undefined     at Function.P.lang  http://momentjs.com/static/js/global.min.js?v=2013 07 07T16:03:01 07:00:1:11497      at Object.exports.lang.library getter  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:4663:27      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1867:16     at Object.exports.runTest  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1707:9      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753:25     at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011:13     at iterate  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621:13      at async.forEachSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:637:9      at _concat  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1010:9      at Object.concatSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:650:23  ,regisbsb,closed,3,2013-07-08 17:33:48,2013-09-12 11:02:48,,,,0,1
13363,moment/moment,887,Still not preserving input zone.,I m glad 2.1.0 has the zone setter  but I still think it should be used automagically if you pass in a string with an offset.  Currently:      moment  2013 01 01T00:00:00 04:00  .format   //  2012 12 31T21:00:00 07:00       I can do this:      moment  2013 01 01T00:00:00 04:00  .zone 4 .format   //  2013 01 01T00:00:00 04:00       But I shouldn t have to.  If all I have is the string  it will be clumsy to have to extract the offset from the string myself just to pass it back in again. ,mj1856,closed,10,2013-07-08 18:21:45,2013-09-17 04:06:15,,Enhancement,,,0,1
13362,moment/moment,888,140.5 Expected 5 assertions  4 ran  undefined undefined undefined ,Error: Expected 5 assertions  4 ran     at Object.test.done  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1569:25      at Object.exports.runTest  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1710:14      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753:25     at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011:13     at iterate  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621:13      at async.forEachSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:637:9      at _concat  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1010:9      at Object.concatSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:650:23      at Object.exports.runSuite  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1732:11      at Object.exports.runModule  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1792:13  ,dyp2000,closed,0,2013-07-09 06:40:42,2013-07-09 06:42:53,,,,0,1
13361,moment/moment,889,140.6 Cannot read property  _abbr  of undefined  undefined undefined undefined ,TypeError: Cannot read property  _abbr  of undefined     at Function.P.lang  http://momentjs.com/static/js/global.min.js?v=2013 07 07T16:03:01 07:00:1:11497      at Object.exports.lang.library getter  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:4663:27      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1867:16     at Object.exports.runTest  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1707:9      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753:25     at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011:13     at iterate  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621:13      at async.forEachSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:637:9      at _concat  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1010:9      at Object.concatSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:650:23  ,dyp2000,closed,0,2013-07-09 06:41:24,2013-07-09 06:42:42,,,,0,1
13360,moment/moment,890,Moment format vs jQuery UI datepicker format,It s not a bug  but more a feature request or something to think about.  I use Moment and the jQuery UI datepicker. I have to support i18n and so formatting is a big deal for me.  I wish to use the format of Moment to control the format of the datepicker. But sadly there is a different in formatting. I can t exchange the formats.  For example   Day of month  is in Moment  DD   but in the datepicker  dd .  4 digit year  is in Moment  YYYY   but in the datepicker  yy .  MM/DD/YYYY is 07/09/2013 in Moment  but July/Tuesday/YYYY in the datepicker.  Format Moment: http://momentjs.com/docs/ /parsing/string format/ Format datepicker: https://github.com/jquery/jquery ui/blob/master/ui/jquery.ui.datepicker.js L1272  It would be nice for every one when the format is the same in every library. ,eonlepapillon,closed,6,2013-07-09 13:13:12,2013-07-11 13:43:35,,,,0,1
13359,moment/moment,891,16844 tests passed. 3 failed.,Submitting bug report as instructed on the website. I had a minute to submit  but not to debug.   Info  Date.prototype.toString = Tue Jul 09 2013 16:44:17 GMT 0200  CEST  Date.prototype.toLocaleString = Tue Jul  9 16:44:17 2013 Date.prototype.getTimezoneOffset =  60 navigator.userAgent = Mozilla/5.0  Macintosh; Intel Mac OS X 10.8; rv:22.0  Gecko/20100101 Firefox/22.0   Failures      140.5 Expected 5 assertions  4 ran  undefined undefined undefined   exports.test/test.done@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1571 exports.runTest@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1710 exports.runSuite/<@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753 _concat/<@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011 async.forEachSeries/iterate@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621 async.forEachSeries@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:637 _concat@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1015 doSeries/<@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:650 exports.runSuite@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1762 exports.runModule@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1792 exports.runModules/<@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1817 _concat/<@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011 async.forEachSeries/iterate@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621 async.forEachSeries/iterate/<@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:632 _concat/          140.6 P.fn._lang is undefined  undefined undefined undefined   P.lang@http://momentjs.com/static/js/global.min.js?v=2013 07 07T16:03:01 07:00:1 exports.lang[ library getter ]@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:4663 wrapTest/<@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1867 exports.runTest@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1707 exports.runSuite/<@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753 _concat/<@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011 async.forEachSeries/iterate@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621 async.forEachSeries@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:637 _concat@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1015 doSeries/<@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:650 exports.runSuite@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1762 exports.runModule@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1792 exports.runModules/<@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1817 _concat/<@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011 async.forEachSeries/iterate@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621 async.forEachSeries/iterate/<@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:632 _concat/          487.15 L    > 2010 02 14  2010 02 14 == L   AssertionError: L    > 2010 02 14     ,alanshaw,closed,2,2013-07-09 14:50:53,2013-07-16 05:47:20,,Unit Test Failed,,,0,1
13358,moment/moment,892,Allow adjustment of humanized duration strings,The table shown in the docs for [fromNow] http://momentjs.com/docs/ /displaying/fromnow/  is hard coded by the [relativeTime] https://github.com/timrwood/moment/blob/develop/moment.js L934  function.  Request for future version that the values be adjustable in some manner.  See:  http://stackoverflow.com/q/17473300/634824 ,mj1856,closed,6,2013-07-09 22:45:52,2014-06-05 07:16:05,,New Feature,todo,,,0,1
13357,moment/moment,893,Unit tests are failing: library getter 4 passed 2 failed.,16845 tests passed. 2 failed.      Date.prototype.toString = Wed Jul 10 2013 11:40:40 GMT 0200  CEST  Date.prototype.toLocaleString = 7/10/2013 11:40:40 AM Date.prototype.getTimezoneOffset =  60 navigator.userAgent = Mozilla/5.0  Macintosh; Intel Mac OS X 10_8_4  AppleWebKit/537.36  KHTML  like Gecko  Chrome/27.0.1453.116 Safari/537.36      Failing two:      140.5 Expected 5 assertions  4 ran  undefined undefined undefined  Error: Expected 5 assertions  4 ran     at Object.test.done  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1569:25      at Object.exports.runTest  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1710:14      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753:25     at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011:13     at iterate  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621:13      at async.forEachSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:637:9      at _concat  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1010:9      at Object.concatSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:650:23      at Object.exports.runSuite  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1732:11      at Object.exports.runModule  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1792:13  140.6 Cannot read property  _abbr  of undefined  undefined undefined undefined  TypeError: Cannot read property  _abbr  of undefined     at Function.P.lang  http://momentjs.com/static/js/global.min.js?v=2013 07 07T16:03:01 07:00:1:11497      at Object.exports.lang.library getter  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:4663:27      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1867:16     at Object.exports.runTest  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1707:9      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753:25     at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011:13     at iterate  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621:13      at async.forEachSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:637:9      at _concat  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1010:9      at Object.concatSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:650:23      ,fdomig,closed,0,2013-07-10 09:44:40,2013-07-26 07:50:25,,Unit Test Failed,,,0,1
13356,moment/moment,894,16843 tests passed. 4 failed.,    Date.prototype.toString = Wed Jul 10 2013 19:27:13 GMT 0430  IRDT  Date.prototype.toLocaleString = 7/10/2013 7:27:13 PM Date.prototype.getTimezoneOffset =  210 navigator.userAgent = Mozilla/5.0  X11; Linux i686  AppleWebKit/537.22  KHTML  like Gecko  Ubuntu Chromium/25.0.1364.160 Chrome/25.0.1364.160 Safari/537.22          library getter 4 passed 2 failed. 140.1 Lang should return en by default 140.2 Lang should return the changed language 140.3 Lang should return the changed language 140.4 Lang should reset 140.5 Expected 5 assertions  4 ran  undefined undefined undefined  Error: Expected 5 assertions  4 ran     at Object.test.done  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1569:25      at Object.exports.runTest  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1710:14      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753:25     at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011:13     at iterate  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621:13      at async.forEachSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:637:9      at _concat  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1010:9      at Object.concatSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:650:23      at Object.exports.runSuite  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1732:11      at Object.exports.runModule  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1792:13  140.6 Cannot read property  _abbr  of undefined  undefined undefined undefined  TypeError: Cannot read property  _abbr  of undefined     at Function.P.lang  http://momentjs.com/static/js/global.min.js?v=2013 07 07T16:03:01 07:00:1:11497      at Object.exports.lang.library getter  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:4663:27      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1867:16     at Object.exports.runTest  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1707:9      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753:25     at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011:13     at iterate  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621:13      at async.forEachSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:637:9      at _concat  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1010:9      at Object.concatSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:650:23           same / before / after 10 passed 2 failed. 220.1 two moments with different offsets should be the same 220.2 two moments with different offsets should be the same 220.3 two moments with different offsets should be the same hour  true == false  AssertionError: two moments with different offsets should be the same hour     at Object.ok  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1531:39      at Object.exports.zones.same / before / after  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:6214:14      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1863:20     at Object.exports.zones.setUp  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:5913:9      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1859:19     at Object.exports.runTest  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1707:9      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753:25     at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011:13     at iterate  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621:13      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:632:25 220.4 two moments with different offsets should be the same hour  true == false  AssertionError: two moments with different offsets should be the same hour     at Object.ok  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1531:39      at Object.exports.zones.same / before / after  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:6215:14      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1863:20     at Object.exports.zones.setUp  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:5913:9      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1859:19     at Object.exports.runTest  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1707:9      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753:25     at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011:13     at iterate  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621:13      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:632:25 220.5 isAfter should work with two moments with different offsets 220.6 isAfter should work with two moments with different offsets 220.7 isAfter:hour should work with two moments with different offsets 220.8 isAfter:hour should work with two moments with different offsets 220.9 isBefore should work with two moments with different offsets 220.10 isBefore should work with two moments with different offsets 220.11 isBefore:hour should work with two moments with different offsets 220.12 isBefore:hour should work with two moments with different offsets     ,mjnaderi,closed,0,2013-07-10 15:00:34,2013-07-16 05:46:57,,Unit Test Failed,,,0,1
13355,moment/moment,895,library getter 4 passed 2 failed,Date.prototype.toString = Wed Jul 10 18:59:23 UTC 0200 2013 Date.prototype.toLocaleString = mercoled  10 luglio 2013 18:59:23 Date.prototype.getTimezoneOffset =  60 navigator.userAgent = Mozilla/5.0  compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; MASM; .NET4.0C   lang  library getter 4 passed 2 failed. 140.1 Lang should return en by default 140.2 Lang should return the changed language 140.3 Lang should return the changed language 140.4 Lang should reset 140.5 Expected 5 assertions  4 ran  undefined undefined undefined Error: Expected 5 assertions  4 ran  140.6 Impossibile recuperare la propriet   _abbr  di un riferimento nullo o non definito  undefined undefined undefined TypeError: Impossibile recuperare la propriet   _abbr  di un riferimento nullo o non definito    at lang  http://momentjs.com/static/js/global.min.js?v=2013 07 07T16:03:01 07:00:1:11418     at library getter  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:4663:9     at Anonymous function  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1867:13     at runTest  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1707:9     at Anonymous function  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753:17     at Anonymous function  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011:13     at iterate  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621:13     at forEachSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:637:9     at _concat  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1010:9     at Anonymous function  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:650:13  ,jeisc,closed,0,2013-07-10 17:54:06,2013-07-16 05:46:57,,Unit Test Failed,,,0,1
13354,moment/moment,896,duration from string without day prefix,According to your duration documentation  duration accepts a timespan string in the format  hour:minute:second . This is working for me for hours smaller than 10  as far as i saw  all your duration tests only cover this case . For ours >= 10 the first digit is taken as the day.  see example http://jsfiddle.net/ZqRGf/ ,timbussmann,closed,3,2013-07-10 19:34:47,2013-07-22 21:15:44,,,,0,1
13353,moment/moment,897,Date overflowing on parse,I noticed when you put in a date like 25/1/13  MM/DD/YYYY  format it turns into 01/01/1915. Looking through the code  I see that the values are passed directly to date.setFullYear which allows dates to overflow.   Anyway to validate the months/days are in the correct range? and maybe have a cutoff for the century so 13 is 2013?  Brian ,brianchance,closed,3,2013-07-10 21:45:29,2013-07-14 04:07:16,,,,0,1
13352,moment/moment,898,16842 tests passed. 5 failed.,    Date.prototype.toString = Thu Jul 11 2013 05:43:26 GMT 0430  Iran Standard Time  Date.prototype.toLocaleString = Thursday  July 11  2013 5:43:26 AM Date.prototype.getTimezoneOffset =  210 navigator.userAgent = Mozilla/5.0  Windows NT 6.1; rv:22.0  Gecko/20100101 Firefox/22.0          library getter 4 passed 2 failed.      140.1 Lang should return en by default     140.2 Lang should return the changed language     140.3 Lang should return the changed language     140.4 Lang should reset     140.5 Expected 5 assertions  4 ran  undefined undefined undefined       exports.test/test.done@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1571     exports.runTest@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1710     exports.runSuite/<@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753     _concat/<@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011     async.forEachSeries/iterate@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621     async.forEachSeries@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:637     _concat@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1015     doSeries/<@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:650     exports.runSuite@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1762     exports.runModule@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1792     exports.runModules/<@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1817     _concat/<@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011     async.forEachSeries/iterate@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621     async.forEachSeries/iterate/<@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:632     _concat/      140.6 P.fn._lang is undefined  undefined undefined undefined       P.lang@http://momentjs.com/static/js/global.min.js?v=2013 07 07T16:03:01 07:00:1     exports.lang[ library getter ]@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:4663     wrapTest/<@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1867     exports.runTest@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1707     exports.runSuite/<@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753     _concat/<@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011     async.forEachSeries/iterate@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621     async.forEachSeries@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:637     _concat@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1015     doSeries/<@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:650     exports.runSuite@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1762     exports.runModule@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1792     exports.runModules/<@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1817     _concat/<@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011     async.forEachSeries/iterate@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621     async.forEachSeries/iterate/<@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:632     _concat/          same / before / after 10 passed 2 failed.      220.1 two moments with different offsets should be the same     220.2 two moments with different offsets should be the same     220.3 two moments with different offsets should be the same hour  true == false       AssertionError: two moments with different offsets should be the same hour      220.4 two moments with different offsets should be the same hour  true == false       AssertionError: two moments with different offsets should be the same hour      220.5 isAfter should work with two moments with different offsets     220.6 isAfter should work with two moments with different offsets     220.7 isAfter:hour should work with two moments with different offsets     220.8 isAfter:hour should work with two moments with different offsets     220.9 isBefore should work with two moments with different offsets     220.10 isBefore should work with two moments with different offsets     220.11 isBefore:hour should work with two moments with different offsets     220.12 isBefore:hour should work with two moments with different offsets          format 21 passed 1 failed.      487.1 dddd  MMMM Do YYYY  h:mm:ss a    > Diman o  februaro 14a 2010  3:25:50 p.t.m.     487.2 ddd  hA    > Dim  3P.T.M.     487.3 M Mo MM MMMM MMM    > 2 2a 02 februaro feb     487.4 YYYY YY    > 2010 10     487.5 D Do DD    > 14 14a 14     487.6 d do dddd ddd dd    > 0 0a Diman o Dim Di     487.7 DDD DDDo DDDD    > 45 45a 045     487.8 w wo ww    > 7 7a 07     487.9 h hh    > 3 03     487.10 H HH    > 15 15     487.11 m mm    > 25 25     487.12 s ss    > 50 50     487.13 a A    > p.t.m. P.T.M.     487.14 [la] DDDo [tago] [de] [la] [jaro]    > la 45a tago de la jaro     487.15 L    > 2010 02 14  2010 02 14 == L       AssertionError: L    > 2010 02 14      487.16 LL    > 14 an de februaro  2010     487.17 LLL    > 14 an de februaro  2010 15:25     487.18 LLLL    > Diman o  la 14 an de februaro  2010 15:25     487.19 l    > 2010 2 14     487.20 ll    > 14 an de feb  2010     487.21 lll    > 14 an de feb  2010 15:25     487.22 llll    > Dim  la 14 an de feb  2010 15:25     ,mmnaderi,closed,2,2013-07-11 01:16:59,2013-09-18 05:16:56,,TZ Testing,Unit Test Failed,,,0,1
13351,moment/moment,899,16845 tests passed. 2 failed.,    Date.prototype.toString = Wed Jul 10 2013 18:29:00 GMT 0700  PDT  Date.prototype.toLocaleString = 7/10/2013 6:29:00 PM Date.prototype.getTimezoneOffset = 480 navigator.userAgent = Mozilla/5.0  Macintosh; Intel Mac OS X 10_8_4  AppleWebKit/537.36  KHTML  like Gecko  Chrome/28.0.1500.71 Safari/537.36     ,bhardin,closed,1,2013-07-11 03:26:15,2013-07-16 05:46:57,,Unit Test Failed,,,0,1
13350,moment/moment,900,16844 tests passed. 3 failed. iOS 6 iPad4,16844 tests passed. 3 failed. Hmm  looks like some of the unit tests are failing.  It s hard to catch all the bugs across all browsers and timezones  so if you have a minute  please submit an issue with the failing test and the info below. Thanks   Please submit an issue to github.com/timrwood/moment/issues with the information below and the failing tests.  Date.prototype.toString = Thu Jul 11 2013 07:07:51 GMT 0100  BST  Date.prototype.toLocaleString = 11 July 2013 07:07:51 BST Date.prototype.getTimezoneOffset = 0 navigator.userAgent = Mozilla/5.0  iPad; CPU OS 6_0_1 like Mac OS X  AppleWebKit/536.26  KHTML  like Gecko  Mercury/7.4.2 Mobile/10A523 Safari/8536.25 ,danielweck,closed,3,2013-07-11 06:10:57,2013-07-16 05:46:57,,Unit Test Failed,,,0,1
13349,moment/moment,901,Test results,Date.prototype.toString = Thu Jul 11 2013 08:05:43 GMT 0100  BST  Date.prototype.toLocaleString = July 11  2013 8:05:43 AM GMT 01:00 Date.prototype.getTimezoneOffset = 0 navigator.userAgent = Mozilla/5.0  Macintosh; Intel Mac OS X 10_8_4  AppleWebKit/536.30.1  KHTML  like Gecko  Version/6.0.5 Safari/536.30.1       140.5 Expected 5 assertions  4 ran  undefined undefined undefined  Error: Expected 5 assertions  4 ran 140.6  undefined  is not an object  evaluating  P.fn._lang._abbr    undefined undefined undefined  lang@http://momentjs.com/static/js/global.min.js?v=2013 07 07T16:03:01 07:00:1 library getter@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:4663 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1867 runTest@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1707 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1014 iterate@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:635 forEachSeries@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:637 _concat@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1017 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:650 runSuite@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1762 runModule@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1797 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1817 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1014 iterate@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:635 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:632 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1013 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1796 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1016 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:629 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1013 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1594 [native code] ,ilkut,closed,0,2013-07-11 07:08:47,2013-07-16 05:46:57,,,,0,1
13348,moment/moment,902,Failed Unit Test   16845 tests passed. 2 failed.   Moment.js2.1.0,Date.prototype.toString = Thu Jul 11 2013 16:18:19 GMT 0100  GMT Daylight Time  Date.prototype.toLocaleString = 7/11/2013 4:18:19 PM Date.prototype.getTimezoneOffset = 0 navigator.userAgent = Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/27.0.1453.116 Safari/537.36 ,eyeung003,closed,0,2013-07-11 15:19:45,2013-07-16 05:46:57,,Unit Test Failed,,,0,1
13347,moment/moment,903,16845 tests passed. 2 failed.,Please submit an issue to github.com/timrwood/moment/issues with the information below and the failing tests.  Date.prototype.toString = Thu Jul 11 2013 18:14:18 GMT 0500  CDT  Date.prototype.toLocaleString = 11/7/2013 18:14:18 Date.prototype.getTimezoneOffset = 360 navigator.userAgent = Mozilla/5.0  Macintosh; Intel Mac OS X 10_7_5  AppleWebKit/537.36  KHTML  like Gecko  Chrome/27.0.1453.116 Safari/537.36  library getter 4 passed 2 failed.  140.5 Expected 5 assertions  4 ran  undefined undefined undefined  Error: Expected 5 assertions  4 ran     at Object.test.done  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1569:25      at Object.exports.runTest  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1710:14      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753:25     at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011:13     at iterate  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621:13      at async.forEachSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:637:9      at _concat  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1010:9      at Object.concatSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:650:23      at Object.exports.runSuite  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1732:11      at Object.exports.runModule  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1792:13   140.6 Cannot read property  _abbr  of undefined  undefined undefined undefined  TypeError: Cannot read property  _abbr  of undefined     at Function.P.lang  http://momentjs.com/static/js/global.min.js?v=2013 07 07T16:03:01 07:00:1:11497      at Object.exports.lang.library getter  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:4663:27      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1867:16     at Object.exports.runTest  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1707:9      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753:25     at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011:13     at iterate  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621:13      at async.forEachSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:637:9      at _concat  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1010:9      at Object.concatSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:650:23  ,ghost,closed,1,2013-07-11 23:20:13,2013-07-16 05:46:57,,Unit Test Failed,,,0,1
13346,moment/moment,904,2 unit tests failed,Date.prototype.toString = Fri Jul 12 2013 10:38:12 GMT 0400  EDT  Date.prototype.toLocaleString = 7/12/2013 10:38:12 AM Date.prototype.getTimezoneOffset = 300 navigator.userAgent = Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.31  KHTML  like Gecko  Chrome/26.0.1410.63 Safari/537.31 ,nesta219,closed,1,2013-07-12 14:39:24,2013-07-16 05:46:58,,Unit Test Failed,,,0,1
13345,moment/moment,905,Adding 1 day to a date on which local daylight time is about to reach does not substract the extra hour,There seems to be problem when you add a day to a date on which local daylight time is about to reach. Moment does not substract the additional hour here   in comparison to Python which does substract the additional hour:  in Moment.js 2.1.0 you get:  var dt = moment  2013 10 27 02:00  0200    YYYY MM DD HH:mm Z  ; dt.add  days    1 ; alert dt.format  YYYY MM DD HH:mm Z   ; // 2013 10 28 02:00  01:00 alert dt.zone  00:00  .format  YYYY MM DD HH:mm Z   ; // 2013 10 28 01:00  00:00  in Python you get:    from django.utils.dateparse import parse_datetime   dt_string =  2013 10 27T02:00:00 02:00    dt = parse_datetime dt_string    dt = dt   timedelta days=1    dt datetime.datetime 2013  10  28  2  0  tzinfo= 0200     dt.astimezone pytz.timezone  utc    datetime.datetime 2013  10  28  0  0  tzinfo=<UTC>  ,googol7,closed,1,2013-07-12 21:52:57,2013-07-14 04:05:58,,,,0,1
13344,moment/moment,906,16828 tests passed. 3 failed.,Date.prototype.toString = Fri Jul 12 2013 20:06:42 GMT 0400 Date.prototype.toLocaleString = viernes  12 de julio de 2013 20:06:42 Date.prototype.getTimezoneOffset = 240 navigator.userAgent = Mozilla/5.0  Windows NT 6.1; rv:22.0  Gecko/20100101 Firefox/22.0 ,Gloix,closed,1,2013-07-13 00:09:24,2013-07-16 05:46:58,,Unit Test Failed,,,0,1
13343,moment/moment,907,3 test fails. 2 in lang  1 in min_max ,Hello  3 fails. Info: Date.prototype.toString = Sat Jul 13 2013 12:32:45 GMT 0400  MSK  Date.prototype.toLocaleString = 7/13/2013 12:32:45 PM Date.prototype.getTimezoneOffset =  240 navigator.userAgent = Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/28.0.1500.71 Safari/537.36  Fails:  1 LANG  library getter 4 passed 2 failed. 140.1 Lang should return en by default 140.2 Lang should return the changed language 140.3 Lang should return the changed language 140.4 Lang should reset 140.5 Expected 5 assertions  4 ran  undefined undefined undefined  Error: Expected 5 assertions  4 ran     at Object.test.done  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1569:25      at Object.exports.runTest  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1710:14      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753:25     at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011:13     at iterate  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621:13      at async.forEachSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:637:9      at _concat  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1010:9      at Object.concatSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:650:23      at Object.exports.runSuite  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1732:11      at Object.exports.runModule  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1792:13  140.6 Cannot read property  _abbr  of undefined  undefined undefined undefined  TypeError: Cannot read property  _abbr  of undefined     at Function.P.lang  http://momentjs.com/static/js/global.min.js?v=2013 07 07T16:03:01 07:00:1:11497      at Object.exports.lang.library getter  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:4663:27      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1867:16     at Object.exports.runTest  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1707:9      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753:25     at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011:13     at iterate  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621:13      at async.forEachSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:637:9      at _concat  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1010:9      at Object.concatSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:650:23   2 MIN_MAX  min 7 passed 1 failed. 155.1 A past date with the minimum of now should be now 155.2 A past date with the minimum of implied now should be now  true == false  AssertionError: A past date with the minimum of implied now should be now     at Object.ok  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1531:39      at Object.exports.min_max.min  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:4919:14      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1863:20     at Object.exports.min_max.setUp  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:4900:9      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1859:19     at Object.exports.runTest  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1707:9      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753:25     at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011:13     at iterate  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621:13      at async.forEachSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:637:9  155.3 A past date with the minimum of the future should be the future date 155.4 A future date with the minimum of now should be the future 155.5 A future date with the minimum of implied now should be the future 155.6 A future date with the minimum of the past should be the future 155.7 Now with the minimum of the past should be now 155.8 Now with the minimum of the future should be the future ,spacegangster,closed,0,2013-07-13 08:39:02,2013-07-16 05:46:58,,,,0,1
13342,moment/moment,908,3 Failing unit tests,FYI  Browser info: Date.prototype.toString = Sat Jul 13 2013 13:05:42 GMT 0100  GMT Standard Time  Date.prototype.toLocaleString = 13 July 2013 13:05:42 Date.prototype.getTimezoneOffset = 0 navigator.userAgent = Mozilla/5.0  Windows NT 6.2; WOW64; rv:22.0  Gecko/20100101 Firefox/22.0  Failed tests: 140.5 Expected 5 assertions  4 ran  undefined undefined undefined  140.6 P.fn._lang is undefined  undefined undefined undefined  487.15 L    > 2010 02 14  2010 02 14 == L  ,gplumb,closed,0,2013-07-13 12:08:13,2013-07-16 05:46:58,,,,0,1
13341,moment/moment,909,2 unit tests failed,Date.prototype.toString = Sat Jul 13 2013 23:11:25 GMT 0300  EEST  Date.prototype.toLocaleString = 7/13/2013 11:11:25 PM Date.prototype.getTimezoneOffset =  120 navigator.userAgent = Mozilla/5.0  Macintosh; Intel Mac OS X 10_8_3  AppleWebKit/537.36  KHTML  like Gecko  Chrome/27.0.1453.116 Safari/537.36  FAILED TESTS  140.5 Expected 5 assertions  4 ran  undefined undefined undefined  Error: Expected 5 assertions  4 ran     at Object.test.done  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1569:25      at Object.exports.runTest  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1710:14      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753:25     at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011:13     at iterate  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621:13      at async.forEachSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:637:9      at _concat  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1010:9      at Object.concatSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:650:23      at Object.exports.runSuite  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1732:11      at Object.exports.runModule  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1792:13   140.6 Cannot read property  _abbr  of undefined  undefined undefined undefined  TypeError: Cannot read property  _abbr  of undefined     at Function.P.lang  http://momentjs.com/static/js/global.min.js?v=2013 07 07T16:03:01 07:00:1:11497      at Object.exports.lang.library getter  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:4663:27      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1867:16     at Object.exports.runTest  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1707:9      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753:25     at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011:13     at iterate  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621:13      at async.forEachSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:637:9      at _concat  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1010:9      at Object.concatSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:650:23  ,burakkirkil,closed,0,2013-07-14 00:25:13,2013-07-16 05:46:58,,Unit Test Failed,,,0,1
13340,moment/moment,910,AspNET duration regex now correctly handles days,Days are now completely optional and won t steal digits from the hours.  Fixing  896 ,ichernev,closed,1,2013-07-14 04:18:27,2013-07-20 16:32:12,,,,1,1
13339,moment/moment,911,Added a way to uninstall a language definition,moment.lang key  null  now uninstalls a language. That s mostly useful to remove auxiliary languages added during test runs.  This is needed by  857. ,ichernev,closed,2,2013-07-14 05:08:45,2013-07-23 16:12:25,,,,1,1
13338,moment/moment,912,Moment creation defaults to current date,This has been requested a few times:   if the format contains an year  do not default anything   if there is no year but month  then default to current year   if there is day of month  default to current year and month ,ichernev,closed,3,2013-07-14 06:07:02,2013-07-27 07:30:23,,,,1,1
13337,moment/moment,913,Added strict parsing,I ve wanted this for a long time    strict parsing. It builds one regex of all the tokens and matches it against the whole string. Then it matches the match groups against the tokens.  I guess we can add stricter regexes for the tokens  for example MM will match 2 digits only  instead of one digit . ,ichernev,closed,10,2013-07-14 06:44:58,2013-09-17 07:22:18,,Enhancement,,,1,1
13336,moment/moment,914,16845 tests passed. 2 failed.,Date.prototype.toString = Sun Jul 14 2013 08:12:39 GMT 0100  BST  Date.prototype.toLocaleString = 7/14/2013 8:12:39 AM Date.prototype.getTimezoneOffset = 0 navigator.userAgent = Mozilla/5.0  Macintosh; Intel Mac OS X 10_8_4  AppleWebKit/537.36  KHTML  like Gecko  Chrome/27.0.1453.116 Safari/537.36 ,mikecaisey,closed,0,2013-07-14 07:13:00,2013-07-16 05:46:58,,Unit Test Failed,,,0,1
13335,moment/moment,915,Added invalidAt function to get invalid unit index,isValid is boolean  so its not very helpful in determining which section of a date is wrong. inavlidAt returns the index of the broken token  where 0 is year and 6 is millisecond.  Requested in  570. ,ichernev,closed,3,2013-07-14 07:16:01,2013-07-27 06:57:32,,,,1,1
13334,moment/moment,916,Support different OSes when getting/setting the timezone,It looked like the timezone getting and setting done in grunt zones only worked on macosx. I added archlinux and also an easy way to add more os es.  @timrwood please test first  because I don t have a mac at hand. ,ichernev,closed,5,2013-07-14 08:03:07,2013-08-29 08:23:47,,,,1,1
13333,moment/moment,917,2 tests failing,Date.prototype.toString = Sun Jul 14 2013 14:40:29 GMT 0100  BST  Date.prototype.toLocaleString = 14 July 2013 14:40:29 BST Date.prototype.getTimezoneOffset = 0 navigator.userAgent = Mozilla/5.0  Macintosh; Intel Mac OS X 10_8_4  AppleWebKit/536.30.1  KHTML  like Gecko  Version/6.0.5 Safari/536.30.1 ,onevision,closed,2,2013-07-14 13:41:40,2013-07-16 05:46:58,,,,0,1
13332,moment/moment,918,Added start/end/same support for isoWeek,As requested by  855 ,ichernev,closed,1,2013-07-14 23:32:25,2013-07-18 09:05:27,,,,1,1
13331,moment/moment,919,inconsistent capitalization in NL language,In the Dutch translation   nl.js    the words  Vandaag    Morgen  and  Gisteren  are capitalized  while other words are not. This leads to situations with mixed casing in a list  eg:  Vandaag om 20:30 afgelopen donderdag om 11:34 Gisteren om 12:21  I think  Vandaag    Morgen  and  Gisteren  shouldn t be capitalized in the Dutch translation. ,bkummel,closed,5,2013-07-15 11:07:51,2013-09-16 02:54:45,,,,0,1
13330,moment/moment,920,140.5 and 140.6 unit tests failed on Chrome/28,Please submit an issue to github.com/timrwood/moment/issues with the information below and the failing tests.  Date.prototype.toString = Mon Jul 15 2013 09:08:09 GMT 0400  Eastern Daylight Time  Date.prototype.toLocaleString = 7/15/2013 9:08:09 AM Date.prototype.getTimezoneOffset = 300 navigator.userAgent = Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/28.0.1500.71 Safari/537.36  140.5 Expected 5 assertions  4 ran  undefined undefined undefined  Error: Expected 5 assertions  4 ran     at Object.test.done  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1569:25      at Object.exports.runTest  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1710:14      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753:25     at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011:13     at iterate  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621:13      at async.forEachSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:637:9      at _concat  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1010:9      at Object.concatSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:650:23      at Object.exports.runSuite  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1732:11      at Object.exports.runModule  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1792:13   140.6 Cannot read property  _abbr  of undefined  undefined undefined undefined  TypeError: Cannot read property  _abbr  of undefined     at Function.P.lang  http://momentjs.com/static/js/global.min.js?v=2013 07 07T16:03:01 07:00:1:11497      at Object.exports.lang.library getter  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:4663:27      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1867:16     at Object.exports.runTest  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1707:9      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753:25     at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011:13     at iterate  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621:13      at async.forEachSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:637:9      at _concat  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1010:9      at Object.concatSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:650:23  ,zaaq,closed,1,2013-07-15 13:09:43,2013-07-16 05:46:58,,Unit Test Failed,,,0,1
13329,moment/moment,921,2 tests fail on PST in English on Safari,Please submit an issue to github.com/timrwood/moment/issues with the information below and the failing tests.  Date.prototype.toString = Mon Jul 15 2013 09:13:53 GMT 0700  PDT  Date.prototype.toLocaleString = July 15  2013 9:13:53 AM PDT Date.prototype.getTimezoneOffset = 480 navigator.userAgent = Mozilla/5.0  Macintosh; Intel Mac OS X 10_8_4  AppleWebKit/536.30.1  KHTML  like Gecko  Version/6.0.5 Safari/536.30.1  Error: Expected 5 assertions  4 ran 140.6  undefined  is not an object  evaluating  P.fn._lang._abbr    undefined undefined undefined  lang@http://momentjs.com/static/js/global.min.js?v=2013 07 07T16:03:01 07:00:1 library getter@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:4663 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1867 runTest@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1707 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1014 iterate@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:635 forEachSeries@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:637 _concat@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1017 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:650 runSuite@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1762 runModule@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1797 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1817 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1014 iterate@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:635 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:632 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1013 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1796 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1016 ,dts,closed,0,2013-07-15 16:16:25,2013-07-16 05:46:58,,,,0,1
13328,moment/moment,922,3 tests failed Chrome/28.0.1500.71,    Date.prototype.toString = Tue Jul 16 2013 00:09:58 GMT 0700  NOVT  Date.prototype.toLocaleString = 16.7.2013 0:09:58 Date.prototype.getTimezoneOffset =  420 navigator.userAgent = Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/28.0.1500.71 Safari/537.36          140.5 Expected 5 assertions  4 ran  undefined undefined undefined  Error: Expected 5 assertions  4 ran     at Object.test.done  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1569:25      at Object.exports.runTest  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1710:14      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753:25     at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011:13     at iterate  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621:13      at async.forEachSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:637:9      at _concat  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1010:9      at Object.concatSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:650:23      at Object.exports.runSuite  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1732:11      at Object.exports.runModule  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1792:13           140.6 Cannot read property  _abbr  of undefined  undefined undefined undefined  TypeError: Cannot read property  _abbr  of undefined     at Function.P.lang  http://momentjs.com/static/js/global.min.js?v=2013 07 07T16:03:01 07:00:1:11497      at Object.exports.lang.library getter  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:4663:27      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1867:16     at Object.exports.runTest  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1707:9      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753:25     at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011:13     at iterate  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621:13      at async.forEachSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:637:9      at _concat  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1010:9      at Object.concatSeries  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:650:23           156.5 A future date with the maximum of implied now should be now  true == false  AssertionError: A future date with the maximum of implied now should be now     at Object.ok  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1531:39      at Object.exports.min_max.max  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:4947:14      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1863:20     at Object.exports.min_max.setUp  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:4900:9      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1859:19     at Object.exports.runTest  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1707:9      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753:25     at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1011:13     at iterate  http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:621:13      at http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:632:25     ,mahnunchik,closed,0,2013-07-15 17:13:57,2013-07-16 05:46:58,,Unit Test Failed,,,0,1
13327,moment/moment,923,3 Tests Failed Chrome on Linux,Date.prototype.toString = Mon Jul 15 2013 14:04:25 GMT 0400  EDT  Date.prototype.toLocaleString = 7/15/2013  2:04:25 PM Date.prototype.getTimezoneOffset = 300 navigator.userAgent = Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/27.0.1453.93 Safari/537.36 ,evasilchenko,closed,0,2013-07-15 18:05:30,2013-07-16 05:46:58,,Unit Test Failed,,,0,1
13326,moment/moment,924,2 tests failed Chrome Version 28.0.1500.71,Date.prototype.toString = Mon Jul 15 2013 18:10:25 GMT 0700  PDT  Date.prototype.toLocaleString = 7/15/2013 6:10:25 PM Date.prototype.getTimezoneOffset = 480 navigator.userAgent = Mozilla/5.0  Macintosh; Intel Mac OS X 10_7_5  AppleWebKit/537.36  KHTML  like Gecko  Chrome/28.0.1500.71 Safari/537.36   [screen shot 2013 07 15 at 6 16 59 pm] https://f.cloud.github.com/assets/4342295/802062/774e2d8a edb5 11e2 823c 41af8c414200.png  ,stolentomato,closed,0,2013-07-16 01:17:48,2013-07-16 05:46:58,,Unit Test Failed,,,0,1
13325,moment/moment,925,2 tests failed in safari on OSX,Please submit an issue to github.com/timrwood/moment/issues with the information below and the failing tests.      Date.prototype.toString = Tue Jul 16 2013 15:25:11 GMT 1000  EST  Date.prototype.toLocaleString = 16 July 2013 3:25:11 PM AEST Date.prototype.getTimezoneOffset =  660 navigator.userAgent = Mozilla/5.0  Macintosh; Intel Mac OS X 10_8_4  AppleWebKit/536.30.1  KHTML  like Gecko  Version/6.0.5 Safari/536.30.1      Failure  1      140.5 Expected 5 assertions  4 ran  undefined undefined undefined  Error: Expected 5 assertions  4 ran      Failure  2      140.6  undefined  is not an object  evaluating  P.fn._lang._abbr    undefined undefined undefined  lang@http://momentjs.com/static/js/global.min.js?v=2013 07 07T16:03:01 07:00:1 library getter@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:4663 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1867 runTest@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1707 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1753 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1014 iterate@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:635 forEachSeries@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:637 _concat@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1017 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:650 runSuite@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1762 runModule@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1797 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1817 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1014 iterate@http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:635 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:632 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1013 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1796 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1016 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:629 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1013 @http://momentjs.com/static/js/core test.js?v=2013 07 07T16:03:01 07:00:1594 [native code]     ,Bockit,closed,0,2013-07-16 05:29:55,2013-07-16 05:46:59,,Unit Test Failed,,,0,1
13324,moment/moment,926,last day of the month,I m encountering a strange problem  doing this   moment  .add 1   month  .endOf  month  .format  D      I get back 31  but February has only 28 days.. or am I doing something wrong? ,fxck,closed,1,2013-07-16 10:11:26,2013-07-27 07:00:39,,,,0,1
13323,moment/moment,927,Testing Moment on IE7,Date.prototype.toString = Tue Jul 16 13:09:45 UTC 0200 2013Date.prototype.toLocaleString = 16 July 2013 13:09:45Date.prototype.getTimezoneOffset =  60navigator.userAgent = Mozilla/4.0  compatible; MSIE 7.0; Windows NT 6.2; WOW64; .NET4.0E; .NET4.0C; .NET CLR 3.5.30729; .NET CLR 2.0.50727; .NET CLR 3.0.30729  ,saagius,closed,1,2013-07-16 11:09:29,2013-09-14 23:38:25,,,,0,1
13322,moment/moment,928,Setting the month as a number in a string sets the month to July,The other setters behave as expected when their argument is a number in a string  eg.  2  instead of 2  but month   seems to set the month to July if the input is not a number and not a name of a month.  For example:  Correct: moment  .year  2009  .month 1 .date  2  .hour  3  .minute  3  .second  0  .toString   =>  Mon Feb 02 2009 03:03:00 GMT 0200    Incorrect: moment  .year  2009  .month  1  .date  2  .hour  3  .minute  3  .second  0  .toString   =>  Thu Jul 02 2009 03:03:00 GMT 0300   I would appreciate if the library would either throw an error if the argument cannot be parsed or then parse numbers in strings properly.  Cheers  ,joelmertanen,closed,2,2013-07-16 16:50:18,2013-07-26 07:52:13,,,,0,1
13321,moment/moment,929,Hour hand on website not taking into account minutes  code inside ,I couldn t find a repo for the website itself so I wasn t able to create a pull request.  On [http://momentjs.com/] http://momentjs.com/   the hour hand doesn t move with the minutes as a typical watch does and that bothered me a bit.  This can be fixed by changing the  update  function like so:      javascript function update        moment.lang currentLang ;          js format  .html formatHtml   ;         js from now  .html fromHtml   ;         js calendar  .html calendarHtml   ;         js lang  .html langHtml   ;      var now = moment            second = now.seconds     6          minute = now.minutes     6          hour =   now.hours     12  / 12    360   90   minute/12;          hour  .css  transform    rotate     hour    deg   ;         minute  .css  transform    rotate     minute    deg   ;         second  .css  transform    rotate     second    deg   ;        I reordered the definitions of the three angles to be able to take  minute  into account in  hour . Of course you could also have  minute = now.minutes     6   second/60  but that doesn t show as much and it s more a matter of taste I think.  some watches/clocks move minute hands all at once  but I haven t seen any that move hours all at once   Cheers  ,Timothee,closed,5,2013-07-17 17:07:32,2013-07-17 17:26:16,,,,0,1
13320,moment/moment,930,allow initializing with unix timestamp as integer,If your are working with unix timestamps  they are often stored as integers  this fix allows you to initialize moment with an unix timestamp as an integer ,jrgensen,closed,2,2013-07-17 20:31:12,2013-07-18 16:31:45,,,,1,1
13319,moment/moment,931,Unit test failed: min_max  156.5 future date w/ max of impl. now == now failed ,Date.prototype.toString = Thu Jul 18 2013 07:27:29 GMT 0200  CEST  Date.prototype.toLocaleString = 2013 7 18 07:27:29 Date.prototype.getTimezoneOffset =  60 navigator.userAgent = Mozilla/5.0  Macintosh; Intel Mac OS X 10_7_5  AppleWebKit/537.36  KHTML  like Gecko  Chrome/28.0.1500.71 Safari/537.36  156.5 A future date with the maximum of implied now should be now  true == false  AssertionError: A future date with the maximum of implied now should be now     at Object.ok  http://momentjs.com/static/js/core test.js?v=2013 07 17T10:59:13 07:00:1531:39      at Object.exports.min_max.max  http://momentjs.com/static/js/core test.js?v=2013 07 17T10:59:13 07:00:4950:14      at http://momentjs.com/static/js/core test.js?v=2013 07 17T10:59:13 07:00:1863:20     at Object.exports.min_max.setUp  http://momentjs.com/static/js/core test.js?v=2013 07 17T10:59:13 07:00:4901:9      at http://momentjs.com/static/js/core test.js?v=2013 07 17T10:59:13 07:00:1859:19     at Object.exports.runTest  http://momentjs.com/static/js/core test.js?v=2013 07 17T10:59:13 07:00:1707:9      at http://momentjs.com/static/js/core test.js?v=2013 07 17T10:59:13 07:00:1753:25     at http://momentjs.com/static/js/core test.js?v=2013 07 17T10:59:13 07:00:1011:13     at iterate  http://momentjs.com/static/js/core test.js?v=2013 07 17T10:59:13 07:00:621:13      at http://momentjs.com/static/js/core test.js?v=2013 07 17T10:59:13 07:00:632:25 ,davidanton1d,closed,1,2013-07-18 05:30:45,2013-09-26 06:54:41,,TZ Testing,Unit Test Failed,,,0,1
13318,moment/moment,932,bubbling up/down,,rsacher,closed,0,2013-07-18 08:16:12,2013-07-18 08:23:20,,,,0,1
13317,moment/moment,933,Test failed,Date.prototype.toString = Thu Jul 18 2013 16:20:58 GMT 0100  GMT Standard Time  Date.prototype.toLocaleString = 18 July 2013 16:20:58 Date.prototype.getTimezoneOffset = 0 navigator.userAgent = Mozilla/5.0  Windows NT 6.1; WOW64; rv:22.0  Gecko/20100101 Firefox/22.0  487.15 L    > 2010 02 14  2010 02 14 == L   AssertionError: L    > 2010 02 14 ,jarlatheoin,closed,1,2013-07-18 15:28:14,2013-08-19 22:58:41,,,,0,1
13316,moment/moment,934,Failing test,As test page asked politely  here is the failing test report:      Date.prototype.toString = Thu Jul 18 2013 17:56:35 GMT 0100  BST  Date.prototype.toLocaleString = Thu 18 Jul 2013 17:56:35 BST Date.prototype.getTimezoneOffset =  60 navigator.userAgent = Mozilla/5.0  X11; Ubuntu; Linux x86_64; rv:22.0  Gecko/20100101 Firefox/22.0     ,BorePlusPlus,closed,0,2013-07-18 16:58:45,2013-08-19 22:58:57,,,,0,1
13315,moment/moment,935,16819 tests passed. 11 failed.,Date.prototype.toString = Thu Jul 18 2013 16:00:26 GMT 0300  ART  Date.prototype.toLocaleString = 7/18/2013 4:00:26 PM Date.prototype.getTimezoneOffset = 180 navigator.userAgent = Mozilla/5.0  Macintosh; Intel Mac OS X 10_8_4  AppleWebKit/537.36  KHTML  like Gecko  Chrome/28.0.1500.71 Safari/537.36 ,vemec,closed,2,2013-07-18 19:01:30,2013-09-16 03:45:42,,TZ Testing,Unit Test Failed,,,0,1
13314,moment/moment,936,16818 tests passed. 12 failed.,Date.prototype.toString = Thu Jul 18 2013 16:02:50 GMT 0300  ART  Date.prototype.toLocaleString = Thu Jul 18 16:02:50 2013 Date.prototype.getTimezoneOffset = 180 navigator.userAgent = Mozilla/5.0  Macintosh; Intel Mac OS X 10.8; rv:22.0  Gecko/20100101 Firefox/22.0 ,vemec,closed,5,2013-07-18 19:04:05,2013-09-16 03:45:25,,TZ Testing,Unit Test Failed,,,0,1
13313,moment/moment,937,Unit Test 1 Failure,Date.prototype.toString = Fri Jul 19 2013 16:35:23 GMT 1000  AUS Eastern Standard Time  Date.prototype.toLocaleString = Friday  19 July 2013 4:35:23 PM Date.prototype.getTimezoneOffset =  660 navigator.userAgent = Mozilla/5.0  Windows NT 6.1; rv:22.0  Gecko/20100101 Firefox/22.0 ,bjnhuggins,closed,1,2013-07-19 06:38:13,2013-09-14 23:36:51,,,,0,1
13312,moment/moment,938,string driven getters and setters,Should be able to do  moment  .get  days    and  moment  .set  days   3    similar to how we have  as    and  get    on durations  see  701 . ,icambron,closed,0,2013-07-19 13:54:54,2013-07-20 21:18:48,,,,1,1
13311,moment/moment,939,1 test failed while executing tests,Date.prototype.toString = Fri Jul 19 2013 15:54:09 GMT 0200  CEST  Date.prototype.toLocaleString = Fri 19 Jul 2013 03:54:09 PM CEST Date.prototype.getTimezoneOffset =  60 navigator.userAgent = Mozilla/5.0  X11; Ubuntu; Linux i686; rv:22.0  Gecko/20100101 Firefox/22.0 ,aflorit,closed,0,2013-07-19 13:54:57,2013-07-19 13:55:26,,Unit Test Failed,,,0,1
13310,moment/moment,940,Added component grunt task to generate component.json,Automatically generate component.json to avoid issues like  821   Probably include minified files too. ,ichernev,closed,13,2013-07-20 22:04:28,2013-09-16 10:39:56,,,,1,1
13309,moment/moment,941,Added iso duration parsing,As requested per  861. ,ichernev,closed,16,2013-07-21 08:30:41,2013-10-02 07:23:00,,New Feature,,,1,1
13308,moment/moment,942,Makes month abbreviations be able to case in Russian,Futher reading  in Russian : http://artgorbunov.ru/bb/soviet/20100812/ ,borodean,closed,8,2013-07-22 00:45:32,2013-09-08 18:23:09,,,,1,1
13307,moment/moment,943,Failing Test   487.15,I only get this error in Firefox  not other browsers. I ran the tests because Moment was generating an invalid date from  1 1 2012   also only in Firefox. I assume it s related.  487.15 L    > 2010 02 14  2010 02 14 == L   AssertionError: L    > 2010 02 14  Date.prototype.toString = Mon Jul 22 2013 19:19:23 GMT 0400  EDT  Date.prototype.toLocaleString = Mon 22 Jul 2013 07:19:23 PM EDT Date.prototype.getTimezoneOffset = 300 navigator.userAgent = Mozilla/5.0  X11; Ubuntu; Linux x86_64; rv:22.0  Gecko/20100101 Firefox/22.0 ,iabw,closed,3,2013-07-22 23:26:50,2013-09-14 21:29:47,,,,0,1
13306,moment/moment,944,faling test cases,Date.prototype.toString = Tue Jul 23 2013 19:41:00 GMT 0530  IST  Date.prototype.toLocaleString = 7/23/2013 7:41:00 PM Date.prototype.getTimezoneOffset =  330 navigator.userAgent = Mozilla/5.0  X11; Linux i686  AppleWebKit/537.36  KHTML  like Gecko  Chrome/28.0.1500.71 Safari/537.36 ,sathishkpm,closed,4,2013-07-23 14:13:28,2013-09-14 23:30:02,,TZ Testing,,,0,1
13305,moment/moment,945,Access to original constructor string,When someone creates an invalid date  ex. var a = moment  this is not a date  ;    is there a way to access the original string that was used to create the moment object? If not  could this possibly be added? ,mpeechatt,closed,3,2013-07-23 14:16:13,2013-07-26 07:37:36,,,,0,1
13304,moment/moment,946,.calendar   does not respect timezone information,Copied from moment/moment timezone 17  > If you look here https://github.com/moment/moment/blob/ae34b8100eb925832c7c0bc729ba0485de77bde6/moment.js L1266 >  > We are creating a fresh moment with the no timezone information so the calendar   method doesn t calculate the day diff correctly. >  > I ve manually fixed this by inlining the body of the method into my code. ,timrwood,closed,0,2013-07-23 17:21:07,2013-08-29 09:03:18,,Bug,,,0,1
13303,moment/moment,947,moment  .toISOString   bug  if you pass in a 18th  it returns 17th,This problem seems to be caused by   moment  .toISOString     introduced here:  http://momentjs.com/docs/ /displaying/as iso string/ moment  .toISOString  ;   I might but in the console if I do:          n = moment.utc new Date  2013 07 18T00:00:00 01:00         It will return:       Thu Jul 18 2013 00:00:00 GMT 0100  GMT Daylight Time       Now if I call   toISOString     on it  the date suddenly becomes 17th:        n.toISOString        the above will return the 17th instead of 18th:         2013 07 17T23:00:00.000Z      ,mankind,closed,4,2013-07-23 21:24:43,2013-07-23 22:22:22,,,,0,1
13302,moment/moment,948,Timezone parsing is not reflected on zone   or format   results,Hi  I have come across the following issue. I had verified the unit tests to make sure I am not doing something wrong.      var timezoneOffset1 = moment  2011 2 1 8  05:00    YYYY MM DD HH Z  .zone  ; var formattedHours1 = moment  2011 2 1 8  05:00    YYYY MM DD HH Z  .format  HH:mm  ;  var timezoneOffset2 = moment  2011 2 1 8  03:00    YYYY MM DD HH Z  .zone  ; var formattedHours2 = moment  2011 2 1 8  03:00    YYYY MM DD HH Z  .format  HH:mm  ;  alert   05:00 Zone:     timezoneOffset1       >     formattedHours1     n            03:00 Zone:     timezoneOffset2       >     formattedHours2     n  ;        Expected:    >  05:00 Zone: 300   > 08:00 >  03:00 Zone: 180   > 08:00    Actual result:    >  05:00 Zone: 360   > 07:00 >  03:00 Zone: 360   > 05:00   My browser is on UTC 5  CST   JSFiddle: http://jsfiddle.net/Alpha/3MPBr/    Workaround:    Manually setting the timezone again:      var timezoneOffset1 = moment  2011 2 1 8  05:00    YYYY MM DD HH Z  .zone 300 .zone  ; var formattedHours1 = moment  2011 2 1 8  05:00    YYYY MM DD HH Z  .zone 300 .format  HH:mm  ;  var timezoneOffset2 = moment  2011 2 1 8  03:00    YYYY MM DD HH Z  .zone 180 .zone  ; var formattedHours2 = moment  2011 2 1 8  03:00    YYYY MM DD HH Z  .zone 180 .format  HH:mm  ;  alert   05:00 Zone:     timezoneOffset1       >     formattedHours1     n            03:00 Zone:     timezoneOffset2       >     formattedHours2     n  ;      JSFiddle for workaround: http://jsfiddle.net/Alpha/2yEyE/ ,AlphaGit,closed,1,2013-07-24 01:42:22,2013-07-24 20:21:30,,,,0,1
13301,moment/moment,949,Change the Norwegian language configuration to follow the most common date format,Change the long date format  so that it follows the most common Norwegian system for dates  DD.MM.YYYY . Ref. http://en.wikipedia.org/wiki/Date_and_time_notation_in_Norway. ,tkallevik,closed,3,2013-07-24 07:01:24,2013-07-27 07:06:44,,,,1,1
13300,moment/moment,950,Add bower.json,Eventually Bower is likely to become incompatible with the component.json format  and the warnings will turn to errors when installing with Bower.  The ignore list is patterns and files that should not be installed for end users  when moment is to be consumed as a bower package. ,mroderick,closed,3,2013-07-24 14:37:29,2013-07-30 05:04:48,,,,1,1
13299,moment/moment,951,Fix broken lang tests in Argentina,This was reported in  816. It happens because there is DST in Argentina on 30 Dec 2007. ,ichernev,closed,1,2013-07-25 05:05:18,2013-07-29 16:19:25,,,,1,1
13298,moment/moment,952,Solving the problem with failing tests across  some  timezones,Currently there is the  grunt zones  command  that would do some hacky  works only on mac with sudo privileges  stuff to run all tests in all timezones. It takes ages and it shows many failing tests  37 on my machine at the moment .  Fixing those is super tedious and normally involves a date being used in a test  that is near or at a DST. So the fix is sometimes changing to a different date and hoping there is no DST of another timezone there. Sometimes there is no easy fix  America/Havana failing because of DST exactly at the beginning of the month .  From time to time such issues pop up as issues in the tracker  but its hard to debug because I don t know which zone are they in  not the offset  but the rules that govern the offset   so I can not replicate it on my linux box  in node environment .  I think we need to either run this tests as part of our continuous build  so that we know all tests past in all timezones all the time  we can use  TZ= America/Los_Angeles  grunt nodeunit  to run tests without changing the actual OS timezone   or we can implement a way of marking certain timezone/test combinations as bad  and not caring/running the test at all. The second solution sounds bad  but I really don t want to care about some obscure DST happening 30 years ago when I m writing a random moment test  that is not concerned about DST at all. ,ichernev,open,2,2013-07-26 08:09:51,0000-00-00 00:00:00,,DST,TZ Testing,,,0,1
13297,moment/moment,953,isSame undefined argument returns true, console.log  moment  .isSame undefined  day    ;  ,stevenvachon,closed,2,2013-07-26 12:59:47,2013-07-27 07:07:14,,,,0,1
13296,moment/moment,954,Unit Test Failure: 487.15 L,Date.prototype.toString = Fri Jul 26 2013 14:41:28 GMT 0100  GMT Standard Time  Date.prototype.toLocaleString = 26 July 2013 14:41:28 Date.prototype.getTimezoneOffset = 0 navigator.userAgent = Mozilla/5.0  Windows NT 6.2; WOW64; rv:22.0  Gecko/20100101 Firefox/22.0  Unit Test:  487.15 L    > 2010 02 14  2010 02 14 == L   AssertionError: L    > 2010 02 14 ,preppypiet,closed,4,2013-07-26 14:00:59,2013-08-07 07:13:19,,,,0,1
13295,moment/moment,955,add   unexpectedly mutates the original object.,eg:      m = moment     lets say it s Oct 3rd. oct6 = m.add  days   3       oct6 is now oct 6th  as expected  but m has also changed  unexpectedly      oct7 = m.add  days   4       if add   had operated in a functional manner without mutating state  oct7 would in fact be set to october 7th  but because add   mutated the state of m  it s set to october 10th   in fact  oct6 and oct7 are now the same object  m  and both reference october 10th.  this seems really unintuitive and can easily cause unintended consequences when moment objects are passed around in non trivial applications. ,ssoroka,closed,2,2013-07-26 14:28:27,2013-07-27 07:09:04,,,,0,1
13294,moment/moment,956,moment  .startOf  hour  .format   returns wrong value..,Hi  great work first of all   I think I have discovered an issue:  assuming format set is  MM/DD/YYYY HH:MM       javascript moment  .startOf  hour  .format        returns wrong value i.e.  07/26/2013 17:07  Shouldn t it return  07/26/2013 17:00 ?  Using version 2.1.0  Thanks  ,xeroxoid,closed,1,2013-07-26 14:47:31,2013-07-27 07:09:21,,,,0,1
13293,moment/moment,957,More conscise naming for query methods   e.g. after instead of isAfter,I propose we shorten the naming for some of the methods  or at least create aliases for them. A list:   isSame  > same   isBefore  > before   isAfter  > after   isLeapYear  > leapYear   isDST  > DST  One s I explicitly omitted:  isMoment    you could certainly have just a moment   method  but it d probably be confusing. I might actually propose that people use  instanceof  instead of  isMoment  though.  Everything else in the API is pretty terse. I like terse. [Good programmers like terse] http://www.paulgraham.com/langdes.html . Lets make it terse. ,fresheneesz,closed,5,2013-07-26 17:18:35,2013-09-17 05:21:36,,Enhancement,,,0,1
13292,moment/moment,958,Ordinals not needed for Swedish,According to writing rules  a swedish date should in ongoing text be written as      den 26 juli 2013     den 2 augusti 2013   note that there is no e after 26  e.g. 26e  or a after 2 in  den 2a augusti 2013    One reference is  Myndigheternas skrivregler  http://www.regeringen.se/sb/d/253/a/131583 Check section 9.3 in the downloadable pdf http://www.regeringen.se/content/1/c6/13/15/83/7be35768.pdf  or another reference http://www.anvandbart.se/ab/datum klartext     The ordinals can therefor be removed. ,iMetro,closed,5,2013-07-26 22:09:40,2013-07-30 05:21:07,,,,0,1
13291,moment/moment,959,Rounding to the nearest 15 minute interval.,I was wondering if there is a way for me to round up or down to the nearest 15 minute interval. I think this would be great feature to have in moment as some libs like datejs kind of have this functionality from what I seen when searching. My scenario is that I have data points that are segmented into 15 minute buckets  The selection tool returns any block of time and I need to round down to the closest 15 minutes and round up for the end time.  Doing it this way  http://stackoverflow.com/questions/4968250/how to round time to the nearest quarter hour in javascript  seems like it would be a pain.. when It would be useful to have in the lib itself. ,niemyjski,closed,16,2013-07-26 23:02:39,2014-06-05 07:19:33,,todo,,,0,1
13290,moment/moment,960,Parsing dates in ISO 8601 and .format  ,  Updated: Please cancel the issue. If I m not wrong the behavior is correct due to Daylight Savings Time... Sorry for the inconvenience    I m not sure if this is a bug  but at least is very confusing... When parsing a UTC date using ISO 8601 I noticed that function  .format  timezone seems to report a wrong timezone using  moment myStringDateInISO8601      Current time zone        javascript moment  .format   // Returns  2013 07 27T13:05:55 02:00   moment  .zone   // Returns  120        Some tests parsing a ISO 8601 date string        javascript var f = moment  2007 11 03T16:18:05Z    f.format    //Returns  2007 11 03T17:18:05 01:00   but TIME ZONE IS NOT  1:00   f.utc  .format   // Returns  2007 11 03T16:18:05 00:00  [OK]  f.zone   // Returns 0  [OK]  f.utc  .zone   // Returns 0 [OK]  f.utc  .toISOString   // Returns  2007 11 03T16:18:05.000Z  [OK]  f.toISOString   // Returns  2007 11 03T16:18:05.000Z  [OK]  f.hour   // Returns 16 [OK]  f.utc  .hour   // Returns 16 [OK]       I don t know if I m missing something but should  f.format    report  2:00  which is the timezone on that machine  instead of  1:00? ,endymion00,closed,0,2013-07-27 11:26:14,2013-07-29 17:46:13,,,,0,1
13289,moment/moment,961,duration  .days   returns inconsistent value.,See this fiddle: http://jsfiddle.net/KbNxf/  Basically  if I create two equivalent duration objects  one with years/months/days and the other with just days  the second s days   method returns a value different than the first.  Am I correct in thinking these two durations should be equivalent  and days   should return the same thing? ,thatjpk,closed,16,2013-07-29 01:38:59,2013-09-15 09:17:50,,,,0,1
13288,moment/moment,962,Test failing,Hey   Using my browser 1 test from http://momentjs.com/test/ is failing.  Details of the failed test:  Date.prototype.toString = Mon Jul 29 2013 09:59:57 GMT 0200  Central European Standard Time  Date.prototype.toLocaleString = 29 July 2013 09:59:57 Date.prototype.getTimezoneOffset =  60 navigator.userAgent = Mozilla/5.0  Windows NT 6.1; WOW64; rv:22.0  Gecko/20100101 Firefox/22.0  thanks   ukasz ,lukaszbudnik,closed,2,2013-07-29 08:03:24,2013-08-07 07:12:49,,,,0,1
13287,moment/moment,963,Make language identifiers case insensitive.,All of the following should work the same way.      javascript moment.lang  en gb  ; moment.lang  en GB  ; moment.lang  en_GB  ; moment.lang  EN_GB  ;     ,timrwood,closed,5,2013-07-29 17:31:19,2013-09-17 02:51:58,,Enhancement,Language,,,0,1
13286,moment/moment,964,Update nn.js,Change the long date format  so that it follows the most common Norwegian system for dates  DD.MM.YYYY . Ref. http://en.wikipedia.org/wiki/Date_and_time_notation_in_Norway. ,mrtnjrrtt,closed,0,2013-07-30 05:59:41,2013-07-30 12:43:10,,,,1,1
13285,moment/moment,965,1 test failed,Date.prototype.toString = Tue Jul 30 2013 11:27:12 GMT 0100  GMT Standard Time  Date.prototype.toLocaleString = 30 July 2013 11:27:12 Date.prototype.getTimezoneOffset = 0 navigator.userAgent = Mozilla/5.0  Windows NT 6.1; WOW64; rv:22.0  Gecko/20100101 Firefox/22.0 ,chrisgcg,closed,0,2013-07-30 10:28:22,2013-08-05 06:46:18,,Unit Test Failed,,,0,1
13284,moment/moment,966,Change the Norwegian nynorsk language configuration to follow the most common date format,Change the long date format for Norwegian nynorsk  so that it follows the most common Norwegian system for dates  DD.MM.YYYY . Ref. http://en.wikipedia.org/wiki/Date_and_time_notation_in_Norway. ,mrtnjrrtt,closed,3,2013-07-30 12:51:11,2013-08-07 06:49:50,,,,1,1
13283,moment/moment,967,Duration incorrect parsing of serialized C  TimeSpan,See this: http://jsfiddle.net/d43mc/1/  Serialized C  TimeSpans are parsed wrong if the day part is not there and the hour part is 2 digits.    10:00:00  gets parsed as 1 day  0 hours.   13:00:00  gets parsed as 1 day  3 hours.  1.13:00:00  gets parsed correctly as 1 day  13 hours  The following change to the regex should fix this:  aspNetTimeSpanJsonRegex = /   ?  d  ?=.  ?.?  d  :  d  :  d  .?  d 3  ?/ ,Krusen,closed,5,2013-07-30 14:42:23,2013-08-01 16:53:28,,,,0,1
13282,moment/moment,968,Unexpected initiliazation of duration when using string values,See this: http://jsfiddle.net/nzqHW/2/  The fiddle is using latest develop. Same results with latest master.  Initializing a duration with a  string  for either the  days    milliseconds  or  months  parameter gives an unexpected result:      javascript moment.duration  months:  1   .asMonths  ; // = 8.666666666666671 moment.duration  months: 1  .asMonths  ; // = 1  moment.duration  days:  1   .asDays  ; // = 10 moment.duration  days:  2   .asDays  ; // = 20 moment.duration  days:  10   .asDays  ; // = 100 moment.duration  days: 1  .asDays  ; // = 1  moment.duration  milliseconds:  1   .asMilliseconds  ; // = 1000000 moment.duration  milliseconds: 1  .asMilliseconds  ; // = 1     ,Krusen,closed,3,2013-07-31 06:49:58,2013-08-07 06:32:02,,,,0,1
13281,moment/moment,969,Node.js   isValid crashing,I m using the [node mysql] https://github.com/felixge/node mysql  module and bringing back  DATE  fields from our MySQL tables.  I guess node mysql is doing things with any date fields  so using this:      js moment quote.date_tagged   YYYY MM DD  .isValid        Crashes with this message:      Object Wed Jul 31 2013 01:00:00 GMT 0100  BST  has no method  indexOf      at makeDateFromStringAndFormat  /var/www/bloot/node_modules/moment/moment.js:823:46      at makeMoment  /var/www/bloot/node_modules/moment/moment.js:1014:17      at moment  /var/www/bloot/node_modules/moment/moment.js:1024:16      at Quote.<anonymous>  /var/www/bloot/lib/quote.js:623:20      at /var/www/bloot/lib/quote.js:1225:13     at try_callback  /var/www/bloot/node_modules/redis/index.js:532:9      at RedisClient.return_reply  /var/www/bloot/node_modules/redis/index.js:614:13      at ReplyParser.<anonymous>  /var/www/bloot/node_modules/redis/index.js:266:14      at ReplyParser.EventEmitter.emit  events.js:95:17      at ReplyParser.send_reply  /var/www/bloot/node_modules/redis/lib/parser/javascript.js:300:10      ,jbrooksuk,closed,2,2013-07-31 12:12:43,2013-07-31 12:26:05,,,,0,1
13280,moment/moment,970,Unit Test Fail 487.15,Running through tests out on site http://momentjs.com/test/  1 failure in   lang:eo    format section  487.15 L    > 2010 02 14  2010 02 14 == L   AssertionError: L    > 2010 02 14  Date.prototype.toString = Wed Jul 31 2013 09:05:09 GMT 0400  Eastern Standard Time  Date.prototype.toLocaleString = Wednesday  July 31  2013 9:05:09 AM Date.prototype.getTimezoneOffset = 300 navigator.userAgent = Mozilla/5.0  Windows NT 6.1; WOW64; rv:22.0  Gecko/20100101 Firefox/22.0 ,curtisk,closed,1,2013-07-31 13:09:53,2013-07-31 15:19:09,,,,0,1
13279,moment/moment,971,Fixed local formatting tokens detection,According to the docs: https://developer.mozilla.org/en US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test issuing regex.test on the same regex that is also g  global   would cause it to remember the last match position and continue from there. Set lastIndex to 0 before every test to make sure this won t happen.  This will also fix  965   962   954   943   937   934 and maybe more. We should fix the message that doesn t include the failing messages. I m sick of duplicated reports ... with missing reports. ,ichernev,closed,1,2013-08-01 08:21:55,2013-08-05 06:46:18,,,,1,1
13278,moment/moment,972,Moment adds 1 day to a convert  rounds up hours,It should detect the correct format or the format should be supplied?  Correct format:  YYYY MM DD[T]HH:mm:ss.SSS[Z]  Detected format:  YYYY MM DDTHH:mm:ss.S Z    moment  2010 07 26T21:00:00.000Z    >  2010 07 27T00:00:00.000Z    The day is changed 26  > 27 ,ugin,closed,1,2013-08-01 09:54:26,2013-08-01 16:49:59,,,,0,1
13277,moment/moment,973,Support combined moment languages form of the library,As I mentioned in  940  I think there s a case to be made for bundling the main moment.js  and whatever languages a given user needs for their application  together  into just one file.  This simplifies loading of the library and the desired language immensely  no need to load moment and the language bundle separately  no need to define multiple AMD paths for each language .  So  in this series of commits  I introduced the  grunt concatwithlang  task  defined in tasks/concat with lang.js  modeled after tasks/concat lang.js .  Run it without specifying    useLang  on the command line  and it produces moment_and_alllangs.js  as seen in compiled  non minified form in this pull request.  Run it with specifying  for example     useLang=uk cs  and the file would instead only bundle those two languages.  This is a nice file size improvement for those that only need a limited subset of languages in their application  mine calls for 10 15  more or less   at least when compared to always loading the core moment.js and langs.js. ,wyantb,closed,7,2013-08-01 23:37:17,2013-09-09 00:28:26,,,,1,1
13276,moment/moment,974,Russian months recognition fixed,The problem is in contructing RegExp for matching against input date. In russian language words sometimes changes their ending  causing some troubles.  The bug was in dates like this:  11     1989  with format  D MMMM YYYY   which is May  11   moment.js parser says it is January  11.  Also  monthsCaseReplace function definitions looks a little bit strange accepting second attribute  format   because there is an empty string passing in moment.js code:       line 406 regex =  ^    this.months mom          ^    this.monthsShort mom     ;     ,allaud,closed,9,2013-08-02 07:37:45,2013-09-14 23:08:23,,,,1,1
13275,moment/moment,975,Re write Gruntfile using coffee script,Just re writing the grunt configuration using CoffeeScript. Looks more clean. Thanks. ,igorlima,closed,4,2013-08-02 15:08:35,2013-08-07 06:35:08,,,,1,1
13274,moment/moment,976,Incorrect date in far future,In WebKit exist some [bug] https://bugs.webkit.org/show_bug.cgi?id=106720  which manifests itself when using your library too. Are you going to workaround it somehow?      > moment  Mar 1 2034  ._d // Any dates after March 1  2034 will be off by a full day. Tue Feb 28 2034 00:00:00 GMT 0200  EET      ,broadsw0rd,closed,4,2013-08-05 14:25:47,2013-08-08 19:07:16,,,,0,1
13273,moment/moment,977,1 test failed,    Client info  Date.prototype.toString = Mon Aug 05 2013 21:38:55 GMT 0200 Date.prototype.toLocaleString = Montag  05. August 2013 21:38:55 Date.prototype.getTimezoneOffset =  60 navigator.userAgent = Mozilla/5.0  Windows NT 6.1; WOW64; rv:22.0  Gecko/20100101 Firefox/22.0        lang:eo   format  L    > 2010 02 14  2010 02 14 == L       AssertionError: L    > 2010 02 14     ,remluben,closed,1,2013-08-05 19:40:03,2013-08-07 06:42:32,,Unit Test Failed,,,0,1
13272,moment/moment,978,removing extra s in get   and set  ,Per discussion in  938 ,icambron,closed,1,2013-08-06 07:57:44,2013-08-07 06:32:58,,,,1,1
13271,moment/moment,979,Fix for strange Duration behavior when using strings for values,Fixing  968.  I m not entirely sure what the deal is with the changed lang files.  I m guessing they were existing changes that just hadn t been minified down yet. ,chall8908,closed,2,2013-08-06 18:01:53,2013-08-07 06:32:02,,,,1,1
13270,moment/moment,980,Incorrect prototype override,Since the moment prototype is being defined as an object literal  it should also define the constructor property as moment in order to restore the one that was replaced by the object.  Associated jQuery Ticket: http://bugs.jquery.com/ticket/14227 ,dcherman,closed,2,2013-08-06 19:42:23,2013-08-07 06:28:27,,,,0,1
13269,moment/moment,981,Issues with moment.duration  hh:mm:ss  ,moment.duration  hh:mm:ss   works fine for hours 0 9 but parses incorrectly for hours greater than 10. It appears to be parsing the first digit as days rather than hours.  Example:  moment.duration  09:00:00  .asHours    > 9 moment.duration  10:00:00  .asHours    > 24  Expected 10  moment.duration  22:00:00  .asHours    > 50  Expected 22  ,maclema,closed,1,2013-08-06 22:23:26,2013-08-07 06:16:16,,,,0,1
13268,moment/moment,982,Moment  Duration and Language objects now have constructor property,This is in response to  980. ,ichernev,closed,0,2013-08-07 06:28:06,2013-08-08 19:04:35,,,,1,1
13267,moment/moment,983,grunt zones with TZ and zone.tab,Implemented grunt zone as discussed in  916 ,ichernev,closed,1,2013-08-07 08:21:03,2013-08-08 18:42:28,,,,1,1
13266,moment/moment,984,2 tests failed,    Client info  Date.prototype.toString = Thu Aug 08 2013 01:36:06 GMT 0530  India Standard Time  Date.prototype.toLocaleString = 8/8/2013 1:36:06 AM Date.prototype.getTimezoneOffset =  330 navigator.userAgent = Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/28.0.1500.95 Safari/537.36        zones   same / before / after  two moments with different offsets should be the same hour  true == false       AssertionError: two moments with different offsets should be the same hour     at Object.ok  http://momentjs.com/static/js/core test.js?v=2013 08 04T23:40:46 07:00:1531:39      at Object.exports.zones.same / before / after  http://momentjs.com/static/js/core test.js?v=2013 08 04T23:40:46 07:00:6217:14      at http://momentjs.com/static/js/core test.js?v=2013 08 04T23:40:46 07:00:1863:20     at Object.exports.zones.setUp  http://momentjs.com/static/js/core test.js?v=2013 08 04T23:40:46 07:00:5916:9      at http://momentjs.com/static/js/core test.js?v=2013 08 04T23:40:46 07:00:1859:19     at Object.exports.runTest  http://momentjs.com/static/js/core test.js?v=2013 08 04T23:40:46 07:00:1707:9      at http://momentjs.com/static/js/core test.js?v=2013 08 04T23:40:46 07:00:1753:25     at http://momentjs.com/static/js/core test.js?v=2013 08 04T23:40:46 07:00:1011:13     at iterate  http://momentjs.com/static/js/core test.js?v=2013 08 04T23:40:46 07:00:621:13      at http://momentjs.com/static/js/core test.js?v=2013 08 04T23:40:46 07:00:632:25      two moments with different offsets should be the same hour  true == false       AssertionError: two moments with different offsets should be the same hour     at Object.ok  http://momentjs.com/static/js/core test.js?v=2013 08 04T23:40:46 07:00:1531:39      at Object.exports.zones.same / before / after  http://momentjs.com/static/js/core test.js?v=2013 08 04T23:40:46 07:00:6218:14      at http://momentjs.com/static/js/core test.js?v=2013 08 04T23:40:46 07:00:1863:20     at Object.exports.zones.setUp  http://momentjs.com/static/js/core test.js?v=2013 08 04T23:40:46 07:00:5916:9      at http://momentjs.com/static/js/core test.js?v=2013 08 04T23:40:46 07:00:1859:19     at Object.exports.runTest  http://momentjs.com/static/js/core test.js?v=2013 08 04T23:40:46 07:00:1707:9      at http://momentjs.com/static/js/core test.js?v=2013 08 04T23:40:46 07:00:1753:25     at http://momentjs.com/static/js/core test.js?v=2013 08 04T23:40:46 07:00:1011:13     at iterate  http://momentjs.com/static/js/core test.js?v=2013 08 04T23:40:46 07:00:621:13      at http://momentjs.com/static/js/core test.js?v=2013 08 04T23:40:46 07:00:632:25     ,saggiyogesh,closed,2,2013-08-07 20:06:58,2013-09-14 21:31:35,,TZ Testing,Unit Test Failed,,,0,1
13265,moment/moment,985,Normalize language identifiers as described in  963,,ichernev,closed,1,2013-08-09 09:03:01,2013-08-12 17:52:00,,,,1,1
13264,moment/moment,986,Add language code aliases,Enable languages to set a language alias  for example  en us  would set an alias  en . This was mentioned in  963. ,ichernev,closed,5,2013-08-09 09:04:40,2013-08-29 09:11:41,,,,1,1
13263,moment/moment,987,59 tests failed. is_before:is before month  113.9  is_same:is same month  122.7  lang:ar ma:format month  227.4  lang:ar:format month  248.4  lang:bg:format month  269.4  lang:br:format month  290.4  lang:ca:format month  303.4  lang:cs:format month  324.,    Client info      Date String   : Sat Aug 10 2013 06:30:59 GMT 0300  EEST  Locale String : 8/10/2013 6:30:59 AM Offset        :  120 User Agent    : Mozilla/5.0  X11; Linux i686  AppleWebKit/537.36  KHTML  like Gecko  Chrome/28.0.1500.95 Safari/537.36            is_before:is before month  113.9   start of next month      javascript // Expected true // Actual   false false == true            is_same:is same month  122.7   start of next month      javascript // Expected false // Actual   true true == false            lang:ar ma:format month  227.4                    javascript // Expected             // Actual                         ==                          lang:ar:format month  248.4        /            /            javascript // Expected      /            /       // Actual       /          /           /          /       ==       /            /                   lang:bg:format month  269.4                  javascript // Expected           // Actual                       ==                        lang:br:format month  290.4   Ebrel Ebr      javascript // Expected Ebrel Ebr // Actual   Meurzh Meu  Meurzh Meu  ==  Ebrel Ebr             lang:ca:format month  303.4   Abril Abr.      javascript // Expected Abril Abr. // Actual   Mar  Mar.  Mar  Mar.  ==  Abril Abr.             lang:cs:format month  324.4   duben dub      javascript // Expected duben dub // Actual   b ezen b e  b ezen b e  ==  duben dub             lang:cv:format month  347.4                javascript // Expected         // Actual                     ==                      lang:da:format month  368.4   April Apr      javascript // Expected April Apr // Actual   Marts Mar  Marts Mar  ==  April Apr             lang:de:format month  385.4   April Apr.      javascript // Expected April Apr. // Actual   M rz Mrz.  M rz Mrz.  ==  April Apr.             lang:el:format month  405.4                     javascript // Expected              // Actual                             ==                           lang:en ca:format month  426.4   April Apr      javascript // Expected April Apr // Actual   March Mar  March Mar  ==  April Apr             lang:en gb:format month  447.4   April Apr      javascript // Expected April Apr // Actual   March Mar  March Mar  ==  April Apr             lang:en:format month  468.4   April Apr      javascript // Expected April Apr // Actual   March Mar  March Mar  ==  April Apr             lang:eo:format month  489.4   aprilo apr      javascript // Expected aprilo apr // Actual   marto mar  marto mar  ==  aprilo apr             lang:es:format month  510.4   abril abr.      javascript // Expected abril abr. // Actual   marzo mar.  marzo mar.  ==  abril abr.             lang:et:format month  531.4   aprill apr      javascript // Expected aprill apr // Actual   m rts m rts  m rts m rts  ==  aprill apr             lang:eu:format month  552.4   apirila api.      javascript // Expected apirila api. // Actual   martxoa mar.  martxoa mar.  ==  apirila api.             lang:fa:format month  573.4                    javascript // Expected             // Actual                         ==                          lang:fi:format month  594.4   huhtikuu huhti      javascript // Expected huhtikuu huhti // Actual   maaliskuu maalis  maaliskuu maalis  ==  huhtikuu huhti             lang:fr ca:format month  615.4   avril avr.      javascript // Expected avril avr. // Actual   mars mars  mars mars  ==  avril avr.             lang:fr:format month  635.4   avril avr.      javascript // Expected avril avr. // Actual   mars mars  mars mars  ==  avril avr.             lang:gl:format month  654.4   Abril Abr.      javascript // Expected Abril Abr. // Actual   Marzo Mar.  Marzo Mar.  ==  Abril Abr.             lang:he:format month  675.4                   javascript // Expected            // Actual                     ==                         lang:hi:format month  696.4               .      javascript // Expected             . // Actual                             ==              .             lang:hu:format month  718.4    prilis  pr      javascript // Expected  prilis  pr // Actual   m rcius m rc  m rcius m rc  ==   prilis  pr             lang:id:format month  738.4   April Apr      javascript // Expected April Apr // Actual   Maret Mar  Maret Mar  ==  April Apr             lang:is:format month  759.4   apr l apr      javascript // Expected apr l apr // Actual   mars mar  mars mar  ==  apr l apr             lang:it:format month  780.4   Aprile Apr      javascript // Expected Aprile Apr // Actual   Marzo Mar  Marzo Mar  ==  Aprile Apr             lang:ja:format month  799.4   4  4       javascript // Expected 4  4  // Actual   3  3   3  3   ==  4  4              lang:ka:format month  820.4                   javascript // Expected            // Actual                         ==                         lang:kr:format month  841.4   4  4       javascript // Expected 4  4  // Actual   3  3   3  3   ==  4  4              lang:lv:format month  862.4   apr lis apr      javascript // Expected apr lis apr // Actual   marts mar  marts mar  ==  apr lis apr             lang:ms my:format month  883.4   April Apr      javascript // Expected April Apr // Actual   Mac Mac  Mac Mac  ==  April Apr             lang:nb:format month  904.4   april apr      javascript // Expected april apr // Actual   mars mar  mars mar  ==  april apr             lang:ne:format month  925.4               .      javascript // Expected             . // Actual                             ==              .             lang:nl:format month  947.4   april apr.      javascript // Expected april apr. // Actual   maart mrt.  maart mrt.  ==  april apr.             lang:nn:format month  969.4   april apr      javascript // Expected april apr // Actual   mars mar  mars mar  ==  april apr             lang:pl:format month  990.4   kwiecie  kwi      javascript // Expected kwiecie  kwi // Actual   marzec mar  marzec mar  ==  kwiecie  kwi             lang:pt br:format month  1011.4   Abril Abr      javascript // Expected Abril Abr // Actual   Mar o Mar  Mar o Mar  ==  Abril Abr             lang:pt:format month  1031.4   Abril Abr      javascript // Expected Abril Abr // Actual   Mar o Mar  Mar o Mar  ==  Abril Abr             lang:ro:format month  1051.4   Aprilie Apr      javascript // Expected Aprilie Apr // Actual   Martie Mar  Martie Mar  ==  Aprilie Apr             lang:ru:format month  1072.4                   javascript // Expected            // Actual                       ==                         lang:ru:format month case  1073.7   1             javascript // Expected 1        // Actual   31        31        ==  1                    lang:ru:format month case  1073.8   1             javascript // Expected        // Actual               ==                     lang:sk:format month  1093.4   apr l apr      javascript // Expected apr l apr // Actual   marec mar  marec mar  ==  apr l apr             lang:sl:format month  1116.4   april apr.      javascript // Expected april apr. // Actual   marec mar.  marec mar.  ==  april apr.             lang:sq:format month  1137.4   Prill Pri      javascript // Expected Prill Pri // Actual   Mars Mar  Mars Mar  ==  Prill Pri             lang:sv:format month  1158.4   april apr      javascript // Expected april apr // Actual   mars mar  mars mar  ==  april apr             lang:th:format month  1178.4                    javascript // Expected             // Actual                             ==                          lang:tr:format month  1199.4   Nisan Nis      javascript // Expected Nisan Nis // Actual   Mart Mar  Mart Mar  ==  Nisan Nis             lang:tzm la:format month  1220.4   ibrir ibrir      javascript // Expected ibrir ibrir // Actual   mar s  mar s   mar s  mar s   ==  ibrir ibrir             lang:tzm:format month  1241.4                    javascript // Expected             // Actual                         ==                          lang:uk:format month  1262.4                    javascript // Expected             // Actual                               ==                          lang:uk:format month case  1263.7   1             javascript // Expected 1        // Actual   31          31          ==  1                    lang:uk:format month case  1263.8   1              javascript // Expected         // Actual                       ==                      lang:zh cn:format month  1282.4      4       javascript // Expected    4  // Actual      3      3   ==     4              lang:zh tw:format month  1303.4      4       javascript // Expected    4  // Actual      3      3   ==     4       ,slimfadi,closed,2,2013-08-10 03:34:19,2014-06-05 07:24:59,,TZ Testing,Unit Test Failed,,,0,1
13262,moment/moment,988,moment  1 1 2013   MM DD YYYY  .isValid   should be false,Hi  all.  You can find 4 examples below:      > moment  01 01 2013   MM DD YYYY  .isValid   true > moment  1 1 2013   MM DD YYYY  .isValid   true > moment  01 01 2013   M D YYYY  .isValid   true > moment  1 1 2013   M D YYYY  .isValid   true      I seem that the following behavior is correct:       > moment  01 01 2013   MM DD YYYY  .isValid   true > moment  1 1 2013   MM DD YYYY  .isValid   false > moment  01 01 2013   M D YYYY  .isValid   false > moment  1 1 2013   M D YYYY  .isValid   true     ,junish,closed,2,2013-08-12 03:27:33,2013-08-12 05:01:01,,,,0,1
13261,moment/moment,989,Why tests fail in some timezones,Here s a writeup up the test failure modes that are zone dependent. I ll try to go through some of the tickets and point them at this one if they seem relevant.    1. Pacific/Apia is wack    Broken diff test      >> diff   diff between utc and local >> Message: year diff >> Error: year diff >> at Object.exports.diff.diff between utc and local  test/moment/diff.js:173:14       Looks like it s because Dailight Savings [didn t end there in 2010] http://www.timeanddate.com/worldclock/timezone.html?n=282 . Results in:      > moment [2010] .utc  .format    2009 12 31T11:00:00 00:00  > moment [2011] .utc  .format    2010 12 31T10:00:00 00:00       Maybe use a different year?    2. Half hour offsets break  zones   same / before / after     Not all the offsets are multiples of 60  and that breaks this test. See [Caracas] http://www.timeanddate.com/worldclock/timezone.html?n=58   though there a bunch. This happens:      >> zones   same / before / after >> Message: two moments with different offsets should be the same hour >> Error: two moments with different offsets should be the same hour >> at Object.exports.zones.same / before / after  test/moment/zones.js:307:14  >> at Object.exports.zones.setUp  test/moment/zones.js:6:9  >> >> zones   same / before / after >> Message: two moments with different offsets should be the same hour >> Error: two moments with different offsets should be the same hour >> at Object.exports.zones.same / before / after  test/moment/zones.js:308:14  >> at Object.exports.zones.setUp  test/moment/zones.js:6:9  >>      This is because we create a moment  clone it and give it a two hour offset  and then check that it s the same hour as the original.  isSame    uses  startOf     which is going to return something different for the half hour offset locale than the full hour one.  It simply isn t true that half hour offset times should have the same hour as full hour offset ones. Maybe the test should use a UTC time as the baseline?    3. DSTs on unfortunate dates    Damascus  and others in EEST?  has DST in [late March or early April] http://www.timeanddate.com/worldclock/timezone.html?n=487 . Moment builds the array of month parsing regexes by iterating from 0 to 11  and for each i  creating  moment [2000  i]   and checking what the language calls that. But  moment [2000  3]      meaning April 1  2000    actually returns March 31 in Damascus  because it won t be April 1 until 1 AM. So our month parsing array ends up with March in it twice. The result is that is that  moment  April    MMM    isn t valid  Besides being totally wrong  it breaks a zillion tests  several for each language   see  987 . Same with [Amman] http://www.timeanddate.com/worldclock/timezone.html?n=271 .  Paraguay does [something similar] http://www.timeanddate.com/worldclock/timezone.html?n=21  around October 1  apparently including in October 1  2000 itself  with similar consequences.    This a really nasty bug    because date parsing really just doesn t work in these places. One possible way to fix this is to use moment [year  month  0]  instead. Though I m not exactly sure why it creates moment objects for this purpose anyway.  Much less problematic  but still bad  the Azores does [wacky stuff] http://www.timeanddate.com/worldclock/timezone.html?n=271  in March; in particular March 25  2007 doesn t start on time and this test fails in each language:      js var start = moment [2007  1  28] ; //snip test.equal start.from moment [2007  1  28] .add  d: 25    true     25 days          25 days = 25 days  ;      Same with [Beirut] http://www.timeanddate.com/worldclock/timezone.html?n=34   [Havana] http://www.timeanddate.com/worldclock/timezone.html?n=99   which impressively also breaks  test.equal moment [2015  2   8] .weekday    3   by having a DST change on exactly that day   and [Scoresbysund] http://www.timeanddate.com/worldclock/timezone.html?n=705 .  Casablanca has DST on March 3  2011  which breaks this test:      js var m = moment new Date 2011  3  2  3  4  5  6    mCopy = moment m ; //snip test.equal m.isBefore moment new Date 2011  3  3  0  0  0  0     day    true   start of next day  ;      There may be many more similar issues that don t get hit by the tests. ,icambron,closed,9,2013-08-12 09:16:58,2013-09-15 09:59:41,,TZ Testing,,,0,1
13260,moment/moment,990,Example for  diff  is wrong.,Below copied from http://momentjs.com/docs/  I got  1 and  1.5 in fact.      var a = moment [2007  0] ; var b = moment [2008  5] ; a.diff b   years         // 1   a.diff b   years   true  // 1.5     ,shunwen,closed,1,2013-08-12 15:22:31,2013-08-12 17:44:49,,,,0,1
13259,moment/moment,991,Add seconds to a local format  internationalization ,It would be fantastic to have a built in way to display a date time with seconds in all supported languages. ,Sivli-Embir,closed,3,2013-08-13 00:04:03,2014-02-03 04:17:18,,Enhancement,,,0,1
13258,moment/moment,992,enable full i18n support with component 1  install,In order to enable the  require s for language definitions with  .lang   ; every   .js  file under lang directory must be listed under the  scripts  key in  component.json . ,cristiandouce,closed,4,2013-08-13 01:28:03,2013-08-19 22:16:26,,,,1,1
13257,moment/moment,993,1 test failed. lang:eo:format  487.15  ,    Client info      Date String   : Tue Aug 13 2013 12:25:00 GMT 0200 Locale String : Dienstag  13. August 2013 12:25:00 Offset        :  60 User Agent    : Mozilla/5.0  Windows NT 5.1; rv:23.0  Gecko/20100101 Firefox/23.0            lang:eo:format  487.15   L    > 2010 02 14      javascript // Expected 2010 02 14 // Actual   L  L  ==  2010 02 14      ,Anticom,closed,1,2013-08-13 10:25:08,2013-08-15 17:05:12,,Unit Test Failed,,,0,1
13256,moment/moment,994,Format  WW  YY  returns wrong year,Hello   i think i found a bug for the  WW  YY  format.   When i pass 31.12.2012 it get correctly 1  for 1st calendar week  but 2012 instead of 2013 for the year.  31.12.2012 is in calendar week 1  13 The european week starts at monday  and i have the german moment file included. ,bigvibez,closed,1,2013-08-13 13:05:27,2013-08-13 13:21:09,,,,0,1
13255,moment/moment,995,Add Marathi language support,,kalehv,closed,5,2013-08-13 19:11:48,2013-08-19 16:16:06,,,,1,1
13254,moment/moment,996,Duration parsing  or weird msec to hour output  Timezone ? , Bad format  results to weird values without problems...  if you miss hour part  or you have only 1 number for hours  results are bad but not null and and give some weird results.  also  adding two durations doesnt get the good values...      var t1 = moment.duration  0.00:30:05.370  ; var t2 = moment.duration  0.00:30:05.370  ;  var res = t1   t2; var mm = new moment res ; alert mm.format  HH:mm:ss.SSS   ;      results =>>  02:00:10.740   ???? ,tpruvot,closed,3,2013-08-14 12:49:20,2013-08-15 09:53:13,,,,0,1
13253,moment/moment,997,1 test failed. lang:eo:format  487.15  ,    Client info      Date String   : Wed Aug 14 2013 11:48:58 GMT 0700  Pacific Standard Time  Locale String : Wednesday  August 14  2013 11:48:58 Offset        : 480 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64; rv:23.0  Gecko/20100101 Firefox/23.0            lang:eo:format  487.15   L    > 2010 02 14      javascript // Expected 2010 02 14 // Actual   L  L  ==  2010 02 14      ,marstein,closed,1,2013-08-14 18:49:56,2013-09-12 11:10:01,,Unit Test Failed,,,0,1
13252,moment/moment,998,Hebrew dual form fixed,In Hebrew  there is a special dual form for times like 2 hours  2 days  2 months and 2 years. Not using this  is the biggest _tell_ for a non native speaker  or a machine . The dual form for minutes and seconds isn t used in Modern Hebrew.  [Wikipedia: Dual  grammatical number ] http://en.wikipedia.org/wiki/Dual_grammatical_number Modern_Hebrew :  > Modern Hebrew: The dual form is usually used in expressions of time and number. These nouns have plurals as well  which are used for numbers higher than two  I ve implemented this dual form as discussed in [issue  488] https://github.com/moment/moment/issues/488   but never actually implemented.  I ve also made sure of complete test coverage for this. ,TalAter,closed,3,2013-08-14 23:21:01,2013-08-19 18:48:31,,,,1,1
13251,moment/moment,999,Wrong short week days names in Russian,Short week days in Russian contains two letters  not three. I m talking about this example:      moment  .format  llll  ;        15     2013  .  14:33      Here s the right list:   Monday        Tuesday        Wednesday        Thursday        Friday        Saturday        Sunday      ,pepelsbey,closed,7,2013-08-15 10:37:22,2013-09-15 09:47:32,,,,0,1
13250,moment/moment,1000,1 test failed. lang:eo:format  487.15  ,    Client info      Date String   : Thu Aug 15 2013 13:53:29 GMT 0300  EEST  Locale String :     15     2013 13:53:29 Offset        :  180 User Agent    : Mozilla/5.0  X11; Linux x86_64; rv:23.0  Gecko/20100101 Firefox/23.0 Iceweasel/23.0            lang:eo:format  487.15   L    > 2010 02 14      javascript // Expected 2010 02 14 // Actual   L  L  ==  2010 02 14      ,zekefast,closed,3,2013-08-15 10:55:21,2013-08-15 17:04:46,,Unit Test Failed,,,0,1
13249,moment/moment,1001,Wrong short form for month names in Ukrainian,Abbreviation must end in a consonant and be descriptive:   so not     _   _   _   _   _   _   _   _   _   _   _     but     _   _   _    _    _    _   _    _   _    _    _     . ,Khrystyna,closed,7,2013-08-15 11:14:35,2013-08-19 16:19:53,,,,0,1
13248,moment/moment,1002,Corrected short months and weekdays in Ukrainian; fixes  1001,Sorry for our discussion in Ukrainian there in  1001. there was nothing besides conversation about weekdays and months  ,Menelion,closed,0,2013-08-15 13:54:13,2013-08-19 16:19:53,,,,1,1
13247,moment/moment,1003,Malayalam language,[Malayalam] http://en.wikipedia.org/wiki/Malayalam  is the primary language of the state of Kerala in India.  The localization and tests were modeled off of the ones for Hindi  by [Mayank Singhal] https://github.com/mayanksinghal . Thank you  @mayanksinghal  ,floydpink,closed,1,2013-08-15 17:24:09,2013-08-19 16:21:32,,,,1,1
13246,moment/moment,1004,1 test failed. lang:eo:format  487.15  ,    Client info      Date String   : Thu Aug 15 2013 18:28:16 GMT 0300  Hora oficial do Brasil  Locale String : quinta feira  15 de agosto de 2013 18:28:16 Offset        : 120 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64; rv:23.0  Gecko/20100101 Firefox/23.0            lang:eo:format  487.15   L    > 2010 02 14      javascript // Expected 2010 02 14 // Actual   L  L  ==  2010 02 14      ,gBritz,closed,1,2013-08-15 21:27:28,2013-08-16 04:46:33,,Unit Test Failed,,,0,1
13245,moment/moment,1005,Unexpected .isValid   === true,I have the following code:      javascript var format =  M/D/YYYY ; var date = moment  8/17/2013d   format ;  console.log format ; console.log date ; console.log date.isValid   ;      and I noticed that isValid   is returning true. I don t think this is correct; the erroneous  d  character should cause the date string to be invalid  no?  Output:      M/D/YYYY Moment  _i:  8/17/2013d   _f:  M/D/YYYY   _l: undefined  _isUTC: false  _a: Array[7]   true     ,nathan-alden,closed,4,2013-08-17 18:12:16,2013-08-17 23:27:52,,,,0,1
13244,moment/moment,1006,use the second day of each month to find the month name,Here s a fix for part of part 3 for  989  which concerns test failures in other time zones  and is likely the most important issue I found there. It s two characters  but it requires some explanation  though. First  here s the test:      export TZ=America/Asuncion grunt nodeunit      Which throws out a ton of errors. That s because Paraguay has daylight savings on inconvenient dates. There are a bunch of DST issues from  989 that are really just test artifacts  but these aren t an example of it; this is a real bug in Moment.  Because October 1  2000 isn t a valid date  month parsing breaks completely for that whole month. E.g. October 12  2013 is a perfectly valid date  but  moment  October 12  2013    MMMM DD  YYYY    returns   August   12  2013  or whatever this month it is right now . The culprit is this code from  Language.monthParse   :      js             for  i = 0; i < 12; i                      // make the regex if we don t have it already                 if   this._monthsParse[i]                        mom = moment [2000  i] ;                     regex =  ^    this.months mom          ^    this.monthsShort mom     ;                     this._monthsParse[i] = new RegExp regex.replace  .         i  ;                                   // test the regex                 if  this._monthsParse[i].test monthName                         return i;                                      ...which is building the list of regexes to be used with the  MMM  and  MMMM  parsing tokens. But because  moment [2000  9]   returns September 31  that code pulls out word  September  instead of  October   and thus  /^October ^Oct/  never gets added to the array of regexes. So  october  can t be recognized as part of an input string.  The logic for why Moment does this at all is that for some languages like Dutch  the month abbreviations used in _formatting_ is really a function  and to spare the language from exposing a list of months _and_ a function for providing that month  the code for building the _parser_ just calls that function with a made up date in the right month. So an alternate fix here is to force languages that have a  monthsShort    callback to separately provide a simple array of months.  In practice  it seems to work to just use  moment [2000  i  2]    so I did that. All the tests pass in America/Asuncion  and it didn t seem to negatively affect any other zones.  This also fixes many of the tests for Asia/Damascus  which has the same issue with April 1. That DST also causes other test failures not covered by this fix  but AFAIK  those are just tests assuming that April 1 is a valid date and in April  like  moment [2011  3] .format  MMMM   ==  April  . ,icambron,closed,3,2013-08-19 04:16:12,2013-08-19 17:34:09,,,,1,1
13243,moment/moment,1007,force moment.utc   to use utc,I think this is a bug:      js moment.utc moment   ._isUTC //=> false      Seems like  moment.utc    should force the issue. ,icambron,closed,3,2013-08-19 05:53:17,2013-08-19 18:48:11,,,,1,1
13242,moment/moment,1008,fixing zone test for half hour offsets,This addresses problem 2 in  989  which is test failures that look like this:      >> zones   same / before / after >> Message: two moments with different offsets should be the same hour >> Error: two moments with different offsets should be the same hour >> at Object.exports.zones.same / before / after  test/moment/zones.js:307:14  >> at Object.exports.zones.setUp  test/moment/zones.js:6:9   >> zones   same / before / after >> Message: two moments with different offsets should be the same hour >> Error: two moments with different offsets should be the same hour >> at Object.exports.zones.same / before / after  test/moment/zones.js:308:14  >> at Object.exports.zones.setUp  test/moment/zones.js:6:9       The problem is that a lot of time zones are offset by a half hour. A good list is here:  http://www.timeanddate.com/time/time zones interesting.html  The issue is what it means to say this:      js moment  .zone 30 .isSame moment     hour  ;      You can see why it doesn t work with the current implementation  but after thinking about it for a while  I concluded that it s not really a meaningful question in the first place. It s just a question that only makes sense between zones with the same hour alignment. So I just changed the test. ,icambron,closed,1,2013-08-19 06:54:05,2013-08-19 17:44:13,,,,1,1
13241,moment/moment,1009,added hasAlignedHours,When I was thinking about  1008  I ended up writing  hasAlignedHours    which can be used to tell if two zones have aligned hours  or a zone is aligned with UTC. Since I suspect there s a fair amount of quirky behavior when working with unaligned zones  it seems like this might be generally useful. ,icambron,closed,3,2013-08-19 06:57:36,2013-08-23 00:17:17,,,,1,1
13240,moment/moment,1010,move test to avoid DST weirdness in Samoa,This should be viewed in the context of  952 and  989  but I figured I d just submit it separately  since it s an easy one. This is a test failure from Pacific/Apia that results from them [never leaving DST in 2010] http://www.timeanddate.com/worldclock/timezone.html?n=282 :      Testing diff.js........F.... >> diff   diff between utc and local >> Message: year diff >> Error: year diff >> at Object.exports.diff.diff between utc and local  test/moment/diff.js:173:14       I just used a different year. ,icambron,closed,0,2013-08-19 07:16:57,2013-08-19 18:19:27,,,,1,1
13239,moment/moment,1011,Expand localized tokens in the parser.,Fixes  665. Pretty straightforward. Allows:      js moment.lang  it  ; moment  01/03/2013    L  ; // L maps to DD/MM/YYYY moment.lang  en  ; moment  03/01/2013    L  ; // L maps to MM/DD/YYYY     ,icambron,closed,1,2013-08-19 08:24:54,2013-08-19 18:21:40,,,,1,1
13238,moment/moment,1012,UMD language files,This changes the language files to UMD rather than requiring an extra build step.  Unfortunately  because this adds a closure to every file  the history is going to be broken a bit as each file is essentially completely rewritten as far as git is concerned.  The minified versions of the individual languages has also been removed as well.  This also simplifies the gruntfile and removes the need for a few of the moment specific grunt tasks. ,timrwood,closed,9,2013-08-19 22:07:04,2013-09-08 18:17:55,,,,1,1
13237,moment/moment,1013,Croatian  hr  translation,Added Croatian translation  lang/hr.js  and respective unit test  test/lang/hr.js . Tested with  grunt   all tests pass. ,bmarkovic,closed,1,2013-08-20 09:35:32,2013-08-22 18:58:26,,,,1,1
13236,moment/moment,1014,2 tests failed. zones:same / before / after  220.3  zones:same / before / after  220.4  ,    Client info      Date String   : Tue Aug 20 2013 17:01:41 GMT 0530  India Standard Time  Locale String : Tue Aug 20 2013 17:01:41 GMT 0530  India Standard Time  Offset        :  330 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.1  KHTML  like Gecko  Maxthon/4.0.3.3000 Chrome/22.0.1229.79 Safari/537.1            zones:same / before / after  220.3   two moments with different offsets should be the same hour      javascript // Expected true // Actual   false false == true            zones:same / before / after  220.4   two moments with different offsets should be the same hour      javascript // Expected true // Actual   false false == true     ,kshatriy,closed,2,2013-08-20 11:33:31,2013-08-26 16:21:06,,TZ Testing,Unit Test Failed,,,0,1
13235,moment/moment,1015,moment   always generates an invalid date,Hi  using moment.js 2.1.0 I don t seem to be able to create a valid date.  I ve made a jsFiddle     http://tinker.io/ebb94   which exhibits the same problem I have in my code.  I get the same error on Chrome  29.0  and Firefox  22.0  on Mac OS X 8.4  in case it s relevant    jsFiddle was incredibly slow to do anything so I used an alternative provider ,fenfe1,closed,13,2013-08-20 14:28:36,2013-08-22 15:09:26,,,,0,1
13234,moment/moment,1016,Update nb.js,There are dots after month day in norwegian long date formats  just as ordinals.  A valid LLLL in Norwegian Bokm l is: onsdag 21. august 2013 13.00  Actually  the HH:MM should be HH.MM with a dot as separator  according to standards  at least last time I checked   but people are increasingly using HH:MM with a colon.  In addition  the language flows better if  klokken  is taken away from all places noted. Should I create a new pull request for this? ,sigurdga,closed,2,2013-08-21 11:03:54,2013-08-23 08:58:19,,,,1,1
13233,moment/moment,1017,October 21st of 1962 considered invalid,moment  21/10/1962    DD/MM/YYYY  .isValid   returns false. It also happens with moment  10/21/1962    MM/DD/YYYY  . All other dates I checked were OK. Very odd  huh? ,awvalenti,closed,5,2013-08-21 17:13:49,2013-09-12 09:54:53,,,,0,1
13232,moment/moment,1018,toString   should use default format rather than fixed?,Since a _default format_ is supported I propose it logical that toString   would use this default format if defined rather than the hardcoded format  ddd MMM DD YYYY HH:mm:ss [GMT]ZZ ? ,ShawnTalbert,closed,13,2013-08-21 21:38:30,2013-09-26 07:31:33,,Enhancement,,,0,1
13231,moment/moment,1019,Respect timezone settings for .calendar   format,Fixes  946  and adds a test. ,bentaber,closed,6,2013-08-22 04:04:30,2013-08-29 09:03:18,,,,1,1
13230,moment/moment,1020,better fix for month parser issue,As discussed in  1006. Tested in some normal and problem time zones. ,icambron,closed,0,2013-08-22 23:54:56,2013-08-26 18:48:27,,,,1,1
13229,moment/moment,1021,Hour alignment redux,I butchered  1009  it s probably high time I sucked it up and got git flow   so here it is again.  It s a good thing I added those extra tests  because my implementation was wrong. ,icambron,closed,4,2013-08-23 00:28:20,2013-09-03 20:33:42,,,,1,1
13228,moment/moment,1022,Updates to the norwegian bokm l translation,Use ordinals for day of months in localized dates  according to standards  Use uncapitalized letters in future and present strings  it is better to capitalize when needed   icelandic translation does the same  Abbreviate weekdays as two letters and a dot  norwegian standards defined by the norwegian language council  Spr kr det  Abbreviate month names as three letters and a dot  but leave short month names in full length.  norwegian standards defined by the norwegian language council  Spr kr det  Use kl. instead of klokken  icelandic and danish translations do the same   I guess the abbreviations for month names can cause trouble when parsing localized dates  as short month names are not abbreviated. Is this a known problem that can be worked around? The standards says one thing  but this may be hard to understand for people not knowing the standard. But they can easily use their own format.It is a lot harder to write a parser that follows the standard  than specifying another format when needed. Just thinking out loud here.  Nynorsk will follow when bokm l is accepted. ,sigurdga,closed,3,2013-08-23 08:51:40,2013-09-03 18:41:10,,,,1,1
13227,moment/moment,1023,1 test failed. lang:eo:format  487.15  ,    Client info      Date String   : Fri Aug 23 2013 13:09:54 GMT 0200  CEST  Locale String : Fri Aug 23 13:09:54 2013 Offset        :  60 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10.8; rv:22.0  Gecko/20100101 Firefox/22.0            lang:eo:format  487.15   L    > 2010 02 14      javascript // Expected 2010 02 14 // Actual   L  L  ==  2010 02 14      ,svengau,closed,0,2013-08-23 11:11:48,2013-08-23 11:13:30,,Unit Test Failed,,,0,1
13226,moment/moment,1024,Document that wrapping a native Date object will clone it,It s not documented that passing a  Date  object to  moment    will clone it. The word  wrapper  in the [documentation] http://momentjs.com/docs/ /parsing/date/  is misleading  because it suggests that moment just wraps the native Date object and manipulations will alter it.  I had to look at the source to be really sure that moment does not alter the passed date https://github.com/moment/moment/blob/develop/moment.js L967 ,Prinzhorn,closed,4,2013-08-25 16:02:30,2013-10-04 18:52:49,,Documentation,,,0,1
13225,moment/moment,1025,Add Lithuanian  lt  translation,Self explanatory   Lithuanian translation. I ll ask my countrymen on Twitter to take a reviewing looksie at this. ,mmozuras,closed,8,2013-08-25 16:45:41,2013-09-14 21:13:43,,,,1,1
13224,moment/moment,1026,11 tests failed. lang:en ca:weeks year starting tuesday  438.1  lang:en:weeks year starting tuesday  480.1  lang:fr ca:weeks year starting tuesday  626.1  lang:he:weeks year starting tuesday  687.1  lang:hi:weeks year starting tuesday  709.1  lang:ja:week,    Client info      Date String   : Sun Aug 25 2013 15:25:32 GMT 0300  ART  Locale String : 25/8/2013 15:25:32 Offset        : 180 User Agent    : Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/28.0.1500.95 Safari/537.36            lang:en ca:weeks year starting tuesday  438.1   Dec 30 2007 should be week 1      javascript // Expected 1 // Actual   52 52 == 1            lang:en:weeks year starting tuesday  480.1   Dec 30 2007 should be week 1      javascript // Expected 1 // Actual   52 52 == 1            lang:fr ca:weeks year starting tuesday  626.1   Dec 30 2007 should be week 1      javascript // Expected 1 // Actual   52 52 == 1            lang:he:weeks year starting tuesday  687.1   Dec 30 2007 should be week 1      javascript // Expected 1 // Actual   52 52 == 1            lang:hi:weeks year starting tuesday  709.1   Dec 30 2007 should be week 1      javascript // Expected 1 // Actual   52 52 == 1            lang:ja:weeks year starting tuesday  811.1   Dec 30 2007 should be week 1      javascript // Expected 1 // Actual   52 52 == 1            lang:kr:weeks year starting tuesday  853.1   Dec 30 2007 should be week 1      javascript // Expected 1 // Actual   52 52 == 1            lang:pt br:weeks year starting tuesday  1022.1   Dec 30 2007 should be week 1      javascript // Expected 1 // Actual   52 52 == 1            lang:th:weeks year starting tuesday  1190.1   Dec 30 2007 should be week 1      javascript // Expected 1 // Actual   52 52 == 1            lang:zh cn:weeks year starting tuesday  1295.1   Dec 30 2007 should be week 1      javascript // Expected 1 // Actual   52 52 == 1            lang:zh tw:weeks year starting tuesday  1316.1   Dec 30 2007 should be week 1      javascript // Expected 1 // Actual   52 52 == 1     ,shamank,closed,1,2013-08-25 18:26:06,2014-06-05 07:37:19,,TZ Testing,Unit Test Failed,,,0,1
13223,moment/moment,1027,Lithuanian translation,,recallfx,closed,6,2013-08-25 19:44:54,2013-08-29 08:43:04,,,,1,1
13222,moment/moment,1028,1 test failed. lang:eo:format  487.15  ,    Client info      Date String   : Mon Aug 26 2013 08:11:22 GMT 0200 Locale String : Montag  26. August 2013 08:11:22 Offset        :  60 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64; rv:23.0  Gecko/20100101 Firefox/23.0            lang:eo:format  487.15   L    > 2010 02 14      javascript // Expected 2010 02 14 // Actual   L  L  ==  2010 02 14      ,Pudelwerfer,closed,1,2013-08-26 06:11:41,2013-09-12 12:07:31,,Unit Test Failed,,,0,1
13221,moment/moment,1029,Fixed define call for AMD,According to the [documentation] http://requirejs.org/docs/api.html modulename  modules should not be defined using a name  because they are less portable.  In my use case we put all 3rd party libraries in  lib/   so moment is  lib/moment   not just moment. ,ichernev,closed,2,2013-08-26 08:32:42,2013-09-03 18:00:25,,,,1,1
13220,moment/moment,1030,Wrong days when parsing ASP.NET style time spans.,I don t think this is supposed to produce  2 days ...      > moment.duration  23:59:59  .days   2     ,nickpoorman,closed,1,2013-08-26 19:56:30,2013-08-26 20:01:42,,,,0,1
13219,moment/moment,1031,set to fallback language when language couldn t be set.,When i set  moment.lang  xy    and then call any method  i get back errors.  better it should use a fallback language or the  moment.lang    function should return true or false  whether the lang was found... ,frozeman,closed,8,2013-08-27 15:16:00,2013-09-13 20:42:36,,,,0,1
13218,moment/moment,1032,2 tests failed. zones:same / before / after  220.3  zones:same / before / after  220.4  ,    Client info      Date String   : Wed Aug 28 2013 22:47:55 GMT 0530  India Standard Time  Locale String : 8/28/2013 10:47:55 PM Offset        :  330 User Agent    : Mozilla/5.0  Windows NT 6.2; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/28.0.1500.95 Safari/537.36            zones:same / before / after  220.3   two moments with different offsets should be the same hour      javascript // Expected true // Actual   false false == true            zones:same / before / after  220.4   two moments with different offsets should be the same hour      javascript // Expected true // Actual   false false == true     ,vikramjb,closed,1,2013-08-28 17:18:19,2013-09-14 22:11:37,,TZ Testing,Unit Test Failed,,,0,1
13217,moment/moment,1033,Made isPM function more compatible with IE8 Quirks Mode and IE7 Standard...,Had an issue where IE8 was not parsing AM/PM properly. I had failed to put a < DOCTYPE html> tag at the top of my HTML file while I was playing around with it and this put IE8 into Quirks mode. IE8 Quirks Mode or IE7 Standards Mode doesn t appear to allow accessing strings as arrays. This resulted in the isPM function always returning false  so 1:00 PM would be parsed as 1:00 AM. Other date parsing worked  so it was hard to detect that this was an issue at first.  Switching to charAt instead of accessing the string as an array resolves this issue  and it fully passes the grunt tests. Adding < DOCTYPE html> also fixes the issue as it pushes IE8 into Standards Mode  but not everyone does this or can use that DOCTYPE for legacy reasons.    IE8 Quirks Mode issue only shows up in the actual IE8 browser. Setting IE10 to IE8 Quirks Mode does not result in the issue  but the WinXP version of IE8 in Quirks Mode does show the issue.  [ie8 quirks mode] https://f.cloud.github.com/assets/5317043/1044134/1fcd3b5e 100c 11e3 89b2 97f7cc2b9545.png   [ie8 standard mode] https://f.cloud.github.com/assets/5317043/1044135/1ffafa76 100c 11e3 9f2f 22d8e3765ed2.png  ,GabrielHedges,closed,4,2013-08-28 18:14:07,2013-09-08 17:59:09,,,,1,1
13216,moment/moment,1034,Expose moment in Demandware environment,I m working on a site built using Demandware  hosted ecommerce platform . Demandware is built on Java  and has Rhino included for scripting. ES4th edition proposal is supported with JS 1.7  but there seem to be limitations/bugs in some of the native ES functionality. Scripts are given the extension .ds  variables are not exported  only functions .  To get Moment working within Demandware  I renamed the file to Moment.ds  and added the following to the top of the file:      // Function to make Moment available var moment; function getMoment         return moment;        Then in any script that includes Moment.ds  I have to add  var moment = getMoment  ; .  If you could add this information somewhere  or somehow use it to further expose Moment for closed environments such as Demandware  that would be excellent. ,intel352,closed,7,2013-08-29 15:40:26,2013-10-04 18:52:06,,Documentation,,,0,1
13215,moment/moment,1035,Show date difference in days,I want to know time between now and time in the future and if difference is more than 25 days  output is in months. Example:      javascript var end = moment [2013  10  30] ; var now = moment  ; var diff = end.from now  true ; // return 3 months      How to get output only in days? For example: 88 days. And depending on l18n it outputs appropriate ending. ,neilhem,closed,4,2013-09-02 05:20:32,2013-09-04 03:15:35,,,,0,1
13214,moment/moment,1036,[Bug]  Bug in zh cn lang addon,Hi all  I find the condition on time judgement in zh cn lang pack is wrong. I create a jsfiddle http://jsfiddle.net/kkHQC/7/ . And I check the code in language pack. In min version the origin buggy  code is like this      meridiem:function e n  return 9>e?  u65e9 u4e0a :11>e  30>n?  u4e0a u5348 :13>e  30>n?  u4e2d u5348 :18>e?  u4e0b u5348 :  u665a u4e0a       In non min origin buggy  version it is like this      meridiem : function  hour  minute  isLower            if  hour < 9                return     ;           else if  hour < 11    minute < 30                return     ;           else if  hour < 13    minute < 30                return     ;           else if  hour < 18                return     ;           else               return     ;                       correct code should be like this      if  hour < 9                return     ;           else if  hour < 11    hour === 11    minute < 30                 return     ;           else if  hour < 13    hour === 13    minute < 30                 return     ;           else if  hour < 18                return     ;           else               return     ;                I m new in git and I m not familiar with git flow. So I post this bug. THX. ,CodeMySky,closed,1,2013-09-02 07:28:32,2013-09-12 11:26:25,,,,0,1
13213,moment/moment,1037,Add Vietnamese language,,bangnk,closed,4,2013-09-02 07:56:29,2013-09-14 21:08:24,,,,1,1
13212,moment/moment,1038,1 test failed. lang:eo:format  487.15  ,    Client info      Date String   : Mon Sep 02 2013 10:20:47 GMT 0200  South Africa Standard Time  Locale String : 02 September 2013 10:20:47 Offset        :  120 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64; rv:23.0  Gecko/20100101 Firefox/23.0            lang:eo:format  487.15   L    > 2010 02 14      javascript // Expected 2010 02 14 // Actual   L  L  ==  2010 02 14      ,Bliksempie,closed,1,2013-09-02 08:36:10,2013-09-14 21:33:49,,Unit Test Failed,,,0,1
13211,moment/moment,1039,3 tests failed. zones:same / before / after  220.3  zones:same / before / after  220.4  lang:eo:format  487.15  ,    Client info      Date String   : Tue Sep 03 2013 08:31:51 GMT 0430  Iran Daylight Time  Locale String : 03 September  2013 8:31:51 AM Offset        :  210 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64; rv:20.0  Gecko/20100101 Firefox/20.0            zones:same / before / after  220.3   two moments with different offsets should be the same hour      javascript // Expected true // Actual   false false == true            zones:same / before / after  220.4   two moments with different offsets should be the same hour      javascript // Expected true // Actual   false false == true            lang:eo:format  487.15   L    > 2010 02 14      javascript // Expected 2010 02 14 // Actual   L  L  ==  2010 02 14      ,bigslip,closed,1,2013-09-03 04:05:21,2013-09-14 22:10:30,,TZ Testing,Unit Test Failed,,,0,1
13210,moment/moment,1040,1 test failed. lang:eo:format  487.15  ,    Client info      Date String   : Tue Sep 03 2013 10:40:45 GMT 0200 Locale String : den 3 september 2013 10:40:45 Offset        :  60 User Agent    : Mozilla/5.0  Windows NT 6.2; WOW64; rv:23.0  Gecko/20100101 Firefox/23.0            lang:eo:format  487.15   L    > 2010 02 14      javascript // Expected 2010 02 14 // Actual   L  L  ==  2010 02 14      ,karl-sjogren,closed,1,2013-09-03 08:54:01,2013-09-12 11:10:11,,Unit Test Failed,,,0,1
13209,moment/moment,1041,New version release process,Write documentation for all changes. Document changes in the  readme.md . Make sure breaking changes are highly visible.  Edit the following files with the new version number.      bower.json package.json moment.js // lines 2 and 14      Run the release grunt task.      grunt release      Commit the changes      git commit  am  Bumping version to ...       Merge into master      git checkout master git merge develop      Tag the release      git tag  am  2.1.0   2.1.0       Push the tag to Github.      git push   tags      Publish on npm      npm publish      Release on momentjs.com. ,timrwood,closed,12,2013-09-03 19:20:22,2016-04-01 23:07:54,,Build/Release,,,0,1
13208,moment/moment,1042,Fixing travis ci badges,,igorlima,closed,1,2013-09-03 22:21:19,2013-09-08 17:56:14,,,,1,1
13207,moment/moment,1043,Build and Push NuGet Package Using Grunt,I ve been manually creating the package and pushing to NuGet for a while now  but I think Grunt may be able to automate this. While I don t have the time to tackle this right now  I figured I d post this to get feedback on the idea and the following approach to adding a task to the release task. Would there be any opposition to adding a task to build and push to NuGet?  http://blog.greatrexpectations.com/2013/08/09/creating nuget packages with grunt/ ,corydeppen,closed,6,2013-09-04 03:12:42,2014-06-05 07:38:39,,Build/Release,,,0,1
13206,moment/moment,1044,Show localized date format based on computer settings,Apologies for using an Issue for a question like this   didn t see another channel  and this might qualify as a feature request.  I see in http://momentjs.com/docs/ /displaying/format/ the  Localized formats  options such as  L .    In the browser  I expected this might change the display of a date from mm/dd/yyyy to dd/mm/yyyy depending on the user s computer/browser locale settings  however this doesn t seem to be the case.  I changed my OS X settings to test  and didn t see any browser specific settings .    Is there a way to accomplish this in Moment currently? I m not looking to display different languages/translations  but rather just different date formats based on the user s country/locale settings.   If not  is this possible/practical at all? I m not sure of the reliability/usefulness of stuff like  toLocaleDateString  ,philfreo,closed,5,2013-09-04 16:11:03,2013-09-14 21:19:11,,,,0,1
13205,moment/moment,1045,2 tests failed. zones:same / before / after  220.3  zones:same / before / after  220.4  ,    Client info      Date String   : Wed Sep 04 2013 23:40:57 GMT 0530  IST  Locale String : 9/4/2013 11:40:57 PM Offset        :  330 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_8_4  AppleWebKit/537.36  KHTML  like Gecko  Chrome/29.0.1547.65 Safari/537.36            zones:same / before / after  220.3   two moments with different offsets should be the same hour      javascript // Expected true // Actual   false false == true            zones:same / before / after  220.4   two moments with different offsets should be the same hour      javascript // Expected true // Actual   false false == true     ,pkarthikr,closed,1,2013-09-04 18:11:21,2013-09-14 22:11:02,,TZ Testing,Unit Test Failed,,,0,1
13204,moment/moment,1046,Unexpected state,moment  .isSame undefined   day   => return true moment  .isSame null   day   throw and error  Maybe  moment  .isSame undefined   day   need to return false. ,altus34,closed,2,2013-09-04 20:16:07,2013-09-14 21:04:38,,,,0,1
13203,moment/moment,1047,1 test failed. lang:eo:format  487.15  ,    Client info      Date String   : Wed Sep 04 2013 16:56:36 GMT 0500  CDT  Locale String : Wed 04 Sep 2013 04:56:36 PM CDT Offset        : 360 User Agent    : Mozilla/5.0  X11; Ubuntu; Linux x86_64; rv:23.0  Gecko/20100101 Firefox/23.0            lang:eo:format  487.15   L    > 2010 02 14      javascript // Expected 2010 02 14 // Actual   L  L  ==  2010 02 14      ,rockerest,closed,1,2013-09-04 21:57:12,2013-09-12 11:30:29,,Unit Test Failed,,,0,1
13202,moment/moment,1048,duration formatting,We ve touched on this before in  463 and  879 but never really talked about it directly in its own issue.  We need a method for formatting durations similar to how we format dates.   It should be as simple as:      javascript moment.duration x .format  H:mm:ss        Note that the formatting tokens would have to carry slightly different meaning  since we re representing an elapsed duration of time  rather than a time of day.  I suggest the following:    hh  would mean  hours remainder after accounting for days     h  would be the single digit form of  hh     HH  would mean  total whole hours     H  would be the single digit form of  HH     HHH  would mean  total hours including decimals    although that can currently be done with  duration.asHours     so this might not be necessary.  Similar formatting would apply for other units.  In this context  the highest unit would be a  day   which would be a standard day consisting of 24 standard hours.  It wouldn t make sense to measure years or months with this due to calendaring issues.  Note  this came up recently  again  on StackOverflow in [this question] http://stackoverflow.com/q/18623783/634824 .  The user was looking for something like  duration.format  H:mm:ss   .  This is the workaround:      Math.floor duration.asHours      moment.utc duration.asMilliseconds   .format  :mm:ss        This works  but it feels hacky.  This should be built in. ,mj1856,open,116,2013-09-04 22:51:59,0000-00-00 00:00:00,,New Feature,Up-For-Grabs,,,0,1
13201,moment/moment,1049,toISOString is causing problems for me,    javascript         toISOString : function                  return formatMoment moment this .utc     YYYY MM DD[T]HH:mm:ss.SSS[Z]  ;                  Can we pass in a flag to NOT use milliseconds? the api I am working with does not support the .xxxZ format. ,chovy,closed,4,2013-09-05 00:20:59,2013-09-27 23:32:18,,Enhancement,,,0,1
13200,moment/moment,1050,Add Persian Iran language,Some of the previously added fa.js file  number formatting and parsing  should not reside in a calendar library.  Also a few formatting changes are applied. ,behrang,closed,9,2013-09-05 08:24:36,2013-09-14 05:11:03,,,,1,1
13199,moment/moment,1051,Fix da lang: Months and days should be lowercase,Month and day names should be lowercase in Danish.  Please refer to [sproget.dk] http://sproget.dk/raad og regler/ordlister/sproglige ordlister/store eller sma begyndelsesbogstaver i proprier tiltalepronomener og titulaturer  and [Retskrivningsordbogen] http://www.dsn.dk/  ,kvakulo,closed,2,2013-09-05 11:31:23,2013-09-08 22:53:59,,,,1,1
13198,moment/moment,1052,Documentation unclear or behaviour of min  /max   are inconsistent with other setters.,The documentation describes  .min  /.max    as  setters . And while the example suggests that it does not set  it only does so obliquely. By declaring them as setters one expects it to work like  .add    and other setters which modify the object called on it.  That is   date.max other   should change  date  not return  date  or  other .  Alternatively  the documentation should be clear that  .min  /.max    do not change the called object.  Since moments can change I feel that  .min  /.max    should set the called moment. But if not  then it should be clearly documented that the result of  min  /max    is to return one of two objects:  date  or  other . But  this seems counter active to the method chaining approach that moment employs elsewhere.  For example  if  .min  /.max    are not setters you may not write as a method chain:      javascript date.min start .max end .add 1   day  ;      Since  this would actually add one day to either  date    start   or possibly  end   though  date  would be itself   start  and  end  would be new copies   Instead you would have to write:      javascript date = date.min start .max end .add 1   day  ;      A jsfiddle  as requested by your guidelines: http://jsfiddle.net/T3yGa/ ,gryn,closed,2,2013-09-05 19:02:40,2013-10-04 18:50:16,,Documentation,New Feature,,,0,1
13197,moment/moment,1053,Fix nl lang: monthsShort should return array instead of function,Short months should be abbreviated with a  .  and there is no need for the function to switch between them.  In fact this breaks the locale functionality since  monthsShort  will not be replaced by the language file. ,samvdb,closed,3,2013-09-06 11:31:13,2013-09-16 03:22:32,,,,1,1
13196,moment/moment,1054,2 tests failed. zones:same / before / after  220.3  zones:same / before / after  220.4  ,    Client info      Date String   : Sat Sep 07 2013 13:49:35 GMT 0530  IST  Locale String : 9/7/2013 1:49:35 PM Offset        :  330 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_7_5  AppleWebKit/537.36  KHTML  like Gecko  Chrome/29.0.1547.65 Safari/537.36            zones:same / before / after  220.3   two moments with different offsets should be the same hour      javascript // Expected true // Actual   false false == true            zones:same / before / after  220.4   two moments with different offsets should be the same hour      javascript // Expected true // Actual   false false == true     ,aravindbaskaran,closed,1,2013-09-07 08:19:59,2013-09-14 21:32:17,,TZ Testing,Unit Test Failed,,,0,1
13195,moment/moment,1055,create moments with objects,Pretty straightforward  but see my question in the code. ,icambron,closed,3,2013-09-07 22:46:58,2013-09-08 22:53:13,,,,1,1
13194,moment/moment,1056,Fixed wrong Chinese meridiem time,Better implementation for  865 ,ichernev,closed,0,2013-09-08 23:28:29,2013-09-16 10:14:05,,,,1,1
13193,moment/moment,1057,Allow creation of moment langs.js,Represents a continuation of  973  didn t mean to create a new pull request specifically  but all the old work was made irrelevant anyway  and apparently github auto closes pull requests if you delete the branch.  Go figure .   moment langs.js  is a version of moment.js  prepackaged with all languages.  Can specify    embed_languages=ar br  to create  min/moment customlangs.js  with just those two languages  went with this over  min/moment ar br.js  since it was easier to configure; could switch over if that s still your wish .  Also didn t indent the lang closures  since I think the file is readable as is; again  could indent if you guys want.  If you re wondering about  lang/da.js   that was just a minor tweak so that it would match the replacement regex and pass jshint.  And the error message is mostly in reference to  lang/hr.js   which at this time has the old node require instead of a UMD wrapper  giving example output of:   Warning: all language files must use the common UMD wrapper pattern.  Failed language file: lang/hr.js  ,wyantb,closed,5,2013-09-09 00:35:03,2013-09-09 07:38:14,,,,1,1
13192,moment/moment,1058,moment  .isValid   fails on empty strings,When using an empty string  e.g. the user has forgotten to enter something in an input field    moment    returns  null    which makes  moment    .isValid    fail with the message _TypeError: Cannot call method  isValid  of null_ instead of returning a boolean. ,sattes-faction,closed,5,2013-09-09 07:53:29,2013-09-12 10:02:22,,,,0,1
13191,moment/moment,1059,Support constructing durations from timestamps that do not include seconds,The C  interpreter requires the seconds parameter to be included  so if one has a raw duration of 13:45  one must append  :00  for the constructor to recognize the duration  input[type= time ] produces such raw durations . This PR solves that problem. ,ianwremmel,closed,9,2013-09-09 07:54:03,2013-09-15 04:36:36,,,,1,1
13190,moment/moment,1060,February and timezones,  Hey people     Is this behavior below intended? Notice the change of timezone when changing month to February.      javascript var m = moment  ; m.format  ;          // 2013 09 10T09:32:58 02:00 m.month 1 .format  ; // 2013 02 10T09:32:58 01:00     ,marreman,closed,1,2013-09-10 07:42:21,2013-09-10 07:58:11,,,,0,1
13189,moment/moment,1061,Update hu.js   Added weekdaysMin value,Added weekdaysMin value  so that it can be used with ion.calendar. ,bakatamas,closed,5,2013-09-10 11:38:55,2013-09-26 08:48:26,,Language,Needs tests,,,1,1
13188,moment/moment,1062,Add non lenient parsing,say I provide this moment  2013 09 31   and this one is transformed to 2013 10 01. I d like to have non lenient parsing. So isValid   should return a false here. ,michael-o,closed,2,2013-09-10 12:34:49,2013-09-12 04:30:47,,,,0,1
13187,moment/moment,1063,moment  .date 31 .month 11 .toDate   becomes 2013/12/01, moment  .date 31 .month 11 .toDate    doesn t become the expected date  2013/12/31   but  2013/12/01 . The same is true for every month.  http://jsfiddle.net/qxWz2/ ,finpingvin,closed,2,2013-09-10 15:05:20,2013-09-10 16:53:27,,,,0,1
13186,moment/moment,1064,When using as AMD module  moment pollutes the global space.,Maybe there is a good reason for what you are doing  but I didn t expect _moment_ to pollute the global space when loaded as an AMD module. Should the following code really be  if...else  statements or something else instead?      js     /                                             Exposing Moment                                         /       // CommonJS module is defined     if  hasModule            module.exports = moment;           / global ender:false  /     if  typeof ender ===  undefined             // here   this  means  window  in the browser  or  global  on the server         // add  moment  as a global object via a string identifier          // for Closure Compiler  advanced  mode         this[ moment ] = moment;           / global define:false  /     if  typeof define ===  function     define.amd            define  moment   []  function                  return moment;           ;           ,Xotic750,closed,16,2013-09-11 17:49:52,2013-09-14 21:42:17,,,,0,1
13185,moment/moment,1065,Daylight savings not used when moment created without date,Hi   I m seeing an unexpected behavior with moment v2.1.0 and would like to know if it s a bug or function as designed.  Preface: I m in the New_York timezone  and at this time of year  we are in EDT as opposed to EST.  The problem is that the timezone picked when creating a moment changes depending on whether a date is passed or not. Example:   moment  .startOf  day    Yields: _d: Wed Sep 11 2013 00:00:00   GMT 0400  EDT      moment  10:35PM    h:m A  ;  Yields: _d: Sat Jan 01 0 22:35:00   GMT 0500  EST     Note how the first moment is correctly in EDT while the second seems to default to EST even while we re really in EDT. It makes arithmetics more difficult since one cannot easily add the second to the first to construct a time of day.  Thanks  JP ,jp-beaudry,closed,1,2013-09-12 02:48:50,2013-09-12 03:29:24,,,,0,1
13184,moment/moment,1066,Make normalizeUnits function available as a method for developers,Something that I found would be really useful while developing and using moment  would be to make normalizeUnits available as a method. Then I would not need to recreate this method in each of my projects when I am extending moment for a particular job. For example it would make the following much easier:              function middleOf inputArg1  unitString                var units = normaliseUnits unitString ;              switch  units                case  year :                 // code                 break;             case  month :                 // code                 break;             case  week :                 // code                 break;             case  isoweek :                 // code                 break;             case  day :                 // code                 break;             case  hour :                 // code                 break;             case  minute :                 // code                 break;             case  second :                 // code                 break;             default:                             ,Xotic750,closed,1,2013-09-12 12:40:52,2013-09-14 21:42:40,,,,0,1
13183,moment/moment,1067,Support two digit time zone designator,According to Wikipedia  [ISO 8601 states] http://en.wikipedia.org/wiki/ISO_8601 Time_offsets_from_UTC    0700  and   07:00  and   07  are all totally fair ways to describe a seven hour offset. MomentJS does not support   07 : http://jsfiddle.net/bangarang/CbMeq/  As a side note  handling   00  vs   00  is open for interpretation: [RFC 3339] http://tools.ietf.org/html/rfc3339    Date and Time on the Internet: Timestamps   says   00  means timezone is unknown and   00  means no offset  but Wikipedia claims ISO 8601 doesn t recognize this innuendo and considers   00  invalid. I have no idea what the source of truth is for MomentJS. ,ianjmacintosh,closed,15,2013-09-12 13:44:05,2014-02-03 04:39:04,,Enhancement,,,0,1
13182,moment/moment,1068,Added method: moment.normalizeUnits,for use by developers when extending the library https://github.com/moment/moment/issues/1066 ,Xotic750,closed,6,2013-09-12 16:20:48,2013-09-13 08:45:56,,,,1,1
13181,moment/moment,1069,Error trying to add a day in the date  19/10/2013 ,Not sure if that and a bug or I m doing it the wrong way:  //timezone  0300 d = moment  19/10/2013    DD/MM/YYYY  ; d.add  d   1 ; d.format  DD/MM/YYYY  ;  expected:  20/10/2013  returned:  19/10/2013  ,wallacegsouza,closed,8,2013-09-12 16:55:07,2013-09-13 19:57:02,,,,0,1
13180,moment/moment,1070,Weirdness of add  subtract and duration,I am experiencing a number of  weird values when using the methods mentioned in the title. I am not going to go into them all but instead just demonstrate one  as they may all be linked.  When using  year   I haven t looked to see in the code what is being used  but it could be 365 days  366 days or 365.25 days. But assuming it is 365 then a half year is 182.5 days. Now lets say that moment can t handle fractions of a year and it rounds up or down  then the answer should lay between 182 and 183 days. So how to explain this?:      console.log moment.duration 0.5   year  .asDays   ;   > 180      [jsfiddle] http://jsfiddle.net/Xotic750/bmV5m/   As I said  this is not the only routine affected and it s not just years but months and days  while hours  minutes  seconds and milliseconds seem ok with just my brief testing.  There is definitely something weird going on  it even seems to change when using .utc   and .local   ,Xotic750,closed,11,2013-09-12 19:13:31,2013-09-14 11:42:15,,,,0,1
13179,moment/moment,1071,embed_languages does not embed single language,After the merge of https://github.com/moment/moment/pull/1057 appeared the ability to prepackage particular languagages. However  just tried the following out:   grunt release   embed_languages=ru uk  generates  moment customlangs.js  with both Russian and Ukrainian prepackaged properly.  But  grunt release   embed_languages=ru  generates  moment customlangs.js  with no prepackaged languages. ,borodean,closed,2,2013-09-12 21:38:14,2013-09-14 08:32:38,,,,0,1
13178,moment/moment,1072,Added AM/PM support for Russian and Ukrainian,Tests written accordingly. this is actually used extremely seldom here  but I think Moment.js should provide all possible functionality. ,Menelion,closed,3,2013-09-12 21:42:17,2013-09-13 18:37:37,,,,1,1
13177,moment/moment,1073,Would be really great if moment.js had a precise setInterval function,According to this [SO page] http://stackoverflow.com/questions/985670/will setinterval drift   not the best source  I know   setInterval and a naive setTimeout recursion can drift. I see on your home page you have a clock showing the current time  lines 82 85 [here] http://momentjs.com/static/js/core home.js  . Would be silly if someone came back to the computer some time later and saw the second hand off. ,dbkaplun,closed,15,2013-09-13 01:26:58,2014-02-03 04:39:35,,New Feature,,,0,1
13176,moment/moment,1074,Exposed normalizeUnits to developers via moment.normalizeUnits and added...,... tests ,Xotic750,closed,5,2013-09-13 08:42:46,2013-09-14 21:41:47,,,,1,1
13175,moment/moment,1075,Problem with parsing Unixtime format,This problem is:      moment  1371065286   [ X ] .isValid   false     ,allaud,closed,6,2013-09-13 09:29:17,2013-09-16 10:23:58,,Bug,,,0,1
13174,moment/moment,1076,Update lang/zh cn.js,update lang/zh cn.js  which is more corresponding to the Chinese expression.    lang/zh cn.js             ,zenozeng,closed,4,2013-09-13 17:14:48,2013-10-13 08:49:08,,Language,,,1,1
13173,moment/moment,1077,How I worked Timezones with moment. Tutorial more than an issue.,I have events across the country to keep track of in MongoDB. This proved difficult with standard Javascript as it trys to  help  you and makes everything in your local timezone. Well I need the 12:30pm in New York to show 12:30pm when my browser is in Los Angeles.  Here is a way I found using the most capable moment module within NodeJS  to have the date object retain the proper time in the given timezone:      var moment = require  moment  ;  // East coast time var tz5 = moment  2013 08 21T12:30:00 0500  .zone   05:00  ; console.log  tz5=    moment tz5 .format  dddd hh:mmA ZZ   ;  // West coast time var tz7 = moment  2012 09 24T19:13:00 07:00  .zone   07:00  ; console.log  tz7=    moment tz7 .format  dddd hh:mmA ZZ   ;  // Hawaii time var tz10 = moment  2013 10 03T09:30:00 10:00  .zone   10:00  ; console.log  tz10=    moment tz10 .format  dddd hh:mmA ZZ   ;     ,alangrus,closed,4,2013-09-13 18:36:04,2013-09-13 20:20:17,,,,0,1
13172,moment/moment,1078,Flooring towards zero code readability suggestion,Instead of using:      var x =   abc;      Consider using a named  function to give your code greater readability and hence better maintainability.  Use something like one of these:          function floorTowardsZero floatingPointNumber            return   floatingPointNumber;            or:          function floorTowardsZero floatingPointNumber            var value;          if  floatingPointNumber >= 0                value = floor floatingPointNumber ;           else               value = ceil floatingPointNumber ;                    if  typeof value  ==  number      isFinite value                 value = 0;                    return value;            Now looks like:      var x = floorTowardsZero abc ;      Yes  it will be slightly slower but not that you would notice without running some thousands of repetitive tests. And now the assignment is far more readable/understandable/maintainable. ,Xotic750,closed,5,2013-09-13 20:20:35,2013-09-14 08:45:25,,,,0,1
13171,moment/moment,1079,Feature Suggestion: Please permit zero padding of dates and times.,Hello   I could not find a place to request a feature  so I am sending it here. :  We need to be able to display dates and times in a column on a screen. The current definition of LT does not zero pad the time  so we get a ragged display of the columns of date and times. I ve changed LT to use  hh:mm A   but it would be great to have the date and time formats provide zero padded and not padded forms.   For example:  LT:  hh:mm A    lt:  h:mm A    something like that... :   Here is the change that I made to your script for our application:     // ABOH: LT was h:mm A     _longDateFormat :           LT :  hh:mm A           L :  MM/DD/YYYY           LL :  MMMM D YYYY           LLL :  MMMM D YYYY LT           LLLL :  dddd  MMMM D YYYY LT   Could you please add this feature request to your list?  Thank you   Mike ,abitofhelp,closed,5,2013-09-13 22:26:11,2013-09-14 08:40:41,,,,0,1
13170,moment/moment,1080,Embed Language Tweaks,First commit fixes  1071.  Second fails the build if a language file isn t defined as AMD  now that lang/hr.js is valid .  Third  I figure we should be ignoring the custom language files. ,wyantb,closed,1,2013-09-14 01:33:08,2013-09-14 08:32:11,,,,1,1
13169,moment/moment,1081,1 test failed. min_max:max  172.5  ,    Client info      Date String   : Fri Sep 13 2013 22:43:23 GMT 0500  Central Daylight Time  Locale String : 9/13/2013 10:43:23 PM Offset        : 360 User Agent    : Mozilla/5.0  Windows NT 6.3; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/31.0.1626.5 Safari/537.36            min_max:max  172.5   A future date with the maximum of implied now should be now      javascript // Expected true // Actual   false false == true     ,IDisposable,closed,1,2013-09-14 03:49:05,2013-09-14 08:20:56,,Unit Test Failed,,,0,1
13168,moment/moment,1082,Corrected short weekdays in Russian and Ukrainian; see  999,After further investigation of the corresponding materials I found that in Russian and Ukrainian short weekdays are identical to minimal weekdays. Corrected the translation and tests accordingly. ,Menelion,closed,1,2013-09-14 11:20:19,2013-09-14 19:22:00,,,,1,1
13167,moment/moment,1083,.format bug with parsing  h:mm a  into  hh:mm a ,moment  2013 9 13 7:26 am  .format  hh:mm a    07:26 am  moment  2013 9 13 07:26 am  .format  hh:mm a    07:26 am  moment  2013 09 13 07:26 am  .format  hh:mm a    07:26 am  moment  2013 09 13 7:26 am  .format  hh:mm a    12:00 am   This was using version 2.2.1.  I can t tell if this behavior is intentional or not  but it looks like it s unintentional  since it parses in the first three correctly but not the last one. ,sgalexander,closed,5,2013-09-14 19:04:44,2013-09-16 10:24:10,,Bug,,,0,1
13166,moment/moment,1084,Node REPL and moment new Date   ,There seems to be an issue with passing in Date objects in the Node REPL. E.g.:      js > moment new Date 2010  1  14  15  25  50  125     _i: Sun Feb 14 2010 15:25:50 GMT 0500  EST     _f: undefined    _l: undefined    _isUTC: false    _a:    [ 2013       8       14       0       0       0       0 ]    _d: Sat Sep 14 2013 00:00:00 GMT 0400  EDT         The problem does _not_ occur in an actual Node program  which is why the tests pass and also why we haven t been lynched yet. But it s very confusing anyway.  The problem appears to be caused by  1055  which has us explicitly check if the input is a Date  in order to differentiate it from some random object. For some reason  it s not tripping that  and instead passing the date into  dateFromObject .  This appears to have to do with Node _contexts_  specifically in that the REPL has its own  and so the  Date  type in the REPL isn t  ===  the  Date  type in moment. Node has a utility to help with this   utils.isDate      so I think I ll write an  isDate    helper that does the right thing. ,icambron,closed,1,2013-09-14 21:01:15,2013-09-16 10:19:18,,Bug,,,0,1
13165,moment/moment,1085,Consolidation of recent suggestions  fixes and improvements.,,Xotic750,closed,4,2013-09-14 21:45:38,2013-09-14 22:06:37,,,,1,1
13164,moment/moment,1086,Fix isValid for Unix timestamp parser,https://github.com/moment/moment/issues/1075 ,Xotic750,closed,2,2013-09-14 23:05:06,2013-09-15 03:56:41,,,,1,1
13163,moment/moment,1087,Added feature to expose normalizeUnits,,Xotic750,closed,3,2013-09-14 23:05:15,2013-09-14 23:35:01,,,,1,1
13162,moment/moment,1088,Customize just one field in lang,For example  in  relativeTime   i d like to change just  future:  in  s   without altering any of the other definitions. ,gausie,closed,4,2013-09-14 23:56:13,2013-09-15 04:51:54,,,,0,1
13161,moment/moment,1089,Allow AMD module loader to set noGlobal in config to prevent moment poll...,...uting the global space.  Option has to be set by the user otherwise everything loads as previously.  Loader would now look like this to choose noGlobal       function  global  undef         use strict ;      var projectString =  myProject           momentCDN // =  //cdnjs.cloudflare.com/ajax/libs/moment.js/2.1.0/moment.min           momentString =  moment ;       function  name  definition            if  global.module  == undef    global.module.exports                global.module.exports = definition global.require momentCDN  ;           else if  typeof global.define ===  function     global.define.amd                var projectPaths =                     projectConfig =   ;              projectPaths[momentString] = momentCDN;             projectConfig[momentString] =   ;             projectConfig[momentString].noGlobal = true;             global.require.config                   paths: projectPaths                  config: projectConfig               ;              global.define name  [momentString]  definition ;           else               global[name] = definition global.moment ;                 projectString  function  moment            moment.fn.newFunction = function                  // code          ;          function MyFunction                 // code                    return                MyFunction : MyFunction                   momentPrivate : moment          ;        ;   this  ;  requirejs [ myProject ]  function  myProject         use strict ;      console.log  Private   myProject.momentPrivate ;     console.log  Global   window[ moment ] ;   ;     ,Xotic750,closed,4,2013-09-15 00:15:29,2013-09-16 10:11:54,,,,1,1
13160,moment/moment,1090,Flooring towards zero code clarity/maintainability,Change all occurrences of    to a named function floorTowardsZero ,Xotic750,closed,5,2013-09-15 00:31:48,2013-09-16 16:12:22,,,,1,1
13159,moment/moment,1091,Fix moment new Date    in Node REPL,This is a fix for  1084  ,icambron,closed,1,2013-09-15 08:08:06,2013-09-16 10:19:17,,,,1,1
13158,moment/moment,1092,make iso parsing a bit stricter,Fix for  1083. To try fixing this without breaking anything  I experimented with trying  new Date str   first and only trying the ISO regex if that didn t work  That had strange results  namely that  new Date  1983 10 14    gets interpreted as UTC  so you end up with  Thu Oct 13 1983 20:00:00 GMT 0400  EDT  .  So I stuck with my original idea of forcing ISO strings to end the string. This will of course break code that has a valid ISO 8601 string followed by a bunch of unparsable stuff. I think that s acceptable  since you don t normally expect ISO compliant strings to also contain gibberish. ,icambron,closed,3,2013-09-15 08:52:39,2013-09-16 09:45:42,,,,1,1
13157,moment/moment,1093,Decapitalizing yesterday/today/tomorrow in Dutch  fixes  919,,Menelion,closed,0,2013-09-15 11:33:15,2013-09-16 02:54:45,,,,1,1
13156,moment/moment,1094,More precise parsing with an array of formats,Commit 1: When moment parses string with a few formats  only last part of unparsed string has influence on format penalty. For example  for string  11 02 10   formats  MM DD YY  and  DD MM YY  have same penalty  and it s 0. But as you can see  they have different separators     and      that should have influence on penalty. Now moment can distinguish those separators  and our formats   MM DD YY  and  DD MM YY   will have penalty 2 and 0 respectively.  Commit 2: In gettings regex for token  special RegExp chars  such as point  slash  etc  should be escaped to prevent positive matching with other separators. For example  for string  11 02 10   format  MM.DD.YY  has 0 penalty  because RegExp  .   positive mathes with    .  Now moment escapes the chars and our format will have penalty 2. ,Timrael,closed,3,2013-09-15 11:42:11,2013-09-16 10:41:09,,,,1,1
13155,moment/moment,1095,Requirejs module name: make it empty so that we can use a different one?,Hi   I m just integrating moment.js in my requirejs project. I m having an issue because I want to include momentjs independently from the general config.js  so I don t want the rest of the application to know that I m including this lib .  So  here is my code for my project:      javascript define function require  exports  module        use strict ;      var moment = require  ./moment.min  ;     // ...      This does not work  because moment.js define a requirejs module  named  moment   and not  ./moment.min   or whatever I want to call it . Although a  path  config makes it work  it s something that I want to avoid.  Just changing   here: https://github.com/moment/moment/blob/develop/moment.js L1777  :      javascript     if  typeof define ===  function     define.amd            define  moment   []  function                  return moment;           ;            by:      javascript     if  typeof define ===  function     define.amd            define []  function                  return moment;           ;            makes it work.  My question is: is there a particular reason why a name is explicitely defined? Does it break anything?  Thanks  Kev ,Anomen,closed,28,2013-09-15 15:44:40,2014-02-03 04:51:17,,,,0,1
13154,moment/moment,1096,Improve dateFromObject to utilise the normalizedUnits method.,User object will now handle any acceptable capitalisation  aliasing or pluralisation. ,Xotic750,closed,14,2013-09-15 16:28:35,2013-09-16 16:10:43,,,,1,1
13153,moment/moment,1097,List months and weekdays,Allows for:      js moment.months  ; moment.shortMonths  ; moment.weekdays  ; moment.weekdaysShort  ; moment.weekdaysMin  ;      And they work for languages for where the monthsShort string is a decided by a function:      js moment.monthsShort   MMM   ;      Fixes  for example   1053. ,icambron,closed,4,2013-09-16 03:21:21,2013-09-17 07:24:11,,New Feature,,,1,1
13152,moment/moment,1098,added ability to create invalid moments,Added a way to create invalid moments  which is useful in general  and then used it to fix  716.  I punted on the question of what we should do with invalid moments. ,icambron,closed,6,2013-09-16 03:27:06,2013-09-27 00:47:22,,Enhancement,New Feature,,,1,1
13151,moment/moment,1099,Added component grunt task to fill component.json with lang files,component.json has a list of all project files. Add a grunt task that would update the contents of component.json so that all lang files are included. ,ichernev,closed,0,2013-09-16 10:39:47,2013-09-17 02:37:26,,,,1,1
13150,moment/moment,1100,diff produces weird results,Not an issue. ,perqa,closed,0,2013-09-16 10:50:38,2013-09-16 10:55:48,,,,0,1
13149,moment/moment,1101,Improved readability of expandFormat function,,Xotic750,closed,0,2013-09-16 13:52:04,2013-09-16 15:23:54,,,,1,1
13148,moment/moment,1102,Improved readability of expandFormat function,,Xotic750,closed,1,2013-09-16 16:08:03,2013-09-16 19:14:07,,,,1,1
13147,moment/moment,1103,Improve dateFromObject to utilise the normalizedUnits method.,User object will now handle any acceptable capitalisation  aliasing or pluralisation. ,Xotic750,closed,1,2013-09-16 16:09:51,2013-09-16 19:11:24,,,,1,1
13146,moment/moment,1104,Readability of TildeTilde,,Xotic750,closed,1,2013-09-16 16:11:44,2013-09-16 19:10:14,,,,1,1
13145,moment/moment,1105,Possible fix: Moment returns null when passing an empty string,https://github.com/moment/moment/issues/716 ,Xotic750,closed,8,2013-09-16 16:23:28,2013-09-26 11:57:25,,Enhancement,,,1,1
13144,moment/moment,1106,adding parseZone  ,As discussed in  887 ,icambron,closed,2,2013-09-17 03:14:18,2013-09-17 03:22:10,,Enhancement,,,1,1
13143,moment/moment,1107,Pie in the sky ideas for future thought,First  I want to stress that this a _completely_ unauthoritative list that I just made up  not an official roadmap. It s mostly just a place to capture stuff that comes up in frequent discussions  so we can have a central place to point to  rather than ending up with a bunch of tangential discussions on other tickets. I ll add to it as we go  so this is a living list.  So here goes:   immutability  see  390    pluggable calendar systems  see  854 and  394    alternative underlying date implementation  see  961     in context  duration addition/subtraction  see  345   All of these ideas have both serious merits and drawbacks. ,icambron,closed,3,2013-09-17 03:43:44,2014-07-17 18:51:30,,New Feature,,,0,1
13142,moment/moment,1108,Return true or false based on whether the  lang    did its job,Currently  the user has no way to know if  lang  gobbledygook    worked. We should return true or false. ,icambron,closed,4,2013-09-17 04:35:47,2013-10-04 20:59:32,icambron,Enhancement,Language,,,0,1
13141,moment/moment,1109,Should try language code substrings,We can probably do better than this:      js > moment.lang  nl   undefined > moment.lang  en us   undefined > moment.lang    nl       We should try  en US  and  failing that  try  en . ,icambron,closed,3,2013-09-17 04:41:32,2013-10-04 20:59:17,icambron,Enhancement,Language,,,0,1
13140,moment/moment,1110,UTC mode .weekday   is incorrect,When a moment is in UTC mode  the  .weekday    call is wrong because it relies on the internal date s local day of week. This also affects a UTC moment s  .startOf  week   .  JSFiddle: http://jsfiddle.net/arshaw/ERPA8/  The fix is to make it rely on the moment s intelligent calculation of the current day of week. ,arshaw,closed,3,2013-09-17 05:47:57,2013-09-17 06:22:32,,,,1,1
13139,moment/moment,1111,don t localize toString  ,Since  toString    is mainly used for logging/debugging  I believe it should _not_ localize. Otherwise  switching languages breaks logging and makes debugging harder. For example  many applications  especially in Node are going to be parsing their logs and it s weird to have different formats.  Since the docs and API are in English  I think it makes sense to use it in  toString    too. That said  I welcome feedback to the effect of  this will make it painful for me/others to debug  since I want that in my own language .  This is basically the opposite of  1018 ,icambron,closed,8,2013-09-17 05:57:55,2013-09-27 14:33:46,,Enhancement,,,1,1
13138,moment/moment,1112,Half units in relative time,In several languages half units  such as half a minute  half an hour etc.  and sometimes one and a half units are referred with special words  in Russian: half an hour ==          polchas    one and a half hour ==               poltor  chas   etc. .   Do you think it s possible  and necessary  to implement in Moment.js such units in relative time? ,Menelion,closed,7,2013-09-17 20:33:38,2014-02-03 04:59:10,,New Feature,,,0,1
13137,moment/moment,1113,Added ISO Duration parsing  serialization,Requested by @icambron to continue  941. ,bollwyvl,closed,6,2013-09-17 20:42:38,2013-10-02 07:23:20,,New Feature,,,1,1
13136,moment/moment,1114,Using extend   with Moment s prototypes breaks IE < 9,I was doing some browser checks and noticed that IE8 wasn t working correctly. In addition  the [unit tests] http://momentjs.com/test/  were returning a ton of failures.  I bisected the issue back to https://github.com/moment/moment/commit/762f16ff8415ec693a3222c390194c438bf99ba3. I believe the issues comes from the extend function and the [JScript DontEnum Bug] https://developer.mozilla.org/en US/docs/ECMAScript_DontEnum_attribute JScript_DontEnum_Bug   in which IE  skips over any property in any object where this a same named property in the object s prototype chain that has the  DontEnum  attribute.  In my case  the Moment method valueOf was not being iterated through during the extend method s for in loop.  I ve only verified the Moment object so far  but I believe the Language and Duration objects are equally susceptible.  I tried to make a simple jsFiddle  but IE8 was pitching a fit. If support for IE < 9 has been dropped  adding a requirements message would be helpful  and  if such message exists  I ve completely overlooked it and apologize . ,jbylsma,closed,9,2013-09-17 21:35:54,2013-09-18 07:22:55,,Bug,,,0,1
13135,moment/moment,1115,Possible fix: Using extend   with Moment s prototypes breaks IE < 9,https://github.com/moment/moment/issues/1114 ,Xotic750,closed,1,2013-09-17 23:02:25,2013-09-18 07:22:45,,,,1,1
13134,moment/moment,1116,Improve Duration function by normalizing the input object.,Created a new function  normalizeObjectUnits   this is now also used by dateFromObject  Fixed spacing or jshint  Fixed missing argument ,Xotic750,closed,1,2013-09-18 00:26:50,2013-09-18 00:44:03,,,,1,1
13133,moment/moment,1117,Generating languages on the fly,Just a floater idea. @mj1856 just linked me to http://norbertlindenberg.com/2012/12/ecmascript internationalization api/index.html  which currently works in my copy of Chrome  not sure where else.  We could use that generate languages on the fly if the language is available and we don t have it. We couldn t get the  calendar  and  relativeTime  stuff  but we could get a lot of the rest:      js LT = d.toLocaleTimeString  fr    hour:  numeric   minute:  numeric     01:38   L = d.toLocaleString  fr    18/9/2013   LL = d.toLocaleString  fr    day:  numeric   month:  numeric   year:  numeric   weekday:  short     mer. 18/9/2013  //close  but not quite  LLL = d.toLocaleString  fr    day:  numeric   month:  numeric   year:  numeric   weekday:  short   hour:  numeric   minute:  numeric     mer. 18/9/2013 01:38  //same issue  //generate months like so: new Date 2013  0 .toLocaleString  fr    month:  long     janvier  new Date 2013  0 .toLocaleString  fr    month:  short     janv.   //weekdays similarly new Date 2013  0 .toLocaleString  fr    weekday:  long     mardi  new Date 2013  0 .toLocaleString  fr    weekday:  short     mar.  new Date 2013  0 .toLocaleString  fr    weekday:  narrow     M       Anyway  it wouldn t be a whole lot of code  though I worry about: 1. feature detection 2. supporting it  since most browsers don t   This is broken in IE. What gives?   3. how this relates to our idea of progressively enhancing languages based on how specific the locale is. I suspect we would only use this if we can t find the user anything  so when the user asks for  es AR  we prefer to give them our  es  than the our automagically generated  es AR . 4. how to deal with the fact that some methods won t localize  like  calendar   . Maybe it would have to be completely optional  like  moment.lang lang  willingToUseEMCA    Anyone have some thoughts on this? ,icambron,closed,4,2013-09-18 06:01:58,2013-10-14 08:52:54,,Enhancement,Language,,,0,1
13132,moment/moment,1118,File name for NuGet,I ve just get your last version of moment from NuGet Package. But when I register the file which contains moment core and language  I have an error becasue the file s name is not correct. Could you rename the following file as bellow ? moment langs.js =>moment langs.js or moment with langs.js moment langs.min =>moment langs.min.js or moment with langs.min.js  Thanks a lot. Best regards. ,Migaloux,closed,8,2013-09-18 13:06:23,2013-09-26 08:42:37,,Build/Release,,,0,1
13131,moment/moment,1119,What is a valid date?,While working on a somewhat nicer version of  1098  I discovered we have a lot of  isValid    issues. They all basically have the property that there are moments that work perfectly and we expect to work perfectly  but which are considered invalid. They fall into two categories:    Dates that trip our input matches output check  . These include  moment  300    DDD    and  moment [2009  13]  . This is because we re comparing the input array to  toArray    which breaks when we  wrap  units.  A big part of the issue is that the array comparison check in  isValid    is useful in that it tells you that the date may be  valid  in a calendar sense  but that it didn t match your input  which comes up for DSTs. That s a different question than whether we failed to parse the input or not  and it s their conflation that makes things weird.    Inputs where the parser has failed but we have a good date anyway  . For example   moment  X.SSS     1234567890.123     which is used in a test  produces the right value and even round trips with  format     but isn t valid. That s because  X  as a parser token eats the decimals and SSS can t match. But the time  including the decimals  worked just fine  and  X.SSS  is the right formatting token to print it.   This stuff doesn t use the code in  isValid   ; when the parser runs out text but still has tokens  it just sets the  _isValid  property to  false   which short circuits the check.    Here s my proposal    which I ll fold into  1098 if there s enough agreement: 1.  isValid    just means  do we have a real date ? No array comparison. 2. A new function   matchesInput    _tries_ to tell you if the input matches the output. Basically  it does the array comparison we re removing from  isValid     but we ll keep track if the input is weird  like  DDD  or months > 12  and skip the array check in those case.  What I m unsure about is whether  matchesInput  should return true or false for those. I guess true  and then  matchesInput    could be called  isDSTShifted    or somesuch instead.  3. When the parser can t match some of the tokens but still produces a date  it short circuits matchesInput   to false  but leaves  isValid    true  unless  strict  is set  in which case it forces them both to false. 4. We can do really ungentle things with moments where  isValid  returns false  like just have  format    return a localized version of  Invalid date   I discovered all this by implementing that  actually   What do you guys think? ,icambron,closed,10,2013-09-18 18:53:57,2013-10-04 20:50:32,,Bug,Enhancement,,,0,1
13130,moment/moment,1120,False Date Parsing,When i try to create a moment object with this command      javascript moment  2012 09 28    YYYY MM DD  ;      it s result is      javascript Moment  _i:  2012 09 28   _f:  YYYY MM DD   _l: undefined  _isUTC: false  _a: Array[7]   _a: Array[7] _d: Sun Jan 01 2012 00:00:00 GMT 0200  EET  __proto__: Invalid Date _f:  YYYY MM DD  _i:  2012 09 28  _isUTC: false _l: undefined __proto__: Moment      so not working. Also from the moment s home page       javascript moment  12 25 1995    MM DD YYYY  ;      command s result is not OK.       javascript Moment  _i:  12 25 1995   _f:  MM DD YYYY   _l: undefined  _isUTC: false  _a: Array[7]   _a: Array[7] _d: Sun Jan 01 1995 00:00:00 GMT 0200  EET  _f:  MM DD YYYY  _i:  12 25 1995  _isUTC: false _l: undefined __proto__: Moment      But when i use  new Date  2012 09 28    like this       javascript fromDate = new Date  2012 09 28  ; moment fromDate .format  YYYY MM DD  ;      It s working.   I m using Google Chrome Version 29.0.1547.65 and Firefox 23 for Ubuntu. ,machinecode,closed,22,2013-09-19 08:59:14,2013-10-07 13:48:09,,Troubleshooting,,,0,1
13129,moment/moment,1121,Feature/convert lt and vn to UMD,Convert lang/lt.js and lang/vn.js to UMD  Tried to do make myself a customlangs release  fixed this on the way. ,mmozuras,closed,1,2013-09-20 08:42:32,2013-09-24 18:51:31,,,,1,1
13128,moment/moment,1122,Parsing H:mm   HH:mm do not produce valid dates,It seems when trying to parse  H:mm  and  HH:mm  dates the resulting moment object has  isValid  of  false .  One would expect it to be  true   particularly since the  hh:mma  and  h:mma  variants do produce moment objects where  isValid  is true.  Example from the console:      >>> TIME_FORMATS = [ h:mma    hh:mma    H:mm    HH:mm ]  >>> moment  3:25am   TIME_FORMATS .isValid   true  >>> moment  3:25am   TIME_FORMATS .format    0000 01 01T03:25:00 05:00   >>> moment  3:25   TIME_FORMATS .isValid   false  >>> moment  3:25   TIME_FORMATS .format    0000 01 01T03:25:00 05:00       jsFiddle: http://jsfiddle.net/q7GYA/1/ ,brianmhunt,closed,2,2013-09-20 17:10:10,2013-09-21 01:31:20,,Bug,,,0,1
13127,moment/moment,1123,Bug fix for recent changes in moment.utc  , 1007 created a new bug when passing empty strings or  null  into  moment.utc   :      javascript moment          //=> null moment.utc      //=> TypeError: Cannot call method  utc  of null      The quick fix is to see if  makeMoment    returns  null  before trying to call  .utc    on it. ,adambiggs,closed,1,2013-09-20 21:35:00,2013-09-24 04:52:36,,,,1,1
13126,moment/moment,1124,1 test failed. min_max:min  171.2  ,    Client info      Date String   : Sun Sep 22 2013 15:59:42 GMT 0700  Pacific Daylight Time  Locale String : 9/22/2013 3:59:42 PM Offset        : 480 User Agent    : Mozilla/5.0  Windows NT 6.2; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/31.0.1636.2 Safari/537.36            min_max:min  171.2   A past date with the minimum of implied now should be now      javascript // Expected true // Actual   false false == true     ,FallingSnow,closed,1,2013-09-22 23:00:49,2013-09-26 05:50:00,,Unit Test Failed,,,0,1
13125,moment/moment,1125,iOS 7 Safari Compatibility,I ve run unit tests on both iOS 7 with iPad 3 and iPhone 4s and generate the following failed unit tests.  Clicking to generate the issue seemed to be failing so I have pasted the output manually:  https://github.com/moment/moment/issues/new?title=30 tests failed. add:add across DST  10.1  is_valid:string   formats bad date  147.7  is_valid:string   formats bad date  147.8  is_valid:string   formats bad date  147.9  is_valid:invalid string iso 8601  152.1  is_valid:invalid string iso 8601  152.2  is_valid:invalid string iso 8601  152.3  is_valid:invalid string iso 8601  152.4  is_valid:invalid string iso 8601  152.5  is_valid:invalid string iso 8601  152.6  is_valid:invalid string iso 8601  152.7  is_valid:invalid string iso 8601  152.8  is_valid:invalid string iso 8601  152.9  is_valid:invalid string iso 8601  152.10  is_valid:invalid string iso 8601  152.11  is_valid:invalid string iso 8601  152.12  is_valid:invalid string iso 8601   timezone  153.1  is_valid:invalid string iso 8601   timezone  153.2  is_valid:invalid string iso 8601   timezone  153.3  is_valid:invalid string iso 8601   timezone  153.4  is_valid:invalid string iso 8601   timezone  153.5  is_valid:invalid string iso 8601   timezone  153.6  is_valid:invalid string iso 8601   timezone  153.7  is_valid:invalid string iso 8601   timezone  153.8  is_valid:invalid string iso 8601   timezone  153.9  is_valid:invalid string iso 8601   timezone  153.10  is_valid:invalid string iso 8601   timezone  153.11  is_valid:invalid string iso 8601   timezone  153.12  is_valid:invalid string iso 8601   timezone  153.13  is_valid:invalid string iso 8601   timezone  153.14   body=    Client info      Date String   : Mon Sep 23 2013 09:56:42 GMT 0400  EDT  Locale String : September 23  2013 at 9:56:42 AM EDT Offset        : 300 User Agent    : Mozilla/5.0  iPad; CPU OS 7_0 like Mac OS X  AppleWebKit/537.51.1  KHTML  like Gecko  Version/7.0 Mobile/11A465 Safari/9537.53            add:add across DST  10.1   adding days over DST difference should result in the same hour      javascript // Expected 5 // Actual   6 6 == 5            is_valid:string   formats bad date  147.7   month rollover      javascript // Expected false // Actual   true true == false            is_valid:string   formats bad date  147.8   month rollover      javascript // Expected false // Actual   true true == false            is_valid:string   formats bad date  147.9   day rollover      javascript // Expected false // Actual   true true == false            is_valid:invalid string iso 8601  152.1   2010 00 00 should be invalid      javascript // Expected false // Actual   true true == false            is_valid:invalid string iso 8601  152.2   2010 00 00 should be invalid      javascript // Expected false // Actual   true true == false            is_valid:invalid string iso 8601  152.3   2010 01 00 should be invalid      javascript // Expected false // Actual   true true == false            is_valid:invalid string iso 8601  152.4   2010 01 00 should be invalid      javascript // Expected false // Actual   true true == false            is_valid:invalid string iso 8601  152.5   2010 01 40 should be invalid      javascript // Expected false // Actual   true true == false            is_valid:invalid string iso 8601  152.6   2010 01 40 should be invalid      javascript // Expected false // Actual   true true == false            is_valid:invalid string iso 8601  152.7   2010 01 01T24 should be invalid      javascript // Expected false // Actual   true true == false            is_valid:invalid string iso 8601  152.8   2010 01 01T24 should be invalid      javascript // Expected false // Actual   true true == false            is_valid:invalid string iso 8601  152.9   2010 01 01T23:60 should be invalid      javascript // Expected false // Actual   true true == false            is_valid:invalid string iso 8601  152.10   2010 01 01T23:60 should be invalid      javascript // Expected false // Actual   true true == false            is_valid:invalid string iso 8601  152.11   2010 01 01T23:59:60 should be invalid      javascript // Expected false // Actual   true true == false            is_valid:invalid string iso 8601  152.12   2010 01 01T23:59:60 should be invalid      javascript // Expected false // Actual   true true == false            is_valid:invalid string iso 8601   timezone  153.1   2010 00 00 00:00 should be invalid      javascript // Expected false // Actual   true true == false            is_valid:invalid string iso 8601   timezone  153.2   2010 00 00 00:00 should be invalid      javascript // Expected false // Actual   true true == false            is_valid:invalid string iso 8601   timezone  153.3   2010 01 00 00:00 should be invalid      javascript // Expected false // Actual   true true == false            is_valid:invalid string iso 8601   timezone  153.4   2010 01 00 00:00 should be invalid      javascript // Expected false // Actual   true true == false            is_valid:invalid string iso 8601   timezone  153.5   2010 01 40 00:00 should be invalid      javascript // Expected false // Actual   true true == false            is_valid:invalid string iso 8601   timezone  153.6   2010 01 40 00:00 should be invalid      javascript // Expected false // Actual   true true == false            is_valid:invalid string iso 8601   timezone  153.7   2010 01 40T24 00:00 should be invalid      javascript // Expected false // Actual   true true == false            is_valid:invalid string iso 8601   timezone  153.8   2010 01 40T24 00:00 should be invalid      javascript // Expected false // Actual   true true == false            is_valid:invalid string iso 8601   timezone  153.9   2010 01 40T23:60 00:00 should be invalid      javascript // Expected false // Actual   true true == false            is_valid:invalid string iso 8601   timezone  153.10   2010 01 40T23:60 00:00 should be invalid      javascript // Expected false // Actual   true true == false            is_valid:invalid string iso 8601   timezone  153.11   2010 01 40T23:59:60 00:00 should be invalid      javascript // Expected false // Actual   true true == false            is_valid:invalid string iso 8601   timezone  153.12   2010 01 40T23:59:60 00:00 should be invalid      javascript // Expected false // Actual   true true == false            is_valid:invalid string iso 8601   timezone  153.13   2010 01 40T23:59:59.9999 00:00 should be invalid      javascript // Expected false // Actual   true true == false            is_valid:invalid string iso 8601   timezone  153.14   2010 01 40T23:59:59.9999 00:00 should be invalid      javascript // Expected false // Actual   true true == false     ,jak43324,closed,3,2013-09-23 14:43:29,2016-04-01 23:09:12,,Troubleshooting,,,0,1
13124,moment/moment,1126,en au locale,Same as en gb  just AM/PM instead of 24h for time formatting. ,jarcoal,closed,2,2013-09-24 01:55:32,2013-10-03 19:04:27,,Needs tests,,,1,1
13123,moment/moment,1127,Unit tests failing on IE8,The latest version of momentjs  2.2.1  does not pass the unit tests on Windows 7   IE8 on browserstack.com ,homburg,closed,4,2013-09-24 06:15:57,2013-09-27 08:38:44,,,,0,1
13122,moment/moment,1128,moment.js validating invalid date  2013 10 311 ,Dates with extraneous characters are sometimes being validated; sometimes not. In one case  the behavior changes when extra format strings are offered. To wit:      moment  2010 10 319   [ YYYY MM DD ] .isValid   // true moment  2010 10 31a   [ YYYY MM DD ] .isValid  ; // true moment  2010 10 319   [ MM/DD/YYYY    MM DD YYYY    YYYY MM DD ] .isValid  ; // true moment  2010 10 3199   [ MM/DD/YYYY    MM DD YYYY    YYYY MM DD ] .isValid  ; // false       moment  2010 10 319qr   [ MM/DD/YYYY    MM DD YYYY    YYYY MM DD ] .isValid  ; // true          Here s the fiddle: http://jsfiddle.net/grahampcharles/r42jg/6/  and the [SO question] http://stackoverflow.com/questions/18997388/moment js validating invalid date 2013 10 311  link. ,grahampcharles,closed,4,2013-09-25 06:36:38,2013-09-25 06:56:12,,,,0,1
13121,moment/moment,1129,Added support for uzbek language,Added support for uzbek language ,muminoff,closed,3,2013-09-25 06:53:21,2013-09-25 06:57:37,,,,1,1
13120,moment/moment,1130,Update hu.js,Updated the test  please check it or tell me how to check it. ,bakatamas,closed,1,2013-09-25 16:47:38,2013-09-26 00:40:32,,,,1,1
13119,moment/moment,1131,Cannot locally customize language.  TypeError: Cannot read property  _abbr  of undefined ,   Use Case  I need to be able to describe a sliding time window.  e.g.  Last 10 minutes    Last hour  . To make the single case work I need to remove the prefixes from the  relativeTime  block in the language:      moment.lang  en no singular prefix         relativeTime :           s:  seconds           m:  minute           h:  hour           d:  day           M:  month           y:  year          ;      However I don t want this language change to affect other parts of the application so I want to do it as a local customization. However this does not seem to be possible:    Attempted solution      var from =  3000; return  Last     moment  .lang  en         relativeTime :           s:  seconds           m:  minute           h:  hour           d:  day           M:  month           y:  year          .subtract  milliseconds    from .from moment    true ; //  Last a few seconds       If I try to override  en  it just has no effect. If I replace  en  with  en no singular prefix  it throws  TypeError: Cannot read property  _abbr  of undefined .  Am I going about this wrong  misreading the documentation  or is this a bug? Thanks  ,anstosa,closed,2,2013-09-25 17:09:37,2013-09-26 00:57:41,,,,0,1
13118,moment/moment,1132,October 19th mysterious issue,Adding a day to October 19th from some specific years results to the same Oct 19th moment.  moment  2003 10 19  .add  days  1 .toString  ; //  Sun Oct 19 2003 23:00:00 GMT 0200  moment  2008 10 19  .add  days  1 .toString  ; //  Sun Oct 19 2008 23:00:00 GMT 0200  moment  2013 10 19  .add  days  1 .toString  ; //  Sun Oct 19 2013 23:00:00 GMT 0200  moment  2014 10 19  .add  days  1 .toString  ; //  Sun Oct 19 2014 23:00:00 GMT 0200  ,dferrazm,closed,5,2013-09-25 17:11:07,2013-09-26 04:18:29,,,,0,1
13117,moment/moment,1133,validation with  string  string[]  gives inconsistent results,Using an array of format strings  I d expect that isValid   returns true if any of the strings match. However  the first expression returns true and the second one false:      moment  06:15   [ HH:mm ] ;   // true  moment  06:15   [ MM/DD/YYYY    MM DD YYYY    YYYY MM DD    HH:mm    HH:mm:ss    YYYY MM DDTHH:mm:ssZ ] ;  // false      Note that this returns true  as would be expected:      moment  06:00   [ MM/DD/YYYY    MM DD YYYY    YYYY MM DD    HH:mm    HH:mm:ss    YYYY MM DDTHH:mm:ssZ ] ;  // true      Fiddle: http://jsfiddle.net/grahampcharles/RD7Gx/2/  ,grahampcharles,closed,3,2013-09-25 17:26:26,2013-09-26 01:20:07,,Forgiving parsing,,,0,1
13116,moment/moment,1134,Update hu.js,My second attempt ,bakatamas,closed,0,2013-09-26 07:34:06,2013-09-26 08:48:32,,,,1,1
13115,moment/moment,1135,Update hu.js,My second attempt ,bakatamas,closed,0,2013-09-26 07:34:09,2013-09-26 08:48:21,,,,1,1
13114,moment/moment,1136,Patch 5,Third attempt ,bakatamas,closed,0,2013-09-26 07:47:08,2013-09-26 08:56:27,,,,1,1
13113,moment/moment,1137,Updates to hu.js,I m getting the hang of this... i think ,bakatamas,closed,2,2013-09-26 07:57:10,2013-09-26 11:52:01,,,,1,1
13112,moment/moment,1138,Removed   from bundled file names,IIS has issues with files containing  . fixes  1118  The only thing that worries me is backwards compatibility. Should we also copy the new files to the old locations? ,ichernev,closed,1,2013-09-26 08:34:40,2013-09-26 08:42:37,,,,1,1
13111,moment/moment,1139,toString always prints date in English,Implementation of  1111  This is another breaking change. All users who do  toString  to display a moment to the user will be affected. Of course a better one would be   .format  LLLL    or something  but still it would be kind of breaking. Maybe we can instruct users to change toString   if they don t want to patch their code ;  ,ichernev,closed,0,2013-09-27 08:34:49,2013-09-27 14:33:01,,,,1,1
13110,moment/moment,1140,Invalid moment rework,Apologies for the number of commits here; it was hard to squash them because I merged in  develop  instead of rebasing  which I had to do because part of the branch was already merged. Here s a summary of the changes:   Parsing flags  We generate a set of parsing flags when parsing with a format. They are:      js     empty: false                              //did we find anything to parse at all   unusedTokens: [ MM    DD ]     //tokens we didn t use in the parse   unusedInput: [ stuff    stuff ]      //other input not parsed   charsLeftOver: 15                    //formally ._il  the total number of unused input characters. Sum of the strlens for unusedInput   overflowMonthOk: false           //whether or not we consider an overflowed date OK  as in  DDD  parsing   overflow: 3                               //array index of where overflow occurred  i.e. invalidAt      nullInput: false                          //was the input null?   invalidMonth: false                   //month name that didn t exist  moment  splurk    MMMM     userInvalidated: false               //user used moment.invalid   without specifying why        Access with  moment  .parsingFlags   . Note that the flags do   not   include  dstInvalid .   Redefined isValid   isValid    is now a function of three things:   Is  date.valueOf    just  NaN ?   What parsing flags are set?   Are we parsing as strict?  Which parsing flags matter is determined by  strict . This makes it a lot easier to understand and diagnose validity. There are some behavioral changes. In general   isValid    is more lenient. Some examples:   moment  xx xx 2001    DD MM YY    was invalid and now isn t. That s because it parses as Jan 20. I think this is correct. Use strict if you don t want that.   moment  123456790.12    X.SS   was invalid and now isn t.  Open questions:    isValid    completely ignores whether the date parsed corresponds to a time that doesn t exist because of DST. This is a significant change breaking change. Should it check that?   Improved format scoring  As of  1094  we do a much better job of picking a parsing format out of a list by checking how many unparsed characters there are. We can use the parsing flags to improve that: 1. Prefer valid moments to all invalid moments  as measured by  isValid    2. Prefer formats with fewer unused tokens 3. Prefer formats that result in fewer unparsed input characters   Reworked strict parsing  Strict parsing doesn t need its own separate function to check things. We just have  strict  behave differently in these ways: 1. Prepend  ^  to the token regexes. This works because we  slice    the string progressively 2. Place non format characters in the  unsedTokens  parsing flag 3. Make  isValid    consider additional parsing flags    Open stuff:        I need additional tests for that third item.   This is covered by the create   tests   isDSTShifted  We want to know if you asked for 1:30 AM on March 3  assuming you re in the US .  isDSTShifted    answers that. There are a few questions/issues there:   I m not sure how to write tests for it that work across time zones. We could have it skip the test if you re not in a US timezone with DST. Anyway    there are currently no tests for this  .   is  isDSTShifted  the right term for this?  isDSTInvalid   ?  isUnexpectedTime ? Don t know what to call it.   Does it work reliably? It works by assuming that if the date is valid    the  overflowMonthOk  flag is off  that the only reason for  _a  = moment _a .toArray    is that DST messed with the date. I m not 100  sure that s true.   format   for invalid moments   format    always returns  Invalid date  for   m.isValid   . The string can be localized.  Open issues:   Is this what we want to do?     Could use more tests in general   done      Need to test localization   done   Little stuff   moment.invalid    now takes an optional object of parsing flags. So if you re making a third party plugin  you can generate moments with the appropriate flags  even made up ones. If you don t specify flags  it sets the  userInvalidated  flag for you.   Other internal changes      js         YEAR = 0          MONTH = 1          DATE = 2          HOUR = 3          MINUTE = 4          SECOND = 5          MILLISECOND = 6      ,icambron,closed,5,2013-09-27 21:58:18,2013-10-03 18:02:26,,,,1,1
13109,moment/moment,1141,parsing weeks,This PR does two things: 1. Adds support for  get    and  set    for a bunch more properties 2. Adds parsing support for  gg    GG    w    W    e    E    and  d . See  850 and  689  There s a bit of undefined behavior here  like what happens when you have contradictory strings  per @timrwood s comment [here] https://github.com/moment/moment/issues/850 issuecomment 19649965 . I think that s probably OK. ,icambron,closed,8,2013-09-28 07:37:22,2013-10-05 23:10:17,,,,1,1
13108,moment/moment,1142,Picking languages,Fix for  1108 and  1109. Here are the changes:    moment.lang    and  moment  .lang    now accept an array of language strings  with the idea that we ll use the first one that works   We now use language substrings. If  the user specifies  es MX   we ll use  es  if we don t have the MX one.   The precedence between array items and substrings is that we ll try substrings of the same array item until we discover that the next item has something mores specific with the same root. E.g.  we ll try  [ es MX    es GU    fr CA ]  in this order:  es MX    es GU    fr CA    fr . I think that s probably the most intuitive setup  because it allows you to describe specific alternatives without breaking general ones  and it seems unlikely you d prefer a completely different language to a less localized version of the one you do want.    moment.lang    returns the language it actually decided to use ,icambron,closed,6,2013-09-28 22:24:22,2013-10-03 18:20:39,,,,1,1
13107,moment/moment,1143,uncaught TypeError exception when passed very long string,This line:      moment  System Administrator and Database Assistant  7/1/2011   System Administrator and Database Assistant  7/1/2011   Database Coordinator  7/1/2011   Vice President  7/1/2011   System Administrator and Database Assistant  5/31/2012   Database Coordinator  7/1/2012   System Administrator and Database Assistant  7/1/2013    [ MM/DD/YYYY    MM DD YYYY    YYYY MM DD    YYYY MM DDTHH:mm:ssZ ] .isValid        causes an uncaught TypeError exception at line 1256 of 2.2.1:      this._isValid =  isNaN this._d.getTime   ;      Fiddle: http://jsfiddle.net/grahampcharles/Mzqj4/1/ ,grahampcharles,closed,2,2013-09-29 04:59:40,2013-10-05 12:57:49,icambron,Bug,,,0,1
13106,moment/moment,1144,Added bosnian  bs  translation.,,frontyard,closed,3,2013-09-29 15:03:12,2013-09-30 23:06:08,,Needs tests,,,1,1
13105,moment/moment,1145,October 5th  .add   and IOS7.02,All hell breaks loose on October 5th 2013  and 2012 and 2014 .  Here s a quick sample: http://soda moment.azurewebsites.net/test2.html  Expected: It should spit out an entry for every day of the year.  Actual: It gets to Oct5th and does not add any days beyond it.  This works fine in IOS5 and 6. ,ctolkien,closed,14,2013-09-30 02:36:55,2013-09-30 23:01:19,,,,0,1
13104,moment/moment,1146,language modules should return the name of the language,When using a language with AMD the code looks something like this:      require [ moment    moment/lang/nb ]  function moment  langNorsk     moment.lang  nb  ;   ;      Notice that the  langNorsk  variable isn t used for anything  and the magic string   nb   is used without any reference to what it means. Currently the language modules don t return anything  they only have side effects  they register a language with moment .   Instead they could return the string for their language. So the  lang/nb.js  file could return the string   nb    which could be passed to the  lang    method. This would let the following code be run:      require [ moment    moment/lang/nb ]  function moment  langNorsk     moment.lang langNorsk ;   ;     ,mariusGundersen,closed,5,2013-09-30 09:30:43,2013-09-30 17:03:32,,,,0,1
13103,moment/moment,1147,Feature/export lang,This is a fix for  1146  It adds a return to all language files  so they can be required either using AMD or node. ,mariusGundersen,closed,2,2013-09-30 12:56:57,2013-09-30 16:47:23,,,,1,1
13102,moment/moment,1148,Fix longDateFormat for Bulgarian language,Bulgaria uses a [24 hour] http://en.wikibooks.org/wiki/Bulgarian/Time  time format. Therefore  the  LT  property of  longDateFormat  in  bg.js  has to be changed to  H:mm   [Example] http://jsfiddle.net/YgCZM/2/  ,petarov,closed,3,2013-09-30 21:02:49,2013-10-02 09:20:12,,Language,,,0,1
13101,moment/moment,1149,make bosnian consistent with change to language boilerplate,,icambron,closed,0,2013-09-30 23:12:55,2013-09-30 23:13:11,,,,1,1
13100,moment/moment,1150,IE8  .calendar    method broken,Normally using the  .calendar    method with configuration like:      javascript moment.lang  en gb          calendar:           lastDay  :  [Yesterday] D MMMM YYYY           sameDay  :  [Today] D MMMM YYYY           nextDay  :  [Tomorrow] D MMMM YYYY           lastWeek :  dddd D MMMM YYYY           nextWeek :  dddd D MMMM YYYY           sameElse :  dddd D MMMM YYYY          ;      You could intercept today  yesterday and tomorrow etc. In IE8  it ignores the configuration and just displays the normal default format. An example would be in Google Chrome it shows  Today 1 October 2013  but in IE8 it displays  Tuesday 1 October 2013 .  I ve attached some screenshots from IE8 of the moment.js homepage examples.  [screen shot 2013 10 01 at 10 39 23] https://f.cloud.github.com/assets/864846/1244167/b23eaf1e 2a7d 11e3 96d1 3dcefdcd89bd.png   [screen shot 2013 10 01 at 10 40 16] https://f.cloud.github.com/assets/864846/1244168/b23f6c88 2a7d 11e3 89b9 e2670ec4dc21.png  ,apergy,closed,7,2013-10-01 09:15:35,2013-10-06 18:53:37,,IE8,,,0,1
13099,moment/moment,1151,Moment.format does not work properly with line break [ n], moment  .format  ddd nDD nMMM    results in string: Mon30Sep   moment  .format  ddd[ n]DD[ n]MMM    results in string: Mon[ ]30[ ]Sep ,goodlime,closed,6,2013-10-01 11:15:52,2013-10-03 18:32:22,,,,0,1
13098,moment/moment,1152,duration.format is adding hours to the result,Let s say you have this code:      var duration = moment.duration 10   seconds  ;  var countdown = moment duration.asMilliseconds   .format  hh:mm:ss  ;      The result is this:  10:00:10   Shouldn t it be:  00:00:10   Inspecting the duration var in Firebug I see this:      days     0  hours     0  milliseconds     0  minutes     0  months     0  seconds     10  years     0  _days     0      If I do:      moment duration.asMilliseconds   .format  HH:mm:ss  ;      It shows:      22:00:10      To get this working right now I had to omit the hour part:      var countdown = moment duration.asMilliseconds   .format  mm:ss  ;     ,leniel,closed,9,2013-10-01 16:28:19,2013-10-01 23:31:16,,,,0,1
13097,moment/moment,1153,IE8 returns   1. IND  when the statement   moment    is executed,Statements like:  this.clone  .startOf units  appear to fail in IE8. ,rwbaskette,closed,2,2013-10-01 20:05:51,2013-10-02 14:50:45,,,,0,1
13096,moment/moment,1154,1 test failed. diff:diff between utc and local  57.1  ,    Client info      Date String   : Wed Oct 02 2013 01:16:16 GMT 0400  MSK  Locale String :    02     2013 01:16:16 Offset        :  180 User Agent    : Mozilla/5.0  X11; Linux x86_64; rv:24.0  Gecko/20100101 Firefox/24.0            diff:diff between utc and local  57.1   year diff      javascript // Expected 1 // Actual   0 0 == 1     ,m1kc,closed,1,2013-10-01 21:18:39,2013-10-05 07:41:47,,Unit Test Failed,,,0,1
13095,moment/moment,1155,Issue  1153   IE8 Errors on type coercion,This commit replaced instances of Moment to Number type coercion in comparisons  e.g. equivelent to   moment     and when returning the unix time what is equivelent to   moment  .utc  ._d .  This commit passes all unit tests and works well in IE8. ,rwbaskette,closed,2,2013-10-02 00:17:02,2013-10-02 11:37:01,,,,1,1
13094,moment/moment,1156,Accuracy bug,> >  moment  28 oct 2013   moment  21 oct 2013   / 1000_60_60   This returns 169 instead of expected 168  from 7 days    24 hours   Interesting is the thing that the very next week gives correct answer  > >  moment  4 nov 2013   moment  28 oct 2013   / 1000_60_60  ,JClant,closed,5,2013-10-02 08:38:53,2013-10-02 09:03:42,,,,0,1
13093,moment/moment,1157,Changed bulgarian time format to 24h,As requested by  1148 ,ichernev,closed,0,2013-10-02 09:17:32,2013-10-02 09:24:13,,,,1,1
13092,moment/moment,1158,Allow non formatting tokens to include newlines,Fixes  1151. ,icambron,closed,1,2013-10-02 15:20:41,2013-10-03 18:32:22,,,,1,1
13091,moment/moment,1159,added hasOwnProperty guard to lists enumeration,[latest develop/moment.js] https://github.com/moment/moment/blob/6a5f960/moment.js  was failing to load in context of Prototype.js  which pollutes Array.prototype    causing a recently added enumeration grief .  moment.js 2.2.1 appears to work fine though.  here s an example http://jsfiddle.net/wzp4Z/4/  see debug console    fails during initialization   this pull request wraps in a conventional hasOwnProperty guard  but i wonder if switching to <code>for  i=0; i < lists.length; i   </code> would actually make more sense here  since lists appears to be an Array . ,humbletim,closed,2,2013-10-02 19:41:55,2013-10-03 18:29:01,,,,1,1
13090,moment/moment,1160,1 test failed. utc:creating with utc  196.1  ,    Client info      Date String   : Thu Oct 03 2013 02:01:41 GMT 0200  CEST  Locale String : 3.10.2013 2:01:41 Offset        :  60 User Agent    : Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/29.0.1547.76 Safari/537.36            utc:creating with utc  196.1   Calling moment.utc   should default to the current time      javascript // Expected true // Actual   false false == true     ,huttarichard,closed,1,2013-10-03 00:02:24,2014-06-05 07:46:55,,Troubleshooting,Unit Test Failed,,,0,1
13089,moment/moment,1161,1 test failed. add:add across DST  10.1  ,    Client info      Date String   : Wed Oct 02 2013 19:13:42 GMT 0700  PDT  Locale String : October 2  2013 at 7:13:42 PM PDT Offset        : 480 User Agent    : Mozilla/5.0  iPad; CPU OS 7_0 like Mac OS X  AppleWebKit/537.51.1  KHTML  like Gecko  CriOS/30.0.1599.12 Mobile/11A465 Safari/8536.25  C5405BED 98BD 4A1D 9849 2C4533D638E0             add:add across DST  10.1   adding days over DST difference should result in the same hour      javascript // Expected 5 // Actual   6 6 == 5     ,zacharyrankin,closed,1,2013-10-03 02:15:36,2014-01-24 08:34:54,,Unit Test Failed,,,0,1
13088,moment/moment,1162,Inconsistent moment to string coercion,Coercion to string is inconsistent:      javascript moment  .toString  ; >  Thu Oct 03 2013 11:11:42 GMT 0300       moment  ; >  1380787902102       IMO these should return the same value. Compare to the Date object:      javascript Date  .toString  ; >  Thu Oct 03 2013 11:13:18 GMT 0300  FLE Daylight Time        Date  ; >  Thu Oct 03 2013 11:13:19 GMT 0300  FLE Daylight Time       ,apaatsio,closed,4,2013-10-03 08:15:29,2013-10-06 20:24:34,,,,0,1
13087,moment/moment,1163,ISO issues,You can currently do this:  moment  .format  YYYY[ W]W   and get back  2013 W40   and get a great response  but doing this:  moment  2013[ W]40   comes back as an invalid date. ,BrandonCopley,closed,2,2013-10-03 17:31:39,2013-10-06 06:04:09,,Enhancement,,,0,1
13086,moment/moment,1164,bulletproofing array of formats,Fixes  1143  adds some other other bulletproofing. ,icambron,closed,1,2013-10-04 17:29:51,2013-10-05 12:57:49,,,,1,1
13085,moment/moment,1165,Parse String   Format does not work possibly due to month format,This does not work  moment  10/4/2013 01:00  [ DD MMM YYYY HH:mm    MM/DD/YYYY HH:mm ] .isValid  ;  even if date is valid.  And this works  moment  10/4/2013 01:00  [ MM/DD/YYYY HH:mm   DD MMM YYYY HH:mm ] .isValid  ;   and this works too even if the second format is matching  moment  04 Oct 2013 01:00  [ MM/DD/YYYY HH:mm   DD MMM YYYY HH:mm ] .isValid  ;   The two time formats are completely different so the first code should return true but it does not. The second code returns true because it encounters first format at the beginning. ,KapilRakh,closed,4,2013-10-04 19:17:14,2013-10-04 19:45:35,,Bug,,,0,1
13084,moment/moment,1166,Apparent error in moment  .valueOf  ,I think that is necessary this test:  var d = new Date  ; var diff = Date.parse d    moment d .valueOf  ; test.equal diff  0 ; test.done  ;  Returns a nonzero value  Why? Is this correct? ,fabriciorsf,closed,3,2013-10-05 02:12:46,2013-10-05 03:21:38,,,,0,1
13083,moment/moment,1167,moment  YYYY MM DD   should be always set in UTC time zone.,moment  2013 10 06  .valueOf   and Date.parse  2013 10 06   do not result in the same time value if you are not in UTC time zone  I m in Tokyo   09:00 .  A string like  YYYY MM DD   date only  is one of the valid ISO8601 format  so moment is expected to set it in UTC time zone  but actually moment seems to set it in local time zone.  The following example shows that you can see the different time value between moment and native Date.parse output if you are not in UTC time zone.  http://jsfiddle.net/zP7nv/3/ ,memolog,closed,5,2013-10-06 00:56:00,2013-10-06 08:56:23,,,,0,1
13082,moment/moment,1168,API to get pure language data like month names etc.,For example  I need a dropdown with month names. I d like to reuse the language data that moment.js already has  but there is no official way to do it. At least moment.langData  ._months doesn t seem very reliable. Would be nice to have this API. ,thorn0,closed,3,2013-10-07 17:44:04,2013-10-07 20:10:21,,,,0,1
13081,moment/moment,1169,Trailing comma,,rfb,closed,4,2013-10-07 21:17:42,2013-10-07 23:20:12,,,,1,1
13080,moment/moment,1170,moment min and moment max methods are backwards,The moment min and moment max methods  documentation and results are misleading.  From the documentation:  >  moment  .max Moment String Number Date Array ;  > Retrieves the greater of two moment values. >  >  moment  .min Moment String Number Date Array ;  > Retrieves the lesser of two moment values.  Which is what I intuitively expected.  The actual outcomes of the functions  however  seem to be backwards.      javascript now = moment   past = now.clone  .subtract 1   d   future = now.clone  .add 1   d   past.min now   // returns now past.max now   // returns past  now.max past  // returns past now.min past  // returns now  // and so on..      I can probably write a PR for this  but I wanted to make sure I m not missing something. ,andrezsanchez,closed,3,2013-10-07 21:47:15,2013-10-09 04:50:06,,Documentation,,,0,1
13079,moment/moment,1171,fix zero index for months   and weekdays  ,Noticed a bug in  months    and company: it doesn t work as expected when you ask for month 0. ,icambron,closed,1,2013-10-08 03:54:12,2013-10-09 02:33:27,,,,1,1
13078,moment/moment,1172,Fixes component.json generator,The component.json file is not listing  moment.js  under scripts  and the module is therefore not usable with require ,wejendorp,closed,2,2013-10-08 13:05:19,2013-10-13 08:39:11,,Build/Release,,,1,1
13077,moment/moment,1173,December 30 31 of 2013 show the year being 2014,Monday December 30th and Tuesday December 31st of 2013 are showing a year of 2014.  When using ISO Year  GG  the bug occurs on the 30th and 31st  when using non ISO  gg  the bug also happens for December 29th.   [December 2013 Calendar] http://www.timeanddate.com/calendar/monthly.html?year=2013 month=12 country=1   [JSFiddle] http://jsfiddle.net/fryPB/2/  ,bsilvereagle,closed,2,2013-10-08 21:52:38,2013-10-08 23:57:54,,,,0,1
13076,moment/moment,1174,Is there any workaround for handle datetime format as  24:00 ,Previous version of momentjs that handle  24:00  as day 1 but after 2.3.0. The format has been changed as below. So  I need to know how to handle this situation?  _Previous  2.2.1 _       2013 10 09T24:00:00 07:00  ==>  2013 10 10T00:00:00 07:00   automatic convert to next day       _Now  2.3.1 _       2013 10 09T24:00:00 07:00  ==> Invalid date     ,giver,closed,8,2013-10-09 06:43:36,2014-10-22 17:22:39,,Bug,todo,,,0,1
13075,moment/moment,1175,ISO 8601 parsing fails on Windows XP / IE8,Using version 2.3.1 the following ISO Date related unit tests fail on XP/IE8  vanilla install from http://www.modern.ie/en US/virtualization tools downloads .  40.1:  2010 11 08T18:04Z  40.2:  2010 11 08T18:04:20Z  40.3:  2010 11 08T18:04:20.111Z  41.1:  2010 11 08T18:04:20.111Z  into local  Version 2.1.0 parses these dates ok. ,deedw,closed,14,2013-10-09 10:00:43,2013-10-27 19:11:50,,Bug,IE8,,,0,1
13074,moment/moment,1176,63 tests failed. create:string without format  22.3  create:parsing iso with T  39.9  diff:diff between utc and local  60.1  lang:ar ma:returns the name of the language  314.1  lang:ar:returns the name of the language  336.1  lang:bg:returns the name of t,    Client info      Date String   : Wed Oct 09 2013 18:58:58 GMT 0400  MSK  Locale String :    09     2013 18:58:58 Offset        :  180 User Agent    : Mozilla/5.0  X11; Linux x86_64; rv:24.0  Gecko/20100101 Firefox/24.0            create:string without format  22.3   2013 09 13 7:26 am      javascript // Expected NaN // Actual   1379042760000 1379042760000 == NaN            create:parsing iso with T  39.9   including a trailing UTC in the input should work      javascript // Expected true // Actual   false false == true            diff:diff between utc and local  60.1   year diff      javascript // Expected 1 // Actual   0 0 == 1            lang:ar ma:returns the name of the language  314.1   module should export ar ma      javascript // Expected ar ma // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ar ma             lang:ar:returns the name of the language  336.1   module should export ar      javascript // Expected ar // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ar             lang:bg:returns the name of the language  358.1   module should export bg      javascript // Expected bg // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  bg             lang:br:returns the name of the language  373.1   module should export br      javascript // Expected br // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  br             lang:bs:returns the name of the language  395.1   module should export bs      javascript // Expected bs // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  bs             lang:ca:returns the name of the language  416.1   module should export ca      javascript // Expected ca // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ca             lang:cs:returns the name of the language  440.1   module should export cs      javascript // Expected cs // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  cs             lang:cv:returns the name of the language  462.1   module should export cv      javascript // Expected cv // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  cv             lang:da:returns the name of the language  480.1   module should export da      javascript // Expected da // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  da             lang:de:returns the name of the language  501.1   module should export de      javascript // Expected de // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  de             lang:el:returns the name of the language  523.1   module should export el      javascript // Expected el // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  el             lang:en au:returns the name of the language  545.1   module should export en au      javascript // Expected en au // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  en au             lang:en ca:returns the name of the language  567.1   module should export en ca      javascript // Expected en ca // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  en ca             lang:en gb:returns the name of the language  589.1   module should export en gb      javascript // Expected en gb // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  en gb             lang:eo:returns the name of the language  632.1   module should export eo      javascript // Expected eo // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  eo             lang:es:returns the name of the language  654.1   module should export es      javascript // Expected es // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  es             lang:et:returns the name of the language  676.1   module should export et      javascript // Expected et // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  et             lang:eu:returns the name of the language  698.1   module should export eu      javascript // Expected eu // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  eu             lang:fa:returns the name of the language  720.1   module should export fa      javascript // Expected fa // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  fa             lang:fi:returns the name of the language  742.1   module should export fi      javascript // Expected fi // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  fi             lang:fr ca:returns the name of the language  763.1   module should export fr ca      javascript // Expected fr ca // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  fr ca             lang:fr:returns the name of the language  784.1   module should export fr      javascript // Expected fr // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  fr             lang:gl:returns the name of the language  806.1   module should export gl      javascript // Expected gl // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  gl             lang:he:returns the name of the language  827.1   module should export he      javascript // Expected he // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  he             lang:hi:returns the name of the language  850.1   module should export hi      javascript // Expected hi // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  hi             lang:hr:returns the name of the language  872.1   module should export hr      javascript // Expected hr // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  hr             lang:hu:returns the name of the language  894.1   module should export hu      javascript // Expected hu // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  hu             lang:id:returns the name of the language  915.1   module should export id      javascript // Expected id // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  id             lang:is:returns the name of the language  937.1   module should export is      javascript // Expected is // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  is             lang:it:returns the name of the language  958.1   module should export it      javascript // Expected it // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  it             lang:ja:returns the name of the language  979.1   module should export ja      javascript // Expected ja // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ja             lang:ka:returns the name of the language  1001.1   module should export ka      javascript // Expected ka // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ka             lang:kr:returns the name of the language  1023.1   module should export ko      javascript // Expected ko // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ko             lang:lt:returns the name of the language  1045.1   module should export lt      javascript // Expected lt // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  lt             lang:lv:returns the name of the language  1067.1   module should export lv      javascript // Expected lv // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  lv             lang:ml:returns the name of the language  1090.1   module should export ml      javascript // Expected ml // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ml             lang:mr:returns the name of the language  1113.1   module should export mr      javascript // Expected mr // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  mr             lang:ms my:returns the name of the language  1135.1   module should export ms my      javascript // Expected ms my // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ms my             lang:nb:returns the name of the language  1157.1   module should export nb      javascript // Expected nb // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  nb             lang:ne:returns the name of the language  1180.1   module should export ne      javascript // Expected ne // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ne             lang:nl:returns the name of the language  1203.1   module should export nl      javascript // Expected nl // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  nl             lang:nn:returns the name of the language  1225.1   module should export nn      javascript // Expected nn // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  nn             lang:pl:returns the name of the language  1247.1   module should export pl      javascript // Expected pl // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  pl             lang:pt br:returns the name of the language  1268.1   module should export pt br      javascript // Expected pt br // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  pt br             lang:pt:returns the name of the language  1289.1   module should export pt      javascript // Expected pt // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  pt             lang:ro:returns the name of the language  1311.1   module should export ro      javascript // Expected ro // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ro             lang:ru:returns the name of the language  1336.1   module should export ru      javascript // Expected ru // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ru             lang:sk:returns the name of the language  1360.1   module should export sk      javascript // Expected sk // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  sk             lang:sl:returns the name of the language  1382.1   module should export sl      javascript // Expected sl // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  sl             lang:sq:returns the name of the language  1404.1   module should export sq      javascript // Expected sq // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  sq             lang:sv:returns the name of the language  1426.1   module should export sv      javascript // Expected sv // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  sv             lang:th:returns the name of the language  1447.1   module should export th      javascript // Expected th // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  th             lang:tr:returns the name of the language  1469.1   module should export tr      javascript // Expected tr // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  tr             lang:tzm la:returns the name of the language  1491.1   module should export tzm la      javascript // Expected tzm la // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  tzm la             lang:tzm:returns the name of the language  1513.1   module should export tzm      javascript // Expected tzm // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  tzm             lang:uk:returns the name of the language  1536.1   module should export uk      javascript // Expected uk // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  uk             lang:uz:returns the name of the language  1558.1   module should export uz      javascript // Expected uz // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  uz             lang:vn:returns the name of the language  1580.1   module should export vn      javascript // Expected vn // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  vn             lang:zh cn:returns the name of the language  1602.1   module should export zh cn      javascript // Expected zh cn // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  zh cn             lang:zh tw:returns the name of the language  1624.1   module should export zh tw      javascript // Expected zh tw // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  zh tw      ,m1kc,closed,2,2013-10-09 15:00:58,2013-10-27 19:10:24,,Unit Test Failed,,,0,1
13073,moment/moment,1177,repairing language tests,We added tests to verify that languages actually exported the language they contain  but the way the test is written  it only works correctly in Node  since AMD passes the result through a callback  not as the return value to require. So our tests were failing in the browser.  I just made the test not run in the browser  and then verified it using a local instance of momentjs.com. ,icambron,closed,2,2013-10-09 16:48:14,2013-10-13 08:37:55,,,,1,1
13072,moment/moment,1178,Moment incorrectly formats extended years,It looks like moment incorrectly formats extended years:    15.9.1.15.1 Extended Years    > ECMAScript requires the ability to specify 6 digit years  extended years ; approximately 285 426 years  either forward or backward  from 01 January  1970 UTC. To represent years before 0 or after 9999  ISO 8601 permits the expansion of the year representation  but only by prior agreement between the sender and the receiver. In the simplified ECMAScript format such an expanded year representation shall have 2 extra year digits and is always prefixed with a   or   sign. The year 0 is considered positive and hence prefixed with a   sign.      javascript /      Tested against momentjs version 2.3.1 and    Chrome 32.0.1659.2   / var negativeDate =   000001 01 01T00:00:00.000Z ; moment negativeDate .format  LLLL  ; //  Thursday  December 31 00 2 4:00 PM  new Date negativeDate ; // Thu Dec 31  2 16:00:00 GMT 0800  PST  moment negativeDate .toJSON   //  00 1 01 01T00:00:00.000Z   new Date negativeDate  .toJSON  ; //   000001 01 01T00:00:00.000Z   var positiveDate =   275760 09 13T00:00:00.000Z ; moment positiveDate .toJSON  ; //  275760 09 13T00:00:00.000Z   new Date positiveDate  .toJSON  ; //   275760 09 13T00:00:00.000Z      ,terinjokes,closed,4,2013-10-10 22:13:19,2013-12-20 17:55:33,,Bug,,,0,1
13071,moment/moment,1179,Cannot set property  moment  of undefined when library is concatenated with uglifyjs,I am including moment in an application that runs all the js files through uglifyjs as part of a build process in grunt. when moment is concatenated  I get the above error at this method:  function makeGlobal              undefined  == typeof ender     this.moment = moment ;        I am not using any special settings on uglify  in fact I turned off mangle and made it beautify it for me to see what the function was that was causing the issue. any ideas?  Thanks  Kelly ,kellyrmilligan,closed,17,2013-10-11 20:22:51,2013-11-29 09:36:50,,,,0,1
13070,moment/moment,1180,60 tests failed. lang:ar ma:returns the name of the language  314.1  lang:ar:returns the name of the language  336.1  lang:bg:returns the name of the language  358.1  lang:br:returns the name of the language  373.1  lang:bs:returns the name of the languag,    Client info      Date String   : Fri Oct 11 2013 16:35:57 GMT 0400  EDT  Locale String : 10/11/2013 4:35:57 PM Offset        : 300 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_8_5  AppleWebKit/537.36  KHTML  like Gecko  Chrome/30.0.1599.69 Safari/537.36            lang:ar ma:returns the name of the language  314.1   module should export ar ma      javascript // Expected ar ma // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ar ma             lang:ar:returns the name of the language  336.1   module should export ar      javascript // Expected ar // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ar             lang:bg:returns the name of the language  358.1   module should export bg      javascript // Expected bg // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  bg             lang:br:returns the name of the language  373.1   module should export br      javascript // Expected br // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  br             lang:bs:returns the name of the language  395.1   module should export bs      javascript // Expected bs // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  bs             lang:ca:returns the name of the language  416.1   module should export ca      javascript // Expected ca // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ca             lang:cs:returns the name of the language  440.1   module should export cs      javascript // Expected cs // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  cs             lang:cv:returns the name of the language  462.1   module should export cv      javascript // Expected cv // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  cv             lang:da:returns the name of the language  480.1   module should export da      javascript // Expected da // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  da             lang:de:returns the name of the language  501.1   module should export de      javascript // Expected de // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  de             lang:el:returns the name of the language  523.1   module should export el      javascript // Expected el // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  el             lang:en au:returns the name of the language  545.1   module should export en au      javascript // Expected en au // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  en au             lang:en ca:returns the name of the language  567.1   module should export en ca      javascript // Expected en ca // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  en ca             lang:en gb:returns the name of the language  589.1   module should export en gb      javascript // Expected en gb // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  en gb             lang:eo:returns the name of the language  632.1   module should export eo      javascript // Expected eo // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  eo             lang:es:returns the name of the language  654.1   module should export es      javascript // Expected es // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  es             lang:et:returns the name of the language  676.1   module should export et      javascript // Expected et // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  et             lang:eu:returns the name of the language  698.1   module should export eu      javascript // Expected eu // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  eu             lang:fa:returns the name of the language  720.1   module should export fa      javascript // Expected fa // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  fa             lang:fi:returns the name of the language  742.1   module should export fi      javascript // Expected fi // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  fi             lang:fr ca:returns the name of the language  763.1   module should export fr ca      javascript // Expected fr ca // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  fr ca             lang:fr:returns the name of the language  784.1   module should export fr      javascript // Expected fr // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  fr             lang:gl:returns the name of the language  806.1   module should export gl      javascript // Expected gl // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  gl             lang:he:returns the name of the language  827.1   module should export he      javascript // Expected he // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  he             lang:hi:returns the name of the language  850.1   module should export hi      javascript // Expected hi // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  hi             lang:hr:returns the name of the language  872.1   module should export hr      javascript // Expected hr // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  hr             lang:hu:returns the name of the language  894.1   module should export hu      javascript // Expected hu // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  hu             lang:id:returns the name of the language  915.1   module should export id      javascript // Expected id // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  id             lang:is:returns the name of the language  937.1   module should export is      javascript // Expected is // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  is             lang:it:returns the name of the language  958.1   module should export it      javascript // Expected it // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  it             lang:ja:returns the name of the language  979.1   module should export ja      javascript // Expected ja // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ja             lang:ka:returns the name of the language  1001.1   module should export ka      javascript // Expected ka // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ka             lang:kr:returns the name of the language  1023.1   module should export ko      javascript // Expected ko // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ko             lang:lt:returns the name of the language  1045.1   module should export lt      javascript // Expected lt // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  lt             lang:lv:returns the name of the language  1067.1   module should export lv      javascript // Expected lv // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  lv             lang:ml:returns the name of the language  1090.1   module should export ml      javascript // Expected ml // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ml             lang:mr:returns the name of the language  1113.1   module should export mr      javascript // Expected mr // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  mr             lang:ms my:returns the name of the language  1135.1   module should export ms my      javascript // Expected ms my // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ms my             lang:nb:returns the name of the language  1157.1   module should export nb      javascript // Expected nb // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  nb             lang:ne:returns the name of the language  1180.1   module should export ne      javascript // Expected ne // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ne             lang:nl:returns the name of the language  1203.1   module should export nl      javascript // Expected nl // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  nl             lang:nn:returns the name of the language  1225.1   module should export nn      javascript // Expected nn // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  nn             lang:pl:returns the name of the language  1247.1   module should export pl      javascript // Expected pl // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  pl             lang:pt br:returns the name of the language  1268.1   module should export pt br      javascript // Expected pt br // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  pt br             lang:pt:returns the name of the language  1289.1   module should export pt      javascript // Expected pt // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  pt             lang:ro:returns the name of the language  1311.1   module should export ro      javascript // Expected ro // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ro             lang:ru:returns the name of the language  1336.1   module should export ru      javascript // Expected ru // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ru             lang:sk:returns the name of the language  1360.1   module should export sk      javascript // Expected sk // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  sk             lang:sl:returns the name of the language  1382.1   module should export sl      javascript // Expected sl // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  sl             lang:sq:returns the name of the language  1404.1   module should export sq      javascript // Expected sq // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  sq             lang:sv:returns the name of the language  1426.1   module should export sv      javascript // Expected sv // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  sv             lang:th:returns the name of the language  1447.1   module should export th      javascript // Expected th // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  th             lang:tr:returns the name of the language  1469.1   module should export tr      javascript // Expected tr // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  tr             lang:tzm la:returns the name of the language  1491.1   module should export tzm la      javascript // Expected tzm la // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  tzm la             lang:tzm:returns the name of the language  1513.1   module should export tzm      javascript // Expected tzm // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  tzm             lang:uk:returns the name of the language  1536.1   module should export uk      javascript // Expected uk // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  uk             lang:uz:returns the name of the language  1558.1   module should export uz      javascript // Expected uz // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  uz             lang:vn:returns the name of the language  1580.1   module should export vn      javascript // Expected vn // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  vn             lang:zh cn:returns the name of the language  1602.1   module should export zh cn      javascript // Expected zh cn // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  zh cn             lang:zh tw:returns the name of the language  1624.1   module should export zh tw      javascript // Expected zh tw // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  zh tw      ,cbrunstetter,closed,1,2013-10-11 20:38:55,2013-10-14 08:45:16,,Unit Test Failed,,,0,1
13069,moment/moment,1181,62 tests failed. create:string without format  22.3  create:parsing iso with T  39.9  lang:ar ma:returns the name of the language  314.1  lang:ar:returns the name of the language  336.1  lang:bg:returns the name of the language  358.1  lang:br:returns the,    Client info      Date String   : Fri Oct 11 2013 16:41:12 GMT 0400  EDT  Locale String : Fri Oct 11 16:41:12 2013 Offset        : 300 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10.8; rv:24.0  Gecko/20100101 Firefox/24.0            create:string without format  22.3   2013 09 13 7:26 am      javascript // Expected NaN // Actual   1379071560000 1379071560000 == NaN            create:parsing iso with T  39.9   including a trailing UTC in the input should work      javascript // Expected true // Actual   false false == true            lang:ar ma:returns the name of the language  314.1   module should export ar ma      javascript // Expected ar ma // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ar ma             lang:ar:returns the name of the language  336.1   module should export ar      javascript // Expected ar // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ar             lang:bg:returns the name of the language  358.1   module should export bg      javascript // Expected bg // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  bg             lang:br:returns the name of the language  373.1   module should export br      javascript // Expected br // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  br             lang:bs:returns the name of the language  395.1   module should export bs      javascript // Expected bs // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  bs             lang:ca:returns the name of the language  416.1   module should export ca      javascript // Expected ca // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ca             lang:cs:returns the name of the language  440.1   module should export cs      javascript // Expected cs // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  cs             lang:cv:returns the name of the language  462.1   module should export cv      javascript // Expected cv // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  cv             lang:da:returns the name of the language  480.1   module should export da      javascript // Expected da // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  da             lang:de:returns the name of the language  501.1   module should export de      javascript // Expected de // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  de             lang:el:returns the name of the language  523.1   module should export el      javascript // Expected el // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  el             lang:en au:returns the name of the language  545.1   module should export en au      javascript // Expected en au // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  en au             lang:en ca:returns the name of the language  567.1   module should export en ca      javascript // Expected en ca // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  en ca             lang:en gb:returns the name of the language  589.1   module should export en gb      javascript // Expected en gb // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  en gb             lang:eo:returns the name of the language  632.1   module should export eo      javascript // Expected eo // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  eo             lang:es:returns the name of the language  654.1   module should export es      javascript // Expected es // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  es             lang:et:returns the name of the language  676.1   module should export et      javascript // Expected et // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  et             lang:eu:returns the name of the language  698.1   module should export eu      javascript // Expected eu // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  eu             lang:fa:returns the name of the language  720.1   module should export fa      javascript // Expected fa // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  fa             lang:fi:returns the name of the language  742.1   module should export fi      javascript // Expected fi // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  fi             lang:fr ca:returns the name of the language  763.1   module should export fr ca      javascript // Expected fr ca // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  fr ca             lang:fr:returns the name of the language  784.1   module should export fr      javascript // Expected fr // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  fr             lang:gl:returns the name of the language  806.1   module should export gl      javascript // Expected gl // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  gl             lang:he:returns the name of the language  827.1   module should export he      javascript // Expected he // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  he             lang:hi:returns the name of the language  850.1   module should export hi      javascript // Expected hi // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  hi             lang:hr:returns the name of the language  872.1   module should export hr      javascript // Expected hr // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  hr             lang:hu:returns the name of the language  894.1   module should export hu      javascript // Expected hu // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  hu             lang:id:returns the name of the language  915.1   module should export id      javascript // Expected id // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  id             lang:is:returns the name of the language  937.1   module should export is      javascript // Expected is // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  is             lang:it:returns the name of the language  958.1   module should export it      javascript // Expected it // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  it             lang:ja:returns the name of the language  979.1   module should export ja      javascript // Expected ja // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ja             lang:ka:returns the name of the language  1001.1   module should export ka      javascript // Expected ka // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ka             lang:kr:returns the name of the language  1023.1   module should export ko      javascript // Expected ko // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ko             lang:lt:returns the name of the language  1045.1   module should export lt      javascript // Expected lt // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  lt             lang:lv:returns the name of the language  1067.1   module should export lv      javascript // Expected lv // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  lv             lang:ml:returns the name of the language  1090.1   module should export ml      javascript // Expected ml // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ml             lang:mr:returns the name of the language  1113.1   module should export mr      javascript // Expected mr // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  mr             lang:ms my:returns the name of the language  1135.1   module should export ms my      javascript // Expected ms my // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ms my             lang:nb:returns the name of the language  1157.1   module should export nb      javascript // Expected nb // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  nb             lang:ne:returns the name of the language  1180.1   module should export ne      javascript // Expected ne // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ne             lang:nl:returns the name of the language  1203.1   module should export nl      javascript // Expected nl // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  nl             lang:nn:returns the name of the language  1225.1   module should export nn      javascript // Expected nn // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  nn             lang:pl:returns the name of the language  1247.1   module should export pl      javascript // Expected pl // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  pl             lang:pt br:returns the name of the language  1268.1   module should export pt br      javascript // Expected pt br // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  pt br             lang:pt:returns the name of the language  1289.1   module should export pt      javascript // Expected pt // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  pt             lang:ro:returns the name of the language  1311.1   module should export ro      javascript // Expected ro // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ro             lang:ru:returns the name of the language  1336.1   module should export ru      javascript // Expected ru // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ru             lang:sk:returns the name of the language  1360.1   module should export sk      javascript // Expected sk // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  sk             lang:sl:returns the name of the language  1382.1   module should export sl      javascript // Expected sl // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  sl             lang:sq:returns the name of the language  1404.1   module should export sq      javascript // Expected sq // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  sq             lang:sv:returns the name of the language  1426.1   module should export sv      javascript // Expected sv // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  sv             lang:th:returns the name of the language  1447.1   module should export th      javascript // Expected th // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  th             lang:tr:returns the name of the language  1469.1   module should export tr      javascript // Expected tr // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  tr             lang:tzm la:returns the name of the language  1491.1   module should export tzm la      javascript // Expected tzm la // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  tzm la             lang:tzm:returns the name of the language  1513.1   module should export tzm      javascript // Expected tzm // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  tzm             lang:uk:returns the name of the language  1536.1   module should export uk      javascript // Expected uk // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  uk             lang:uz:returns the name of the language  1558.1   module should export uz      javascript // Expected uz // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  uz             lang:vn:returns the name of the language  1580.1   module should export vn      javascript // Expected vn // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  vn             lang:zh cn:returns the name of the language  1602.1   module should export zh cn      javascript // Expected zh cn // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  zh cn             lang:zh tw:returns the name of the language  1624.1   module should export zh tw      javascript // Expected zh tw // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  zh tw      ,cbrunstetter,closed,1,2013-10-11 20:41:55,2013-10-14 08:46:26,,Unit Test Failed,,,0,1
13068,moment/moment,1182,Grabbing today s date and setting time causes it to fast forward 24 hours,I m trying to time out email messages based on user preferences. My morning calculations are working correctly but it s the evening emails that are never getting sent because dates aren t behaving as expected.  First  here s the code I m using to grab the time and perform adjustments based on user location  etc.          var time = moment  ;     var machineTZ = time.zone  ;     var userTZ = 420;     var diffTZ = userTZ   machineTZ;      var oneHour = moment time .add  minutes   60 ;      var morningRun = moment  .startOf  day  ;     morningRun.hour 7 .minute 0 ;     morningRun.add  minutes   diffTZ ;      var eveningRun = moment  .startOf  day  ;     eveningRun.hour 19 .minute 30 ;     eveningRun.add  minutes   diffTZ ;      I m checking every hour to see if it s time to schedule another email to go out. Right now this is hard coded  but when I begin to add user preferences they ll be able to select their local time they d like things to go out at.  I ve been debugging my values to troubleshoot. Here s output from a job that ran early morning  from the server s perspective : lastRun:    2013 10 12T00:06:55.088Z  this one is being run at 1 am  morningRun: 2013 10 11T14:00:00.000Z eveningRun: 2013 10 12T02:30:00.000Z  The run numbers are as I would expect them to be. In two hours time I want the evening email to go out  7:30pm my time = 2:30am the following day server time .  Looking again an hour later we see: lastRun:    2013 10 12T01:06:58.267Z  this one is at 2 am  morningRun: 2013 10 12T14:00:00.000Z eveningRun: 2013 10 13T02:30:00.000Z <     what?  All of a sudden my calculation for my evening has flipped over the date line  even though it s still 10/12  not 10/13 yet . Because of this my check to see if I should schedule the email fails since it now thinks I need to send the email in 24 hours  not 30 minutes.  Been battling with this weird inconsistency for a while  I thought I had figured out why it was doing it and adjusted my calculations using the time zone stuff above but that didn t do the trick : . This certainly seems like some sort of weird bug as I would expect this to be happening: //Today is 10/12 var eveningRun = moment  .startOf  day  ; //10/12/2013   00:00:00 eveningRun.hour 19 .minute 30 ; //10/12/2013   19:30 eveningRun.add  minutes   diffTZ ; //10/13/2013   2:30 am  This works until at some point it decides that  today  is actually 10/13 and sets the evening run is to take place on 10/14 instead. Help is greatly appreciated  or if this is a bug would love to know what I can do to work around this issue until it s resolved. ,warnero,closed,6,2013-10-12 22:10:41,2013-10-14 02:25:32,,,,0,1
13067,moment/moment,1183,Removed a failing iso format parsing test,One of the things that is broken on Android is  including a trailing UTC in the input should work   which is a test added a long time ago  that used the fact that ISO format matched beginning of string.  So right now this test goes through Date  which is different on regular vs mobile browser. Also adding UTC at the end doesn t make it parse a UTC date  so its misleading to say the least.  I think removing the test makes the most sense in this case. The behavior  of adding UTC at the end is not documented  so shouldn t break legitimate code . ,ichernev,closed,1,2013-10-14 07:05:25,2013-10-14 07:06:52,,,,1,1
13066,moment/moment,1184,Chinese tests failing,Looks like  1076 is causing some test failures on the develop branch  I m guessing at certain times of the day:       Testing zh cn.js..........FF........... >> lang:zh cn   calendar next week >> Message: Today   2 days beginning of day >> Error:       12    ==       12    >> at Object.exports.lang:zh cn.calendar next week  test/lang/zh cn.js:204:18  >> at Object.exports.lang:zh cn.setUp  test/lang/zh cn.js:11:9  >> lang:zh cn   calendar next week >> Message: Today   3 days beginning of day >> Error:       12    ==       12    >> at Object.exports.lang:zh cn.calendar next week  test/lang/zh cn.js:204:18  >> at Object.exports.lang:zh cn.setUp  test/lang/zh cn.js:11:9  >> lang:zh cn   calendar next week >> Message: Today   4 days beginning of day >> Error:       12    ==       12    >> at Object.exports.lang:zh cn.calendar next week  test/lang/zh cn.js:204:18  >> at Object.exports.lang:zh cn.setUp  test/lang/zh cn.js:11:9  >> lang:zh cn   calendar next week >> Message: Today   5 days beginning of day >> Error:       12    ==       12    >> at Object.exports.lang:zh cn.calendar next week  test/lang/zh cn.js:204:18  >> at Object.exports.lang:zh cn.setUp  test/lang/zh cn.js:11:9  >> lang:zh cn   calendar next week >> Message: Today   6 days beginning of day >> Error:       12    ==       12    >> at Object.exports.lang:zh cn.calendar next week  test/lang/zh cn.js:204:18  >> at Object.exports.lang:zh cn.setUp  test/lang/zh cn.js:11:9  >> lang:zh cn   calendar last week >> Message: Monday   1 days next week >> Error:      12    ==       12    >> at Object.exports.lang:zh cn.calendar last week  test/lang/zh cn.js:218:18  >> at Object.exports.lang:zh cn.setUp  test/lang/zh cn.js:11:9       @zenozeng    do you mind taking a look? ,icambron,closed,1,2013-10-14 07:28:07,2013-10-14 17:31:29,,,,0,1
13065,moment/moment,1185,Another breaking test because of stricter iso parser,This time there is am added at the end  which was never parsed as part of iso format  so if it was pm it would result in a wrong parse.  Deleting this test. Docs don t say this is possible  right :  ,ichernev,closed,0,2013-10-14 07:35:35,2013-10-14 07:39:40,,,,1,1
13064,moment/moment,1186,max and min return wrong values,Hi  the functions  max  and  min  return wrong values.              min: function  other                other = moment.apply null  arguments ;             return other < this ? this : other;                     max: function  other                other = moment.apply null  arguments ;             return other > this ? this : other;                It should be the other way around  so that max will return the later moment  and min will return the earlier. ,yaronsch,closed,4,2013-10-14 07:45:10,2013-10-14 08:39:23,,,,0,1
13063,moment/moment,1187,fixes for Z in ISO parser,See  1175. Our ISO parser wasn t really handling the  Z  case because it wasn t in the regex  which now has a     at the end. ,icambron,closed,1,2013-10-14 08:30:03,2013-10-15 04:24:44,,,,1,1
13062,moment/moment,1188,Update test/lang/zh cn.js  Fixes  1184,Fix some mistakes in test/lang/zh cn.js. ,zenozeng,closed,1,2013-10-14 14:47:05,2013-10-14 17:31:29,,,,1,1
13061,moment/moment,1189,Inconsistent results between Chrome and Safari,I am receiving inconsistent results using the same date string parsed by moment between Chrome and Safari.        // Chrome   moment  8/1  .toString     // produces:  Wed Aug 01 2001 00:00:00 GMT 0400     // Safari   moment  8/1  .toString     // produces:  Invalid date       I m not sure if the consistent result should be  Invalid date  or a real date. If it is a real date  should the year be 2001? ,timirwin,closed,1,2013-10-14 19:10:48,2013-10-14 19:25:59,,,,0,1
13060,moment/moment,1190,Capitalization of calendar format,As far as I know  in english  the words  today    tomorrow    yesterday  and  last  do not have first letter capitalized if they are not at beginning of a sentence.  However:      js moment  .subtract  d   1 .calendar  ; //  Yesterday at 2:34 PM  moment  .add  d   1 .calendar  ; //  Tomorrow at 2:34 PM  moment  .add  h   1 .calendar   //  Today at 3:35 PM  moment  .subtract  d   3 .calendar  ; //  Last Saturday at 2:36 PM       Shouldn t we  by default  have no first letter capitalization ?  For instance    fromNow  does not do any capitalization:      js moment  .add  d   3 .fromNow  ; //  in 3 days       I guess that applies also to other languages  I m sure that applies for french .    EDIT:    Moreover  I just realized that this issue leads to inconsistencies in other languages that do not capitalize weekday names:      js moment  .add  day   4 .calendar  ; //  dimanche   9:00   > no first letter capitalized moment  .add  day   1 .calendar  ; //  Demain   9:00   > first letter capitalized     ,alexstrat,closed,7,2013-10-15 12:41:10,2014-02-03 05:40:15,,,,0,1
13059,moment/moment,1191,Zone parse with String Format not working,I m trying this on 2.3.1  Copied these examples from the [docs] http://momentjs.com/docs/ /parsing/string format/   what I see:      javascript moment  2010 10 20 4:30    YYYY MM DD HH:mm  .format  ; //  2010 10 20T04:30:00 04:00  moment  2010 10 20 4:30  0000    YYYY MM DD HH:mm Z  .format  ; //  2010 10 20T00:30:00 04:00       I tried  ZZ  as well  since that is the format of the TZ here  but that didn t fix it either. ,benmoss,closed,1,2013-10-15 19:44:49,2013-10-15 20:07:49,,,,0,1
13058,moment/moment,1192,getDayOfYear produce NaN on IE8,While working with Moments initialised from JS format timestamps I found that attempting to call getDayOfYear produced NaN ,OOPMan,closed,4,2013-10-15 21:04:23,2013-10-27 19:35:05,,,,0,1
13057,moment/moment,1193,diff produces NaN one IE8,While working with Moments initialised from JS format timestamps I found that attempting to use diff produce NaN results. ,OOPMan,closed,3,2013-10-15 21:04:57,2013-10-27 18:22:41,,,,0,1
13056,moment/moment,1194,62 tests failed. create:string without format  22.3  create:parsing iso with T  39.9  lang:ar ma:returns the name of the language  314.1  .........,    Client info      Date String   : Wed Oct 16 2013 12:17:11 GMT 1100  AUS Eastern Standard Time  Locale String : Wednesday  16 October 2013 12:17:11 PM Offset        :  660 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64; rv:24.0  Gecko/20100101 Firefox/24.0            create:string without format  22.3   2013 09 13 7:26 am      javascript // Expected NaN // Actual   1379021160000 1379021160000 == NaN            create:parsing iso with T  39.9   including a trailing UTC in the input should work      javascript // Expected true // Actual   false false == true            lang:ar ma:returns the name of the language  314.1   module should export ar ma      javascript // Expected ar ma // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ar ma             lang:ar:returns the name of the language  336.1   module should export ar      javascript // Expected ar // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ar             lang:bg:returns the name of the language  358.1   module should export bg      javascript // Expected bg // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  bg             lang:br:returns the name of the language  373.1   module should export br      javascript // Expected br // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  br             lang:bs:returns the name of the language  395.1   module should export bs      javascript // Expected bs // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  bs             lang:ca:returns the name of the language  416.1   module should export ca      javascript // Expected ca // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ca             lang:cs:returns the name of the language  440.1   module should export cs      javascript // Expected cs // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  cs             lang:cv:returns the name of the language  462.1   module should export cv      javascript // Expected cv // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  cv             lang:da:returns the name of the language  480.1   module should export da      javascript // Expected da // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  da             lang:de:returns the name of the language  501.1   module should export de      javascript // Expected de // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  de             lang:el:returns the name of the language  523.1   module should export el      javascript // Expected el // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  el             lang:en au:returns the name of the language  545.1   module should export en au      javascript // Expected en au // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  en au             lang:en ca:returns the name of the language  567.1   module should export en ca      javascript // Expected en ca // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  en ca             lang:en gb:returns the name of the language  589.1   module should export en gb      javascript // Expected en gb // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  en gb             lang:eo:returns the name of the language  632.1   module should export eo      javascript // Expected eo // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  eo             lang:es:returns the name of the language  654.1   module should export es      javascript // Expected es // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  es             lang:et:returns the name of the language  676.1   module should export et      javascript // Expected et // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  et             lang:eu:returns the name of the language  698.1   module should export eu      javascript // Expected eu // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  eu             lang:fa:returns the name of the language  720.1   module should export fa      javascript // Expected fa // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  fa             lang:fi:returns the name of the language  742.1   module should export fi      javascript // Expected fi // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  fi             lang:fr ca:returns the name of the language  763.1   module should export fr ca      javascript // Expected fr ca // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  fr ca             lang:fr:returns the name of the language  784.1   module should export fr      javascript // Expected fr // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  fr             lang:gl:returns the name of the language  806.1   module should export gl      javascript // Expected gl // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  gl             lang:he:returns the name of the language  827.1   module should export he      javascript // Expected he // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  he             lang:hi:returns the name of the language  850.1   module should export hi      javascript // Expected hi // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  hi             lang:hr:returns the name of the language  872.1   module should export hr      javascript // Expected hr // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  hr             lang:hu:returns the name of the language  894.1   module should export hu      javascript // Expected hu // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  hu             lang:id:returns the name of the language  915.1   module should export id      javascript // Expected id // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  id             lang:is:returns the name of the language  937.1   module should export is      javascript // Expected is // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  is             lang:it:returns the name of the language  958.1   module should export it      javascript // Expected it // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  it             lang:ja:returns the name of the language  979.1   module should export ja      javascript // Expected ja // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ja             lang:ka:returns the name of the language  1001.1   module should export ka      javascript // Expected ka // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ka             lang:kr:returns the name of the language  1023.1   module should export ko      javascript // Expected ko // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ko             lang:lt:returns the name of the language  1045.1   module should export lt      javascript // Expected lt // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  lt             lang:lv:returns the name of the language  1067.1   module should export lv      javascript // Expected lv // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  lv             lang:ml:returns the name of the language  1090.1   module should export ml      javascript // Expected ml // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ml             lang:mr:returns the name of the language  1113.1   module should export mr      javascript // Expected mr // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  mr             lang:ms my:returns the name of the language  1135.1   module should export ms my      javascript // Expected ms my // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ms my             lang:nb:returns the name of the language  1157.1   module should export nb      javascript // Expected nb // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  nb             lang:ne:returns the name of the language  1180.1   module should export ne      javascript // Expected ne // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ne             lang:nl:returns the name of the language  1203.1   module should export nl      javascript // Expected nl // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  nl             lang:nn:returns the name of the language  1225.1   module should export nn      javascript // Expected nn // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  nn             lang:pl:returns the name of the language  1247.1   module should export pl      javascript // Expected pl // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  pl             lang:pt br:returns the name of the language  1268.1   module should export pt br      javascript // Expected pt br // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  pt br             lang:pt:returns the name of the language  1289.1   module should export pt      javascript // Expected pt // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  pt             lang:ro:returns the name of the language  1311.1   module should export ro      javascript // Expected ro // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ro             lang:ru:returns the name of the language  1336.1   module should export ru      javascript // Expected ru // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  ru             lang:sk:returns the name of the language  1360.1   module should export sk      javascript // Expected sk // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  sk             lang:sl:returns the name of the language  1382.1   module should export sl      javascript // Expected sl // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  sl             lang:sq:returns the name of the language  1404.1   module should export sq      javascript // Expected sq // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  sq             lang:sv:returns the name of the language  1426.1   module should export sv      javascript // Expected sv // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  sv             lang:th:returns the name of the language  1447.1   module should export th      javascript // Expected th // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  th             lang:tr:returns the name of the language  1469.1   module should export tr      javascript // Expected tr // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  tr             lang:tzm la:returns the name of the language  1491.1   module should export tzm la      javascript // Expected tzm la // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  tzm la             lang:tzm:returns the name of the language  1513.1   module should export tzm      javascript // Expected tzm // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  tzm             lang:uk:returns the name of the language  1536.1   module should export uk      javascript // Expected uk // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  uk             lang:uz:returns the name of the language  1558.1   module should export uz      javascript // Expected uz // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  uz             lang:vn:returns the name of the language  1580.1   module should export vn      javascript // Expected vn // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  vn             lang:zh cn:returns the name of the language  1602.1   module should export zh cn      javascript // Expected zh cn // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  zh cn             lang:zh tw:returns the name of the language  1624.1   module should export zh tw      javascript // Expected zh tw // Actual   function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    function  a _ n t  return boolean ==typeof n   t=n n=e  Z  _i:a _f:_ _l:n _strict:t _isUTC: 1    ==  zh tw      ,caoglish,closed,4,2013-10-16 01:19:13,2013-10-27 18:52:44,,Unit Test Failed,,,0,1
13055,moment/moment,1195,Modified regular expressions for support wrapping in tags.,If I want to wrap day or month in html tags      <b>DD</b> <i>MMMM</i>      old regular expressions don t work. ,jarosluv,closed,13,2013-10-16 11:09:24,2013-10-25 20:25:54,,,,1,1
13054,moment/moment,1196,Strict validation is being forgiving,    javascript moment  2012 05 25    YYYY MM DD   true .isValid  ;        // true moment  201 05 25    YYYY MM DD   true .isValid  ;         // true moment  20 05 25    YYYY MM DD   true .isValid  ;          // true moment  2 05 25    YYYY MM DD   true .isValid  ;           // true      I would expect the   last 3 lines   to be   false  .  ,johnstrickler,closed,6,2013-10-16 13:18:14,2013-11-26 21:23:37,,,,0,1
13053,moment/moment,1197,Added tagalog support,Added tagalog support ,hagmandan,closed,6,2013-10-16 23:25:45,2013-10-18 22:38:20,,,,1,1
13052,moment/moment,1198,Incorrect strict date format parsing for Year field.,Using strict parsing   year  field is incorrectly validated to true. Works good for  day  and  month       moment  12/11/2    MM/DD/YYYY   true .isValid   ; //should be false moment  12/11/20    MM/DD/YYYY   true .isValid   ; //should be false moment  12/11/201    MM/DD/YYYY   true .isValid   ; //should be false      Corresponding [jsfiddle] http://jsfiddle.net/7Debm/1/  replicating the issue in latest version of moment.js v 2.3.1 ,dmahapatro,closed,1,2013-10-17 16:33:57,2013-10-17 16:40:15,,,,0,1
13051,moment/moment,1199,How to compare only HH:mm?,I am using moment.js with my node.js project      isWithinTime: function end          var moment = require  moment  ;      var now = moment new Date   .format  HH:mm  ;      var end = moment new Date end  .format  HH:mm  ;       if  now.toString   > end.toString               return false;             return true;        I want to compare only time in HH:mm format. However it does not work because       7:00  >  2:00       returns false. Any ideas how to compare HH:mm? ,artjomzab,closed,4,2013-10-20 20:36:54,2013-10-20 20:53:59,,,,0,1
13050,moment/moment,1200,Fractional seconds fails to parse in Safari,I ve noticed that ISO8601 fractional seconds at high precisions fails to parse in Safari. It seems that the ISO spec allows an unlimited amount of precision.      javascript moment  2010 10 11T00:35:00 0700  .format  LL LT   // October 11 2010 12:35 AM moment  2010 10 11T00:35:00.000 0700  .format  LL LT   // October 11 2010 12:35 AM moment  2010 10 11T00:35:00.0000 0700  .format  LL LT   // Invalid date     ,terinjokes,closed,14,2013-10-21 18:10:24,2013-10-25 22:15:15,,,,0,1
13049,moment/moment,1201,Fix capitalization inconsistencies of  calendar,This is a fix proposition for  1190  It introduces an  upperCaseFirstLetter  boolean option to   calendar :      js moment  .calendar true ; //  >  Today at 10:47 PM  moment  .calendar false ; //  >  today at 10:47 PM       This feature is tested and all  test/moment/   pass.  This option is  true  by default for reverse compatibility   test/lang/en.js  passes without any modification :      js moment  .calendar  ; //  >  Today at 10:47 PM         However   this fixes capitalization inconsistencies observed in languages where the first letter of day names is not upper case. For instance in french:      js // now moment  .add  day   4 .calendar  ; //  dimanche   9:00  expected  Dimanche   9:00  moment  .add  day   1 .calendar  ; //  Demain   9:00   // with this fix moment  .add  day   4 .calendar  ; //  Dimanche   9:00  moment  .add  day   1 .calendar  ; //  Demain   9:00  moment  .add  day   4 .calendar false ; //  dimanche   9:00  moment  .add  day   1 .calendar false ; //  demain   9:00       See  test/lang/fr.js      TODO   adapt for other languages than french  and english  ,alexstrat,closed,15,2013-10-21 21:01:16,2014-02-03 05:43:31,,,,1,1
13048,moment/moment,1202,How to set timezone globally ?,I am looking into setting the timezone using the   .zone   method globally. i.e.  Once zone is set  all future moment calls operate in that time zone instead of local time  like   moment.utc      Is there a way? ,lifeinafolder,closed,3,2013-10-21 23:53:17,2013-10-22 18:34:14,,,,0,1
13047,moment/moment,1203,Moment.js under Vagrant takes host timezone instead of guest,I m running integration tests using Capybara and Poltergeist  as a headless js driver . Moment.js is used in frontend to handle timezone etc.   When I launch my test on a host machine it passes  timezone is taken from host machine  server is at host machine so timezones match . When I launch the same test in a Vagrant box  guest machine has different time than host  Moment.js still takes timezone from the host  instead of the guest   this creates a inconsistency which leads to a fail:      1  Timesheet page                                                                                    as a user I can edit entry                                                                              Failure/Error: @time_log_entry1.reload.started_at.strftime   Y  m  dT H: M: S  .should ==  @dat e1   30.minutes .strftime   Y  m  dT H: M: S                                                                expected:  2013 08 02T05:30:00                                                                            got:  2013 08 02T04:30:00   using ==                                                            ./spec/features/timesheet_spec.rb:119:in   root        The test is at https://github.com/amberbit/KarmaTracker/blob/master/spec/features/timesheet_spec.rb line 103  Should t Moment.js take timezone from guest? ,BartlomiejSkwira,closed,7,2013-10-22 09:38:52,2013-10-22 13:54:51,,,,0,1
13046,moment/moment,1204,Update https://packagist.org version,Please publish this updated repository to packagist to replace timrwood/moment ,Poyeyo,closed,7,2013-10-22 18:54:16,2013-10-23 16:10:53,,,,0,1
13045,moment/moment,1205,Fuzzy relative time,It would be great to be able to use moment to create relative times similar to Facebook.  http://relativetime.codeplex.com/SourceControl/latest RelativeTime/Formatter.cs ,andymac4182,closed,1,2013-10-22 22:33:02,2013-10-22 22:41:09,,,,0,1
13044,moment/moment,1206,Moment faroese language,,ragnar123,closed,1,2013-10-23 09:00:22,2013-10-23 19:28:06,,,,1,1
13043,moment/moment,1207,startOf  year   not localized,    javascript moment [2016] .startOf  year  .week   //   1 moment.lang  en gb   // week.doy = 4 moment [2016] .startOf  year  .week   //   53      Shouldn t be the second one result in  1  too? Or it s at least that  what i m semantically expect from the code. ,dodo,closed,1,2013-10-23 16:25:06,2013-10-23 17:05:30,,,,0,1
13042,moment/moment,1208,isDST   different for moment.utc   vs moment  .,We have noticed an edge case where we get false values from the isDST when we use the utc   option.   moment  05 01 2013  .isDST   = TRUE moment.utc  05 01 2013  .isDST   = FALSE  Timezones do tend to mess with my mind  am I missing something? should both these values return TRUE?  Thanks  Killer library ,d1b1,closed,2,2013-10-23 22:41:12,2013-10-23 22:53:00,,,,0,1
13041,moment/moment,1209,month getter zero indexed for some reason,I create a fresh moment object and set a specific timezone to it:  moment  .tz  some tz  .get  month    It ends up zero indexed even though I m not doing the utc version of a moment. Is this expected and just something I missed in the documentation? ,deeTEEcee,closed,3,2013-10-23 23:15:54,2013-10-24 00:09:03,,,,0,1
13040,moment/moment,1210,DST related tests are failing in southern hemisphere,http://momentjs.com/test/ results to  19961 tests passed. 60 failed.   Local timezone:  Pacific/Auckland  ,zerkms,closed,2,2013-10-24 01:05:49,2013-12-22 20:44:47,,,,0,1
13039,moment/moment,1211,component.json does not work with Component,Please remove moment.js from the  files  array and put it back in the  scripts  array.  Until this is fixed no one can install moment correctly using Component https://github.com/component/component ,btknorr,closed,2,2013-10-24 02:04:06,2013-10-24 02:18:07,,,,0,1
13038,moment/moment,1212,Fixed iso is_valid tests,In iso date time format time is always separated by date with  T   so make sure all tests that expect to go through the iso parser have a  T . ,ichernev,closed,1,2013-10-24 09:14:08,2013-10-24 14:51:28,,,,1,1
13037,moment/moment,1213,Allow arbitrary number of milliseconds in iso format,According to the standard  I m not sure actually   arbitrary number of subsecond precision digits can be specified. Read all of those and ignore everything after the third. This makes sure that iso formats actualy consume the whole string. ,ichernev,closed,0,2013-10-24 09:14:17,2013-10-24 14:51:11,,,,1,1
13036,moment/moment,1214,Moment pollute the global scope in Node.js,The moment object pollute the global scope in Node.js      javascript console.log typeof global.moment ; // print  undefined  var m = require  moment  ;         // Store the moment module in  m  console.log typeof global.moment ; // print  function    moment  is now accessible in the global scope       This is set in https://github.com/moment/moment/blob/develop/moment.js L2261 L2289 in the  Exposing Moment  section and  according to the comment line 2268  it seems to be intentional.  This is a best practice for Node.js userland modules to not pollute the global scope of the application when they are included.  I suggest to rewrite this condition to not execute the  makeGlobal  function when moment is used as a Node.js module. ,yannickcr,closed,14,2013-10-24 14:53:04,2013-10-27 19:26:48,,,,0,1
13035,moment/moment,1215,Welsh language support,Please can you add the Welsh translations? ,robgallen,closed,3,2013-10-24 15:59:31,2013-10-24 18:51:42,,,,1,1
13034,moment/moment,1216,adding one month to dates greater than 28 does not give correct value once February month is incremented,Hi Moment     I am reporting a bug difficult to describe but simple to reproduce in code so will just paste the reproduction here:       javascript xx = moment  1/31/2013   t  _i:  1/31/2013   _f: undefined  _l: undefined  _strict: undefined  _isUTC: false   xx.toDate   Thu Jan 31 2013 00:00:00 GMT 0500  EST  xx.add  M  1 .toDate   Thu Feb 28 2013 00:00:00 GMT 0500  EST  xx.add  M  1 .toDate   Thu Mar 28 2013 00:00:00 GMT 0400  EDT    When adding the one month  on any date greater than 28 [29 39 31]  once you add a month to February  you will end up on whatever the last date of February is    this is tricky once you are in a loop incrementing by month.       ,getachew,closed,2,2013-10-24 21:47:51,2013-10-25 16:51:08,,,,0,1
13033,moment/moment,1217,Fix regression re: support for mock dates., moment input   needs to determine if  input  is a date.  The mechanism for  doing this was changed in ab7824f1dcca22bdb8b73f7f98cf660305a73211 to deal with issue  1084  namely that in a node REPL  globals.Date  may not be the same  Date  used by moment.  However  this prevents users from changing  Date   for example by mocking it via something like [Timecop.js] https://github.com/jamesarosen/Timecop.js .  This commit makes date checking lenient enough to handle both cases. ,hjdivad,closed,3,2013-10-24 23:17:35,2013-10-25 01:44:32,,,,1,1
13032,moment/moment,1218,Fix/enhance/standardise: Node pollution  strict mode uglify/detect environment global context,Made changes to detect the global context of the environment  1179 Made changes to run in strict mode  1179 Made changes and added a config file to allow option not to pollute Node environment  1214 Standardise double quotes     to single quotes     which were most extensive in library Reverse strict comparisons of typeof statements to prevent accidental assignments Standardised undefined checks to use typeof strict comparisons ,Xotic750,closed,8,2013-10-25 20:22:06,2013-10-27 16:33:07,,,,1,1
13031,moment/moment,1219,Removed forEach from format tests,ie8 doesn t support  [].forEach   so replace it with a regular for loop. ,ichernev,closed,0,2013-10-26 05:59:28,2013-10-26 06:08:50,,,,1,1
13030,moment/moment,1220,Deprecate use of globally exported moment in case of AMD and CommonJS,This is discussed in  1214. If moment is exported as a global in AMD or CommonJS print a warning once the global is used. ,ichernev,closed,2,2013-10-26 07:11:54,2013-10-26 19:56:53,,,,1,1
13029,moment/moment,1221,Local global variable i,One thing that I noticed while going through moment  is the high possibility of bugs being introduced by the use of a local global variable  i   defined at the very beginning of moment around line 16 . You then have the subsequent use of variable  i  being redefined within other functions in moment. This leaves a high opportunity of a bug being introduced accidentally by a developer and even the possibility of bugs in older browsers that do not respect blocks or closures correctly. My suggestion would be to give local global variables a more meaningful name  something that is not just a single character. I would also suggest that within functions  the use of single character variables should be discouraged. Let closure compiler or uglify do the job of minifying. ,Xotic750,closed,5,2013-10-26 12:27:15,2013-10-27 16:35:51,,,,0,1
13028,moment/moment,1222,Introduce some  style  developer guides,I would like to suggest that some style/developer guides be built  implemented  and documented.  Currently  moment has a mix of styles going on which can be off putting to possible developers and can make things more difficult to follow.  I would suggest the following as a start:    [1] Variables must not be declared as a single variable but should be descriptive/meaningful in their context.     [2] Strings should be enclosed in either double or single quotes but not mixed throughout  except when minimising the use of escape sequences.  single quotes appear the most common presently  and should probably be the choice      [3] Strict in/equality comparisons must be used  already appears implemented      [4] Equality statements must  where possible  be constructed so that they throw an error rather than assign a value. Thereby reducing the chance of introducing bugs. Ie   Instead of this:  variable === 1  Do this:  1 === variable  Which prevents the possibility of:  variable = 1    [5] Use parenthesis around     and     coercion.   Instead of this:  x = a    b;  Do this:  x = a     b ;    [6] Blank lines improve readability by setting off sections of code that are logically related. Let the minifying process remove whitespace.   instead of this:      function x         var something = 1;     if  1 === something            something = 2;           return something;   function y         var somethingElse = 2;        Do this:      function x         var something = 1;      if  1 === something            something = 2;            return something;    function y         var somethingElse = 2;        These are just some starting suggestions that can be discussed. Some further considerations can be found at: http://javascript.crockford.com/code.html http://google styleguide.googlecode.com/svn/trunk/javascriptguide.xml http://contribute.jquery.org/style guide/js/ https://github.com/rwaldron/idiomatic.js/ http://dojotoolkit.org/community/styleGuide http://aloha editor.org/guides/style_guide.html https://npmjs.org/doc/coding style.html ,Xotic750,closed,5,2013-10-26 12:56:04,2013-10-27 16:37:15,,,,0,1
13027,moment/moment,1223,zh cn failing again,The tests for  zh cn  are failing agin. @zenozeng can you take a look? You can see the issue at https://travis ci.org/moment/moment/builds/13101647 ,icambron,closed,0,2013-10-27 02:49:43,2013-10-27 03:25:22,,,,0,1
13026,moment/moment,1224,update test/lang/zh cn.js  skip next week test if target is tomorrow,Fixes  1223 ,zenozeng,closed,2,2013-10-27 02:58:15,2013-10-27 03:25:22,,,,1,1
13025,moment/moment,1225,1 test failed. lang:zh cn:calendar next week  1655.1  ,    Client info      Date String   : Sun Oct 27 2013 11:05:54 GMT 0700  US Mountain Standard Time  Locale String : 10/27/2013 11:05:54 AM Offset        : 420 User Agent    : Mozilla/5.0  Windows NT 6.2; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/30.0.1599.101 Safari/537.36            lang:zh cn:calendar next week  1655.1   Today   7 days beginning of day      javascript // Expected      12   // Actual       12        12    ==       12        ,mj1856,closed,4,2013-10-27 18:11:49,2013-11-22 18:34:16,,Unit Test Failed,,,0,1
13024,moment/moment,1226,7 tests failed. lang:el:parse  525.23  lang:el:parse  525.39  lang:el:parse  525.47  lang:el:parse  525.55  lang:el:parse  525.63  lang:el:parse  525.87  lang:zh cn:calendar next week  1655.1  ,    Client info      Date String   : Sun Oct 27 14:40:25 EDT 2013 Locale String : Sunday  October 27  2013 2:40:25 PM Offset        : 300 User Agent    : Mozilla/4.0  compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; SLCC1; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729             lang:el:parse  525.23           should be month 3      javascript // Expected 2 // Actual   9 9 == 2            lang:el:parse  525.39         should be month 5      javascript // Expected 4 // Actual   9 9 == 4            lang:el:parse  525.47           should be month 6      javascript // Expected 5 // Actual   9 9 == 5            lang:el:parse  525.55           should be month 7      javascript // Expected 6 // Actual   9 9 == 6            lang:el:parse  525.63             should be month 8      javascript // Expected 7 // Actual   9 9 == 7            lang: ,mj1856,closed,6,2013-10-27 18:41:59,2014-02-03 06:27:50,,Unit Test Failed,,,0,1
13023,moment/moment,1227,129 tests failed. preparse_postformat:calendar day  223.5  ... and many others,Running on Windows 8  time zone set to almost any European zone  London  Paris  several others . All browsers  IE10  FF24  Chrome 30  are failing with multiple errors starting with:     preparse_postformat:calendar day  223.3   Now plus 1 hour      javascript // Expected Today at  :   AM // Actual   Today at @:   AM  Today at @:   AM  ==  Today at  :   AM          Then followed by these errors in _every_ language.   showing the english ones :     lang:en:calendar day  622.3   Now plus 1 hour      javascript // Expected Today at 3:00 AM // Actual   Today at 2:00 AM  Today at 2:00 AM  ==  Today at 3:00 AM             lang:en:calendar next week  623.2   Today   2 days beginning of day      javascript // Expected Tuesday at 12:00 AM // Actual   Tomorrow at 12:00 AM  Tomorrow at 12:00 AM  ==  Tuesday at 12:00 AM         ,mj1856,closed,4,2013-10-27 19:27:09,2013-11-26 21:25:10,,Unit Test Failed,,,0,1
13022,moment/moment,1228,61 tests failed. lang:ar ma:calendar last week  306.3  lang:ar:calendar last week  328.3  lang:bg:calendar last week  350.3  lang:br:calendar last week  372.3  lang:bs:calendar last week  387.3  lang:ca:calendar last week  408.3  lang:cs:calendar last wee,    Client info      Date String   : Mon Oct 28 2013 11:24:14 GMT 0100 Locale String : den 28 oktober 2013 11:24:14 Offset        :  60 User Agent    : Mozilla/5.0  Windows NT 6.2; WOW64; rv:24.0  Gecko/20100101 Firefox/24.0            lang:ar ma:calendar last week  306.3   Today   2 days end of day      javascript // Expected                  23:59 // Actual                  23:59                 23:59  ==                   23:59             lang:ar:calendar last week  328.3   Today   2 days end of day      javascript // Expected                  23:59 // Actual                  23:59                 23:59  ==                   23:59             lang:bg:calendar last week  350.3   Today   2 days end of day      javascript // Expected                       23:59 // Actual           23:59          23:59  ==                        23:59             lang:br:calendar last week  372.3   Today   2 days end of day      javascript // Expected Sadorn paset da 11e59 PM // Actual   Dec h da 11e59 PM  Dec h da 11e59 PM  ==  Sadorn paset da 11e59 PM             lang:bs:calendar last week  387.3   Today   2 days end of day      javascript // Expected pro le subote u 23:59 // Actual   ju er u 23:59  ju er u 23:59  ==  pro le subote u 23:59             lang:ca:calendar last week  408.3   Today   2 days end of day      javascript // Expected el Dissabte passat a les 23:59 // Actual   ahir a les 23:59  ahir a les 23:59  ==  el Dissabte passat a les 23:59             lang:cs:calendar last week  431.3   Today   2 days end of day      javascript // Expected minulou sobotu v 23:59 // Actual   v era v 23:59  v era v 23:59  ==  minulou sobotu v 23:59             lang:cv:calendar last week  454.3   Today   2 days end of day      javascript // Expected                23:59         // Actual        23:59               23:59          ==                 23:59                     lang:cy:same last week  475.3   Today   2 days end of day      javascript // Expected Dydd Sadwrn diwethaf am 23:59 // Actual   Ddoe am 23:59  Ddoe am 23:59  ==  Dydd Sadwrn diwethaf am 23:59             lang:de:calendar last week  514.3   Today   2 days end of day      javascript // Expected letzten Samstag um 23:59 Uhr // Actual   Gestern um 23:59 Uhr  Gestern um 23:59 Uhr  ==  letzten Samstag um 23:59 Uhr             lang:el:calendar last week  536.3   Today   2 days end of day      javascript // Expected                              11:59    // Actual             11:59               11:59     ==                               11:59                lang:en au:calendar last week  558.3   Today   2 days end of day      javascript // Expected Last Saturday at 11:59 PM // Actual   Yesterday at 11:59 PM  Yesterday at 11:59 PM  ==  Last Saturday at 11:59 PM             lang:en ca:calendar last week  580.3   Today   2 days end of day      javascript // Expected Last Saturday at 11:59 PM // Actual   Yesterday at 11:59 PM  Yesterday at 11:59 PM  ==  Last Saturday at 11:59 PM             lang:en gb:calendar last week  602.3   Today   2 days end of day      javascript // Expected Last Saturday at 23:59 // Actual   Yesterday at 23:59  Yesterday at 23:59  ==  Last Saturday at 23:59             lang:en:calendar last week  624.3   Today   2 days end of day      javascript // Expected Last Saturday at 11:59 PM // Actual   Yesterday at 11:59 PM  Yesterday at 11:59 PM  ==  Last Saturday at 11:59 PM             lang:eo:calendar last week  645.3   Today   2 days end of day      javascript // Expected pasinta Sabato je 23:59 // Actual   Hiera  je 23:59  Hiera  je 23:59  ==  pasinta Sabato je 23:59             lang:es:calendar last week  667.3   Today   2 days end of day      javascript // Expected el s bado pasado a las 23:59 // Actual   ayer a las 23:59  ayer a las 23:59  ==  el s bado pasado a las 23:59             lang:et:calendar last week  689.3   Today   2 days end of day      javascript // Expected Eelmine laup ev 23:59 // Actual   Eile  23:59  Eile  23:59  ==  Eelmine laup ev 23:59             lang:eu:calendar last week  711.3   Today   2 days end of day      javascript // Expected aurreko larunbata 23:59etan // Actual   atzo 23:59etan  atzo 23:59etan  ==  aurreko larunbata 23:59etan             lang:fa:calendar last week  733.3   Today   2 days end of day      javascript // Expected                 :   // Actual                :                 :    ==                  :               lang:fi:calendar last week  755.3   today   2 days end of day      javascript // Expected viime lauantaina klo 23.59 // Actual   eilen klo 23.59  eilen klo 23.59  ==  viime lauantaina klo 23.59             lang:fr ca:same last week  794.3   Today   2 days end of day      javascript // Expected samedi dernier   23:59 // Actual   Hier   23:59  Hier   23:59  ==  samedi dernier   23:59             lang:fr:same last week  815.3   Today   2 days end of day      javascript // Expected samedi dernier   23:59 // Actual   Hier   23:59  Hier   23:59  ==  samedi dernier   23:59             lang:gl:calendar last week  836.3   Today   2 days end of day      javascript // Expected o S bado pasado  s 23:59 // Actual   onte   23:59  onte   23:59  ==  o S bado pasado  s 23:59             lang:he:calendar last week  858.3   Today   2 days end of day      javascript // Expected                      23:59 // Actual           23:59          23:59  ==                       23:59             lang:hi:calendar last week  880.3   Today   2 days end of day      javascript // Expected                     :       // Actual            :                 :        ==                      :                   lang:hr:calendar last week  903.3   Today   2 days end of day      javascript // Expected pro le subote u 23:59 // Actual   ju er u 23:59  ju er u 23:59  ==  pro le subote u 23:59             lang:hu:calendar last week  925.3   today   2 days end of day      javascript // Expected m lt szombaton 23:59 kor // Actual   tegnap 23:59 kor  tegnap 23:59 kor  ==  m lt szombaton 23:59 kor             lang:id:calendar last week  946.3   Today   2 days end of day      javascript // Expected Sabtu lalu pukul 23.59 // Actual   Kemarin pukul 23.59  Kemarin pukul 23.59  ==  Sabtu lalu pukul 23.59             lang:is:calendar last week  968.3   Today   2 days end of day      javascript // Expected s  asta laugardagur kl. 23:59 // Actual     g r kl. 23:59    g r kl. 23:59  ==  s  asta laugardagur kl. 23:59             lang:it:calendar last week  989.3   Today   2 days end of day      javascript // Expected lo scorso Sabato alle 23:59 // Actual   Ieri alle 23:59  Ieri alle 23:59  ==  lo scorso Sabato alle 23:59             lang:ja:calendar last week  1010.3   Today   2 days end of day      javascript // Expected         11 59  // Actual        11 59        11 59   ==          11 59              lang:ka:calendar last week  1032.3          2                         javascript // Expected             11:59 PM    // Actual         11:59 PM           11:59 PM     ==              11:59 PM                lang:kr:calendar last week  1054.3   Today   2 days end of day      javascript // Expected            11  59  // Actual         11  59         11  59   ==             11  59              lang:lt:calendar last week  1076.3   Today   2 days end of day      javascript // Expected Pra jus   e tadienis 23:59 // Actual   Vakar 23:59  Vakar 23:59  ==  Pra jus   e tadienis 23:59             lang:lv:calendar last week  1098.3   Today   2 days end of day      javascript // Expected Pag ju   sestdiena pulksten 23:59 // Actual   Vakar pulksten 23:59  Vakar pulksten 23:59  ==  Pag ju   sestdiena pulksten 23:59             lang:ml:calendar last week  1120.3   Today   2 days end of day      javascript // Expected                         11:59     // Actual                 11:59                    11:59      ==                          11:59                 lang:mr:calendar last week  1143.3   Today   2 days end of day      javascript // Expected                        :         // Actual                :                       :          ==                         :                     lang:ms my:calendar last week  1166.3   Hari ini   2 hari tamat hari      javascript // Expected Sabtu lepas pukul 23.59 // Actual   Kelmarin pukul 23.59  Kelmarin pukul 23.59  ==  Sabtu lepas pukul 23.59             lang:nb:calendar last week  1188.3   Today   2 days end of day      javascript // Expected forrige l rdag kl. 23.59 // Actual   i g r kl. 23.59  i g r kl. 23.59  ==  forrige l rdag kl. 23.59             lang:ne:calendar last week  1210.3   Today   2 days end of day      javascript // Expected                       :       // Actual                 :                      :        ==                        :                   lang:nl:calendar last week  1233.3   Today   2 days end of day      javascript // Expected afgelopen zaterdag om 23:59 // Actual   gisteren om 23:59  gisteren om 23:59  ==  afgelopen zaterdag om 23:59             lang:nn:calendar last week  1256.3   Today   2 days end of day      javascript // Expected F reg ende laurdag klokka 23:59 // Actual   I g r klokka 23:59  I g r klokka 23:59  ==  F reg ende laurdag klokka 23:59             lang:pl:calendar last week  1278.3   Today   2 days end of day      javascript // Expected W zesz   sobot  o 23:59 // Actual   Wczoraj o 23:59  Wczoraj o 23:59  ==  W zesz   sobot  o 23:59             lang:pt br:calendar last week  1299.3   Today   2 days end of day      javascript // Expected  ltimo S bado  s 23:59 // Actual   Ontem  s 23:59  Ontem  s 23:59  ==   ltimo S bado  s 23:59             lang:pt:calendar last week  1320.3   Today   2 days end of day      javascript // Expected  ltimo S bado  s 23:59 // Actual   Ontem  s 23:59  Ontem  s 23:59  ==   ltimo S bado  s 23:59             lang:ro:calendar last week  1342.3   Today   2 days end of day      javascript // Expected fosta S mb t  la 23:59 // Actual   ieri la 23:59  ieri la 23:59  ==  fosta S mb t  la 23:59             lang:ru:calendar last week  1369.3   Today   2 days end of day      javascript // Expected                     23:59 // Actual           23:59          23:59  ==                      23:59             lang:sk:calendar last week  1392.3   Today   2 days end of day      javascript // Expected minul  sobotu o 23:59 // Actual   v era o 23:59  v era o 23:59  ==  minul  sobotu o 23:59             lang:sl:calendar last week  1415.3   Today   2 days end of day      javascript // Expected prej nja sobota ob 23:59 // Actual   v eraj ob 23:59  v eraj ob 23:59  ==  prej nja sobota ob 23:59             lang:sq:calendar last week  1437.3   Today   2 days end of day      javascript // Expected E Shtun  e kaluar n  23:59 // Actual   Dje n  23:59  Dje n  23:59  ==  E Shtun  e kaluar n  23:59             lang:sv:calendar last week  1459.3   Today   2 days end of day      javascript // Expected F rra l rdagen 23:59 // Actual   Ig r 23:59  Ig r 23:59  ==  F rra l rdagen 23:59             lang:th:calendar last week  1480.3   Today   2 days end of day      javascript // Expected                      23        59      // Actual                    23        59                        23        59       ==                       23        59                  lang:tl ph:same last week  1501.3   Today   2 days end of day      javascript // Expected Sabado huling linggo 23:59 // Actual   Kahapon sa 23:59  Kahapon sa 23:59  ==  Sabado huling linggo 23:59             lang:tr:calendar last week  1523.3   Today   2 days end of day      javascript // Expected ge en hafta Cumartesi saat 23:59 // Actual   d n 23:59  d n 23:59  ==  ge en hafta Cumartesi saat 23:59             lang:tzm la:calendar last week  1545.3   Today   2 days end of day      javascript // Expected asi yas g 23:59 // Actual   assant g 23:59  assant g 23:59  ==  asi yas g 23:59             lang:tzm:calendar last week  1567.3   Today   2 days end of day      javascript // Expected           23:59 // Actual           23:59          23:59  ==            23:59             lang:uk:calendar last week  1590.3   Today   2 days end of day      javascript // Expected                  23:59 // Actual           23:59          23:59  ==                   23:59             lang:uz:calendar last week  1612.3   Today   2 days end of day      javascript // Expected                       23:59    // Actual             23:59               23:59     ==                        23:59                lang:vn:calendar last week  1634.3   Today   2 days end of day      javascript // Expected th  b y tu n r i l c 23:59 // Actual   H m qua l c 23:59  H m qua l c 23:59  ==  th  b y tu n r i l c 23:59             lang:zh tw:calendar last week  1678.3   Today   2 days end of day      javascript // Expected       11 59 // Actual       11 59      11 59  ==        11 59      ,karl-sjogren,closed,3,2013-10-28 10:27:49,2013-11-27 01:23:05,,Unit Test Failed,,,0,1
13021,moment/moment,1229,Time Offset of  Asia/Tehran  is wrong,Timezone  Asia/Tehran  is  03:30 which should have time offset  0330 Actually  all timezones with  / xx:30 have the same issue. Check       moment  .tz  Asia/Tehran  .format  ZZ     0350       The result of two statements below should be the same  but there 20 min different.      var now = moment  .tz  Asia/Tehran  .format  YYYY MM DD HH:mm ZZ   console.log now ;  2013 10 28 14:26  0350   var another_now = moment now .tz  Asia/Tehran  .format  YYYY MM DD HH:mm ZZ   console.log another_now ;  2013 10 28 14:06  0350      ,morningbzy,closed,1,2013-10-28 11:01:52,2013-10-28 16:00:36,,,,0,1
13020,moment/moment,1230,61 tests failed. lang:ar ma:calendar last week  306.3  lang:ar:calendar last week  328.3  lang:bg:calendar last week  350.3  lang:br:calendar last week  372.3  lang:bs:calendar last week  387.3  lang:ca:calendar last week  408.3  lang:cs:calendar last wee,    Client info      Date String   : Mon Oct 28 2013 15:13:09 GMT 0100  Mitteleurop ische Zeit  Locale String : 28.10.2013 15:13:09 Offset        :  60 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/30.0.1599.101 Safari/537.36            lang:ar ma:calendar last week  306.3   Today   2 days end of day      javascript // Expected                  23:59 // Actual                  23:59                 23:59  ==                   23:59             lang:ar:calendar last week  328.3   Today   2 days end of day      javascript // Expected                  23:59 // Actual                  23:59                 23:59  ==                   23:59             lang:bg:calendar last week  350.3   Today   2 days end of day      javascript // Expected                       23:59 // Actual           23:59          23:59  ==                        23:59             lang:br:calendar last week  372.3   Today   2 days end of day      javascript // Expected Sadorn paset da 11e59 PM // Actual   Dec     ,olivvv,closed,1,2013-10-28 14:13:33,2013-10-28 16:01:52,,Unit Test Failed,,,0,1
13019,moment/moment,1231,Adding day across DST fails,Calling  .add  days   1   across the DST transition causes the date to not change at all:      var d = moment  2013 10 19T00:00:00   d.format   // 2013 10 19T00:00:00 03:00 d.add  days   1  d.format   // 2013 10 19T00:00:00 03:00      But this works:      d.add  hours   24  d.format   // 2013 10 20T01:00:00 02:00      Local time BRST  GMT 3 / GMT 2 .  Seen in dangrossman/bootstrap daterangepicker/issues/176  might be related to  1161 and  1210 ,ricardobeat,closed,7,2013-10-28 19:32:06,2013-10-29 21:11:42,,,,0,1
13018,moment/moment,1232,New getter/setter: moment  .weekOfMonth  ,It would be convenient to have a new getter/setter called  weekOfMonth   . I ve been maintaining an [answer] http://stackoverflow.com/a/9608670/221867  on StackOverflow for a while now on how to calculate a date s week of month using vanilla JavaScript. However  it would be nice if  moment s had this property.  As far as implementation goes  mine is reasonably flexible. If you want to remove the flexibility in favor of consistency with other methods  I m perfectly fine with that. If one were to use the setter  I would think it could mean two different things: 1. Start of week specified 2. Maintain the day of week and time of day but just adjust the date  I would think you d go with option 2; it seems more consistent with other setters.  I m not sure what out of bounds values should indicate. Say you pass in  7 ... does that mean the 1st week of the next month? Or should an error be thrown?  I m also indifferent on the setter behavior    I ll let the experts agree on a decision  :   ,OlsonDev,closed,7,2013-10-28 21:19:28,2016-04-12 07:10:53,,todo,,,0,1
13017,moment/moment,1233,Albanian: PD/MD instead of AM/PM,From http://www.microsoft.com/resources/msdn/goglobal/default.mspx?submitted=041C OS=Windows 207 AM symbol:  PD PM symbol:  MD  Java formats the time also using MD instead of PM. ,DamianFekete,closed,9,2013-10-29 11:10:24,2014-02-03 06:02:22,,Language,,,0,1
13016,moment/moment,1234,Spanish: don t add . after short month/day names,A format   DD MMM YYYY   for Spanish will translate in   29 nov. 2013   but in   29 nov 2013   in Windows  and Java .      monthsShort :  ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic. .split  _    weekdaysShort :  dom._lun._mar._mi ._jue._vie._s b. .split  _        ,DamianFekete,closed,15,2013-10-29 12:33:59,2014-02-03 06:25:28,,Language,,,0,1
13015,moment/moment,1235,Romanian: months/days should start with lowercase  etc,Lowercase for months  monthsShort and weekdays. Proper format for longDateFormat  we don t write 29/10/2013  but instead 29.10.2013       months :  ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie .split  _    monthsShort :  ian_feb_mar_apr_mai_iun_iul_aug_sep_oct_noi_dec .split  _    weekdays :  duminic _luni_mar i_miercuri_joi_vineri_s mb t  .split  _     L :  DD.MM.YYYY        weekdays: Mar i instead of Mar i. There is a small visual difference  but there is one: https://en.wikipedia.org/wiki/Romanian_alphabet Comma below_.28.C8.99_and_.C8.9B.29_versus_cedilla_.28.C5.9F_and_.C5.A3.29 ,DamianFekete,closed,5,2013-10-29 13:20:40,2013-11-02 16:34:56,,,,0,1
13014,moment/moment,1236,isValid returns true when it shouldn t,Testing for stupid things people might do. This date  10/1asdfsdf/2013 2:49 PM   while using a format string  the validation returns true. [See this gist] https://gist.github.com/Eonasdan/7220880  ,Eonasdan,closed,2,2013-10-29 19:55:01,2013-10-29 20:48:04,,,,0,1
13013,moment/moment,1237,Does not work with QUnit.,When using moment.js in QUnit tests  hasModule resolves  true  and triggers makeGlobal deprecation warning. The hasModule definition on line 30 should be more strict if just looking for nodeJS. ,jgerigmeyer,closed,5,2013-10-29 23:01:49,2013-11-13 08:05:02,,,,0,1
13012,moment/moment,1238,Add specific check for  require  in hasModule check.,When using moment.js in QUnit tests  hasModule resolves true and triggers makeGlobal deprecation warning. This pull request ensures that the hasModule check on line 30 only resolves as truthy when using an actual module pattern with a require fn. ,jgerigmeyer,closed,1,2013-10-30 00:03:05,2013-10-31 17:06:46,,,,1,1
13011,moment/moment,1239,Since 2.4.0 the global  moment  in CommonJS does not have static functions,Since  1214  in CommonJS environment  global  moment  does not have static functions anymore such as  isMoment .  For instance in node.js:      js > var m = require  moment   undefined > m.isMoment  ffp   false > moment.isMoment  ff   TypeError: Object function                      if   warned    console    console.warn                        warned = true;                     console.warn                               Accessing Moment through the global scope is                                  deprecated  and will be removed in an upcoming                                  release.  ;                                   return local_moment.apply null  arguments ;               has no method  isMoment      at repl:1:9     at REPLServer.self.eval  repl.js:110:21      at Interface.<anonymous>  repl.js:239:12      at Interface.EventEmitter.emit  events.js:95:17      at Interface._onLine  readline.js:202:10      at Interface._line  readline.js:531:8      at Interface._ttyWrite  readline.js:760:14      at ReadStream.onkeypress  readline.js:99:10      at ReadStream.EventEmitter.emit  events.js:98:17      at emitKey  readline.js:1095:      That applies also to utc  unix  duration  version  defaultFormat  updateOffset  lang  langData  isMoment  isDuration  weekdaysMin  weekdaysShort  weekdays  monthsShort  months  normalizeUnits  invalid  parseZone  and tz.  Either we fully drop support  either we do full support but let s not do partial support. ,alexstrat,closed,4,2013-10-30 10:18:59,2013-11-22 18:22:53,,Bug,,,0,1
13010,moment/moment,1240,[FIX] Albanian translation,There were two small problems with the Albanian translation:   disa seconda  =>  disa sekonda      d minutea  =>   d minuta   :  ,yannickl,closed,4,2013-10-30 13:27:53,2013-10-31 17:04:40,,,,1,1
13009,moment/moment,1241,Collaboration with Globalize on CLDR?,This is not a code issue  but StackOverflow is inappropriate for this request and I didn t yet want to email committers individually.  I m on the jQuery Team  and we re working on a project called Globalize. Globalize has a lot of overlap with Moment.js. One major difference is the source for locales. As far as I can tell  Moment builds on user contributed translations  by now 63 in total. Globalize started by importing locale data from .Net  giving as about 350  cultures   naming is hard... . So far not too interesting.  We re currently in the process of [moving to CLDR] https://github.com/jquery/globalize/pull/172   using their database of locales as the new base for Globalize. This requires a lot of groundwork to make the data usable in JavaScript. We re also reporting back issues to them  like missing documentation.  I ve had a bit of communication with Tim Wood in the past  see  315  about using CLDR. That was a year ago  since then it looks like the project is now standing on more shoulders  so hopefully adopting CLDR  along with some form of collaboration with the jQuery Team is something worth revisiting.  On our end  @rxaviers and @scottgonzalez are the other two people most involved. We re generally around on IRC  Freenode/ jqueryui dev  for some ad hoc discussions. I can also make introductions per email  if that is preferred over this issue tracker  my email address is in my github profile . ,jzaefferer,open,16,2013-10-31 13:38:27,0000-00-00 00:00:00,,New Feature,,,0,1
13008,moment/moment,1242,bug with adding the result of multiple Duration instances addition to the Moment instance,Google Chrome Version 30.0.1599.101  http://jsfiddle.net/qw4n7y/ZZ9qW/ ,qw4n7y,closed,1,2013-10-31 15:22:33,2013-10-31 19:28:09,,,,0,1
13007,moment/moment,1243,Fixed cloning a modified duration,Storing the _input for creating a duration doesn t work for cloning when the original duration is modified  because input no longer corresponds to the new duration. Instead use the ms  days and month values which uniquely identify a duration.  This also happens to fix  1242 ,ichernev,closed,1,2013-10-31 18:32:56,2013-10-31 19:28:09,,,,1,1
13006,moment/moment,1244,fromNow   and other display methods broken in IE 8 ,    javascript var date = moment new Date   ; console.log date.fromNow   ;      Chrome  FF  Safari  IE9 and IE10 yields  a few seconds ago   IE 8 yields  1 years ago   In fact  any date value seems to produce the same  1 years ago  result in IE 8. ,toml0006,closed,1,2013-11-01 15:57:35,2013-11-01 16:08:08,,,,0,1
13005,moment/moment,1245,Strange encoding errors when using  MMM  and  MMMM  format specifiers on certain pages,I haven t noticed this on any of my personal sites  but I _have_ seen it on your own documentation site  where I like to open up the console and play with the APIs while I m reading them.  Steps to reproduce: 1. Go to http://momentjs.com/docs/ 2. Open the browser console 3. Enter  moment  .format  MMM    4. Then try  moment  .format  MMMM     Expected results:    Nov     November    Actual results:    11             Tested in Chrome 30 and Firefox 26. ,bstrie,closed,1,2013-11-01 21:47:44,2013-11-02 01:18:39,,,,0,1
13004,moment/moment,1246,Romanian fixes,Previous discussion here: https://github.com/moment/moment/issues/1235 ,DamianFekete,closed,2,2013-11-01 23:02:47,2013-11-02 16:34:07,,,,1,1
13003,moment/moment,1247,Added Luxembourgish  lb ,Ready to merge ,mweimerskirch,closed,3,2013-11-02 13:52:40,2013-11-02 21:14:06,,,,1,1
13002,moment/moment,1248,Wrong character in  German  translation,Hi   in the german translation of the month  march  there are incorrect characters.  Current  2.4.0  : return a.lang  de     months:  Januar_Februar_M  rz  Correct would be : return a.lang  de     months:  Januar_Februar_M rz  Unicode of the character     would be  u00e4 ,nhebling,closed,6,2013-11-03 00:21:31,2013-11-03 23:20:24,,,,0,1
13001,moment/moment,1249,63 tests failed. lang:ar ma:calendar next week  305.2  lang:ar:calendar next week  327.2  lang:bg:calendar next week  349.2  lang:br:calendar next week  371.2  lang:bs:calendar next week  386.2  lang:ca:calendar next week  407.2  lang:cs:calendar next wee,    Client info      Date String   : Sun Nov 03 2013 19:42:56 GMT 0800  PST  Locale String : 11/3/2013 7:42:56 PM Offset        : 480 User Agent    : Mozilla/5.0  X11; Linux i686  AppleWebKit/537.36  KHTML  like Gecko  Chrome/30.0.1599.114 Safari/537.36            lang:ar ma:calendar next week  305.2   Today   2 days beginning of day      javascript // Expected                     00:00 // Actual                  00:00                 00:00  ==                      00:00             lang:ar:calendar next week  327.2   Today   2 days beginning of day      javascript // Expected                     00:00 // Actual                  00:00                 00:00  ==                      00:00             lang:bg:calendar next week  349.2   Today   2 days beginning of day      javascript // Expected           0:00 // Actual          0:00         0:00  ==            0:00             lang:br:calendar next week  371.2   Today   2 days beginning of day      javascript // Expected Meurzh da 12e00 AM // Actual   Warc hoazh da 12e00 AM  Warc hoazh da 12e00 AM  ==  Meurzh da 12e00 AM             lang:bs:calendar next week  386.2   Today   2 days beginning of day      javascript // Expected u utorak u 0:00 // Actual   sutra u 0:00  sutra u 0:00  ==  u utorak u 0:00             lang:ca:calendar next week  407.2   Today   2 days beginning of day      javascript // Expected Dimarts a les 0:00 // Actual   dem  a les 0:00  dem  a les 0:00  ==  Dimarts a les 0:00             lang:cs:calendar next week  430.2   Today   2 days beginning of day      javascript // Expected v  ter  v 0:00 // Actual   z tra v 0:00  z tra v 0:00  ==  v  ter  v 0:00             lang:cv:calendar next week  453.2   Today   2 days beginning of day      javascript // Expected                 00:00         // Actual        00:00               00:00          ==                  00:00                     lang:cy:same next week  474.2   Today   2 days beginning of day      javascript // Expected Dydd Mawrth am 00:00 // Actual   Yfory am 00:00  Yfory am 00:00  ==  Dydd Mawrth am 00:00             lang:de:calendar next week  513.2   Today   2 days beginning of day      javascript // Expected Dienstag um 0:00 Uhr // Actual   Morgen um 0:00 Uhr  Morgen um 0:00 Uhr  ==  Dienstag um 0:00 Uhr             lang:el:calendar next week  535.2   Today   2 days beginning of day      javascript // Expected            12:00    // Actual              12:00                12:00     ==             12:00                lang:en au:calendar next week  557.2   Today   2 days beginning of day      javascript // Expected Tuesday at 12:00 AM // Actual   Tomorrow at 12:00 AM  Tomorrow at 12:00 AM  ==  Tuesday at 12:00 AM             lang:en ca:calendar next week  579.2   Today   2 days beginning of day      javascript // Expected Tuesday at 12:00 AM // Actual   Tomorrow at 12:00 AM  Tomorrow at 12:00 AM  ==  Tuesday at 12:00 AM             lang:en gb:calendar next week  601.2   Today   2 days beginning of day      javascript // Expected Tuesday at 00:00 // Actual   Tomorrow at 00:00  Tomorrow at 00:00  ==  Tuesday at 00:00             lang:en:calendar next week  623.2   Today   2 days beginning of day      javascript // Expected Tuesday at 12:00 AM // Actual   Tomorrow at 12:00 AM  Tomorrow at 12:00 AM  ==  Tuesday at 12:00 AM             lang:eo:calendar next week  644.2   Today   2 days beginning of day      javascript // Expected Mardo je 00:00 // Actual   Morga  je 00:00  Morga  je 00:00  ==  Mardo je 00:00             lang:es:calendar next week  666.2   Today   2 days beginning of day      javascript // Expected martes a las 0:00 // Actual   ma ana a las 0:00  ma ana a las 0:00  ==  martes a las 0:00             lang:et:calendar next week  688.2   Today   2 days beginning of day      javascript // Expected J rgmine teisip ev 0:00 // Actual   Homme  0:00  Homme  0:00  ==  J rgmine teisip ev 0:00             lang:eu:calendar next week  710.2   Today   2 days beginning of day      javascript // Expected asteartea 00:00etan // Actual   bihar 00:00etan  bihar 00:00etan  ==  asteartea 00:00etan             lang:fa:calendar next week  732.2   Today   2 days beginning of day      javascript // Expected                :   // Actual               :                :    ==                 :               lang:fi:calendar next week  754.2   today   2 days beginning of day      javascript // Expected tiistai klo 00.00 // Actual   huomenna klo 00.00  huomenna klo 00.00  ==  tiistai klo 00.00             lang:fr ca:same next week  793.2   Today   2 days beginning of day      javascript // Expected mardi   00:00 // Actual   Demain   00:00  Demain   00:00  ==  mardi   00:00             lang:fr:same next week  814.2   Today   2 days beginning of day      javascript // Expected mardi   00:00 // Actual   Demain   00:00  Demain   00:00  ==  mardi   00:00             lang:gl:calendar next week  835.2   Today   2 days beginning of day      javascript // Expected Martes  s 0:00 // Actual   ma    s 0:00  ma    s 0:00  ==  Martes  s 0:00             lang:he:calendar next week  857.2   Today   2 days beginning of day      javascript // Expected            00:00 // Actual         00:00        00:00  ==             00:00             lang:hi:calendar next week  879.2   Today   2 days beginning of day      javascript // Expected                :       // Actual            :                 :        ==                 :                   lang:hr:calendar next week  902.2   Today   2 days beginning of day      javascript // Expected u utorak u 0:00 // Actual   sutra u 0:00  sutra u 0:00  ==  u utorak u 0:00             lang:hu:calendar next week  924.2   today   2 days beginning of day      javascript // Expected kedden 0:00 kor // Actual   holnap 0:00 kor  holnap 0:00 kor  ==  kedden 0:00 kor             lang:id:calendar next week  945.2   Today   2 days beginning of day      javascript // Expected Selasa pukul 00.00 // Actual   Besok pukul 00.00  Besok pukul 00.00  ==  Selasa pukul 00.00             lang:is:calendar next week  967.2   Today   2 days beginning of day      javascript // Expected  ri judagur kl. 0:00 // Actual     morgun kl. 0:00    morgun kl. 0:00  ==   ri judagur kl. 0:00             lang:it:calendar next week  988.2   Today   2 days beginning of day      javascript // Expected Marted  alle 00:00 // Actual   Domani alle 00:00  Domani alle 00:00  ==  Marted  alle 00:00             lang:ja:calendar next week  1009.2   Today   2 days beginning of day      javascript // Expected         12 0  // Actual        12 0        12 0   ==          12 0              lang:ka:calendar next week  1031.2          2                          javascript // Expected                  12:00 AM    // Actual        12:00 AM          12:00 AM     ==                   12:00 AM                lang:kr:calendar next week  1053.2   Today   2 days beginning of day      javascript // Expected        12  00  // Actual         12  00         12  00   ==         12  00              lang:lt:calendar next week  1075.2   Today   2 days beginning of day      javascript // Expected antradienis 00:00 // Actual   Rytoj 00:00  Rytoj 00:00  ==  antradienis 00:00             lang:lv:calendar next week  1097.2   Today   2 days beginning of day      javascript // Expected otrdiena pulksten 00:00 // Actual   R t pulksten 00:00  R t pulksten 00:00  ==  otrdiena pulksten 00:00             lang:ml:calendar next week  1119.2   Today   2 days beginning of day      javascript // Expected                   12:00     // Actual               12:00                  12:00      ==                    12:00                 lang:mr:calendar next week  1142.2   Today   2 days beginning of day      javascript // Expected                   :         // Actual                  :                         :          ==                    :                     lang:ms my:calendar next week  1165.2   Hari ini   2 hari permulaan hari      javascript // Expected Selasa pukul 00.00 // Actual   Esok pukul 00.00  Esok pukul 00.00  ==  Selasa pukul 00.00             lang:nb:calendar next week  1187.2   Today   2 days beginning of day      javascript // Expected tirsdag kl. 0.00 // Actual   i morgen kl. 0.00  i morgen kl. 0.00  ==  tirsdag kl. 0.00             lang:ne:calendar next week  1209.2   Today   2 days beginning of day      javascript // Expected                          :       // Actual                 :                      :        ==                           :                   lang:nl:calendar next week  1232.2   Today   2 days beginning of day      javascript // Expected dinsdag om 00:00 // Actual   morgen om 00:00  morgen om 00:00  ==  dinsdag om 00:00             lang:nn:calendar next week  1255.2   Today   2 days beginning of day      javascript // Expected tysdag klokka 00:00 // Actual   I morgon klokka 00:00  I morgon klokka 00:00  ==  tysdag klokka 00:00             lang:pl:calendar next week  1277.2   Today   2 days beginning of day      javascript // Expected W wtorek o 00:00 // Actual   Jutro o 00:00  Jutro o 00:00  ==  W wtorek o 00:00             lang:pt br:calendar next week  1298.2   Today   2 days beginning of day      javascript // Expected Ter a feira  s 00:00 // Actual   Amanh   s 00:00  Amanh   s 00:00  ==  Ter a feira  s 00:00             lang:pt:calendar next week  1319.2   Today   2 days beginning of day      javascript // Expected Ter a feira  s 00:00 // Actual   Amanh   s 00:00  Amanh   s 00:00  ==  Ter a feira  s 00:00             lang:ro:calendar next week  1341.2   Today   2 days beginning of day      javascript // Expected Mar i la 0:00 // Actual   m ine la 0:00  m ine la 0:00  ==  Mar i la 0:00             lang:ru:calendar next week  1368.2   Today   2 days beginning of day      javascript // Expected              00:00 // Actual            00:00           00:00  ==               00:00             lang:sk:calendar next week  1391.2   Today   2 days beginning of day      javascript // Expected v utorok o 0:00 // Actual   zajtra o 0:00  zajtra o 0:00  ==  v utorok o 0:00             lang:sl:calendar next week  1414.2   Today   2 days beginning of day      javascript // Expected v torek ob 0:00 // Actual   jutri ob 0:00  jutri ob 0:00  ==  v torek ob 0:00             lang:sq:calendar next week  1436.2   Today   2 days beginning of day      javascript // Expected E Marte n  00:00 // Actual   Neser n  00:00  Neser n  00:00  ==  E Marte n  00:00             lang:sv:calendar next week  1458.2   Today   2 days beginning of day      javascript // Expected tisdag 00:00 // Actual   Imorgon 00:00  Imorgon 00:00  ==  tisdag 00:00             lang:th:calendar next week  1479.2   Today   2 days beginning of day      javascript // Expected                 0        0      // Actual                 0        0                     0        0       ==                  0        0                  lang:tl ph:same next week  1500.2   Today   2 days beginning of day      javascript // Expected Martes sa 00:00 // Actual   Bukas sa 00:00  Bukas sa 00:00  ==  Martes sa 00:00             lang:tr:calendar next week  1522.2   Today   2 days beginning of day      javascript // Expected haftaya Sal  saat 00:00 // Actual   yar n saat 00:00  yar n saat 00:00  ==  haftaya Sal  saat 00:00             lang:tzm la:calendar next week  1544.2   Today   2 days beginning of day      javascript // Expected asinas g 00:00 // Actual   aska g 00:00  aska g 00:00  ==  asinas g 00:00             lang:tzm:calendar next week  1566.2   Today   2 days beginning of day      javascript // Expected          00:00 // Actual          00:00         00:00  ==           00:00             lang:uk:calendar next week  1589.2   Today   2 days beginning of day      javascript // Expected              00:00 // Actual            00:00           00:00  ==               00:00             lang:uz:calendar next week  1611.2   Today   2 days beginning of day      javascript // Expected                   00:00    // Actual          00:00            00:00     ==                    00:00                lang:vn:calendar next week  1633.2   Today   2 days beginning of day      javascript // Expected th  ba tu n t i l c 00:00 // Actual   Ng y mai l c 00:00  Ng y mai l c 00:00  ==  th  ba tu n t i l c 00:00             lang:zh cn:calendar next week  1655.1   Today   7 days beginning of day      javascript // Expected      12   // Actual       12        12    ==       12               lang:zh cn:calendar next week  1655.2   Today   8 days beginning of day      javascript // Expected      12   // Actual       12        12    ==       12               lang:zh tw:calendar next week  1677.2   Today   2 days beginning of day      javascript // Expected       12 00 // Actual       12 00      12 00  ==        12 00      ,alanhamlett,closed,1,2013-11-04 03:42:17,2013-11-27 01:22:43,,Unit Test Failed,,,0,1
13000,moment/moment,1250,61 tests failed. lang:ar ma:calendar last week  306.3  lang:ar:calendar last week  328.3  lang:bg:calendar last week  350.3  lang:br:calendar last week  372.3  lang:bs:calendar last week  387.3  lang:ca:calendar last week  408.3  lang:cs:calendar last wee,    Client info      Date String   : Mon Nov 04 2013 15:00:25 GMT 0400  AST  Locale String : 4/11/2013 15:00:25 Offset        : 240 User Agent    : Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/30.0.1599.114 Safari/537.36            lang:ar ma:calendar last week  306.3   Today   2 days end of day      javascript // Expected                  23:59 // Actual                  23:59                 23:59  ==                   23:59             lang:ar:calendar last week  328.3   Today   2 days end of day      javascript // Expected                  23:59 // Actual                  23:59                 23:59  ==                   23:59             lang:bg:calendar last week  350.3   Today   2 days end of day      javascript // Expected                       23:59 // Actual           23:59          23:59  ==                        23:59             lang:br:calendar last week  372.3   Today   2 days end of day      javascript // Expected Sadorn paset da 11e59 PM // Actual   Dec     ,ghost,closed,1,2013-11-04 19:01:37,2013-11-27 01:23:31,,Unit Test Failed,,,0,1
12999,moment/moment,1251,How can i get the correct first day of this week when i want to specify another timezone?,I found the startof  week   in momentjs will return the first day of this week but it bases on the current local timezone. What I m trying to do is get the beginning of the current day for a specific timezone offset. I use Moment on the server side. i found there is no way to specify a timezone to do startof  week    isn t it? ,Leeiio,closed,12,2013-11-05 05:19:54,2014-02-03 06:32:55,,,,0,1
12998,moment/moment,1252,Proposal: FormatConverter Moment.js <> java.text.DateFormat,In my project  using Grails  Groovy  Backend    JS Frontend with Moment.js  it would be a huge improvement if there would be something like a FormatConverter which is able to translate a  java.text.DateFormat  String to a valid  moment.format    String. I m willing to take the challenge and try to implement it    but   my question is if the  Moment.js  core team would like to see this in a different project/repository or if it should be contributed here.  I don t know how many people are using a Java/Groovy Backend with a JS Frontend and the need to send different date formats back and forth  but to me it seems like a legit use case.  If there s already something similar out there I d appreciate your links/tips/hints. ,herom,closed,8,2013-11-05 09:47:50,2013-11-05 15:01:36,,,,0,1
12997,moment/moment,1253,Moment widget,This is for a new feature request. Moment is great.  But what would make moment the best is if there was a javascript widget akin to the jQueryUI datepicker widget.  Even HTML5 has a input type= date  that will put in a widget for selecting a date.  I m sure moment could come up with something great.  They could also create a knockout binding  so that we could only bind to the widget and have everything taken care of.  I currently use the jQueryUI datepicker widget with a knockout binding like this.   data bind= jqueryui:  datepicker   value: dateofBirth   However  in the jQueryUI widget  it is very hard to select a date years ago  like I am trying to do with my control here of inputing a date of birth.  You can manually type in the year  but this defeats the purpose of selecting a date with the widget.   ,jcox86,closed,3,2013-11-05 20:19:12,2013-11-05 20:27:16,,,,0,1
12996,moment/moment,1254,Cloning moment with underscore breaks it,If you clone a moment by doing _.clone moment    that won t be a moment instance any more and certain functions like sameAs will fail because of an infinite recursion error. See: http://jsfiddle.net/SwWcL/  You could argue that I shouldn t be cloning a moment with anything else than the clone functions it ships with but this is a third party code not under my control and the interesting thing is that it was working fine when I was using moment 2.1 but it doesn t work with moment 2.3.1 nor moment 2.4. And that s way I decided to report it. Thanks ,fede-s,closed,2,2013-11-06 05:55:21,2013-11-13 07:50:23,,,,0,1
12995,moment/moment,1255,Fix typo on word  separator , Separator  has been spelled as  seperator  in two comments.  I know it s an extremely small  quasi irrelevant issue  but typos freak me out; it s stronger than me so I ve fixed it. ,adelgado,closed,1,2013-11-06 11:31:13,2013-11-06 18:21:05,,,,1,1
12994,moment/moment,1256,972 tests failed Moment Timezone,972 tests failed. Africa/Juba:1981  255.2  Africa/Juba:1981  255.6  Africa/Juba:1982  256.2  Africa/Juba:1982  256.6  Africa/Juba:1983  257.2  Africa/Juba:1983  257.6  Africa/Juba:1984  258.2  Africa/Juba:1984  258.6  Africa/Khartoum:1981  277.2  Africa/Khartoum:1981  277.6  Africa/Khartoum:1982  278.2  Africa/Khartoum:1982  278.6  Africa/Khartoum:1983  279.2  Africa/Khartoum:1983  279.6  Africa/Khartoum:1984  280.2  Africa/Khartoum:1984  280.6  America/Adak:1981  440.2  America/Adak:1981  440.6  America/Adak:1982  441.2  America/Adak:1982  441.6  America/Adak:1983  442.2  America/Adak:1983  442.8  America/Adak:1984  443.2  America/Adak:1984  443.6  America/Anchorage:1981  512.2  America/Anchorage:1981  512.6  America/Anchorage:1982  513.2  America/Anchorage:1982  513.6  America/Anchorage:1983  514.2  America/Anchorage:1983  514.8  America/Anchorage:1984  515.2  America/Anchorage:1984  515.6  America/Boise:1981  1294.2  America/Boise:1981  1294.6  America/Boise:1982  1295.2  America/Boise:1982  1295.6  America/Boise:1983  1296.2  America/Boise:1983  1296.6  America/Boise:1984  1297.2  America/Boise:1984  1297.6  America/Cambridge_Bay:1981  1357.2  America/Cambridge_Bay:1981  1357.6  America/Cambridge_Bay:1982  1358.2  America/Cambridge_Bay:1982  1358.6  America/Cambridge_Bay:1983  1359.2  America/Cambridge_Bay:1983  1359.6  America/Cambridge_Bay:1984  1360.2  America/Cambridge_Bay:1984  1360.6  America/Chicago:1925  1539.2  America/Chicago:1925  1539.6  America/Chicago:1928  1542.2  America/Chicago:1928  1542.6  America/Chicago:1931  1545.2  America/Chicago:1931  1545.6  America/Chicago:1953  1565.2  America/Chicago:1953  1565.6  America/Chicago:1956  1568.2  America/Chicago:1956  1568.6  America/Chicago:1959  1571.2  America/Chicago:1959  1571.6  America/Chicago:1981  1593.2  America/Chicago:1981  1593.6  America/Chicago:1982  1594.2  America/Chicago:1982  1594.6  America/Chicago:1983  1595.2  America/Chicago:1983  1595.6  America/Chicago:1984  1596.2  America/Chicago:1984  1596.6  America/Danmarkshavn:1981  1776.2  America/Danmarkshavn:1981  1776.6  America/Danmarkshavn:1982  1777.2  America/Danmarkshavn:1982  1777.6  America/Danmarkshavn:1983  1778.2  America/Danmarkshavn:1983  1778.6  America/Danmarkshavn:1984  1779.2  America/Danmarkshavn:1984  1779.6  America/Dawson:1981  1799.2  America/Dawson:1981  1799.6  America/Dawson:1982  1800.2  America/Dawson:1982  1800.6  America/Dawson:1983  1801.2  America/Dawson:1983  1801.6  America/Dawson:1984  1802.2  America/Dawson:1984  1802.6  America/Dawson_Creek:1953  1865.2  America/Dawson_Creek:1953  1865.6  America/Dawson_Creek:1956  1868.2  America/Dawson_Creek:1956  1868.6  America/Dawson_Creek:1959  1871.2  America/Dawson_Creek:1959  1871.6  America/Denver:1981  1907.2  America/Denver:1981  1907.6  America/Denver:1982  1908.2  America/Denver:1982  1908.6  America/Denver:1983  1909.2  America/Denver:1983  1909.6  America/Denver:1984  1910.2  America/Denver:1984  1910.6  America/Detroit:1981  1978.2  America/Detroit:1981  1978.6  America/Detroit:1982  1979.2  America/Detroit:1982  1979.6  America/Detroit:1983  1980.2  America/Detroit:1983  1980.6  America/Detroit:1984  1981.2  America/Detroit:1984  1981.6  America/Edmonton:1981  2057.2  America/Edmonton:1981  2057.6  America/Edmonton:1982  2058.2  America/Edmonton:1982  2058.6  America/Edmonton:1983  2059.2  America/Edmonton:1983  2059.6  America/Edmonton:1984  2060.2  America/Edmonton:1984  2060.6  America/Glace_Bay:1953  2168.2  America/Glace_Bay:1953  2168.6  America/Glace_Bay:1981  2178.2  America/Glace_Bay:1981  2178.6  America/Glace_Bay:1982  2179.2  America/Glace_Bay:1982  2179.6  America/Glace_Bay:1983  2180.2  America/Glace_Bay:1983  2180.6  America/Glace_Bay:1984  2181.2  America/Glace_Bay:1984  2181.6  America/Godthab:1981  2237.2  America/Godthab:1981  2237.6  America/Godthab:1982  2238.2  America/Godthab:1982  2238.6  America/Godthab:1983  2239.2  America/Godthab:1983  2239.6  America/Godthab:1984  2240.2  America/Godthab:1984  2240.6  America/Goose_Bay:1953  2311.2  America/Goose_Bay:1953  2311.6  America/Goose_Bay:1956  2314.2  America/Goose_Bay:1956  2314.6  America/Goose_Bay:1959  2317.2  America/Goose_Bay:1959  2317.6  America/Goose_Bay:1981  2339.2  America/Goose_Bay:1981  2339.6  America/Goose_Bay:1982  2340.2  America/Goose_Bay:1982  2340.6  America/Goose_Bay:1983  2341.2  America/Goose_Bay:1983  2341.6  America/Goose_Bay:1984  2342.2  America/Goose_Bay:1984  2342.6  America/Grand_Turk:1981  2399.2  America/Grand_Turk:1981  2399.6  America/Grand_Turk:1982  2400.2  America/Grand_Turk:1982  2400.6  America/Grand_Turk:1983  2401.2  America/Grand_Turk:1983  2401.6  America/Grand_Turk:1984  2402.2  America/Grand_Turk:1984  2402.6  America/Halifax:1953  2502.2  America/Halifax:1953  2502.6  America/Halifax:1956  2504.2  America/Halifax:1956  2504.6  America/Halifax:1959  2507.2  America/Halifax:1959  2507.6  America/Halifax:1981  2527.2  America/Halifax:1981  2527.6  America/Halifax:1982  2528.2  America/Halifax:1982  2528.6  America/Halifax:1983  2529.2  America/Halifax:1983  2529.6  America/Halifax:1984  2530.2  America/Halifax:1984  2530.6  America/Indiana/Indianapolis:1953  2686.2  America/Indiana/Indianapolis:1953  2686.6  America/Indiana/Knox:1953  2735.2  America/Indiana/Knox:1953  2735.6  America/Indiana/Knox:1956  2738.2  America/Indiana/Knox:1956  2738.6  America/Indiana/Knox:1959  2741.2  America/Indiana/Knox:1959  2741.6  America/Indiana/Knox:1981  2760.2  America/Indiana/Knox:1981  2760.6  America/Indiana/Knox:1982  2761.2  America/Indiana/Knox:1982  2761.6  America/Indiana/Knox:1983  2762.2  America/Indiana/Knox:1983  2762.6  America/Indiana/Knox:1984  2763.2  America/Indiana/Knox:1984  2763.6  America/Indiana/Marengo:1956  2810.2  America/Indiana/Marengo:1956  2810.6  America/Indiana/Marengo:1959  2813.2  America/Indiana/Marengo:1959  2813.6  America/Indiana/Petersburg:1956  2860.2  America/Indiana/Petersburg:1956  2860.6  America/Indiana/Petersburg:1959  2863.2  America/Indiana/Petersburg:1959  2863.6  America/Indiana/Tell_City:1953  2919.2  America/Indiana/Tell_City:1953  2919.6  America/Indiana/Tell_City:1956  2922.2  America/Indiana/Tell_City:1956  2922.6  America/Indiana/Tell_City:1959  2925.2  America/Indiana/Tell_City:1959  2925.6  America/Indiana/Vincennes:1953  3011.2  America/Indiana/Vincennes:1953  3011.6  America/Indiana/Vincennes:1956  3014.2  America/Indiana/Vincennes:1956  3014.6  America/Indiana/Vincennes:1959  3017.2  America/Indiana/Vincennes:1959  3017.6  America/Indiana/Winamac:1953  3068.2  America/Indiana/Winamac:1953  3068.6  America/Indiana/Winamac:1956  3071.2  America/Indiana/Winamac:1956  3071.6  America/Indiana/Winamac:1959  3074.2  America/Indiana/Winamac:1959  3074.6  America/Inuvik:1981  3116.2  America/Inuvik:1981  3116.6  America/Inuvik:1982  3117.2  America/Inuvik:1982  3117.6  America/Inuvik:1983  3118.2  America/Inuvik:1983  3118.6  America/Inuvik:1984  3119.2  America/Inuvik:1984  3119.6  America/Iqaluit:1981  3177.2  America/Iqaluit:1981  3177.6  America/Iqaluit:1982  3178.2  America/Iqaluit:1982  3178.6  America/Iqaluit:1983  3179.2  America/Iqaluit:1983  3179.6  America/Iqaluit:1984  3180.2  America/Iqaluit:1984  3180.6  America/Jamaica:1981  3242.2  America/Jamaica:1981  3242.6  America/Jamaica:1982  3243.2  America/Jamaica:1982  3243.6  America/Jamaica:1983  3244.2  America/Jamaica:1983  3244.6  America/Juneau:1981  3259.2  America/Juneau:1981  3259.6  America/Juneau:1982  3260.2  America/Juneau:1982  3260.6  America/Juneau:1983  3261.2  America/Juneau:1983  3261.8  America/Juneau:1984  3262.2  America/Juneau:1984  3262.6  America/Kentucky/Louisville:1953  3327.2  America/Kentucky/Louisville:1953  3327.6  America/Kentucky/Louisville:1956  3330.2  America/Kentucky/Louisville:1956  3330.6  America/Kentucky/Louisville:1959  3333.2  America/Kentucky/Louisville:1959  3333.6  America/Kentucky/Louisville:1981  3349.2  America/Kentucky/Louisville:1981  3349.6  America/Kentucky/Louisville:1982  3350.2  America/Kentucky/Louisville:1982  3350.6  America/Kentucky/Louisville:1983  3351.2  America/Kentucky/Louisville:1983  3351.6  America/Kentucky/Louisville:1984  3352.2  America/Kentucky/Louisville:1984  3352.6  America/Kentucky/Monticello:1981  3423.2  America/Kentucky/Monticello:1981  3423.6  America/Kentucky/Monticello:1982  3424.2  America/Kentucky/Monticello:1982  3424.6  America/Kentucky/Monticello:1983  3425.2  America/Kentucky/Monticello:1983  3425.6  America/Kentucky/Monticello:1984  3426.2  America/Kentucky/Monticello:1984  3426.6  America/Los_Angeles:1953  3499.2  America/Los_Angeles:1953  3499.6  America/Los_Angeles:1956  3502.2  America/Los_Angeles:1956  3502.6  America/Los_Angeles:1959  3505.2  America/Los_Angeles:1959  3505.6  America/Los_Angeles:1981  3527.2  America/Los_Angeles:1981  3527.6  America/Los_Angeles:1982  3528.2  America/Los_Angeles:1982  3528.6  America/Los_Angeles:1983  3529.2  America/Los_Angeles:1983  3529.6  America/Los_Angeles:1984  3530.2  America/Los_Angeles:1984  3530.6  America/Menominee:1981  3753.2  America/Menominee:1981  3753.6  America/Menominee:1982  3754.2  America/Menominee:1982  3754.6  America/Menominee:1983  3755.2  America/Menominee:1983  3755.6  America/Menominee:1984  3756.2  America/Menominee:1984  3756.6  America/Metlakatla:1981  3869.2  America/Metlakatla:1981  3869.6  America/Metlakatla:1982  3870.2  America/Metlakatla:1982  3870.6  America/Metlakatla:1983  3871.2  America/Metlakatla:1983  3871.6  America/Moncton:1953  3998.2  America/Moncton:1953  3998.6  America/Moncton:1956  4001.2  America/Moncton:1956  4001.6  America/Moncton:1959  4004.2  America/Moncton:1959  4004.6  America/Moncton:1981  4025.2  America/Moncton:1981  4025.6  America/Moncton:1982  4026.2  America/Moncton:1982  4026.6  America/Moncton:1983  4027.2  America/Moncton:1983  4027.6  America/Moncton:1984  4028.2  America/Moncton:1984  4028.6  America/Montreal:1928  4208.2  America/Montreal:1928  4208.6  America/Montreal:1931  4211.2  America/Montreal:1931  4211.6  America/Montreal:1953  4230.2  America/Montreal:1953  4230.6  America/Montreal:1956  4233.2  America/Montreal:1956  4233.6  America/Montreal:1959  4236.2  America/Montreal:1959  4236.6  America/Montreal:1981  4258.2  America/Montreal:1981  4258.6  America/Montreal:1982  4259.2  America/Montreal:1982  4259.6  America/Montreal:1983  4260.2  America/Montreal:1983  4260.6  America/Montreal:1984  4261.2  America/Montreal:1984  4261.6  America/Nassau:1981  4334.2  America/Nassau:1981  4334.6  America/Nassau:1982  4335.2  America/Nassau:1982  4335.6  America/Nassau:1983  4336.2  America/Nassau:1983  4336.6  America/Nassau:1984  4337.2  America/Nassau:1984  4337.6  America/New_York:1925  4398.2  America/New_York:1925  4398.6  America/New_York:1928  4401.2  America/New_York:1928  4401.6  America/New_York:1931  4404.2  America/New_York:1931  4404.6  America/New_York:1953  4424.2  America/New_York:1953  4424.6  America/New_York:1956  4427.2  America/New_York:1956  4427.6  America/New_York:1959  4430.2  America/New_York:1959  4430.6  America/New_York:1981  4452.2  America/New_York:1981  4452.6  America/New_York:1982  4453.2  America/New_York:1982  4453.6  America/New_York:1983  4454.2  America/New_York:1983  4454.6  America/New_York:1984  4455.2  America/New_York:1984  4455.6  America/Nipigon:1981  4520.2  America/Nipigon:1981  4520.6  America/Nipigon:1982  4521.2  America/Nipigon:1982  4521.6  America/Nipigon:1983  4522.2  America/Nipigon:1983  4522.6  America/Nipigon:1984  4523.2  America/Nipigon:1984  4523.6  America/Nome:1981  4592.2  America/Nome:1981  4592.6  America/Nome:1982  4593.2  America/Nome:1982  4593.6  America/Nome:1983  4594.2  America/Nome:1983  4594.8  America/Nome:1984  4595.2  America/Nome:1984  4595.6  America/North_Dakota/Beulah:1981  4692.2  America/North_Dakota/Beulah:1981  4692.6  America/North_Dakota/Beulah:1982  4693.2  America/North_Dakota/Beulah:1982  4693.6  America/North_Dakota/Beulah:1983  4694.2  America/North_Dakota/Beulah:1983  4694.6  America/North_Dakota/Beulah:1984  4695.2  America/North_Dakota/Beulah:1984  4695.6  America/North_Dakota/Center:1981  4767.2  America/North_Dakota/Center:1981  4767.6  America/North_Dakota/Center:1982  4768.2  America/North_Dakota/Center:1982  4768.6  America/North_Dakota/Center:1983  4769.2  America/North_Dakota/Center:1983  4769.6  America/North_Dakota/Center:1984  4770.2  America/North_Dakota/Center:1984  4770.6  America/North_Dakota/New_Salem:1981  4842.2  America/North_Dakota/New_Salem:1981  4842.6  America/North_Dakota/New_Salem:1982  4843.2  America/North_Dakota/New_Salem:1982  4843.6  America/North_Dakota/New_Salem:1983  4844.2  America/North_Dakota/New_Salem:1983  4844.6  America/North_Dakota/New_Salem:1984  4845.2  America/North_Dakota/New_Salem:1984  4845.6  America/Pangnirtung:1981  4953.2  America/Pangnirtung:1981  4953.6  America/Pangnirtung:1982  4954.2  America/Pangnirtung:1982  4954.6  America/Pangnirtung:1983  4955.2  America/Pangnirtung:1983  4955.6  America/Pangnirtung:1984  4956.2  America/Pangnirtung:1984  4956.6  America/Port au Prince:1984  5022.2  America/Port au Prince:1984  5022.6  America/Rainy_River:1981  5097.2  America/Rainy_River:1981  5097.6  America/Rainy_River:1982  5098.2  America/Rainy_River:1982  5098.6  America/Rainy_River:1983  5099.2  America/Rainy_River:1983  5099.6  America/Rainy_River:1984  5100.2  America/Rainy_River:1984  5100.6  America/Rankin_Inlet:1981  5158.2  America/Rankin_Inlet:1981  5158.6  America/Rankin_Inlet:1982  5159.2  America/Rankin_Inlet:1982  5159.6  America/Rankin_Inlet:1983  5160.2  America/Rankin_Inlet:1983  5160.6  America/Rankin_Inlet:1984  5161.2  America/Rankin_Inlet:1984  5161.6  America/Regina:1953  5261.2  America/Regina:1953  5261.6  America/Regina:1956  5264.2  America/Regina:1956  5264.6  America/Regina:1959  5266.2  America/Regina:1959  5266.6  America/Resolute:1981  5271.2  America/Resolute:1981  5271.6  America/Resolute:1982  5272.2  America/Resolute:1982  5272.6  America/Resolute:1983  5273.2  America/Resolute:1983  5273.6  America/Resolute:1984  5274.2  America/Resolute:1984  5274.6  America/Santa_Isabel:1956  5359.2  America/Santa_Isabel:1956  5359.6  America/Santa_Isabel:1959  5362.2  America/Santa_Isabel:1959  5362.6  America/Santa_Isabel:1981  5369.2  America/Santa_Isabel:1981  5369.6  America/Santa_Isabel:1982  5370.2  America/Santa_Isabel:1982  5370.6  America/Santa_Isabel:1983  5371.2  America/Santa_Isabel:1983  5371.6  America/Santa_Isabel:1984  5372.2  America/Santa_Isabel:1984  5372.6  America/Scoresbysund:1981  5609.2  America/Scoresbysund:1981  5609.6  America/Scoresbysund:1982  5610.2  America/Scoresbysund:1982  5610.6  America/Scoresbysund:1983  5611.2  America/Scoresbysund:1983  5611.6  America/Scoresbysund:1984  5612.2  America/Scoresbysund:1984  5612.6  America/Sitka:1981  5680.2  America/Sitka:1981  5680.6  America/Sitka:1982  5681.2  America/Sitka:1982  5681.6  America/Sitka:1983  5682.2  America/Sitka:1983  5682.8  America/Sitka:1984  5683.2  America/Sitka:1984  5683.6  America/St_Johns:1953  5771.2  America/St_Johns:1953  5771.6  America/St_Johns:1956  5774.2  America/St_Johns:1956  5774.6  America/St_Johns:1959  5777.2  America/St_Johns:1959  5777.6  America/St_Johns:1981  5799.2  America/St_Johns:1981  5799.6  America/St_Johns:1982  5800.2  America/St_Johns:1982  5800.6  America/St_Johns:1983  5801.2  America/St_Johns:1983  5801.6  America/St_Johns:1984  5802.2  America/St_Johns:1984  5802.6  America/Swift_Current:1959  5869.2  America/Swift_Current:1959  5869.6  America/Thunder_Bay:1981  5938.2  America/Thunder_Bay:1981  5938.6  America/Thunder_Bay:1982  5939.2  America/Thunder_Bay:1982  5939.6  America/Thunder_Bay:1983  5940.2  America/Thunder_Bay:1983  5940.6  America/Thunder_Bay:1984  5941.2  America/Thunder_Bay:1984  5941.6  America/Tijuana:1956  6006.2  America/Tijuana:1956  6006.6  America/Tijuana:1959  6009.2  America/Tijuana:1959  6009.6  America/Tijuana:1981  6016.2  America/Tijuana:1981  6016.6  America/Tijuana:1982  6017.2  America/Tijuana:1982  6017.6  America/Tijuana:1983  6018.2  America/Tijuana:1983  6018.6  America/Tijuana:1984  6019.2  America/Tijuana:1984  6019.6  America/Toronto:1928  6083.2  America/Toronto:1928  6083.6  America/Toronto:1931  6086.2  America/Toronto:1931  6086.6  America/Toronto:1953  6105.2  America/Toronto:1953  6105.6  America/Toronto:1956  6108.2  America/Toronto:1956  6108.6  America/Toronto:1959  6111.2  America/Toronto:1959  6111.6  America/Toronto:1981  6133.2  America/Toronto:1981  6133.6  America/Toronto:1982  6134.2  America/Toronto:1982  6134.6  America/Toronto:1983  6135.2  America/Toronto:1983  6135.6  America/Toronto:1984  6136.2  America/Toronto:1984  6136.6  America/Vancouver:1953  6201.2  America/Vancouver:1953  6201.6  America/Vancouver:1956  6204.2  America/Vancouver:1956  6204.6  America/Vancouver:1959  6207.2  America/Vancouver:1959  6207.6  America/Vancouver:1981  6229.2  America/Vancouver:1981  6229.6  America/Vancouver:1982  6230.2  America/Vancouver:1982  6230.6  America/Vancouver:1983  6231.2  America/Vancouver:1983  6231.6  America/Vancouver:1984  6232.2  America/Vancouver:1984  6232.6  America/Whitehorse:1981  6293.2  America/Whitehorse:1981  6293.6  America/Whitehorse:1982  6294.2  America/Whitehorse:1982  6294.6  America/Whitehorse:1983  6295.2  America/Whitehorse:1983  6295.6  America/Whitehorse:1984  6296.2  America/Whitehorse:1984  6296.6  America/Winnipeg:1953  6362.2  America/Winnipeg:1953  6362.6  America/Winnipeg:1956  6365.2  America/Winnipeg:1956  6365.6  America/Winnipeg:1959  6368.2  America/Winnipeg:1959  6368.6  America/Winnipeg:1981  6386.2  America/Winnipeg:1981  6386.6  America/Winnipeg:1982  6387.2  America/Winnipeg:1982  6387.6  America/Winnipeg:1983  6388.2  America/Winnipeg:1983  6388.6  America/Winnipeg:1984  6389.2  America/Winnipeg:1984  6389.6  America/Yakutat:1981  6457.2  America/Yakutat:1981  6457.6  America/Yakutat:1982  6458.2  America/Yakutat:1982  6458.6  America/Yakutat:1983  6459.2  America/Yakutat:1983  6459.8  America/Yakutat:1984  6460.2  America/Yakutat:1984  6460.6  America/Yellowknife:1981  6520.2  America/Yellowknife:1981  6520.6  America/Yellowknife:1982  6521.2  America/Yellowknife:1982  6521.6  America/Yellowknife:1983  6522.2  America/Yellowknife:1983  6522.6  America/Yellowknife:1984  6523.2  America/Yellowknife:1984  6523.6  Antarctica/Macquarie:1982  6613.2  Antarctica/Macquarie:1982  6613.6  Antarctica/Macquarie:1983  6614.2  Antarctica/Macquarie:1983  6614.6  Asia/Hong_Kong:1953  7455.2  Asia/Hong_Kong:1953  7455.6  Asia/Nicosia:1981  7834.2  Asia/Nicosia:1981  7834.6  Asia/Nicosia:1982  7835.2  Asia/Nicosia:1982  7835.6  Asia/Nicosia:1983  7836.2  Asia/Nicosia:1983  7836.6  Asia/Nicosia:1984  7837.2  Asia/Nicosia:1984  7837.6  Atlantic/Azores:1953  8489.2  Atlantic/Azores:1953  8489.6  Atlantic/Azores:1956  8492.2  Atlantic/Azores:1956  8492.6  Atlantic/Azores:1959  8495.2  Atlantic/Azores:1959  8495.6  Atlantic/Azores:1981  8507.2  Atlantic/Azores:1981  8507.6  Atlantic/Azores:1982  8508.2  Atlantic/Azores:1982  8508.6  Atlantic/Azores:1983  8509.2  Atlantic/Azores:1983  8509.6  Atlantic/Azores:1984  8510.2  Atlantic/Azores:1984  8510.6  Atlantic/Bermuda:1981  8572.2  Atlantic/Bermuda:1981  8572.6  Atlantic/Bermuda:1982  8573.2  Atlantic/Bermuda:1982  8573.6  Atlantic/Bermuda:1983  8574.2  Atlantic/Bermuda:1983  8574.6  Atlantic/Bermuda:1984  8575.2  Atlantic/Bermuda:1984  8575.6  Atlantic/Canary:1981  8632.2  Atlantic/Canary:1981  8632.6  Atlantic/Canary:1982  8633.2  Atlantic/Canary:1982  8633.6  Atlantic/Canary:1983  8634.2  Atlantic/Canary:1983  8634.6  Atlantic/Canary:1984  8635.2  Atlantic/Canary:1984  8635.6  Atlantic/Faroe:1981  8694.2  Atlantic/Faroe:1981  8694.6  Atlantic/Faroe:1982  8695.2  Atlantic/Faroe:1982  8695.6  Atlantic/Faroe:1983  8696.2  Atlantic/Faroe:1983  8696.6  Atlantic/Faroe:1984  8697.2  Atlantic/Faroe:1984  8697.6  Atlantic/Madeira:1953  8783.2  Atlantic/Madeira:1953  8783.6  Atlantic/Madeira:1956  8786.2  Atlantic/Madeira:1956  8786.6  Atlantic/Madeira:1959  8789.2  Atlantic/Madeira:1959  8789.6  Atlantic/Madeira:1981  8801.2  Atlantic/Madeira:1981  8801.6  Atlantic/Madeira:1982  8802.2  Atlantic/Madeira:1982  8802.6  Atlantic/Madeira:1983  8803.2  Atlantic/Madeira:1983  8803.6  Atlantic/Madeira:1984  8804.2  Atlantic/Madeira:1984  8804.6  Atlantic/Reykjavik:1953  8875.2  Atlantic/Reykjavik:1953  8875.6  Atlantic/Reykjavik:1956  8878.2  Atlantic/Reykjavik:1956  8878.6  Atlantic/Reykjavik:1959  8881.2  Atlantic/Reykjavik:1959  8881.6  Atlantic/Stanley:1984  8901.2  Atlantic/Stanley:1984  8901.6  Australia/Broken_Hill:1982  9030.2  Australia/Broken_Hill:1982  9030.6  Australia/Currie:1982  9103.2  Australia/Currie:1982  9103.6  Australia/Currie:1983  9104.2  Australia/Currie:1983  9104.6  Australia/Hobart:1982  9201.2  Australia/Hobart:1982  9201.6  Australia/Hobart:1983  9202.2  Australia/Hobart:1983  9202.6  Australia/Sydney:1982  9433.2  Australia/Sydney:1982  9433.6  CET:1981  9501.2  CET:1981  9501.6  CET:1982  9502.2  CET:1982  9502.6  CET:1983  9503.2  CET:1983  9503.6  CET:1984  9504.2  CET:1984  9504.6  CST6CDT:1981  9576.2  CST6CDT:1981  9576.6  CST6CDT:1982  9577.2  CST6CDT:1982  9577.6  CST6CDT:1983  9578.2  CST6CDT:1983  9578.6  CST6CDT:1984  9579.2  CST6CDT:1984  9579.6  EET:1981  9637.2  EET:1981  9637.6  EET:1982  9638.2  EET:1982  9638.6  EET:1983  9639.2  EET:1983  9639.6  EET:1984  9640.2  EET:1984  9640.6  EST5EDT:1981  9712.2  EST5EDT:1981  9712.6  EST5EDT:1982  9713.2  EST5EDT:1982  9713.6  EST5EDT:1983  9714.2  EST5EDT:1983  9714.6  EST5EDT:1984  9715.2  EST5EDT:1984  9715.6  Europe/Amsterdam:1981  9802.2  Europe/Amsterdam:1981  9802.6  Europe/Amsterdam:1982  9803.2  Europe/Amsterdam:1982  9803.6  Europe/Amsterdam:1983  9804.2  Europe/Amsterdam:1983  9804.6  Europe/Amsterdam:1984  9805.2  Europe/Amsterdam:1984  9805.6  Europe/Athens:1981  9926.2  Europe/Athens:1981  9926.6  Europe/Athens:1982  9927.2  Europe/Athens:1982  9927.6  Europe/Athens:1983  9928.2  Europe/Athens:1983  9928.6  Europe/Athens:1984  9929.2  Europe/Athens:1984  9929.6  Europe/Belgrade:1983  9988.2  Europe/Belgrade:1983  9988.6  Europe/Belgrade:1984  9989.2  Europe/Belgrade:1984  9989.6  Europe/Berlin:1981  10056.2  Europe/Berlin:1981  10056.6  Europe/Berlin:1982  10057.2  Europe/Berlin:1982  10057.6  Europe/Berlin:1983  10058.2  Europe/Berlin:1983  10058.6  Europe/Berlin:1984  10059.2  Europe/Berlin:1984  10059.6  Europe/Brussels:1981  10148.2  Europe/Brussels:1981  10148.6  Europe/Brussels:1982  10149.2  Europe/Brussels:1982  10149.6  Europe/Brussels:1983  10150.2  Europe/Brussels:1983  10150.6  Europe/Brussels:1984  10151.2  Europe/Brussels:1984  10151.6  Europe/Bucharest:1981  10216.2  Europe/Bucharest:1981  10216.6  Europe/Bucharest:1982  10217.2  Europe/Bucharest:1982  10217.6  Europe/Bucharest:1983  10218.2  Europe/Bucharest:1983  10218.6  Europe/Bucharest:1984  10219.2  Europe/Bucharest:1984  10219.6  Europe/Budapest:1981  10293.2  Europe/Budapest:1981  10293.6  Europe/Budapest:1982  10294.2  Europe/Budapest:1982  10294.6  Europe/Budapest:1983  10295.2  Europe/Budapest:1983  10295.6  Europe/Budapest:1984  10296.2  Europe/Budapest:1984  10296.6  Europe/Copenhagen:1981  10432.2  Europe/Copenhagen:1981  10432.6  Europe/Copenhagen:1982  10433.2  Europe/Copenhagen:1982  10433.6  Europe/Copenhagen:1983  10434.2  Europe/Copenhagen:1983  10434.6  Europe/Copenhagen:1984  10435.2  Europe/Copenhagen:1984  10435.6  Europe/Dublin:1925  10498.2  Europe/Dublin:1925  10498.6  Europe/Dublin:1928  10501.1  Europe/Dublin:1928  10501.5  Europe/Dublin:1931  10504.2  Europe/Dublin:1931  10504.6  Europe/Dublin:1953  10521.2  Europe/Dublin:1953  10521.6  Europe/Dublin:1956  10524.1  Europe/Dublin:1956  10524.5  Europe/Dublin:1959  10527.2  Europe/Dublin:1959  10527.6  Europe/Dublin:1981  10547.2  Europe/Dublin:1981  10547.6  Europe/Dublin:1982  10548.2  Europe/Dublin:1982  10548.6  Europe/Dublin:1983  10549.2  Europe/Dublin:1983  10549.6  Europe/Dublin:1984  10550.2  Europe/Dublin:1984  10550.6  Europe/Gibraltar:1925  10613.2  Europe/Gibraltar:1925  10613.6  Europe/Gibraltar:1928  10616.1  Europe/Gibraltar:1928  10616.5  Europe/Gibraltar:1931  10619.2  Europe/Gibraltar:1931  10619.6  Europe/Gibraltar:1942  10630.2  Europe/Gibraltar:1942  10630.6  Europe/Gibraltar:1953  10641.2  Europe/Gibraltar:1953  10641.6  Europe/Gibraltar:1956  10644.1  Europe/Gibraltar:1956  10644.5  Europe/Gibraltar:1982  10646.2  Europe/Gibraltar:1982  10646.6  Europe/Gibraltar:1983  10647.2  Europe/Gibraltar:1983  10647.6  Europe/Gibraltar:1984  10648.2  Europe/Gibraltar:1984  10648.6  Europe/Helsinki:1981  10704.2  Europe/Helsinki:1981  10704.6  Europe/Helsinki:1982  10705.2  Europe/Helsinki:1982  10705.6  Europe/Helsinki:1983  10706.2  Europe/Helsinki:1983  10706.6  Europe/Helsinki:1984  10707.2  Europe/Helsinki:1984  10707.6  Europe/Istanbul:1981  10791.2  Europe/Istanbul:1981  10791.6  Europe/Istanbul:1982  10792.2  Europe/Istanbul:1982  10792.6  Europe/Lisbon:1953  10979.2  Europe/Lisbon:1953  10979.6  Europe/Lisbon:1956  10982.2  Europe/Lisbon:1956  10982.6  Europe/Lisbon:1959  10985.2  Europe/Lisbon:1959  10985.6  Europe/Lisbon:1981  10998.2  Europe/Lisbon:1981  10998.6  Europe/Lisbon:1982  10999.2  Europe/Lisbon:1982  10999.6  Europe/Lisbon:1983  11000.2  Europe/Lisbon:1983  11000.6  Europe/Lisbon:1984  11001.2  Europe/Lisbon:1984  11001.6  Europe/London:1925  11064.2  Europe/London:1925  11064.6  Europe/London:1928  11067.1  Europe/London:1928  11067.5  Europe/London:1931  11070.2  Europe/London:1931  11070.6  Europe/London:1942  11081.2  Europe/London:1942  11081.6  Europe/London:1953  11092.2  Europe/London:1953  11092.6  Europe/London:1956  11095.1  Europe/London:1956  11095.5  Europe/London:1959  11098.2  Europe/London:1959  11098.6  Europe/London:1981  11118.2  Europe/London:1981  11118.6  Europe/London:1982  11119.2  Europe/London:1982  11119.6  Europe/London:1983  11120.2  Europe/London:1983  11120.6  Europe/London:1984  11121.2  Europe/London:1984  11121.6  Europe/Luxembourg:1981  11210.2  Europe/Luxembourg:1981  11210.6  Europe/Luxembourg:1982  11211.2  Europe/Luxembourg:1982  11211.6  Europe/Luxembourg:1983  11212.2  Europe/Luxembourg:1983  11212.6  Europe/Luxembourg:1984  11213.2  Europe/Luxembourg:1984  11213.6  Europe/Madrid:1981  11292.2  Europe/Madrid:1981  11292.6  Europe/Madrid:1982  11293.2  Europe/Madrid:1982  11293.6  Europe/Madrid:1983  11294.2  Europe/Madrid:1983  11294.6  Europe/Madrid:1984  11295.2  Europe/Madrid:1984  11295.6  Europe/Malta:1981  11377.2  Europe/Malta:1981  11377.6  Europe/Malta:1982  11378.2  Europe/Malta:1982  11378.6  Europe/Malta:1983  11379.2  Europe/Malta:1983  11379.6  Europe/Malta:1984  11380.2  Europe/Malta:1984  11380.6  Europe/Monaco:1981  11506.2  Europe/Monaco:1981  11506.6  Europe/Monaco:1982  11507.2  Europe/Monaco:1982  11507.6  Europe/Monaco:1983  11508.2  Europe/Monaco:1983  11508.6  Europe/Monaco:1984  11509.2  Europe/Monaco:1984  11509.6  Europe/Oslo:1981  11615.2  Europe/Oslo:1981  11615.6  Europe/Oslo:1982  11616.2  Europe/Oslo:1982  11616.6  Europe/Oslo:1983  11617.2  Europe/Oslo:1983  11617.6  Europe/Oslo:1984  11618.2  Europe/Oslo:1984  11618.6  Europe/Paris:1981  11707.2  Europe/Paris:1981  11707.6  Europe/Paris:1982  11708.2  Europe/Paris:1982  11708.6  Europe/Paris:1983  11709.2  Europe/Paris:1983  11709.6  Europe/Paris:1984  11710.2  Europe/Paris:1984  11710.6  Europe/Prague:1981  11778.2  Europe/Prague:1981  11778.6  Europe/Prague:1982  11779.2  Europe/Prague:1982  11779.6  Europe/Prague:1983  11780.2  Europe/Prague:1983  11780.6  Europe/Prague:1984  11781.2  Europe/Prague:1984  11781.6  Europe/Rome:1981  11927.2  Europe/Rome:1981  11927.6  Europe/Rome:1982  11928.2  Europe/Rome:1982  11928.6  Europe/Rome:1983  11929.2  Europe/Rome:1983  11929.6  Europe/Rome:1984  11930.2  Europe/Rome:1984  11930.6  Europe/Sofia:1981  12086.2  Europe/Sofia:1981  12086.6  Europe/Sofia:1982  12087.2  Europe/Sofia:1982  12087.6  Europe/Sofia:1983  12088.2  Europe/Sofia:1983  12088.6  Europe/Sofia:1984  12089.2  Europe/Sofia:1984  12089.6  Europe/Stockholm:1981  12145.2  Europe/Stockholm:1981  12145.6  Europe/Stockholm:1982  12146.2  Europe/Stockholm:1982  12146.6  Europe/Stockholm:1983  12147.2  Europe/Stockholm:1983  12147.6  Europe/Stockholm:1984  12148.2  Europe/Stockholm:1984  12148.6  Europe/Vaduz:1981  12395.2  Europe/Vaduz:1981  12395.6  Europe/Vaduz:1982  12396.2  Europe/Vaduz:1982  12396.6  Europe/Vaduz:1983  12397.2  Europe/Vaduz:1983  12397.6  Europe/Vaduz:1984  12398.2  Europe/Vaduz:1984  12398.6  Europe/Vienna:1981  12465.2  Europe/Vienna:1981  12465.6  Europe/Vienna:1982  12466.2  Europe/Vienna:1982  12466.6  Europe/Vienna:1983  12467.2  Europe/Vienna:1983  12467.6  Europe/Vienna:1984  12468.2  Europe/Vienna:1984  12468.6  Europe/Warsaw:1981  12646.2  Europe/Warsaw:1981  12646.6  Europe/Warsaw:1982  12647.2  Europe/Warsaw:1982  12647.6  Europe/Warsaw:1983  12648.2  Europe/Warsaw:1983  12648.6  Europe/Warsaw:1984  12649.2  Europe/Warsaw:1984  12649.6  Europe/Zurich:1981  12767.2  Europe/Zurich:1981  12767.6  Europe/Zurich:1982  12768.2  Europe/Zurich:1982  12768.6  Europe/Zurich:1983  12769.2  Europe/Zurich:1983  12769.6  Europe/Zurich:1984  12770.2  Europe/Zurich:1984  12770.6  MET:1981  12853.2  MET:1981  12853.6  MET:1982  12854.2  MET:1982  12854.6  MET:1983  12855.2  MET:1983  12855.6  MET:1984  12856.2  MET:1984  12856.6  MST7MDT:1981  12928.2  MST7MDT:1981  12928.6  MST7MDT:1982  12929.2  MST7MDT:1982  12929.6  MST7MDT:1983  12930.2  MST7MDT:1983  12930.6  MST7MDT:1984  12931.2  MST7MDT:1984  12931.6  PST8PDT:1981  13358.2  PST8PDT:1981  13358.6  PST8PDT:1982  13359.2  PST8PDT:1982  13359.6  PST8PDT:1983  13360.2  PST8PDT:1983  13360.6  PST8PDT:1984  13361.2  PST8PDT:1984  13361.6  WET:1981  13419.2  WET:1981  13419.6  WET:1982  13420.2  WET:1982  13420.6  WET:1983  13421.2  WET:1983  13421.6  WET:1984  13422.2  WET:1984  13422.6    Body: ,Arilas,closed,3,2013-11-07 12:05:02,2014-02-04 07:31:33,,Unit Test Failed,,,0,1
12993,moment/moment,1257,1 test failed. add:add across DST  10.1  ,    Client info      Date String   : Sat Nov 09 2013 09:36:36 GMT 0700  MST  Locale String : November 9  2013 at 9:36:36 AM MST Offset        : 420 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_9  AppleWebKit/537.71  KHTML  like Gecko  Version/7.0 Safari/537.71            add:add across DST  10.1   adding days over DST difference should result in the same hour      javascript // Expected 5 // Actual   6 6 == 5     ,onecreative,closed,3,2013-11-09 16:38:19,2013-12-12 21:45:35,,Unit Test Failed,,,0,1
12992,moment/moment,1258,1 test failed. lang:zh cn:calendar next week  1655.1  ,    Client info      Date String   : Sun Nov 10 2013 00:43:42 GMT 0100   rodkowoeuropejski czas stand.  Locale String : 10.11.2013 00:43:42 Offset        :  60 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/31.0.1650.48 Safari/537.36            lang:zh cn:calendar next week  1655.1   Today   7 days beginning of day      javascript // Expected      12   // Actual       12        12    ==       12        ,g00fy-,closed,9,2013-11-09 23:44:24,2013-11-13 21:00:47,,Unit Test Failed,,,0,1
12991,moment/moment,1259,Relative time: Individual seconds don t seem to be supported,In moment js  the relativeTime function doesn t seem to support individual seconds. Why can t the function look like this?      args = seconds === 1    [ s ]              seconds < 45    [ ss   seconds]              minutes === 1    [ m ]              minutes < 45    [ mm   minutes]...      This would allow for output like  26 seconds ago  ,henrywright,closed,2,2013-11-10 02:08:39,2013-11-13 07:21:53,,,,0,1
12990,moment/moment,1260,1 test failed. lang:zh cn:calendar next week  1655.1  ,    Client info      Date String   : Sun Nov 10 2013 18:39:17 GMT 0800  CST  Locale String : 2013 11 10    6:39:17 Offset        :  480 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_9_0  AppleWebKit/537.36  KHTML  like Gecko  Chrome/33.0.1704.0 Safari/537.36            lang:zh cn:calendar next week  1655.1   Today   7 days beginning of day      javascript // Expected      12   // Actual       12        12    ==       12        ,TooBug,closed,3,2013-11-10 10:40:59,2013-11-13 21:02:03,,Unit Test Failed,,,0,1
12989,moment/moment,1261,Is negative value of day valid?,    var a=moment       year:2013      month:11 1      day: 3   ;  // now a is a valid moment object  a.format  YYYY MM DD  ;  // but now it becomes invalid.     ,TooBug,closed,4,2013-11-10 10:44:54,2013-11-12 23:37:18,,,,0,1
12988,moment/moment,1262,1 test failed. lang:zh cn:calendar next week  1655.1  ,    Client info      Date String   : Sun Nov 10 2013 12:13:38 GMT 0000  Hora est ndar GMT  Locale String : 10/11/2013 12:13:38 Offset        : 0 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/30.0.1599.101 Safari/537.36            lang:zh cn:calendar next week  1655.1   Today   7 days beginning of day      javascript // Expected      12   // Actual       12        12    ==       12        ,franciscolopezsanchez,closed,1,2013-11-10 12:12:19,2013-11-13 21:00:58,,Unit Test Failed,,,0,1
12987,moment/moment,1263,Allow a different timezone for when in or out of DST,Currently the data generate for timezones shows GMT/BST as the abbreviation for Europe/London. The problem is that this is misleading because we re no longer in BST. It would be good to have a method where the abbreviation is shown as GMT if out of daylight saving  and BST if in  Thanks  Ed ,mKoder,closed,4,2013-11-12 16:32:22,2013-11-13 20:15:42,,,,0,1
12986,moment/moment,1264,Add all moment static functions to deprecated global export,Fixes  1239 ,ichernev,closed,3,2013-11-13 08:04:22,2013-11-22 18:23:08,,,,1,1
12985,moment/moment,1265,Properly use global this to export moment,Don t assume this is bound to the global scope in local functions.  Related to  1179  @Xotic750 you mentioned something about returns on every code path. I didn t find such an option in jshint. Can you double check and maybe propose other jshint options we should enforce to make moment strict mode compatible? ,ichernev,closed,4,2013-11-13 08:13:47,2013-11-13 20:49:48,,,,1,1
12984,moment/moment,1266,Requirejs is overriding moment   when minified,Hi   I m not sure wether or not this is the right repo to post this in  maybe it s more a requirejs bug   but maybe you can help. I m using moment.js with require.js  and everything works fine.  But when I minify all my modules using the r.js optimizer  it overrides  moment    in my code. For example when I use:   moment     it becomes  o   . Because it cleans up variable names etc. Do you have any idea how you can prevent this form happening?  I have optimizeAllPluginResources set to true in my build file for r.js. And I m using the latest version of moment.js and require.js 2.1.8 ,Stenvdb,closed,2,2013-11-13 16:43:43,2013-11-13 16:49:22,,,,0,1
12983,moment/moment,1267,Added Macedonian Language Support,,B0k0,closed,4,2013-11-13 22:08:27,2013-12-07 11:25:33,,,,1,1
12982,moment/moment,1268,Fix hour format when longDateFormat is used with brazilian language,In brazilian portuguese  when you write a date  it s normal to have   s  before the hour.  The method calendar   already returns the correct format  for example  as showed on docs :  Amanh   s 11:53 . ,ericsaboia,closed,16,2013-11-14 14:04:27,2014-02-04 07:47:54,,,,1,1
12981,moment/moment,1269,No way to  easily  compare the date part of 2 moments,I have been digging through docs and racking my brain  but it seems that taking two moment objects and comparing just the date  whole date  to see if they represent the same exact day is not supported directly.  There should be a simple way to do this. ,tommck,closed,11,2013-11-14 20:29:19,2013-11-14 21:53:07,,,,0,1
12980,moment/moment,1270,Incorrect timezone display,I am using Moment Version 2.0.0 and for some reason i don t want to update version to 2.0.1 or above.  When i am using following code block; it shows me the correct timezone offset that is  5:30      moment  .format  Z  ;      But when i am trying with below code its NOT showing me  0530 instead it showed me    0550      moment  .format  ZZ  ;      So  am i missing something here. I got the solution by using below code; But i don t recommend to use regular expression. Is there any Moment solution for this.       new Date  .toTimeString  .match / [   ][0 9]   s/ [1]      I also tried with updated moment 2.4 and found that for some timezone offset it working as expected but not for  5:30 or might not for all.  I have also added [http://jsfiddle.net/hegdeashwin/Jf3Nx/2/] for testing perpose.  NOTE: Before running this fiddle; Change your Time Zone to  UTC 05:30  Chennai  Kolkata  Mumbai  New Delhi  Thanks ,ghost,closed,2,2013-11-15 05:06:48,2013-11-18 05:52:41,,,,0,1
12979,moment/moment,1271,Adds timer API,Patch for  1073. ,dbkaplun,closed,4,2013-11-15 05:11:08,2013-11-23 10:24:20,,,,1,1
12978,moment/moment,1272,Use performance.now when available to get more accurate current time for moment  ,,dbkaplun,closed,3,2013-11-15 05:15:53,2013-12-08 03:24:03,,,,0,1
12977,moment/moment,1273,Update pl.js,Added plurar version for seconds. ,MarcBanc,closed,0,2013-11-15 14:41:25,2013-11-15 15:45:23,,,,1,1
12976,moment/moment,1274,Romanian: fix short month names,These changes should be made  I ll create a pull request soon : feb  > febr   http://dexonline.ro/definitie/februarie   mar  > mart   http://dexonline.ro/definitie/martie   sep  > sept   http://dexonline.ro/definitie/septembrie   noi  > nov   http://dexonline.ro/definitie/noiembrie    Links to online Romanian dictionary  search for  abr.    abbreviation .  I ll create a pull request soon.  LE: added all of the linkes ,DamianFekete,closed,1,2013-11-16 14:34:31,2014-02-04 07:50:36,,Language,,,0,1
12975,moment/moment,1275,Romanian: add . to short month names,Romanians use  .  to show abbreviations  so it should be  ian.  instead of  ian   for January   Pull request coming... ,DamianFekete,closed,1,2013-11-16 14:43:16,2014-02-04 07:50:52,,Language,,,0,1
12974,moment/moment,1276,Julian Day support missing,I think Moment.js is missing a method to convert a datetime to a [Julian Day] http://en.wikipedia.org/wiki/Julian_day . The JD system is used by astronomers. ,bartolsthoorn,closed,8,2013-11-16 14:48:26,2014-02-04 07:53:35,,,,0,1
12973,moment/moment,1277,Fix  1233  Albanian   1274  Romanian   1275  Romanian ,,DamianFekete,closed,5,2013-11-16 14:50:27,2013-11-18 07:07:00,,,,1,1
12972,moment/moment,1278,ZZ formats partial hour zones like 0550 instead of 0530,This is in response to  1270  Is this a proper fix  or I m getting it wrong? ,ichernev,closed,1,2013-11-18 02:31:31,2013-12-03 18:31:15,,,,1,1
12971,moment/moment,1279,isValid   for leap years  Feb 29th  returns false,Hi guys  awesome library.   I ve noticed that  moment  d: 29  M: 1  Y: 2016  .isValid    returns false where it should be true since 2016th is a leap year and February 29th is a valid date. ,n1ghtmare,closed,3,2013-11-18 15:29:17,2013-11-18 17:06:29,,,,0,1
12970,moment/moment,1280,Ensure module.config   returns an object   for Dojo compat,When used with the Dojo loader    module.config    is not required to return an empty object when no config properties are present   causing the define block to throw an error. ,greenimpala,closed,1,2013-11-18 15:48:10,2013-11-19 18:23:47,,,,1,1
12969,moment/moment,1281,Add and subtract business days,I d like the functionality to add and subtract business days. I suggest using the shortcode:  b  and the long name  businessDay       //2 business days from now. moment  .add 2   b   moment  .add 2   businessDay        We could use similar semantics to:  http://docs.scipy.org/doc/numpy dev/reference/arrays.datetime.html business day functionality  It looks like adding this as a plugin would be quite difficult. Would this be appropriate functionality for the core library? ,pablojim,closed,6,2013-11-18 17:13:54,2013-12-08 03:26:56,,,,0,1
12968,moment/moment,1282,Fix   improve estonian locale,This PR improves the estonian locale. I have also added a few new tests to make sure  from      fromNow  work as expected. ,ragulka,closed,6,2013-11-19 08:25:23,2013-11-20 15:48:01,,,,1,1
12967,moment/moment,1283,Update readme.md,fix wiki syntax error ,yukulele,closed,1,2013-11-19 23:22:22,2013-11-19 23:34:55,,,,1,1
12966,moment/moment,1284,1 test failed. add:add across DST  10.1  ,    Client info      Date String   : Wed Nov 20 2013 07:05:10 GMT 0700  MST  Locale String : November 20  2013 at 7:05:10 AM MST Offset        : 420 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_9  AppleWebKit/537.71  KHTML  like Gecko  Version/7.0 Safari/537.71            add:add across DST  10.1   adding days over DST difference should result in the same hour      javascript // Expected 5 // Actual   6 6 == 5     ,dclove,closed,1,2013-11-20 14:07:36,2013-12-12 21:45:41,,Unit Test Failed,,,0,1
12965,moment/moment,1285,Documentation: file sizes are approx 3x bigger than announced on the main page,E.g. announced:  moment.min.js 8.9kb   real: 24KB  announced  moment with langs.min.js 30.6kb   real:  109KB ,fhurta,closed,3,2013-11-20 15:01:38,2013-12-02 09:28:59,,Documentation,,,0,1
12964,moment/moment,1286,Rename language to locale,Language/lang should be renamed to locale  because we are not really dealing with languages here. The same language can be used in different countries  but still have different requirements for date formatting depending on the location.  This is exactly what locales are for   they are a combination of language and location. The current language system actually already uses locales  but they are called languages  which is wrong and may cause confusion. ,ragulka,closed,1,2013-11-20 15:13:05,2013-11-20 16:12:05,,,,1,1
12963,moment/moment,1287,Rename language/lang to locale,Language/lang should be renamed to locale  because we are not really dealing with languages here. The same language can be used in different countries  but still have different requirements for date formatting depending on the location.  This is exactly what locales are for   they are a combination of language and location. The current language system actually already uses locales  but they are called languages  which is wrong and may cause confusion.  Of course  this would cause some backwards incompatibility  so perhaps it makes sense to alias  locale  function to  lang  for some time. ,ragulka,closed,4,2013-11-20 16:21:49,2013-11-27 08:20:57,,Enhancement,,,1,1
12962,moment/moment,1288,Missing localized format for time including seconds,The localization feature is pretty handsome. But im missing the possibilty to format a timestamp as localized time with seconds.  There is:      javascript moment  .format  LT  ; //  8:30 PM       But I need something like this in a localized format:      javascript moment  .format  h:mm:ss a  ; //  8:30:50 pm      ,mischah,closed,3,2013-11-20 20:09:38,2013-11-22 18:29:57,,,,0,1
12961,moment/moment,1289,WeeksInYear?,Hi.  Is there a Weeks in Year function?  We use this internally at the moment:         weekCount: function year                var m = moment  year 1      01 04 00:00  000    YYYY MM DD HH:mm Z  ;             m.subtract  days   7 ;             return m.isoWeek  ;            Kasper ,kasperhartwich,closed,8,2013-11-21 09:45:47,2014-02-04 09:02:53,,New Feature,todo,,,0,1
12960,moment/moment,1290,Regression: moment  2013 11 21T10:10:56 Z  .calendar  ; => invalid date,// moment.js // version : 1.7.2  > moment  2013 11 21T10:10:56 Z  .calendar  ; > <  Today at 11:10 AM   // moment.js // version : 2.4.0  > moment  2013 11 21T10:10:56 Z  .calendar   > <  Invalid date  ,gobijan,closed,2,2013-11-21 10:22:15,2013-11-22 01:56:51,,,,0,1
12959,moment/moment,1291,Update it.js, a few seconds  translate to  alcuni secondi  ,antonellopasella,closed,4,2013-11-21 11:01:31,2013-11-26 09:37:22,,Language,Needs tests,,,1,1
12958,moment/moment,1292,Fix plural function for Polish language,Current version: moment.duration 112   years  .humanize  ; // 112 lata moment.duration 213   years  .humanize  ; // 213 lata  New version: moment.duration 112   years  .humanize  ; // 112 lat moment.duration 213   years  .humanize  ; // 213 lat  Real examples: https://pl.wikipedia.org/wiki/Lista_najstarszych_ludzi_w_Polsce ,And-re,closed,4,2013-11-21 13:12:54,2013-11-23 20:22:44,,,,1,1
12957,moment/moment,1293,make moment.js compatible with older version of requirejs,Using older version of requirejs  1.0.4   module.config function doesn t exists and moment.js crashes on load.  This PR is so make momentjs be compatible with older version of requirejs ,vafada,closed,1,2013-11-21 22:34:55,2013-11-21 23:26:11,,,,1,1
12956,moment/moment,1294,Handle iso format where Z is prefixed with spaces,In response to  1290 ,ichernev,closed,2,2013-11-22 00:36:48,2013-11-22 01:56:33,,,,1,1
12955,moment/moment,1295,Using moments as an argument for jQuery s param,  .param  moment: new moment      throws  TypeError: Object [object global] has no method  format  . Do you think this should be supported or not? ,DawidJanczak,closed,5,2013-11-22 10:11:40,2013-11-22 17:53:49,,,,0,1
12954,moment/moment,1296,correct the command to install grunt,,maiis,closed,1,2013-11-22 13:15:41,2013-11-22 17:22:17,,,,1,1
12953,moment/moment,1297,Supported way to retrieve language data?,There should be something in the API to retrieve the localized formats from the language data.  For example  if I have:      moment  01/02/2013    L        I d like to know based on the current global language settings if this is MM/DD/YYYY or DD/MM/YYYY.  I might want to display that near a textbox so the user has a hint of what to enter.  I can get at this right now with:      moment.langData  ._longDateFormat[ L ]      But that seems like a hack.  There should be something built in. ,mj1856,closed,6,2013-11-23 04:40:38,2013-11-27 08:20:26,,Documentation,,,0,1
12952,moment/moment,1298,1 test failed. lang:zh cn:calendar next week  1655.1  ,    Client info      Date String   : Sun Nov 24 2013 00:43:36 GMT 0300  AST  Locale String : 11/24/2013 12:43:36 AM Offset        :  180 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_8_4  AppleWebKit/537.36  KHTML  like Gecko  Chrome/31.0.1650.57 Safari/537.36            lang:zh cn:calendar next week  1655.1   Today   7 days beginning of day      javascript // Expected      12   // Actual       12        12    ==       12        ,cdes,closed,1,2013-11-23 21:44:46,2013-11-23 21:58:52,,Unit Test Failed,,,0,1
12951,moment/moment,1299,Adding a durations to a date does not always work as expected,For example  if you try to add 1 month to January 15  2010  you expect to get February 15  2010. However  since 1 month is interpreted to be exactly 30 days the result yielded is February 14  2010.  It would be great to be able to manipulate dates more cleanly like this. ,ZainRizvi,closed,2,2013-11-24 09:31:28,2013-11-24 11:55:30,,,,0,1
12950,moment/moment,1300,1 test failed. lang:zh cn:calendar next week  1655.1  ,    Client info      Date String   : Sun Nov 24 2013 12:26:34 GMT 0500  EST  Locale String : 11/24/2013 12:26:34 PM Offset        : 300 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_8_5  AppleWebKit/537.36  KHTML  like Gecko  Chrome/31.0.1650.57 Safari/537.36            lang:zh cn:calendar next week  1655.1   Today   7 days beginning of day      javascript // Expected      12   // Actual       12        12    ==       12        ,Bearluga,closed,1,2013-11-24 17:26:54,2013-11-24 17:30:06,,Unit Test Failed,,,0,1
12949,moment/moment,1301,Add cross browser testing with Karma and SauceLabs,_This pull request adds cross browser testing facilities thanks to [Karma] http://karma runner.github.io/0.10/index.html  with access to various virtualized platforms and browsers thanks to [Open Sauce] https://saucelabs.com/opensource  plugged to current Travis CI configuration._   makes nodeunit test suite browser compatible with bc1ff64  26ae977 and the file [ test/browser.js ] https://github.com/moment/moment/pull/1301/files diff 3    adds karma and karma nodeunit adapter in dfaae74: make test run on  local  chrome   adds saucelabs support in c43e0d6 and add a task to make tests run on various browsers   adds necessary configuration to make karma sauce run on Travis   but needs that _you_ finish the integration.  Test suite can be run on a local Chrome with  grunt test:browser .  To run test suite on saucelabs you need to create an open source account on https://saucelabs.com/opensource and export your username/accesskey in env variables:      bash export SAUCE_USERNAME= your username  export SAUCE_ACCESS_KEY= your accesskey       then  run  grunt test:sauce browser  that will run tests on various browsers: firefox on linux  ie8  ie9  safari on OSX and chrome on winxp.  To finish the integration for Travis  you need to follow this guide: https://saucelabs.com/opensource/travis and add encrypted username/accesskey to [ .travis.yml ] https://github.com/moment/moment/pull/1301/files diff 354f30a63fb0907d4ad57269548329e3R7 .    Caveats:     all tests currently fail on ie8 with  TypeError:  moment  is null or not an object . Need to investigate why.   maintaining this [ test/browser.js ] https://github.com/moment/moment/pull/1301/files diff 3  file might be cumbersome but it looked like to be the simplest way to make the nodeunit test suite compatible with browser.     karma@>0.11 is required to make 3  concurrent browsers work on saucelabs. However there is currently a version issue on grunt karma  https://github.com/karma runner/grunt karma/issues/75  that prevents to install karma@>0.11. So I had to temporarily [get grunt karma from its github repo] https://github.com/moment/moment/pull/1301/files diff b9cfc7f2cdf78a7f4b91a753d10865a2R50 .   => 24db667     it will be possible to get the [saucelabs badges] https://saucelabs.com/docs/status images  once https://github.com/karma runner/karma sauce launcher/pull/11 gets merged   => merged  but badges are a bit useless since [there is no per branch status images] http://support.saucelabs.com/entries/24285527 Per build eg per branch status images  ,alexstrat,closed,14,2013-11-24 17:48:21,2014-01-04 19:11:32,,,,1,1
12948,moment/moment,1302,simplifying diff,This fixes  1227. That line of code has bugged me for a while  because I don t understand it. It doesn t make sense for a couple reasons. We should just leave the moments as they are and let the math work itself out. It seems to work.  You can verify the fix by changing your system clock to the day before the fall DST change  Nov 2 in the US . All the tests will pass.  There are still some test failures for the spring time change  but they re testing issues  as far as I can tell  caused by 2:00 not actually existing. ,icambron,closed,2,2013-11-25 02:01:25,2013-11-26 21:25:10,,,,1,1
12947,moment/moment,1303,Strict tokens,Fixes  1196. ,icambron,closed,1,2013-11-25 17:42:04,2013-11-26 21:23:37,,,,1,1
12946,moment/moment,1304,add support for quarters in format string,If the current date is November 25th 2013   moment  .format  [Q]Q YYYY    should give   Q4 2013   Currently I don t see any way to print the quarter using just format strings. ,ehartford,closed,7,2013-11-25 23:06:01,2013-11-26 20:02:54,,New Feature,,,0,1
12945,moment/moment,1305,Clarify isoWeekday   documentation,I think we should rephrase the documentation to clarify what isoWeekday does because at least one other person  excluding myself  has thought it sets the starting day of the week instead of changing the date.  Current: Gets or sets the ISO day of the week with 1 being Monday and 7 being Sunday.  Proposed: Gets or sets the date according to the ISO day of the week with 1 being Monday and 7 being Sunday.  Thanks  ,cmdoptesc,closed,2,2013-11-26 02:05:33,2013-11-27 07:26:38,,Documentation,,,0,1
12944,moment/moment,1306,feature request: human readable time zone,with  Z  and  ZZ  format  we can get time offset from UTC. and then human readable format is also a common feature. like  CST  or           as native javascript Date toString   does.      javascript new Date   Tue Nov 26 2013 10:58:59 GMT 0800              ,zh99998,closed,1,2013-11-26 02:59:51,2013-11-26 06:56:22,,,,0,1
12943,moment/moment,1307,Updated tests,Tests for PR  1291  ,antonellopasella,closed,1,2013-11-26 09:33:29,2013-11-26 09:37:05,,,,1,1
12942,moment/moment,1308,Fixed translation for  few seconds  to  alcuni secondi ,,antonellopasella,closed,1,2013-11-26 09:48:09,2013-11-26 15:38:17,,,,1,1
12941,moment/moment,1309,Incorrect examples in documentation,The last two examples in [ parsing/array] http://momentjs.com/docs/ /parsing/array/  is incorrect.       javascript moment [2010  11  31] .isValid  ; // false  not a real day  moment [2010  2  29] .isValid  ; // false  not a leap year       month is zero indexed  so they should be valid. ,liunian,closed,2,2013-11-26 10:29:26,2013-11-27 07:25:22,,,,0,1
12940,moment/moment,1310,2 tests failed. create:string with format   years  35.4  week_year:weekday first day of week Sunday  dow 0   248.5  ,    Client info      Date String   : Tue Nov 26 2013 12:22:58 GMT 0000  GMT  Locale String : Tue Nov 26 12:22:58 2013 Offset        :  60 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10.9; rv:25.0  Gecko/20100101 Firefox/25.0            create:string with format   years  35.4   70 > 1970      javascript // Expected 1970 // Actual   1969  1969  ==  1970             week_year:weekday first day of week Sunday  dow 0   248.5   Jan  1 1970 is Thursday     4th day      javascript // Expected 4 // Actual   3 3 == 4     ,Sergio-Mira,closed,5,2013-11-26 12:23:20,2014-06-05 08:06:19,,Troubleshooting,Unit Test Failed,,,0,1
12939,moment/moment,1311,Add quarter  q  to format string,I added a  q  to the format string that will output the quarter.   January   March will output 1.   April   June will output 2.   July   September will output 3.   October   December will output 4. I added a test in format.js called  quarter formats  ,ehartford,closed,5,2013-11-26 18:57:43,2013-11-26 19:46:15,,,,1,1
12938,moment/moment,1312,include jspm package.json config,This configuration makes the module play a little more nicely with jspm   reducing the download time and ensuring the source is delivered minified with source maps.  See an example here of it being served over the CDN   http://jsbin.com/EHoyItAj/1/edit.  With the download tool  one would do  jspm install moment .  Any questions just ask. Appreciated for the time to look into this. ,guybedford,closed,4,2013-11-26 19:47:56,2013-11-28 07:03:30,,,,1,1
12937,moment/moment,1313,1 test failed. is_before:is before day  147.10  ,    Client info      Date String   : Wed Nov 27 2013 08:44:20 GMT 1100  EST  Locale String : November 27  2013 at 8:44:20 AM GMT 11 Offset        :  660 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_9  AppleWebKit/537.71  KHTML  like Gecko  Version/7.0 Safari/537.71            is_before:is before day  147.10   exact end of day      javascript // Expected false // Actual   true true == false     ,shcarrico,closed,1,2013-11-26 21:45:55,2014-06-05 08:08:32,,Troubleshooting,Unit Test Failed,,,0,1
12936,moment/moment,1314, moment  2014/01/26   yyyy/MM/DD  .toString   gives date in 2013,run   moment  2014/01/26   yyyy/MM/DD  .toString    expected output  Sat Jan 26 2014 00:00:00  actual output  Sat Jan 26 2013 00:00:00  ,acavailhez,closed,1,2013-11-26 23:02:57,2013-11-26 23:05:45,,,,0,1
12935,moment/moment,1315,Add option to enable strict parsing by default,Just found out about the great improvements made in  913.  Would it be have an option that makes strict parsing the default? ,tp,closed,2,2013-11-27 08:35:08,2013-11-29 09:49:09,,,,0,1
12934,moment/moment,1316,Fix Italian relativeTime,The Italian translation for the relative time  a few seconds  is just  secondi    seconds  . It s quite unclear: let s translate it better  with  qualche secondo    a few seconds  . ,mlocati,closed,2,2013-11-27 10:55:38,2013-11-27 15:16:53,,,,1,1
12933,moment/moment,1317,Changed longDateFormat of LT a L to right format used in Czech Republic,See http://en.wikipedia.org/wiki/Date_and_time_notation_in_the_Czech_Republic ,JakubOnderka,closed,3,2013-11-27 19:43:24,2014-01-18 00:37:20,,Language,,,1,1
12932,moment/moment,1318,empty string in moment and checking if it is valid returns error. moment    .isValid  ;  //  => error,Passing empty string or null in moment and then checking if it is valid returns error. should probably return false.      javascript moment    .isValid  ;    // error moment null .isValid  ;    // error     ,nikolas6,closed,2,2013-11-28 04:17:13,2013-11-28 05:13:37,,,,0,1
12931,moment/moment,1319,Added serbian  rs  translation.,,limonte,closed,4,2013-11-28 14:01:19,2013-11-29 16:51:25,,,,1,1
12930,moment/moment,1320,Invalid parsing string by custom format,Code      JS moment   17:04    DD.MM.YYYY HH:mm  .format        Actual:       0000 04 17T00:00:00 08:00       Expected:       Invalid format      ,efreeze,closed,2,2013-11-29 09:11:44,2013-12-02 09:27:52,,,,0,1
12929,moment/moment,1321,Bad parsing from french string,moment  4 d cembre 2013   outputs  Invalid date  but moment  4 decembre 2013   works...  Thx ,tavietonchien,closed,1,2013-12-01 20:15:23,2013-12-01 22:47:09,,,,0,1
12928,moment/moment,1322,display calendar time without  at xx:xx ,please add option to display calendar time without  at xx:xx   thx ,tavietonchien,closed,2,2013-12-01 20:19:12,2013-12-08 00:30:52,,,,0,1
12927,moment/moment,1323,diff between utc and local failed,Locale is Asia/Kolkata IST      Testing diff.js......No DST? ..F.... >> diff   diff between utc and local >> Message: year diff >> Error: 0 == 1 >> at Object.exports.diff.diff between utc and local  test/moment/diff.js:173:14   >> diff   diff between utc and local >> Message: month diff >> Error: 1 == 2 >> at Object.exports.diff.diff between utc and local  test/moment/diff.js:174:14   >> diff   diff between utc and local >> Message: day diff >> Error: 2 == 3 >> at Object.exports.diff.diff between utc and local  test/moment/diff.js:175:14   >> diff   diff between utc and local >> Message: week diff >> Error: 2 == 3 >> at Object.exports.diff.diff between utc and local  test/moment/diff.js:176:14      ,tk120404,closed,7,2013-12-02 03:57:07,2013-12-23 06:18:36,,Bug,,,0,1
12926,moment/moment,1324,tamil translation,Added tamil translation for moment ,tk120404,closed,1,2013-12-02 04:33:02,2013-12-02 07:41:13,,,,1,1
12925,moment/moment,1325,format returns one week less for years 0   100,Why is  m  0098 52   YYYY WW  .format  YYYY WW   ===  0098 51  . Between year 0 and 100 format  YYYY WW   returns one week less than actually set. Is this a bug? ,luka5,closed,3,2013-12-02 12:49:42,2013-12-13 18:46:35,,Bug,,,0,1
12924,moment/moment,1326,Italian months should not be written in upper case.,This links proves it: http://wiki.answers.com/Q/Are_the_Italian_months_written_in_upper_case slide2 Also my native italian colleague  translator  says exactly the same.  Can I just send a pull request or somebody needs to approve it  any italian devs here? . ,kmorcinek,closed,5,2013-12-03 12:02:08,2014-06-05 12:50:24,,Language,todo,,,0,1
12923,moment/moment,1327,FQ moment.unix   check for  partial seconds .,Hi   I have a UX time stamp which already includes  partial seconds : 1386134133000.  This is what the docs says:   This is implemented as  moment timestamp   1000    so partial seconds in the input timestamp are included.   var day = moment.unix 1318781876.721 ;    Link to the docs: http://momentjs.com/docs/ /parsing/unix timestamp/  Any chance to make moment.unix   check if the time stamp already includes  partial seconds ?  Because now I have to divide by 1000 to get a valid date time object. See this fiddle for demonstration of this  issue :  http://jsfiddle.net/zLL3g/  The first input field  after converting  shows a year far in the future  45894   while the second input field shows 2013.  If anything is not clear  let me know and i ll explain more. ,Yustie,closed,4,2013-12-03 13:04:28,2013-12-03 18:34:58,,,,0,1
12922,moment/moment,1328,Setting day of week to 1 prevents correct formatting of  Do ,Under normal usage using moment  .format  Do   results in the documented results i.e. _2nd_ or _26th_. However  specifying a day of week using:       moment.lang  monday lang    week:  dow: 1   ;      will result in moment  .format  Do   producing unexpected output. The output is seems to be essentially the same as using moment  .format  D    Example: http://jsfiddle.net/SH86a/ ,aaronchilcott,closed,4,2013-12-03 22:58:15,2014-06-05 08:33:08,,Bug,,,0,1
12921,moment/moment,1329,Armenian language,,vhpoet,closed,3,2013-12-04 05:00:36,2014-01-04 19:12:17,,Language,Needs tests,,,1,1
12920,moment/moment,1330,Dropping unused variables,When working in another project I noticed three WARNs from UglifyJS2  using   cm  arguments  which originated from  moment.js  v2.4.0; each was of the format:  WARN: Dropping unused variable _VAR_ [_path_/moment.js:_line_ _column_]   Therefore  this Pull Request offers dropping some unused variables from the  moment.js  code in the  develop  branch. There are no new/changed unit tests  as there are no feature/bug changes requiring new test cases.  I was able to perform  grunt  before and after the changes  and there has been no change in output; both report:      Running  jshint:all   jshint  task >> 164 files lint free.  Running  nodeunit:all   nodeunit  task Testing ar ma.js......................OK Testing ar.js......................OK Testing bg.js......................OK Testing br.js...............OK Testing bs.js......................OK Testing ca.js.....................OK Testing cs.js........................OK Testing cv.js......................OK Testing cy.js.....................OK Testing da.js..................OK Testing de.js.....................OK Testing el.js......................OK Testing en au.js......................OK Testing en ca.js......................OK Testing en gb.js......................OK Testing en.js.....................OK Testing eo.js......................OK Testing es.js......................OK Testing et.js......................OK Testing eu.js......................OK Testing fa.js......................OK Testing fi.js......................OK Testing fo.js..................OK Testing fr ca.js.....................OK Testing fr.js.....................OK Testing gl.js......................OK Testing he.js.....................OK Testing hi.js.......................OK Testing hr.js......................OK Testing hu.js......................OK Testing id.js.....................OK Testing is.js......................OK Testing it.js.....................OK Testing ja.js.....................OK Testing ka.js......................OK Testing ko.js......................OK Testing lb.js.........OK Testing lt.js......................OK Testing lv.js......................OK Testing ml.js.......................OK Testing mr.js.......................OK Testing ms my.js......................OK Testing nb.js......................OK Testing ne.js.......................OK Testing nl.js.......................OK Testing nn.js......................OK Testing pl.js......................OK Testing pt br.js.....................OK Testing pt.js.....................OK Testing ro.js......................OK Testing rs.js......................OK Testing ru.js...........................OK Testing sk.js........................OK Testing sl.js......................OK Testing sq.js......................OK Testing sv.js......................OK Testing ta.js......................OK Testing th.js.....................OK Testing tl ph.js.....................OK Testing tr.js......................OK Testing tzm la.js......................OK Testing tzm.js......................OK Testing uk.js.......................OK Testing uz.js......................OK Testing vn.js......................OK Testing zh cn.js.......................OK Testing zh tw.js......................OK Testing add_subtract.js..........OK Testing create.js.........................................OK Testing days_in_month.js..OK Testing diff.js.............OK Testing duration.js.................................OK Testing format.js......................OK Testing getters_setters.js............OK Testing invalid.js...OK Testing is_after.js........OK Testing is_before.js........OK Testing is_moment.js.OK Testing is_same.js........OK Testing is_valid.js..................OK Testing lang.js.....................OK Testing leapyear.js.OK Testing listers.js....OK Testing min_max.js..OK Testing mutable.js..OK Testing normalizeUnits.js.OK Testing parsing_flags.js...........OK Testing preparse_postformat.js...OK Testing quarter.js.OK Testing sod_eod.js................OK Testing string_prototype.js.OK Testing utc.js.....OK Testing week_year.js..OK Testing weekday.js.........OK Testing weeks.js...............OK Testing zones.js.........................OK >> 21835 assertions passed  3350ms      ,mdxs,closed,1,2013-12-04 08:24:20,2013-12-04 08:30:54,,,,1,1
12919,moment/moment,1331,Short versions of from/fromNow,It would be really great to have a short version of the  from  and  fromNow  methods. So in addition to:      js var a = moment [2007  0  29] ; var b = moment [2007  0  28] ; a.from b  //  a day ago  a.from b  true  //  a day        you could call this:      js a.fromShort b  //  1d ago  a.fromShort b  true  //  1d      ,blixt,closed,3,2013-12-04 22:59:39,2013-12-13 18:47:17,,,,0,1
12918,moment/moment,1332,Two digit year format for localized formats?,The current  l  and  L  formats return a 4 digit year. Would it be possible to have additional formats to indicate that the year should be 2 digit? Something like:      js // Existing: moment  .format  l  ; // 9/4/1986 moment  .format  L  ; // 09/04/1986 // New: moment  .format  lx  ; // 9/4/86 moment  .format  Lx  ; // 09/04/86       Note: I don t know what character would make sense to put after  l   so I just put  x  to show what I mean.  ,blixt,closed,3,2013-12-04 23:12:38,2013-12-07 21:50:05,,,,0,1
12917,moment/moment,1333,jspm configuration adjustment,This makes a small adjustment for the new jspm configuration scheme being pushed out this week. This aligns the package configuration entirely with the RequireJS style jspm loader configuration so there is a 1 1 relationship between the package.json config and the loader config. ,guybedford,closed,7,2013-12-05 14:04:43,2013-12-05 16:08:03,,,,1,1
12916,moment/moment,1334,isValid return True for Invalid Case,For value =  08/2013  and format =  ddd MM/DD/YYYY  moment value format .isValid   return true.This is worng? ,arpit2438735,closed,3,2013-12-06 04:33:26,2013-12-06 06:21:03,,,,0,1
12915,moment/moment,1335,1 test failed. utc:creating with utc  242.1  ,    Client info      Date String   : Fri Dec 06 2013 12:23:09 GMT 0000  GMT  Locale String : 12/6/2013 12:23:09 PM Offset        : 0 User Agent    : Mozilla/5.0  X11; Linux i686  AppleWebKit/537.36  KHTML  like Gecko  Ubuntu Chromium/30.0.1599.114 Chrome/30.0.1599.114 Safari/537.36            utc:creating with utc  242.1   Calling moment.utc   should default to the current time      javascript // Expected true // Actual   false false == true     ,emrysr,closed,4,2013-12-06 12:25:19,2013-12-12 17:56:05,,Bug,Unit Test Failed,,,0,1
12914,moment/moment,1336, zone    should perhaps start parsing from the end or accepts a format,In the [doc] http://momentjs.com/docs/ /manipulating/timezone offset/    zone    is said to be able to parse for the first occurrence of [   ] d 2 :? d 2   but if moment is used to parse some strangely formatted string like  31 10 2012 00:00:00  08:00   since  zone    doesn t accept a format  its naive heuristic will think   2012  is a timezone offset and stops there. Calling  zone    again will return  1212. I think for more robust parsing for  zone     either both  parseZone  and  zone  should also accept a format or start parsing from the back as most formats will put it in the end anyway.  Also in a related note  how come a positive number stands for a negative offset and vice versa? If you are using this as a way to get the offset _away_ from UTC  is this an internal implementation that users simply shouldn t be aware of? This seems a little counter intuitive to me  but it s probably too late to change now.  Test case: > moment  31 10 2012 00:00:00  08:00  .zone  31 10 2012 00:00:00  08:00  .zone       1212 ,wyuenho,closed,4,2013-12-06 14:36:42,2013-12-12 18:11:53,,,,0,1
12913,moment/moment,1337,Add Macedonian Language,,B0k0,closed,1,2013-12-07 13:15:06,2013-12-07 21:30:30,,,,1,1
12912,moment/moment,1338,1 test failed. lang:zh cn:calendar next week  1655.1  ,    Client info      Date String   : Sun Dec 08 2013 17:51:54 GMT 0100  CET  Locale String : 8.12.2013 17:51:54 Offset        :  60 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_9_0  AppleWebKit/537.36  KHTML  like Gecko  Chrome/31.0.1650.63 Safari/537.36            lang:zh cn:calendar next week  1655.1   Today   7 days beginning of day      javascript // Expected      12   // Actual       12        12    ==       12        ,furier,closed,1,2013-12-08 16:52:15,2013-12-08 20:23:57,,Unit Test Failed,,,0,1
12911,moment/moment,1339,ordinal indicator,Hi  Is there any way I can get only the ordinal indicator for a particular date ? for eg for date 2014 01 01 should get  st   I tried moment  2014 01 01    YYYY MM DD   format  o  ; but it didnt worked.  Many thanks for your help. Chintan ,chintanbanugaria,closed,1,2013-12-09 14:15:20,2013-12-09 17:20:50,,,,0,1
12910,moment/moment,1340,Wrong File Encoding affecting all Internationalization in moment with langs.js ,The distributable file located in http://momentjs.com/downloads/moment with langs.js is build with a wrong encoding because in every international language it shows strange characters.  The case with the   SPANISH   one is like:      weekdays :  domingo_lunes_martes_mi  rcoles_jueves_viernes_s  bado .split  _         when it should be like:      weekdays :  domingo_lunes_martes_mi rcoles_jueves_viernes_s bado .split  _         Please help with this issue. Because it happen across all the file and all language internationalization text.  It also affect the minified file http://momentjs.com/downloads/moment with langs.min.js ,Carlos487,closed,9,2013-12-09 14:22:07,2013-12-10 01:08:05,,,,0,1
12909,moment/moment,1341,Chinese Language ,The short date format for chinese is wrong. It should be YYYY/M/D not  YYYY MMMD  ,djsergio,closed,7,2013-12-09 14:30:09,2013-12-11 08:20:15,,,,0,1
12908,moment/moment,1342,.npmignore: test,Tests don t need to be published to npm. It will just take up hard drive space. Sure. 1.3M might not be that much  but it s still something. ,Frost,closed,2,2013-12-09 16:23:55,2013-12-09 17:04:05,,,,1,1
12907,moment/moment,1343,Ignore tests when publishing to npm,,Frost,closed,1,2013-12-09 17:11:53,2013-12-09 17:16:59,,,,1,1
12906,moment/moment,1344,isValid   inconsistent behavior,moment  June 12  2012    MM/DD/YYYY  .isValid  : true moment  June 13  2012    MM/DD/YYYY  .isValid  : false  The occurs for all months and years and seems based on the change from the 12th to the 13th.  see fiddle: http://jsfiddle.net/p7pDk/4/ ,becush,closed,2,2013-12-09 21:19:14,2013-12-09 22:57:49,,,,0,1
12905,moment/moment,1345,2 tests failed. create:string with format   years  35.4  week_year:weekday first day of week Sunday  dow 0   248.5  ,    Client info      Date String   : Tue Dec 10 2013 21:30:15 GMT 0000  GMT  Locale String : Tue Dec 10 21:30:15 2013 Offset        :  60 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10.8; rv:25.0  Gecko/20100101 Firefox/25.0            create:string with format   years  35.4   70 > 1970      javascript // Expected 1970 // Actual   1969  1969  ==  1970             week_year:weekday first day of week Sunday  dow 0   248.5   Jan  1 1970 is Thursday     4th day      javascript // Expected 4 // Actual   3 3 == 4     ,robhadfield,closed,3,2013-12-10 21:30:30,2016-09-21 05:36:04,,Troubleshooting,Unit Test Failed,,,0,1
12904,moment/moment,1346,use YYYY MM DD for L in lang/zh cn.js,see the discussion in  1341 ,zenozeng,closed,1,2013-12-11 06:49:44,2013-12-11 08:19:57,,,,1,1
12903,moment/moment,1347,Fix zone parsing in potentially ambiguous cases  fixes  1336 ,This patch changes zone   and parseZone    so that zone tzString  now parses for timezones from the right  and parseZone   now uses _tmz data as specified by the format string  if available  and continues to fallback to zone originalInput  if not . ,pimterry,closed,3,2013-12-11 08:25:14,2013-12-17 06:13:50,,,,1,1
12902,moment/moment,1348,Fix zerofill for negative numbers,Check https://github.com/moment/moment/issues/1178 issuecomment 26106354 ,ichernev,closed,0,2013-12-11 08:59:52,2013-12-11 18:17:23,,,,1,1
12901,moment/moment,1349,toISOString supports long and negative years,ISO format supports negative an big years with a special  6 digit  always signed year. Check https://github.com/moment/moment/issues/1178 issuecomment 26106354 ,ichernev,closed,1,2013-12-11 09:20:22,2013-12-11 18:19:16,,,,1,1
12900,moment/moment,1350,Fix iso week parsing for small years,Apparently Date.UTC works only for years after 1900:  https://developer.mozilla.org/en US/docs/Web/JavaScript/Reference/Global_Objects/Date  To form an iso date  from any given year you should use an iso formatted string. That string doesn t need  Z  in the end ...  This is a fix for  1325 ,ichernev,closed,1,2013-12-11 18:33:09,2013-12-11 20:53:34,,,,1,1
12899,moment/moment,1351,Fix fragile UTC default time test  fixes  1335 ,Split the two tests up too  since it makes it all a little neater. ,pimterry,closed,1,2013-12-11 21:21:42,2013-12-12 17:56:05,,,,1,1
12898,moment/moment,1352,Parse string from specific moment instance,I ve been searching through the docs and source code and haven t been able to determine whether it s possible to parse a date string with an already instantiated moment instance. For example  I d like to create a moment instance with its language set; accomplished like so:      js var momentFr = moment  .lang  fr  ;      And then use that moment instance to always display dates/times with that language s setting. For example  this won t actually work because  parse    does not exist :      js momentFr.parse  2013 01 01T00:00:00 13:00  .calendar  ;      Is something like this possible?  _Note: I don t want to set  fr  as the default language. I d instead like to have separate moment instances._ ,mlmorg,closed,2,2013-12-12 06:26:05,2013-12-12 16:04:09,,,,0,1
12897,moment/moment,1353,Performance optimization,Switch checking  Object.prototype.toString  with  instanceof .  http://jsperf.com/tostring vs instance2of   instanceof  works much faster so if it s equals true second condition will be not executed. ,mikach,closed,3,2013-12-12 15:38:58,2013-12-12 16:47:12,,,,1,1
12896,moment/moment,1354,Update readme.md,Adding Welsh language was issue 1215 not 1214 ,robgallen,closed,1,2013-12-12 16:33:26,2013-12-12 17:56:37,,,,1,1
12895,moment/moment,1355,Quarterly format,  Quarterly format  I would very much like to contribute Quarterly formatting to moment. The format we use is basically of the expression Qx YYYY/ZZ. We use financial quarters  starting in April  so Jan 2013 would be  Q4 2012/13 .  The basic psuedo code is  assuming Jan = month 1 :   Quarter  initial  Q is retrieved from lang file  e.g.  Q  in English   Ch  in Welsh .   Quarter period x is worked out by looking at the month. 1 3=4  4 6=1  7 9=2  10 12=3  for financial quarterly format  at least .   If quarter period = 4  year = year   1.   Year format is 4 digit year  slash  2 digit year   1.  Whilst we use financial quarters  I can think of 2 more that might be desired: calendar  starting in Jan  so Jan 2013 = Q1 2013  and academic  starting in Sept  so Jan 2013 = Q2 2013/14 . These should all be possible by just setting a quarter to start in month 1  4 or 9.  Would this be useful? Where would I start? ,robgallen,closed,6,2013-12-12 16:57:37,2013-12-17 06:18:26,,,,0,1
12894,moment/moment,1356,1 test failed. add:add across DST  10.1  ,    Client info      Date String   : Thu Dec 12 2013 11:25:17 GMT 0800  PST  Locale String : December 12  2013 at 11:25:17 AM PST Offset        : 480 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_9  AppleWebKit/537.71  KHTML  like Gecko  Version/7.0 Safari/537.71            add:add across DST  10.1   adding days over DST difference should result in the same hour      javascript // Expected 5 // Actual   6 6 == 5     ,voltechs,closed,1,2013-12-12 19:25:34,2013-12-12 21:45:47,,Unit Test Failed,,,0,1
12893,moment/moment,1357,Stricter ISO Date Parser  Causes valid dates not to be parsed,I believe this is a result of https://github.com/moment/moment/pull/1092.  Moment no longer parses valid ISO Dates according to ISO 8601. Offset is suppose to be allowed in hh::mm or hh. If the minutes are not present moment identities it as a incorrect date.   2013 10 17 14:55:23 04  This causes postgres timestamp with time zone to no longer be parser by moment.  ,jeverden,closed,0,2013-12-13 20:37:20,2013-12-17 18:06:50,,,,0,1
12892,moment/moment,1358,Support 2 digit HH timezones as valid ISO 8601  fixes  1357 ,This updates the iso 8601 regex slightly to allow 2 digit timezones  [as specified in ISO 8601] http://www.cl.cam.ac.uk/ mgk25/iso time.html zone   to allow for inputs like:  2013 10 17 14:55:23 04 .  I ve also taken the liberty of dropping the  preliminary  from the comment above  since it s now been in since 1.6.0  coming up on 2 years ago. ,pimterry,closed,3,2013-12-15 18:41:54,2013-12-17 18:06:48,,,,1,1
12891,moment/moment,1359,1 test failed. lang:zh cn:calendar next week  1655.1  ,    Client info      Date String   : Sun Dec 15 2013 15:20:31 GMT 0600  Hora est ndar central  M xico   Locale String : 15/12/2013 15:20:31 Offset        : 360 User Agent    : Mozilla/5.0  Windows NT 6.3; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/31.0.1650.63 Safari/537.36            lang:zh cn:calendar next week  1655.1   Today   7 days beginning of day      javascript // Expected      12   // Actual       12        12    ==       12        ,maitret,closed,1,2013-12-15 21:20:50,2013-12-16 01:14:33,,Unit Test Failed,,,0,1
12890,moment/moment,1360,Russian abbreviations for days,moment.js pulls through Russian abbreviations for days that consist of 3 letters. Russian users have said that this does not make sense to a Russian user and an abbreviation using 2 letters would be less confusing for example:                                         . ,katieconway,closed,2,2013-12-16 10:35:08,2013-12-16 18:08:49,,,,0,1
12889,moment/moment,1361,parseZone / isSame inconsistency,Hello.  I am in  Europe/London  timezone:      javascript moment  .format   =>  2013 12 16T15:59:42 00:00       We have to make sure that whatever date we receive from AJAX calls will be displayed according to their set time zone  with the offset visible. We use  parseZone  to do that:      javascript moment.parseZone  2013 12 16T08:20:48 05:00  .format  YYYY MM DD HH:mm:ss  ZZ    =>  2013 12 16 08:20:48   0500        Using 2.4.0 momentjs  we observed that when using  parseZone   the  isSame  comparison with another date is not working  if the compared to date is not in the same time zone  even if the comparison would hold true:      javascript moment  2013 12 16T08:20:48  .isSame moment  2013 12 16     year   => true moment.parseZone  2013 12 16T08:20:48 05:00  .isSame moment  2013 12 16     year   => false moment  2013 12 16T08:20:48  .zone   05:00  .isSame moment  2013 12 16     year   => false moment  2013 12 16T08:20:48  .zone   05:00  .isSame moment  2013 12 16  .zone   05:00     year   => true      Please find the [fiddle here] http://jsfiddle.net/f44c6/1/ .  One workaround would be to convert both times to UTC before doing the comparison  but I feel that this behaviour is not intuitive.  Could the  isSame  code compare the dates using UTC by default  or is there a reason to not do so? ,sldblog,closed,2,2013-12-16 16:25:55,2013-12-23 06:10:42,,Bug,,,0,1
12888,moment/moment,1362,Meridiem Parser support for Korean,I found that almost of language datas can t support parse meridiem correctly now. I made a fix and test case for Korean language data.  before this fix:      // PM 2 value = moment     2     A h     ko  .format  hh  ; // => 02      with this fix:      // PM 2 value = moment     2     A h     ko  .format  hh  ; // => 14     ,jeeeyul,closed,1,2013-12-19 06:42:47,2013-12-21 03:21:58,,Language,,,1,1
12887,moment/moment,1363,YYYY MM DD with 3 digit year returns true for isValid  ,I notice if I do the following:  moment  013 01 01    YYYY MM DD  .isValid    it returns true but I d expect it to return false. ,mikec83,closed,4,2013-12-19 14:54:40,2013-12-20 17:47:21,,,,0,1
12886,moment/moment,1364,Fix issue link in readme,,mc10,closed,1,2013-12-20 01:40:58,2013-12-20 16:26:18,,,,1,1
12885,moment/moment,1365,Converting to JSON and back gives wrong date,I ran into a scenario where I was getting the start of the day  converting to JSON  then later creating a new moment object from the JSON string.  The new object is off by the timezone that you are in.  I think the following code illustrates what I m trying to say.       var m = moment  ;  var json = m.startOf  day  .toJSON  ;  var m2 = moment json ;   m.date   == m2.date  ;      The final line returns false in chrome but true in IE. ,mark-zacharias,closed,4,2013-12-20 03:49:54,2013-12-20 18:56:26,,Troubleshooting,,,0,1
12884,moment/moment,1366,Incorrect result with timezone constructor,    javascript // Generated by the website moment.tz.add       zones :           America/Los_Angeles : [              7:52:58   LMT 1883_10_18_12_7_2  7:52:58                8 US P sT 1946  8                8 CA P sT 1967  8                8 US P sT         ]           rules :           US : [             1918 1919 2 0 8 2 0 1 D               1918 1919 9 0 8 2 0 0 S               1942 1942 1 9 7 2 0 1 W               1945 1945 7 14 7 23 1 1 P               1945 1945 8 30 7 2 0 0 S               1967 2006 9 0 8 2 0 0 S               1967 1973 3 0 8 2 0 1 D               1974 1974 0 6 7 2 0 1 D               1975 1975 1 23 7 2 0 1 D               1976 1986 3 0 8 2 0 1 D               1987 2006 3 1 0 2 0 1 D               2007 9999 2 8 0 2 0 1 D               2007 9999 10 1 0 2 0 0 S         ]          CA : [             1948 1948 2 14 7 2 0 1 D               1949 1949 0 1 7 2 0 0 S               1950 1966 3 0 8 2 0 1 D               1950 1961 8 0 8 2 0 0 S               1962 1966 9 0 8 2 0 0 S         ]           links :      ;  console.log   moment  2013 12 25  .format    ; // Logs  2013 12 25T00:00:00 08:00  for me  console.log   moment  2013 12 25    America/Los_Angeles  .format      // Logs  0000 12 25T00:20:00 08:00  for me      The year disappears and the minutes are set to 20  from 0  when I attempt this. ,rgov,closed,1,2013-12-20 07:09:16,2013-12-20 07:10:37,,,,0,1
12883,moment/moment,1367,Make moment.js available as module for AngularJS,As I use moment in all angular apps i work on  I would be happy to inject it as angular dependency  without  angularizing  it for each project after each moment upgrade . ,ulfryk,closed,1,2013-12-20 09:46:08,2013-12-22 20:15:01,,,,0,1
12882,moment/moment,1368,Make moment.js available as module for AngularJS   1367 ,,ulfryk,closed,11,2013-12-20 10:03:20,2014-02-06 17:18:04,,,,1,1
12881,moment/moment,1369,expose tiny or mini value names for time entities,I am aware of the Twitter plugin  but that is not usable for a fully localized environment. So I was wondering if there is a way to get the  original   eg. internal values of the humanized time entities  so that I can translate them to a short abbreviation outside of momentjs. The solution of adapting the translations directly is no good for me  because in my application I need the longer versions as well.  Any thoughts? ,luksch,closed,1,2013-12-20 23:08:06,2014-02-06 17:18:48,,,,0,1
12880,moment/moment,1370,Bugfix/proper diff timezone correction,In calendar we need the start of today  in either local time or utc  zone  time. We can not assume that local time is the same as utc  current zone   because that changes with DST. ,ichernev,closed,1,2013-12-22 22:47:37,2013-12-22 22:59:03,,,,1,1
12879,moment/moment,1371,Fix isSame for differently zoned moments, isSame  uses  startOf  and then compares milliseconds  but this misses the case of different zones across the moments.  startOf  day    in one timezone is different than the other  so it was never successful. ,ichernev,closed,1,2013-12-23 06:09:30,2013-12-23 19:10:55,,,,1,1
12878,moment/moment,1372,3 tests failed. format:toISOString  112.2  format:toISOString  112.3  format:toISOString  112.4  ,    Client info      Date String   : Tue Dec 24 2013 11:28:22 GMT 0100  CET  Locale String : Tue Dec 24 11:28:22 2013 Offset        :  60 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10.9; rv:26.0  Gecko/20100101 Firefox/26.0            format:toISOString  112.2   ISO8601 format on big positive year      javascript // Expected  020123 10 09T20:30:40.678Z // Actual    020123 10 09T19:30:40.678Z   020123 10 09T19:30:40.678Z  ==   020123 10 09T20:30:40.678Z             format:toISOString  112.3   ISO8601 format on big positive year      javascript // Expected  000001 10 09T20:30:40.678Z // Actual    000001 10 09T19:30:40.678Z   000001 10 09T19:30:40.678Z  ==   000001 10 09T20:30:40.678Z             format:toISOString  112.4   ISO8601 format on big positive year      javascript // Expected  020123 10 09T20:30:40.678Z // Actual    020123 10 09T19:30:40.678Z   020123 10 09T19:30:40.678Z  ==   020123 10 09T20:30:40.678Z      ,jeroenp,closed,1,2013-12-24 10:30:35,2013-12-25 20:37:33,,Unit Test Failed,,,0,1
12877,moment/moment,1373,Fixed Catalan translation  lowercase for months and days of the week ,Months and days of the week should be in lowercase  see references and justification below . Changed both source and test code.   Catalan Wikipedia:      http://ca.wikipedia.org/wiki/Mes     http://ca.wikipedia.org/wiki/Setmana   Style Book  Pompeu Fabra University  Barcelona: http://www.upf.edu/leupf/07esc/65_3.htm   Guidelines  Barcelona University: http://www.ub.edu/slc/ffll/fitxes/Fitxa26.html ,guigrpa,closed,3,2013-12-25 19:36:58,2013-12-31 21:36:05,,,,1,1
12876,moment/moment,1374,Testing/sauce labs integration,This is a continuation of  1301  @alexstrat any comments? I already used this setup to test the latest release  so in terms of usability    it works  haven t tested the travis build hooks though .  A few tests fail right now  IE8 and Safari   these are being worked on  so ignore them :  ,ichernev,closed,6,2013-12-25 20:28:07,2013-12-29 09:49:07,,,,1,1
12875,moment/moment,1375,use module.hasOwnProperty exports  instead module.exports...,use module.hasOwnProperty exports  instead module.exports so it works with CJS to AMD converter ,n3o77,closed,4,2013-12-27 13:57:18,2013-12-27 17:09:07,,,,1,1
12874,moment/moment,1376,3 tests failed. format:toISOString  112.2  format:toISOString  112.3  format:toISOString  112.4  ,Not sure if it s being addressed already  so here it is:     Client info      Date String   : Fri Dec 27 2013 15:21:05 GMT 0100 Locale String : 27/12/2013 15:21:05 Offset        :  60 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64; rv:29.0  Gecko/20100101 Firefox/29.0            format:toISOString  112.2   ISO8601 format on big positive year      javascript // Expected  020123 10 09T20:30:40.678Z // Actual    020123 10 09T18:30:40.678Z   020123 10 09T18:30:40.678Z  ==   020123 10 09T20:30:40.678Z             format:toISOString  112.3   ISO8601 format on big positive year      javascript // Expected  000001 10 09T20:30:40.678Z // Actual    000001 10 09T18:30:40.678Z   000001 10 09T18:30:40.678Z  ==   000001 10 09T20:30:40.678Z             format:toISOString  112.4   ISO8601 format on big positive year      javascript // Expected  020123 10 09T20:30:40.678Z // Actual    020123 10 09T18:30:40.678Z   020123 10 09T18:30:40.678Z  ==   020123 10 09T20:30:40.678Z      ,MaDDmin,closed,1,2013-12-27 14:26:59,2013-12-27 16:15:23,,Unit Test Failed,,,0,1
12873,moment/moment,1377,better way to detect timezone?,Noticed on moment  .zone   you use  Date.prototype.getTimezoneOffset  but  I think function is inconsistent in browsers?  Relevant code is here: https://github.com/moment/moment/blob/develop/moment.js L2016  I have been getting different results from that function in different apps  even on the same browser.  I haven t figured out why yet but thought I would file an issue to gain some insight.  Found a few projects that try to deal with this like https://github.com/mde/timezone js  and http://pellepim.bitbucket.org/jstz/ but as far as I can tell neither of them helps with timezone detection besides using  getTimezoneOffset .  There is also this blog post which concurs that  getTimezoneOffset  is inconsistent with browsers and daylight savings. http://www.onlineaspect.com/2007/06/08/auto detect a time zone with javascript/  Is there is a better way to detect timezone/timezone offset?  I also looked into moment timezone  which does a better job but only allows you to pass in a string like  America/Sao_Paulo .  But you have the same problem with detection?  Does moment timezone not try to address the detection problem?  ,mandric,closed,3,2013-12-27 18:40:00,2013-12-27 20:30:22,,,,0,1
12872,moment/moment,1378,2 tests failed. create:parsing week and weekday information  50.50  is_before:is before day  150.10  ,    Client info      Date String   : Sat Dec 28 2013 21:56:23 GMT 1300  NZDT  Locale String : 28 December 2013 9:56:23 pm NZDT Offset        :  780 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_9_1  AppleWebKit/537.73.11  KHTML  like Gecko  Version/7.0.1 Safari/537.73.11            create:parsing week and weekday information  50.50   compare: small years work      javascript // Expected 0098 02 03 // Actual   0098 02 04  0098 02 04  ==  0098 02 03             is_before:is before day  150.10   exact end of day      javascript // Expected false // Actual   true true == false     ,stephenviles,closed,1,2013-12-28 08:58:25,2013-12-29 09:49:52,,Unit Test Failed,,,0,1
12871,moment/moment,1379,weekYear setter is wrong,The logic in weekYear year  is:   get the current weekYear   subtract  current_week_year   year  years  I think this particular setter should preserve the week and the weekday  as the  year  setter preserves  month  and  date  . Then I d rewrite the test to first set  weekday   then  week   then  weekYear . Moreover we should provide a setter for all three  because certain combinations are impossible. ,ichernev,closed,5,2013-12-29 09:56:09,2015-12-10 05:31:01,,Bug,,,0,1
12870,moment/moment,1380,1 test failed. getters_setters:setters programatic with weeks  130.1  ,    Client info      Date String   : Sun Dec 29 2013 13:41:33 GMT 0100  CET  Locale String : 12/29/2013 1:41:33 PM Offset        :  60 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_9_1  AppleWebKit/537.36  KHTML  like Gecko  Chrome/31.0.1650.63 Safari/537.36            getters_setters:setters programatic with weeks  130.1       javascript // Expected 2001 // Actual   2000 2000 == 2001     ,eMarek,closed,1,2013-12-29 12:42:24,2013-12-29 18:46:02,,Unit Test Failed,,,0,1
12869,moment/moment,1381,2 tests failed. create:parsing week and weekday information  50.50  getters_setters:setters programatic with weeks  130.1  ,    Client info      Date String   : Sun Dec 29 2013 23:34:51 GMT 0100  CET  Locale String : 29 Dec 2013 23:34:51 GMT 1 Offset        :  60 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_9_1  AppleWebKit/537.73.11  KHTML  like Gecko  Version/7.0.1 Safari/537.73.11            create:parsing week and weekday information  50.50   compare: small years work      javascript // Expected 0098 02 03 // Actual   0098 02 04  0098 02 04  ==  0098 02 03             getters_setters:setters programatic with weeks  130.1       javascript // Expected 2001 // Actual   2000 2000 == 2001     ,bochoven,closed,4,2013-12-29 22:36:52,2013-12-31 20:09:13,,Unit Test Failed,,,0,1
12868,moment/moment,1382,RangeError:  Maximum call stack size exceeded.  while parsing.,I get this error message when i try to run:      js moment  2015 04 04T00:00:00 0000  ;     ,umurgdk,closed,1,2013-12-30 10:10:50,2013-12-30 10:13:04,,,,0,1
12867,moment/moment,1383,week setter changes the year,According to http://momentjs.com/docs/ /get set/week/  we can set the week using:      javascript moment  .week Number ;      However  if it s like today  2013 12 30  the week is 1. When using the week setter I m expecting to set the week of 2013  not of  2014:  [image] https://f.cloud.github.com/assets/4736419/1821683/17f0c1e8 713d 11e3 9f3b 640507ec637e.png  http://jsbin.com/adoyEtO/2/edit  Am I allowed to think this is weird behaviour or does it work as expected?   [image] https://f.cloud.github.com/assets/4736419/1821667/4696a1da 713c 11e3 9583 94ab90255d2a.png  ,Cottin,closed,1,2013-12-30 10:13:08,2013-12-30 11:14:57,,,,0,1
12866,moment/moment,1384,improve performance of leftZeroFill,This patch improves performance of  leftZeroFill  by avoiding lots of unnecessary string concatenations. http://jsperf.com/zero filling full  Improvements in Node.JS:   10  faster when no zero filling is needed   Same speed when 1 zero fill is needed   3x faster when 5 zero fills are needed    2x faster when 2 zero fills are needed  <hr>  I also changed the comment because the jsperf linked was incorrect   it doesn t use the code from the library and doesn t even use a zero fill argument. It also uses randomization which gives random results   the run to get least needed zero filling would win regardless of the actual performance of the implementation. ,petkaantonov,closed,4,2013-12-30 12:05:30,2014-01-01 01:46:02,,,,1,1
12865,moment/moment,1385,6 tests failed. format:toISOString  112.2  format:toISOString  112.3  format:toISOString  112.4  getters_setters:setters programatic with weeks  130.1  getters_setters:setters programatic with weeks ISO  131.1  getters_setters:setters programatic with wee,    Client info      Date String   : Mon Dec 30 2013 14:37:43 GMT 0300  ART  Locale String : Mon 30 Dec 2013 02:37:43 PM ART Offset        : 180 User Agent    : Mozilla/5.0  X11; Ubuntu; Linux x86_64; rv:26.0  Gecko/20100101 Firefox/26.0            format:toISOString  112.2   ISO8601 format on big positive year      javascript // Expected  020123 10 09T20:30:40.678Z // Actual    020123 10 09T23:30:40.678Z   020123 10 09T23:30:40.678Z  ==   020123 10 09T20:30:40.678Z             format:toISOString  112.3   ISO8601 format on big positive year      javascript // Expected  000001 10 09T20:30:40.678Z // Actual    000001 10 09T23:30:40.678Z   000001 10 09T23:30:40.678Z  ==   000001 10 09T20:30:40.678Z             format:toISOString  112.4   ISO8601 format on big positive year      javascript // Expected  020123 10 09T20:30:40.678Z // Actual    020123 10 09T23:30:40.678Z   020123 10 09T23:30:40.678Z  ==   020123 10 09T20:30:40.678Z             getters_setters:setters programatic with weeks  130.1       javascript // Expected 2001 // Actual   2000 2000 == 2001            getters_setters:setters programatic with weeks ISO  131.1       javascript // Expected 2001 // Actual   2000 2000 == 2001            getters_setters:setters programatic with weeks ISO  131.2       javascript // Expected 49 // Actual   50 50 == 49     ,ejmvar,closed,1,2013-12-30 17:39:18,2013-12-31 20:32:33,,Unit Test Failed,,,0,1
12864,moment/moment,1386,Add  s seconds ago to relative time.,Hi   I imagine this is really easy and there is some argument to not have this  but in some real time cases is useful to have the   s seconds ago .  Please add this at least with a  resolution flag   because actually in some cases maybe even  s minutes ago make no sense in some cases.  Bye. ,jorgeecardona,closed,6,2013-12-30 19:33:34,2014-02-06 17:20:23,,,,0,1
12863,moment/moment,1387,2 tests failed. getters_setters:setters programatic with weeks ISO  131.1  getters_setters:setters programatic with weeks ISO  131.2  ,    Client info      Date String   : Tue Dec 31 2013 01:03:57 GMT 0100  CET  Locale String : 12/31/2013 1:03:57 AM Offset        :  60 User Agent    : Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/31.0.1650.63 Safari/537.36            getters_setters:setters programatic with weeks ISO  131.1       javascript // Expected 2001 // Actual   2000 2000 == 2001            getters_setters:setters programatic with weeks ISO  131.2       javascript // Expected 49 // Actual   50 50 == 49     ,KKrisu,closed,1,2013-12-31 00:04:37,2013-12-31 20:13:28,,Unit Test Failed,,,0,1
12862,moment/moment,1388,3 tests failed. getters_setters:setters programatic with weeks  130.1  getters_setters:setters programatic with weeks ISO  131.1  getters_setters:setters programatic with weeks ISO  131.2  ,    Client info      Date String   : Mon Dec 30 2013 20:09:05 GMT 0600  CST  Locale String : 12/30/2013 8:09:05 PM Offset        : 360 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_9_1  AppleWebKit/537.36  KHTML  like Gecko  Chrome/31.0.1650.63 Safari/537.36            getters_setters:setters programatic with weeks  130.1       javascript // Expected 2001 // Actual   2000 2000 == 2001            getters_setters:setters programatic with weeks ISO  131.1       javascript // Expected 2001 // Actual   2000 2000 == 2001            getters_setters:setters programatic with weeks ISO  131.2       javascript // Expected 49 // Actual   50 50 == 49     ,moisesrodriguez,closed,1,2013-12-31 02:12:27,2013-12-31 20:13:51,,Unit Test Failed,,,0,1
12861,moment/moment,1389,Simplify absRound function,,Daniel-Hug,closed,5,2013-12-31 06:10:44,2014-02-06 17:20:57,,,,1,1
12860,moment/moment,1390,2 tests failed. getters_setters:setters programatic with weeks ISO  131.1  getters_setters:setters programatic with weeks ISO  131.2  ,    Client info      Date String   : Tue Dec 31 2013 15:50:33 GMT 0500  Eastern Standard Time  Locale String : 12/31/2013 3:50:33 PM Offset        : 300 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/31.0.1650.63 Safari/537.36            getters_setters:setters programatic with weeks ISO  131.1       javascript // Expected 2001 // Actual   2000 2000 == 2001            getters_setters:setters programatic with weeks ISO  131.2       javascript // Expected 49 // Actual   50 50 == 49     ,tjscooper,closed,1,2013-12-31 20:51:22,2013-12-31 20:53:56,,Unit Test Failed,,,0,1
12859,moment/moment,1391,Fix PRs failing in travis,PRs now pass travis build  because they don t execute sauce tests ,ichernev,closed,0,2013-12-31 20:53:05,2013-12-31 21:30:01,,,,1,1
12858,moment/moment,1392,Armenian Language with tests,,armendarabyan,closed,2,2014-01-04 16:45:29,2014-01-04 19:10:41,,,,1,1
12857,moment/moment,1393,Implicit and explicit clone   misleading docs / bug,I came to an issue that as per docs calling moment   or moment.clone   should create clone of a moment. But that is not true as you can see on the example below. I can understand that implicit clone adds current time as it is constructor s default behavior  but in case of clone   I would expect that it returns the same date and _time_ value.      var m1 = moment 0   HH  ; var m2 = moment m1 ; var m3 = m1.clone  ;      JSFiddle: http://jsfiddle.net/37k3K/ ,saxicek,closed,4,2014-01-05 08:53:28,2014-01-09 17:11:37,,,,0,1
12856,moment/moment,1394,Testing for years with 53 weeks  in ISO ,Added test for the 71 years in current 400 year cycle that have 53 weeks in ISO standard.  Based on a table taken from http://en.wikipedia.org/wiki/ISO_week_date  as downloaded on 2014 01 06  listing the 71 years in a 400 year cycle that have 53 weeks; in this case reflecting the 2000 based cycle.  Testing whether Dec 31 of these known years have an  isoWeek    that equals 53. ,mdxs,closed,4,2014-01-06 10:28:32,2014-01-09 16:30:22,,,,1,1
12855,moment/moment,1395,3 tests failed. format:toISOString  112.2  format:toISOString  112.3  format:toISOString  112.4  ,    Client info      Date String   : Mon Jan 6 13:39:35 UTC 0100 2014 Locale String : maandag 6 januari 2014 13:39:35 Offset        :  60 User Agent    : Mozilla/5.0  compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E             format:toISOString  112.2   ISO8601 format on big positive year      javascript // Expected  020123 10 09T20:30:40.678Z // Actual    020123 10 09T18:30:40.678Z   020123 10 09T18:30:40.678Z  ==   020123 10 09T20:30:40.678Z             format:toISOString  112.3   ISO8601 format on big positive year      javascript // Expected  000001 10 09T20:30:40.678Z // Actual    000001 10 09T18:30:40.678Z   000001 10 09T18:30:40.678Z  ==   000001 10 09T20:30:40.678Z             format:toISOString  112.4   ISO8601 format on big positive year      javascript // Expected  020123 10 09T20:30:40.678Z // Actual    020123 10 09T18:30:40.678Z   020123 10 09T18:30:40.678Z  ==   020123 10 09T20:30:40.678Z      ,marinovdh,closed,1,2014-01-06 12:42:56,2014-01-09 16:33:27,,Unit Test Failed,,,0,1
12854,moment/moment,1396,Added leftZeroFill to GGGG and gggg formats,Added leftZeroFill to GGGG and gggg formats  similar to how YYYY and other year formats do . Expanded testing for these cases; and in the process added testing for W and fixed a typo in some existing tests. ,mdxs,closed,0,2014-01-06 13:41:34,2014-01-09 16:39:35,,,,1,1
12853,moment/moment,1397,Parsing Arabic weeks shifted by 1,In Arabic week numbering  week starts on Saturday  1st week contains January 1st  the local week numbering formatting is correct   2013 12 28  formatted as  gggg ww d  becomes  2014 1 6    the parsing however is shifting the weeks by one. Parsing  moment  2014 1 6    gggg w d    returns the January 4th 2014.  I expect the problem is in the function  dayOfYearFromWeeks .  ,gregor-rayman,closed,2,2014-01-06 13:50:18,2014-01-09 16:43:25,,,,0,1
12852,moment/moment,1398,Fix to Arabic week number parsings.,In Arabic week numbering  week starts on Saturday  1st week contains January 1st  the local week numbering formatting is correct  2013 12 28 formatted as gggg ww d becomes 2014 1 6   the parsing however is shifting the weeks by one. Parsing moment  2014 1 6    gggg w d   returns the January 4th 2014.  Fixes the issue https://github.com/moment/moment/issues/1397 ,gregor-rayman,closed,1,2014-01-07 00:21:54,2014-01-09 16:43:11,,,,1,1
12851,moment/moment,1399,cannot find node binary,I installed node locally to   HOME/opt/node   When I run  npm install moment  I get the following error:      remote: moment@2.4.0 node_modules/moment         remote: /usr/bin/env: node: No such file or directory        All other node modules install fine. ,chovy,closed,1,2014-01-07 07:20:06,2014-01-14 05:38:13,,Troubleshooting,,,0,1
12850,moment/moment,1400,Using ko.toJSON moment    fails,I will lead by saying that I m not sure if this is a problem in knockout.js or moment.js.  Running the code below results in a recursion error:      ko.toJSON moment   ;      I ve prepared a simple JSFiddle to demonstrate: http://jsfiddle.net/3ewKe/5/.  Essentially  if there is a moment instance on an object graph and ko.toJSON is called on it  then the call fails.  This has been cross posted to https://github.com/knockout/knockout/issues. ,mattbrooks2010,closed,2,2014-01-07 14:41:16,2014-01-07 16:34:20,,,,0,1
12849,moment/moment,1401, H  format string broken in strict parsing,I hit an unexpected error when using  H  to parse 24h time values without a leading zero:      > var moment = require  moment  ; undefined > moment.version  2.5.0  > moment  .format  H    17  > var parsed = moment  17    H  ; undefined > parsed.isValid   true > var parsed = moment  17    H   true ; undefined > parsed.isValid   false      I would expect  H  to be usable here  so that the code can also work with times before noon. ,tp,closed,10,2014-01-07 16:34:40,2014-01-14 20:11:57,,Bug,,,0,1
12848,moment/moment,1402,ISO Time Parsing fails when given seconds decimal,If the seconds in your time has a decimal  which is legal   parsing assumes that the time is in UTC  even if there is no Z on the end .   moment  2014 01 07T14:21:16.739140     > Tue Jan 07 2014 09:21:16 GMT 0500  EST    moment  2014 01 07T14:21:16     > Tue Jan 07 2014 14:21:16 GMT 0500  EST  ,reustle,closed,2,2014-01-07 19:59:52,2014-01-14 16:51:55,,,,0,1
12847,moment/moment,1403,Setting week.doy to 4 results in changing the year when setting the week,http://jsfiddle.net/6DrAN/  Once used the language configuration with  as in documentation example : week :           dow : 1  // Monday is the first day of the week.         doy : 4  // The week that contains Jan 4th is the first week of the year.        will cause year of selected date to be moved in some combination of year/week setting  when year is in init.  Example  please set the language as in documentation  http://momentjs.com/docs/ /i18n/changing language/   var testDate = moment  2010  .week 4 ; //this should give us year set to 2010 and week set to 4th console.log testDate.year   ; // this will give year 2009 instead of 2010  ON THE OTHER HAND: var testDate = moment  2013  .week 4 ; //this should give us year set to 2013 and week set to 4th console.log testDate.year   ; // this will give year 2013  It does seem to work fine when setting the year with year 2010  instead of constructor  2010 ; ,skosno,closed,4,2014-01-09 09:48:00,2014-02-06 17:23:57,,,,0,1
12846,moment/moment,1404,RangeError when creating a moment from a cloned object,If you clone a moment using other libraries such as underscorejs  clone method  or knockoutjs  toJS method and then try to convert this back to a moment you get an infinite recursion.     Steps to reproduce      moment _.clone moment    ;         Example  A more realistic case where this happens is if you use something like knockout.postbox which internally calls JSON.stringify ko.toJS value  . 1. ko.toJS clones the moment to an object but retains the toJSON method. 2. JSON.stringify then tries to call the toJSON method. 3. Moment s toJSON method then tries to clone this before converting to utc. Unfortunately this is no longer a moment.  The code for this would look something like this.      var m = new moment  ; var data =  when: m ; ko.postbox.publish  something.happened   data ;      This makes it far less obvious that the moment has been cloned to a plain object.     Expected behaviour  Either moment should support moments that have been cloned incorrectly by other libraries  or a more meaningful exception should be thrown rather than causing a stack overflow. ,chilversc,closed,6,2014-01-09 11:41:57,2014-01-17 18:24:25,,Bug,,,0,1
12845,moment/moment,1405,Adding one month to a date doesn t seem to account for DST properly,If you add one month one month to a date that pushes it over a DST boundry it doesn t seem to calculate things right:        var example = moment  .tz  Europe/London  .month 9 .date 1 .hour 0 .minute 0 .second 0 .millisecond 0 ;   example.toString         Wed Oct 01 2014 00:00:00 GMT 0100         example.add  months   1    example.toString         Fri Oct 31 2014 00:00:00 GMT 0000    I was expecting the result to be   Sat Nov 01 2014 00:00:00 GMT 0000  .   Cheers  Dave. ,kzar,closed,8,2014-01-09 15:28:56,2014-04-24 09:04:05,,Bug,,,0,1
12844,moment/moment,1406,Infinite recursion on moment method call,Next code goes into infinite recursion but used to work in v2.1.0      ko.toJSON ko.observable moment    ;           moment  > makeMoment  > makeDateFromString  > extent.toString  > exnted.clone  > moment  You welcome to test it here: http://jsfiddle.net/RomanDidenko/9EfH2/  Please check console for errors. ,RomanDidenko,closed,4,2014-01-09 17:02:41,2014-01-09 20:17:29,,,,0,1
12843,moment/moment,1407,Be careful when falling back to Date constructor,If you clicked on the warning link and landed here:   moment  construction using a non iso string is deprecated. What this means is you   can safely do        javascript > moment  2014 04 25T01:32:21.196Z  ;  // iso string  utc timezone > moment  2014 04 25T01:32:21.196 0600  ;  // iso string with timezone > moment  2014 04 25    YYYY MM DD  ; // string with format      but you   can t do reliably    therefore its being deprecated       javascript > moment  2014/04/25  ; > moment  Thu Apr 24 2014 12:32:21 GMT 0700  PDT   ; > moment  some random string that looks like date  ;      In the upcoming releases a few more well defined formats might be added  but the general idea of using any random string to construct a date is no more. If you really want that behavior just do  moment new Date  random string that contains date      but  moment  won t be responsible for such convertions. Read below for the rationale about the change     As described in https://github.com/moment/moment/issues/1403 issuecomment 31961590  but also recent debugging c4d9f6e and 94d6c90 caused by https://travis ci.org/moment/moment/builds/16672288 brings me to the conclusion that   > using  Date  to create a moment from string  passed from the user is extremely unpredictable  and it turns out to work somewhat and then bite you in an edge case when you re not careful  So I think we need an option to disable it  for tests at the very least. I ve debugged that numerous times thank to our old friend IE6 and friends.  You d pass a string only  hoping that it would hit one of the predefined formats  but instead it hits Date and it sort of works  sometimes. I think it should be clear to users when they re hitting this case  and that it might not work well on all browsers.  The only use case for using Date to parse input is when a  it is entered by a web user  moment s user s user :   and b  the web user can see how we re interpreting the date entered. Every other case is just silently waiting to break at some point. ,ichernev,closed,136,2014-01-09 19:05:34,2014-04-23 21:37:16,,Enhancement,,,0,1
12842,moment/moment,1408,Update moment.js,For JS Compiler  such as google closure  define has to be instantiated or it will throw an error in the compiler. ,ProdigyView,closed,3,2014-01-09 21:45:52,2014-01-14 07:24:18,,,,1,1
12841,moment/moment,1409,Update moment.js,For compiler such as the google closure compiler  use window.console instead of console  or compiler with throw errors. Tightening up js. ,ProdigyView,closed,4,2014-01-09 21:52:23,2014-01-14 07:24:32,,,,1,1
12840,moment/moment,1410,Update moment.js,Changes will work with require and with other compiles like Google Closure. Make sure that variables are atleast defined as undefined  or errors will be thrown. ,ProdigyView,closed,1,2014-01-09 21:53:59,2014-01-14 07:24:25,,,,1,1
12839,moment/moment,1411,calendar   displays wrong relative date,Using moment 1.7.2 with languages. The unix time 1389172279000 is  Wed Jan 08 2014 09:11:19 . Today is  Fri Jan 10 2014 05:54:54 .  When supplied to  moment.calendar 1389172279000 ;  the output is: 1.  last Wednesday at 5:11 PM  in local GMT  9 time in English. 2.             5  11   same GMT  9 but in Korean.        means last week  not this week  which in the current context is not correct. It should be this week s Wednesday.  Even in English  last  refers to last week. I doubted this so checked your source code which has the follow code:      moment.lang  en         calendar :           lastDay :  [Yesterday at] LT           sameDay :  [Today at] LT           nextDay :  [Tomorrow at] LT           lastWeek :  [last] dddd [at] LT           nextWeek :  dddd [at] LT           sameElse :  L          ;      Korean localization has a similar code:      calendar :       sameDay :     LT       nextDay :     LT       nextWeek :  dddd LT       lastDay :     LT       lastWeek :      dddd LT       sameElse :  L          The code clearly points that the word  last  means  lastWeek . Thus Wednesday 08  two days ago from today s Friday is definitely not last week. ,kadishmal,closed,15,2014-01-10 06:01:53,2014-10-22 17:34:04,,Bug,Language,Troubleshooting,,,0,1
12838,moment/moment,1412,D/DD format string broken in strict parsing,I think there is a similar problem like  1401  with  D .  Why wouldn t  D  work for  11 ?      > m  Saturday 11 January 2014   dddd D MMMM YYYY   en  true .isValid   false > m  Saturday 11 January 2014   dddd DD MMMM YYYY   en  true .isValid   true      The first example results in  unusedInput: [  1  ]    But one can t just use  DD  because that doesn t work with single digit days:      > m  Saturday 1 January 2014   dddd DD MMMM YYYY   en   true .isValid   false > m  Saturday 1 January 2014   dddd D MMMM YYYY   en   true .isValid   true     ,tp,closed,1,2014-01-10 16:56:00,2014-01-10 18:29:50,,,,0,1
12837,moment/moment,1413,fixed broken link in changelog,,askmike,closed,0,2014-01-11 23:29:59,2014-01-13 00:27:13,,,,1,1
12836,moment/moment,1414,Azerbaijani Language,Hi  can I add my native language   Azerbaijani language  az ?     Thanks   ,ziyaddin,closed,2,2014-01-12 16:36:41,2014-01-12 21:02:39,,,,0,1
12835,moment/moment,1415,TimeZone round tripping for formatting,Hi   I m not sure if what I am seeing is a bug or my misunderstanding  but the result seems odd and is currently causing a problem as the dates are being formatted  incorrectly   we are showing dates 1 day before . I can look at ways of working around this  but the default behaviour is confusing.  If I create a moment object using string parsing that contains a time zone  and then immediately format the time zone information is lost  with the date being adjusted to the local machine s time zone:      moment  2014 01 12T23:59:59 05:00  .format  YYYY MM DDTHH:mm:ssZ        On my machine  UTC  this prints:       2014 01 12T18:59:59 00:00       Thanks  Adam ,barclayadam,closed,3,2014-01-13 15:26:09,2014-01-13 15:43:49,,,,0,1
12834,moment/moment,1416,2 tests failed. add:add across DST  10.1  create:parsing week and weekday information  50.50  ,    Client info      Date String   : Mon Jan 13 2014 16:24:14 GMT 0800  PST  Locale String : January 13  2014 at 4:24:14 PM PST Offset        : 480 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_9  AppleWebKit/537.71  KHTML  like Gecko  Version/7.0 Safari/537.71            add:add across DST  10.1   adding days over DST difference should result in the same hour      javascript // Expected 5 // Actual   6 6 == 5            create:parsing week and weekday information  50.50   compare: small years work      javascript // Expected 0098 02 03 // Actual   0098 02 04  0098 02 04  ==  0098 02 03      ,gschueler,closed,2,2014-01-14 00:25:47,2014-01-24 08:11:44,,Bug,Unit Test Failed,,,0,1
12833,moment/moment,1417,Handle wrongly cloned moments,This is in response to  1404   detect moment objects that were cloned with something like  _.extend     moment     as  isMoment  s   properly clone them and produce _orthodox_ moment objects  Please interested parties  @chilversc  @mattbrooks2010  @RomanDidenko     test on knockout  or whatever fancy libraries you happen to use if it works fine with them. ,ichernev,closed,5,2014-01-14 07:21:45,2014-01-14 17:33:22,,,,1,1
12832,moment/moment,1418,Improve non padded strict tokens,This is to fix  1401  Basically:   Non padded tokens match greedily   H  matches one or two    Padded tokens match exactly   HH  is two digits  ,ichernev,closed,0,2014-01-14 17:49:38,2014-01-14 20:11:57,,,,1,1
12831,moment/moment,1419,Better timezone support for manipulating moments,This adds a second argument to setters that provides a hint to updateOffset to not change hours/minutes when crossing a tz boundary.  This is frequently desirable when modifying part of an existing moment object directly.  It further passes this argument whenever adding / subtracting days or months  fixing an issue with moment timezone  moment/moment timezone 28 .  See the corresponding PR for moment timezone here: moment/moment timezone 53. ,kroo,closed,4,2014-01-15 02:53:06,2014-02-06 18:26:52,,,,1,1
12830,moment/moment,1420,How to run tests of language in moment.js?,Hi  can anyone explain me what I must use to run tests on moment.js? I am developing language for moment.js and I need to run test for language. Thanks again  ,ziyaddin,closed,4,2014-01-15 13:36:19,2014-01-16 11:15:14,,,,0,1
12829,moment/moment,1421,Don t use HTML entities in Welsh translations,Since this is a JavaScript library  we may not always use the produced strings in HTML directly. This changes the HTML entity used for     in Welsh translations to  well     . ,BYK,closed,5,2014-01-16 12:27:25,2014-01-17 18:39:47,,,,1,1
12828,moment/moment,1422,zone issue?,Hi   Thanks for this useful project. Here is my usecase:      moment  .zone   08:00  .format  ddd D MMM h:mm    Fri 17 Jan 9:00   moment  .zone 8 .format  ddd D MMM h:mm    Fri 17 Jan 5:00   moment  .zone  8 .format  ddd D MMM h:mm    Fri 17 Jan 9:00       how come:      moment  .zone   08:00   == moment  .zone  8       and      moment  .zone   08:00    = moment  .zone 8       Is it a bug or do I miss something?  I m using 2.5.0   Thanks  ,apneadiving,closed,4,2014-01-17 13:03:24,2014-01-21 18:00:39,,,,0,1
12827,moment/moment,1423,Chrome crash   Aw  Snap   error,Chrome version: 32.0.1700.77 moment.js version: 2.5.0 moment timezone.js version: 0.0.3  Run below code in Chrome browser  multiple page refreshes could be required to reproduce error :      < DOCTYPE html> <html>     <head>         <script src= moment.js >         </script>         <script src= moment timezone.js >         </script>         <script src= moment timezone data.js >         </script>     </head>     <body>         <script>              use strict ;             for var i = 0; i < 100; i                      moment 1405461600000 ;                 moment  .tz  America/North_Dakota/Beulah  ;                       </script>     </body> </html>       This has something to do with JS execution optimizations. If you change order of properties in moment    makeMoment   function call to the same as in moment.utc   function:            _useUTC : false      _isUTC : false      _l : lang      _i : input      _f : format      _strict : strict        problem is gone. I think this is bug in Chrome  but you can fix it easily in your library. ,xfd,closed,26,2014-01-17 15:45:36,2014-01-22 08:57:37,,Bug,,,0,1
12826,moment/moment,1424,Litunanian day names in calendars with weeks not starting on Monday,In the Lithuanian localization the weekday names logic is different for the full day names and the shortened day names due to declination. This is ok when the Lithuanian weekdays numbering is used  week starts on Monday . However  when a calendar is used where the week starts on another day  the full weekday names are shifted  the abbreviated names stay correct .   The change uses the isoWeekDay for the weekday name declination.  ,gregor-rayman,closed,11,2014-01-18 00:47:47,2014-05-21 08:02:23,,Language,,,1,1
12825,moment/moment,1425,Expose a variant of _pf.unusedInput as API to allow for smart date interpolation/handling,As a developer  I use  moment  to parse dates from user supplied input.  Moment s date parsing is  by default  quite forgiving so often this user supplied input contains some text that explains the date itself  rather than just the date . In these cases  it s useful to know where in a string a supplied date is  to get more information from it .   I m not sure how this API would look  but here s an example      var input =   Do taxes on January 15 2014 if possible ; var m = moment input  [ MMM DD YYYY ] ; var explanation = m.explain  ; // Ideally would be [ Do Taxes on    this  the moment instance    if possible ]      Much of this data is already available via  m._pf.unusedInput   but some used input appears to be getting mixed in  in the following example  m._pf.unusedInput  would contain       console.log m._pf.unusedInput ; // [ taxes on January      if possible ]      Since some parsing just defers to the Date constructor  this would only work for dates where a parse format  or an array of formats is supplied. What do you think? ,gerges,closed,2,2014-01-18 03:03:05,2014-01-18 05:37:17,,,,0,1
12824,moment/moment,1426,Changed longDateFormat of LT a L to right format used in Czech language,And renamed  vte ina  to  sekunda   because  vte ina  is not time unit  but unit of arc. ,JakubOnderka,closed,2,2014-01-18 12:22:08,2014-03-12 16:43:50,,Language,,,1,1
12823,moment/moment,1427,German localization: typo in M rz / March ?,I think there is a typo in the German localization. The German word for the month  March  is M rz  but in the 2.4.0 Library it is written as  M  rz  <code> return moment.lang  de             months :  Januar_Februar_M  rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember .split  _    ... </code>  should be  <code> return moment.lang  de             months :  Januar_Februar_M rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember .split  _    ... </code> ,knbknb,closed,2,2014-01-18 22:29:28,2014-01-18 22:50:26,,,,0,1
12822,moment/moment,1428,Danish date/time formats needs adjustment.,The Internationalization formats use the wrong separators and punction needs adjustment. It should read:  19 01 2014 19 1 2014 19. januar 2014 19. jan 2014 19. januar 2014 12.35 19. jan 2014 12.35 s ndag 19. januar  2014 12.35 s n 19. jan  2014 12.35 ,GustavBrock,closed,26,2014-01-19 11:38:19,2017-12-29 19:18:04,,Discussion,Language,,,0,1
12821,moment/moment,1429,Change object construction to prevent Chrome v32 crashing.,We were getting reports that our website was crashing in Chrome. We were able to pinpoint it to moment.  Changing the config from a literal object to setting properties is ugly  but resolves the issue for us in production. Given how frequently Chrome is updated I suspect we ll be able to revert it once it s fixed upstream.  See https://github.com/moment/moment/issues/1423. ,tatey,closed,1,2014-01-20 05:14:11,2014-01-22 08:56:18,,,,1,1
12820,moment/moment,1430,1 test failed. create:parsing week and weekday information  50.50  ,    Client info      Date String   : Tue Jan 21 2014 19:34:28 GMT 1000  EST  Locale String : 21 January 2014 7:34:28 pm AEST Offset        :  600 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_9_1  AppleWebKit/537.73.11  KHTML  like Gecko  Version/7.0.1 Safari/537.73.11            create:parsing week and weekday information  50.50   compare: small years work      javascript // Expected 0098 02 03 // Actual   0098 02 04  0098 02 04  ==  0098 02 03      ,oziee,closed,1,2014-01-21 09:35:30,2014-01-22 08:45:00,,Unit Test Failed,,,0,1
12819,moment/moment,1431,3 tests failed. format:toISOString  112.2  format:toISOString  112.3  format:toISOString  112.4  ,    Client info      Date String   : Tue Jan 21 2014 09:16:07 GMT 0600  Central Standard Time  Locale String : Tuesday  January 21  2014 9:16:07 AM Offset        : 360 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64; rv:26.0  Gecko/20100101 Firefox/26.0            format:toISOString  112.2   ISO8601 format on big positive year      javascript // Expected  020123 10 09T20:30:40.678Z // Actual    020123 10 10T01:30:40.678Z   020123 10 10T01:30:40.678Z  ==   020123 10 09T20:30:40.678Z             format:toISOString  112.3   ISO8601 format on big positive year      javascript // Expected  000001 10 09T20:30:40.678Z // Actual    000001 10 10T01:30:40.678Z   000001 10 10T01:30:40.678Z  ==   000001 10 09T20:30:40.678Z             format:toISOString  112.4   ISO8601 format on big positive year      javascript // Expected  020123 10 09T20:30:40.678Z // Actual    020123 10 10T01:30:40.678Z   020123 10 10T01:30:40.678Z  ==   020123 10 09T20:30:40.678Z      ,priestgit,closed,1,2014-01-21 15:17:02,2014-01-22 08:46:55,,Unit Test Failed,,,0,1
12818,moment/moment,1432,3 tests failed. format:toISOString  112.2  format:toISOString  112.3  format:toISOString  112.4  ,    Client info      Date String   : Tue Jan 21 2014 09:16:07 GMT 0600  Central Standard Time  Locale String : Tuesday  January 21  2014 9:16:07 AM Offset        : 360 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64; rv:26.0  Gecko/20100101 Firefox/26.0            format:toISOString  112.2   ISO8601 format on big positive year      javascript // Expected  020123 10 09T20:30:40.678Z // Actual    020123 10 10T01:30:40.678Z   020123 10 10T01:30:40.678Z  ==   020123 10 09T20:30:40.678Z             format:toISOString  112.3   ISO8601 format on big positive year      javascript // Expected  000001 10 09T20:30:40.678Z // Actual    000001 10 10T01:30:40.678Z   000001 10 10T01:30:40.678Z  ==   000001 10 09T20:30:40.678Z             format:toISOString  112.4   ISO8601 format on big positive year      javascript // Expected  020123 10 09T20:30:40.678Z // Actual    020123 10 10T01:30:40.678Z   020123 10 10T01:30:40.678Z  ==   020123 10 09T20:30:40.678Z      ,priestgit,closed,1,2014-01-21 15:17:18,2014-01-22 08:47:07,,Unit Test Failed,,,0,1
12817,moment/moment,1433,More natural  time ago  expression for European Portuguese locale,It seems more natural to express the concept of times in the past as something like:   h  dez anos     ten years ago   rather than the somewhat formal sounding  dez anos atr s   which also gives the impression that it is the beginning of a phrase  and not standalone.  Would welcome discussion  ,dazld,closed,2,2014-01-21 15:35:14,2014-05-21 07:53:44,,Language,,,1,1
12816,moment/moment,1434,we use a dot after the day number in dateformats,,tcarlsen,closed,3,2014-01-22 13:12:15,2014-01-28 10:08:39,,,,1,1
12815,moment/moment,1435,Add usage instructions with webpack,Add to the section [Where to use it] http://momentjs.com/docs/ /use it/  instructions for properly integrating Moment.js with [webpack] http://webpack.github.io/docs/ .   require  momentjs/moment.js    causes several errors like this:      ERROR in ./app/bower_components/momentjs/lang/ar ma.js Module not found: Error: Cannot resolve module moment in /home/fernando/work/myproject/myproject manage app/app/bower_components/momentjs/lang  @ ./app/bower_components/momentjs/lang/ar ma.js 8:8 35  ERROR in ./app/bower_components/momentjs/lang/ar.js Module not found: Error: Cannot resolve module moment in /home/fernando/work/myproject/myproject manage app/app/bower_components/momentjs/lang  @ ./app/bower_components/momentjs/lang/ar.js 8:8 35       require   momentjs/min/moment with langs.js    causes this warning:      WARNING in ./app/bower_components/momentjs/min/moment with langs.js Module not found: Error: Cannot resolve file or directory ./lang in /home/fernando/work/myproject/myproject manage app/app/bower_components/momentjs/min  @ ./app/bower_components/momentjs/min/moment with langs.js 808:24 46     ,fernandoacorreia,closed,30,2014-01-22 16:10:47,2016-02-24 05:43:17,,Documentation,,,0,1
12814,moment/moment,1436,add method moment  .duration  .toLocalString  ;,moment  .duration  .toLocalString [withSuffix bool]  [precision 1:day 2:seconds 3:milliseconds] ; moment  .duration 1928731 .toLocalString  ; moment  .duration 1928731 .toLocalString true ; moment  .duration 1928731 .toLocalString true  3 ;  I need humanize with precision. thank you. ,crucifyer,closed,3,2014-01-22 17:50:33,2014-11-17 04:04:37,,,,1,1
12813,moment/moment,1437,2 tests failed. create:string with format   years  36.4  week_year:weekday first day of week Sunday  dow 0   253.5  ,    Client info      Date String   : Thu Jan 23 2014 14:55:18 GMT 0000  GMT  Locale String : Thu Jan 23 14:55:18 2014 Offset        :  60 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10.8; rv:26.0  Gecko/20100101 Firefox/26.0            create:string with format   years  36.4   70 > 1970      javascript // Expected 1970 // Actual   1969  1969  ==  1970             week_year:weekday first day of week Sunday  dow 0   253.5   Jan  1 1970 is Thursday     4th day      javascript // Expected 4 // Actual   3 3 == 4     ,rubelux,closed,0,2014-01-23 14:55:47,2014-04-12 19:19:32,,Unit Test Failed,,,0,1
12812,moment/moment,1438,Inconsistent behavior for dayOfYear,    Javascript moment   year: 2012   .dayOfYear 366 .format  ;  // 2012 12 31T00:00:00 08:00  moment  2012  .dayOfYear 366 .format  ;  // WAT? //  2012 01 01T16:00:00 08:00   moment  2013  .dayOfYear 366 .format  ;  // ????? // 2012 12 31T16:00:00 08:00      Shouldn t the first two be identical. I have no idea what happened in the last one. ,kenperkins,closed,4,2014-01-23 16:47:31,2014-01-23 17:14:41,,,,0,1
12811,moment/moment,1439,Better rules to decide between 19 and 20 for parsing YY ,Currently the rule for parsing YY is    If greater than 68 will return 1900 s  otherwise 2000 s.        datePartArray[YEAR] = toInt input     toInt input  > 68 ? 1900 : 2000 ;       For many projects such as the one I am working on  this rule is not valid. I am using this rule:   If entered YY is greater than current year  YY   it will return 1900 s  otherwise 2000 s.        datePartArray[YEAR] = toInt input      toInt input  >  moment moment   .format  YY    ? 1900 : 2000 ;           It s a good idea to expose this value  68  to be configurable.  What do you think? ,MenaBassily,closed,7,2014-01-23 23:50:08,2014-04-02 07:51:22,,,,0,1
12810,moment/moment,1440,m.add  days  1  returns same date  in GMT 03:00 but not in other timezones,Given this code     var m = moment new Date 2014  9  18  0  0  0  ;     console.log m.toString   ;     console.log m.add  days  1 .toString   ;  Outputs as expected in GMT 4 and GMT  5 but in GMT  3 the following output occurs Sat Oct 18 2014 00:00:00 GMT 0300 script.js:4 Sat Oct 18 2014 00:00:00 GMT 0300 script.js:5  Here is a plunker to evaluate: http://plnkr.co/edit/ipJUoGhMiwOmvN4Qb0ge?p=preview  In reference to this Stack Overflow question: http://stackoverflow.com/q/21318357/1085699 ,NathanielAJohnson,closed,10,2014-01-24 04:36:56,2014-01-24 16:25:20,,Troubleshooting,,,0,1
12809,moment/moment,1441,Workaround safari bug,13 March 2011 is not handled properly in Safari. Detect bug and exit test early.  Fixes  1161. ,ichernev,closed,0,2014-01-24 08:30:54,2014-01-24 08:34:54,,,,1,1
12808,moment/moment,1442,startOf  day  /endOf  day   not correct with UTC,When using local time  the startOf  day  /endOf  day   function works as expected  but when i use UTC time the value is treated like local time.  http://jsfiddle.net/3d9eU/5/  moment.lang  nl  ;  var t1 = moment  ; // localtime var t2 = t1.clone  .utc  ; // UTC  console.log  LOC valueOf =      t1.valueOf   ; //1390557395517  > OK console.log  UTC valueOf =      t2.valueOf   ; // 1390557395517  > OK  console.log  LOC end of day valueOf =      t1.endOf  day  .valueOf   ; //1390604399999   > OK console.log  UTC end of day valueOf =      t2.endOf  day  .valueOf   ; //1390607999999   > NOT OK  console.log  LOC end of day _d =      t1.endOf  day  ._d ; //Fri Jan 24 2014 23:59:59 GMT 0100  W. Europe Standard Time   > OK console.log  UTC end of day _d =      t2.endOf  day  ._d ; //Sat Jan 25 2014 00:59:59 GMT 0100  W. Europe Standard Time   > NOT OK  Best regards  Bj rn ,BCup,closed,3,2014-01-24 10:06:22,2014-01-25 22:04:26,,Troubleshooting,,,0,1
12807,moment/moment,1443,TypeError: zone is undefined,I m getting this error when trying to use Moment.js with timezone  the error is being triggered in the line 308 of the moment timezone.js file where the piece of code is:  return [zone  zone.rule mom  lastZone ];  in the zoneAndRule function.  What I m trying to do is a console.log   of a date with the following code:  console.log moment  .tz  America/Los_Angeles  .format   ;  I m using require.js with Backbone.js ,cristiangrojas,closed,2,2014-01-24 13:28:06,2014-01-24 16:53:40,,,,0,1
12806,moment/moment,1444,Fix lang/lt nominative weekday detection,Not actually using it in production  so only noticed because of: https://github.com/moment/moment/pull/1424 ,mmozuras,closed,1,2014-01-25 17:23:36,2014-02-02 00:02:13,,,,1,1
12805,moment/moment,1445,fixed project name,Fixed the project name in bower.json file. Many projects are using  momentjs  name in the dependency list instead of  moment  ,d1ffuz0r,closed,4,2014-01-27 01:41:41,2014-03-31 23:55:48,,,,1,1
12804,moment/moment,1446,moment.parseZone should support all moment parameters,  Works:     parses uses the format specified       javascript var m = moment  01/12/2014 00:00:00  08:00   DD/MM/YYYY h:mm:ss Z  .parseZone  ; var s = m.format  ; //  2014 12 01T00:00:00 08:00         Fails:     ignores the format and falls back to the browser       javascript var m = moment.parseZone  01/12/2014 00:00:00  08:00    DD/MM/YYYY h:mm:ss Z  ; var s = m.format  ; //  2014 01 12T00:00:00 08:00       The  parseZone  shortcut should pass along all parameters  not just the first one. ,mj1856,closed,3,2014-01-27 21:38:51,2014-01-29 06:55:02,,,,0,1
12803,moment/moment,1447,parseZone passes all arguments to moment,moment.parseZone is just a shorthand for moment  .parseZone    so make sure that all arguments passed to the static function end up in the moment factory function.  In response to  1446 ,ichernev,closed,1,2014-01-28 09:32:16,2014-01-28 19:16:16,,,,1,1
12802,moment/moment,1448,updating the test to use dot after day number,,tcarlsen,closed,0,2014-01-28 09:58:33,2014-01-28 10:00:53,,,,1,1
12801,moment/moment,1449,we use a dot after the day number in Denmark,her we go  now with tests ,tcarlsen,closed,17,2014-01-28 10:07:44,2014-05-21 07:50:37,,,,1,1
12800,moment/moment,1450,No way to get a localised time including seconds,We mantain a patched version of moment with a new time identifier LTT which is the time in seconds.  Is there any wish to support more localised formats like this? Or allow more general localised formats so that I only need to patch the language file to get this to work? ,lukeapage,closed,5,2014-01-29 14:51:39,2014-07-29 16:42:52,,,,0,1
12799,moment/moment,1451,Feature Request: Add lastMonth to Language calendar,For greater customisability of the result of the calendar   function  it would be beneficial to allow a formatting string for  lastMonth   in addition to the ones that already exists  i.e. lastDay  lastWeek  etc .  Reference: http://momentjs.com/docs/ /customization/calendar/ ,ben4d85,closed,1,2014-01-30 12:09:39,2014-02-01 20:49:49,,,,0,1
12798,moment/moment,1452,Add option to default to highest possible date,When parsing incomplete dates such as  2014  or  2014 05  moment will always default to the lowest possible date  so  2014  becomes 2014 01 01 00:00 etc. Would it be sensible to add an option to instead default it to the highest possible value? So that  2014  becomes  2014 12 13 23:59:59  and  2014 06  becomes  2014 06 30 23:59:59  etc.  One use case I have in mind in mind is when you have deadlines in various date formats and of various completeness  and you want to order them by earliest deadline first. In this case if when someone says deadline  May  2014  it probably makes more sense  at least for sorting  to interpret it as 2014 05 31 instead of as 2014 05 01.  Perhaps this is outside the scope of momentjs though  just an idea. ,treet,closed,8,2014-01-30 13:06:52,2016-04-01 23:12:39,,Enhancement,,,0,1
12797,moment/moment,1453,Optimize the two hottest functions,Speedup roughly 25  on the unit tests. ,mikklepp,closed,2,2014-01-31 11:17:52,2014-03-07 16:21:52,,performance,,,1,1
12796,moment/moment,1454,Non Gregorian calendars inside moment.js,MediaWiki s date formatter can easily generates non Gregorian calendars output.  This is a copy of the related parts of [the documentation] https://www.mediawiki.org/wiki/Help:Extension:ParserFunctions .23time :    Non Gregorian calendars              : :       Islamic          xmj   Day of the month     xmF   Full month name     xmn   Month index     xmY   Full year       Iranian  Jalaly           xij   Day of the month     xiF   Full month name     xin   Month index     xiY   Full year     xiy   2 digit year       Hebrew          xjj   Day of the month     xjF   Full month name     xjt   Number of days in month     xjx   Genitive form of the month name     xjn   Month number     xjY   Full year       Thai solar          xkY   Full year       Minguo/Juche year          xoY   Full year       Japanese nengo          xtY   Full year    With considering [this] https://github.com/wikimedia/mediawiki core/blob/c2318e9d6b58d9191ce43588a82db8407e05170e/languages/Language.php L1116  and [an example calendar algorithm] https://github.com/wikimedia/mediawiki core/blob/c2318e9d6b58d9191ce43588a82db8407e05170e/languages/Language.php L1434  from MediaWiki  this is my proposal:   Define a separate folder/script inside moment.js project for actual calendar algorithm implementation   xij    xiF   . . .  but don t include that on moment.js core   Original modules of extension calendars should just include the English translation and locales modules which handle the translation of needed calendars for a locale. A fallback to English  which provided by the algorithm itself  should be done also when translation is not available on a specific locale module   Locale module should define their default date format with their related calendars   Similar to MediaWiki date format convention  what available on above table  or same [moment jalaali] https://github.com/jalaali/moment jalaali ?   With this design  using Iranian calendar on English and Gregorian calendar on Persian for example [both use cases are important] would be easy.  I think if we decide about a design  implementing the needed change will be easier.  globalize also [has] https://github.com/jquery/globalize/blob/195f3f4b3725c9fd9cdc0014f61016de34b0076a/lib/cultures/globalize.culture.fa IR.js  support of Persian calendar for example.  Thank you and sorry about spell/grammar/facts errors available ,ebraminio,open,15,2014-02-01 16:52:53,0000-00-00 00:00:00,,Enhancement,,3.0,0,1
12795,moment/moment,1455,Add a strip function to remove non critical moment properties,We ve been adding properties to the moment object here and there and now most of them are used only at the parsing stage  revealing information about what exactly got parsed and how  but most users don t care and if you happen to have a big array of objects this also leads to higher memory footprint.  So lets add a function  moment.fn.strip     that would remove all unnecessary properties   and keep only:  _isAMomentObject    _isUTC    _l    _d .  _offset . ,ichernev,closed,8,2014-02-01 20:46:41,2016-06-04 03:18:29,,Enhancement,,3.0,0,1
12794,moment/moment,1456,Typo in Documentation: Validation refers to flag  unusedInput  as  unusedInputs ,The [Validation section] http://momentjs.com/docs/ /parsing/is valid/  of the documentation refers to the flag  unusedInput  as  unusedInputs . ,rluba,closed,2,2014-02-01 20:52:00,2014-05-01 16:57:51,,Documentation,,,0,1
12793,moment/moment,1457,Fix armenian meridiem  1233,Lets merge this already :  ,ichernev,closed,0,2014-02-03 06:01:46,2014-02-03 17:09:17,,,,1,1
12792,moment/moment,1458,Better Spanish months in special case,Fixes  1234. Properly format YYYY MMM DD expressions    no dot in the month name in this case. ,ichernev,closed,0,2014-02-03 06:25:03,2014-02-03 17:07:51,,,,1,1
12791,moment/moment,1459,Add moment.zone   to set default zone.,This adds a global method  zone  to moment to set a default zone to be used:   when parsing new moments   when formatting moments  The aim is to allow the browser timezone to be setable. ,robertclancy,closed,3,2014-02-03 18:47:46,2014-05-01 17:04:01,,,,1,1
12790,moment/moment,1460,update copyright year range,,gdi2290,closed,1,2014-02-04 06:38:02,2014-02-04 09:04:41,,,,1,1
12789,moment/moment,1461,Romanian short month fixes,I created a pull request from @tehnicaorg s commits.  @tehnicaorg    in the future please submit actual pull requests  mentioning the issue in the commit message is not enough. If you need help with that let me know.  @gurdiga  @avaly what do you think? ,ichernev,closed,4,2014-02-04 07:50:18,2014-02-04 18:55:50,,,,1,1
12788,moment/moment,1462,Add weeksInYear and isoWeeksInYear,This implements  1289. I think the week and iso week stuff should go in a separate calendar at some point. ,ichernev,closed,4,2014-02-04 09:02:35,2014-02-04 18:22:25,,,,1,1
12787,moment/moment,1463,Cannot output partial dates when created with partial date,I m creating a moment w/ an incomplete date  but only want to output incomplete information as well. I get unexpected issues.      moment  Feb 3    MMM D  .format  MMM D  ;   ==> undefined NaN      Expected:  Feb 3   moment  Feb 3    MMM D  .isValid    does correctly return false though.. Just thought that moment would be able to handle imperfect data when asked for incomplete data out.  ,MaerF0x0,closed,4,2014-02-04 17:36:39,2014-02-05 17:05:16,,Troubleshooting,,,0,1
12786,moment/moment,1464,build custom language support,I only need en and fr language files  is there a way to build a custom moment langs.js file? ,chovy,closed,3,2014-02-04 22:24:13,2014-03-12 07:02:19,,,,0,1
12785,moment/moment,1465,moment  1.10.2014   has different result in browsers,moment  1.10.2014   works different in chrome and firefox. I think if this library was written to solve problems of standard Date class it should show same result in all browsers. ,Areks,closed,4,2014-02-06 08:20:09,2014-02-07 07:00:41,,,,0,1
12784,moment/moment,1466,One year duration gives me back 1 year and 5 days ???,Hi  I know its unnecessary to call  asMilliseconds    on the duration and then make a new duration  but to mimic my code as closely as possible without cluttering the example with business logic i chose to keep it.   Also I have not tested just calling  var mom = moment.duration   y: 1   ; var days = mom.days  ;    I figured first getting milliseconds with asMilliseconds   and then passing the result into a new duration may cause the bug.      var ms = moment.duration   y: 1   .asMilliseconds  ; var mom = moment.duration ms ; var year = mom.years         month = mom.months         days = mom.days         hours = mom.hours         minutes = mom.minutes         seconds = mom.seconds         milliseconds = mom.milliseconds  ;      The above gives me the following result:      year equals 1 and days equals 5      I don t understand why...? ,furier,closed,5,2014-02-06 09:42:42,2014-03-05 13:50:23,,,,0,1
12783,moment/moment,1467,Default ignoreOffset = true for dates  months and years,When you do  moment.date 5    you d expect the time of day to remain the same even across DST. This only affects users of moment timezone.  Related to https://github.com/moment/moment/pull/1419 ,ichernev,closed,0,2014-02-06 18:43:45,2014-02-06 19:09:59,,,,1,1
12782,moment/moment,1468,zone setter can now skip adjusting the hour,When you change the zone you d expect the time to remain the same  but if you re doing something low level you might want just the zone offset to change.  Add a second argument to zone that would allow the caller to disable adjusting the hour when setting a zone.  I ll make a corresponding PR in the moment timezone repo. ,ichernev,closed,1,2014-02-06 18:51:15,2014-02-06 19:08:47,,,,1,1
12781,moment/moment,1469,Added support for Serbian language   both Latin and Cyrillic scripts,I have added two language files and also two test files to enable support for both Serbian Latin and Cyrillic scripts. ,milan-j,closed,0,2014-02-06 18:56:22,2014-02-06 23:39:25,,,,1,1
12780,moment/moment,1470,Creating a new UTC moment without specifying Hours produces non zero default hour.,    moment  2013/07/14  .minute   0 moment  2013/07/14  .utc  .minute   0 moment  2013/07/14  .hour   0 moment.utc  2013/07/14  .hour   7      I would expect 0. ,AlexMouton,closed,6,2014-02-07 00:07:59,2014-03-12 07:05:35,,Bug,,,0,1
12779,moment/moment,1471,2 tests failed. create:string with format   years  36.4  week_year:weekday first day of week Sunday  dow 0   253.5  ,    Client info      Date String   : Fri Feb 07 2014 09:53:14 GMT 0000  GMT  Locale String : Fri Feb  7 09:53:14 2014 Offset        :  60 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10.8; rv:27.0  Gecko/20100101 Firefox/27.0            create:string with format   years  36.4   70 > 1970      javascript // Expected 1970 // Actual   1969  1969  ==  1970             week_year:weekday first day of week Sunday  dow 0   253.5   Jan  1 1970 is Thursday     4th day      javascript // Expected 4 // Actual   3 3 == 4     ,azizur,closed,0,2014-02-07 09:53:50,2014-04-12 19:19:32,,Unit Test Failed,,,0,1
12778,moment/moment,1472,Serbian language   Latin and Cyrillic scripts,Added support for Serbian language  both Latin and Cyrillic scripts.  sr lat  sr cyr  ,milan-j,closed,6,2014-02-07 10:19:31,2014-03-12 09:00:41,,,,1,1
12777,moment/moment,1473,TimeZone builder does not have entry for New Delhi,There is no entry for the Indian capital of New Delhi in the handy TimeZone Data Builder page of the website. It seems that capital cities are included for almost all the other countries included in the database. The only other Indian city entry that I could find was Asia/Kolkata.  http://momentjs.com/timezone/data/ ,jonesd,closed,2,2014-02-07 15:11:37,2014-02-21 02:28:15,,,,0,1
12776,moment/moment,1474,new plugin: moment.parseFormat dateString ,not sure if it s worth adding to your list of plugins  but thought why not bringing it to your attention: https://github.com/gr2m/moment.parseFormat   moment.parseFormat dateString   extracts the format of a  human  date/time string  e.g.       js var format = moment.parseFormat  Thursday  February 6th  2014 at 9:20pm  ; // dddd  MMMM Do  YYYY [at] h:mma moment.format format ;      The goal is to use for date inputs  so users can not only set date/time  but also configure their preferred date/time format at the same time  without the need of a configuration form. I somewhat extracted it from https://minutes.io/new/Meeting  I just created it yesterday  I d love to hear your feedback on it ,gr2m,closed,1,2014-02-08 11:53:43,2014-03-07 16:27:03,,,,0,1
12775,moment/moment,1475,add support to parse  Do ,for example      js moment  May 6th    MMMM Do  .format  MMMM Do   // => May 1st // expected => May 6th      I m happy to look into it and put together a pull request  just wondering if this wanted or not? ,gr2m,closed,12,2014-02-08 15:48:23,2014-02-23 22:10:42,,,,1,1
12774,moment/moment,1476,Mozilla Firefox issue,    moment  1 January  .format  DD/MM        Executing above results differently on Chrome and Firefox.    Actual result    Invalid Date  on Firefox v27  NaN/NaN  on Firefox v24    Expected result   01/01 ,ismusidhu,closed,2,2014-02-10 06:39:56,2014-02-10 07:18:19,,,,0,1
12773,moment/moment,1477,Correction to Portuguese capitalization,[Wikimedia   Capitalization] http://meta.wikimedia.org/wiki/Capitalization_of_Wiktionary_pages    Languages which do not capitalize day names   Portuguese    Capitalization of month names   Portuguese / Portuguese_Brazil   Months are capitalized in Portugal  but not in Brazil ,jeverington,closed,1,2014-02-10 10:34:20,2014-02-10 10:39:41,,,,1,1
12772,moment/moment,1478,Updated  Portuguese and Portuguese_Brazil to use lower case month and day names,[Wikimedia   Capitalization] http://meta.wikimedia.org/wiki/Capitalization_of_Wiktionary_pages    Languages which do not capitalize day names   Portuguese / Portuguese_Brazil    Capitalization of month names   Portuguese / Portuguese_Brazil  Also [Microsoft released a patch for their software] http://support.microsoft.com/kb/2732846  ,jeverington,closed,1,2014-02-10 11:14:12,2014-03-05 14:16:02,,,,1,1
12771,moment/moment,1479,Error isoWeekday  weekday and day,index 6 and 7 shows the same date  2014 10 11  and would have to show  2014 10 11  and  2014 10 12  example:  moment  2014 10 08  .day 6 .format  YYYY MM DD   moment  2014 10 08  .day 7 .format  YYYY MM DD    moment  2014 10 08  .isoWeekday 6 .format  YYYY MM DD   moment  2014 10 08  .isoWeekday 7 .format  YYYY MM DD   ,fitsto,closed,7,2014-02-10 14:49:27,2014-02-10 22:13:50,,Troubleshooting,,,0,1
12770,moment/moment,1480,added load grunt tasks to gruntfile,  Added load grunt tasks module to gruntfile   Removed possible unused module grunt lib legacyhelpers    https://github.com/Mayho/moment/compare/grunt tasks?expand=1 diff b9cfc7f2cdf78a7f4b91a753d10865a2L50 ,Mayho,closed,2,2014-02-11 01:29:04,2014-03-12 07:10:48,,,,1,1
12769,moment/moment,1481,Minor corrections in norwegian nynorsk,,mrtnjrrtt,closed,2,2014-02-11 12:28:03,2014-03-12 07:34:07,,,,1,1
12768,moment/moment,1482,moment undefined  should behave like moment  ,I think moment undefined  should behave the same as moment    For example  if I want to build an array of arguments which I will pass to moment  i can do      js     function toMoment value          var args = [value]         if  this.format               args.push this.format                    return moment.apply moment  args             which returns an invalid moment if I call         toMoment       ,radubrehar,closed,3,2014-02-13 14:24:13,2014-02-13 17:13:35,,,,0,1
12767,moment/moment,1483,Versatile automatic Datejs like parsing autodetecting format,The venerable [Datejs] http://www.datejs.com/   unfortunately abandoned since 2007/2008  has a powerful feature: automatically recognizing a [wide variety of formats] http://stackoverflow.com/a/5277315/1269037 :      // Convert text into Date Date.parse  today  ; Date.parse  t   5 d  ; // today   5 days Date.parse  next thursday  ; Date.parse  February 20th 1973  ; Date.parse  Thu  1 July 2004 22:30:00  ;      It would be great to have a function or plugin that can do this sort of thing. ,dandv,closed,1,2014-02-13 14:30:15,2014-02-13 17:18:41,,,,0,1
12766,moment/moment,1484,[Docs] String format parsing doesn t mention textual timezones,[String format] http://momentjs.com/docs/ /parsing/string format/  parsing has this token documented:      Z  ZZ    Timezone offset as  07:00 or  0700      That thankfully parses timezones like  EST  or  PDT  as well. Perhaps this should be documented too? ,dandv,closed,3,2014-02-13 14:48:27,2014-03-02 19:33:00,,,,0,1
12765,moment/moment,1485, Last Friday at 9:16 AM    Misleading sentence.,I found this to be very misleading as I d typically interpret  Last Friday  as Friday of the previous week. However on Saturday this would still display as  Last Friday . I feel a little more logic in determining when to use  Last Friday  and  Friday  would be beneficial to the end user. ,CodyEngel,closed,1,2014-02-13 15:19:02,2014-02-13 17:08:59,,,,0,1
12764,moment/moment,1486,String   Format Time isValid bug,I pass an invalid time to moment of 112345123:3235460m which it says is 11:32 and isValid  .  moment  112345123:3235460m    hh:mma  .format  HH:mm   11:32 moment  112345123:3235460m    hh:mma  .isValid   true ,ktabors,closed,2,2014-02-13 19:24:27,2014-02-13 20:07:06,,,,0,1
12763,moment/moment,1487,default domain name and password,Hi    How can i set default email and password in rainloop webmail. because  i don t want login screen. when i open rainloop it will show my mail boxes. is it possible?  Thanks. ,manirathinam,closed,2,2014-02-14 07:33:34,2014-02-14 07:40:07,,,,0,1
12762,moment/moment,1488,moment null  should behave like moment undefined ,Currently      moment undefined       returns the current moment  while      moment null       returns an invalid moment.  They should be consistent. ,radubrehar,closed,1,2014-02-14 10:19:14,2014-02-14 15:21:05,,,,0,1
12761,moment/moment,1489,1 test failed. diff:diff between utc and local  63.1  ,    Client info      Date String   : Fri Feb 14 2014 15:37:19 GMT 0400  MSK  Locale String :    14     2014 15:37:19 Offset        :  180 User Agent    : Mozilla/5.0  X11; Linux x86_64; rv:27.0  Gecko/20100101 Firefox/27.0            diff:diff between utc and local  63.1   year diff      javascript // Expected 1 // Actual   0 0 == 1     ,funkill,closed,0,2014-02-14 11:42:55,2014-04-12 19:19:32,,Unit Test Failed,,,0,1
12760,moment/moment,1490,Add / subtract issue,Hey    not sure if anyone else had this issue  but I can t seem to get any method of  moment  objects working.  If I  console.log  something like  moment  .subtract  weeks   1   it works fine  but as soon as I do variable assignment  e.g.  var test = moment  .subtract  weeks   1   it will throw an error  has no method subtract .  Any insight into why this is? ,niftylettuce,closed,2,2014-02-18 16:59:45,2014-02-22 21:51:17,,Troubleshooting,,,0,1
12759,moment/moment,1491,Make composer.json compatible to components installer,This makes it possible to install moment with the components installer  http://robloach.github.io/component installer/ ,aaukt,closed,1,2014-02-21 09:57:13,2014-03-05 12:03:40,,,,1,1
12758,moment/moment,1492,1 test failed. add:add across DST  10.1  ,    Client info      Date String   : Sun Feb 23 2014 13:22:13 GMT 0700  MST  Locale String : February 23  2014 1:22:13 PM MST Offset        : 420 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_8_5  AppleWebKit/537.73.11  KHTML  like Gecko  Version/6.1.1 Safari/537.73.11            add:add across DST  10.1   adding days over DST difference should result in the same hour      javascript // Expected 5 // Actual   6 6 == 5     ,joewagner,closed,0,2014-02-23 20:24:08,2014-04-12 19:19:33,,Unit Test Failed,,,0,1
12757,moment/moment,1493,Sort Comparison Function,When sorting a list of moment objects  or objects that have an attribute that is a moment  and should be the sort key   it would be great if there was a comparison function included. So that we could do things like:      array.sort m.compare      ,schinckel,closed,3,2014-02-24 23:21:29,2014-02-25 01:02:42,,,,0,1
12756,moment/moment,1494,zh language file missing,setting language to  Chinese [zh]  in firefox throws a ENOENT error in node when zh tries to require.   as far as i can tell  zn ch == zn.  ref @ http://en.wikipedia.org/wiki/Wikipedia_talk:Chinese_interlanguage_links   solution is to simply copy the zh cn.js   > zh.js   thus resulting in lang. being required and no server error.         [image] https://f.cloud.github.com/assets/906846/2252918/4c5eeef4 9db2 11e3 9c67 a44c0f363d0a.png  ,gdibble,closed,8,2014-02-25 00:18:44,2014-05-01 17:06:32,,,,0,1
12755,moment/moment,1495,Missing norwegian translation  no.js  file.,On a website I can see that moment is able to translate to both norwegian  no  and norwegian nynorsk  nn :   [image] https://f.cloud.github.com/assets/1346296/2259016/83929f32 9e30 11e3 9cad 5718b54e5769.png   But git repo lacks  lang/no.js  file  as well as distributed bower package does. They could be  no no.js  and  no nn.js  f.e. ,dentuzhik,closed,4,2014-02-25 15:24:49,2014-02-28 09:18:19,,,,0,1
12754,moment/moment,1496,Year is not formatted properly when no format provided,Given this code  the year is formatted as 1911  but the documentation says that only happens if the year is greater than 68. If a format is provided  the problem does not occur.  var test = moment  05/1/11  .toString  ; <   Returns 1911  var test = moment  05/1/11    MM/D/YY  .toString  ; <   Returns 2011 ,wilkinsbrian,closed,2,2014-02-25 18:53:11,2014-02-25 21:58:44,,,,0,1
12753,moment/moment,1497,1 test failed. add:add across DST  10.1  ,    Client info      Date String   : Tue Feb 25 2014 15:30:12 GMT 0800  PST  Locale String : February 25  2014 at 3:30:12 PM PST Offset        : 480 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_9_1  AppleWebKit/537.73.11  KHTML  like Gecko  Version/7.0.1 Safari/537.73.11            add:add across DST  10.1   adding days over DST difference should result in the same hour      javascript // Expected 5 // Actual   6 6 == 5     ,lludo,closed,0,2014-02-25 23:31:37,2014-04-12 19:19:33,,Unit Test Failed,,,0,1
12752,moment/moment,1498,Website shows v2.4.0?,Check out [momentjs.com] http://momentjs.com/ . It currently shows 2.4.0 as the latest version?  [Screenshot] http://cl.ly/U7ns  ,brtdv,closed,1,2014-02-26 09:49:20,2014-02-26 09:55:52,,,,0,1
12751,moment/moment,1499,Properly configure component in composer.json,Provides correct  authors  property  and more importantly  adds the needed properties for use with the Composer component installer.    One note: I ve chosen to include only the base moment.js in the default script build  and load the other  larger  files as alternative files that can be loaded if desired.  I think this makes the most sense  as there will be more projects that just want to use one or a few languages and don t want to load the entire language pack. I ve also included the individual language files  so one can   require [ moment    moment/lang/fr ]  ... ; for instance  to load individual languages. ,kperry42,closed,1,2014-02-27 19:23:35,2014-03-05 12:01:02,,,,1,1
12750,moment/moment,1500,More quarter support,I see that there s some support for quarters.  It would be nice to also support this:   moment  .startOf  quarter     Also would be nice to be able to parse a string in a format like  YYYY Q   but I don t see any quarter options listed on http://momentjs.com/docs/ /parsing/string format/ ,philfreo,closed,2,2014-02-27 20:36:08,2014-04-12 19:23:18,,New Feature,,,0,1
12749,moment/moment,1501,Should moment   fail when passed strings such as  1393449613614 ,This  moment  1393449613614  .fromNow    returns   a few seconds ago  .  But that timestamp is for yesterday. Okay  so I m passing a string and if I pass the correct integer it gives  a day ago  which is correct but shouldn t the original call using a string fail? Instead it is ignoring the huge  painfully invalid string and using  moment  .fromNow    to give a misleading response.  It might save others confusion. ,oliverlloyd,closed,2,2014-02-27 21:20:33,2014-03-12 07:44:41,,,,0,1
12748,moment/moment,1502,Updated meridiem to display a.m./p.m. with periods as optional case,Added an extra variable such that using aa or AA will result in a.m./p.m. or A.M./P.M. being printed  respectfully. Also works when converting from a.m. to moment format.  a.m.  > aa  ,jmccraw,closed,5,2014-02-27 22:10:40,2014-04-11 10:04:17,,,,1,1
12747,moment/moment,1503,1 test failed. add:add across DST  10.1  ,    Client info      Date String   : Thu Feb 27 2014 16:20:56 GMT 0800  PST  Locale String : February 27  2014 at 4:20:56 PM PST Offset        : 480 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_9_2  AppleWebKit/537.74.9  KHTML  like Gecko  Version/7.0.2 Safari/537.74.9            add:add across DST  10.1   adding days over DST difference should result in the same hour      javascript // Expected 5 // Actual   6 6 == 5     ,guomo,closed,0,2014-02-28 00:21:43,2014-04-12 19:19:11,,Unit Test Failed,,,0,1
12746,moment/moment,1504,Add ISO 8601 Time Intervals,There is a project that seems to get most of the implementation down  and it would be great if this could be integrated into Moment core: https://github.com/luisfarzati/moment interval ,cdeszaq,closed,1,2014-03-04 19:41:09,2014-03-05 11:40:30,,,,0,1
12745,moment/moment,1505,1 test failed. lang:zh cn:calendar next week  1768.1  ,    Client info      Date String   : Tue Mar 04 2014 12:35:59 GMT 0700  MST  Locale String : 3/4/2014 12:35:59 PM Offset        : 420 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_8_5  AppleWebKit/537.36  KHTML  like Gecko  Chrome/33.0.1750.117 Safari/537.36            lang:zh cn:calendar next week  1768.1   Today   7 days beginning of day      javascript // Expected      12   // Actual        12         12    ==       12        ,trentlarson,closed,1,2014-03-04 19:42:49,2014-04-12 19:19:12,,Unit Test Failed,,,0,1
12744,moment/moment,1506,2 tests failed. add:add across DST  10.1  lang:zh cn:calendar next week  1768.1  ,    Client info      Date String   : Tue Mar 04 2014 15:32:20 GMT 0500  EST  Locale String : March 4  2014 3:32:20 PM EST Offset        : 300 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_8_5  AppleWebKit/537.73.11  KHTML  like Gecko  Version/6.1.1 Safari/537.73.11            add:add across DST  10.1   adding days over DST difference should result in the same hour      javascript // Expected 5 // Actual   6 6 == 5            lang:zh cn:calendar next week  1768.1   Today   7 days beginning of day      javascript // Expected      12   // Actual        12         12    ==       12        ,chrisribe,closed,0,2014-03-04 20:32:48,2014-04-12 19:19:12,,Unit Test Failed,,,0,1
12743,moment/moment,1507,Timezone offset is negated?,The timezone offset seems considered inversely  negated  from standard UTC notation. The following are equivalent:      moment  .zone 8  moment  .zone   08:00        And these:      moment  .zone  8  moment  .zone   08:00        This is confusing and the documentation does not address this at all. ,thezerobit,closed,1,2014-03-04 23:30:44,2014-03-05 11:37:33,,,,0,1
12742,moment/moment,1508,Invalid date parsing: format not honoured,I was quite amazed parsing  5  resulted in a valid date when the format  DD/MM/YYYY  was given. Shouldn t this give an invalid date? What s the use of parsing it to 5 January 0000?  http://jsfiddle.net/KkbY3/ ,samvanbrussel,closed,1,2014-03-05 09:32:32,2014-03-05 11:30:47,,Forgiving parsing,,,0,1
12741,moment/moment,1509,component 1  throws when installing,The error:  error : EMFILE  open  /Users/marcus/foo/bar/components/moment moment/lang/pl.js  .   It s not always    pl.js    file  .  It works if you delete  .files  in  component.json  manually. ,marcusandre,closed,2,2014-03-05 13:47:00,2014-03-22 21:47:05,,,,0,1
12740,moment/moment,1510,remove files tree from component.js for testing. fix  1509,see  1509 ,marcusandre,closed,2,2014-03-05 13:48:42,2014-03-22 21:47:20,,,,1,1
12739,moment/moment,1511,http://momentjs.com site enhancement,Hello. By now docs section on the site momentjs.com doesn t work with anchors. For example link http://momentjs.com/docs/ /parsing/string format/ doesn t scroll automatically to string format section. I think It can be usefull ,ghost,closed,4,2014-03-05 13:53:24,2014-03-05 14:54:44,,,,0,1
12738,moment/moment,1512,Add flag to isAfter and isBefore to be inclusive,date1.isAfter date2   inclusive: true   returns true if date1 == date2.  Removes the need to do something like:  date1.isSame date2     date1.isAfter date2  ,rbriank,closed,4,2014-03-06 15:30:39,2014-03-06 15:38:43,,,,0,1
12737,moment/moment,1513,introduce isOnOrAfter  and isOnOrBefore,These are inclusive versions of isAfter  and isBefore to avoid having to use 2 checks to determine if a date is on the boundary of your range. ,rbriank,closed,7,2014-03-06 16:16:40,2014-03-06 19:49:16,,,,0,1
12736,moment/moment,1514,More support for daylight savings,It would be very useful to have methods to:   check If the date has a time zone shift i.e. standard time to daylight saving time and viceversa.   get how many hours the day has.   get what hour is repeated or missing. Or get the time at which the shift happens.   set the hours as an offset from the start of the day. e.g. on a day on which 2 am becomes 3 am:       moment  .hourFromMidnight 1 ;//hour is set to 1 am moment  .hourFromMidnight 2 ;//hour is set to 3 am moment  .hourFromMidnight 3 ;//hour is set to 4 am      Let me contribute :  ,fede-s,closed,8,2014-03-07 02:01:54,2014-05-01 17:09:38,,,,0,1
12735,moment/moment,1515,1 test failed. lang:zh cn:calendar next week  1768.1  ,    Client info      Date String   : Fri Mar 07 2014 09:42:42 GMT 0700  Mountain Standard Time  Locale String : 3/7/2014 9:42:42 AM Offset        : 420 User Agent    : Mozilla/5.0  Windows NT 6.3; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/33.0.1750.146 Safari/537.36            lang:zh cn:calendar next week  1768.1   Today   7 days beginning of day      javascript // Expected      12   // Actual        12         12    ==       12        ,jakebair,closed,0,2014-03-07 16:43:15,2014-04-12 19:19:12,,Unit Test Failed,,,0,1
12734,moment/moment,1516,1 test failed. is_before:is before day  149.10  ,    Client info      Date String   : Sat Mar 08 2014 10:37:56 GMT 1100  EST  Locale String : March 8  2014 at 10:37:56 AM GMT 11 Offset        :  660 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_9_2  AppleWebKit/537.74.9  KHTML  like Gecko  Version/7.0.2 Safari/537.74.9            is_before:is before day  149.10   exact end of day      javascript // Expected false // Actual   true true == false     ,shcarrico,closed,0,2014-03-07 23:38:28,2014-04-12 19:19:12,,Unit Test Failed,,,0,1
12733,moment/moment,1517,Native Date bug for days with 25 hours breaks moment,I found this bug which is present on every browser I tried  chrome  ie  firefox  and affects moment. If you have a date object which its time is within an hour of the time at which the clock will be moved backwards and try to set the minutes  seconds  or milliseconds  then the hour will advance by one. Example on US time  look at the time zones       js d = new Date new Date 2014  10  2 .getTime     1   60   60   1000 ; console.log d ;//Sun Nov 02 2014 01:00:00 GMT 0500  Central Daylight Time   d.setMinutes 1 ; console.log d ;//Sun Nov 02 2014 01:00:01 GMT 0600  Central Standard Time        This bug affects moment as well:      js var m = moment  2014 11 2  .add  hours   1 ; console.log m.toString   ;//Sun Nov 02 2014 01:00:00 GMT 0500 console.log m.minutes 1 .toString   ;//Sun Nov 02 2014 01:01:00 GMT 0600     ,fede-s,closed,1,2014-03-07 23:43:02,2014-03-08 00:38:26,,,,0,1
12732,moment/moment,1518,1 test failed. lang:zh cn:calendar next week  1768.1  ,    Client info      Date String   : Fri Mar 07 2014 19:20:54 GMT 0600  CST  Locale String : 3/7/2014 7:20:54 PM Offset        : 360 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_9_2  AppleWebKit/537.36  KHTML  like Gecko  Chrome/34.0.1847.11 Safari/537.36            lang:zh cn:calendar next week  1768.1   Today   7 days beginning of day      javascript // Expected      12   // Actual        12         12    ==       12        ,finder39,closed,0,2014-03-08 01:20:47,2014-04-12 19:19:12,,Unit Test Failed,,,0,1
12731,moment/moment,1519,68 tests failed. preparse_postformat:calendar day  226.4  lang:ar ma:calendar day  314.4  lang:ar:calendar day  336.4  lang:bg:calendar day  358.4  lang:br:calendar day  380.4  lang:bs:calendar day  395.4  lang:ca:calendar day  416.4  lang:cs:calendar day,    Client info      Date String   : Sat Mar 08 2014 15:24:55 GMT 0600  Central Standard Time  Locale String : 3/8/2014 3:24:55 PM Offset        : 360 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/33.0.1750.146 Safari/537.36            preparse_postformat:calendar day  226.4   tomorrow at the same time      javascript // Expected Tomorrow at @:   AM // Actual   Tomorrow at  :   AM  Tomorrow at  :   AM  ==  Tomorrow at @:   AM             lang:ar ma:calendar day  314.4   tomorrow at the same time      javascript // Expected                02:00 // Actual                  01:00                 01:00  ==                 02:00             lang:ar:calendar day  336.4   tomorrow at the same time      javascript // Expected                02:00 // Actual                  01:00                 01:00  ==                 02:00             lang:bg:calendar day  358.4   tomorrow at the same time      javascript // Expected        2:00 // Actual          1:00         1:00  ==         2:00             lang:br:calendar day  380.4   tomorrow at the same time      javascript // Expected Warc     ,mhakes,closed,0,2014-03-08 21:24:56,2014-04-12 19:19:12,,Unit Test Failed,,,0,1
12730,moment/moment,1520,Timezone offset wrong for Central Chicago 3 days before daylight savings change,My OS time is:  four@localhost     date Sat Mar  8 22:14:55 CST 2014 four@localhost     UTC time is currently: Sun Mar  9 04:09:22 UTC 2014  but in chromium browser with the code: zone = timeDisplay.format  ZZ    I get: zone:   0500   This issue started happening about a 3 days ago I have screen shots from my app that uses moment taken 3 days ago to verify . Daylight savings time is happening tomorrow which brought my attention to it in which I found after much investigation.  ,dman777,closed,7,2014-03-09 04:15:04,2014-03-22 21:46:34,,Troubleshooting,,,0,1
12729,moment/moment,1521,After DST change  startOf  day   is not working as expected.,//I m in San Francisco. Running this code on March 9th  2014 @ 5pm  approx  var m = new moment.utc  ; //print m.format       > 2014 03 09T23:57:10 00:00 m.tz  America/Los_Angeles  ; //print m.format       >  2014 03 09T16:57:10 07:00  expected and actual  m.startOf  day  ; //print m.format       >  2014 03 08T23:00:00 08:00  actual                                    but expected was  2014 03 09T0:0:0 08:00  You can also reproduce the same issue as follows: m.hours 0 .minutes 0 .seconds 0 .milliseconds 0 ; //Yields the same INCORRECT result. ,urspralini,closed,1,2014-03-10 00:02:53,2014-03-13 17:25:47,,,,0,1
12728,moment/moment,1522,Adding Israel timezone,Hi  can you please add Asia/Israel to the timezone table ? ,arLevi,closed,0,2014-03-10 11:39:10,2014-03-10 11:41:41,,,,0,1
12727,moment/moment,1523,ISO Duration Support,Is there works to make Moment ISO duration strings?  I found this: https://github.com/dordille/moment isoduration/blob/master/moment.isoduration.js  But it would much easier if it was put into the core. ,CMCDragonkai,closed,5,2014-03-10 16:17:38,2014-03-12 08:13:17,,,,0,1
12726,moment/moment,1524,Diff returns incorrect number,If you do:      var tenYearsAgo = moment  .subtract  years   10 .toDate  ; var yearsAgo = moment  .diff tenYearsAgo   years  ;      most of the time it returns 10  as you would expect.  However  today   Mon Mar 10 2014 10:21:40 GMT 0700  PDT    I noticed that it can sometimes return 9.  I do understand that diff rounds down.  However  even when there is 0ms between the date generation and the diff calculation there should still be exactly 10 years between the generated date and the current moment  unless  subtract  has a bug   so there should never be any need to round down.  P.S.  If I subtract an extra hour from tenYearsAgo it fixes the bug.  Given that Daylight Savings Time just ended yesterday  it really looks like this is some sort of DST related issue. ,machineghost,closed,3,2014-03-10 17:48:28,2014-03-13 17:00:15,,Troubleshooting,,,0,1
12725,moment/moment,1525,67 tests failed. preparse_postformat:calendar day  226.6  lang:ar ma:calendar day  314.6  lang:ar:calendar day  336.6  lang:bg:calendar day  358.6  lang:br:calendar day  380.6  lang:bs:calendar day  395.6  lang:ca:calendar day  416.7  lang:cs:calendar day  439.6  lang:cv:calendar day  462.6  lang:cy:same day  483.6  lang:de:calendar day  522.6  lang:el:calendar day  544.6  lang:en au:calendar day  566.6  lang:en ca:calendar day  588.6  lang:en gb:calendar day  610.6  lang:en:calendar day  632.6  lang:eo:calendar day  653.6  lang:es:calendar day  675.7  lang:et:calendar day  697.6  lang:eu:calendar day  719.6  lang:fa:calendar day  741.6  lang:fi:calendar day  763.6  lang:fr ca:same day  802.6  lang:fr:same day  823.6  lang:gl:calendar day  844.7  lang:he:calendar day  866.6  lang:hi:calendar day  888.6  lang:hr:calendar day  911.6  lang:hu:calendar day  933.6  lang:hy am:calendar day  960.6  lang:id:calendar day  981.6  lang:is:calendar day  1003.6  lang:it:calendar day  1024.6  lang:ja:calendar day  1045.6  ,    Client info      Date String   : Mon Mar 10 2014 14:46:49 GMT 0500  Central Daylight Time  Locale String : 3/10/2014 2:46:49 PM Offset        : 360 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/33.0.1750.146 Safari/537.36            preparse_postformat:calendar day  226.6   yesterday at the same time      javascript // Expected Yesterday at @:   AM // Actual   Yesterday at  :   AM  Yesterday at  :   AM  ==  Yesterday at @:   AM             lang:ar ma:calendar day  314.6   yesterday at the same time      javascript // Expected                02:00 // Actual                  01:00                 01:00  ==                 02:00             lang:ar:calendar day  336.6   yesterday at the same time      javascript // Expected                02:00 // Actual                  01:00                 01:00  ==                 02:00             lang:bg:calendar day  358.6   yesterday at the same time      javascript // Expected         2:00 // Actual           1:00          1:00  ==          2:00             lang:br:calendar day  380.6   yesterday at the same time      javascript // Expected Dec     ,weshead,closed,10,2014-03-10 19:47:07,2014-04-12 19:19:12,,Unit Test Failed,,,0,1
12724,moment/moment,1526,Fixes to nn  rebased ,This is rebased  1481 ,ichernev,closed,0,2014-03-12 07:33:51,2014-03-12 08:41:57,,,,1,1
12723,moment/moment,1527,Remove specific versions from dev deps and try to use latest,Trying to fix https://travis ci.org/moment/moment/builds/20586789 ,ichernev,closed,0,2014-03-12 08:33:08,2014-03-12 08:35:58,,,,1,1
12722,moment/moment,1528,Improve serbian latin translation,This is just a partition of  1472 as described here https://github.com/moment/moment/pull/1472 issuecomment 36736292 ,ichernev,closed,0,2014-03-12 08:59:50,2014-03-12 16:41:30,,,,1,1
12721,moment/moment,1529,Add serbian cyrillic language,Partition of  1472 as described here https://github.com/moment/moment/pull/1472 issuecomment 36736292 ,ichernev,closed,0,2014-03-12 09:00:17,2014-03-12 16:42:12,,,,1,1
12720,moment/moment,1530,Formatting token for formatting a date to milliseconds ,Moment has X formatting token  but it would be useful to have another token for milliseconds. X token reduces partial second precision. ,ghost,closed,3,2014-03-12 20:26:01,2014-03-13 16:35:37,,,,0,1
12719,moment/moment,1531,isDST appears broken in Chrome,moment  12 March 2014  .isDST   => False    in Chrome V33  moment  12 March 2014  .isDST   => True   in Node  Firefox   Correct answer should be True.  I m running from  America/Los_Angeles  timezone directly on the momentjs.com page.  momentjs v2.5.1   What is the culprit?  Also   I am concerned that other DST related functions may not be working.  Would the others be isolated from this? ,tobinvanpelt,closed,4,2014-03-12 23:10:23,2014-03-13 01:28:09,,,,0,1
12718,moment/moment,1532,1 test failed. add:add across DST  10.1  ,    Client info      Date String   : Wed Mar 12 2014 21:52:32 GMT 0600  MDT  Locale String : March 12  2014 at 9:52:32 PM MDT Offset        : 420 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_9_2  AppleWebKit/537.74.9  KHTML  like Gecko  Version/7.0.2 Safari/537.74.9            add:add across DST  10.1   adding days over DST difference should result in the same hour      javascript // Expected 5 // Actual   6 6 == 5     ,petkusj,closed,0,2014-03-13 03:53:45,2014-04-12 19:19:12,,Unit Test Failed,,,0,1
12717,moment/moment,1533,Moment can t parse  2014 03 13T11:00:00  0700 ,I was using Moment 2.0  but because I needed a bugfix  for https://github.com/moment/moment/issues/1524  I upgraded to the latest  2.5.1  version of Moment.  When I did I discovered that the latest version of Moment doesn t seem to like the ISO format; when I try:      moment  2014 03 13T11:00:00  0700  .toDate  ;      I get  invalid date   not a date as expected. ,machineghost,closed,1,2014-03-13 19:10:54,2014-03-13 21:14:20,,,,0,1
12716,moment/moment,1534,19 tests failed. ,    Client info      Date String   : Fri Mar 14 2014 16:29:19 GMT 0800  CST  Locale String : 3/14/2014 4:29:19 PM Offset        :  480 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_9_2  AppleWebKit/537.36  KHTML  like Gecko  Chrome/33.0.1750.149 Safari/537.36            lang:ca:format month  407.1   gener gen.      javascript // Expected gener gen. // Actual   Gener Gen.  Gener Gen.  ==  gener gen.             lang:ca:format month  407.2   febrer febr.      javascript // Expected febrer febr. // Actual   Febrer Febr.  Febrer Febr.  ==  febrer febr.             lang:ca:format month  407.3   mar  mar.      javascript // Expected mar  mar. // Actual   Mar  Mar.  Mar  Mar.  ==  mar  mar.             lang:ca:format month  407.4   abril abr.      javascript // Expected abril abr. // Actual   Abril Abr.  Abril Abr.  ==  abril abr.             lang:ca:format month  407.5   maig mai.      javascript // Expected maig mai. // Actual   Maig Mai.  Maig Mai.  ==  maig mai.             lang:ca:format month  407.6   juny jun.      javascript // Expected juny jun. // Actual   Juny Jun.  Juny Jun.  ==  juny jun.             lang:ca:format month  407.7   juliol jul.      javascript // Expected juliol jul. // Actual   Juliol Jul.  Juliol Jul.  ==  juliol jul.             lang:ca:format month  407.8   agost ag.      javascript // Expected agost ag. // Actual   Agost Ag.  Agost Ag.  ==  agost ag.             lang:ca:format month  407.9   setembre set.      javascript // Expected setembre set. // Actual   Setembre Set.  Setembre Set.  ==  setembre set.             lang:ca:format month  407.10   octubre oct.      javascript // Expected octubre oct. // Actual   Octubre Oct.  Octubre Oct.  ==  octubre oct.             lang:ca:format month  407.11   novembre nov.      javascript // Expected novembre nov. // Actual   Novembre Nov.  Novembre Nov.  ==  novembre nov.             lang:ca:format month  407.12   desembre des.      javascript // Expected desembre des. // Actual   Desembre Des.  Desembre Des.  ==  desembre des.             lang:ca:format week  408.1   diumenge dg. Dg      javascript // Expected diumenge dg. Dg // Actual   Diumenge Dg. Dg  Diumenge Dg. Dg  ==  diumenge dg. Dg             lang:ca:format week  408.2   dilluns dl. Dl      javascript // Expected dilluns dl. Dl // Actual   Dilluns Dl. Dl  Dilluns Dl. Dl  ==  dilluns dl. Dl             lang:ca:format week  408.3   dimarts dt. Dt      javascript // Expected dimarts dt. Dt // Actual   Dimarts Dt. Dt  Dimarts Dt. Dt  ==  dimarts dt. Dt             lang:ca:format week  408.4   dimecres dc. Dc      javascript // Expected dimecres dc. Dc // Actual   Dimecres Dc. Dc  Dimecres Dc. Dc  ==  dimecres dc. Dc             lang:ca:format week  408.5   dijous dj. Dj      javascript // Expected dijous dj. Dj // Actual   Dijous Dj. Dj  Dijous Dj. Dj  ==  dijous dj. Dj             lang:ca:format week  408.6   divendres dv. Dv      javascript // Expected divendres dv. Dv // Actual   Divendres Dv. Dv  Divendres Dv. Dv  ==  divendres dv. Dv             lang:ca:format week  408.7   dissabte ds. Ds      javascript // Expected dissabte ds. Ds // Actual   Dissabte Ds. Ds  Dissabte Ds. Ds  ==  dissabte ds. Ds      ,Snger,closed,0,2014-03-14 08:33:02,2014-04-12 19:19:33,,Unit Test Failed,,,0,1
12715,moment/moment,1535,isSame behavior,Refs  1371   I have a [jsfiddle] http://jsfiddle.net/3J6K7/6/  showing isSame returning inconsistent results. The first if block seems to return true/false almost randomly.  The second if block almost always returns true  but every 30 or so tries returns false.  I m not sure if the second inconsistency is a problem being introduce through jsFiddle or not. The first inconsistency I can reproduce external to jsFiddle reliably.  I m wondering if this is a bug  or if I m using isSame incorrectly.  Thanks for momentjs  This is the only thing I ve encountered after pretty substantial use  ,rday,closed,1,2014-03-16 16:19:22,2014-03-16 21:05:22,,,,0,1
12714,moment/moment,1536,Corrected the Danish ouput formats  1428,Corrected Danish formatting  please review  my very first pull request  :   . See  1428 including jsFiddle demonstrating the new format. ,SabbeRubbish,closed,2,2014-03-17 13:38:19,2014-03-18 07:36:41,,,,1,1
12713,moment/moment,1537,hasModule check fails if require is not defined,I m using webpack to build the bundle and after recent update moment.js gets incorrectly included into the module. Here is the full story: https://github.com/webpack/webpack/issues/204 issuecomment 37904700.  This happens because it tries to check if the  require  is defined  I m assuming this was done with a reason  but is it still valid these days?      hasModule =  typeof module  ==  undefined     module.exports    typeof require  ==  undefined         Ideally this should be like this:      hasModule = typeof module  ==  undefined     module.exports       Or if the  require  check is beneficial for some reason  then perhaps like this:      hasModule =  typeof module  ==  undefined     module.exports     typeof require  ==  undefined       ,ianbytchek,closed,9,2014-03-18 12:59:26,2014-04-04 17:44:53,,,,0,1
12712,moment/moment,1538,How can I format a duration of seconds into HH:mm:ss?,Been searching through the docs at http://momentjs.com/docs but found no hint.  Any clues? Thanks  ,binarykitchen,closed,8,2014-03-19 02:19:52,2014-03-19 02:23:54,,,,0,1
12711,moment/moment,1539,Wrong parsing of object values  when object parameters are strings,Actual result:   moment  y:  1993   M: 1   d:  29   .isValid  ; // true moment  y: 1993  M:1  d: 29  .isValid  ; //false   Expected result: false in both cases. Or we should always pass numbers and all checks and conversions must be in our code  not in the library? ,apsavin,closed,2,2014-03-19 13:12:24,2014-03-22 14:51:30,,,,0,1
12710,moment/moment,1540,Changed the time separator for Norwegian bokm l,Norwegian bokm l uses the character  :  as the time separator  not  .  ,chrfalch,closed,1,2014-03-20 09:22:13,2014-03-22 21:38:02,,,,1,1
12709,moment/moment,1541,Support ES6 modules style,ES6 modules transpiled for AMD attach the default export to  exports[ default ]   so it can be loaded via:  import moment from  moment ;   Alternatively  and it may be best to do both  a module can attach to  exports[moduleName]   so it can be loaded via:  import   moment   from  moment ;   Currently moment registers as an AMD module via  define    and returns moment directly. Projects that currently make use of ES6 module syntax are transpiled using a tool like Square s [transpiler] https://github.com/square/es6 module transpiler  or Google s [Traceur] https://github.com/google/traceur compiler   and if AMD style modules are generated  then the imports are resolved like so:      JavaScript // import moment from  moment ; define  myModule   [ moment ]    function __dependency1__        var moment = __dependency1__[ default ];  // import   moment   from  moment ; define  myModule2   [ moment ]    function __dependency1__        var moment = __dependency1__.moment;      It may be worth investigating how to best support the ES6 style imports for such projects  in addition to the existing support for loaders. Possibly attach moment to both  exports[ default ]  and  exports[ moment ]   or since moment itself is returned from  define     to  moment[ default ]  and  moment[ moment ]   making it available to all import styles.  The workaround is to  import  moment ;  and then access it by relying on  window.moment . As you know  this is not exactly in the spirit of module loaders. ,macu,closed,3,2014-03-20 14:06:00,2014-04-05 20:48:47,,,,0,1
12708,moment/moment,1542,unix   method doesn t consider the timezone,The name of the unix   method suggests that the function returns the number of seconds since 1970/01/01 00:00:00 UTC  as does the time   function in Unix  considering the timezone.  However  this function currently returns the number of seconds since 1970/01/01 00:00:00 UTC  independently of the timezone expressed in the moment.  For example:      js     moment.tz  01/01/2014 01:00    DD/MM/YYYY HH:mm    America/Santiago  .unix        return the same as      js    moment.tz  01/01/2014 01:00    DD/MM/YYYY HH:mm    Europe/Madrid  .unix        Now I have a function that returns what I think it should be the actual unix   method should return:       js function momentToUnixAccordingTimezone m        var n = moment  ;     return m.unix    m.zone   60   n.zone   60 ;       ,davefx,closed,4,2014-03-20 20:04:47,2014-03-20 21:11:55,,,,0,1
12707,moment/moment,1543,moment  2014 03 20    DD MM YYYY  true .isValid     returns true,moment  2014 03 20    DD MM YYYY  true .isValid    This is returning true.  I was expecting it to return false.  Am I mistaken? ,MrChriZ,closed,1,2014-03-20 23:56:30,2014-03-31 03:38:29,,Troubleshooting,,,0,1
12706,moment/moment,1544,Add Khmer language  The Language of Cambodia ,The language code is   km  . Reference: http://reference.sitepoint.com/html/lang codes ,kruyvanna,closed,2,2014-03-21 12:26:39,2014-03-22 21:27:44,,,,1,1
12705,moment/moment,1545,allowing customized year parsing,Fixes  1439 ,icambron,closed,1,2014-03-22 21:21:51,2014-04-02 07:51:22,,,,1,1
12704,moment/moment,1546,Khmer: Fix Last Week and Ordinal,Fix Last Week and Ordinal ,kruyvanna,closed,5,2014-03-24 10:51:48,2014-04-10 16:54:36,,,,1,1
12703,moment/moment,1547,Logic for min / max functions is reversed,moment  2014 03 25  .max moment  2014 03 30   .format  YYYY MM DD    2014 03 25  moment  2014 03 25  .min moment  2014 03 30   .format  YYYY MM DD    2014 03 30   See http://jsfiddle.net/tALhU/ ,guido-weber,closed,1,2014-03-25 10:40:14,2014-04-02 07:44:17,,,,0,1
12702,moment/moment,1548,Deprecate then eliminate max/min,moment  .min and moment  .max were a good idea for helper functions  but combined with the mutability that most moment   methods have it turned out disasterously confusing.  So we re deprecating those two in favor of  moment.min  and  moment.max   which are non mutating and work on any number of objects:      javascript // if a  b  c  d are moments ordered in time moment.min a  b ;  // a moment.min a  b  c  d ;  // a  moment.min [a  b  c  d] ;  // a moment.max a  b ;  // b moment.max a  b  c  d ;  // d moment.max [a  b  c  d] ;  // d     ,icambron,closed,2,2014-03-25 21:07:29,2014-06-05 06:24:12,,,,0,1
12701,moment/moment,1549,moment  15/12/1987  .lang  fr  .isValid   return false,Why  moment  15/12/1987  .lang  fr  .isValid  ; // false  ?  I launch this command on the [momentJS site] http://momentjs.com .   [Imgur] http://i.imgur.com/8K7Gh6k.png  ,EpokK,closed,2,2014-03-26 10:37:43,2014-03-31 03:37:57,,,,0,1
12700,moment/moment,1550,Display Multiple Timezones?,  Wrong issue page  sorry  ,stoqe,closed,0,2014-03-26 11:06:32,2014-03-26 11:07:54,,,,0,1
12699,moment/moment,1551,1 test failed. lang:zh cn:calendar next week  1768.1  ,    Client info      Date String   : Wed Mar 26 2014 15:10:58 GMT 0100  CET  Locale String : 3/26/2014 3:10:58 PM Offset        :  60 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_9_2  AppleWebKit/537.36  KHTML  like Gecko  Chrome/33.0.1750.152 Safari/537.36            lang:zh cn:calendar next week  1768.1   Today   7 days beginning of day      javascript // Expected      12   // Actual        12         12    ==       12        ,daniel-lang,closed,0,2014-03-26 14:11:22,2014-04-12 19:19:12,,Unit Test Failed,,,0,1
12698,moment/moment,1552,1 test failed. lang:zh cn:calendar next week  1768.1  ,    Client info      Date String   : Wed Mar 26 2014 17:02:35 GMT 0000  GMT  Locale String : 3/26/2014 5:02:35 PM Offset        : 0 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_9_2  AppleWebKit/537.36  KHTML  like Gecko  Chrome/33.0.1750.152 Safari/537.36            lang:zh cn:calendar next week  1768.1   Today   7 days beginning of day      javascript // Expected      12   // Actual        12         12    ==       12        ,Robdab,closed,0,2014-03-26 17:03:01,2014-04-12 19:19:12,,Unit Test Failed,,,0,1
12697,moment/moment,1553,Add optional time argument to calendar method,For example:      javascript moment  .calendar   // => Today at [...]  fakeToday = moment  .subtract   days   1   moment  .calendar  fakeToday   //  Today  from the perspective of yesterday   fakeToday   is  tomorrow . // => Tomorrow at [...]      I m not sure how useful this would be outside of a testing environment  but with it you can test the  calendar  method by feed it a stubbed out  now . ,jgillman,closed,2,2014-03-26 23:55:54,2014-03-27 00:34:00,,,,1,1
12696,moment/moment,1554,Add optional time argument to calendar method,For example:      javascript moment  .calendar   // => Today at [...]  fakeToday = moment  .subtract   days   1   moment  .calendar  fakeToday   //  Today  from the perspective of yesterday   fakeToday   is  tomorrow . // => Tomorrow at [...]      I m not sure how useful this would be outside of a testing environment  but with it you can test the  calendar  method by feed it a stubbed out  now . ,jgillman,closed,2,2014-03-27 00:36:47,2014-05-21 07:49:08,,,,1,1
12695,moment/moment,1555,1 test failed. lang:zh cn:calendar next week  1768.1  ,    Client info      Date String   : Thu Mar 27 2014 09:32:37 GMT 0100  CET  Locale String : 27 Mar 2014 09:32:37 GMT 1 Offset        :  60 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_9_2  AppleWebKit/537.74.9  KHTML  like Gecko  Version/7.0.2 Safari/537.74.9            lang:zh cn:calendar next week  1768.1   Today   7 days beginning of day      javascript // Expected      12   // Actual        12         12    ==       12        ,rand99,closed,0,2014-03-27 08:32:49,2014-03-27 08:33:13,,Unit Test Failed,,,0,1
12694,moment/moment,1556,Vietnamese is vi  not vn,MediaWiki is using this library  but it also uses the standard ISO 639 code for Vietnamese   vi    so it doesn t pick up this localization when the interface language is set to Vietnamese.   vn  is the ISO country code for Vietnam.  ,1ec5,closed,1,2014-03-27 09:29:21,2014-03-27 17:13:03,,,,1,1
12693,moment/moment,1557,1 test failed. lang:zh cn:calendar next week  1768.1  ,    Client info      Date String   : Thu Mar 27 2014 10:19:02 GMT 0000  GMT Standard Time  Locale String : Thursday  March 27  2014 10:19:02 AM Offset        : 0 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64; rv:28.0  Gecko/20100101 Firefox/28.0            lang:zh cn:calendar next week  1768.1   Today   7 days beginning of day      javascript // Expected      12   // Actual        12         12    ==       12        ,dotdashdotdot,closed,0,2014-03-27 10:22:24,2014-04-12 19:19:12,,Unit Test Failed,,,0,1
12692,moment/moment,1558,1 test failed. lang:zh cn:calendar next week  1768.1  ,    Client info      Date String   : Thu Mar 27 2014 11:00:03 GMT 0000  GMT  Locale String : 3/27/2014 11:00:03 AM Offset        : 0 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_9_2  AppleWebKit/537.36  KHTML  like Gecko  Chrome/33.0.1750.152 Safari/537.36            lang:zh cn:calendar next week  1768.1   Today   7 days beginning of day      javascript // Expected      12   // Actual        12         12    ==       12        ,alexbassy,closed,0,2014-03-27 11:00:51,2014-04-12 19:19:12,,Unit Test Failed,,,0,1
12691,moment/moment,1559,Updating Arabic language,Updating Arabic language and minimize weekdaysShort ,xsoh,closed,4,2014-03-27 17:16:20,2014-04-28 03:20:54,,,,1,1
12690,moment/moment,1560,Add moment.relative,No tests for this yet  but just wanna open this up to see if there s interest in merging. If there is  I ll add some tests/docs/cleanup.  We need the ability to parse a date relative to another date. For example  given the input  3:33 PM   I want to be able to parse this value relative to two days from now  instead of the current date/time. This allows you to do the following:      javascript moment.relative moment  2014 03 29     3:33 PM    h:mm A       ,ejholmes,closed,2,2014-03-27 22:32:56,2014-03-28 19:04:37,,,,1,1
12689,moment/moment,1561,1 test failed. lang:zh cn:calendar next week  1768.1  ,    Client info      Date String   : Fri Mar 28 2014 08:03:55 GMT 0000  GMT Standard Time  Locale String : 3/28/2014 8:03:55 AM Offset        : 0 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/33.0.1750.154 Safari/537.36            lang:zh cn:calendar next week  1768.1   Today   7 days beginning of day      javascript // Expected      12   // Actual        12         12    ==       12        ,PeteManchester,closed,0,2014-03-28 08:05:36,2014-04-12 19:19:12,,Unit Test Failed,,,0,1
12688,moment/moment,1562,1 test failed. lang:zh cn:calendar next week  1768.1  ,    Client info      Date String   : Fri Mar 28 2014 10:49:30 GMT 0000  GMT Standard Time  Locale String : 28 March 2014 10:49:30 Offset        : 0 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64; rv:27.0  Gecko/20100101 Firefox/27.0            lang:zh cn:calendar next week  1768.1   Today   7 days beginning of day      javascript // Expected      12   // Actual        12         12    ==       12        ,Sephster,closed,1,2014-03-28 10:50:42,2014-03-28 10:51:16,,Unit Test Failed,,,0,1
12687,moment/moment,1563,1 test failed. lang:zh cn:calendar next week  1768.1  ,    Client info      Date String   : Fri Mar 28 2014 15:03:48 GMT 0100  CET  Locale String : 28.3.2014 15:03:48 Offset        :  60 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_7_5  AppleWebKit/537.36  KHTML  like Gecko  Chrome/33.0.1750.152 Safari/537.36            lang:zh cn:calendar next week  1768.1   Today   7 days beginning of day      javascript // Expected      12   // Actual        12         12    ==       12        ,jakim,closed,0,2014-03-28 14:04:54,2014-04-12 19:19:12,,Unit Test Failed,,,0,1
12686,moment/moment,1564,Fix zone madness,This is supposed to fix most issues regarding manipulating  moment timezone  d moments across DST. Unfortunately the built in Date still has the same issues.  The main idea of the change is:   create low level unit getters and setters that don t care about offset.   Create higher level setter  that handles updating offset.   Handle keep time cases  changing the time across DST while wanting to preserve the hour/minutes   in which it is impossible  no such hour/minute in the current timezone    change updateOffset/zone api  zone s second arg wasn t working at all before  so I m pretty confident no code is broken     Setting the hour now keeps the time  that is we ll try to actually set the hour to the one you say :     startOf now works across DST  Corresponding  moment timezone  PR will show up soon  EDIT: https://github.com/moment/moment timezone/pull/70 ,ichernev,closed,13,2014-03-29 17:27:13,2014-04-02 14:49:11,,,,1,1
12685,moment/moment,1565,problem with isValid method,Hi   I noticed strange behavior with  isValid  method:   moment  20140328T111427 07:00    YYYY MM DD  .isValid    returns  false  while  moment  20140328T070707 01:00    YYYY MM DD  .isValid    returns  true .  Can be reproduced with the latest version. ,podviaznikov,closed,7,2014-03-29 18:43:49,2014-03-31 02:24:57,,,,0,1
12684,moment/moment,1566,1 test failed. lang:zh cn:calendar next week  1768.1  ,    Client info      Date String   : Sat Mar 29 2014 20:51:31 GMT 0200  GTB Standard Time  Locale String : 3/29/2014 8:51:31 PM Offset        :  120 User Agent    : Mozilla/5.0  Windows NT 6.3; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/33.0.1750.154 Safari/537.36            lang:zh cn:calendar next week  1768.1   Today   7 days beginning of day      javascript // Expected      12   // Actual        12         12    ==       12        ,zsolt-donca,closed,0,2014-03-29 18:51:46,2014-04-12 19:19:12,,Unit Test Failed,,,0,1
12683,moment/moment,1567,Add format args to calendar  ,Add args to calendar   to customize the output  maybe args just merges with the loaded language _calendar or _longDateFormat array.  > I know there is already a global option to swap language arrays > However  you can also overwrite an existing language that has been loaded as well. > moment.lang  en     >     // customizations >   ; ,klihelp,closed,3,2014-03-30 15:58:17,2014-07-02 23:02:28,,,,0,1
12682,moment/moment,1568,30 of March 2014 returns a very weird result,Unfortunately for very mistaken reason we re using Moment.js for our companies  calendar and I came up with this date being strangely wrong and messing up with our entire schedule for the wrong date:  30 March 2014.  This: moment  2014/03/30  .format  DD    returns: 29  This issue is only on Chrome 33 as far as I am aware of. The bug does not happens on Firefox. ,tsouloftas,closed,2,2014-03-31 05:32:15,2014-07-02 23:03:08,,Troubleshooting,,,0,1
12681,moment/moment,1569,Cannot overwrite the default calendar format,I m trying to update the the format for a language  en au . I m using  moment with lang.min.js . Here is the piece of code I m testing with:      javascript         var m = new moment.unix timestamp .utc  ;         m.lang  en au                 calendar :                   lastDay :  [Yesterday at] LT                   sameDay :  [Today at] LT                   nextDay :  [Tomorrow at] LT                   lastWeek :  [last] dddd [at] LT                   nextWeek :  dddd [at] LT                   sameElse :  ddd  MMM Do   h:mma                          ;          console.log m ;      When I check the moment object  the format for  sameElse  is still the default one  L . How can I overwrite this format?  http://jsfiddle.net/maxwell2022/Lnz8z/1/  Cheers   ,Maxwell2022,closed,3,2014-03-31 06:42:25,2014-07-02 23:01:17,,,,0,1
12680,moment/moment,1570,isValid   returning false,Hi guys   We re using version 2.4.0  i know we should update to the latest   but im having problems validating a certain date.  For some weird reason  validating March 31  2014 is returning an invalid date.  moment [2014  02  31] .isValid  ; // returns overflow 2  And any March 31 in other years returns back an invalid date too.  Thanks and looking forward to your response. ,roldeguz,closed,3,2014-03-31 15:14:05,2014-03-31 19:21:28,,Troubleshooting,,,0,1
12679,moment/moment,1571,hungarian language  meridiem added,,vegvari,closed,4,2014-04-01 09:43:21,2014-04-06 20:10:46,,,,1,1
12678,moment/moment,1572,Update /lang/sq.js fixed some missing     chars,Hi  I edited the albanian language file as some  e  s need to be written with the diaeresis diacritic  i.e. as     . Thought you might want to merge this into master. ,oerd,closed,1,2014-04-01 11:04:01,2014-04-01 12:58:40,,,,1,1
12677,moment/moment,1573,[FIX] Change some  e  to     in Albanian.,Fixed some typos in  /lang/sq.js  and  /test/lang/sq.js . Also  trailing     is often silent in Albanian  so it s easy to miss.   This is a fix of the previously closed  1572 as I had forgotten  changing the tests  ,oerd,closed,3,2014-04-01 15:18:40,2014-04-04 07:44:59,,,,1,1
12676,moment/moment,1574,Warning about wrapShim with RequireJS,I ve got a pretty large project using many plugins for jquery  bootstrap  backbone  etc. Upon upgrading to the latest moment.js some non AMD compatible plugins that depended on moment  e.g. [bootstrap daterangepicker] https://github.com/dangrossman/bootstrap daterangepicker   stopped working    only in the r.js optimized single file build of the project.  The issue is due to how  later versions of  Moment don t also set a global window.moment if RequireJS is present. What moment.js is doing is pretty unique among browser RequireJS libraries  first I ve encountered . jQuery [still exposes the global] https://github.com/jquery/jquery/blob/2.1.0/dist/jquery.js L9099 L9104  even when RequireJS is used.  Even when you define the RequireJS shim properly  such as:  shim:    bootstrap daterangepicker : [ jquery    moment ]    it still fails.  There is a RequireJS option [wrapShim] https://github.com/jrburke/r.js/blob/b8a6982d2923ae8389355edaa50d2b7f8065a01a/build/example.build.js L68 L78  that fixes this behavior.   I bring this up only because it took me a long time to debug the issue  for what should have been a simple Moment.js version bump   so I d recommend putting a warning in http://momentjs.com/docs/ /use it/require js/ like:  > If you have other plugins that rely on Moment but aren t AMD compatible  you may need to add [ wrapShim: true ] https://github.com/jrburke/r.js/blob/b8a6982d2923ae8389355edaa50d2b7f8065a01a/build/example.build.js L68 L78  to your r.js config. ,philfreo,closed,6,2014-04-01 16:30:13,2014-04-04 17:45:25,,,,0,1
12675,moment/moment,1575,getting errot in installation of moment module...any1 can help?,log infor : 1: info it worked if it ends with ok verbose cli [  node    /usr/bin/npm    install    moment  ] info using npm@1.1.4 info using node@v0.6.12 verbose config file /home/shailendra/.npmrc verbose config file /usr/etc/npmrc verbose config file /usr/share/npm/npmrc verbose cache add [  moment   null ] silly cache add: name  spec  args [ undefined   moment   [  moment   null ] ] verbose parsed url   pathname:  moment   path:  moment   href:  moment    verbose addNamed [  moment      ] verbose addNamed [ null     ] silly name  range  hasData [  moment       false ] verbose raw  before any munging moment verbose url resolving [  https://registry.npmjs.org/    ./moment  ] verbose url resolved https://registry.npmjs.org/moment http GET https://registry.npmjs.org/moment ERR  Error: failed to fetch from registry: moment ERR      at /usr/share/npm/lib/utils/npm registry client/get.js:139:12 ERR      at cb  /usr/share/npm/lib/utils/npm registry client/request.js:31:9  ERR      at Request._callback  /usr/share/npm/lib/utils/npm registry client/request.js:136:18  ERR      at Request.callback  /usr/lib/nodejs/request/main.js:119:22  ERR      at Request.<anonymous>  /usr/lib/nodejs/request/main.js:212:58  ERR      at Request.emit  events.js:88:20  ERR      at ClientRequest.<anonymous>  /usr/lib/nodejs/request/main.js:412:12  ERR      at ClientRequest.emit  events.js:67:17  ERR      at HTTPParser.onIncoming  http.js:1261:11  ERR      at HTTPParser.onHeadersComplete  http.js:102:31  ERR  You may report this log at: ERR      http://bugs.debian.org/npm ERR  or use ERR      reportbug   attach /home/shailendra/npm debug.log npm ERR   ERR  System Linux 3.8.0 37 generic ERR  command  node   /usr/bin/npm   install   moment  ERR  cwd /home/shailendra ERR  node  v v0.6.12 ERR  npm  v 1.1.4 ERR  message failed to fetch from registry: moment verbose exit [ 1  true ] ,shailendra9,closed,2,2014-04-02 06:55:11,2014-04-02 20:38:57,,,,0,1
12674,moment/moment,1576,UTC date string parsing with more than three fractions fails on some browsers...,UTC date string parsing should always succeed  since they are ISO 8601 date strings. However  when a UTC date is used that consists of more than three fraction digits  parsing fails on IE9. An example of such a date string is:   2013 07 31T22:00:00.0000000Z  I checked the regexes used and found out that the isoRegex matches  it checks for  d    but that the isoTimes array which is used after that is not completely valid. I am especially referring to the line [ HH:mm:ss.SSSS   / T    d d: d d: d d. d 1 3 /]  which should be [ HH:mm:ss.SSSS   / T    d d: d d: d d. d /] to work as expected. The reason that only IE9 seems to fail this one is that modern browser s Date support includes the UTC format  but IE9 has a confirmed bug related to another fraction count than three  check: https://connect.microsoft.com/IE/feedback/details/723740/date parse and new date fail on valid formats . ,loedeman,closed,1,2014-04-02 06:57:36,2014-04-02 07:24:34,,,,0,1
12673,moment/moment,1577,Make sure no Date constructor is used in tests,This is step one for deprecating the Date constructor. First merge  1564 to get the deprecate function and actually deprecate the newly extracted function so it d print a warning if moment construction hits  Date . ,ichernev,closed,1,2014-04-02 07:07:08,2014-04-02 07:39:27,,,,1,1
12672,moment/moment,1578,Fix iso parsing with more than 3 subsecond digits,This is the patch for  1576 ,ichernev,closed,0,2014-04-02 07:23:50,2014-04-02 07:36:00,,,,1,1
12671,moment/moment,1579,Camel case,I haven t run all of the different grunt tasks yet  but this should cover most everything else:   Code changed   JSHint rule added   JSHint passed   Tests passed ,icambron,closed,3,2014-04-02 20:28:18,2014-04-02 22:25:37,,,,1,1
12670,moment/moment,1580,fixed embed_languages,I missed it because it was a string  so JSHint didn t find it.  I ran the task to make sure it worked. ,icambron,closed,1,2014-04-03 07:15:38,2014-04-03 10:00:34,,,,1,1
12669,moment/moment,1581,Cloned moment object discard timezone info?,Hello  I find some weird behaviour of  moment  objects in combination with timezones and cloning.  If I set explicitly timezone  and then modify objects with some methods  I get correct result:      d1 = new Date    m1 = moment d1 .tz  Europe/Prague   m1.startOf  month  .subtract  months   1  m1.format   // => 2014 03 01T00:00:00 01:00  TZ is correct   01:00      When I introspect  m1  object in Chrome debugger  I see attributes like:      _offset:  60 _z: ZoneSet   displayName:  Europe/Prague    name:  europe_prague    ...      Now I do exactly same thing like in first example but with one exception. After setting timezone I made clone  c2  of the original  m2  object  and continue with cloned one:      m2 = moment d1 .tz  Europe/Prague   c2 = moment m2  // clone c2.startOf  month  .subtract  months   1  c2.format   // => 2014 03 01T00:00:00 02:00  TZ is   INCORRECT     02:00      Timezone is wrong  it should be  01 . It looks like cloning moment objects discard information about timezones  because when I introspect  c2  in debugger  I see that some attributes are different   _offset = 120  and some  like  _z   are missing. ,msgre,closed,5,2014-04-03 09:42:24,2014-04-07 16:54:02,,,,0,1
12668,moment/moment,1582,1 test failed. lang:gl:regression tests  848.1  ,    Client info      Date String   : Thu Apr 03 2014 12:44:02 GMT 0100  WEST  Locale String : 3/4/2014 12:44:02 Offset        : 0 User Agent    : Mozilla/5.0  X11; Linux i686  AppleWebKit/537.36  KHTML  like Gecko  Chrome/33.0.1750.152 Safari/537.36            lang:gl:regression tests  848.1   1 o clock bug      javascript // Expected o Domingo pasado a 0:43 // Actual   o Domingo pasado  s 0:43  o Domingo pasado  s 0:43  ==  o Domingo pasado a 0:43      ,gravataLonga,closed,0,2014-04-03 11:46:42,2014-04-12 19:19:33,,Unit Test Failed,,,0,1
12667,moment/moment,1583,Update es longDateFormats,I think this is more correct Spanish  maybe a native speaker can confirm? ,meleyal,closed,3,2014-04-03 12:45:02,2014-04-07 16:52:51,,,,1,1
12666,moment/moment,1584,isValid   not working for feb29 non leap years,I was just trying in my browser validation. .....  var yourMoment = moment [yyyy mm dd] ;   // [1997 1 29] var validDate = yourMoment.isValid   //returns true  .....  Is this a known bug? for now  I use the following to fix it but  should work without this right? if yourMoment.month    = mm                   validDate = false;   ,davida5,closed,5,2014-04-03 13:22:23,2014-04-04 14:26:15,,,,0,1
12665,moment/moment,1585,set  d   number  doesn t work,This [should be] http://momentjs.com/docs/ /get set/set/   5   but instead the day stays at  8 :  > Units are case insensitive  and support plural and short forms: year  years  y   month  months  M     date  dates  _d_     hour  hours  h   minute  minutes  m   second  seconds  s   millisecond  milliseconds  ms .      js moment  2013 02 08  .set  d   5 .date        See also http://jsfiddle.net/EMb7Q/ ,jzaefferer,closed,2,2014-04-03 16:08:19,2014-04-04 07:02:37,,Documentation,,,0,1
12664,moment/moment,1586,More quarter support  add/subtract quarters; startOf/endOf quarter ,This should solve part of https://github.com/moment/moment/issues/1500. ,andrei-cocorean,closed,5,2014-04-03 16:18:47,2014-04-07 16:22:18,,,,1,1
12663,moment/moment,1587,DST bug with startOf and moment tz,This is probably a bug with the Moment Timezone plugin  but possibly a moment.js bug. 1. Create a moment within a day after DST 2. Set moment to start of day 3. Subtract 1 day 4. Moment is now 2 days before original moment  Example: http://jsfiddle.net/alanhamlett/uKJPs/27/ ,alanhamlett,closed,2,2014-04-03 19:15:29,2014-04-03 19:20:13,,,,0,1
12662,moment/moment,1588,Revert  Add specific check for  require  in hasModule check ,This reverts commit ed6a2d4e1f3e32abce6939ef451f0cd4f8c54a1b. This was discussed in https://github.com/moment/moment/issues/1537 issuecomment 39505749 ,ichernev,closed,0,2014-04-03 21:20:25,2014-04-04 17:44:17,,,,1,1
12661,moment/moment,1589,Do not export a global in node.js,We didn t have that for a few months  nobody complained. In Node.JS environment all software is module aware  so I really don t see the need for a global. It can be exported at will if that is desired. ,ichernev,closed,1,2014-04-04 07:12:18,2014-04-04 17:43:54,,,,1,1
12660,moment/moment,1590,Set AMD global before module definition,Make sure non AMD compatible modules work well with moment in require.js. This is based on https://github.com/moment/moment/issues/1574 ,ichernev,closed,3,2014-04-04 07:13:10,2014-04-04 17:42:37,,,,1,1
12659,moment/moment,1591,Moment js is not converting AM/PM date correctly,Seems like moment will not convert some AM/PM dates to ISO format correctly. I have prepared jsfiddle to illustrate the issue:  http://jsfiddle.net/c299W/4/  Basically the use case is that we need to convert 12:00 AM into ISO format to store in the database  post to backend  and it converts to 12:00:00 which is 12:00 PM of course.  PS. If you guys think I am wrong somewhere here please let me know.  Thank you. ,morph3y,closed,3,2014-04-04 19:42:03,2014-04-07 16:51:55,,,,0,1
12658,moment/moment,1592,moment.js did not validate certain dates correctly,hi   moment.js 2.1.0 didn t validate these dates correctly:  moment [2014 2 30 1] .isValid  ; moment.js 2.1.0 returned false   moment [2014 2 30 2] .isValid  ; moment.js 2.1.0 returned false   moment [2014 2 30 3] .isValid  ; moment.js 2.1.0 returned true.  The problem seems to have been solved with version 2.5.1 I just would like to know what kind of problem that was and if this specific problem was known and therefore solved or if the problem just disappeared because other issues have been resolved?  thanks   philipp ,googol7,closed,1,2014-04-05 16:36:38,2014-04-05 16:51:24,,,,0,1
12657,moment/moment,1593,DST change correct?,Is this behavior correct?  > moment [2014 2 30 0 0] ._d > < Sun Mar 30 2014 00:00:00 GMT 0100  CET  >  > moment [2014 2 30 0 30] ._d > < Sun Mar 30 2014 00:30:00 GMT 0100  CET  >  > moment [2014 2 30 1 0] ._d > < Sun Mar 30 2014 00:00:00 GMT 0100  CET  >  > moment [2014 2 30 1 30] ._d > < Sun Mar 30 2014 00:30:00 GMT 0100  CET  >  > moment [2014 2 30 2 0] ._d > < Sun Mar 30 2014 01:00:00 GMT 0100  CET  >  > moment [2014 2 30 2 30] ._d > < Sun Mar 30 2014 01:30:00 GMT 0100  CET  >  > moment [2014 2 30 3 0] ._d > < Sun Mar 30 2014 03:00:00 GMT 0200  CEST   http://www.timeanddate.com/worldclock/city.html?n=259 DST started on Sunday  30th March 2014  02:00 local standard time.  But why is 30.2.2014 01:00 =? Sun Mar 30 2014 00:00:00 GMT 0100  CET  for moment.js?       adding one hour instead seems to return correct results:  test = moment [2014 2 30 0 0]  test._d Sun Mar 30 2014 00:00:00 GMT 0100  CET   test.add  hours   1  test._d Sun Mar 30 2014 01:00:00 GMT 0100  CET   test.add  hours   1  test._d Sun Mar 30 2014 03:00:00 GMT 0200  CEST  ,googol7,closed,8,2014-04-06 10:22:06,2014-04-09 07:27:52,,Troubleshooting,,,0,1
12656,moment/moment,1594,Subtract   summer time changeover yields inconsistent results,Subtracting one month yields inconsistent behaviour when going over daylight savings time.    Expected behaviour      js moment  2014 04 01T00:00:00 01:00  .tz  CET  .subtract  month   1 .format        yields this result:  beginning of march  yay        js  2014 03 01T01:00:00 01:00         Unexpected behaviour  summer changover time gets passed here       js moment  2014 04 01T00:00:00 07:00  .tz  PST8PDT  .subtract  month   1 .format        yields this result:  end of february  not beginning of march.. huh?        js  2014 02 28T00:00:00 08:00       expected result:      js  2014 03 01T00:00:00 08:00       I have only been able to find this behaviour when exactly at very the beginning of april  if you try it one hour or day later it will actually work as expected.    Interactive demo here   http://jsfiddle.net/juice10/357vw/6/ ,Juice10,closed,3,2014-04-07 14:42:36,2014-04-09 07:29:30,,,,0,1
12655,moment/moment,1595,Added roundTo method,Round up  down or to the nearest unit.  Usage: moment.roundTo units  [offset  midpoint]   m.roundTo  minute   15 ; // Round the moment to the nearest 15 minutes. m.roundTo  minute   15   up  ; // Round the moment up to the nearest 15 minutes. m.roundTo  minute   15   down  ; // Round the moment down to the nearest 15 minutes. ,triqi,closed,6,2014-04-08 02:47:48,2014-07-24 22:41:32,,Needs tests,New Feature,,,1,1
12654,moment/moment,1596,Fixed suffix relative time for Russian,When requesting a relative time with a suffix for Russian correct form is:  31               and        31         ,ozon1234,closed,4,2014-04-08 06:52:32,2014-04-10 16:47:32,,,,1,1
12653,moment/moment,1597,Bug with hours format on diff moment object,I m getting bad data back when trying to do a difference between two moment date objects. Only appears to occur for the hour format. I ve attached the debug code that is working for me so you can simulate the issue. Could be bad code  but I couldn t find anything wrong with this after looking through the documentation for a few hours and only have problem trying to use moment to get back the remainder hours...      moment.lang  en         relativeTime:           future:  in  s           past:   s ago           s:  seconds           m:  a minute           mm:   d minutes           h:  an hour           hh:   d hours           d:  a day           dd:   d days           M:  a month           MM:   d months           y:  a year           yy:   d years          ;  var currentTime = moment  ;  var postDate = moment  Sun Apr 06 2014 03:48:38 GMT 0400  .utc  ;  var testPostDate = moment currentTime .subtract 3483   seconds  ;  console.log currentTime ; console.log testPostDate ;  var totalTimeAgo = currentTime.diff testPostDate ;  var totalDaysAgo = currentTime.diff testPostDate   days  ;  var totalHoursAgo = currentTime.diff testPostDate   hours  ;  var totalMinutesAgo = currentTime.diff testPostDate   minutes  ;  var totalSecondsAgo = currentTime.diff testPostDate   seconds  ;   console.log  timeAgo       console.log totalTimeAgo ;  console.log  days     ; console.log totalDaysAgo ; if  totalDaysAgo == 0        totalDaysAgoText =   ;   else if  totalDaysAgo == 1        totalDaysAgoText = totalDaysAgo     day ;   else if  totalDaysAgo > 1        totalDaysAgoText = totalDaysAgo     days ;  ; console.log totalDaysAgo     days ago  ; // Returns correct  console.log  hours     ; console.info currentTime.diff testPostDate   hours   ; // console.info totalMinutesAgo /  60  ; console.error totalHoursAgo   24 ; // What it should return // console.error moment totalHoursAgo .format  hh       hours ago  ; // Returns correct with h  hh  H  and HH  no way to correctly return hour remainder that I could find based on documentation  var totalHoursAgoText =   ; if  totalDaysAgo >= 1        totalHoursAgoText =     ;  ; if  totalHoursAgo   24 == 0        totalHoursAgoText =   ;   else if   totalHoursAgo   24  = 0      totalHoursAgo   24 > 1         totalHoursAgoText = totalHoursAgoText   totalHoursAgo   24     hours ;   else if   totalHoursAgo   24  = 0      totalHoursAgo   24 == 1         totalHoursAgoText = totalHoursAgoText   totalHoursAgo   24       hour  ;  ; console.log  minutes     ; console.log totalMinutesAgo ; console.log moment totalTimeAgo .format  m       minutes ago  ; // Returns correct   var totalMinutesAgoText =   ; if  totalHoursAgo   24 >= 1        totalMinutesAgoText =     ;  ; if  moment totalTimeAgo .format  m   == 0        totalMinutesAgoText =   ;   else if  moment totalTimeAgo .format  m   == 1        totalMinutesAgoText = totalMinutesAgoText   moment totalTimeAgo .format  m       minute ;   else if  moment totalTimeAgo .format  m   > 1        totalMinutesAgoText = totalMinutesAgoText   moment totalTimeAgo .format  m       minutes ;  ;   console.log  seconds     ; console.log totalSecondsAgo ; console.log moment totalTimeAgo .format  s       seconds ago  ; // Returns correct if  moment totalTimeAgo .format  s   == 0        totalSecondsAgoText =   ;   else if  moment totalTimeAgo .format  s   > 1        totalSecondsAgoText =        moment totalTimeAgo .format  s       seconds ;  ;  console.log   n n  ; console.log  NICELY FORMATTED        ; console.log totalDaysAgoText   totalHoursAgoText   totalMinutesAgoText   totalSecondsAgoText ;     ,boltforge,closed,4,2014-04-08 08:30:47,2014-04-08 18:44:06,,Troubleshooting,,,0,1
12652,moment/moment,1598,startOf / endOf  bug,Hi Guys    I m facing some issues in 2.5.1. startOf and endOf are not acting as I expected :      moment  .startOf  month  .toISOString   // But we re April s 8th so startOf should be 1st not 31.  2014 03 31T23:00:00.000Z   moment  .endOf  day  .toISOString    2014 04 08T22:59:59.999Z       Changing timezone doesn t affect the result. I noticed that since DST change.  Thanks         Because of UTC I got it ,youri-tolstoy-cko,closed,0,2014-04-08 10:46:56,2014-04-08 10:53:07,,,,0,1
12651,moment/moment,1599,Ordinals based on Unit,Currently ordinals apply universally to all numbers  but for languages that are much more context heavy like Japanese this doesn t work  and there is no unit passed in  days/months/weeks/etc  so it cannot output the correct ordinal for all test cases.      4th  day    4   4th  year   4        I ran across this while updating the Japanese language  other languages may need it as well.  ,MatthewCallis,closed,2,2014-04-09 17:00:53,2014-12-19 08:00:18,,,,0,1
12650,moment/moment,1600,Content missing from cdnjs?,There s a [note] http://momentjs.com/docs/ /use it/browser/  for using Moment in a browser that states:  > Moment.js is available on [cdnjs.com] http://cdnjs.com/ . Remember though  cool kids concatenate their scripts to minimize http requests.  There s another a [note in the i18n docs for loading languages into a browser] http://momentjs.com/docs/ /i18n/loading into browser/  that states:  >   Note:   the files in the  /lang/  folder are optimized for use in Node.js. If you want to use language files in the browser  use the minified version that are included in  /min/lang/ .  However   /min/lang/  is not included on cdnjs; only  /lang/ . Here s a [direct link] http://cdnjs.com/libraries/moment.js/  to the cdnjs listing for Moment so you can see for yourself.  Should browsers be using  /lang/  or  /min/lang/ ? If the docs referencing the latter are correct  can this please be added to cdnjs? ,dcormier-work,open,5,2014-04-09 18:05:26,0000-00-00 00:00:00,,Enhancement,Up-For-Grabs,,,0,1
12649,moment/moment,1601,Fix German translation,According to http://de.wikipedia.org/wiki/Uhrzeit Schreibweise there s a DIN  http://de.wikipedia.org/wiki/DIN Norm  for the time translation:  > 9 Uhr  aber nicht: 09 Uhr  > 09:31 Uhr  aber nicht: 9:31 Uhr  > 09:01:12 Uhr  aber nicht 9:01:12 Uhr oder gar 9:1:12 Uhr   So I would suggest to correct the  LT  format to  HH:mm [Uhr]  ,dittodhole,closed,0,2014-04-10 08:13:46,2014-04-10 17:10:35,,,,0,1
12648,moment/moment,1602,Fixes for German translation according to DIN 5008,,dittodhole,closed,4,2014-04-10 08:26:01,2014-04-10 17:10:34,,,,1,1
12647,moment/moment,1603,moment  .format String : YYYY should be yyyy and DD should be dd,The tokens accepted by [moment  .format String ] http://momentjs.com/docs/ /displaying/format/  are somewhat different with what most languages and libraries support.  I focus here on YYYY  2014  and DD  10 .      Comparable with Moment.js:   [AngularJS] http://docs.angularjs.org/api/ng/filter/date : yyyy dd instead of YYYY DD   [Qt] http://qt project.org/doc/qt 5/qdatetime.html toString : yyyy dd instead of YYYY DD   [C ] http://msdn.microsoft.com/en us/library/az4se3k1.aspx : yyyy dd instead of YYYY DD   [Java] http://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html : yyyy dd instead of YYYY DD   [Objective C] https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/DataFormatting/Articles/dfDateFormatting10_4.html : yyyy dd instead of YYYY DD   [Dart] https://api.dartlang.org/apidocs/channels/stable/dartdoc viewer/intl/intl.DateFormat : yyyy dd instead of YYYY DD  They all seem to follow the specifications from the Unicode Consortium: http://www.unicode.org/reports/tr35/tr35 31/tr35 dates.html Date_Format_Patterns      Not comparable with Moment.js:   [Python] https://docs.python.org/3/library/datetime.html strftime and strptime behavior :   based   [PHP] http://www.php.net/manual/en/datetime.formats.date.php : no yyyy nor YYYY   [C/C  ] http://en.cppreference.com/w/c/chrono/strftime :   based   [Ruby] http://www.ruby doc.org/stdlib 2.1.1/libdoc/date/rdoc/DateTime.html method i strftime :   based  Interpreted languages are mostly based on C function strftime    so they are   based  since the interpreters are written in C. ,tkrotoff,closed,2,2014-04-10 17:31:02,2014-04-11 04:25:30,,,,0,1
12646,moment/moment,1604,Ensure createFromInputFallback is called in all cases,Every case where user supplied input ends up into the Date constructor  without us knowing what would be the result  call createFromInputFallback so the function can be deprecated  overwritten and replaced in future versions. ,ichernev,closed,0,2014-04-11 05:56:07,2014-04-11 06:33:38,,,,1,1
12645,moment/moment,1605,Passing Variable into .set  month   always outputs April,Passing a variable such as: moment  .set  month   variable   Will always output April  If I were to pass a number in particular such as 5:  moment  .set  month   5 ;    The correct month displays.  To clarify  passing any variables into every other unit of time works like above. ,andrewhopps,closed,5,2014-04-11 06:45:04,2014-04-11 22:21:15,,,,0,1
12644,moment/moment,1606,moment  .isBefore   sometimes returns true,According to [documentation] http://momentjs.com/docs/ /query/is before/   moment  .isBefore    must return false  but sometimes it returns true.      JavaScript var i = 0; while true        if moment  .isBefore              console.log  Failed after:    i    attempts  ;         break;           if i   === 100            console.log  Test passed  ;         break;              Real example:      JavaScript function validate date        return moment  .isBefore date ;        Sometimes date can be undefined and function returns wrong result.  Thanks in advance. ,oraz,closed,3,2014-04-11 08:13:06,2014-04-22 06:35:31,,,,0,1
12643,moment/moment,1607,1 test failed. add:add across DST  10.1  ,    Client info      Date String   : Fri Apr 11 2014 13:21:59 GMT 0700  PDT  Locale String : April 11  2014 at 1:21:59 PM PDT Offset        : 480 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_9_2  AppleWebKit/537.75.14  KHTML  like Gecko  Version/7.0.3 Safari/537.75.14            add:add across DST  10.1   adding days over DST difference should result in the same hour      javascript // Expected 5 // Actual   6 6 == 5     ,jsatk,closed,0,2014-04-11 20:22:10,2014-12-19 07:59:08,,Unit Test Failed,,,0,1
12642,moment/moment,1608,Inconsistent results using  .diff    and  moment   ,I am using MomentJS to calculate the diff in days  but when I ran a test  I noticed the results coming back were inconsistent. I have setup a JSBin to show you: http://jsbin.com/tazuv/1/edit?html js console  You can run this test only once and it will be incorrect sometimes  but run it a handful and you are guaranteed to get a bad result.  I am unsure where exactly the problem is. Maybe somebody with better MomentJS experience can provide insight? ,chadwithuhc,closed,2,2014-04-12 00:40:53,2014-04-12 00:48:54,,,,0,1
12641,moment/moment,1609,Script specific translations should use ISO 15924 codes,  [ ] Serbian in Cyrillic is mapped to  sr cyr   but it should be  sr cyrl .   [ ] Central Atlas Tamazight in Latin is mapped to  tzm la   but it should be  tzm latn .  la  is the country code for Laos.  MediaWiki uses the standard codes for its locales  so this mismatch prevents the two translations from being used on Wikimedia wikis. ,1ec5,closed,1,2014-04-13 21:11:04,2014-04-22 06:19:04,,,,0,1
12640,moment/moment,1610,Short version for duration humanize,Adds a second parameter to  duration humanize  method to get short strings. It also ignores suffix. ,umurgdk,closed,1,2014-04-13 22:37:33,2014-04-22 04:09:23,,,,1,1
12639,moment/moment,1611,Parsing Time Strings,Hi   More of a question than an issue. Is it possible to parse strings like:  12:30am  and have the date component default to something? If I try this: moment  12:39am  .format  ; I will get  0NaN NaN NaNTNaN:NaN:NaN 00:00 . Furthermore if you try: moment  12:39  .format  h:mm  ; it will return  12:NaN   If I have 2 inputs  one for date and one for time for example  it s difficult to combine the two afterwards into a full date.   Thanks  ,james-gardner,closed,2,2014-04-14 11:40:01,2014-04-15 04:36:54,,,,0,1
12638,moment/moment,1612,1 test failed. diff:diff between utc and local  64.1  ,    Client info      Date String   : Wed Apr 16 2014 18:15:30 GMT 0400  MSK  Locale String :    16     2014 18:15:30 Offset        :  180 User Agent    : Mozilla/5.0  X11; Linux x86_64; rv:28.0  Gecko/20100101 Firefox/28.0 Iceweasel/28.0            diff:diff between utc and local  64.1   year diff      javascript // Expected 1 // Actual   0 0 == 1     ,rshadow,closed,0,2014-04-16 14:15:50,2014-12-19 07:59:08,,Unit Test Failed,,,0,1
12637,moment/moment,1613,Does moment  .day  5  become last  Friday  or does it simply subtract 5 days?,Hi...  In the docs: http://momentjs.com/docs/ /get set/day/  Say it s Monday 14 April 2014  I understand the docs as indicating that if you do this:  moment  .day  5   You ll get last Friday 11 April 2014.  But in the code:  https://github.com/moment/moment/blob/2.5.1/moment.js L1940  day   is returning: this.add   d : input   day     With a day = 1  Monday  and input of  5  moment  .day  5  returns Tues 08 April 2014  i.e.  6 days from the current Monday.  Should moment  .day  5  give you  Last Friday  or should it give you  Last Tues ?  Am I simply misunderstanding the docs?  ,findesk,closed,2,2014-04-16 22:08:25,2014-04-21 18:20:13,,,,0,1
12636,moment/moment,1614,small moment.diff over DST change gives different results for minute and day,    > beforeHourChange = moment  Sun Oct 27 2013 01:55:00 GMT 0100   > tenMinsLater = moment  Sun Oct 27 2013 01:05:00 GMT 0000   > tenMinsLater.diff beforeHourChange   minute   true  //correct    10   > tenMinsLater.diff beforeHourChange   day   true  //incorrect    0.034722222222222224       http://jsfiddle.net/g4QPe/ ,chrishinds,closed,4,2014-04-17 08:23:42,2014-04-22 06:44:18,,,,0,1
12635,moment/moment,1615,Russian language conflicts,http://momentjs.com/downloads/moment with langs.js lib has problem with russian language ,kussembayev,closed,1,2014-04-18 06:30:23,2014-07-29 16:43:27,,,,0,1
12634,moment/moment,1616,Fix sr cyr and tzm la,We were using the wrong codes for Serbian and Tamazight  As mentioned here   1609 ,ichernev,closed,0,2014-04-22 06:18:47,2014-04-22 18:20:07,,,,1,1
12633,moment/moment,1617,Greek  Previous Saturday  is wrong,                          is extremely wrong greek. Noone would ever say that. Only a computer with a bug. The correct is                         . ,akarelas,closed,11,2014-04-22 14:12:42,2014-04-26 07:22:39,,,,0,1
12632,moment/moment,1618,1 test failed. isBefore:is before day  150.10  ,    Client info      Date String   : Wed Apr 23 2014 16:51:53 GMT 0930  CST  Locale String : 23 April 2014 4:51:53 PM ACST Offset        :  630 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_8_5  AppleWebKit/537.74.9  KHTML  like Gecko  Version/6.1.2 Safari/537.74.9            isBefore:is before day  150.10   exact end of day      javascript // Expected false // Actual   true true == false     ,tardisx,closed,0,2014-04-23 07:23:04,2014-12-19 07:59:08,,Unit Test Failed,,,0,1
12631,moment/moment,1619,Months are zero based when constructing with an object,    Javascript moment       day: 1      month: 0      year: 2014   .format  LLLL   //  Wednesday  January 1 2014 12:00 AM   moment       day: 1      M: 1      year: 2014   .format  LLLL   //  Saturday  February 1 2014 12:00 AM       Probably due to Javascript s [ Date ] https://developer.mozilla.org/en US/docs/Web/JavaScript/Reference/Global_Objects/Date . I quote:  >   month   >         Integer value representing the month  beginning with 0 for January to 11 for December.  I suggest months to be 1 based as well. At least for the sake of consistency. When constructing with strings months are 1 based.      Javascript moment  2013 01 01   YYYY MM DD  .format  LLLL   //  Tuesday  January 1 2013 12:00 AM   moment  2013 00 01   YYYY MM DD  .format  LLLL   //  Invalid date      ,EyalAr,closed,1,2014-04-23 08:22:30,2014-04-24 05:40:21,,,,0,1
12630,moment/moment,1620,fromNow   returns the wrong number of years,Until this is fixed  fromNow   should be considered broken and unreliable. It should certainly not be so prominent on the front page of momentjs.com  given that it is guaranteed to return incorrect results.  There s a stackoverflow thread documenting the bug: http://stackoverflow.com/questions/14057497/moment js how do i get the number of years since a date not rounded up  But here s a quick demonstration of it:  moment  .format  ;  2014 04 23T10:49:03 05:00   // So we know what  now  is  moment  11 30 1983    MM DD YYYY  .fromNow  ;  30 years ago   // This is correct  moment  10 30 1983    MM DD YYYY  .fromNow  ;  31 years ago   // This is incorrect  and very dangerous behavior for a date manipulation library ,aepton,closed,3,2014-04-23 15:52:05,2014-07-03 07:29:19,,Bug,,,0,1
12629,moment/moment,1621,Add the ability to set the formatting language as part of the format method.,This pull request adds the ability to configure the language as part of the format method  instead of changing it globally.      moment  .format  LLL     lang:  pt    ;      The change is primarily for node.js server side uses. When rendering a date for a client  it s not desirable to modify the global language  but only for that call.  On the server side  this change could be used alongside the [locale] https://github.com/jed/locale  module to negotiate the correct language for displaying dates.      var supported = new locale.Locales [ en    en_US    ja   ... ] ; app.get  /   function req  res  next      var locales = new locale.Locales req.headers[ accept language ] ;   res.render  template          localDate: moment  .format  LLL     lang: locales.best supported         ;   ;     ,suprememoocow,closed,11,2014-04-24 11:11:38,2015-11-09 06:15:56,,es6 rework,,,1,1
12628,moment/moment,1622,Fixed greek  previous Saturday  string   was gender female  now is gender neutral,                          that appeared  was wrong. Now shows                         .  Contains tests. ,akarelas,closed,6,2014-04-24 13:23:29,2014-04-25 16:49:15,,,,1,1
12627,moment/moment,1623,Accept singular object in setter,It would be very convenient to pass single units hash to  set  method  same as with add/subtract:      JavaScript moment  .set   hour : 1   minute : 1        Is it possible to implement? ,jeron-diovis,closed,3,2014-04-25 12:33:53,2016-04-01 23:15:29,,Enhancement,,,0,1
12626,moment/moment,1624,Trouble: installing Moment on a Windows Meteor Install,I am running Meteor on a Windows machine  and so Meteorite does not work. I am having trouble getting Moment to work. Several searches and write ups that I have seen by now have not led to a workable result  so  I am doing something wrong.  I am running Meteor 0.8.1. Can someone please give me some pointers on how to install Moment in this environment without using Meteorite? ,MarcelOnck,closed,5,2014-04-25 13:38:19,2014-04-29 06:19:59,,,,0,1
12625,moment/moment,1625,Formatting hour and minutes fails,Version 2.6.0       moment  1720    Hmm  .format  H    >  17   moment  720    Hmm  .format  H    >  Invalid  but should be 7      Is this a bug  or my mistake? ,medokin,closed,3,2014-04-25 22:15:41,2014-04-29 16:47:15,,,,0,1
12624,moment/moment,1626,Parsing ISO week date incorrect for some years,There appears to be a bug in ISO year week parsing for some years: 2012 is an example:      var x = moment.utc  2012 W01  ;      This parses 1 week earlier than it should  and formats as follows:      x.format  GGGG [W]WW     >  2011 W52       but the correct string should be  2012 W01   same as input.  Here is the moment object:        _isAMomentObject: true    _useUTC: true    _isUTC: true    _l: undefined    _i:  2012 W01     _f:  GGGG [W]WW      _strict: undefined    _pf:       empty: false       unusedTokens: []       unusedInput: []       overflow:  1       charsLeftOver: 0       nullInput: false       invalidMonth: null       invalidFormat: false       userInvalidated: false       iso: true      _a:     [ 2011  11  26  0  0  0  0 ]    _w:   GG:  2012   W:  01       _dayOfYear: 360    _d: Sun Dec 25 2011 16:00:00 GMT 0800  PST     _offset: 0        Looking over a range of years 2000 to 2020  this happens only for 3 years:      var yr; for  yr = 2000; yr < 2021;   yr        var strIn = yr.toString       W01 ;     var strOut = moment.utc strIn .format  GGGG [W]WW  ;     var same =  strIn == strOut ;     if   same            console.log strIn     differs from formatted version     strOut ;              produces:      2006 W01 differs from formatted version 2005 W52 2012 W01 differs from formatted version 2011 W52 2017 W01 differs from formatted version 2016 W52     ,mrkjhnstn,closed,1,2014-04-27 06:55:00,2014-05-07 15:21:24,,,,0,1
12623,moment/moment,1627,Wrong year calculation for ISO Dates before 1970,When I try to parse ISO Dates before 1970 the year caluclation is wrong. It will add one year.   Which results in following very strange result: moment  1970 01 01T00:00:00.000 01:00  .isSame moment  1969 01 01T00:00:00.000 01:00    === true   used moment.version  2.6.0  ,johann-sonntagbauer,closed,6,2014-04-27 07:22:03,2014-07-02 00:38:58,,Bug,,,0,1
12622,moment/moment,1628,Added Azerbaijani lang,Please accept the pull request for the community. Thanks. ,topchiyev,closed,4,2014-04-27 13:32:26,2014-05-21 07:44:05,,,,1,1
12621,moment/moment,1629,moment.js same time everywhere,I was writing a chrome extension this morning and the everything seems fine.  However by night time I had noticed that the time being displayed is wrong. At first I thought it was a code problem but after going onto their site it seems like every single places the time were all displaying my local time.  Is anyone experiencing this same problem? Or should I consider changing the library all together...  I ve recorded a video here http://youtu.be/g6n6nXJt_uU ,kanjames,closed,1,2014-04-27 19:11:53,2014-04-27 21:30:06,,,,0,1
12620,moment/moment,1630,Better localized format for zh TW,Use  Ah:mm  for LT instead of  Ah mm   since the later reads weird ; separate time and date part with one space to increase readability. ,zhusee2,closed,7,2014-04-29 05:58:05,2014-08-20 14:53:07,,,,1,1
12619,moment/moment,1631,moment  .from   yesterday,Hello   moment  .subtract  days   1 .from    returns   a day ago  .  I was really expecting  yesterday .  But maybe it s expected. Then how can I get  yesterday  ? I see only  calendar    but calendar output is not customizable.  The same goes for tomorrow.  Thanks   ,Yvem,closed,4,2014-04-29 10:41:03,2014-07-02 22:58:40,,,,0,1
12618,moment/moment,1632,Added weekOfMonth method,Added weekOfMonth method ,BradlySharpe,closed,3,2014-04-29 23:09:01,2014-11-17 04:08:29,,,,1,1
12617,moment/moment,1633,Add Arabic  Saudi Arabia  language,Add Arabic with Saudi Arabia Locale ,xsoh,closed,1,2014-04-30 05:44:12,2014-05-21 07:39:38,,,,1,1
12616,moment/moment,1634,Localized moment constructor?,I am using  moment  with  express  framework and would like to create a localized moment constructor for the purpose of a given request context. The below approach seems to work but I wonder is this 100  correct? I am worried of some edge cases that could break in the future.       js res.locals.moment = function         var localMoment = moment.apply this  arguments ;     localMoment.lang req.languageCode ;     return localMoment;  ;     ,Rush,closed,2,2014-04-30 12:33:11,2014-05-04 10:12:17,,,,0,1
12615,moment/moment,1635,1 test failed. diff:diff between utc and local  64.1  ,    Client info      Date String   : Thu May 01 2014 02:08:22 GMT 0400  MSK  Locale String :    01     2014 02:08:22 Offset        :  180 User Agent    : Mozilla/5.0  X11; Linux x86_64; rv:29.0  Gecko/20100101 Firefox/29.0 Iceweasel/29.0            diff:diff between utc and local  64.1   year diff      javascript // Expected 1 // Actual   0 0 == 1     ,rshadow,closed,2,2014-04-30 22:09:23,2014-06-12 04:46:05,,Unit Test Failed,,,0,1
12614,moment/moment,1636,14 tests failed. diff:diff key after  57.4  diff:diff key after  57.6  diff:diff key after  57.7  diff:diff key before  58.3  diff:diff key before  58.5  diff:diff key before  58.7  diff:diff key before singular  59.3  diff:diff key before singular  59.5  diff:diff key before singular  59.7  diff:diff key before abbreviated  60.3  diff:diff key before abbreviated  60.5  diff:diff key before abbreviated  60.7  diff:diff between utc and local  64.1  diff:diff floored  65.3  ,    Client info      Date String   : Thu May 01 2014 20:09:14 GMT 0400  MSK  Locale String : 1     2014  .  20:09:14 GMT 4 Offset        :  240 User Agent    : Mozilla/5.0  iPad; CPU OS 7_1_1 like Mac OS X  AppleWebKit/537.51.1  KHTML  like Gecko  CriOS/34.0.1847.18 Mobile/11D201 Safari/9537.53  000830             diff:diff key after  57.4   week diff      javascript // Expected  1 // Actual   0 0 ==  1            diff:diff key after  57.6   week diff      javascript // Expected  3 // Actual    2  2 ==  3            diff:diff key after  57.7   day diff      javascript // Expected  3 // Actual    2  2 ==  3            diff:diff key before  58.3   day diff      javascript // Expected 3 // Actual   2 2 == 3            diff:diff key before  58.5   week diff      javascript // Expected 1 // Actual   0 0 == 1            diff:diff key before  58.7   week diff      javascript // Expected 3 // Actual   2 2 == 3            diff:diff key before singular  59.3   day diff singular      javascript // Expected 3 // Actual   2 2 == 3            diff:diff key before singular  59.5   week diff singular      javascript // Expected 1 // Actual   0 0 == 1            diff:diff key before singular  59.7   week diff singular      javascript // Expected 3 // Actual   2 2 == 3            diff:diff key before abbreviated  60.3   day diff abbreviated      javascript // Expected 3 // Actual   2 2 == 3            diff:diff key before abbreviated  60.5   week diff abbreviated      javascript // Expected 1 // Actual   0 0 == 1            diff:diff key before abbreviated  60.7   week diff abbreviated      javascript // Expected 3 // Actual   2 2 == 3            diff:diff between utc and local  64.1   year diff      javascript // Expected 1 // Actual   0 0 == 1            diff:diff floored  65.3   24 hours = 1 day      javascript // Expected 1 // Actual   0 0 == 1     ,ghost,closed,0,2014-05-01 16:10:34,2014-06-03 05:38:10,,Unit Test Failed,,,0,1
12613,moment/moment,1637,Min max redo,PR for https://github.com/moment/moment/issues/1548 ,ichernev,closed,1,2014-05-01 17:46:14,2014-05-07 06:21:55,,,,1,1
12612,moment/moment,1638,Browser inconsistency,    javascript moment  2014 05 02 2:00  ;      Is a valid date in Chrome but not in Firefox or IE. The time must be prefixed with 0 so that it is 2 digits.      javascript moment  2014 05 02 02:00  ;      Developing with Chrome this caught me out as all my test dates were entered in this fashion. ,domarmstrong,closed,1,2014-05-02 08:36:39,2014-05-09 12:21:39,,,,0,1
12611,moment/moment,1639,moment undefined .isValid   return true?,I realize this may be intentional/philosophical issue  but since it is a Date   wrapper  I expected an undefined Date to be invalid. Happy to make a pull request if maintainers agree?  > moment undefined .isValid   > true >  > new Date undefined  > Invalid Date ,alexhornbake,closed,8,2014-05-02 19:23:21,2014-06-03 05:33:39,,,,0,1
12610,moment/moment,1640,Momentjs doesn t seem to be parsing time for other languages  ex. russian ,When I run:   moment.lang  ru  ; var myMoment = moment  MMMM Do YYYY  h:mm:ss a        2    2014  1:02:55        ru   true ; myMoment.lang  ru  ; myMoment.isValid  ;  I get Fri May 02 2014 00:00:00 GMT 0700. The date is parsed correctly but the time is not. Calling isValid on myMoment returns false.  Should I not just be able to do:  var myMoment = moment  MMMM Do YYYY  h:mm:ss a        2    2014  1:02:55        ru   true ;  And have that parse the time into a valid date time? ,InTh3ory,closed,2,2014-05-02 20:10:19,2014-06-03 05:33:24,,,,0,1
12609,moment/moment,1641,Fix init from week,There was an issue with creating a weekyear/week/weekday with all years starting on Monday    the created date one week back.  Related bug:  1626 ,ichernev,closed,3,2014-05-03 08:05:46,2014-05-07 06:20:53,,,,1,1
12608,moment/moment,1642,Fix humanize,Fix for  1620  There are a few things going on here   [x] Create accurate duration object given two dates  extracting months and milliseconds    [x] More accurate bubbling of milliseconds to months  taking into account days per year and leap years    [x] relativeTime now works with duration objects instead of mere milliseconds   [x] fix broken tests    oh well  hopefully wouldn t break anybody s flow   [x] rebase on top of  1663  @icambron maybe a careful code review  I ll fix the tests at some point in the future. ,ichernev,closed,2,2014-05-03 08:21:13,2014-06-19 06:02:11,,,,1,1
12607,moment/moment,1643,Right to Left Direction Support in Timeline,I am working on an Arabic  Right to Left  site and when I use visJs it renders the timeline from Left to Right. Is there anyway to change the timeline direction?  issue sample:  http://jsfiddle.net/kmusaied/tmskn/ ,kmusaied,closed,1,2014-05-05 10:26:02,2014-05-05 10:26:58,,,,0,1
12606,moment/moment,1644,Update cy.js,https://translate.google.com/ auto/cy/ago 0A2 20weeks 20ago 0A1 20day 20ago ,ryangreaves,closed,6,2014-05-06 17:28:45,2014-05-21 07:26:07,,,,1,1
12605,moment/moment,1645,Changed System timezone and formatting displays special character,Not sure if this has been raised before   is this a bug or is it the way it should work?  I have changed system time zone from  Pacific  to  India  and was try to getting  US  time using the       moment  .tz  America/Los_Angeles  .format  MM/DD/YYYY hh:mm a    05/06/2014 04:06          or      moment  .tz  Asia/Colombo  .format  MM/DD/YYYY hh:mm a    05/06/2014 04:06          how can i get rid of special characters  and show am or pm ,tomalex0,closed,1,2014-05-06 23:09:29,2014-06-03 05:31:48,,,,0,1
12604,moment/moment,1646,Add spm support in package.json,Another great package manager: http://spmjs.io Documentation: http://spmjs.io/documentation  http://spmjs.io/package/moment http://spmjs.io/package/jquery ,afc163,closed,0,2014-05-07 07:01:39,2014-05-07 07:49:46,,,,1,1
12603,moment/moment,1647,Add spm support,Another great package manager: http://spmjs.io Documentation: http://spmjs.io/documentation  http://spmjs.io/package/moment http://spmjs.io/package/jquery ,afc163,closed,8,2014-05-07 07:56:04,2014-05-14 04:48:30,,,,1,1
12602,moment/moment,1648,Added country specific translation  de at  for austria,The austrian translation of january is  J nner  instead of  Januar . ,MadMG,closed,3,2014-05-07 14:08:55,2014-05-13 07:37:19,,,,1,1
12601,moment/moment,1649,moment  .isSame   has unpredictable results,The documentation for isBefore contains the following:  > moment  .isBefore   has undefined behavior and should not be used  If the code runs fast the initial created moment would be the same as the one created in isBefore to perform the check  so the result would be false. But if the code runs slower its possible that the moment created in isBefore is measurably after the one created in moment    so the call would return true.  The documentation however states that moment  .isSame   will always return true  which is not the case  as illustrated by this jsFiddle: http://jsfiddle.net/8Zt4X/  The documentation should be changed to illustrate this. ,jkjustjoshing,closed,3,2014-05-07 16:29:55,2014-05-13 06:53:27,,,,0,1
12600,moment/moment,1650,Implement meridiemParse and isPM in Russian,This is a PR for  part of  the bug described in  1640 ,ichernev,closed,0,2014-05-08 07:41:49,2014-05-26 13:00:48,,Needs tests,,,1,1
12599,moment/moment,1651,Fix timezone parsing by applying the timezone offset after date creation,Fix for bug described in  1627.  Needs tests. ,ichernev,closed,0,2014-05-08 08:09:05,2014-05-26 13:01:36,,,,1,1
12598,moment/moment,1652,Inconsistent default timezone,I get inconsistent default timezones when creating dates in different way:      js //  120 moment  12:00 AM    hh:mm A  .zone   //  60 moment  18/3/2014 12:00 AM    DD/MM/YYYY hh:mm A  .zone        I m in GMT 2  aka Europe/Berlin   so  120 would be correct   60 isn t  since both should default to my local timezone. I ve asked someone from Toronto to run the jsfiddle below  and he gets 240 for all of them. I ve also tried it with strict parsing  included in the fiddle   same result.  See also http://jsfiddle.net/5Tu26/3/ ,jzaefferer,closed,2,2014-05-08 17:00:45,2014-05-08 17:16:47,,,,0,1
12597,moment/moment,1653,mapping between moment.js formats and Java Date Formats,Can some body provide me a document or link where I can see Java equivalent time formats for all the DateTime Format that moment.js supports  for all locales   i.e moment.js timeformats to java.text.DateFormat  or is there a snippet of code I can use to generate this.  Thanks in advance. ,akjain84,closed,2,2014-05-09 09:36:08,2014-06-03 05:30:41,,,,0,1
12596,moment/moment,1654,bugs with parsing dates,moment 2.6.0.  These should not be valid dates. This is an issue for me as I m validating user input and if these become valid  a typo could easily be saved as correct when it is in fact the wrong year etc.      javascript var date = moment  01/03/abc    DD/MM/YYYY  ; date.format  DD/MM/YYYY   ===  01/03/0000 ;          javascript var date = moment  ab/03/1985    DD/MM/YYYY  ; date.format  DD/MM/YYYY   ===  19/03/0085 ;     ,domarmstrong,closed,1,2014-05-09 12:33:20,2014-05-25 03:44:29,,,,0,1
12595,moment/moment,1655,Returns wrong date,I m passing UTC timestamp to moment js and timezone in order to get back the real date.   This is how I m doing it: formatDate: function dateTime  timezone        var format =  D MMM YYYY ;         return moment.utc dateTime  format .tz timezone .format format ;    So I would pass on something like formatDate 1399922165   America/Los_Angeles  ; and it returns 12 Jan 9992 instead of 12 May 2014.  Any ideas? ,harisb,closed,1,2014-05-12 19:18:53,2014-05-12 20:16:13,,,,0,1
12594,moment/moment,1656,indent doesn t work  2.5.0 ,I m trying the following config   /.jshint       json      indent : 4        on the following code   foo.js        javascript var x = function        return 0;  ;      jshint 2.5.0 on node 0.10.24  linux. It doesn t complain about the two spaces.      bash jshint   config  /.jshint foo.js     ,ichernev,closed,1,2014-05-13 07:26:54,2014-05-14 04:51:42,,,,0,1
12593,moment/moment,1657,Belarusian language is added.,,demidov91,closed,11,2014-05-13 21:19:05,2014-06-19 14:53:28,,,,1,1
12592,moment/moment,1658,startOf/endOf quarter not working,    coffeescript   run at  2014 05 14T00:21:47 07:00  moment  .startOf  quarter  .format      2014 05 14T00:21:47 07:00  moment  .endOf  quarter  .format      2014 05 14T00:21:47 07:00      ,neverfox,closed,1,2014-05-14 07:23:27,2014-05-14 07:25:27,,,,0,1
12591,moment/moment,1659,Update cy.js,,ryangreaves,closed,0,2014-05-14 16:40:57,2014-05-21 07:26:14,,,,1,1
12590,moment/moment,1660,Incorrect html entity in welsh,To help @ryangreaves ,robgallen,closed,2,2014-05-15 14:37:38,2014-05-21 07:34:00,,,,1,1
12589,moment/moment,1661,property autoclone,Hi  i need to create a moment object and set a property lke: inmutable  o autoclone  or something this because i what have the control of when updating this public object. and because i store more than 10000  of this objects on memory  for doing calculation several times over the same object  i don t want to make a clone each time is called only to do compare values  but if i instead call add    subtract    i would like to work with a clone version  so if i create a object like this: var mycustomobject =   starttime: moment [2012] .inmutable true   ; var b = mycustomobject.starttime.add  years  1 ; mycustomobject.starttime.year  ; //2012 b.year  ; // 2013 ,lfnavess,closed,1,2014-05-15 14:40:00,2014-05-25 03:34:12,,,,0,1
12588,moment/moment,1662,from   and fromNow   doesn t seem to work with UTC,    moment  .utc  2014/05/15 21:24:20    YYYY/MM/DD HH:mm:ss  .from moment  .utc     a few seconds ago  moment  .utc  2014/05/15 21:24:20  0000    YYYY/MM/DD HH:mm:ss Z  .fromNow    a few seconds ago  moment  .utc  .format  YYYY/MM/DD HH:mm:ss    2014/05/15 22:30:58       Using version 2.5.1 ,kylebrandt,closed,1,2014-05-15 22:32:56,2014-05-15 22:52:25,,,,0,1
12587,moment/moment,1663,Adding settings to configure relative time thresholds between time units,This new feature allows a user to set custom thresholds for the division between time units for relative time strings.  Example: The default threshold between hours and days as the unit for relative time is 22 hours. With this feature the user can now set a custom threshold like so:      var m = moment  .subtract  hours   23 ; m.fromNow  ; // Shows  a day ago  moment.relativeTimeThreshold  h   24  m.fromNow  ; // Shows  23 hours ago      ,skastel,closed,5,2014-05-16 04:54:10,2014-05-22 18:49:49,,,,1,1
12586,moment/moment,1664,fix sr cyr to sr cyrl in component.json and package.json   1609,https://github.com/moment/moment/issues/1609 ,afc163,closed,2,2014-05-16 11:29:21,2014-06-03 05:29:07,,,,1,1
12585,moment/moment,1665,Wrong dates with format comparation,moment  11.05.2014 12:22    DD.MM.YYYY HH:mm  .isAfter  11.04.2014 12:23    DD.MM.YYYY HH:mm   should return true  but returns false. ,konclave,closed,1,2014-05-16 15:43:24,2014-05-25 03:33:22,,,,0,1
12584,moment/moment,1666,DST error: parsing iso date  2014 01 05  with or without format yields wrong zone,The standard empty  moment    constructor yields the proper time zone for me  but parsing a plain iso date like [the first listed in the doc] http://momentjs.com/docs/ /parsing/string/  fails to yield the correct zone.  All [tests] http://momentjs.com/test/  pass on my browser  so this must be a new case.  [jsFiddle case using 2.6.0] http://jsfiddle.net/kross/QKPa7/2/       m1 = moment   m2 = moment  2014 01 05    YYYY MM DD   m3 = moment  2014 01 05    console.log  m1.zone:   m1.zone    m2.zone:   m2.zone    equal?   m1.zone   == m2.zone     console.log  m1.zone:   m1.zone    m3.zone:   m3.zone    equal?   m1.zone   == m3.zone          Results in:      m1.zone: 300 m2.zone: 360 equal? false m1.zone: 300 m3.zone: 360 equal? false      ,rosskevin,closed,3,2014-05-16 18:57:25,2014-05-16 19:36:07,,,,0,1
12583,moment/moment,1667,fromNow   only reports days,Not sure if this is intended but  .fromNow    only reports in days. If there is a way to get hours  minutes and seconds as well  it is unclear. ,Spedwards,closed,1,2014-05-19 03:24:08,2014-06-03 05:28:16,,,,0,1
12582,moment/moment,1668,Unsure of how to use tz to set timezone.,I m trying to save date and times to mongodb using mongoose which treats date objects as ISO strings.  I am trying to create times and setting the timezone using TZ.  However  upon displaying the dates  I expect them to have the different timezone data but they do not.  Am I missing something?      javascript   var combined =  05/18/2014      5:30pm ;   //Assume time 1 is 5:30PM Eastern time   var time1 = moment.tz combined  [ MM DD YYYY HH:mma    MM DD YYYY H:mma ]   America/New_York  .toISOString  ;   //Assume time 2 is 5:30PM Pacific time   var time2 = moment.tz combined  [ MM DD YYYY HH:mma    MM DD YYYY H:mma ]   America/Los_Angeles  .toISOString  ;    //Show time   var display1 = moment time1 .format  dddd  MMMM D YYYY   h:mma Z  ;   var display2 = moment time2 .format  dddd  MMMM D YYYY   h:mma Z  ;   console.log  Time 1:    display1 ;   console.log  Time 2:    display2 ;      And here is the output:      console Time 1:  Sunday  May 18 2014   5:30pm  07:00 Time 2:  Sunday  May 18 2014   5:30pm  07:00      Basically I want to know how I can save the dates with timezones  and also be able to print them with correct timezone.  ,J-Gonzalez,closed,1,2014-05-19 07:20:56,2014-05-19 07:27:19,,,,0,1
12581,moment/moment,1669,moment  .isValid   is inconsistent between firefox and chrome,same command: moment  1 1 1991  .isValid   returns true in chrome  but returns false in firefox. ,shanSyapse,closed,1,2014-05-20 00:29:55,2014-05-26 02:03:43,,,,0,1
12580,moment/moment,1670,Backslash issue with isValid,Here s a test sample:  moment  custom2008 01 10    [custom]YYYY MM DD   true .isValid   false moment  custom2008 01 10    [custom]YYYY[ ]MM DD   true .isValid   false  Looking inside the moment object I can see there is a backslash left over and a backslash unused token.  Whereas using a pipe instead: moment  custom2008 01 10    [custom]YYYY[ ]MM DD   true .isValid   true  The engine I am using is Internet Explorer 10 on Windows 8. ,piddle,closed,2,2014-05-20 09:16:30,2014-05-25 03:19:00,,,,0,1
12579,moment/moment,1671,Update cy,This has the two patches from @ryangreaves ,ichernev,closed,2,2014-05-21 07:25:17,2014-05-21 07:53:16,,,,1,1
12578,moment/moment,1672,toISOString formats in UTC only,Method  toISOString  formats in UTC and do not consider currently set time zone for the moment object.  http://jsfiddle.net/e4HjE/  I guess  it s enough API for users to manage zones  so they can handle it. ,maxbarbul,closed,1,2014-05-21 07:49:43,2014-05-25 03:08:49,,,,0,1
12577,moment/moment,1673,Litunanian day names in calendars with weeks not starting on Monday,Fixed and rebased  1424 ,ichernev,closed,0,2014-05-21 08:02:03,2014-05-24 08:13:13,,,,1,1
12576,moment/moment,1674,Error parsing a date in DD MM YYYY,Hi   I ve noticed a problem when test parsing a date in DD MM YYYY format.  Specifically  if the date actually is in YYYY MM DD format  it says it is valid  but if I then try to format it  I get a different date.  See this fiddle for example: http://jsfiddle.net/mXJ38/ ,tasso85,closed,3,2014-05-21 10:39:24,2014-05-25 03:08:56,,,,0,1
12575,moment/moment,1675,Changing language locally does not work.,    var local = moment  2014 05 22  ; local.lang  fr     calendar :     lastDay :  [new]     sameDay :  [new]     nextDay :  [new]     lastWeek :  [new]     nextWeek :  [new]     sameElse :  [new]     ; console.log local.calendar   ;      The result:       vendredi   00:00       It is french  but it should be  new .  What I need is a momentJs with two slightly different outputs of _calendar  _. It seems not to be possible to have two separated versions of moment. So I really need this bug to be fixed. ,netAction,closed,9,2014-05-21 14:38:14,2014-06-03 05:28:01,,,,0,1
12574,moment/moment,1676,Moment AMD module returns undefined when loaded from non default directory without  paths ,Almost all AMD modules return something when used. moment returns undefined. Eg:      define [      vnd/moment        vnd/ractive        vnd/agave        vnd/superagent   ]  function unused  Ractive  agave  superagent        log  moment   window.moment  // This is undefined     log  Ractive   Ractive      log  agave   agave      log  superagent   superagent          It would be better  and more consistent with other well known libraries  if moment returned a usable moment object rather than adding a global. ,mikemaccana,closed,9,2014-05-23 14:23:17,2014-05-26 01:58:42,,,,0,1
12573,moment/moment,1677,Add Bengali language support ,I would like to give request for BENGALI language support in moment.js  http://en.wikipedia.org/wiki/Bengali_language about 220 million native and about 250 million total speakers  Bengali is one of the most spoken languages  ranked seventh in the world.  I would love to contribute on the same as i am bengali .  Thanks  ,kaushikgandhi,closed,4,2014-05-24 13:44:39,2014-05-25 18:49:20,,,,0,1
12572,moment/moment,1678,Added bengali language support,Language file added bn.js test file for bengali aded test/lang/bn.js  @Oire as we discussed in  1677 I am giving a pull request for adding bengali language support .  ,kaushikgandhi,closed,3,2014-05-25 10:35:30,2014-05-25 18:47:44,,,,1,1
12571,moment/moment,1679,Loading issue with requireJS   Atom shell,Hi    I encounter issue with moment when loaded with requireJS  within an Atom shell app. moment is sometimes defined sometimes not. I am developing this web app for few months now and never encountered such error before.  Is it possible that the loading of local files is so fast that it doesn t let every time the  function   ...  .call this  the time to reach define  moment   function   ...   and so to be a known module of requireJS ?  Is there requireJS configuration option that could help ?  ,cniaulin,closed,3,2014-05-25 19:20:36,2014-05-27 09:15:53,,,,0,1
12570,moment/moment,1680,Is there a way to refer to ISO 8601 when passing an array of dates in format?,I would like to do something like this:  moment  12 25 1995   [ HH:mm    ISO 8601 ] ;   Essentially  use the format  HH:mm  otherwise parse using ISO 8601. The thing is  I don t want to have to enter the 20 ish variations of the ISO 8601 formats. It would be nice if it was possible to refer to the standard while parsing.  Is there anyway way to do this? ,sbstp,closed,4,2014-05-26 18:02:31,2014-06-12 05:29:58,,New Feature,,,0,1
12569,moment/moment,1681,isValid   doesn t works as expected,Even with the latest release  it doesn t work in version 2.6.0   try this: moment  May 7th 2014  [ MMMM Do YYYY ] true .isValid    It should return true ,bmrinal,closed,1,2014-05-26 19:09:11,2014-06-03 05:15:48,,,,0,1
12568,moment/moment,1682,parsing of vanilla object has unexpected behavior around  date  vs  day ,http://jsfiddle.net/B5Jcm/  When creating a moment using a vanilla object with year/month/date/etc. fields  the  date  field is ignored.      var m1 = moment  ; m1.date 20 ; var m2 = moment       year: m1.year        month: m1.month        date: m1.date   // date will not be recognized properly   ;      It seems like the proper syntax ends up being:       var m1 = moment  ; m1.date 20 ; var m2 = moment       year: m1.year        month: m1.month        day: m1.date   // date will not be recognized properly   ;      Which is unexpected. ,rkofman,closed,2,2014-05-27 05:02:54,2014-06-03 05:14:58,,,,0,1
12567,moment/moment,1683,Can t parse Do in strict mode,[version 2.6.0]  There is some problem while validating the dates. Consider the snippet below:  moment  May 7th 2014  [ MMMM Do YYYY ] true .isValid    This always return false. It should return true. ,bmrinal,closed,2,2014-05-27 19:13:10,2014-09-28 21:42:32,,Bug,,2.9,0,1
12566,moment/moment,1684,Firefox invalidDateGMT with version 2.5.0,With Chromium this is not a issue  only with firefox the display will show  invalidDateGMT       javascript  function         var elements = [].slice.call document.querySelectorAll  a.date_due   ;     elements.forEach function element            var timeDisplay = moment element.text .local  ;         var zone = timeDisplay.format  ZZ  ;         zone = zone ==   0500  ? zone =  CST  : zone =  GMT ;         element.textContent = timeDisplay                               .format  MMM Do YYYY  ddd  h:mm:ss a                                    zone;       ;      var zone = moment  .format  ZZ  ;     zone = zone ==   0500  ? zone =  USA Central  : zone =  London GMT ;      element = document.getElementById  timeZoneDisplay  ;     element.innerHTML =  Current time zone:     zone;      ;     ,dman777,closed,2,2014-06-02 13:52:12,2014-07-02 00:05:10,,,,0,1
12565,moment/moment,1685,Not support five or more digits year.,https://github.com/moment/moment/blob/develop/moment.js L90  http://www.w3.org/TR/html markup/input.month.html input.month.attrs.value ,hotoo,closed,1,2014-06-03 02:56:39,2014-06-03 05:03:40,,,,0,1
12564,moment/moment,1686,Proposal for new parsing api,Currently  moment s can only be created through one overloaded function to support all input methods  string  string   format  object  formats . When a format  or a list of formats  is present the situation is simple  but we need different functions for the single string argument case.  So lets add a few more methods for the particular use cases:      javascript // assume strict    well we don t have the official ISO document // but we should be as strict as possible here moment.fromIso input ;  // will try to parse with loose iso or // http://tools.ietf.org/html/rfc2822 page 14 moment.parse input  [lang] ;  // same as parse  but will try Date constructor at the end moment.fromAny input ;        About  parse     we need a function that is dependable  stable across browsers  but also handles more user friendly formats. I only found the rfc2822 link in the [MDN docs] https://developer.mozilla.org/en US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse   but browsers parse a whole lot more than that    we need to read some browser code and fetch a few formats that make sense. Not sure about localized versions    we can try to parse  L 1 4   presets of the selected language.  I guess for backwards compatibility we can assume  fromAny   and urge users to use the more descriptive format so there is less shooting in the foot. Not sure how the lang/strict arguments will play with the absence of a format.          For extra credit  Also it makes sense to add those two special forms of parsing  iso  moment human formats  for parse   and Date constructor   and let the user select them as formats in the format case   1680 explains this well .      javascript moment  2014 02 24   moment.formats.ISO  moment  2014 02 24   moment.formats.INTERNAL  moment  2014 02 24   moment.formats.JS_DATE       Of course this can be made extensible  so others can add formats that are not mere tokens  but list of formats or even code. ,ichernev,open,2,2014-06-03 06:06:14,0000-00-00 00:00:00,,Enhancement,,3.0,0,1
12563,moment/moment,1687,Fix broken year diff tests for Russia,Russia s zone offset is different on 1st of January  something we assumed impossible in tests . Check to see if that is the case and skip the offending test.  Fixes  1635 and  1612 ,ichernev,closed,1,2014-06-03 06:24:28,2014-06-12 04:46:06,,,,1,1
12562,moment/moment,1688,component.json not working,Component fail  when trying to install moment component. I suspect there is something wrong with the component.json file. Im not sure this is related  but the component.json states that the current version is 2.5.1  though it is tagged in 2.6.0 release.  failed to fetch https://raw.githubusercontent.com/components/moment/master/component.json ,henrik1,closed,3,2014-06-03 07:03:50,2014-07-01 23:48:30,,,,0,1
12561,moment/moment,1689,Possible conflict with Kendo,Hi. I found a problem when trying to use version 2.0 with IE8. I tried to make a working example in jsfiddle or similar program but i couldnt find one that works in IE8. But i will try to explain the problem im facing here.  When i do a  var x = moment    everything works like a charm but if i do  var y = moment x   where x is a moment js object  y gets an object with null properties.  This works in all other browsers i tested  firefox  chrome  IE11   but not with IE8. Please help   ,zepaulo,closed,4,2014-06-03 09:05:30,2016-04-01 23:17:17,,Troubleshooting,,,0,1
12560,moment/moment,1690,New instance of moment object not working in IE8,Hi. I found a problem when trying to use version 2.0 with IE8. I tried to make a working example in jsfiddle or similar program but i couldnt find one that works in IE8. But i will try to explain the problem im facing here.  When i do a  var x = moment    everything works like a charm but if i do  var y = moment x   where x is a moment js object  y gets an object with null properties.  This works in all other browsers i tested  firefox  chrome  IE11   but not with IE8. Please help  ,zepaulo,closed,0,2014-06-03 09:07:34,2014-06-03 09:08:57,,,,0,1
12559,moment/moment,1691,moment  .endOf  year  .week   returns wrong result, moment  .endOf  year  .week    returns 1. But it has to be equal  moment  .weeksInYear     ,syrota,closed,1,2014-06-03 13:57:46,2014-06-12 05:27:31,,,,0,1
12558,moment/moment,1692,Invalid date in Safari and Firefox with Timezone,Hi  The following gets an invalid date in Safari and Firefox but not in Chrome:      date = new moment  2014 05 22 11:17:31 UTC        Isnt it allowed to parse date in this format or is this a bug?  http://jsfiddle.net/EEWuy/  Thanks. ,michaelkoper,closed,1,2014-06-03 14:21:22,2014-06-12 04:45:40,,,,0,1
12557,moment/moment,1693,Allow ISO 8601 to be passed as a format.,This commit allows the ISO 8601 format to be passed as a format in the moment string  array  constructor. This is an attempt to make  1680 possible.This is a preliminary commit as this addition as yielded a few issues. This is not ready for merge.  Here are some of the issues:    makeDateFromString  does not play nice with scoring  might be due to the way I implemented it    scoring cannot currently be tested because  makeDateFromString  shoves what it doesn t know into into  createFromInputFallback  which has been modified to throw always throw an error in the test suite.  I will probably try to add an optional parameter to  makeDateFromString  which tells it to not use  createFromInputFallback  to fix the second issue. ,sbstp,closed,4,2014-06-03 15:39:18,2014-06-12 05:25:22,,,,1,1
12556,moment/moment,1694, 1 hour  instead of  one hour ,Hi   How can I get the string  1 hour   with the number 1  instead of  one hour  when I am using the humanize   method ?  Thanks for this awesome plugin ;  ,MuyBien,closed,1,2014-06-03 16:27:02,2014-06-04 08:07:09,,,,0,1
12555,moment/moment,1695,What is the data source for TZs?,Hi.  Does the TZ data come from the IANA db or some other source?  Thanks  Jacob. ,switzerland,closed,2,2014-06-03 18:24:24,2014-06-05 04:14:25,,,,0,1
12554,moment/moment,1696,ru.js _weekdays and _months not translated.  Related to Issue 682,So how should one get the list of weekdays or months to populate a list for selection? This was closed with out giving a correct way of using the API. The docs are wrong so what is the solution so I can write a multilingual application with out hacking in ru.js ,CHenrie,closed,6,2014-06-03 20:25:59,2014-06-12 04:29:56,,,,0,1
12553,moment/moment,1697,moment.duration  P30D  .toIsoString   ==  P1M ,In general  ISO durations of months and days aren t comparable due to the varying number of days in a month.  The culprit is the _bubble   function  which gets called on duration construction. Can anyone explain the rationale for why 30 day periods always get bubbled into a month? Is there some piece of the library or use case that depends on this? ,eldavido,open,8,2014-06-04 23:26:28,0000-00-00 00:00:00,,,,0,1
12552,moment/moment,1698,Duration format meta overview,Duration format has been requested multiple times.  1436   1048 https://github.com/jsmreese/moment duration format  892  463  The main problem is localization. Almost any hack/api can be made to work on English  but proper translation can be impossible  even cldr doesn t provide joining information    how do you concatenate 2 hours and 5 minutes for example .  On the other hand something that just lets you format  without locale  should be fairly straight forward  check this https://github.com/moment/moment/issues/1048 issuecomment 24492305 .  The plugin listed above seems to do that  it has some weird issues and not a whole lot of stars/forks  so I m not sure if its worth reimplementing/merging into moment. We might make it an official plugin  like timezone   because as  463 there are a lot of   1  for it.  @icambron @Oire what do you think? ,ichernev,closed,4,2014-06-05 06:58:57,2016-06-25 13:52:14,,Enhancement,,,0,1
12551,moment/moment,1699,Fixing months capitalization in Italian,,Menelion,closed,2,2014-06-05 12:46:16,2014-06-05 12:49:08,,,,1,1
12550,moment/moment,1700,diff returns negative 0    0   ,sorry  please delete this ,jaimeagudo,closed,0,2014-06-06 16:08:13,2014-06-11 19:51:55,,,,0,1
12549,moment/moment,1701,Parsing durations in human readable format,It would be useful if we could use something like moment.duration  2s  ; moment.duration  2 s  ; moment.duration  2 seconds  ; moment.duration  3m2s  ; ,beradrian,closed,1,2014-06-07 17:56:47,2014-06-12 05:19:40,,,,0,1
12548,moment/moment,1702,Parse  String Format  inconsistent with months with leading zeros,When parsing a string format that has months with leading zeros  the timezones for the parsed objects are sometimes wrong.   moment  01/02/2014 11:37 AM    MM/DD/YYYY h:m A  .format    outputs:   2014 01 02T11:37:00 06:00  which is the correct offset.   moment  05/08/2014 11:37 AM    MM/DD/YYYY h:m A  .format    outputs:   2014 05 08T11:37:00 05:00  which is the wrong offset.  See it here: http://jsfiddle.net/cnanney/R8kRq/ ,cnanney,closed,2,2014-06-08 01:10:37,2014-06-12 05:17:29,,,,0,1
12547,moment/moment,1703,Support strings in add and subtract,This adds support for strings on add and subtract.      javascript moment  .add  1    h  ; moment  .subtract  1    h  ; moment  .add  h    1  ; moment  .subtract  h    1  ;      Notice that the value is a string. At the moment  doing the add would not do anything. ,ghost,closed,0,2014-06-08 22:07:26,2014-06-08 22:45:22,,,,1,1
12546,moment/moment,1704,Support strings in add and subtract,This adds support for strings on add and subtract.      javascript moment  .add  1    h  ; moment  .subtract  1    h  ; moment  .add  h    1  ; moment  .subtract  h    1  ;      Notice that the value is a string. At the moment  doing the add would not do anything. ,ghost,closed,1,2014-06-08 22:47:33,2014-06-12 05:10:50,,,,1,1
12545,moment/moment,1705,date/day inconsistent between constructor and getter,    var m = moment     year: 2063    month: 3    day: 4   ;       m.year    returns what was passed in the  year  key.  m.month    returns what was passed in the  month  key.  m.day    returns the day of week.  m.date    returns what was passed in the  day  key.  If an upcoming version is okay with introducing breaking changes  I would suggest changing date/day so that the getters correspond to the constructor keys. ,bblack,closed,6,2014-06-09 16:03:40,2016-04-01 23:23:29,,Enhancement,,,0,1
12544,moment/moment,1706,Update lt.js,,MindaugasR,closed,6,2014-06-11 06:02:38,2014-06-14 11:17:08,,,,1,1
12543,moment/moment,1707,1 test failed. diff:diff between utc and local  64.1  ,    Client info      Date String   : Wed Jun 11 2014 10:51:23 GMT 0400  MSK  Locale String : 11.06.2014  10:51:23 Offset        :  180 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10.9; rv:29.0  Gecko/20100101 Firefox/29.0            diff:diff between utc and local  64.1   year diff      javascript // Expected 1 // Actual   0 0 == 1     ,kamchatkin,closed,1,2014-06-11 06:52:05,2014-06-12 05:00:02,,Unit Test Failed,,,0,1
12542,moment/moment,1708,perf makeDateFromInput : no need to match regex if input is a Date,The moment constructor when passed a Date should be the fastest. There is no need to match the aspNetJsonRegex before testing if the  input  is a Date. ,ptbrowne,closed,1,2014-06-11 13:45:10,2014-07-01 23:06:18,,performance,,,1,1
12541,moment/moment,1709,Unix time changes when setting milliseconds to 0,When the moment is set to a Daylight Savings Time  DST  boundary   millisecond is already 0   setting milliseconds to 0 causes the unix time to change. This is based on an issue with the native Date object  but I was hoping moment would work around it somehow.  First  here is the issue with the native Date object:      var d = new Date 1383469200 1000 ; d.getMilliseconds  ; // 0 d.getTime  ; // 1383469200000 d.setMilliseconds 0 ; d.getMilliseconds  ; // 0 d.getTime  ; // 1383465600000      Now  here is the same issue in moment js:      m = moment new Date 1383469200 1000  ; m.unix  ; // 1383469200 m.millisecond  ; // 0 m.millisecond 0 ; m.unix   // 1383465600      With this code  I can reproduce this issue only when the browser is in  Pacific Daylight Time  zone  but if I change my browser to other timezones  like  Mountain Daylight Time    the issue does not occur with this same test code.  I imagine the issue will happen on daylight savings time boundaries for whatever timezone the browser is in.   In other words this code is tailored to Pacific Daylight Time.  Interestingly  the issue goes away when using moment timezone and using the exact same timezone as the local browser. Immediately after creating the moment object created above  do this:      m.tz  America/Los_Angeles  ;      And then change the millisecond value  there is no issue.  Tested in Firefox 29.0.1 for Mac. ,eddified,closed,1,2014-06-12 22:03:37,2014-07-01 23:46:45,,,,0,1
12540,moment/moment,1710,Fixing Lithuanian,See  1706 ,Menelion,closed,1,2014-06-14 11:16:30,2014-06-15 19:55:15,,,,1,1
12539,moment/moment,1711,doesn t parse   display in local timezone as promised.,The following app says it all:      js var moment = require  moment  ;  var dt1 = moment  14:00  10 Jun 2014    HH:mm  DD MMM YYYY  .toDate  ; console.log  dt1:    JSON.stringify dt1  null  4  ;  var dt2 = moment  02:00  10 Jun 2014    HH:mm  DD MMM YYYY  .toDate  ; console.log  dt2:    JSON.stringify dt2  null  4  ;      And the output:  dt1: 2014 06 10T02:00:00.000Z  dt2: 2014 06 09T14:00:00.000Z   Why it outputs in UTC?? You said it would output in local time  ,vwhpwcbf,closed,2,2014-06-14 23:26:31,2014-07-02 00:24:31,,,,0,1
12538,moment/moment,1712,Download from website is not UTF8,The download from your website with langs is not UTF8. http://momentjs.com/downloads/moment with langs.js In german we ve got the  M rz   but the encoding doesn t look right. This causes some troubles when downloading not from github.  Isn t it intended  that the version on your website is UTF8  too? ,sateffen,closed,11,2014-06-15 16:55:46,2014-06-26 09:14:31,,,,0,1
12537,moment/moment,1713,Different output using .calendar    .from    and .fromNow  ,Here s what I do      js // Current date is June 16  2014 7:11pm var date = new Date  June 15  2014  ;  // output  Yesterday at ...  moment date .calendar  ;  // output  two days ago  moment date .from  ;   // also output  two days ago  moment date .fromNow  ;       It should output  a day ago  shouldn t it? ,pveyes,closed,3,2014-06-16 12:11:55,2014-07-01 23:03:35,,,,0,1
12536,moment/moment,1714,Duration missing toJSON feature,Hi  i detected that the moment object don t implement the standar to JSON function  http://en.wikipedia.org/wiki/ISO_8601 Durations  in this link stated that it should return a iso8601 format  PnYnMnDTnHnMnS  https://google styleguide.googlecode.com/svn/trunk/jsoncstyleguide.xml Time_Duration_Property_Values  so for example:      js var aaa = [1  some string   moment.duration 123  m  ]; JSON.stringify aaa ; // [1  some string    _milliseconds :7380000  _days :0  _months :0  _data :  milliseconds :0  seconds :0  minutes :3  hours :2  days :0  months :0  years :0  ]       it could be corrected like this      js moment.duration.fn.toJSON = function    return this.toIsoString  ;  JSON.stringify aaa ; // [1  some string   PT2H3M ]      ,lfnavess,closed,2,2014-06-16 15:12:03,2016-04-01 23:19:15,,Enhancement,,,0,1
12535,moment/moment,1715,Retrieve original/current relativeTimeThresholds settings,I m trying to get the preciseDiff plugin function to work with all i18n including  de  specifically  and was trying to modify the current pull request that is out there to instead use  moment.duration  .huminize    to get the proper localized strings.  In order to be precise I need to be able to change the relativeTimeThresholds for this function but need to be able to reset them back afterwards.  It would be possible to do this if there was an getter for the current relativeTimeThresholds  restored after processing.      javascript moment.preciseDiff = function d1  d2        var originalRelative =   ;     originalRelative.m = moment.relativeTimeThreshold  m  ;     //set precise thresholds for all options     moment.relativeTimeThreshold  m  60 ;      ...      //example of minute from pull request     if  minDiff            result.push moment.duration minDiff  minute   .humanize   ;            // restore original thresholds after computation     moment.relativeTimeThreshold  m  originalRelative.m ;     ...       ,jbrockmeyer,closed,1,2014-06-16 22:53:44,2014-07-01 19:14:23,,,,0,1
12534,moment/moment,1716,Fix issue  1715 to retrieve relativeTimeThreshold settings,adding the retrieve option for relativeTimeThresholds settings  relates to: https://github.com/moment/moment/issues/1715 ,jbrockmeyer,closed,3,2014-06-16 23:28:56,2014-06-17 06:43:34,,,,1,1
12533,moment/moment,1717,Increase short date displayed depending on which constructor is used, [screen shot 2014 06 17 at 3 16 12 pm] https://cloud.githubusercontent.com/assets/364978/3296684/fcb1168c f5e2 11e3 83cd e87ae05bda7d.png   Hey   On the iPhone  tested on iOS 7 and 8   using the array constructor give the wrong weekday. Using set method instead  give the correct weekday. This also happens in the javascript Date class. ,rissicay,closed,6,2014-06-17 05:52:03,2014-07-02 00:34:27,,,,0,1
12532,moment/moment,1718,Jscs support,Add jscs grunt task  and appropriate config  and make sure Gruntfile  moment.js and all lang files pass. We should make the tests pass too  maybe later.    NOTE  : Don t merge until they push the new version of the jscs grunt task  that has the newest version of jscs  because we re using features from it  ,ichernev,closed,1,2014-06-17 06:47:27,2014-06-19 08:55:35,,,,1,1
12531,moment/moment,1719,moment .zone value  / keepTime= /true  does not keep time, updating/changing completely the issue as debugging made things clearer   it seems that if a moment m object is in the timezone A and we change it to timezone B with argument keepTime = true  the time is converted to UTC and then the offset is applied. It means the timezone changes as one would expect but the time changes too.  Example :       javascript // say I m in Paris  UTC 2   and I want to create a moment for midnight in UTC 10  new moment  2014 06 17 00:00  .zone   10:00   true .format   // I would expect   2014 06 17T00:00:00 10:00  // but I get  2014 06 16T22:00:00 10:00       My date was moved to UTC before the shift... ,ewjoachim,closed,5,2014-06-17 10:22:09,2014-07-01 19:10:09,,Bug,,,0,1
12530,moment/moment,1720,simplification of lb.js implementation,I suggest a slight simplification of the language file implementation for Luxembourgish  lb  ,kwisatz,closed,6,2014-06-18 10:23:15,2014-07-01 23:25:53,,,,1,1
12529,moment/moment,1721,Africa Cairo Time is not correct,Hi   I am using moment.js for timezones and conversions and I found that when I convert Newyork time to Africa/Cairo  the conversion is not correct. Its still considering day light saving for Cairo which is stopped few years back. Even on the timezone world map on momentjs website  the cairo time is not shown correctly  1hour late  . Please fix this bug. ,vishalagrawal1,closed,3,2014-06-18 15:45:20,2014-06-27 02:42:02,,Bug,,,0,1
12528,moment/moment,1722,Support for HTTP Dates  RFC 2616  ?,Issue  1407 mentions that non ISO dates are deprecated  but what about other ubiquitous date formats defined by standards? [RFC 2616] http://www.w3.org/Protocols/rfc2616/rfc2616 sec3.html sec3.3  which defines the date format used in HTTP headers does not appear to be supported by Moment at this time. Is support for this format on the roadmap? ,blackcoat,closed,4,2014-06-18 21:15:49,2016-03-08 20:45:10,,Enhancement,todo,,,0,1
12527,moment/moment,1723,Two digit time zone offsets should be parseable,Usually  we see a time zone offset as either   hhmm  or   hh:mm .  However  the ISO 8601 spec allows for the minutes to be omitted for whole hour offsets.  There is currently not a way to express this is in moment.  See: http://stackoverflow.com/a/24295354/634824      javascript var s =  20131107T102103 00 01 ;  // one should be able to parse: moment s  YYYYMMDD[T]HHmmss[ ]SSZZ    // but instead  zeros have to be added to the input string: moment s    00   YYYYMMDD[T]HHmmss[ ]SSZZ        Adding zeros is only a good workaround when you are certain that _every_ value will have only two digits.  If some have two and some have four  then by adding zeros  you could end up trying to parse six digits. ,mj1856,closed,6,2014-06-18 21:46:04,2016-02-02 22:19:23,,Enhancement,Up-For-Grabs,,,0,1
12526,moment/moment,1724,Arabic  ar  relative time not using correct plurals?,We ve been getting feedback from a small number of Arabic speaking end users that relative time display isn t being written appropriately for some integers. I looked at the library  and the  ar  logic doesn t include CLDR style plural tests to support the different ways relative time might be written for different numbers.  The Russian relative time does this  though I don t think it can be easily adapted to how Arabic would work. Russian always assumes an integer will be in the returned string  which isn t the case for Arabic  I m told sometimes it s just words .  For contributors to the Arabic support here  do you have any thoughts on this feedback? We re right on the edge of this being called a bug in our system  but I m sure this must ve crossed someone else s mind here at least once in the past. If there s a reason why Arabic uses simple =1/other plurals here  it d be helpful info to have.  Thanks  ,josidhe,closed,8,2014-06-18 23:34:26,2016-02-26 22:50:21,Menelion,Language,,,0,1
12525,moment/moment,1725,When using utc to convert to client timezone  format return wrong value without timeshift,    moment.utc  2014 06 18T21:00:00  .format    2014 06 18T21:00:00 00:00  moment  2014 06 18T21:00:00  .format    2014 06 18T21:00:00 03:00       version: 2.6.0 ,Grievoushead,closed,4,2014-06-19 10:46:42,2014-06-23 21:39:25,,,,0,1
12524,moment/moment,1726,do you using tasks/component.js ?,@ichernev  or how you write the  component.json  file? The last change is 8 month ago and the  component.json  file is wrong due to the spec and if you want to support the lang files with [component] github.com/component/component .  I m asking because I ll make a PR to fix this and I need to know if I need to fix the  component.json  and some docs or fix the  tasks/component.js  ,timaschew,closed,2,2014-06-19 12:21:14,2014-06-20 12:20:23,,,,0,1
12523,moment/moment,1727,Fixing Belarusian language,Corrected mistakes and added tests. See  1657 ,Menelion,closed,11,2014-06-19 14:52:28,2014-07-06 18:36:26,,,,1,1
12522,moment/moment,1728,Invalid date for wrapped dates,Constructing a moment object with a value that rolls over yields  Invalid date  when formatting. Running v2.6.0 off cdnjs.  Observed:      moment [0  0  0  0  100  0] .format    Invalid date       Expected:      moment new Date 0  0  0  0  100  0  .format    1899 12 31T01:40:00 06:00       Additional details:      moment [0  0  0  0  100  0] .minutes   40 moment [0  0  0  0  100  0] .hours   1     ,kevmo314,closed,1,2014-06-19 18:51:45,2014-06-20 03:46:06,,,,0,1
12521,moment/moment,1729,Deprecate add/subtract unit  value ,Right now we support both  moment  .add 5   days    and  moment  .add  days   5  . Lets deprecate the second  original  form and get rid of it in the next major version. ,ichernev,closed,2,2014-06-20 08:15:34,2014-07-17 18:44:43,,Deprecate,,,0,1
12520,moment/moment,1730,i18n doesn t work for component: .scritps instead of .files   dynamic require issue,all javascript files need to be listed at   scripts   in  component.json  not   files   [component spec] https://github.com/component/spec/blob/master/component.json/specifications.md scripts   there were several pull requests but this one was merged: https://github.com/moment/moment/pull/940/files diff 7c0ad956b08dc69b7080d1e926d2592eR10 and it was correct  using  opts.scripts  but it seems that it was changed afterwards.  now the file is only _half generated_  only   script    with a grunt task.  1726       But there is another problem:  https://github.com/moment/moment/blob/63e27658be8adc062915606248958aafe8f323d2/moment.js L902   require  ./lang/    k ;   This is maybe a new issue  but component depends on it. The problem is that component  and some other tools as well  parse the string parameter of a require call. This doesn t work anymore if it s a variable. So using require this way is not a good practice.  And further  it s not allowed in ES6  syntax for  import x from y . So you would get this problem in the near future. Can see the discussion here: https://github.com/component/builder2.js/issues/65 issuecomment 46656808 ,timaschew,closed,2,2014-06-20 12:18:23,2014-10-08 12:10:14,,,,0,1
12519,moment/moment,1731,fix for  1730 component i18n,all tests passed   I tested it and it works now :smile_cat:   tested with  component install timaschew/moment@develop  ,timaschew,closed,16,2014-06-20 12:39:01,2014-10-07 11:59:27,,,,1,1
12518,moment/moment,1732,YY returns 20 isntead of 14, format  YY     retuns  20  instead of  14  for the year 2014. ,boldt,closed,4,2014-06-20 16:33:35,2014-07-01 23:49:24,,Troubleshooting,,,0,1
12517,moment/moment,1733,Add Object.keys based clone implementation,I have a scenario where I m parsing thousands of date strings with moment  and  cloneMoment  was near the top of the more expensive methods by execution time. I believe this is due to using  for..in  to enumerate properties  which also enumerates prototype properties. However  this behavior appears to not be required  since the iterator block here immediately checks for own properties only.  Since this method is only being called in one place where  m  is guaranteed to be a moment object  and only own properties are cloned and prototype enumeration is not a requirement  I have added a preferable implementation using the less expensive  Object.keys   which will be used if available  [which it universally is  among non obsolete browsers] http://kangax.github.io/compat table/es5/  . The former implementation is retained for obsolete browsers.  This results in a substantial improvement in my actual situation  with the total aggregate time for  cloneMoment  dropping from  300ms to  60ms.  All  grunt  tasks pass without issue. ,aharpervc,closed,7,2014-06-20 19:09:09,2014-08-20 15:08:33,,,,1,1
12516,moment/moment,1734,isValid   issue,Strict mode validation fails. According to docs there are several options to specify time format pattern: H  HH 24 hour time h  hh 12 hour time  use in conjunction with a or A   Hence  following check has to result in  false   but the outcome is  true  moment  06/20/2014 23:51 PM    MM/DD/YYYY hh:mm A   true .isValid   ,peterturowskij,closed,2,2014-06-23 08:18:05,2014-10-22 18:01:50,,Bug,,,0,1
12515,moment/moment,1735,13 tests failed. diff:diff key after  68.4  diff:diff key after  68.6  diff:diff key after  68.7  diff:diff key before  69.3  diff:diff key before  69.5  diff:diff key before  69.7  diff:diff key before singular  70.3  diff:diff key before singular  70.5  diff:diff key before singular  70.7  diff:diff key before abbreviated  71.3  diff:diff key before abbreviated  71.5  diff:diff key before abbreviated  71.7  diff:diff floored  76.3  ,    Client info      Date String   : Mon Jun 23 2014 16:51:30 GMT 0400  MSK  Locale String : 23      2014  .  16:51:30 GMT 4 Offset        :  240 User Agent    : Mozilla/5.0  iPad; CPU OS 7_1_1 like Mac OS X  AppleWebKit/537.51.2  KHTML  like Gecko  Version/7.0 Mobile/11D201 Safari/9537.53            diff:diff key after  68.4   week diff      javascript // Expected  1 // Actual   0 0 ==  1            diff:diff key after  68.6   week diff      javascript // Expected  3 // Actual    2  2 ==  3            diff:diff key after  68.7   day diff      javascript // Expected  3 // Actual    2  2 ==  3            diff:diff key before  69.3   day diff      javascript // Expected 3 // Actual   2 2 == 3            diff:diff key before  69.5   week diff      javascript // Expected 1 // Actual   0 0 == 1            diff:diff key before  69.7   week diff      javascript // Expected 3 // Actual   2 2 == 3            diff:diff key before singular  70.3   day diff singular      javascript // Expected 3 // Actual   2 2 == 3            diff:diff key before singular  70.5   week diff singular      javascript // Expected 1 // Actual   0 0 == 1            diff:diff key before singular  70.7   week diff singular      javascript // Expected 3 // Actual   2 2 == 3            diff:diff key before abbreviated  71.3   day diff abbreviated      javascript // Expected 3 // Actual   2 2 == 3            diff:diff key before abbreviated  71.5   week diff abbreviated      javascript // Expected 1 // Actual   0 0 == 1            diff:diff key before abbreviated  71.7   week diff abbreviated      javascript // Expected 3 // Actual   2 2 == 3            diff:diff floored  76.3   24 hours = 1 day      javascript // Expected 1 // Actual   0 0 == 1     ,fargoss,closed,0,2014-06-23 13:02:01,2014-07-30 18:11:33,,Unit Test Failed,,,0,1
12514,moment/moment,1736,Moment.js with Require.js Error this.clone is not a function,When I m using momentjs with requirejs and I ve got the following error: TypeError: this.clone is not a function return this.clone  .lang  en  .format  ddd MMM DD YYYY HH:mm:ss [GMT]ZZ  ;  Would you help me with this? ,pawelwieladek,closed,2,2014-06-25 09:31:45,2014-06-26 07:39:18,,,,0,1
12513,moment/moment,1737,Update docs: old min = new max and vice versa,The docs for  moment.min  now say:      This function has been deprecated in 2.7.0. Consider moment.min instead.      However  if you were to actually refactor code using the old  moment  .min   the new method to use would be  moment.max   because what the old method gave you was the latest of the two moments  not the earliest. The same is true for  moment  .max ; you would refactor to  moment.min .  I think you still want to point people to the same named method for reference purposes  but  consider...instead  seems to imply that it s the function you want if you were trying to bound moments in the same way. All will be obvious once you actually read the documentation closely  but it might be good to change the language to be clear about this. Something like:      If you are looking for a method to return the minimum of given moments  consider  moment.min  instead. If you want to recreate the functionality of this method and place a lower bound on a moment  consider  moment.max  instead.      Personally  I like the old methods and wouldn t mind seeing them stick around as syntactic sugar for the new  min  and  max   perhaps called  lowerBound  and  upperBound  or something like that. ,neverfox,closed,3,2014-06-25 10:07:07,2014-06-28 18:49:37,,,,0,1
12512,moment/moment,1738,Fix local to utc/zone switching with keepLocalTime option,This is a fix for  1719 ,ichernev,closed,1,2014-06-26 07:40:08,2014-07-01 19:08:05,,,,1,1
12511,moment/moment,1739,Parse/Format bug,Is this a bug  or is this intended behavior? It seems to be pushing dates back a day.      js // We would all agree that this date represents June 23rd var originalDate =  2014 06 23T00:00:00.000Z ;  // parse it as a moment var momentDate = moment originalDate ;  // format it to get the date var formatted = momentDate.format  YYYY MM DDTHH:mm:ssZ  ;  // What do you think we get? console.log formatted ;  // If you guessed June 22nd then you are correct       If you pass in any date on midnight and then format it  it scoots it back a day. More specifically:      js 2014 06 22T20:00:00 04:00      ,jamesplease,closed,2,2014-06-26 18:31:05,2014-06-26 21:00:45,,,,0,1
12510,moment/moment,1740,Calendar   giving unexpected result,,richvida,closed,0,2014-06-28 05:39:16,2014-06-28 12:28:24,,,,0,1
12509,moment/moment,1741,weekday for en_GB and en_US behaving odd,Am I missing something  or:  moment  .lang  en_GB  .weekday 0 .format  dddd    should return  Monday  and not  Sunday .  Am I off base? ,reflog,closed,9,2014-06-29 10:41:15,2014-07-01 19:27:49,,Troubleshooting,,,0,1
12508,moment/moment,1742,19 tests failed. lang:ca:format month  407.1  lang:ca:format month  407.2  lang:ca:format month  407.3  lang:ca:format month  407.4  lang:ca:format month  407.5  lang:ca:format month  407.6  lang:ca:format month  407.7  lang:ca:format month  407.8  lang:ca:format month  407.9  lang:ca:format month  407.10  lang:ca:format month  407.11  lang:ca:format month  407.12  lang:ca:format week  408.1  lang:ca:format week  408.2  lang:ca:format week  408.3  lang:ca:format week  408.4  lang:ca:format week  408.5  lang:ca:format week  408.6  lang:ca:format week  408.7  ,    Client info      Date String   : Mon Jun 30 2014 15:31:05 GMT 0800          Locale String : 2014 6 30    3:31:05 Offset        :  480 User Agent    : Mozilla/5.0  Windows NT 6.1  AppleWebKit/537.36  KHTML  like Gecko  Chrome/35.0.1916.114 Safari/537.36            lang:ca:format month  407.1   gener gen.      javascript // Expected gener gen. // Actual   Gener Gen.  Gener Gen.  ==  gener gen.             lang:ca:format month  407.2   febrer febr.      javascript // Expected febrer febr. // Actual   Febrer Febr.  Febrer Febr.  ==  febrer febr.             lang:ca:format month  407.3   mar  mar.      javascript // Expected mar  mar. // Actual   Mar  Mar.  Mar  Mar.  ==  mar  mar.             lang:ca:format month  407.4   abril abr.      javascript // Expected abril abr. // Actual   Abril Abr.  Abril Abr.  ==  abril abr.             lang:ca:format month  407.5   maig mai.      javascript // Expected maig mai. // Actual   Maig Mai.  Maig Mai.  ==  maig mai.             lang:ca:format month  407.6   juny jun.      javascript // Expected juny jun. // Actual   Juny Jun.  Juny Jun.  ==  juny jun.             lang:ca:format month  407.7   juliol jul.      javascript // Expected juliol jul. // Actual   Juliol Jul.  Juliol Jul.  ==  juliol jul.             lang:ca:format month  407.8   agost ag.      javascript // Expected agost ag. // Actual   Agost Ag.  Agost Ag.  ==  agost ag.             lang:ca:format month  407.9   setembre set.      javascript // Expected setembre set. // Actual   Setembre Set.  Setembre Set.  ==  setembre set.             lang:ca:format month  407.10   octubre oct.      javascript // Expected octubre oct. // Actual   Octubre Oct.  Octubre Oct.  ==  octubre oct.             lang:ca:format month  407.11   novembre nov.      javascript // Expected novembre nov. // Actual   Novembre Nov.  Novembre Nov.  ==  novembre nov.             lang:ca:format month  407.12   desembre des.      javascript // Expected desembre des. // Actual   Desembre Des.  Desembre Des.  ==  desembre des.             lang:ca:format week  408.1   diumenge dg. Dg      javascript // Expected diumenge dg. Dg // Actual   Diumenge Dg. Dg  Diumenge Dg. Dg  ==  diumenge dg. Dg             lang:ca:format week  408.2   dilluns dl. Dl      javascript // Expected dilluns dl. Dl // Actual   Dilluns Dl. Dl  Dilluns Dl. Dl  ==  dilluns dl. Dl             lang:ca:format week  408.3   dimarts dt. Dt      javascript // Expected dimarts dt. Dt // Actual   Dimarts Dt. Dt  Dimarts Dt. Dt  ==  dimarts dt. Dt             lang:ca:format week  408.4   dimecres dc. Dc      javascript // Expected dimecres dc. Dc // Actual   Dimecres Dc. Dc  Dimecres Dc. Dc  ==  dimecres dc. Dc             lang:ca:format week  408.5   dijous dj. Dj      javascript // Expected dijous dj. Dj // Actual   Dijous Dj. Dj  Dijous Dj. Dj  ==  dijous dj. Dj             lang:ca:format week  408.6   divendres dv. Dv      javascript // Expected divendres dv. Dv // Actual   Divendres Dv. Dv  Divendres Dv. Dv  ==  divendres dv. Dv             lang:ca:format week  408.7   dissabte ds. Ds      javascript // Expected dissabte ds. Ds // Actual   Dissabte Ds. Ds  Dissabte Ds. Ds  ==  dissabte ds. Ds      ,dreamstu,closed,0,2014-06-30 07:31:15,2014-07-30 18:11:33,,Unit Test Failed,,,0,1
12507,moment/moment,1743,02 31 1995 is a valid date as per moment.,How to work around this issue? ,ghost,closed,4,2014-06-30 13:01:33,2014-07-03 04:33:03,,Troubleshooting,,,0,1
12506,moment/moment,1744,Inconsistency with first day of week,When I set date of my computer to 29 Jun 2014 Sunday    moment  .isoWeek 1 .day 0   returns   _d: Sun Jan 05 2014 16:08:56 GMT 0200  EET    When I set date of my computer to 30 Jun 2014 Monday    moment  .isoWeek 1 .day 0   returns  _d: Sun Dec 29 2013 16:09:09 GMT 0200  EET    The problem may be related to the current day being Sunday. ,saygun,closed,1,2014-06-30 13:15:03,2014-06-30 23:40:26,,,,0,1
12505,moment/moment,1745,The string  100  is a valid month when parsed with moment,Hello   I m having an issue with moment parsing from string. moment  100    DD  .isValid   returns true  I expected it to be false. And moment  100  .format  DD   returns  10 ... It check only the first 2 digits: if I do moment  140    DD  .isValid   I get false. Is that a wanted behavior ? I find it bad to add a regex validation myself on top of moment s. ,nanocom,closed,1,2014-06-30 13:44:12,2014-06-30 23:25:21,,,,0,1
12504,moment/moment,1746,Array of formats parsing order.,The documentation for parsing a date with an array of formats states...  > Starting in 2.3.0  Moment uses some simple heuristics to determine which format to use. In order: >   Prefer formats resulting in valid dates over invalid ones. >   Prefer formats that parse more of the string than less and use more of the format more of the format than less  i.e. prefer stricter parsing.  So I would expect the following to return  05/05/2045  as the first format does not match the input  but the second one does.  moment  05/05/45   [ DD/MM/YYYY    DD/MM/YY ] .format  DD/MM/YYYY     However the date is incorrectly parsed as  05/05/0045 . ,eddielee6,closed,8,2014-06-30 15:12:43,2017-12-22 04:31:33,,Enhancement,todo,,,0,1
12503,moment/moment,1747,i18n   Vietnamese language  vi  with format   method,I wrote the code:      moment  .lang  vi  .format  dddd  MMMM Do YYYY  h:mm:ss a  ; >>  th  hai  th ng 6 30 2014  11:27:58 pm       It s correct  but in Vietnamese  when display a date  first letter of the day of week at the beginning should be capitalized  like this:      >>  Th  hai  th ng 6 30 2014  11:27:58 pm       I think it s better. ,theking-laptop,closed,13,2014-06-30 16:32:23,2016-02-26 00:26:54,Menelion,Language,,,0,1
12502,moment/moment,1748,moment.weekdays function make browser stuck at http request,in my case  if i use the moment.weekdays function  the browser will stuck at http request  here is my code:      generateWeekDays: function        var i  weekOfDays;    weekOfDays = [];     i = 1;    while  i <= 7         weekOfDays.push moment.weekdays i  ;         return weekOfDays;         here is the chrome dev tools network detail:   [unnamed qq screenshot20140701102604] https://cloud.githubusercontent.com/assets/5292143/3438448/e6cfa1f8 00c8 11e4 8ea0 83fcf01e3f1d.png   my system is Windows7 and language is Simplified Chinese ,HouCoder,closed,2,2014-07-01 02:39:32,2014-07-01 18:35:43,,,,0,1
12501,moment/moment,1749,Rule for mixed quotes,Relaxed rules for single quote  but allow double quotes if it s required to avoid escaping.  Not a real issue  but my WebStorm mark moment files with a lot of errors.  Looks like single quote is preferable. Just used <kbd>CTRL F</kbd> via  moment.js :   Single quotes: 795   Double quotes: 174 ,ogonkov,closed,10,2014-07-01 12:21:45,2014-08-20 22:13:38,,,2.8.2,1,1
12500,moment/moment,1750,Instance level locale leaks to other instances,Works fine in the browser  but in Node this is not good:      js > moment  .lang  fr  .lang  ._abbr  fr  > moment  .lang  ._abbr  fr        Also does that in a Node program  so it s not just some weird REPL issue.  ,icambron,closed,9,2014-07-01 18:50:45,2014-07-30 04:15:20,,Bug,,,0,1
12499,moment/moment,1751,Should be an option to return local times from toISOString, toISOString  always returns UTC times. We should support a flag that lets you return the local time instead of requiring the user to do:      js moment  .format  YYYY MM DD[T]HH:mm:ss.SSSZ  ;     ,icambron,open,1,2014-07-02 00:27:38,0000-00-00 00:00:00,,Enhancement,Up-For-Grabs,,,0,1
12498,moment/moment,1752,toISOString vs toIsoString,I don t have a strong opinion on which of these we use  but it s weird that durations and moments use different ones:      js > moment  .toISOString    2014 07 02T00:28:15.970Z  > moment.duration  .toIsoString    P0D      ,icambron,closed,1,2014-07-02 00:28:36,2014-07-08 08:05:53,,,,0,1
12497,moment/moment,1753,Rename day   and weekday   ,These are terrible names. They mean the same thing  except that weekday   is locale aware  e.g. it cares when your locale s week starts  while day   does not. So maybe  dayOfWeek  and  localeDayOfWeek ? Way more verbose but so much clearer. We could introduce the new names and deprecate the old ones. ,icambron,open,7,2014-07-02 06:34:51,0000-00-00 00:00:00,,Deprecate,,3.0,0,1
12496,moment/moment,1754,make moment mostly immutable,There has been [a lot of discussions] https://github.com/moment/moment/search?q=immutable ref=cmdform type=Issues  about this. Here s the proposal:  The following mutable methods will become immutable in 3.0.0:  utc    local    zone    add    subtract    startOf    endOf    lang   also in  duration :  add    subtract   and  lang .  As a start  all methods will be duplicated with  methodNameMute  variants. We also need immutable variants named  methodNameImmute . From 3.0 the plain old methods will start using the immutable option by default.  What is debatable is:   should  lang  be made immutable   should all the getters/setters  including  get / set   be made immutable too   naming of the mutable and immutable versions of the methods   and of course    should we do the switch  or just stop at the immutable API  The good part is we can make immutable versions of the methods today and decide later on what to do. If we switch it would also mean the  2.x  branch would be around for quite some time after  3.x  is out.  @icambron @timrwood @gregwebs @yang @lfnavess @soswow @langalex ,ichernev,open,157,2014-07-03 07:58:14,0000-00-00 00:00:00,,Enhancement,,3.0,0,1
12495,moment/moment,1755,Remove padding newlines in the begining of functions,Build is broken because of that. ,ichernev,closed,1,2014-07-03 08:23:03,2014-07-03 20:42:21,,,,1,1
12494,moment/moment,1756,Moment unparsable date,We use moment on server side. Sometimes  actually when services called in parallel  we get 3 types of errors:      javascript TypeError: Cannot find function call in object  .  moment.min.js 5           javascript Unable to parse  2015 0902  using format  yyyy MM dd  message Unparseable date:  2015 0902           javascript   org.mozilla.javascript.EvaluatorException: Unable to parse  2013 05 function  c        return l a.call this  c   b ;     using format  yyyy MM dd  message Unparseable date:  2013 05 function  c        return l a.call this  c   b ;           Is it a problem with mozilla javascript evaluator?  Thanks. ,geaden,closed,16,2014-07-03 13:06:29,2014-07-29 16:48:06,,,,0,1
12493,moment/moment,1757,fromNow   always return 4 month,fromNow   or humanize   alwayrs return 3 month ...   Example :  http://jsfiddle.net/v3Lhq/13/  What is the problem?  Thank ,laurentClave,closed,2,2014-07-03 16:24:40,2014-07-03 20:40:00,,,,0,1
12492,moment/moment,1758,get jsc working?,The build s been failing because jsc doesn t pass. This is a fix for that. ,icambron,closed,1,2014-07-03 20:29:13,2014-07-03 20:42:41,,,,1,1
12491,moment/moment,1759,Change duration.toIsoString to duration.toISOString,Fix for  1752. Added a deprecation warning to the old toIsoString ,icambron,closed,1,2014-07-03 21:04:50,2014-07-08 08:05:51,,,,1,1
12490,moment/moment,1760,Language change in angularjs app,I am currently making multilanguage a site using angular and the angular ui router. I need it to set the language of moment to the   lang   parameter that gets read in from the url. Currently this is what I have when listening for the    stateChangeSuccess   event.       scope. on   stateChangeSuccess   function e  toState  toParams      console.log  set language to    stateParams.lang ;   console.log  moment language is currently    moment.lang   ;   moment.lang  stateParams.lang ;   console.log  moment language is now    moment.lang   ;   ;      This is the only place in my whole script that i m setting the language. The problem is that moment is not setting the language properly. The output I get when changing language is:      set language to km moment language is currently  en moment language is now  en      I am including the km.js language file in the page.  Any ideas? ,eddiemoore,closed,15,2014-07-04 10:57:19,2014-07-06 06:12:36,,,,0,1
12489,moment/moment,1761,s/lang/locale,  Deprecated moment.lang    moment.langData    moment lang  and   duration lang   Added moment.locale    moment.localeData    moment localeData  and   druation localeData   Added moment.defineLocale   that defines a locale but doesn t set it   as the global locale   1750    Removed the hack in the language concatenator that set the language   to English.   Refactored internal code to use moment localeData instead of local   functions  and set the language directly on the moment instance at   creation.   Moved all the files and changed the build scripts so that everything   lives is named  locale  instead of  lang   e.g. the locale files under   the  locale  directory.   I did _not_ include build generated changes like component.json and   the concated locale files  but I did inspect them to see that they look   right. But I did remove the old ones wherever they won t be named correctly in the future. ,icambron,closed,15,2014-07-05 08:55:33,2014-07-25 06:05:48,,,,1,1
12488,moment/moment,1762,Parsing object month unexpected behavior,moment  years: 2010  months: 12  days: 15  ; would return invalid date cause months counting begin from  0 . It is unexpected  and undocumented  in moment easy parsing context. ,yavulan,closed,1,2014-07-05 22:43:50,2014-07-06 10:37:00,,Documentation,,,0,1
12487,moment/moment,1763,deprecate pre 2.0 add/subtract,Fix for  1729:   DRY for add/subtract   Deprecate old arg ordering   Fix internal uses and test uses  except  of course  ones specifically testing add/subtract    Renamed tests so that  reversed  now means the opposite ,icambron,closed,2,2014-07-06 07:45:46,2014-07-14 04:36:46,,,,1,1
12486,moment/moment,1764,Convert double quotes to single quotes in moment.js,Convert double quotes to single quotes for consistency throughout moment.js file.  All tests completed without any errors.   [screen shot 2014 07 06 at 10 22 19 am] https://cloud.githubusercontent.com/assets/3654181/3489502/26ba91de 0532 11e4 83c9 56d6a68f4187.png    [screen shot 2014 07 06 at 10 22 50 am] https://cloud.githubusercontent.com/assets/3654181/3489504/2e2c79c8 0532 11e4 8323 9bf10f17326d.png  ,austentalbot,closed,1,2014-07-06 17:24:03,2014-07-06 18:40:15,,,,1,1
12485,moment/moment,1765,Simplify readme,I really liked Tim s changes to the moment timezone readme  so I   copied him   was inspired by those changes. It boils down to:   Move more stuff into contributing and rework it.  I don t think we need to be as emphatic about the branch thing because everything defaults to develop .   Move the changelog to its own file   New badges  ,icambron,closed,1,2014-07-06 18:35:51,2014-07-14 04:33:24,,,,1,1
12484,moment/moment,1766,Generate package.json with gruntfile,Looks like we have a list of all locales in  package.json   for spm . We need to make a grunt task that generates the file on release  same way we generate  component.json  . ,ichernev,closed,0,2014-07-08 08:03:35,2014-07-30 04:39:50,,Bug,,2.8,0,1
12483,moment/moment,1767,Update and rename ar.js to ar dz.js,Algerian Arabic ,fennecfox,closed,4,2014-07-09 08:35:42,2014-07-21 06:09:36,,,,1,1
12482,moment/moment,1768,Ability to have optional parameters in the parse format string,So for example:      js moment  2014 07 09 14:38 04:00    YYYY MM DD HH:mmZ?   true .isValid   // true moment  2014 07 09 14:38    YYYY MM DD HH:mmZ?   true .isValid   // true      So using regex s  ?  for an example  the timezone would be optional for checking if a date is valid.  Another way to do this if that isn t possible is to allow an array of formats to be passed.  If the date matches any of them it is created. So for example:      js  moment  2014 07 09 14:38 04:00   [ YYYY MM DD HH:mmZ    YYYY MM DD HH:mm ]  true .isValid   // true moment  2014 07 09 14:38   [ YYYY MM DD HH:mmZ    YYYY MM DD HH:mm ]  true .isValid   // true       This would also probably be easier to implement. ,truckingsim,closed,2,2014-07-09 16:50:47,2014-07-14 07:12:35,,,,0,1
12481,moment/moment,1769,add support for .format   on .duration  ,I would like to be able to format duration as time:   moment.duration 3600   seconds   .format  HH:mm:ss  ;   output should produce  01:00:00  ,chovy,closed,3,2014-07-10 14:38:40,2014-07-21 06:08:36,,,,0,1
12480,moment/moment,1770,isValid   issue when using char,Sometimes isValid   fail when i parse not number characters.  > moment  01 xx xxxx    DD MM YYYY  .isValid    > true  must be false  > moment  xx 01 xxxx    DD MM YYYY  .isValid    > true  must be false  > moment  xx xx 2014    DD MM YYYY  .isValid    > false  this one is ok   Tests with version 2.7.0 on chrome 35  fiddle  > http://jsfiddle.net/BcUr3/ ,tsensebe,closed,1,2014-07-11 16:31:21,2014-07-14 05:21:40,,Forgiving parsing,,,0,1
12479,moment/moment,1771,Update el.js,Include the  a few  prefix to  relativeTime.s . ,mpal9000,closed,1,2014-07-13 19:57:38,2014-11-17 06:08:19,,,2.8.4,1,1
12478,moment/moment,1772,Comparing timezone dates with isSame produces wrong result.,    moment.tz  2014 06 06    Europe/London     .isSame moment.tz  2014 06 06   Europe/Berlin     year   //=> false      I though this was adressed in https://github.com/moment/moment/pull/1371 but it seems it still is an issue.  Not sure if I should post here or in moment timezone ,mokkabonna,closed,7,2014-07-14 14:09:06,2014-11-17 05:53:34,,Bug,,2.8.4,0,1
12477,moment/moment,1773,Replace fallback deprecation link with an FAQ,Using  1407 is maybe not the best way to handle this. I m going to write up an FAQ that explains why the change is happening and what end users should do about it. I ll then just replace the link in the code. Doesn t matter too much if we don t do another pre 3.0 release  but I m guessing we will in order to have some of the other deprecations in the wild for a bit. ,icambron,open,3,2014-07-14 18:21:54,0000-00-00 00:00:00,,Documentation,Up-For-Grabs,,,0,1
12476,moment/moment,1774,natural language parsing,First of all  this is a great library  It s been a while since I have used it  I just saw that I sent a pull request in 2011  I m old haha   but it s only grown since then  congratz   Anyway  I was wondering if there are any plans to implement natural language parsing   moment  yesterday     or if there s a reason this is not pursued  other than no volunteers to implement it  I could be down for it . ,rachel-carvalho,closed,2,2014-07-15 23:26:30,2014-07-16 06:00:51,,,,0,1
12475,moment/moment,1775,Duration.toString   returns [object Object],    javascript > moment.duration 5   s  .toString    [object Object]       We should do  humanize    or  toISOString   .  As reported by https://github.com/moment/moment/issues/463 issuecomment 49106747 ,ichernev,closed,1,2014-07-16 06:59:36,2014-08-20 20:34:01,,Bug,,2.8.2,0,1
12474,moment/moment,1776,Myanmar localization,please review away. unit test passed. ,gholadr,closed,1,2014-07-16 10:47:57,2014-07-17 02:20:05,,,,1,1
12473,moment/moment,1777,en_US localized formats omit comma between day of month and year,E.g.        javascript moment  .lang  en_US  .format  LL   // =>  July 16 2014       The standard way of writing this sort of date in the U.S. is  July 16  2014     with a comma. Maybe the moment team is following a different convention than the one I m familiar with? ,97jaz,closed,1,2014-07-16 21:44:06,2014-07-19 00:57:55,,,,0,1
12472,moment/moment,1778,Myanmar localization,fixed formatting issues  jscs  as reported by Travis  ,gholadr,closed,11,2014-07-17 08:02:48,2014-07-21 02:58:55,,,,1,1
12471,moment/moment,1779,s/zone/offset,While we re deprecating and renaming things  maybe it s time to be consistent with our use of  zone  and  offset ? I m kind of tired of explaining that  moment.zone    isn t quite what it says on the tin  and I m almost sure @mj1856 is too. What do you think  @ichernev? ,icambron,closed,30,2014-07-17 18:49:36,2014-12-28 17:18:20,,Deprecate,todo,,2.9,0,1
12470,moment/moment,1780,moment constructor,http://jsfiddle.net/qZbCw/1/  I am trying to understand why this is considered to be a valid date.  I would expect the format that I define to be the constraining factor.  Is this because of the fall back onto Date as mentioned in issue https://github.com/moment/moment/issues/1407?  If so and this will be false in the next major release  when is that release scheduled for?  Thanks. ,skinnybrit51,closed,1,2014-07-18 15:14:45,2014-07-21 06:07:09,,Forgiving parsing,,,0,1
12469,moment/moment,1781,avoid expensive  hasOwnProperty  checks,Replace expensive calls to  hasOwnProperty  with cheaper  Object.keys  iteration. Similar to  1453  but with a compatibility shim for IE7 and IE8 that handles DontEnum bug   1114 .  Shaves a full second off the unit tests and nearly doubles the speed of  moment clone    on my machine.  For a performance comparison: http://jsperf.com/moment clone speedup  I think this _does_ change the semantics of  moment clone    slightly previously  cloning a moment would not include any weird custom properties a user may have set on a moment object.  moment  .myFakeProperty = true   for example  would not have been copied. With this change  _all_ enumerable properties on a moment instance will be copied. I doubt this is a breaking change  though. ,benesch,closed,5,2014-07-18 16:47:47,2014-07-23 16:12:49,,,,1,1
12468,moment/moment,1782,Fixing ordinal numbers in English from 10 to 20,Ordinal numbers from 10 to 20 should all have the  th  suffix. ,mauricioac,closed,7,2014-07-18 16:56:51,2014-07-21 18:05:14,,,,1,1
12467,moment/moment,1783,Using _.map with moment,Hi. I m trying to use moment to quickly convert a number of dates and encountering this bug. I m using Underscore.JS.      > _.map [new Date  ]  moment  [Moment] > _.map [new Date    new Date  ]  moment  TypeError: undefined is not a function     ,d4l3k,closed,1,2014-07-19 00:24:36,2014-07-21 02:12:16,,,,0,1
12466,moment/moment,1784,Adds comma between day of month and year for en US locale.,Specifically:   LL   =>  MMMM D  YYYY    LLL  =>  MMMM D  YYYY LT    LLLL =>   dddd  MMMM D  YYYY LT   ... and similarly for the lowercase variants.  The use of a comma between the day of month and year is standard practice in US English. See:   ICU docs [http://demo.icu project.org/icu bin/locexp?_=en_US] under Date   Time Patterns    Chicago Manual of Style  by way of the Library of Congress    [http://lcweb2.loc.gov/ammem/ndlpedit/handbook/numberdate.html]   Wikipedia [http://en.wikipedia.org/wiki/Date_and_time_notation_in_the_United_States] ,97jaz,closed,3,2014-07-19 00:57:22,2014-07-25 06:18:49,,,,1,1
12465,moment/moment,1785,Optimize clone  49x improvement,I took a crack at optimizing cloning. On my box  tests are benchmark.js in Node on an MBP   I got this pre optimization:      >> clone x 36 536 ops/sec  0.96   96 runs sampled        bigger is better .  I did two passes. In the first one  I replaced the  momentProperties  object with an array of strings  reorganized the clone so that it doesn t sort of do it twice  once in  cloneMoment  and once in  extend    and then I changed the clone to copy the fields over. Results:      >> clone x 220 760 ops/sec  0.65   90 runs sampled       So 6x. The second pass  I made  momentProperties  into an empty list  can still be added to by plugins   and then made the clone function actually just look at each field and copy them old school. Results:      >> clone x 1 786 933 ops/sec  0.97   91 runs sampled       So 49x the original.  Caveats:   I broke plugin compat  probably just tz.  momentProperties  is now an array  not an object  which makes it a bit faster to iterate through. We can either switch it back to an object and take the perf hit for moment tz or we can fix moment tz.   I need to write a test for the plugin field cloning       I broke one thing  . The  _lang  object is defined on the prototype and can be overriden by the instance. Since we don t check  hasOwnPrototype     the reference gets copied on clone either way  i.e. it gets  promoted  from prototype property to instance property . I don t think that has any practical effect unless you redefine the language in the prototype  weird   so I deleted the test  but I could be missing something. We could either use  hasOwnProperty    in this one place  or we could live with it.     I haven t tested on  you know  actual browsers. ,icambron,closed,14,2014-07-21 05:42:06,2014-07-30 05:36:49,,performance,,2.8,1,1
12464,moment/moment,1786,Added Afrikaans translation,,wernerm,closed,3,2014-07-21 07:26:31,2014-07-21 21:08:02,,Needs tests,,,1,1
12463,moment/moment,1787,fromNow with large time difference returns  a few seconds ago ,For example:    moment  .seconds 183798249433870 .fromNow      This should return perhaps  centuries  ,williamcoates,closed,3,2014-07-21 10:50:05,2014-07-21 18:28:59,,,,0,1
12462,moment/moment,1788,fromNow should behave better for invalid dates,This isn t very clear behavior:      js > moment.invalid  .fromNow    a few seconds ago        format    just prints  invalid date ; perhaps we should do something similar in this case? ,icambron,open,1,2014-07-21 18:23:28,0000-00-00 00:00:00,,Enhancement,,,0,1
12461,moment/moment,1789,Tibetan localization,Tibetan language localization added ,vajradog,closed,3,2014-07-22 02:23:15,2014-07-22 15:16:58,,,,1,1
12460,moment/moment,1790,Expose isDate method,Would be handy  and save some boilerplate  or other dependencies  when working with dates and moments.  ,joshuajabbour,closed,4,2014-07-22 21:10:38,2014-08-29 15:14:38,,New Feature,,,0,1
12459,moment/moment,1791,Avoid crashing when passing a Number and a format to Moment constructor.,Passing a Number value and a format to the Moment constructor causes Moment to throw a JS error  from within  makeDateFromStringAndFormat  . Seems like Moment isn t designed to handle this  preferring instead  moment.utc    but it should probably not throw errors in this case when it can parse the Number and ignore the format. ,ericsoco,closed,5,2014-07-22 21:17:37,2014-08-05 21:17:32,,,,1,1
12458,moment/moment,1792,Some timezones have issues with Datepicker,Some of the users of [my datepicker] https://github.com/Eonasdan/bootstrap datetimepicker   where uses momentjs heavily  have been having some issues that I can t seem to pin point  or reproduce .  In particular [this issue] https://github.com/Eonasdan/bootstrap datetimepicker/issues/376 . I was hoping some one from your team could take a look and see if this is an issue with moment or if you have come across this before.  Thanks ,Eonasdan,closed,3,2014-07-23 01:47:49,2014-07-23 03:29:58,,,,0,1
12457,moment/moment,1793,Add moment  .to moment  opts  returning duration,Currently the following methods create a duration and then call a method on it:    diff     from     fromNow   But there is no method to actually create a duration from two moments.  We should add a method  named  to  or similar   that returns a duration object given two moments. Also it can support both ways of interpreting the difference: human and exact. Human will try to extract month and day information accurately  as  duration  from  to      where exact would just get the number of milliseconds and bubble up. The two would yield the same result for durations less than one month. ,ichernev,open,0,2014-07-23 05:15:14,0000-00-00 00:00:00,,Enhancement,,,0,1
12456,moment/moment,1794,Feature   Round to a unit by a given offset,Round up  down or to the nearest unit.  Usage: moment.roundTo units  [offset  midpoint]   m.roundTo  minute   15 ; // Round the moment to the nearest 15 minutes. m.roundTo  minute   15   up  ; // Round the moment up to the nearest 15 minutes. m.roundTo  minute   15   down  ; // Round the moment down to the nearest 15 minutes. ,triqi,closed,75,2014-07-24 01:53:19,2015-11-26 14:18:48,,New Feature,es6 rework,,,1,1
12455,moment/moment,1795,moment String  does reverse timezone conversion?,First off  I should probably say I m new to moment.js so my apologies if this is a known issue  or more than likely  a user error on my part .  The problem I m experiencing is that instead of adding or subtracting the timezone offset of my PC correctly it s subtracting positive offsets and adding negative offsets   essentially the exact opposite of what it would need to do in order to get it right.  As an example with the following input:  moment  2014 07 24T10:41:57.140Z    For my timezone  BST  these results:   2014 07 24T11:41:57.140Z   my expected time   2014 07 24T09:41:57.140Z   moment.js output time   When I change my PC to use US Eastern  EST  these results:   2014 07 24T06:41:57.140Z   my expected time   2014 07 24T14:41:57.140Z   moment.js output time   Is this a bug  or am I doing something wrong? My only goal is to give moment.js an ISO formatted date String and have it output in right timezone for the user.  Thanks in advance for your help. ,robertbradleyux,closed,3,2014-07-24 11:27:20,2014-07-24 11:39:57,,,,0,1
12454,moment/moment,1796,Fix up defineLocale for 3.0,Continued from  1761  we want to clean up locale setting for 3.0:   Make  defineLocale  not set the global locale   Remove the hack around lazy loaded locales in Node   Remove the hack to set the locale back to English in the  embedLocales  task ,icambron,open,1,2014-07-24 22:24:54,0000-00-00 00:00:00,,Enhancement,,3.0,0,1
12453,moment/moment,1797,Add global meta locale,Continued from  1761  we should have a way for moments to be  pinned  to the global locale  so that they ll change with global setting. Something like:      js moment.locale  global  ;     ,icambron,open,14,2014-07-24 22:26:38,0000-00-00 00:00:00,,New Feature,,3.0,0,1
12452,moment/moment,1798,momentjs.com is not in local language,Currently  moment.lang   //=>  zh tw   so you ll get some interesting output if you re trying the library in the console. Could it be made to default to the local language? ,agrberg,closed,4,2014-07-25 15:27:30,2015-11-09 02:34:04,,Bug,,,0,1
12451,moment/moment,1799,Support multiple plural forms for relative date,Many languages have multiple plural forms that change depending on the number of things that are being counted. For example:  2 days  translates to       in Arabic   3 days  is 3       and  11 days  is  11       . So we have                 and         which all mean  days  in English.  In JavaScript the feature is usually implemented using a  pluralize  function which takes the number of things to pluralize and return the matching form  the same function also handles the singular case . This is an implementation with example usage for Arabic  it should be added somewhere in the locale file:      javascript var day_plurals = [                                               s             s              s       ];  // This function return an integer that points to an index in the day_plurals array function pluralize n        return n==0 ? 0 : n==1 ? 1 : n==2 ? 2 : n 100>=3    n 100<=10 ? 3 : n 100>=11 ? 4 : 5;    // Example usage var number_of_days  i;  number_of_days = 2; i = pluralize number_of_days ; // 2 console.log day_plurals[i]  number_of_days ; //         number_of_days = 11; i = pluralize number_of_days ; // 4 console.log day_plurals[i]  number_of_days ; // 11            A complete reference for plural rules of other languages is available [on the unicode website] http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html   this should help translators. ,forabi,closed,1,2014-07-26 01:41:02,2014-07-26 12:24:19,,,,0,1
12450,moment/moment,1800,Modified longDateFormat.LT format  mm  to  m ,It s little bit awkward to show  minutes  in two digits. So  it need to be modified to show like 2[minute]  not 02[minute]. ,kyungw00k,closed,4,2014-07-26 12:02:10,2014-08-20 22:13:54,,,2.8.2,1,1
12449,moment/moment,1801,[locale/ar] Use native plural forms,,forabi,closed,8,2014-07-26 12:22:33,2014-09-05 07:04:33,,,2.8.3,1,1
12448,moment/moment,1802,fixed LT quantifier for Japanese/Chinese CN/TW  locale to show the seconds as part of time,,baryon,closed,3,2014-07-27 06:29:49,2014-08-05 09:10:35,,,,1,1
12447,moment/moment,1803,Added a dutch language file.,Added a dutch language file. ,DibranMulder,closed,4,2014-07-28 15:16:54,2015-06-23 01:21:29,,Language,Needs tests,,2.10,1,1
12446,moment/moment,1804,Spanish locale: del de before year,The proper preposition before the year is  de .  del  is used informally for years after 2000  but  de  is still the preferred form.  del  doesn t really work for years before 2000.  Source: [Spanish Royal Academy s _Panhispanic Dictionary of Doubts_] http://lema.rae.es/dpd/srv/search?id=7Yloy2M3SD6pcC3Zyx . ,rbonvall,closed,6,2014-07-28 19:14:59,2014-08-20 22:14:06,,,2.8.2,1,1
12445,moment/moment,1805,Support invalid durations,There is currently no way to determine whether a duration parse was successful  even by inspecting the fields. ,theazureshadow,open,33,2014-07-28 21:47:26,0000-00-00 00:00:00,,Enhancement,,,0,1
12444,moment/moment,1806,Time format in czech language,Time format in czech should be  H:mm  instead of  H.mm . See  SN 01 6910 from 2007. ,bambuca,closed,4,2014-07-29 13:34:09,2014-07-29 15:08:41,,,,0,1
12443,moment/moment,1807,Convert 4 remaining languages to locale,Apply  1761 to 4 remaining language files. ,ichernev,closed,1,2014-07-29 16:35:32,2014-07-30 05:15:23,,,2.8,1,1
12442,moment/moment,1808,Optimize clone,replaces  1785  I rebased and added a few tests. Also run sauce tests. ,ichernev,closed,1,2014-07-30 05:35:30,2014-07-30 05:45:14,,,2.8,1,1
12441,moment/moment,1809,Allowing moment.set   to accept a hash of units,Setting multiple values using the chaining API is awkward and verbose.  Currently:      javascript moment  .set  year   2011 .set  month   9 .set  date   12 .set  hours   6 .set  minutes   7 .set  seconds   8 ;      After this patch  the current API is supported  as well as using a hash of values:      javascript moment  .set   year: 2011  month: 9  date: 12  hours: 6  minutes: 7  seconds: 8   ;      PR includes a passing test for the new behavior. ,jordansexton,closed,4,2014-07-30 06:09:48,2014-12-24 21:45:58,,,2.9,1,1
12440,moment/moment,1810,add Serbian latin variant  sr latn ,It is adapted version of  sr cyrl.js  file. ,ghost,closed,0,2014-07-30 16:43:03,2014-07-30 16:44:37,,,,1,1
12439,moment/moment,1811,Added meridiem parsing functions for el language,,nikoskalogridis,closed,1,2014-07-31 06:48:23,2014-07-31 06:51:55,,,,1,1
12438,moment/moment,1812,Added meridiem parsing functions for el language,,nikoskalogridis,closed,6,2014-07-31 07:05:45,2014-08-20 22:14:22,,,2.8.2,1,1
12437,moment/moment,1813,Add failing unit tests asserting old moment  .lang str  behavior,It looks like we broke  moment  .lang key   in 2.8.0. Take a look at the added  failing  unit tests. ,ichernev,closed,0,2014-07-31 08:34:05,2014-08-01 17:17:00,,,,1,1
12436,moment/moment,1814,Latest update causes errors,This is the error I m getting  and it goes away if I downgrade to 2.7.0. The call that s causing problems is just a moment instantiation with an ISO date string.      sh TypeError: Cannot call method  postformat  of undefined     at Moment.extend.format  /clone/jaredly.github.io/node_modules/moment/moment.js:2129:38  ...     ,jaredly,closed,7,2014-07-31 08:49:36,2015-04-17 05:51:35,,,,0,1
12435,moment/moment,1815,Website isn t updated to version 2.8.0,After seeing the release notification  I went to the http://momentjs.com website and noticed that it is still advertising  and selling  download links are 2.7.0  the old version. ,gpgekko,closed,6,2014-07-31 11:19:41,2014-08-05 08:21:08,,,,0,1
12434,moment/moment,1816,release process v2,1. Make sure there are no unmerged PRs or unresolved critical bugs that should be part of the release  2. Run tests on sauce:  grunt test:browser    grunt test:sauce browser    git checkout .    git clean  f   3. Make sure tests pass inside momentjs.com  locally  this tests against latest  moment timezone  . Update  moment timezone  if necessary.  cd libs/moment    git fetch local    git checkout local/develop    npm install    grunt release    cd ../moment timezone    git fetch origin    git co origin/master    cd ../..    grunt server   4. [1 2h] Go through the commit history and write down the changelog. Each item should have the PR that was merged  or at least a commit hash. Publish the changelog in a gist  like https://gist.github.com/ichernev/ac3899324a5fa6c8c9b4 . Make sure   breaking changes are highly visible  .  5. [2 3h] Update momentjs.com    add documentation about new features and deprecations. Use  grunt server  and develop on localhost. Make sure   typings are updated   with new functions/params.  6. Update  CHANGELOG.md  file with a shorter summary of the changelog  point to the gist. Update    Moment.js.nuspec     <releaseNotes> . Commit with message  Update changelog for 1.2.3 .   7. Bump version with  grunt bump_version:1.2.3   commit  Bump version to 1.2.3   8. Run  grunt release  to build all files that need building. Commit with  Build 1.2.3   9.   POINT OF NO RETURN   Push develop  not yet released  moment github repo  10. Update moment reference in momentjs.com libs/moment  and make sure the references to the new version are working  on localhost   11. Check if the develop travis built is successful  12. Merge develop into master  tag and push  git co master     git merge develop    git tag 2.19.2  m 2.19.2    git push    git push   tags   13. npm publish  ./scripts/npm_prepublish.sh 1.2.3    cd ../moment npm    npm publish    cd     14. Update momentjs.com moment dependency in  package.json   commit and push  travis will deploy the website.  15. nuget publish  grunt nuget publish   16. meteor publish  meteor login    cd meteor    meteor publish    cd     17. tweet about the new release passing a link to the extended changelog  in the gist .    Some suggested improvements:  1. Publish beta versions before actually doing the website changes. This will enable the release person to kind of spread the release over some time  because right now it takes a long uninterrupted chunk of time and errors happen often and its bad user experience.  2. Support browsing old versions of the docs on the website. Most other big projects let you do that  because the changes are sometimes big from version to version and you want to be reading the accurate docs.  3.  related to 2  Have a section in the docs about what to do for the new release    like hints on how to use the new functionality over the old one  deprecation explanations.  4.  not really release  add FAQ section for the web  ,ichernev,open,1,2014-07-31 20:09:34,0000-00-00 00:00:00,,Build/Release,,,0,1
12433,moment/moment,1817,moment 2.8.0 breaking changes,deprecation of lang   introduced an error: moment.js line 2444:      javascript lang : deprecate               moment  .lang   is deprecated. Use moment  .localeData   instead.               function  key                    return this.localeData key ;                               Shouldn t that return  this.locale key  ? ,leider,closed,2,2014-07-31 20:13:23,2015-04-17 05:56:30,,,,0,1
12432,moment/moment,1818,Fix host objects test as moments in IE8,See http://stackoverflow.com/questions/8157700/object has no hasownproperty method i e its undefined ie8 for reference ,bevacqua,closed,2,2014-08-01 01:06:33,2014-08-20 22:15:17,,,2.8.2,1,1
12431,moment/moment,1819,fixing lang deprecation,,icambron,closed,5,2014-08-01 11:49:02,2014-08-01 17:12:17,,,,1,1
12430,moment/moment,1820,Bug in parsing unix timestamps after a certain date,There appears to be a bug in calendar parsing of unix timestamps for dates. Sometime in between the unix timestamp prefix of 1405 and 1406  calendar dates started revert to default calendar parsing settings  rather than use my provided options. My options are:      moment.lang  en         calendar:           lastDay :  [Yesterday] HH:mm:ss           sameDay :  HH:mm:ss           sameElse :  L HH:mm:ss          ;      The unix date of  1405580466  parses correctly as  07/17/2014 01:01:06   however the unix dates of  1406476824  and above start parsing as  2014 07 27T10:00:24 06:00 . This bug is consistent in all of my application uses  such as  moment.unix unxtsmp .calendar  ;   Demonstration: http://jsfiddle.net/P2J5J/ ,dabaer,closed,8,2014-08-01 16:00:24,2014-08-18 05:10:51,,,,0,1
12429,moment/moment,1821,Undefined Property, Uncaught TypeError: Cannot read property  L  of undefined   moment.js:873   Error thrown at google chrome browser on load of page. ,allaniftrue,closed,3,2014-08-01 18:38:31,2015-06-22 18:53:56,,,,0,1
12428,moment/moment,1822,shasum check failed,I get the following when running  npm install       npm ERR  Error: shasum check failed for /tmp/npm 12053 X5b5XHKC/registry.npmjs.org/moment/ /moment 2.8.1.tgz npm ERR  Expected: 2fc71c216c40af2b4b543cb168ba9a5f52996b0f npm ERR  Actual:   aaed33a123a728d3b5efb1ade05a23ae5424b95f npm ERR  From:     https://registry.npmjs.org/moment/ /moment 2.8.1.tgz npm ERR      at /usr/local/lib/node_modules/npm/node_modules/sha/index.js:38:8 npm ERR      at ReadStream.<anonymous>  /usr/local/lib/node_modules/npm/node_modules/sha/index.js:85:7  npm ERR      at ReadStream.emit  events.js:117:20  npm ERR      at _stream_readable.js:929:16 npm ERR      at process._tickCallback  node.js:419:13  npm ERR  If you need help  you may report this  entire  log  npm ERR  including the npm and node versions  at: npm ERR      <http://github.com/npm/npm/issues>      Any idea how to fix this? ,aesopwolf,closed,1,2014-08-01 19:48:28,2014-08-01 19:58:16,,,,0,1
12427,moment/moment,1823,expose leftZeroFill  .,Can we expose the leftZeroFill   function?   While doing some complex formatting I need access to this lower level function. ,schettino72,closed,2,2014-08-02 03:45:50,2014-08-05 08:50:27,,,,1,1
12426,moment/moment,1824,.Add/.Subtract report deprecation with durations.,I can submit a PR if you want   I just wanted to make sure this is actually a bug first. When using .Add or .Subtract with durations the below deprecation warning is shown.  Deprecation warning: moment  .subtract period  number  is deprecated. Please use moment  .subtract number  period . ,scanham,closed,2,2014-08-03 03:09:41,2014-09-05 04:16:34,,Bug,,,0,1
12425,moment/moment,1825,Implemented toJSON function on Duration,Implemented toJSON function on Duration so JSON.stringify returns the ISO string representation of the duration  This is a fix for issue  1714       javascript JSON.stringify moment.duration 1024   d   ;      Old Result:       javascript    _milliseconds :0  _days :1024  _months :0  _data :  milliseconds :0  seconds :0  minutes :0  hours :0  days :4  months :10  years :2         New Result:       javascript   P2Y10M4D       ,dyro,closed,2,2014-08-03 05:37:44,2014-12-24 21:41:28,,,2.9,1,1
12424,moment/moment,1826,Invalid date error,This code leads to an error:      var d = moment 15   M  ; d.format  D  ;      => output is       Invalid date      ,rogovdm,closed,4,2014-08-03 10:58:55,2014-08-29 14:56:37,,,,0,1
12423,moment/moment,1827,unable to proper parse new Date   in locale format,> moment new Date    .format  YYYY MM DD hh:mm:ss  ;  will get the wrong time. for   > new Date  2014 08 03T13:12:57.886Z   > Sun Aug 03 2014 21:12:57 GMT 0800  CST  > moment new Date  2014 08 03T13:12:57.886Z   .format  YYYY MM DD hh:mm:ss  ; >  2014 08 03 09:12:57   which will expect   >  2014 08 03 21:12:57  ,calidion,closed,1,2014-08-03 13:51:02,2014-08-05 07:53:37,,,,0,1
12422,moment/moment,1828,nodewebkit support,version :  2.7.0  globalscope definition does not work on node webkit  suggest you change to the following  or equivalent          globalScope = typeof global  ==  undefined  ?  typeof process ==  object  ? this : global  : this       Thanks for the great work guys. ,TrevorMurphy,open,8,2014-08-04 03:56:28,0000-00-00 00:00:00,,Up-For-Grabs,,,0,1
12421,moment/moment,1829,TypeError: this._longDateFormat is undefined on line 873,Hi there  I m using momentjs in combination with bootstrap datetimepicker and I m getting this error: TypeError: this._longDateFormat is undefined on line 873.  I m using the latest version 2.8.1 and version 3.0.1 from the datetimepicker library. My browser is Firefox 31.0.  I hope you guys can help out  cheers : 1:  ,kingkorf,closed,5,2014-08-04 08:19:35,2014-08-04 15:34:50,,,,0,1
12420,moment/moment,1830,New getter  and setter?  for dow,With reference to https://github.com/dangrossman/bootstrap daterangepicker/issues/401 I would say that moment.js needs a way to get  and possibly also set  dow/first day of week. I don t know is moment.weekday 0  can somehow be used for this  but a moment.DOW    FirstDayOfWeek   or similar seems to be missing  and quite simple to implement  ,CasperWSchmidt,closed,7,2014-08-04 13:20:52,2014-12-28 17:37:23,,todo,,2.9,0,1
12419,moment/moment,1831,Deprecation warning: moment.lang is deprecated. Use moment.locale instead. ,Can this be properly documented? Even  moment.lang  fr  ;   or whatever  was poorly documented and I had to look at the source. ,yanickrochon,closed,4,2014-08-04 21:27:16,2014-08-05 08:11:33,,,,0,1
12418,moment/moment,1832,Deprecation warning: Accessing Moment through the global scope is deprecated,Then... how can I set a default locale for every new instance of  moment  ? ,yanickrochon,closed,2,2014-08-04 21:29:42,2014-08-05 08:11:26,,,,0,1
12417,moment/moment,1833,Simplify spm.output in package.json,And add some folder in .spmignore ,afc163,closed,5,2014-08-05 12:44:00,2014-09-05 06:48:47,,,2.8.3,1,1
12416,moment/moment,1834,Added Uyghur language,Hi   Thanks for the great library. Here is Uyghur translation of moment  hope you can merge it. Thanks a lot.  Best   Alim ,boyaq,closed,4,2014-08-06 08:29:34,2015-06-20 12:30:59,,Language,Needs tests,,,1,1
12415,moment/moment,1835,Malformed ISO default format,2.8.1 in the browser  The default formatting  YYYY MM DDTHH:mm:ssZ gives      2014 08 21T00:00:00 00:59      instead of       2014 08 21T00:00:00Z      Yours Adam ,108adams,closed,7,2014-08-06 12:07:09,2014-08-29 14:55:48,,,,0,1
12414,moment/moment,1836,Parsing time to UTC ignores daylight saving time,Converting two times to UTC:      moment  2014 11 04 00:00  02:00    YYYY MM DD HH:mm Z  .utc  .format  YYYY MM DD HH:mm  ; // 2014 11 03 22:00   moment  2014 08 04 00:00  02:00    YYYY MM DD HH:mm Z  .utc  .format  YYYY MM DD HH:mm  ; // 2014 08 03 22:00       The first one is correct during winter  the time difference being just 2hrs. However  during summer the time difference is 3 hrs. The 2nd should return  2014 08 03 21:00   Should moment.js handle these  or the app? If the latter  is there anything in moment.js we could use to figure this out?  Saw there was some related discussion here: https://github.com/moment/moment/issues/1514  Thanks ,mariusa,closed,13,2014-08-07 07:13:50,2014-08-09 04:19:25,,,,0,1
12413,moment/moment,1837,I cant expose moment   when I use Browserify,I made a simple file and ran  browserify main.js > bundle.js       js require  moment  ; console.log moment ;      And here s the result: https://gist.github.com/anonymous/f31e31858a5df9d78d8f   moment  is not defined. ,amrnt,closed,1,2014-08-07 14:13:06,2014-08-10 06:19:34,,,,0,1
12412,moment/moment,1838,formating in utc mode still adds timezone offest,I am creating a moment like so  date = moment.utc date   date.isValid   returns true  date.format   outputs a string which has taken into account the timezone offset in my case  1.  If the time was 8pm it is output as 7pm if it was 00:00 on the 23rd its formatted as 23:00 on the 22nd.  Am I doing something wrong?  should  utc  mode ignore the timezone infomation or am I reading the docs wrong?  how can I simply create a date object and convert that exact date and time regardless of timezone to an epoch time ,Ir1sh,closed,4,2014-08-07 14:18:15,2014-08-10 06:24:18,,,,0,1
12411,moment/moment,1839,Changes  files  to  scripts ,Windows tries to create symlinks with component 0.19 when you use  files  entries  so the component is unusable on windows  it doesn t support symlinks    reverting to  scripts . ,johntron,closed,1,2014-08-07 18:33:23,2014-09-24 07:38:58,,,,1,1
12410,moment/moment,1840,Changes  files  to  scripts ,Windows tried to create symlinks for the  files  entries   reverting to  scripts  so this works with Windows  doesn t support symlinks . ,johntron,closed,5,2014-08-07 18:47:05,2014-09-19 06:07:29,,,,1,1
12409,moment/moment,1841,Version 2.8.1 isn t available on cdnjs,The latest version of momentjs that is available on cdnjs is 2.7.0. ,chrishazfun,closed,2,2014-08-08 13:18:32,2014-08-09 06:33:18,,,,0,1
12408,moment/moment,1842,months diff bug,I am seeing an issue with running a months diff between 2 dates:      print moment  2013 04 20  .diff moment  2013 03 20     months       n  ; print moment  2013 05 20  .diff moment  2013 03 20     months       n  ; print moment  2013 06 20  .diff moment  2013 03 20     months       n  ; print moment  2013 07 20  .diff moment  2013 03 20     months       n  ; print moment  2013 08 20  .diff moment  2013 03 20     months       n  ; print moment  2013 09 20  .diff moment  2013 03 20     months       n  ; print moment  2013 10 20  .diff moment  2013 03 20     months       n  ;      I was expecting to see a sequence 1  2  3  4  5  6  7  but I am getting 1  2  3  3  5  6  7.  The diff for 2013 07 20 and 2013 03 20 is only 3 months which it should be 4 months.  Is there a reason that this is returning 3 months rather than 4 months between these 2 dates? ,rbro,closed,2,2014-08-08 13:42:10,2014-08-29 16:28:35,,Bug,,2.8.3,0,1
12407,moment/moment,1843,Parse: Hours and Minutes w/o delimiter,When hours and minutes are combined with no delimiter  terrible time format  unfortunately we don t have control over it   the parser seems to get tripped up:      javascript moment  324 AM    hmm A  .format  LLLL    > Invalid date  moment  3 24 AM    h mm A  .format  LLLL    > Friday  August 8  2014 3:24 AM       This might be hard to parse and could be known behavior  we just had that as a use case for what we were doing. Thanks for the work on the project  Moment really is a great library. ,four43,closed,2,2014-08-08 19:30:52,2014-08-11 01:06:50,,,,0,1
12406,moment/moment,1844,Properly declare moment with require.js,There is a problem with moment  in which it does not define itself properly with RequireJS. This issue was discussed [here] https://github.com/Eonasdan/bootstrap datetimepicker/issues/459   and was concluded that this was how moment.js declares itself. This PR solves this issue. All tests pass. ,yanickrochon,closed,8,2014-08-08 20:56:59,2015-01-17 09:49:35,,,,1,1
12405,moment/moment,1845,Consider hiding internal properties behind closures,Currently all moment internal properties are exposed.  We prefix them with an underscore  but users can still see them.  They are   _d    _isAMomentObject    _isUTC    _locale   and  _pf .  Often  I ll see a complaint about things not working right  but the reason comes down to the user looking at their console window and seeing the  _d  property instead of calling  format    or one of the other output functions.  Since these properties are not part of the public API  do we really need to expose them?  IMHO  they should be hidden in local variables. IIRC  these are called  closures  in JavaScript  right?  Then  the default debug output of a moment can match the  toString    output  as is usually expected.  Or would this create problems I m not thinking about? ,mj1856,closed,5,2014-08-09 04:31:08,2014-08-13 23:42:01,,,,0,1
12404,moment/moment,1846,Fix docs on RequireJS integration and noGlobal config,In the docs  it says to configure  require.js  as      javascript require.config       noGlobal: true   ;      but this does not work  as described in this [SO] http://stackoverflow.com/questions/25212521/requirejs module config always returns undefined/25215387 25215387  question.  The docs should be [edited to specify] http://jsfiddle.net/L780gr6L/5/       javascript require.config       config:           moment:               noGlobal: true                   ;     ,yanickrochon,closed,0,2014-08-09 05:33:16,2014-08-10 07:05:23,,,,0,1
12403,moment/moment,1847,startOf confusion,The docs are saying:      javascript moment  .startOf  year  ;    // set to January 1st  12:00 am this year      The console is saying:      javascript moment  .startOf  year  .toDate;    // Wed Jan 01 2014 00:00:00 GMT 0200  EET       It s not 12:00 am  it 00:00.   And the second option is good for me. This is what I want and what seem logical. But then docs should be updated. ,rogovdm,closed,2,2014-08-09 15:31:44,2014-08-10 07:07:40,,,,0,1
12402,moment/moment,1848,Fix moment diff across dst in weird cases,moment diff across dst was sometimes failing because of a floating point rounding. Just make sure to first do additions/subtractions and then division.  fixes  1842 ,ichernev,closed,0,2014-08-10 06:49:54,2014-09-05 04:52:58,,,2.8.3,1,1
12401,moment/moment,1849,Don t guess date and month,Would be nice to have some way to tell it not to guess the day and month.  If I enter a year of 1685  I don t want it to tell me the date is the 1st and the month is January.  A year is a range  a month is a range.  These values should be empty  null  or  1 when doing a get  month  .  I m parsing Genealogy data  and if I enter a year and then ask for the date  it is hugely important that I don t suggest a full date.  If I only know the year  then I don t want it to make up the rest.  Alternatively  if there is any way to identify that it is defaulting these values and not something specified  such as providing that it matched on my formatting of  YYYY  or  MMM YYYY  and not  MMM D YYYY .  Looks like the  unusedTokens  might contain this  but not sure how to check this. ,jeffg2k,closed,4,2014-08-10 22:29:43,2016-05-14 05:56:13,,,,0,1
12400,moment/moment,1850,Short names for months in norwegian bokm l can be improved,Currently the short names in nb.js is defined like this: jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des  It should be more like the english version  capitalized  max 3 letters   It should be:  Jan_Feb_Mar_Apr_Mai_Jun_Jul_Aug_Sep_Okt_Nov_Des ,torvalde,closed,8,2014-08-11 14:49:34,2014-08-18 12:57:57,,,,0,1
12399,moment/moment,1851,moment with locales.min.js: undefined is not a function,There seems to be a problem with moment with locales.min.js. Loading this in a web page inside a concatenated js file generates the following error: undefined is not a function.This is generally caused by a missing semi colon in the code somewhere. The error can also be removed by prefixing the plugin definition by     as I believe is now a widespread practice.  In fact I see that most of your function definitions are not terminated by a semi colon.  ,opichon,closed,9,2014-08-12 13:28:28,2014-08-20 13:44:35,,,,0,1
12398,moment/moment,1852,Unable to parse ISO 8601 UTC date with  000Z ,Moment is unable to recognise dates of the format  2013 08 26T00:00:00.000Z  and manually giving it the format  YYYY MM DDTHH:mm:ssZ   as well as many variations on that  failed to solve it. Related to  107. ,BenjaminRH,closed,1,2014-08-13 07:48:19,2014-08-13 08:00:05,,,,0,1
12397,moment/moment,1853,Make Norwegian Bokm l be more consistent. Fixes  1850,Makes Norwegian Bokm l and Norwegian Nynorsk look the same in formatting. ,egilkh,closed,0,2014-08-13 14:13:45,2014-08-13 14:14:46,,,,1,1
12396,moment/moment,1854,Improve norwegian bokm l. Fixes  1850,,egilkh,closed,1,2014-08-13 14:20:30,2014-08-13 14:22:35,,,,1,1
12395,moment/moment,1855,Improper format selection,Given the date  Aug 1850   I d expect it to recognize it as month and year. Used this format string [ MMM D YYYY    MMM YYYY    YYYY ]  However  it read it as  day :18   month :8   year :50.  Switching my format string to [ MMM YYYY    MMM D YYYY    YYYY ] resolved it  but this work around doesn t seem like it should be necessary. ,jeffg2k,closed,1,2014-08-13 15:06:14,2014-08-20 13:50:39,,,,0,1
12394,moment/moment,1856,Add missing locale key to file comment.,3 of the locale files didn t have the key in the comment like the rest. ,egilkh,closed,1,2014-08-13 17:38:29,2014-08-18 12:56:46,,,,1,1
12393,moment/moment,1857,moment  .startOf  quarter   returns incorrect value,Executing this:      var today = moment  ; var monthToDate = moment  .startOf  month  ; var var quarterToDate = moment  .startOf  quarter  ; var yearToDate = moment  .startOf  year  ;  console.log   today   moment   =     JSON.stringify today  ; console.log  monthToDate   moment  .startOf  month   =     JSON.stringify monthToDate  ; console.log  quarterToDate   getCurrentQuarter =     JSON.stringify quarterToDate  ; console.log  yearToDate   moment  .startOf  year   =     JSON.stringify yearToDate  ;      Results in the following. Notice that  today  and  quarterToDate  are identical.      [INFO] :   today   moment   =  2014 08 14T18:10:38.244Z  [INFO] :   monthToDate   moment  .startOf  month   =  2014 08 01T04:00:00.000Z  [INFO] :   quarterToDate   getCurrentQuarter =  2014 08 14T18:10:38.244Z  [INFO] :   yearToDate   moment  .startOf  year   =  2014 01 01T05:00:00.000Z      ,mjstelly,closed,8,2014-08-14 18:24:26,2014-08-20 13:55:18,,,,0,1
12392,moment/moment,1858,Update homepage, Deprecation warning: moment  .subtract period  number  is deprecated. Please use moment  .subtract number  period .   I used to follow the homepage code  and it output this warning to console ,infacq,closed,2,2014-08-15 10:08:19,2014-08-21 07:52:36,,Documentation,,,0,1
12391,moment/moment,1859,Improve norwegian bokm l. Fixes  1850,,egilkh,closed,2,2014-08-15 11:21:15,2014-08-20 22:14:35,,,2.8.2,1,1
12390,moment/moment,1860,Moment locale issue,Hey. Using moment   installed via bower   version  2.8.1 .  When trying to use another locale I get the following error   [a] http://i.imgur.com/wloldyW.png   What am I doing wrong?   [b] http://i.imgur.com/ISBT9Wa.png   Notice how  _locale  is null here. ,williamboman,closed,4,2014-08-15 12:42:37,2014-08-15 14:24:17,,,,0,1
12389,moment/moment,1861,What s the right way to convert this plugin code?,I m using a plugin that worked fine in 2.6.0  but if I update to 2.8.1 it breaks. This is the line that breaks:  https://github.com/icambron/twix.js/blob/334a773685c595cc8cc65e5ad57401440c045320/bin/twix.js L665  I m assuming  moment.fn._lang  was deprecated  and just as well since it clearly begins with an underscore. Still  I am wondering what I should suggest to the package author  [edit: wrong mention anyway]  in order to correct this. Preferably something that would still work with the 2.x.x series in general. ,wizonesolutions,closed,2,2014-08-17 20:06:46,2014-08-17 20:10:28,,,,0,1
12388,moment/moment,1862,failing validation,moment object without month  2014 08   return isValid    true  v2.8.1      javascript from = moment  2014 08     YYYY MM DD  ; from.isValid  ; //true      j  _isAMomentObject: true  _i:  2014 08    _f:  YYYY MM DD   _isUTC: false  _pf: Object   _d: Fri Aug 01 2014 00:00:00 GMT 0200 _f:  YYYY MM DD  _i:  2014 08   _isAMomentObject: true _isUTC: false _isValid: true _locale: i _pf: Object __proto__: j ,ma-si,closed,2,2014-08-18 08:36:42,2014-08-18 10:35:30,,,,0,1
12387,moment/moment,1863,Fixed lowercase names to let the date representation looking homogeneous,The default locale has months and week days starting with an uppercase letter. To increase the user experience the style we use to represent a date should be as much similar as possible in every language. ,corzani,closed,0,2014-08-18 14:19:51,2014-08-18 18:38:24,,,,1,1
12386,moment/moment,1864,Adding a month crossing DST on first of the month seems to be broken...,v2.8.1   moment  01/03/1980    DD/MM/YYYY   true .add 1   M  .format    returns:   1980 03 31T23:00:00 02:00    shouldn t it be   1980 04 01T00:00:00 03:00   ? ,nikoskalogridis,open,14,2014-08-18 15:25:13,0000-00-00 00:00:00,,DST,,,0,1
12385,moment/moment,1865,Italian locale reflects the default locale with uppercase months and day...,It would be good having a common way to show date between various locales to have a similar representation of dates.  English locale  for example  has dates with months and week days that start with uppercase letter. ,corzani,closed,1,2014-08-18 19:10:06,2014-08-29 10:45:28,,,,1,1
12384,moment/moment,1866,Require via webpack is broken,Hello if you try to require moment.js using webpack you get an error for each language pack saying  Module not found: Error: Cannot resolve module  moment  in [language name].js  I beleive this is because the check for nodeJs doesn t support webpack. Since everything works just fine if you change  hasModule =  typeof module  ==  undefined     module.exports   line 35 in moment.js  to  hasModule = true   I don t know if I m correct in that it just handles webpack wrong or I may be using momentjs wrong but either way any help would be appreciated because momentjs is a big help I want to use it with webpack. ,epelc,closed,3,2014-08-18 20:31:32,2014-08-18 20:50:11,,,,0,1
12383,moment/moment,1867,Duration asMilliseconds regression from v2.6.0 to v2.8.1,moment.duration  minutes: 17  seconds: 25  milliseconds: 900  .asMilliseconds  ; 1045900 //v2.60 1045899.9999999999 //v2.8.1 ,mjgallag,closed,3,2014-08-18 22:35:36,2014-09-05 04:39:10,,Bug,,2.8.3,0,1
12382,moment/moment,1868,diff of two moments defined by week and weekday gives wrong result,I want to get the difference of two moments  some moment and now basically  defined by day of week  hour and minute. If the moment is before now I want to add one week  and represent the moment by year  week of year  day of week  day  hour and min  and calculate the difference again. But the result is still negative.      var now = moment  ; var year = now.year  ; var week = now.week  ; var weekday = now.weekday  ; var hour = now.hour  ; var minute = now.minute  ;  var itemMoment = moment                               day: item.weekday                              hour: item.hour                              minute: item.minute                           ; var nowMoment = moment                               day: weekday                              hour: hour                              minute: minute                           ;  if  itemMoment.diff nowMoment  > 0        item.date = moment                           year: year                           week: week                           weekday: item.weekday                           hour: item.hour                           minute: item.minute                       ;     diff = itemMoment.diff nowMoment ;   else       if  week == 51            week =  1;         year = year   1           item.date = moment                           year: year                           week: week   1                           weekday: item.weekday                           hour: item.hour                           minute: item.minute                       ;     diff = item.date.diff now ;      I posted this question also on stackoverflow http://stackoverflow.com/questions/25358848/moment js diff of two moments defined by week and weekday gives wrong result but haven t got any response so far. ,domwoe,closed,0,2014-08-19 11:14:31,2014-08-20 07:25:55,,,,0,1
12381,moment/moment,1869,Deprecation warning: moment  .lang   is deprecated. Use moment  .localeData   instead,When using  moment with locales.min.js   version 2.8.1  this warning is printed to the console:   Deprecation warning: moment  .lang   is deprecated. Use moment  .localeData   instead  ,Tvaroh,closed,2,2014-08-20 10:00:19,2014-08-20 15:56:08,,,,0,1
12380,moment/moment,1870,Problem with August 31 2014 with 2.8.1,moment [2014 7 31] .toString   =>  Sun Aug 31 2014 00:00:00 GMT 0100  : OK  moment [ 2014   7   31 ] .toString   =>  Invalid date  : Not OK  but  moment [ 2014   6   31 ] .toString   =>  Thu Jul 31 2014 00:00:00 GMT 0100  : OK  Why does August  only  fail with the String arguments? ,dlear,closed,2,2014-08-20 11:04:03,2014-08-29 16:28:01,,Bug,,2.8.3,0,1
12379,moment/moment,1871,rounding getTimeZoneOffset for FF 24 bug,https://github.com/moment/moment/issues/1835 ,108adams,closed,2,2014-08-20 16:11:18,2014-09-05 06:42:48,,,2.8.3,1,1
12378,moment/moment,1872,Ensure deprecations in tests are intended,Add  moment.deprecationHandler  that is executed every time a deprecated method or argument is passed.  This enables the user to throw an exception or breakpoint to find a place that emits the warning  I m not sure  but we might also want to put the following functionality in deprecationHandler somehow:   [ ] support printing the warning every time   [ ] support not printing a warning at all   [ ] support disabling deprecations altogether  for speed?   i.e don t merge for now  lets keep this until we figure out what we want from  deprecationHandler . ,ichernev,closed,1,2014-08-20 19:58:37,2015-11-09 06:16:12,,,,1,1
12377,moment/moment,1873,Add moment.duration.toString  ,As requested in  1775 ,ichernev,closed,1,2014-08-20 20:04:38,2014-08-20 22:14:52,,,2.8.2,1,1
12376,moment/moment,1874,Avoid obj.hasOwnProperty in favor of Object.prototype.hasOwnPrototype,Reimplement  1818  with replacing all hasOwnPrototype and adding a test. ,ichernev,closed,0,2014-08-20 22:12:23,2014-08-20 22:12:52,,,,1,1
12375,moment/moment,1875,moment.locale String  doesn t change locale globally,I m trying to change locale globally  but I can t. I inspired myself from the example  and tried it  you can find in the documentation  http://momentjs.com/docs/ /i18n/instance locale/  but it doesn t work like described. I created a JSFiddle example here : http://fiddle.jshell.net/phrozgrd/  Do I make something wrong ? ,dramstein,closed,23,2014-08-21 11:40:03,2014-08-29 14:44:42,,,,0,1
12374,moment/moment,1876,Russian Locale bug in time labels for last 7 days.,In Russian  word  last  is not used to indicate the current week  its used for previous week.  So the right names would be:            >               >                >     ,ElectronicaGitHub,closed,3,2014-08-22 09:55:22,2014-11-17 18:12:58,,,,0,1
12373,moment/moment,1877,isSame cases,I was thinking about  1772 for some time and I came to the following realization:  There are two ways in which  isSame  can be interpreted     Absolute  In absolute terms  a.isSame b  unit   means  whether  b  falls into  a s unit . Written with moment:      javascript   a.clone  .startOf unit   <=  b     b <=   a.clone  .endOf unit           Relative / local  If you try to describe  a  and  b  up to unit in their own timezones  would the description match. Written with moment  won t work for  week    isoWeek    quarter  :      javascript a.clone  .startOf unit .format  YYYY MM DD HH:mm:ss   ===       b.clone  .startOf unit .format  YYYY MM DD HH:mm:ss             I think both make sense in different scenarios. In case where  a  and  b  have the same zoning both are equivalent  the differences arise only with separate zoning  when  b  is close to the range  in the absolute inequality . ,ichernev,open,4,2014-08-22 14:35:55,0000-00-00 00:00:00,,DST,,,0,1
12372,moment/moment,1878,moment.utc string  [ fmt1  fmt2 ]  not working?,I believe there is a bug in moment.utc when an array of format strings are passed in:      var m1 = moment.utc  2001 01 01  ; var m2 = moment.utc  2001 01 01   [moment.ISO_8601   M/D/YYYY ] ; console.assert m1.isSame m2  ; // fails      I m  somewhat  familiar with the parsing fallback and I walked the code in the debugging to confirm it isn t related.  I didn t have time to figure out the exact cause but I did notice that the temporary config created when walking the format array does not copy the  _useUTC  field.  Should it? ,mkleehammer,closed,3,2014-08-22 16:02:16,2014-08-29 15:55:40,,Bug,,,0,1
12371,moment/moment,1879,Is  localeData  chainable?,As previously mentioned in  1819   > FWIW  my fix does chain  see the test  and it s slightly cleaner because it uses the new method to do the set and the chain.  At openuserjs/openuserjs.org 315 we re seeing a chain issue that this patch seems to have been fixed _ t _[here] /moment/moment/pull/1819  but wasn t merged into this project. We re setting our module globally to use a custom en locale called  en tiny  and then setting the date from a stored date.  It s a little unclear if we should be doing:      javascript moment date .locale  en tiny  .calendar  ;      ... or ...      javascript moment date .calendar  ;      .  Using:      javascript moment date .localeData  en tiny  .calendar  ;      and      javascript moment date .localeData  .calendar  ;      ... ends up being nothing on our end. Please advise. TIA ,Martii,closed,23,2014-08-23 12:25:39,2014-12-29 07:35:53,,Bug,,,0,1
12370,moment/moment,1880,Fix lodash dependency,Add lodash to devDependencies in package.json. Test plan: rm  rf node_modules; npm install; grunt ,emilibrishimov,closed,0,2014-08-24 22:27:44,2014-08-25 00:01:34,,,,1,1
12369,moment/moment,1881,something strange with localeData,Regarding the [doc for localeData] http://momentjs.com/docs/ /i18n/locale data/   I would like to i18nize [pikaday] http://dbushell.github.io/Pikaday/       javascript var loc = moment   //  > undefined loc.locale  de   //  > Object   _isAMomentObject: true  _isUTC: false  _pf: Object  _locale: Object  _d: Date 2014 08 25T12:59:40.007Z   var localeData = loc.localeData   //  > undefined localeData.months   //  > TypeError: m is undefined localeData._months //  > Array [  Januar    Februar    M rz    April    Mai    Juni    Juli    August    September    Oktober   2 more  ] moment.version //  >  2.8.1       Trying to have the [same behavior as the global localization for moment] http://momentjs.com/docs/ /i18n/listing months weekdays/ :      javascript moment.locale  fr   //  >  fr  moment.months   //  > Array [  janvier    f vrier    mars    avril    mai    juin    juillet    ao t    septembre    octobre   2 more  ]      I may do something wrong or at least understand wrong  what s your idea?  BTW: [pikaday uses moment only for formatting] http://dbushell.github.io/Pikaday/examples/moment.html  ,enguerran,closed,2,2014-08-25 13:40:48,2014-08-28 13:00:30,,,,0,1
12368,moment/moment,1882,Set delimiter between hours and minutes to colon,Changed delimiter between hours and minutes back to colon in Czech language as it is more common than dot. Public media also use colon  for example http://www.ceskatelevize.cz/ct24/zive vysilani/ ,saxicek,closed,10,2014-08-25 16:06:22,2014-09-05 05:08:40,,,2.8.3,1,1
12367,moment/moment,1883,Floating point math errors in duration as method output,The duration object refactor in moment version 2.8.0 introduced floating point math errors in the output of the duration as method.  The errors appeared for small units output: milliseconds  seconds  and minutes.  This fixes  1867 and fixes jsmreese/moment duration format 13. ,jsmreese,closed,2,2014-08-25 16:40:41,2014-09-05 05:04:16,,,2.8.3,1,1
12366,moment/moment,1884,Use case for changing the moment duration units relationships?,The refactor of the duration object in Moment.js version 2.8.0 changed the relationship between moment duration units.  Before version 2.8.0  a duration year was equal to 365 days  and a duration month was equal to 30 days.  Version 2.8.0 changed those relationships to define a duration year as 365 days 5 hours 49 minutes and 12 seconds. A duration month is now 30 days 10 hours 29 minutes and 6 seconds.  From the comments in the code  it appears that the rationale for this change is improving the accuracy of the conversions by defining a year as 365.2425 days  which accounts for leap year rules making 400 years have 146097 days.  The update might make sense if the primary use case for durations involved long timescales in the century range  but I don t think that s the case.  I feel that the primary duration use case is for timescales in the year  month  day  and shorter ranges  and that the change actually hurts the accuracy of the conversion.  There are   many   times when a year is 365 days. There are   many   times when a month is 30 days.  From a human perspective  a year or a month is   never   composed of fractional days. A year can be exactly 365 or 366 days  and a month can be exactly 28  29  30  or 31 days. There is   never   a time when any given year is exactly 365.2425 days or any given month is exactly 30.436875 days.  As an end user  seeing a one month duration output as 30 days was acceptable and easy to understand. I m confused now seeing that same one month duration output as 30 days 10 hours 29 minutes and 6 seconds. ,jsmreese,closed,4,2014-08-25 18:49:09,2014-08-29 15:36:03,,Bug,,,0,1
12365,moment/moment,1885,Performance optimization isBefore/isAfter/isSame,  optimized performance of isBefore/isAfter/isSame by using valueOf and   not momentizing/cloning already existing moment objects   90  performance improvement when using without specific unit and the    input is already a moment object  reviewed by PatrickBic ,hupfis,closed,2,2014-08-26 13:13:53,2014-10-09 09:41:15,,,,1,1
12364,moment/moment,1886,Getting a warning but looks ok to me,I m getting this message: Deprecation warning: moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.   Here is my code https://gist.github.com/c0debreaker/e21e67aef8ece5bb25fe  Basically  the value that Google Chart is expecting should be a Date object. The code above executes like this new Date  moment  2014 04 30 17:00  .add 0   days  .format  YYYY MM DD hh:mm a     I would like to know what is wrong with my syntax since I m getting the message above. The results though are correct and Google Chart is displaying my ticks on axis properly.  Thanks  ,c0debreaker,closed,3,2014-08-26 13:56:20,2014-08-28 13:50:53,,,,0,1
12363,moment/moment,1887,Publish an Angular module too?,Just like there is a bower module for momentjs  would you consider publishing an angular friendly module on bower as well?  There is already: https://github.com/gdi2290/angular momentjs But having something that comes from the github s moment/moment repo has so much more commonplace credibility plus I m guessing a CDN address. ,pulkitsinghal,closed,2,2014-08-26 19:15:21,2014-08-29 10:10:47,,,,0,1
12362,moment/moment,1888,Loading moment into a namespace,Hello   Is it possible to contain moment.js within a _namespace_  rather than have it made available globally  when used within a regular js script?  For instance:      Javascript var myObject =   ;  function namespace      /  include  ../vendor/moment/min/moment.min.js   /   namespace.getMoment = function         return moment;    ;    myObject ;  var m = myObject.getMoment  ; console.log m   ;  console.log moment   ;      _Note: I m using the [grunt includes] https://github.com/vanetix/grunt includes  Grunt plugin to actually insert the contents of the source file directly into the namespace_  Ideally the first log statement should print the date  but the second should fail.  This approach works seems to work fine with other js libraries  but not for moment.js  The reason I need to do this is because I m writing a browser extension and can t guarantee that an existing version of moment  _either newer or older_  doesn t exist in the page the extension injects into. ,micpringle,open,3,2014-08-27 12:00:21,0000-00-00 00:00:00,,Loading,,,0,1
12361,moment/moment,1889,Days with ordinal suffix are not parsed in strict mode, moment  July 6th  2014   [ MMM Do  YYYY ]  true .isValid    returns  false   however  moment  July 6th  2014   [ MMM Do  YYYY ] .isValid    returns  true . ,aj-dev,closed,4,2014-08-27 13:55:26,2014-09-05 04:18:45,,Bug,,,0,1
12360,moment/moment,1890,make CI build faster,,PeterDaveHello,closed,3,2014-08-28 12:50:46,2014-09-05 05:02:05,,,2.8.3,1,1
12359,moment/moment,1891,Unexpected results from isSame  isBefore and isAfter when zone is used to modify offset,I m hoping someone can help me make sense of this output. It looks like a bug to me but maybe I m just misunderstanding how these methods work. Even so  I wouldn t expect isSame and isBefore/isAfter to ever both return true when comparing the same moments with the same granularity  which seems to be the case in the last 3 statements.  date = moment   // j  _isAMomentObject: true  _isUTC: false  _pf: Object  _locale: i  _d: Thu Aug 28 2014 17:11:10 GMT 0100  GMT Daylight Time    d = date.clone   // j  _isAMomentObject: true  _isUTC: false  _pf: Object  _locale: i  _d: Thu Aug 28 2014 17:11:10 GMT 0100  GMT Daylight Time    date.zone   //  60 d.zone   //  60 d.isSame date   day   // true d.isBefore date   day   // false d.isAfter date   day   // false d.zone 0  // j  _isAMomentObject: true  _isUTC: true  _pf: Object  _locale: i  _d: Thu Aug 28 2014 17:11:10 GMT 0100  GMT Daylight Time    date.zone   //  60 d.zone   // 0 d.isSame date   day   // true d.isBefore date   day   // false d.isAfter date   day   // true  Thanks  Stephen ,authcode,closed,4,2014-08-28 16:19:49,2014-12-29 07:49:08,,Bug,,,0,1
12358,moment/moment,1892,Performance optimization isBefore/isAfter/isSame,  optimized performance of isBefore/isAfter/isSame by using valueOf and not momentizing/cloning already existing moment objects   90  performance improvement when using without specific unit and the input is already a moment object  reviewed by PatrickBic/tscheinecker ,hupfis,closed,1,2014-08-29 12:34:26,2014-09-05 04:58:02,,performance,,2.8.3,1,1
12357,moment/moment,1893,Add moment.isDate method,fixes  1790 ,ichernev,closed,1,2014-08-29 15:13:38,2014-12-24 21:38:23,,,2.9,1,1
12356,moment/moment,1894,Years and months convert to whole number of days with duration as getters,This is an attempt at fixing  1884.  Also  days in one month  and  days in one year  yield floating point numbers in google.com  which is intended to be much more user friendly than moment  moment is developer friendly :  .  The  as  getters are intended for conversion  and this is exactly what we do here. It just  looks broken  as @jsmreese put it. @icambron what do you think?  @jsmreese    on the other hand if you don t want to display floating point numbers to the client you can just round them. I hope you re not using moment to convert 1 month into 30 days  but instead    variable  possibly unexpected  input into days  which will most probably yield a non natural number of days.  TODO:   [ ] tests for all possible input and output units   [ ] remove commented out tests ,ichernev,closed,2,2014-08-29 15:31:10,2014-11-17 17:44:52,,,,1,1
12355,moment/moment,1895,Fix moment.utc with array of formats,Fixes  1878  ,ichernev,closed,0,2014-08-29 15:48:46,2014-09-05 04:48:46,,,2.8.3,1,1
12354,moment/moment,1896,Fix moment  .locale  ivalid id  ,Fixes  parts of   1879 ,ichernev,closed,1,2014-08-29 16:12:26,2014-09-05 04:43:41,,,2.8.3,1,1
12353,moment/moment,1897,Moment creation with array of string now works properly,Fixes  1870. ,ichernev,closed,1,2014-08-29 16:27:28,2014-09-05 04:42:18,,,2.8.3,1,1
12352,moment/moment,1898,Bosnian translation of August,In Bosnian language the correct name of August is  august  instead of  avgust  ,endrejeges,closed,7,2014-08-30 10:39:48,2014-11-17 05:52:24,,,2.8.4,1,1
12351,moment/moment,1899,startOf  week   return with wrong data in Safari browser only around New Zealand daylight saving,    javascript moment new Date  Sun Apr 06 2014 02:00:00 GMT 1200  NZDT    .startOf  week  .toString      > in Chrome and Firefox:  Sun Apr 06 2014 00:00:00 GMT 1300     > in Safari:  Sun Apr 06 2014 02:00:00 GMT 1200       ,zoltan-nz,closed,2,2014-08-30 11:42:13,2014-09-19 08:23:39,,,,0,1
12350,moment/moment,1900,Santiago timezone summertime bug,Please see JSFiddle: http://jsfiddle.net/g3wvo3fa/  The output is  error highlighted :  >  2014 08 31T00:00:00 04:00 >     2014 09 01T00:00:00 04:00 >     2014 09 02T00:00:00 04:00 >     2014 09 03T00:00:00 04:00 >     2014 09 04T00:00:00 04:00 >     2014 09 05T00:00:00 04:00 >     2014 09 06T00:00:00 04:00 >       2014 09 06T23:00:00 04:00   >     2014 09 08T00:00:00 03:00 >     2014 09 09T00:00:00 03:00 >     2014 09 10T00:00:00 03:00 >     2014 09 11T00:00:00 03:00 >     2014 09 12T00:00:00 03:00 >     2014 09 13T00:00:00 03:00  Interestingly  I ve tried to reproduce this with UK summertime and it works as expected:  > 2014 10 21T00:00:00 01:00 > 2014 10 22T00:00:00 01:00 > 2014 10 23T00:00:00 01:00 > 2014 10 24T00:00:00 01:00 > 2014 10 25T00:00:00 01:00 > 2014 10 26T00:00:00 01:00 > 2014 10 27T00:00:00 00:00 > 2014 10 28T00:00:00 00:00 > 2014 10 29T00:00:00 00:00 > 2014 10 30T00:00:00 00:00 > 2014 10 31T00:00:00 00:00 > 2014 11 01T00:00:00 00:00 > 2014 11 02T00:00:00 00:00 > 2014 11 03T00:00:00 00:00  Verified in Chrome and Firefox. To reproduce you ll need to change your PC s locale to the below:  [momentjs bug] https://cloud.githubusercontent.com/assets/1132681/4101700/d047db3c 30ff 11e4 9f0d eaa91c84a153.png  ,jamie94bc,closed,8,2014-08-31 11:13:42,2014-09-19 09:10:31,,,,0,1
12349,moment/moment,1901,Validation Consideration,The following isValid   examples may lead one to think that strict mode should be enabled by default if formatting options are present  1 date string or an array of date strings :      code moment  2014 has been a great year    [ YYYY ] .isValid  ; //true moment  2014 has been a great year    [ YYYY ]  true .isValid  ; //false      Are there any negative implications of doing this  aside from backwards compatibility? Apologies in advance if I ve overlooked said implications.  Thank you for your hard work on this wonderful library   Matthew Vita ,MatthewVita,closed,2,2014-09-01 01:12:47,2014-09-04 16:16:04,,,,0,1
12348,moment/moment,1902,zone   arg has wrong sign,Novosibirsk  Russia  has  7 timezone  but in momentjs I have to use zone methond with minus:      js moment  .zone  7 ;      It is a problem for any timezone. Why I should change sign before use zone   method?  Same problem can be found here http://stackoverflow.com/questions/21144423/moment js offsetting dates using utc and timezone offset ,Diokuz,closed,1,2014-09-02 10:36:29,2014-09-04 16:13:16,,,,0,1
12347,moment/moment,1903,Update zh tw.js,Append     minute  to Ah mm in longDateFormat ,lockchou,closed,4,2014-09-04 06:36:08,2014-09-05 04:21:01,,,,1,1
12346,moment/moment,1904,Update zh cn.js,Append     minute  to Ah mm in longDateFormat ,lockchou,closed,7,2014-09-04 06:40:59,2015-05-04 07:57:27,,Needs tests,,2.10,1,1
12345,moment/moment,1905,Get   Set don t update entire instance,Hi there   I stuck with the problem of adding or subtracting values.      var d1 = moment  2010 08 31 23:59:59  ; // Moment  _isAMomentObject: true  _i:  2010 08 31 23:59:59   _f:  YYYY MM DD HH:mm:ss   _isUTC: false  _pf: Object   d1.add 1   s  ; // Moment  _isAMomentObject: true  _i:  2010 08 31 23:59:59   _f:  YYYY MM DD HH:mm:ss   _isUTC: false  _pf: Object   d1.subtract 1   d  ; // Moment  _isAMomentObject: true  _i:  2010 08 31 23:59:59   _f:  YYYY MM DD HH:mm:ss   _isUTC: false  _pf: Object        I think the  d1  supposed to be changed when I m adding or subtracting any values. ,AndrewEastwood,closed,8,2014-09-04 07:32:35,2014-09-04 16:05:21,,,,0,1
12344,moment/moment,1906,Duration .asYears and .asMonths still results in floating point errors,The moment.duration.asYears   and moment.duration.asMonths   methods still result in floating point errors in 2.8.3.    Example:  moment.duration 365   days  .asYears  ;  Expected Result:  1 Actual Result:       0.9993360575508051  moment.duration 45   days  .asMonths  ;  Expected Result:  1.5 Actual Result:        0.9993360575508051 ,mjsalinger,closed,6,2014-09-05 10:13:24,2015-04-16 17:21:09,,,,0,1
12343,moment/moment,1907,Create tk.js,Create new locale for Turkmenistan  turkmen language [ tk ]  . Translated from turkish locale. ,isa424,closed,2,2014-09-05 17:04:17,2014-11-18 11:49:42,,,,1,1
12342,moment/moment,1908,ISO date parsing  manipulating  displaying resets timezone,Hey  First of all  consider the following:      moment  2012 10 16T05:30:00 0530  .format  ZZ       //   0500       Does moment not cater for sub hour timezones?  Then:      moment  2012 10 16T05:30:00 0530  .toISOString  ;    //  2012 10 16T00:00:00.000Z  moment.parseZone  2012 10 16T05:30:00 0530  .add 1   hour  .toISOString  ;    //  2012 10 16T01:00:00.000Z       When passing in an ISO string then converting back to ISO string I lose timezone data.  Is this intentional behaviour?  Thanks ,daviestar,closed,1,2014-09-07 18:51:22,2014-10-25 07:35:23,,,,0,1
12340,moment/moment,1909,Parse human readable time,Is there a method to convert a human readable time to a specific format?  Examples: Input: 9am Output: 09:00:00  Input: 10:30pm Output: 22:30:00  Input: 5p Output: 17:00:00 ,walmik,closed,1,2014-09-08 19:38:54,2014-09-19 08:01:58,,,,0,1
12341,moment/moment,1909,Parse human readable time,Is there a method to convert a human readable time to a specific format?  Examples: Input: 9am Output: 09:00:00  Input: 10:30pm Output: 22:30:00  Input: 5p Output: 17:00:00 ,walmik,closed,1,2014-09-08 19:38:54,2014-09-19 08:01:58,,,,0,1
12339,moment/moment,1910,moment year  parses as UTC not local timezone, moment  2014  .format    returns  2013 12 31T17:00:00 07:00  while  moment  2014/01  .format    and  moment  2014    YYYY  .format    return  2014 01 01T00:00:00 07:00 . Is that intended behavior? ,3ch01c,closed,1,2014-09-08 20:26:41,2014-09-19 07:57:30,,,,0,1
12338,moment/moment,1911,Update zh cn.js,Add     to minutes in Chinese. ,lockchou,closed,4,2014-09-09 02:13:21,2015-05-04 07:57:15,,Needs tests,,2.10,1,1
12337,moment/moment,1912,Update zh tw.js,Add     to minutes in Chinese. ,lockchou,closed,3,2014-09-09 02:15:36,2015-01-17 09:42:43,,,,1,1
12336,moment/moment,1913,Calling endOf with no argument raises no error but returns dodgy result,Calling endOf with no argument subtracts 1 ms from the date.      // units = undefined this.startOf units .add 1   units ===  isoWeek  ?  week  : units  .subtract 1   ms        This should either default to  day  or throw an error. Instead you get a dodgy result.      var date = moment  2014 09 09   YYYY MM DD  ; date.toString   // Tue Sep 09 2014 00:00:00 GMT 0100 date.endOf  .toSting   // Mon Sep 08 2014 23:59:59 GMT 0100     ,domarmstrong,closed,4,2014-09-09 11:36:49,2014-10-24 07:39:02,,Bug,,,0,1
12335,moment/moment,1914,relativeTime styleable output,How do you configure momentjs to output something that would look like this:  [ago] https://cloud.githubusercontent.com/assets/291082/4208062/c46f6230 385c 11e4 811e 55e75a4da48b.jpg  I thought maybe changing the l18 file to something like:      relativeTime :         future :  in <sometag> s</sometag>         past :  <sometag> s</sometag> ago         s :  a few seconds         m :  a minute         mm :  <sometag> d</sometag> minutes         h :  an hour         hh :  <sometag> d</sometag> hours         d :  a day         dd :  <sometag> d</sometag> days         M :  a month         MM :  <sometag> d</sometag> months         y :  a year         yy :  <sometag> d</sometag> years           But that is not the way as they get _html notation_ encoded.. ,enapupe,closed,7,2014-09-09 20:08:28,2016-04-02 01:14:18,,,,0,1
12334,moment/moment,1915,Save duration normalizedInput as _input property on duration object,When working with duration objects  it can be _really_ useful to know what unit quantities were used to create the duration object.  The  normalizedInput  object is already created in the duration object constructor. This update simply saves that input to the new duration object under the  _input  property.  The duration clone tests are updated to use the  asMilliseconds  method because the  _input  property will usually not match between the original and cloned duration objects. But each object should evaluate to the same number of milliseconds.  Operations such as cloning  adding  or subtracting can modify a duration object so that its  _input  property gets out of sync with the actual duration value. I think that s OK. ,jsmreese,closed,4,2014-09-10 03:03:58,2015-01-17 09:41:37,,,,1,1
12333,moment/moment,1916,date from string and format missing year is valid,When making a date from string and format  I expect a missing year to make the date invalid. http://jsfiddle.net/jw8o2g2a/2/  674: The toInt function should not default to 0 when the argument is undefined.  This returns a technically valid year even though no year was provided.  2059: parseTwoDigitYear attempts to take an input value and add 1900 or 2000 to it.  If the value is undefined  this will return NaN  so default to 0.  1361: use DATE constant rather than hard coded value ,jakerichan,closed,2,2014-09-10 19:29:28,2014-09-27 20:45:31,,,,1,1
12332,moment/moment,1917,Manipulation docu outdated,Example code in http://momentjs.com/docs/ /manipulating/ is outdated:       javascript moment  .add  days   7 .subtract  months   1 .year 2009 .hours 0 .minutes 0 .seconds 0 ;      Should be:      javascript moment  .add 7   days  .subtract  months   1 .year 2009 .hours 0 .minutes 0 .seconds 0 ;      This difference seems to run through the whole docu also in other code examples. ,ain,closed,2,2014-09-11 11:22:44,2016-04-01 03:32:44,,Documentation,,,0,1
12331,moment/moment,1918,add 14  days   vs add  days  14 ,add 14  days   delivers wrong results when going from one month to another and add  days  14  gets: Deprecation warning: moment  .add period  number  is deprecated. Please use moment  .add number  period . ,airzinho,closed,1,2014-09-11 12:17:11,2014-09-19 07:49:35,,,,0,1
12330,moment/moment,1919,unix timestamp,when calling either the .unix   method or .format  X   the date being returned is incorrect  it always seems to be January 17  1970 01:47 AM .  i noticed that the [most common stackoverflow thread] http://stackoverflow.com/questions/9756120/how do i get a utc timestamp in javascript  that describes how to generate a unix timestamp in javascript recommends doing something like:  > var d1 = new Date  ; > d1.toUTCString  ; >  Sun  18 Mar 2012 05:50:34 GMT  // two hours less than my local time  that makes sense > Math.floor d1.getTime  / 1000  > 1332049834  >  > var d2 = new Date  d1.getUTCFullYear    d1.getUTCMonth    d1.getUTCDate    d1.getUTCHours    d1.getUTCMinutes    d1.getUTCSeconds    ; > d2.toUTCString  ; >  Sun  18 Mar 2012 03:50:34 GMT  // four hours less than my local time  and two hours less than the original time   because my GMT 2 input was interpreted as GMT 0  > Math.floor d2.getTime  / 1000  > 1332042634  when i did that and passed the number to the moment   constructor  guess what date i got?  January 17  1970 01:47 AM  so  i reckon moment s .unix   method is probably doing the same thing internally  and then .format  X   probably internally invokes the .unix   method .   after noodling around a bit  i found the javascript date object apparently has some new static methods: .UTC   and .now    .UTC   appears to have the same signature as the Date   constructor except that it requires at least a year and a month:  Date.UTC year  month[  date[  hrs [  min[  sec[  ms]]]]]   both .UTC   and .now   return milliseconds since the epoch instead of seconds.  so  perhaps the .unix   method should be modified to return the value of Date.UTC args  with the appropriate args. ,riiiiizzzzzohmmmmm,closed,1,2014-09-11 15:48:02,2014-09-11 16:21:03,,,,0,1
12329,moment/moment,1920,Localized date parsing errors,Using moment 2.8.3      js moment.lang  fr  ;  moment moment  .format  lll    lll   true .isValid   // false moment.lang  de  ;  moment moment  .format  lll    lll   true .isValid   // false      Removing the periods from the abbreviated months and weekdays fixes the issue.  Also:       js moment.lang  ja  ;  moment moment  .format  lll    lll   true .isValid   // false moment moment  .format  l LT    l LT   true .isValid   // false     ,pauljoey,closed,3,2014-09-11 18:31:40,2015-12-10 05:31:24,,Bug,,,0,1
12328,moment/moment,1921,FromNow won t display 11 months ,Currently the following code does not work:     moment [2015 6 27] .from [2014 8 11]   This returns  a year  but should return  11 months  ,jeffavis,closed,2,2014-09-11 19:04:29,2014-09-19 09:44:09,,,,0,1
12327,moment/moment,1922,When building a UTC date with Moment.js  zone   setter does nothing  2.8.3 ,I get the exact same moment object after running zone  1  as I do when I don t run it. Example:  console.log  moment  .utc  .toDate    ; console.log  moment  .utc  .zone  1 .toDate    ;  I would expect this to adjust the Date object according to the timezone offset  but it does... well  nothing. ,rquinlivan,closed,3,2014-09-11 21:46:02,2014-09-12 20:15:11,,,,0,1
12326,moment/moment,1923,different behavior in different timezones,I am using moment.js 2.6.0  and getting issue with how library works in different timezones.  //item =  9/21/14   in EST  > .moment item .format  L  ;  >  9/21/14  In PST  > .moment item .format  L  ;  >  9/22/14  ,jmogera,closed,2,2014-09-12 11:39:16,2016-04-01 03:31:01,,Troubleshooting,,,0,1
12325,moment/moment,1924,fromNow   for days,Hi  Thanks for this great piece of work  I want to use moment to count down my calendar appointments. Now I have appointments that are full day appointments..but with fromNow   it will count down to the start  date.   So if I have an appointment on Sunday  fullDay  it will count down to midnight  Sunday at 00:00h   How can I format fromNow   to only count down full days until the start day?  I googled for hours now..and substring etc. doesn t help me :/ ,georg90,closed,3,2014-09-12 20:16:28,2014-09-19 07:49:11,,,,0,1
12324,moment/moment,1925,Fix duration as getters  years and months convert to whole days ,This is an attempt to complete  1894 and fix  1884.  I ve used Math.round instead of Math.floor to output whole days from months and years. Rounding instead of flooring gives output that feels more realistic.  I ve added tests for each of the units from/to  that leap year days are added correctly  and that multiple months output real day values. ,jsmreese,closed,2,2014-09-13 04:30:14,2014-11-17 07:32:11,,,2.8.4,1,1
12323,moment/moment,1926,moment isbefore isafter difference in year problem,when I create two moment objects there is a problem with moment comparisons. 30 August 2014 is later than 1 September 2014. 9 September is later than 1 September. Also between 30 August 2013 and 1 September 2014 there is less than a year difference  but momentjs results more than a year difference between 1 September 2013 and 8 September 2014. ,imrenuijen,closed,2,2014-09-13 16:29:39,2014-09-24 18:06:53,,Troubleshooting,,,0,1
12322,moment/moment,1927,moment object  form inconsistency,I think there is an inconsistency when creating moment from object  where  date  has to be specified as  day .  For example:      var m = moment   year: 2010  month: 0  day: 10   ; console.log m.year   ; // 2010 console.log m.month   ; // 0 console.log m.day   ; // 0 console.log m.date   ; // 10      but the following:      var m = moment   year: 2010  month: 0  date: 10   ; console.log m.year   ; // 2010 console.log m.month   ; // 0 console.log m.day   ; // 5 console.log m.date   ; // 1      won t work as  date  is not used by object form constructor.  Basically one has to differentiate between  day  in object constructor and  day  in moment instance and also to remember to pass  date  as  day  when creating moment from object. Is this an expected behavior? ,kobalicek,closed,3,2014-09-15 10:48:15,2014-10-22 17:19:20,,Bug,,,0,1
12321,moment/moment,1928,In IE11 I m seeing module being registered as type  object  but is null....,... This also makes sure that  even if module is not undefined  it is also not null before checking property export.  I m not entirely sure why this is not registering as undefined  but it seems related to this: http://javascriptweblog.wordpress.com/2011/08/08/fixing the javascript typeof operator/  > What s wrong with typeof? >  > The most glaring issue is that typeof null returns  object . It s simply a mistake. There s talk of fixing it in the next version of the ECMAScript specification  although this would undoubtedly introduce backwards compatibility issues. ,grexican,closed,1,2014-09-15 15:13:10,2014-11-17 05:49:38,,,2.8.4,1,1
12320,moment/moment,1929,Issue parsing ISO_8601 String,I am using Moment toISOString to generate a string of the given Moment. Then trying to use that string to generate a new instance of the Moment and I am getting an invalid date error. Any thoughts? Note: This is not the actual code but I have tested it and it does still return errors.  Running Moment version 2.8.3 through Bower      js var momentInstance = moment  ; sessionStorage.dateTime = momentInstance.toISOString  ; var newInstance = moment sessionStorage.dateTime ; // Also tried  moment sessionStorage.dateTime  moment.ISO_8601 ; console.log  invalid   newInstance ;      the error I am getting is  screenshot below:  https://drive.google.com/file/d/0Bxgewb0kz4IzQkMyWWFVTUdhbzA/edit?usp=sharing  UPDATE: Even doing this results in an invalid moment instance.      js var momentInstance = moment  ; var newInstance = moment momentInstance.toISOString   ; console.log  invalid   newInstance ;      However using Date fixes this.      js var momentInstance = moment  .toISOString  ; var dateTime = new Date momentInstance ; dateTime = moment dateTime ; console.log  working   dateTime ;     ,stramel,closed,2,2014-09-16 20:48:15,2014-09-19 16:28:59,,,,0,1
12319,moment/moment,1930,Formats  MMM  and  MMMM  Treated The Same In Strict Mode,The format guide states: MMMM    January...December  MMM    Jan...Dec   However  the following statements return true: moment  january 1 2001    MMMM D YYYY   true .isValid  ; //true  correct  moment  january 1 2001    MMM D YYYY   true .isValid  ; //true  incorrect   moment  jan 1 2001    MMM D YYYY   true .isValid  ; //true  correct  moment  jan 1 2001    MMMM D YYYY   true .isValid  ; //true  incorrect   Using version 2.8.3 ,coleHafner,closed,2,2014-09-18 07:23:43,2014-10-22 17:20:05,,Bug,,,0,1
12318,moment/moment,1931,hijri/arabic/islamic date module on moment,hi  is there any hijri/arabic/islamic date module for moment?  something like [moment jalaali] https://github.com/jalaali/moment jalaali  but with hijri dates  ,ghost,closed,1,2014-09-18 10:54:38,2014-09-19 09:47:44,,,,0,1
12317,moment/moment,1932,require locale on browser side,Hi   I am using browserify to expose moment in a bundle  on browser side.  Due to the dynamic require of locales  it is impossible to use moment.locale mylocale . Is there a known workaround  or maybe a planned feature resolving this issue? ,mpipet,closed,3,2014-09-19 12:28:24,2014-09-22 07:37:16,,,,0,1
12316,moment/moment,1933,fix  1876,this changeset is intended to fix bug  1876 with Russian locale. also  cast @demidov91  @Oire  @zemlanin to see if similar changes should be made to Belarussian and Ukrainian locales. ,szelga,closed,7,2014-09-21 11:09:30,2014-11-17 17:32:03,,,,1,1
12315,moment/moment,1934,Fixed capitalization in comments,,AlexJeng,closed,1,2014-09-22 05:12:43,2014-09-27 21:04:16,,,,1,1
12314,moment/moment,1935,Alias locale to another?,I notice that zh and zh cn display different dates. I would like for zh to render as zh cn  and am wondering if there is a way to alias a locale to another locale. Thank you.  ,jonyen,closed,3,2014-09-22 19:57:13,2015-04-01 04:33:11,,Enhancement,,,0,1
12313,moment/moment,1936,Limitless dates,Is it possible to have momentjs work with limitless dates? momentjs seems based on js Date object so now limits are  100m...100m days from 1970  only about 273 000 years . momentjs says 274 000 year is invalid date. ,demalexx,closed,1,2014-09-23 09:18:55,2014-09-23 18:34:52,,,,0,1
12312,moment/moment,1937,Change case  _invalidDate:  Invalid date  to  Invalid Date ,I expected:      String new Date  fail    === String moment  fail   ;      However   Invalid Date   does not equal  Invalid date .  Was the lowercase  date  an intentional choice?   ,cthurston,closed,6,2014-09-23 16:05:52,2016-04-01 03:42:22,,,,0,1
12311,moment/moment,1938,feature request: A token for Unix offset for moment  milliseconds    x  ,Minor thing  I get my Unix offsets from an XML document and they are strings.      var unixOffset =  1333444938272 ; // milliseconds: 2012 04 03T11:22:18 02:00 moment unixOffset .format  ; // Invalid date moment parseInt unixOffset  10  .format  ; // 2012 04 03T11:22:18 02:00 // my feature request: moment unixOffset   x  .format  ;      I propose a undercast x as opposed to the capital X used for Unix timestamp  but there is a reason to use something else I am of course okay with that  ,doedje,closed,3,2014-09-24 09:24:03,2014-10-07 08:41:14,,,,0,1
12310,moment/moment,1939,Issues with requirejs,I had to change [this line] https://github.com/moment/moment/blob/develop/moment.js L2844  to read:      javascript define function  require  exports  module    ...         Before I could   require   this module.  Anyone else see this issue? ,bmcorser,closed,3,2014-09-24 11:57:56,2014-10-07 07:50:09,,,,0,1
12309,moment/moment,1940,Problem with validating AM/PM,I have encountered a problem with the .isValid when you have LT / A to check to.  Code:    moment value  L LT  .isValid     moment value  L A  .isValid    Input: a / p / m  or capital   Result is both true  even though it should be false since its not am/pm just one letter ,crasyboy42,closed,2,2014-09-24 14:27:51,2014-10-31 03:16:21,,,,0,1
12308,moment/moment,1941,Calendar Time fail,When using Calendar Time some dates fail to output relative to now  ex:  Expected behavior      moment  2014 09 22 11:12:14 02:00  .calendar   //  Monday  Sep 22nd  2014       Fail      moment  2014 09 10 18:37:39 02:00  .calendar   //  09/10/2014      ,natos,closed,1,2014-09-24 21:39:38,2014-09-25 14:22:18,,,,0,1
12307,moment/moment,1942,Equal days in Oct month,I m using a CLNDR.js   http://kylestetz.github.io/CLNDR/    that use momentjs to get the dates   i think   and even in my code and her site  in Oct month shows two 18 day.  Ex: http://i.imgur.com/1jJiOdt.png  clndr.js website   Ex 2: http://i.imgur.com/9YirwO7.png   my website    Any idea  about that? i don t think is a lang error  because it shows in pt br and en. ,leandrogrillo,closed,4,2014-09-25 15:16:25,2014-09-30 17:49:45,,,,0,1
12306,moment/moment,1943,WCF / ASP.NET Date parsing   docs don t match behaviour.,Your [docs] http://momentjs.com/docs/ /parsing/asp net json date/  say:  >  moment  /Date 1198908717056 0700 /  ; // December 28 2007 10:11 PM   But in fact:  > moment  /Date 1198908717056 0700 /  .toString  ; // Sat Dec 29 2007 06:11:57 GMT 0000  I m not sure whether this is a bug or is correct behaviour. The docs at http://msdn.microsoft.com/en us/library/bb412170 28v=vs.110 29.aspx are unclear;  > DateTime values appear as JSON strings in the form of  /Date 700000 0500 /   where the first number  700000 in the example provided  is the number of milliseconds in the GMT time zone  regular  non daylight savings  time since midnight  January 1  1970. The number may be negative to represent earlier times. The part that consists of   0500  in the example is optional and indicates that the time is of the Local kind   that is  should be converted to the local time zone on deserialization. If it is absent  the time is deserialized as Utc. The actual number   0500  in this example  and its sign    or    are ignored.  The last sentence seems to suggest that your behaviour is correct.  In any case  your docs should be updated to reflect what really comes out. ,user24,closed,3,2014-09-25 16:54:02,2014-10-07 07:32:03,,,,0,1
12305,moment/moment,1944,Is there a way to validate time using Moment JS?,Is there a way to validate if the String passed as time is valid using Moment JS?  The operation   moment  2014 12 13 asdasd   YYYY MM DD LT  .isValid     or   moment  asdasd   LT  .isValid     equate to   true   which ideally shouldn t happen.  My application uses multiple languages and it is really not possible for me to come up with a RegExp pattern to validate the string. For example  if I get the time string as    12 12 0    Moment JS should be able to validate this. I checked the source and found that time checking is not that strict in the library. I might have missed something. Please help.  Could something be done using moment  ._lang._longDateFormat.LT to create a RegExp for validating the time string?  Stackoverflow link:http://stackoverflow.com/questions/26040397/is there a way to validate time using moment js ,chiru0307,closed,2,2014-09-26 05:53:44,2014-09-27 16:02:37,,,,0,1
12304,moment/moment,1945,moment instances don t have some locale methods of global moment,Seems that localeData objects of moment doesn t get the functions to get list of month names or weekday names  instead it only gets the function that formats one moment instance.      javascript > moment.months   [  January      February      March      April      May      June      July      August      September      October      November      December  ] > var m = moment  ; > m.months   8 > m.localeData  .months   TypeError: Cannot call method  month  of undefined     at Locale.extend.months     at repl:1:17     at REPLServer.self.eval  repl.js:110:21      at Interface.<anonymous>  repl.js:239:12      at Interface.emit  events.js:95:17      at Interface._onLine  readline.js:202:10      at Interface._line  readline.js:531:8      at Interface._ttyWrite  readline.js:760:14      at ReadStream.onkeypress  readline.js:99:10      at ReadStream.emit  events.js:98:17      ,freiksenet,open,3,2014-09-26 12:28:31,0000-00-00 00:00:00,,Enhancement,,3.0,0,1
12303,moment/moment,1946,[locale] use globalScope instead of window. to bind locales,Moment is bound to globalscope when no AMD or require:      globalScope = typeof global  ==  undefined  ? global : this       The else case for the locales but uses the window object directly.       factory window.moment ; // Browser global      When using moment on server side locales cannot be loaded.  Maybe the same globalScope detection could be used for the locales too? ,mcbain,closed,10,2014-09-26 12:39:10,2016-04-08 12:01:49,,,,0,1
12302,moment/moment,1947,Add / subtract workdays,Hey   I needed a way to step over weekends and created a small helper method to achieve this.  Tried to make it into a pull request  but found the code a bit intimidating on the first sight  so thought I should ask first if this is something that has its place in the library?  Ideally I guess it should be available as moment.add 2   workdays   or so.  Let me know if this is useful or maybe already covered somehow?  JSfiddle demo: http://jsfiddle.net/dain/5xrr79h0/      js   moment.fn.addWorkdays = function  days        var increment = days / Math.abs days ;     var date = this.clone  .add Math.floor Math.abs days  / 5    7   increment   days  ;     var remaining = days   5;     while remaining  = 0          date.add increment   days  ;       if date.isoWeekday    == 6    date.isoWeekday    == 7          remaining  = increment;           return date;    ;     ,daaain,closed,21,2014-09-26 16:36:54,2016-12-30 19:18:23,,New Feature,,,0,1
12301,moment/moment,1948,Please .npmignore anything that s not needed for production,I m pretty sure min and benchmarks are not needed in production. :  They just bloat project dependencies  install time  use bandwidth  etc.  You could either use the [package.json] https://www.npmjs.org/doc/files/package.json.html   files  property to whitelist files for production or .npmignore to blacklist unneeded ones.  For more info on .npmignore and an automatic generator see https://github.com/inikulin/dmn ,MarcDiethelm,closed,2,2014-09-27 12:54:58,2014-10-07 06:00:56,,,,0,1
12300,moment/moment,1949,isBefore or Constructor problems?,Minor or something  but I think that  following time should be invalid? This can be also by design like this? Also is the 24:00 valid? or Should it be 23:59:59?                  var startTime = moment  0001 01 01 07:00  ;             var endTime = moment  0001 01 01 99:00  ;  //here is the problem             var stepMinutes = 15;              while  startTime.isBefore endTime                     startTime.add stepMinutes   m  ;                 console.log startTime.format  HH:mm   ;                       Thank you for the library ,saturation,closed,1,2014-09-27 16:21:45,2014-09-30 17:57:15,,,,0,1
12299,moment/moment,1950,Fix parsing of meridiem in locales that have meridiem,There were many locales that supported meridiem output  but did not support parsing  meridiemParse and isPM locale keys . Also some locales can not be parsed with a simple isPM function  because the variants are not different around noon.  A new isPM function  with new name    fixPM  is needed that also takes an hour and returns whether you should add 12 hours or not. ,ichernev,closed,0,2014-09-27 21:59:07,2014-12-28 16:28:12,,,2.9,1,1
12298,moment/moment,1951,Add ordinalParse to all locales,This fixes  1683  This is the test plan:   format then strict parse on all languages   format then parse on all languages   parse number  not ordinal  on all languages ,ichernev,closed,4,2014-09-28 21:41:56,2014-10-01 14:16:46,,,,1,1
12297,moment/moment,1952,New implementation of isBefore/isSame/isAfter,This has been discussed in  1877 and  1772.  I need to add some tests. The existing ones pass though :  ,ichernev,closed,0,2014-09-28 22:02:38,2014-11-17 06:22:36,,,,1,1
12296,moment/moment,1953,Unified interface for locale functions between global moment and moment instances,Moved months Short   weekdays Short Min  to localeData  made the originals call the localeData methods. Renamed original methods that get single month or weekdays names from plural to singular. Updated localeData set so that locale definitions with months/weekdays would continue to work.  Fixes  1945  ,freiksenet,closed,10,2014-09-29 10:58:09,2016-04-02 01:17:03,,,,1,1
12295,moment/moment,1954,Locale isn t working,Hi there   I ve been trying to change the locale  using the moment library  but it doesn t seem to work. It only returns the default locale:  en .  Any suggestion?  P.S.: Sorry in the advance  in case this issue was already reported  I made a quick search  and didn t find it. ,nffdiogosilva,closed,6,2014-10-01 10:37:25,2014-10-14 06:20:30,,,,0,1
12294,moment/moment,1955,99 tests failed. isBefore:is before month  172.9  isSame:is same month  182.7  endStartOf:start of quarter  279.4  endStartOf:start of quarter  279.5  endStartOf:start of quarter  279.6  endStartOf:start of quarter  279.7  endStartOf:end of quarter  280.7  locale:af:format month  375.4  locale:ar ma:format month  396.4  locale:ar sa:format month  417.4  locale:ar:format month  438.7  locale:ar:format month  438.8  locale:az:format month  459.4  locale:be:format month  481.4  locale:be:format month case  482.7  locale:be:format month case  482.8  locale:bg:format month  503.4  locale:bn:format month  524.4  locale:bo:format month  546.4  locale:br:format month  568.4  locale:bs:format month  582.4  locale:ca:format month  602.4  locale:cs:format month  623.4  locale:cv:format month  646.4  locale:cy:format month  667.4  locale:da:format month  687.4  locale:de at:format month  704.4  locale:de:format month  724.4  locale:el:format month  745.4  locale:en au:format month  766.4  locale:en ca:format month  787.4,    Client info      Date String   : Thu Oct 02 2014 12:19:11 GMT 0300  Jordan Daylight Time  Locale String : 10/2/2014 12:19:11 PM Offset        :  120 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/37.0.2062.124 Safari/537.36            isBefore:is before month  172.9   start of next month      javascript // Expected true // Actual   false false == true            isSame:is same month  182.7   start of next month      javascript // Expected false // Actual   true true == false            endStartOf:start of quarter  279.4   keep the quarter      javascript // Expected 2 // Actual   1 1 == 2            endStartOf:start of quarter  279.5   strip out the month      javascript // Expected 3 // Actual   2 2 == 3            endStartOf:start of quarter  279.6   strip out the day      javascript // Expected 1 // Actual   31 31 == 1            endStartOf:start of quarter  279.7   strip out the hours      javascript // Expected 0 // Actual   23 23 == 0            endStartOf:end of quarter  280.7   set the hours      javascript // Expected 23 // Actual   22 22 == 23            locale:af:format month  375.4   April Apr      javascript // Expected April Apr // Actual   Maart Mar  Maart Mar  ==  April Apr             locale:ar ma:format month  396.4                    javascript // Expected             // Actual                         ==                          locale:ar sa:format month  417.4                    javascript // Expected             // Actual                         ==                          locale:ar:format month  438.7                    javascript // Expected             // Actual                         ==                          locale:ar:format month  438.8                    javascript // Expected             // Actual                         ==                          locale:az:format month  459.4   aprel apr      javascript // Expected aprel apr // Actual   mart mar  mart mar  ==  aprel apr             locale:be:format month  481.4                      javascript // Expected               // Actual                             ==                            locale:be:format month case  482.7   1                javascript // Expected 1           // Actual   31           31           ==  1                       locale:be:format month case  482.8   1               javascript // Expected          // Actual                     ==                       locale:bg:format month  503.4                  javascript // Expected           // Actual                       ==                        locale:bn:format month  524.4                   javascript // Expected            // Actual                             ==                         locale:bo:format month  546.4                              javascript // Expected                       // Actual                                                     ==                                    locale:br:format month  568.4   Ebrel Ebr      javascript // Expected Ebrel Ebr // Actual   Meurzh Meu  Meurzh Meu  ==  Ebrel Ebr             locale:bs:format month  582.4   april apr.      javascript // Expected april apr. // Actual   mart mar.  mart mar.  ==  april apr.             locale:ca:format month  602.4   abril abr.      javascript // Expected abril abr. // Actual   mar  mar.  mar  mar.  ==  abril abr.             locale:cs:format month  623.4   duben dub      javascript // Expected duben dub // Actual   b ezen b e  b ezen b e  ==  duben dub             locale:cv:format month  646.4                javascript // Expected         // Actual                     ==                      locale:cy:format month  667.4   Ebrill Ebr      javascript // Expected Ebrill Ebr // Actual   Mawrth Maw  Mawrth Maw  ==  Ebrill Ebr             locale:da:format month  687.4   april apr      javascript // Expected april apr // Actual   marts mar  marts mar  ==  april apr             locale:de at:format month  704.4   April Apr.      javascript // Expected April Apr. // Actual   M rz Mrz.  M rz Mrz.  ==  April Apr.             locale:de:format month  724.4   April Apr.      javascript // Expected April Apr. // Actual   M rz Mrz.  M rz Mrz.  ==  April Apr.             locale:el:format month  745.4                     javascript // Expected              // Actual                             ==                           locale:en au:format month  766.4   April Apr      javascript // Expected April Apr // Actual   March Mar  March Mar  ==  April Apr             locale:en ca:format month  787.4   April Apr      javascript // Expected April Apr // Actual   March Mar  March Mar  ==  April Apr             locale:en gb:format month  808.4   April Apr      javascript // Expected April Apr // Actual   March Mar  March Mar  ==  April Apr             locale:en:format month  829.4   April Apr      javascript // Expected April Apr // Actual   March Mar  March Mar  ==  April Apr             locale:eo:format month  850.4   aprilo apr      javascript // Expected aprilo apr // Actual   marto mar  marto mar  ==  aprilo apr             locale:es:format month  871.4   abril abr.      javascript // Expected abril abr. // Actual   marzo mar.  marzo mar.  ==  abril abr.             locale:et:format month  892.4   aprill apr      javascript // Expected aprill apr // Actual   m rts m rts  m rts m rts  ==  aprill apr             locale:eu:format month  913.4   apirila api.      javascript // Expected apirila api. // Actual   martxoa mar.  martxoa mar.  ==  apirila api.             locale:fa:format month  934.4                    javascript // Expected             // Actual                         ==                          locale:fi:format month  955.4   huhtikuu huhti      javascript // Expected huhtikuu huhti // Actual   maaliskuu maalis  maaliskuu maalis  ==  huhtikuu huhti             locale:fo:format month  976.4   apr l apr      javascript // Expected apr l apr // Actual   mars mar  mars mar  ==  apr l apr             locale:fr ca:format month  993.4   avril avr.      javascript // Expected avril avr. // Actual   mars mars  mars mars  ==  avril avr.             locale:fr:format month  1013.4   avril avr.      javascript // Expected avril avr. // Actual   mars mars  mars mars  ==  avril avr.             locale:gl:format month  1032.4   Abril Abr.      javascript // Expected Abril Abr. // Actual   Marzo Mar.  Marzo Mar.  ==  Abril Abr.             locale:he:format month  1053.4                   javascript // Expected            // Actual                     ==                         locale:hi:format month  1074.4               .      javascript // Expected             . // Actual                             ==              .             locale:hr:format month  1096.4   travanj tra.      javascript // Expected travanj tra. // Actual   o ujak o u.  o ujak o u.  ==  travanj tra.             locale:hu:format month  1118.4    prilis  pr      javascript // Expected  prilis  pr // Actual   m rcius m rc  m rcius m rc  ==   prilis  pr             locale:hy am:format month  1141.4                  javascript // Expected           // Actual                       ==                        locale:hy am:format month case  1142.7   1             javascript // Expected 1        // Actual   31        31        ==  1                    locale:hy am:format month case  1142.8   1            javascript // Expected       // Actual               ==                    locale:hy am:format month short case  1143.7   1          javascript // Expected 1     // Actual   31      31      ==  1                 locale:hy am:format month short case  1143.8   1          javascript // Expected     // Actual             ==                  locale:id:format month  1164.4   April Apr      javascript // Expected April Apr // Actual   Maret Mar  Maret Mar  ==  April Apr             locale:is:format month  1185.4   apr l apr      javascript // Expected apr l apr // Actual   mars mar  mars mar  ==  apr l apr             locale:it:format month  1206.4   aprile apr      javascript // Expected aprile apr // Actual   marzo mar  marzo mar  ==  aprile apr             locale:ja:format month  1225.4   4  4       javascript // Expected 4  4  // Actual   3  3   3  3   ==  4  4              locale:ka:format month  1246.4                   javascript // Expected            // Actual                         ==                         locale:km:format month  1267.4                  javascript // Expected           // Actual                         ==                        locale:ko:format month  1289.4   4  4       javascript // Expected 4  4  // Actual   3  3   3  3   ==  4  4              locale:lb:format month  1309.4   Abr ll Abr.      javascript // Expected Abr ll Abr. // Actual   M erz Mrz.  M erz Mrz.  ==  Abr ll Abr.             locale:lt:format month  1318.4   baland io bal      javascript // Expected baland io bal // Actual   kovo kov  kovo kov  ==  baland io bal             locale:lv:format month  1340.4   apr lis apr      javascript // Expected apr lis apr // Actual   marts mar  marts mar  ==  apr lis apr             locale:mk:format month  1361.4                  javascript // Expected           // Actual                       ==                        locale:ml:format month  1382.4               .      javascript // Expected             . // Actual              .             .  ==              .             locale:mr:format month  1404.4               .      javascript // Expected             . // Actual              .             .  ==              .             locale:ms my:format month  1426.4   April Apr      javascript // Expected April Apr // Actual   Mac Mac  Mac Mac  ==  April Apr             locale:my:format month  1447.4                 javascript // Expected          // Actual                     ==                       locale:nb:format month  1468.4   april apr      javascript // Expected april apr // Actual   mars mar  mars mar  ==  april apr             locale:ne:format month  1489.4               .      javascript // Expected             . // Actual                             ==              .             locale:nl:format month  1511.4   april apr.      javascript // Expected april apr. // Actual   maart mrt.  maart mrt.  ==  april apr.             locale:nn:format month  1533.4   april apr      javascript // Expected april apr // Actual   mars mar  mars mar  ==  april apr             locale:pl:format month  1554.4   kwiecie  kwi      javascript // Expected kwiecie  kwi // Actual   marzec mar  marzec mar  ==  kwiecie  kwi             locale:pt br:format month  1575.4   abril abr      javascript // Expected abril abr // Actual   mar o mar  mar o mar  ==  abril abr             locale:pt:format month  1595.4   abril abr      javascript // Expected abril abr // Actual   mar o mar  mar o mar  ==  abril abr             locale:ro:format month  1615.4   aprilie apr.      javascript // Expected aprilie apr. // Actual   martie mart.  martie mart.  ==  aprilie apr.             locale:ru:format month  1638.4                   javascript // Expected            // Actual                       ==                         locale:ru:format month case  1639.7   1             javascript // Expected 1        // Actual   31        31        ==  1                    locale:ru:format month case  1639.8   1             javascript // Expected        // Actual               ==                     locale:ru:format month short case  1640.7   1          javascript // Expected 1     // Actual   31      31      ==  1                 locale:ru:format month short case  1640.8   1          javascript // Expected     // Actual             ==                  locale:sk:format month  1662.4   apr l apr      javascript // Expected apr l apr // Actual   marec mar  marec mar  ==  apr l apr             locale:sl:format month  1685.4   april apr.      javascript // Expected april apr. // Actual   marec mar.  marec mar.  ==  april apr.             locale:sq:format month  1707.4   Prill Pri      javascript // Expected Prill Pri // Actual   Mars Mar  Mars Mar  ==  Prill Pri             locale:sr cyrl:format month  1728.4            .      javascript // Expected          . // Actual           .          .  ==           .             locale:sr:format month  1749.4   april apr.      javascript // Expected april apr. // Actual   mart mar.  mart mar.  ==  april apr.             locale:sv:format month  1770.4   april apr      javascript // Expected april apr // Actual   mars mar  mars mar  ==  april apr             locale:ta:format month  1791.4                      javascript // Expected               // Actual                                 ==                            locale:th:format month  1811.4                    javascript // Expected             // Actual                             ==                          locale:tl ph:format month  1832.4   Abril Abr      javascript // Expected Abril Abr // Actual   Marso Mar  Marso Mar  ==  Abril Abr             locale:tr:format month  1852.4   Nisan Nis      javascript // Expected Nisan Nis // Actual   Mart Mar  Mart Mar  ==  Nisan Nis             locale:tzm latn:format month  1873.4   ibrir ibrir      javascript // Expected ibrir ibrir // Actual   mar s  mar s   mar s  mar s   ==  ibrir ibrir             locale:tzm:format month  1894.4                    javascript // Expected             // Actual                         ==                          locale:uk:format month  1916.4                     javascript // Expected              // Actual                               ==                           locale:uk:format month case  1917.7   1             javascript // Expected 1        // Actual   31          31          ==  1                    locale:uk:format month case  1917.8   1              javascript // Expected         // Actual                       ==                      locale:uz:format month  1937.4                   javascript // Expected            // Actual                       ==                         locale:vi:format month  1958.4   th ng 4 Th04      javascript // Expected th ng 4 Th04 // Actual   th ng 3 Th03  th ng 3 Th03  ==  th ng 4 Th04             locale:zh cn:format month  1978.4      4       javascript // Expected    4  // Actual      3      3   ==     4              locale:zh tw:format month  2000.4      4       javascript // Expected    4  // Actual      3      3   ==     4       ,MohammadYounes,closed,1,2014-10-02 09:16:32,2015-07-12 06:54:07,,Troubleshooting,Unit Test Failed,,,0,1
12293,moment/moment,1956,Fix internal makeAs function to work properly for different time zones,Fix internal makeAs function to work properly for different time zones moment/moment timezone 127   makeAs  function didn t change the timezone of  input  to match  model . Instead  it just updated the  offset   but with different time zone  offset  will be restored with any subsequent call to  updateOffset . Correct behavior should be creading a copy of  model   it will be with proper time zone  and set timestamp from  input . Then  we need to update offset from  model   it is firstly set to zero  and then updated by call to  zone  function to preserve correct timestamp . And finally  call to  updateOffset  is needed for moment timezone to update offset in case of different offset in the same time zone for  input  and  model  moments. ,zgmnkv,closed,8,2014-10-02 11:56:28,2014-11-17 04:15:30,,,,1,1
12292,moment/moment,1957,Create rw.js,Add Rwandan  Kinyarwanda  language. This translation is only partially complete. I full translation should be complete in a few days.  ,edgartheunready,closed,4,2014-10-02 18:15:42,2014-12-22 15:07:21,,Needs tests,,,1,1
12291,moment/moment,1958,Transform to ES6 modules,For maintainers:   Do you have any plan to transform the source code to leverage ES6 modules/import/export? Of course  keep transpiling those modules to regular commonJS / AMD / Globals versions.  If you are ok with the idea  I would be happy to help. ,cibernox,closed,5,2014-10-03 21:02:36,2014-10-17 08:30:14,,,,0,1
12290,moment/moment,1959,minDate affecting ranges data,When specifying a date for minDate which is prior to the range s start date  when selecting the range  its start date will be changed to the minDate s value. ,RanGold,closed,2,2014-10-05 12:00:25,2014-10-07 05:00:35,,,,0,1
12289,moment/moment,1960,added formatToken  x  for unix offset in milliseconds  1938,I added the code for  x  as a formatToken for both creating and formatting... I added the unittests. Hope it is sufficient like it is now...  I did have a problem with the name  unix offset  as it might be confusing with a timezone offset  but I am not a native english speaker so I just included  in milliseconds  everywhere I could. And the function  unixms  might not be needed  it s probably better to use valueOf  . But I leave that decision making up to you.... ,doedje,closed,1,2014-10-06 13:22:42,2014-11-17 05:43:47,,,2.8.4,1,1
12288,moment/moment,1961,Add a script to prepare moment for npm publish,Remove unnecessary files from repo for npm publishing. Fixes  1948. ,ichernev,closed,0,2014-10-07 06:00:38,2014-11-17 07:37:20,,,,1,1
12287,moment/moment,1962,Recognized standards for format strings?,Hello  I m working on a C  port of MomentJS  and I am thinking of adding a new formatting string which would allow the outputting of  today    tomorrow    yesterday    next week   etc.  I can very easily add this feature  but I wanted to ask if you have any convention when choosing a letter for each format string? Are there any standards you follow? ,vitamink,closed,2,2014-10-07 07:35:18,2014-10-14 10:05:42,,,,0,1
12286,moment/moment,1963,Use anonymous module when exporting via AMD,This has been requested over and over  1939  779  1676   I think its safe to do. We ll just mention for people to add pathConfig in case the main file is in a different location and they want to use locales. ,ichernev,closed,3,2014-10-07 07:49:59,2014-12-24 21:36:31,,,2.9,1,1
12285,moment/moment,1964,Support  x  token for milliseconds,Requested by  1938 ,ichernev,closed,4,2014-10-07 08:41:00,2014-10-09 09:25:57,,,,1,1
12284,moment/moment,1965,Support 24:00:00.000 to mean next day  at midnight.,As requested in  1174 ,ichernev,closed,2,2014-10-07 10:20:49,2014-11-17 06:31:00,,,,1,1
12283,moment/moment,1966,handle i18n for component 1.x,I open this issue due to closing  1731  Summary:   component provides a require implementation and then using a locale this line will be executed: [line 9] https://github.com/moment/moment/blob/2b685e46dd7565b942cef5769c782b905887d9f6/locale/af.js L9   So it seems that it s only used for Node.js  and maybe browserify . For component it doesn t work  because the locales are not listed as  scripts  in the  component.json   if they would  the require path would be resolved at build time  but there is another issue  because of a dynamic require in moment.js: [line 769] https://github.com/moment/moment/blob/1f22b266c2411d1e06d7e518d5dd866fa40d107d/moment.js L769          There are some solutions to get i18n working in component: 1.   Put all language files into  scripts  of  component.json  and remove the dynamic require  this is acutally what was changed in  1731. But it was rejected  and furthermore it s not a good idea to put all language files into the build output  because you may want to keep the output small and use only one language per page request.   2.   https://github.com/moment/moment/pull/1731 issuecomment 57089309 solution of @anton ryzhov need a manual copy step. And it s like   1.   not dynamic if you want to support multiple languages.   3.     current behaviour:   Only moment is registed as a component script  the locales are just copied as files into the build directory. But you need to expose moment to get the locale working. And this is very ugly  because you need to put this line between embed the build and the locale file.              html    <script src= build/build.js ></script>    <script>      window.moment = require  moment  ; // need to pollute it to window to use some locale    </script>    <script src= build/moment/moment/2.8.3/locale/de.js ></script>        4.   Change in each locale file the require part:        js   else if  typeof exports ===  object           module.exports = factory require  moment   ; // CommonJS: node.js  component  browserify        Because component uses its own namespacing to require remote modules  we need to create an alias in the  moment.js  files. Then we can do  require  moment    for every CommonJS environment: node  component and browserify.      js    function  factory        // create component alias for  moment       require.register  moment   function exports  module    module.exports = require.latest  moment moment    ;      if  typeof define ===  function     define.amd            define [ moment ]  factory ; // AMD       else if  typeof exports ===  object             module.exports = factory require  moment   ; // CommonJS: node  component  browserify       else           factory window.moment ; // Browser global            With this solution you are flexible to include any languages  just one or multiple  per request . And you don t need to expose moment to the window object. We can do this:      html   <script src= build/build.js ></script>   <script src= build/moment/moment/2.8.3/locale/de.js ></script>      or load multiple locals  the last script set the global locale :      html   <script src= build/build.js ></script>   <script src= build/moment/moment/2.8.3/locale/de.js ></script>   <script src= build/moment/moment/2.8.3/locale/ru.js ></script>      And you can still change the global locale via  moment.locale  en    to locales  which are already loaded  in this case  en  is loaded by default  ,timaschew,open,9,2014-10-07 11:59:12,0000-00-00 00:00:00,,Enhancement,,,0,1
12282,moment/moment,1967,Fix catalan ordinals,As in https://ca.wikipedia.org/wiki/Numerals_en_catal C3 A0 Ordinals  Is there a way to let the ordinal formatting function know if the moment is formatting week or day? In Catalan week  setmana  is feminine while day  dia  is masculine  and ordinal suffix could be changed accordingly for week numbers ,msonsona,closed,4,2014-10-07 12:27:10,2014-11-17 05:34:13,,,2.8.4,1,1
12281,moment/moment,1968,<moment 45 minutes ago>.from moment    // returns  an hour ago ,Thanks for the great library.  One issue I ve run into is that from   will round durations >= 45 minutes up to an hour. Other units  seconds  days etc.  are rounded as well. In our application we d like to be a bit more precise than this. I believe that the function listed below does the rounding. What would be an appropriate solution to optionally remove rounding? Thanks           function relativeTime milliseconds  withoutSuffix  lang            var seconds = round Math.abs milliseconds  / 1000               minutes = round seconds / 60               hours = round minutes / 60               days = round hours / 24               years = round days / 365               args = seconds < 45    [ s   seconds]                    minutes === 1    [ m ]                    minutes < 45    [ mm   minutes]                    hours === 1    [ h ]                    hours < 22    [ hh   hours]                    days === 1    [ d ]                    days <= 25    [ dd   days]                    days <= 45    [ M ]                    days < 345    [ MM   round days / 30 ]                    years === 1    [ y ]    [ yy   years];         args[2] = withoutSuffix;         args[3] = milliseconds > 0;         args[4] = lang;         return substituteTimeAgo.apply     args ;           ,abirmingham,closed,4,2014-10-07 18:50:54,2014-10-14 08:36:05,,,,0,1
12280,moment/moment,1969,Pivot year is arbitrary and hardcoded,The pivot year for momentjs is arbitrarily defined at  68 [1]  it should be configurable.  [1] https://github.com/moment/moment/blob/2b685e46dd7565b942cef5769c782b905887d9f6/moment.js L2060 2062 ,fernandezpablo85,closed,6,2014-10-07 22:17:25,2014-10-07 23:07:35,,,,0,1
12279,moment/moment,1970,Encoding issue while integrating library,For languages such as Japanese/Chinese/Korean  faced encoding issue with IE and junk characters were shown sometimes.  A simple charset= UTF 8  in the script tag solved the problem. Maybe the documentation could be changed a bit  so that it d help newbies like me.  SO link: http://stackoverflow.com/questions/26215002/encoding issue while integrating moment js library ,chiru0307,closed,5,2014-10-08 05:49:25,2017-10-07 23:18:03,,Documentation,Up-For-Grabs,,,0,1
12278,moment/moment,1971,Fix for Italian calendar time translation for Sunday weekday,fix for lastWeek calendar time for  Sunday  In Italian  Sunday is a feminine noun and requires a different traslation for  Last dddd  thanks ,skakz,closed,4,2014-10-09 07:37:38,2014-11-17 05:33:24,,,2.8.4,1,1
12277,moment/moment,1972,add kazakh locale;,Added native language of Kazakhstan  originated from turks . ,kuka,closed,6,2014-10-09 16:49:32,2015-11-09 05:40:51,,Language,Needs tests,,,1,1
12276,moment/moment,1973,Moment ISO parsing invalid strings validly,Hi   I noticed that this:  > a = moment  1970 12 25  moment.ISO_8601 .toDate   > produces  > Date 1970 12 25T06:00:00.000Z >  > a = moment  1970 12 45  moment.ISO_8601 .toDate   > produces > Date 1971 01 14T06:00:00.000Z  Shouldn t it throw up if the date string doesn t make sense  e.g. references the 45th day of December? ,crertel,closed,1,2014-10-09 20:07:11,2014-10-10 08:11:17,,,,0,1
12275,moment/moment,1974,Locale export for meteor server environment,The global scope might be node   global   or  this   window or other   so detect in all language files. Implements  1946. ,ichernev,closed,2,2014-10-10 08:30:02,2014-11-17 06:34:36,,,,1,1
12274,moment/moment,1975,While parsing a string timezone is different from current,Docs says  > Unless you specify a timezone offset  parsing a string will create a date in the current timezone.  But when date is over DST change time  its timezone is different from current.      js moment  2014 09 10 12:00  .zone   //  180 moment  2014 12 10 12:00  .zone   //  120 moment.version //  2.8.3       Is it a bug? ,printercu,closed,1,2014-10-10 09:01:27,2014-10-10 09:40:41,,,,0,1
12273,moment/moment,1976,Troubles using moment.js  1.8.3 and earlier  with mocha/karma,Hi all   Using moment.js on both back and front end  I have troubles using it on my karma/mocha tests   on my front end  I m using angular.js   error is always the same :  moment is not defined    by modifying a bit of the code in moment.js:   // CommonJS module is defined     if  hasModule    to      if  hasModule    typeof module  ==  function      my test work  my UI still work  but I m not sure of the whole impact of this moficiation  so I ll leave the final solution to you guys   ,HugoCapocci,closed,2,2014-10-10 10:12:54,2015-12-18 21:57:18,,,,0,1
12272,moment/moment,1977,Change Month names to persian,Change month names in fa localization so the Persian guys can actually use this in their project. ,Cloze,closed,0,2014-10-11 18:30:09,2014-10-11 18:35:58,,,,1,1
12271,moment/moment,1978,Change Month names to persian,change month names so the persian guys like me can actually use this in their project ,Cloze,closed,4,2014-10-11 18:38:02,2015-01-17 09:37:43,,Needs tests,,,1,1
12270,moment/moment,1979,parsing from format containing weeks is buggy,hi. this is what i got in firefox.  > > moment  ._d; > Date 2014 10 12T04:33:49.502Z >  > > moment  .format  GG W E  ; >  14 41 7  >  > > moment  moment  .format  GG W E     GG W E  ._d; > Date 2014 10 11T17:00:00.000Z >  > > moment  .format  gg w e  ; >  14 42 0  >  > > moment  moment  .format  gg w e     gg w e  ._d; > Date 2014 10 11T17:00:00.000Z  as you can see  12 october after serializing / parsing becomes 11 october. both for ISO and localized week formats.  i checked if it is only sundays issue   no  same for wednesdays. ,tomarcafe,closed,1,2014-10-12 04:44:14,2014-10-12 04:57:50,,,,0,1
12269,moment/moment,1980,9 is returned as month for  moment  2014 10 24   YYYY MM DD  ;,First i want to say thanks for this great javascript libary  but i dont understand why my code returns 9 as month:       >> var now = moment  2014 10 24   YYYY MM DD  ;  >> now.month     >> 9      Here the example: http://jsfiddle.net/r42jg/284/ ,emmanuelmillionaer,closed,2,2014-10-12 22:03:02,2014-10-14 08:49:59,,,,0,1
12268,moment/moment,1981,Hour with minute,Hi   I have the following issue  when I get the hours  passing the seconds  see below:      var hour = moment.duration 81000   seconds  .asHours  ; // 22.5 moment hour .format  HH:mm  ; // 22:00      The format function returns wrong hour  cause they subtract 30 minutes represented by .5 in 22.5  I m not sure if this is a bug or wrong use  but I can t find a example in docs ,leonardosalles,closed,2,2014-10-14 14:19:08,2014-10-16 00:57:35,,,,0,1
12267,moment/moment,1982,Can t copy text on moment homepage,On moment homepage  http://momentjs.com/  which is an invaluable quick doc  it is NOT possible to copy/cut a snippet of code.  Every second  guess what may be the cause ;  the selection is cleared. This is too short to have the time to copy a line of code.  This is VERY annoying :goberserk: :feelsgood: :finnadie:  Can it be fixed ? ,Offirmo,closed,5,2014-10-14 15:19:28,2014-10-17 05:27:47,,,,0,1
12266,moment/moment,1983,Falling back to browser when parsing UTC can give a local time,When parsing with  moment.utc s     moment might fall back to the browser s parser.  When it does  the result is local time  not utc.  Example:      moment.utc  10/14/2014 5:30:00 AM  .format        On my machine  in the US Pacific time zone  it returns   2014 10 14T12:30:00 00:00  .  Even though the offset is zero   the time has been shifted by my local 7 hour offset.  [Found on Stack Overflow] http://stackoverflow.com/q/26350652/634824 . ,mj1856,closed,6,2014-10-14 17:18:26,2014-11-17 18:12:57,,Bug,,,0,1
12265,moment/moment,1984,Add localization for Swahili,Any chance of this? I don t have the translations myself and will keep looking  but if anyone can find an appropriate localization  it would be helpful for my current project. ,saraid,closed,5,2014-10-14 21:05:09,2016-01-07 19:54:41,,Language,Up-For-Grabs,,,0,1
12264,moment/moment,1985,Change format of japanese minutes to  mm ,Change format of japanese minutes to  mm  ,hermanjunge,closed,5,2014-10-15 02:36:07,2015-07-04 16:28:23,,Language,,,1,1
12263,moment/moment,1986,the zone function always returns local inverted tz value,so let s start with example:  var d = moment  2014 10 15T00:00:00Z 0400    YYYY MM DD THH:mm:ss ZZZ  ;  When I invoke this:  d.zone  ;  i get   180   but my current timezone is GMT  03:00 so it supposed to be  240. Anyway if it uses local tz then why it shows  180 but not 180  its GMT  3 so I expect 180 in the output. Then  also this  d.format    outputs   2014 10 15T07:00:00 03:00   but I created object with specific tz  0400 and it supposed to show formated output like this   2014 10 15T00:00:00Z 0400  but not for my local tz  and for the local time I think I must be like this:  d.local  .format   . Please shed some light on those stuff because I completely don t understand what s going on? :   ,AndrewEastwood,closed,1,2014-10-15 10:38:05,2015-05-08 20:07:31,,,,0,1
12262,moment/moment,1987,Call a function at specific time,Something like:      js require  moment    19:40    hh:mm   function      console.log 1 ;          Then  at  19:40    console.log  will be called. Is something like this implemented already? ,IonicaBizau,closed,1,2014-10-15 16:37:53,2014-10-16 00:48:49,,,,0,1
12261,moment/moment,1988,startOf/endOf  week   are not locale aware,I updated from 2.0 to 2.1  tried 2.7 and this issue is still present.         moment.lang  en             week:               dow: 1 // Monday is the first day of the week.             ;      moment  .startOf  week  .format  dddd  ; // Sunday      I cannot update the library to much  the project is 1 year old. ??  Even changed in moment.js  the frist day is still Sunday.            _week:           dow: 1  // Sunday is the first day of the week.         doy: 6  // The week that contains Jan 1st is the first week of the year.             This is really important   ,puppeteer701,closed,1,2014-10-16 13:59:37,2014-10-16 15:00:13,,,,0,1
12260,moment/moment,1989,No relative require in locales,This PR rewrote all  require  ../moment    to  require  moment     The reason is to decouple the locales from the moment.js file.  This could cause problems in browser environment  because locale files are not always bundled with moment.js  so there should be no relative relation anymore.  In Node.js envirnoment this works fine  because node will lookup moment in the node_modules directory. Also browserify still works.  This makes it easier for tools which use  require  in browser environment to load moment. To get it working the namespace/path  moment  must be registered  instead of  ../moment  ,timaschew,closed,11,2014-10-16 16:40:14,2015-11-09 06:16:47,,Loading,,,1,1
12259,moment/moment,1990,startOf  hour   advances to the next hour during DST fall back,When in DST timezone   .startOf  hour    advances to the next hour during DST fall back  [screen shot 2014 10 16 at 3 52 37 pm] https://cloud.githubusercontent.com/assets/304902/4669401/0226112c 556e 11e4 803a 81544b80f894.png  ,leonyu,open,17,2014-10-16 19:54:16,0000-00-00 00:00:00,,Bug,DST,,,0,1
12258,moment/moment,1991,.diff does not support  quarter ,.diff does not support  quarter   [screen shot 2014 10 16 at 3 55 31 pm] https://cloud.githubusercontent.com/assets/304902/4669460/6996d2a6 556e 11e4 90a5 b4e3fe8761b5.png  ,leonyu,closed,2,2014-10-16 19:55:51,2014-12-29 09:26:21,,Bug,,,0,1
12257,moment/moment,1992,Fix strict month parsing of abbreviated/full months,Fixes  1930 ,ichernev,closed,0,2014-10-17 09:07:55,2014-11-17 06:39:26,,,,1,1
12256,moment/moment,1993,moment.subtract should be moment.substract,In version 2.8.3  i use it from npm   moment.substract does not exist. Probably there is a typo  as i find it as moment.subtract. ,radubrehar,closed,2,2014-10-20 16:50:46,2014-10-20 16:52:33,,,,0,1
12255,moment/moment,1994,Daylight saving time in Brazil,In USA daylight time saving changes at 2am  in Brazil it happens at midnight. That said  when I m in S o Paulo timezone and instantiate the first day of DST I get the wrong date:   moment  2014 10 19  .format  ;  outputs   2014 10 18T23:00:00 03:00   instead of  what I think is correct     2014 10 19T01:00:00 02:00   ,gfpacheco,closed,3,2014-10-20 16:53:06,2014-10-22 16:52:29,,,,0,1
12254,moment/moment,1995,I do not know how to describe the question,    javascript var t = moment  ; var n = t.startOf  day  .toDate  ; var m = t.endOf  day  .toDate   ; n === m   // true n.getHours   === m.getHours     //  true  //  l think the n   m should be Individual Object     ,rambo-panda,closed,2,2014-10-21 06:21:08,2014-10-21 06:30:11,,,,0,1
12253,moment/moment,1996,Error with time this week end ,I all i found a small bug with time this week end  http://jsfiddle.net/kL0pkhcy/2/  if you create  this: moment  26/10/2014   DD/MM/YYYY  .add moment.duration  11:00   ; it return : Sun Oct 26 2014 10:00:00 GMT 0100  but it will be : Sun Oct 26 2014 11:00:00 GMT 0100 ,xibman,closed,1,2014-10-21 10:25:02,2014-10-22 04:52:12,,,,0,1
12252,moment/moment,1997,Displaying localized time with seconds,The format method has the new  LT  formatter to display the localized time   ie. 1:12PM   Is it possible to have another formatter wich give the localized time with seconds ?  ie. format  LTT   would give as result : 1:12:34PM   Regards ,jano42,closed,4,2014-10-21 12:25:27,2016-04-02 01:56:49,,,,0,1
12251,moment/moment,1998,add Semester  6 months  time unit,Added the semester time unit it s a period of 6 month January to June And July to December ,RelikDream,closed,4,2014-10-21 15:35:42,2014-11-29 20:02:37,,,,1,1
12250,moment/moment,1999,.toISOString   is a lot slower than .toDate  .toISOString  ,Hello nice people that created a wonderful library   I m wondering why .toISOString   does not delegate to the native Date s .toISOString   and if a pull request would be welcomed that fell back to Date s native implementation if available.  As far as slowness goes  here is an example jsperf  where momentObj.toDate  .toISOString   is almost two orders of magnitude faster than momentObj.toISOString  :  http://jsperf.com/date formatting isostring  Thank you again for the library  ,elliotf,closed,3,2014-10-21 20:48:47,2014-12-19 07:58:34,,,,0,1
12249,moment/moment,2000,Display localized time with seconds  Improvement requested in  1997 ,A few notes: This has come up several times before  see:  991   1288   Thanks to baryon for the Japanese and Chinese translations  see  1802 .  Here is how the time 3:25:50 PM would show in all languages/cultures:  The vast majority of languages/cultures use 15:25:50   with the exception of:  3:25:50 PM  > en au  en ca  en  ka 15.25.50  > fi  id  ms my  nb   :  :    > ar sa  ar 15:25:50 Uhr  > de at  de        :  :        > bn          :  :    > bo 3e25:50 PM  > br 3:25:50     > el   :  :    > fa        :  :        > hi   3 25 50   > ja    3  25  50   > ko 15:25:50 Auer  > lb 15:25:50 val.  > lt              3:25:50      > ml         :  :          > mr   :  :    > my           :  :        > ne 15        25      50          > th   3 25 50   > zh cn   3 25 50   > zh tw  For Breton  br   CLDR does not recognise  e  has the hour separator. It indicates that the time should be [15:25  not 15e25] http://www.unicode.org/cldr/charts/26/summary/br.html ; See  Formats   Standard   Time Formats  on that page.  Catalan  ca  and Galician  gl  did not have any of the standard formatting tests; someone familiar with the language should give it a once over to make sure what was there is correct.  Thai  th  is based off of Google Translate; someone familiar with the language should give it a once over.   Please note  this is my first pull request. Feel free to criticise. ,mattgrande,closed,2,2014-10-21 23:47:00,2014-11-17 05:27:59,,,2.8.4,1,1
12248,moment/moment,2001,Handle moment.utc s  fallback,Fixes  1983  Note   I attempted to write a test for this  but it s difficult since we normally swap out the  createFromInputFallback  function in the unit tests. ,mj1856,closed,1,2014-10-22 04:43:42,2014-11-17 05:20:13,,,2.8.4,1,1
12247,moment/moment,2002,Accept  date  when creating moment with object,Fixes  1927 ,ichernev,closed,0,2014-10-22 17:19:04,2014-11-17 06:52:58,,,,1,1
12246,moment/moment,2003,Detect hours above 12 with h/hh tokens,Update the docs about parsingFlags to include bigHour key. Fixes  1734 ,ichernev,closed,0,2014-10-22 18:01:39,2014-11-17 06:54:23,,,,1,1
12245,moment/moment,2004,Fix makeAs to work with zoned moments,Clone the model to get all plugin data  like zones   than move the time so that it matches the input and recompute the timezone.  Closes  1952   1956   1772 ,ichernev,closed,0,2014-10-22 18:53:06,2014-11-17 05:16:51,,,2.8.4,1,1
12244,moment/moment,2005,Possible bug when using add week ,http://jsfiddle.net/qfhqteze/2/      var startMoment = moment  2014 15    GGGG WW  ; var range = moment  2014 20    GGGG WW  .diff startMoment   weeks  ;                         for var i = 0; i < range; i                                  console.log  i ;                             document.getElementById  res  .insertAdjacentHTML  beforebegin   startMoment.add 1   weeks  .format  GGGG [W]WW       <br>  ;                              console.log   ;                                result will be: 2014 W16  2014 W17  <b>2014 W22</b> 2014 W19  2014 W20  ,Ost-max,closed,3,2014-10-23 10:37:28,2016-04-02 01:59:23,,,,0,1
12243,moment/moment,2006,Strip  Uhr  of localized german time,Is it possible to strip the  Uhr  part of the LT format option which is shown when the locale is german  de . In my opinion the  Uhr  is not part of the time like  AM / PM  would be   but only an addition which is sometimes added.      I don t know but maybe it is specified in some standard  ISO  DIN   but it is definitely not always useful. ,kleinph,closed,5,2014-10-23 13:21:32,2015-06-09 23:13:07,,,,0,1
12242,moment/moment,2007,locale is not loaded automatically with browserify,With browserify  http://browserify.org/  setting locale does not work.      js var moment = require  moment  ; moment.locale  cs  ; console.log moment.locale   ; // en      I have found this workaround:      js var moment = require  moment  ; require  moment/locale/cs  ; moment.locale  cs  ; console.log moment.locale   ; // cs      It is probably not easily fixable  but at least it can be mentioned in docs.  ,janmarek,closed,7,2014-10-23 14:10:58,2016-01-30 05:43:21,,Documentation,Up-For-Grabs,,,0,1
12241,moment/moment,2008,Fix endOf handling of no arg and ms,Fixes  1913 ,ichernev,closed,0,2014-10-24 07:38:38,2014-11-17 07:17:45,,,,1,1
12240,moment/moment,2009,Use native toISOString when we can,The main idea is to take advantage of the speed in the native .toISOString when possible.  The node tests pass and I hope that there is CI coverage of browsers.  Please let me now if you d like anything more or if you d like anything different.  Related to issue  1999  ,elliotf,closed,2,2014-10-24 23:42:45,2014-11-17 07:45:47,,,,1,1
12239,moment/moment,2010,Update deprecation warning for moment  .lang  ,Our advice for users should match our implementation of the compatibility shim  which uses  moment  .localeData    as a getter and  moment  .locale    as a setter.  Based on discussion in  1879. ,butterflyhug,closed,1,2014-10-25 15:59:22,2014-11-17 07:44:02,,,,1,1
12238,moment/moment,2011,Quarter diff,Possible fix for  1991. ALTHOUGH  this is the most naive solution for a quarter diff. But I think there are two ways to do a  quarter diff  that make sense.   Two dates are a quarter apart if they re four months apart  the one implemented in this PR .   Two dates are a quarter apart if they re in different quarters  e.g. March 31st and April 1st are one quarter apart since they are on the first and second quarters of the year . This one is probably marginally more complex to implement  and also wouldn t have a sensible result when the third parameter for  diff  is  true . ,julioolvr,closed,5,2014-10-26 23:37:13,2015-05-04 16:15:39,,,2.10,1,1
12237,moment/moment,2012,Question: what is best practice for wrapping a moment plugin?,I made myself a little plugin for moment and was wondering what the best way is to wrap it for AMD? This is what I currently have  looked into some of the current plugins        function root  factory        if typeof exports ===  object             module.exports = factory require  moment   ;       else if typeof define ===  function     define.amd            define [ moment ]  factory ;       else           root.moment = factory root.moment ;         this  function moment         moment.fn.newFunction = function ...            ...           ;      Is this okay? Or should I return something? ,doedje,closed,2,2014-10-27 10:36:55,2014-10-31 03:29:36,,,,0,1
12236,moment/moment,2013,Updated russian locale for months.,Changed short month name for march. Just like June and July in Russian march has only 4 letters  so  full name could be used instead of short. ,nchereva,closed,2,2014-10-29 00:16:17,2014-11-17 04:27:41,,,2.8.4,1,1
12235,moment/moment,2014,786 tests failed,    Client info      Date String   : Wed Oct 29 2014 13:23:23 GMT 0300  RTZ 2         Locale String : 29.10.2014  13:23:23 Offset        :  180 User Agent    : Mozilla/5.0  Windows NT 6.3; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/38.0.2125.104 Safari/537.36            diff:diff between utc and local  78.2   month diff      javascript // Expected 2 // Actual   1 1 == 2            diff:diff between utc and local  78.4   week diff      javascript // Expected 3 // Actual   2 2 == 3            gettersSetters:setters strings  155.1   day full name      javascript // Expected 3 // Actual   2 2 == 3            gettersSetters:setters strings  155.2   day short name      javascript // Expected 3 // Actual   2 2 == 3            gettersSetters:setters strings  155.3   day minimal name      javascript // Expected 3 // Actual   2 2 == 3            gettersSetters:day setter  158.12   set from wednesday to last wednesday      javascript // Expected 5 // Actual   4 4 == 5            weekYear:weekday first day of week Thursday  dow 4   310.7   Jan  5 2000 is Wednesday    6th day      javascript // Expected 6 // Actual   5 5 == 6            weekYear:weekday first day of week Saturday  dow 6   312.5   Jan  7 1970 is Wednesday    4th day      javascript // Expected 4 // Actual   3 3 == 4            locale:af:parse  372.1   Januarie should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:af:parse  372.2   Jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:af:parse  372.3   Januarie should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:af:parse  372.4   Jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:af:parse  372.5   januarie should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:af:parse  372.6   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:af:parse  372.7   JANUARIE should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:af:parse  372.8   JAN should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:af:format ordinal  374.5   5de      javascript // Expected 5de // Actual   4de  4de  ==  5de             locale:af:format week  376.4   Woensdag Woe Wo      javascript // Expected Woensdag Woe Wo // Actual   Dinsdag Din Di  Dinsdag Din Di  ==  Woensdag Woe Wo             locale:ar ma:parse  393.1         should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ar ma:parse  393.2         should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ar ma:parse  393.3         should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ar ma:parse  393.4         should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ar ma:parse  393.5         should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ar ma:parse  393.6         should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ar ma:parse  393.7         should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ar ma:parse  393.8         should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ar ma:format ordinal  395.5   5      javascript // Expected 5 // Actual   4  4  ==  5             locale:ar ma:format week  397.4                          javascript // Expected                   // Actual                                         ==                                locale:ar sa:parse  414.1         should be month 1 instead is month 11      javascript // Expected 0 // Actual   11 11 == 0            locale:ar sa:parse  414.2         should be month 1 instead is month 11      javascript // Expected 0 // Actual   11 11 == 0            locale:ar sa:parse  414.3         should be month 1 instead is month 11      javascript // Expected 0 // Actual   11 11 == 0            locale:ar sa:parse  414.4         should be month 1 instead is month 11      javascript // Expected 0 // Actual   11 11 == 0            locale:ar sa:parse  414.5         should be month 1 instead is month 11      javascript // Expected 0 // Actual   11 11 == 0            locale:ar sa:parse  414.6         should be month 1 instead is month 11      javascript // Expected 0 // Actual   11 11 == 0            locale:ar sa:parse  414.7         should be month 1 instead is month 11      javascript // Expected 0 // Actual   11 11 == 0            locale:ar sa:parse  414.8         should be month 1 instead is month 11      javascript // Expected 0 // Actual   11 11 == 0            locale:ar sa:format ordinal  416.5   5      javascript // Expected   // Actual         ==                locale:ar sa:format week  418.4                          javascript // Expected                   // Actual                                         ==                                locale:ar:parse  435.1                      should be month 1 instead is month 11      javascript // Expected 0 // Actual   11 11 == 0            locale:ar:parse  435.2                      should be month 1 instead is month 11      javascript // Expected 0 // Actual   11 11 == 0            locale:ar:parse  435.3                      should be month 1 instead is month 11      javascript // Expected 0 // Actual   11 11 == 0            locale:ar:parse  435.4                      should be month 1 instead is month 11      javascript // Expected 0 // Actual   11 11 == 0            locale:ar:parse  435.5                      should be month 1 instead is month 11      javascript // Expected 0 // Actual   11 11 == 0            locale:ar:parse  435.6                      should be month 1 instead is month 11      javascript // Expected 0 // Actual   11 11 == 0            locale:ar:parse  435.7                      should be month 1 instead is month 11      javascript // Expected 0 // Actual   11 11 == 0            locale:ar:parse  435.8                      should be month 1 instead is month 11      javascript // Expected 0 // Actual   11 11 == 0            locale:ar:format ordinal  437.5   5      javascript // Expected   // Actual         ==                locale:ar:format week  439.4                          javascript // Expected                   // Actual                                         ==                                locale:az:parse  456.1   yanvar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:az:parse  456.2   yan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:az:parse  456.3   yanvar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:az:parse  456.4   yan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:az:parse  456.5   yanvar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:az:parse  456.6   yan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:az:parse  456.7   YANVAR should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:az:parse  456.8   YAN should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:az:format ordinal  458.5   5th      javascript // Expected 5 inci // Actual   4  nc   4  nc   ==  5 inci             locale:az:format week  460.4     r  nb    r         javascript // Expected   r  nb    r    // Actual     r  nb  ax am   Ax  A    r  nb  ax am   Ax  A  ==    r  nb    r                locale:be:parse  477.1            should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:be:parse  477.2        should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:be:parse  477.3            should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:be:parse  477.4        should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:be:parse  477.5            should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:be:parse  477.6        should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:be:parse  477.7            should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:be:parse  477.8        should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:be:format ordinal  480.5   5        javascript // Expected 5   // Actual   4    4    ==  5               locale:be:format week  484.4                     javascript // Expected              // Actual                                 ==                           locale:bg:parse  500.1          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bg:parse  500.2       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bg:parse  500.3          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bg:parse  500.4       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bg:parse  500.5          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bg:parse  500.6       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bg:parse  500.7          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bg:parse  500.8       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bg:format ordinal  502.5   5         javascript // Expected 5    // Actual   4     4     ==  5                locale:bg:format week  504.4                     javascript // Expected              // Actual                                   ==                           locale:bn:parse  521.1            should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bn:parse  521.2        should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bn:parse  521.3            should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bn:parse  521.4        should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bn:parse  521.5            should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bn:parse  521.6        should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bn:parse  521.7            should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bn:parse  521.8        should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bn:format ordinal  523.5          javascript // Expected   // Actual         ==                locale:bn:format week  525.4                      javascript // Expected               // Actual                                             ==                            locale:bo:parse  543.1              should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bo:parse  543.2             . should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bo:parse  543.3              should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bo:parse  543.4             . should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bo:parse  543.5              should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bo:parse  543.6             . should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bo:parse  543.7              should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bo:parse  543.8             . should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bo:format ordinal  545.5          javascript // Expected   // Actual         ==                locale:bo:format week  547.4                                 javascript // Expected                          // Actual                                                                   ==                                       locale:br:parse  565.1   Genver should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:br:parse  565.2   Gen should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:br:parse  565.3   Genver should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:br:parse  565.4   Gen should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:br:parse  565.5   genver should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:br:parse  565.6   gen should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:br:parse  565.7   GENVER should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:br:parse  565.8   GEN should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:br:format ordinal  567.5   5vet      javascript // Expected 5vet // Actual   4vet  4vet  ==  5vet             locale:br:format week  569.4   Merc her Mer Mer      javascript // Expected Merc her Mer Mer // Actual   Meurzh Meu Me  Meurzh Meu Me  ==  Merc her Mer Mer             locale:bs:parse  579.1   januar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bs:parse  579.2   jan. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bs:parse  579.3   januar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bs:parse  579.4   jan. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bs:parse  579.5   januar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bs:parse  579.6   jan. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bs:parse  579.7   JANUAR should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bs:parse  579.8   JAN. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:bs:format ordinal  581.5   5.      javascript // Expected 5. // Actual   4.  4.  ==  5.             locale:bs:format week  583.4   srijeda sri. sr      javascript // Expected srijeda sri. sr // Actual   utorak uto. ut  utorak uto. ut  ==  srijeda sri. sr             locale:ca:parse  600.1   gener should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ca:parse  600.2   gen. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ca:parse  600.3   gener should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ca:parse  600.4   gen. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ca:parse  600.5   gener should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ca:parse  600.6   gen. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ca:parse  600.7   GENER should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ca:parse  600.8   GEN. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ca:format ordinal  601.5   5       javascript // Expected 5  // Actual   4   4   ==  5              locale:ca:format week  603.4   dimecres dc. Dc      javascript // Expected dimecres dc. Dc // Actual   dimarts dt. Dt  dimarts dt. Dt  ==  dimecres dc. Dc             locale:cs:parse  620.1   leden should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:cs:parse  620.2   led should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:cs:parse  620.3   leden should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:cs:parse  620.4   led should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:cs:parse  620.5   leden should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:cs:parse  620.6   led should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:cs:parse  620.7   LEDEN should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:cs:parse  620.8   LED should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:cs:format ordinal  622.5   5.      javascript // Expected 5. // Actual   4.  4.  ==  5.             locale:cs:format week  624.4   st eda st st      javascript // Expected st eda st st // Actual    ter   t  t   ter   t  t  ==  st eda st st             locale:cv:parse  643.1          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:cv:parse  643.2       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:cv:parse  643.3          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:cv:parse  643.4       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:cv:parse  643.5          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:cv:parse  643.6       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:cv:parse  643.7          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:cv:parse  643.8       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:cv:format ordinal  645.5   5          javascript // Expected 5     // Actual   4      4      ==  5                 locale:cv:format week  647.4                    javascript // Expected             // Actual                                       ==                          locale:cy:parse  664.1   Ionawr should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:cy:parse  664.2   Ion should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:cy:parse  664.3   Ionawr should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:cy:parse  664.4   Ion should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:cy:parse  664.5   ionawr should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:cy:parse  664.6   ion should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:cy:parse  664.7   IONAWR should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:cy:parse  664.8   ION should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:cy:format ordinal  666.5   5ed      javascript // Expected 5ed // Actual   4ydd  4ydd  ==  5ed             locale:cy:format week  668.4   Dydd Mercher Mer Me      javascript // Expected Dydd Mercher Mer Me // Actual   Dydd Mawrth Maw Ma  Dydd Mawrth Maw Ma  ==  Dydd Mercher Mer Me             locale:da:parse  684.1   januar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:da:parse  684.2   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:da:parse  684.3   januar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:da:parse  684.4   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:da:parse  684.5   januar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:da:parse  684.6   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:da:parse  684.7   JANUAR should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:da:parse  684.8   JAN should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:da:format ordinal  686.5   5.      javascript // Expected 5. // Actual   4.  4.  ==  5.             locale:da:format week  688.4   onsdag ons on      javascript // Expected onsdag ons on // Actual   tirsdag tir ti  tirsdag tir ti  ==  onsdag ons on             locale:de at:parse  701.1   J nner should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:de at:parse  701.2   J n. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:de at:parse  701.3   J nner should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:de at:parse  701.4   J n. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:de at:parse  701.5   j nner should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:de at:parse  701.6   j n. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:de at:parse  701.7   J NNER should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:de at:parse  701.8   J N. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:de at:format ordinal  703.5   5.      javascript // Expected 5. // Actual   4.  4.  ==  5.             locale:de at:format week  705.4   Mittwoch Mi. Mi      javascript // Expected Mittwoch Mi. Mi // Actual   Dienstag Di. Di  Dienstag Di. Di  ==  Mittwoch Mi. Mi             locale:de:parse  721.1   Januar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:de:parse  721.2   Jan. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:de:parse  721.3   Januar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:de:parse  721.4   Jan. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:de:parse  721.5   januar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:de:parse  721.6   jan. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:de:parse  721.7   JANUAR should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:de:parse  721.8   JAN. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:de:format ordinal  723.5   5.      javascript // Expected 5. // Actual   4.  4.  ==  5.             locale:de:format week  725.4   Mittwoch Mi. Mi      javascript // Expected Mittwoch Mi. Mi // Actual   Dienstag Di. Di  Dienstag Di. Di  ==  Mittwoch Mi. Mi             locale:el:parse  741.1              should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:el:parse  741.2       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:el:parse  741.3              should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:el:parse  741.4       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:el:parse  741.5              should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:el:parse  741.6       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:el:parse  741.7              should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:el:parse  741.8       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:el:format ordinal  744.5   5       javascript // Expected 5  // Actual   4   4   ==  5              locale:el:format week  746.4                       javascript // Expected                // Actual                               ==                             locale:en au:parse  763.1   January should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en au:parse  763.2   Jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en au:parse  763.3   January should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en au:parse  763.4   Jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en au:parse  763.5   january should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en au:parse  763.6   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en au:parse  763.7   JANUARY should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en au:parse  763.8   JAN should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en au:format ordinal  765.5   5th      javascript // Expected 5th // Actual   4th  4th  ==  5th             locale:en au:format week  767.4   Wednesday Wed We      javascript // Expected Wednesday Wed We // Actual   Tuesday Tue Tu  Tuesday Tue Tu  ==  Wednesday Wed We             locale:en ca:parse  784.1   January should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en ca:parse  784.2   Jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en ca:parse  784.3   January should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en ca:parse  784.4   Jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en ca:parse  784.5   january should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en ca:parse  784.6   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en ca:parse  784.7   JANUARY should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en ca:parse  784.8   JAN should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en ca:format ordinal  786.5   5th      javascript // Expected 5th // Actual   4th  4th  ==  5th             locale:en ca:format week  788.4   Wednesday Wed We      javascript // Expected Wednesday Wed We // Actual   Tuesday Tue Tu  Tuesday Tue Tu  ==  Wednesday Wed We             locale:en gb:parse  805.1   January should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en gb:parse  805.2   Jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en gb:parse  805.3   January should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en gb:parse  805.4   Jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en gb:parse  805.5   january should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en gb:parse  805.6   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en gb:parse  805.7   JANUARY should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en gb:parse  805.8   JAN should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en gb:format ordinal  807.5   5th      javascript // Expected 5th // Actual   4th  4th  ==  5th             locale:en gb:format week  809.4   Wednesday Wed We      javascript // Expected Wednesday Wed We // Actual   Tuesday Tue Tu  Tuesday Tue Tu  ==  Wednesday Wed We             locale:en:parse  826.1   January should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en:parse  826.2   Jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en:parse  826.3   January should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en:parse  826.4   Jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en:parse  826.5   january should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en:parse  826.6   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en:parse  826.7   JANUARY should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en:parse  826.8   JAN should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:en:format ordinal  828.5   5th      javascript // Expected 5th // Actual   4th  4th  ==  5th             locale:en:format week  830.4   Wednesday Wed We      javascript // Expected Wednesday Wed We // Actual   Tuesday Tue Tu  Tuesday Tue Tu  ==  Wednesday Wed We             locale:eo:parse  847.1   januaro should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:eo:parse  847.2   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:eo:parse  847.3   januaro should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:eo:parse  847.4   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:eo:parse  847.5   januaro should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:eo:parse  847.6   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:eo:parse  847.7   JANUARO should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:eo:parse  847.8   JAN should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:eo:format ordinal  849.5   5a      javascript // Expected 5a // Actual   4a  4a  ==  5a             locale:eo:format week  851.4   Merkredo Merk Me      javascript // Expected Merkredo Merk Me // Actual   Mardo Mard Ma  Mardo Mard Ma  ==  Merkredo Merk Me             locale:es:parse  868.1   enero should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:es:parse  868.2   ene. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:es:parse  868.3   enero should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:es:parse  868.4   ene. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:es:parse  868.5   enero should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:es:parse  868.6   ene. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:es:parse  868.7   ENERO should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:es:parse  868.8   ENE. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:es:format ordinal  870.5   5       javascript // Expected 5  // Actual   4   4   ==  5              locale:es:format week  872.4   mi rcoles mi . Mi      javascript // Expected mi rcoles mi . Mi // Actual   martes mar. Ma  martes mar. Ma  ==  mi rcoles mi . Mi             locale:et:parse  889.1   jaanuar peaks olema kuu 1      javascript // Expected 0 // Actual   11 11 == 0            locale:et:parse  889.2   jaan peaks olema kuu 1      javascript // Expected 0 // Actual   11 11 == 0            locale:et:parse  889.3   jaanuar peaks olema kuu 1      javascript // Expected 0 // Actual   11 11 == 0            locale:et:parse  889.4   jaan peaks olema kuu 1      javascript // Expected 0 // Actual   11 11 == 0            locale:et:parse  889.5   jaanuar peaks olema kuu 1      javascript // Expected 0 // Actual   11 11 == 0            locale:et:parse  889.6   jaan peaks olema kuu 1      javascript // Expected 0 // Actual   11 11 == 0            locale:et:parse  889.7   JAANUAR peaks olema kuu 1      javascript // Expected 0 // Actual   11 11 == 0            locale:et:parse  889.8   JAAN peaks olema kuu 1      javascript // Expected 0 // Actual   11 11 == 0            locale:et:format ordinal  891.5   5.      javascript // Expected 5. // Actual   4.  4.  ==  5.             locale:et:format week  893.4   kolmap ev K K      javascript // Expected kolmap ev K K // Actual   teisip ev T T  teisip ev T T  ==  kolmap ev K K             locale:eu:parse  910.1   urtarrila should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:eu:parse  910.2   urt. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:eu:parse  910.3   urtarrila should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:eu:parse  910.4   urt. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:eu:parse  910.5   urtarrila should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:eu:parse  910.6   urt. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:eu:parse  910.7   URTARRILA should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:eu:parse  910.8   URT. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:eu:format ordinal  912.5   5.      javascript // Expected 5. // Actual   4.  4.  ==  5.             locale:eu:format week  914.4   asteazkena az. az      javascript // Expected asteazkena az. az // Actual   asteartea ar. ar  asteartea ar. ar  ==  asteazkena az. az             locale:fa:parse  931.1          should be month 1 instead is month 11      javascript // Expected 0 // Actual   11 11 == 0            locale:fa:parse  931.2          should be month 1 instead is month 11      javascript // Expected 0 // Actual   11 11 == 0            locale:fa:format ordinal  933.5   5      javascript // Expected    // Actual           ==                 locale:fa:format week  935.4                            javascript // Expected                     // Actual                                         ==                                  locale:fi:parse  952.1   tammikuu should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fi:parse  952.2   tammi should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fi:parse  952.3   tammikuu should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fi:parse  952.4   tammi should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fi:parse  952.5   tammikuu should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fi:parse  952.6   tammi should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fi:parse  952.7   TAMMIKUU should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fi:parse  952.8   TAMMI should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fi:format ordinal  954.5   5th      javascript // Expected 5. // Actual   4.  4.  ==  5.             locale:fi:format week  956.4   keskiviikko ke ke      javascript // Expected keskiviikko ke ke // Actual   tiistai ti ti  tiistai ti ti  ==  keskiviikko ke ke             locale:fo:parse  973.1   januar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fo:parse  973.2   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fo:parse  973.3   januar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fo:parse  973.4   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fo:parse  973.5   januar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fo:parse  973.6   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fo:parse  973.7   JANUAR should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fo:parse  973.8   JAN should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fo:format ordinal  975.5   5.      javascript // Expected 5. // Actual   4.  4.  ==  5.             locale:fo:format week  977.4   mikudagur mik mi      javascript // Expected mikudagur mik mi // Actual   t sdagur t s t   t sdagur t s t   ==  mikudagur mik mi             locale:fr ca:parse  990.1   janvier should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fr ca:parse  990.2   janv. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fr ca:parse  990.3   janvier should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fr ca:parse  990.4   janv. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fr ca:parse  990.5   janvier should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fr ca:parse  990.6   janv. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fr ca:parse  990.7   JANVIER should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fr ca:parse  990.8   JANV. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fr ca:format ordinal  992.5   5      javascript // Expected 5 // Actual   4  4  ==  5             locale:fr ca:format week  994.4   mercredi mer. Me      javascript // Expected mercredi mer. Me // Actual   mardi mar. Ma  mardi mar. Ma  ==  mercredi mer. Me             locale:fr:parse  1010.1   janvier should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fr:parse  1010.2   janv. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fr:parse  1010.3   janvier should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fr:parse  1010.4   janv. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fr:parse  1010.5   janvier should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fr:parse  1010.6   janv. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fr:parse  1010.7   JANVIER should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fr:parse  1010.8   JANV. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:fr:format ordinal  1012.5   5      javascript // Expected 5 // Actual   4  4  ==  5             locale:fr:format week  1014.4   mercredi mer. Me      javascript // Expected mercredi mer. Me // Actual   mardi mar. Ma  mardi mar. Ma  ==  mercredi mer. Me             locale:gl:parse  1030.1   Xaneiro should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:gl:parse  1030.2   Xan. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:gl:parse  1030.3   Xaneiro should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:gl:parse  1030.4   Xan. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:gl:parse  1030.5   xaneiro should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:gl:parse  1030.6   xan. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:gl:parse  1030.7   XANEIRO should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:gl:parse  1030.8   XAN. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:gl:format ordinal  1031.5   5       javascript // Expected 5  // Actual   4   4   ==  5              locale:gl:format week  1033.4   M rcores M r. M       javascript // Expected M rcores M r. M  // Actual   Martes Mar. Ma  Martes Mar. Ma  ==  M rcores M r. M              locale:he:parse  1051.1         should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:he:parse  1051.2        should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:he:parse  1051.3         should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:he:parse  1051.4        should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:he:parse  1051.5         should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:he:parse  1051.6        should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:he:parse  1051.7         should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:he:parse  1051.8        should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:he:format week  1054.4                   javascript // Expected            // Actual                           ==                         locale:hi:parse  1071.1         should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hi:parse  1071.2     . should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hi:parse  1071.3         should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hi:parse  1071.4     . should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hi:parse  1071.5         should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hi:parse  1071.6     . should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hi:parse  1071.7         should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hi:parse  1071.8     . should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hi:format ordinal  1073.5          javascript // Expected   // Actual         ==                locale:hi:format week  1075.4                      javascript // Expected               // Actual                                     ==                            locale:hr:parse  1093.1   sje anj should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hr:parse  1093.2   sje. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hr:parse  1093.3   sje anj should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hr:parse  1093.4   sje. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hr:parse  1093.5   sje anj should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hr:parse  1093.6   sje. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hr:parse  1093.7   SJE ANJ should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hr:parse  1093.8   SJE. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hr:format ordinal  1095.5   5.      javascript // Expected 5. // Actual   4.  4.  ==  5.             locale:hr:format week  1097.4   srijeda sri. sr      javascript // Expected srijeda sri. sr // Actual   utorak uto. ut  utorak uto. ut  ==  srijeda sri. sr             locale:hu:parse  1114.1   janu r should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hu:parse  1114.2   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hu:parse  1114.3   janu r should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hu:parse  1114.4   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hu:parse  1114.5   janu r should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hu:parse  1114.6   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hu:parse  1114.7   JANU R should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hu:parse  1114.8   JAN should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hu:format ordinal  1117.5   5.      javascript // Expected 5. // Actual   4.  4.  ==  5.             locale:hu:format week  1119.4   szerda sze      javascript // Expected szerda sze // Actual   kedd kedd  kedd kedd  ==  szerda sze             locale:hy am:parse  1136.1           should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hy am:parse  1136.2       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hy am:parse  1136.3           should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hy am:parse  1136.4       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hy am:parse  1136.5           should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hy am:parse  1136.6       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hy am:parse  1136.7           should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hy am:parse  1136.8       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:hy am:format ordinal  1140.5   5         javascript // Expected 5    // Actual   4     4     ==  5                locale:hy am:format week  1146.4                           javascript // Expected                    // Actual                                         ==                                 locale:id:parse  1162.1   Januari should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:id:parse  1162.2   Jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:id:parse  1162.3   Januari should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:id:parse  1162.4   Jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:id:parse  1162.5   januari should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:id:parse  1162.6   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:id:parse  1162.7   JANUARI should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:id:parse  1162.8   JAN should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:id:format week  1165.4   Rabu Rab Rb      javascript // Expected Rabu Rab Rb // Actual   Selasa Sel Sl  Selasa Sel Sl  ==  Rabu Rab Rb             locale:is:parse  1182.1   jan ar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:is:parse  1182.2   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:is:parse  1182.3   jan ar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:is:parse  1182.4   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:is:parse  1182.5   jan ar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:is:parse  1182.6   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:is:parse  1182.7   JAN AR should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:is:parse  1182.8   JAN should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:is:format ordinal  1184.5   5.      javascript // Expected 5. // Actual   4.  4.  ==  5.             locale:is:format week  1186.4   mi vikudagur mi  Mi      javascript // Expected mi vikudagur mi  Mi // Actual    ri judagur  ri  r   ri judagur  ri  r  ==  mi vikudagur mi  Mi             locale:it:parse  1203.1   gennaio should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:it:parse  1203.2   gen should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:it:parse  1203.3   gennaio should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:it:parse  1203.4   gen should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:it:parse  1203.5   gennaio should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:it:parse  1203.6   gen should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:it:parse  1203.7   GENNAIO should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:it:parse  1203.8   GEN should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:it:format ordinal  1205.5   5       javascript // Expected 5  // Actual   4   4   ==  5              locale:it:format week  1207.4   Mercoled  Mer Me      javascript // Expected Mercoled  Mer Me // Actual   Marted  Mar Ma  Marted  Mar Ma  ==  Mercoled  Mer Me             locale:ja:parse  1223.1   1  should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ja:parse  1223.2   1  should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ja:parse  1223.3   1  should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ja:parse  1223.4   1  should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ja:parse  1223.5   1  should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ja:parse  1223.6   1  should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ja:parse  1223.7   1  should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ja:parse  1223.8   1  should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ja:format week  1226.4                javascript // Expected         // Actual                     ==                      locale:ka:parse  1243.1                         1      javascript // Expected 0 // Actual   11 11 == 0            locale:ka:parse  1243.2                     1      javascript // Expected 0 // Actual   11 11 == 0            locale:ka:parse  1243.3                         1      javascript // Expected 0 // Actual   11 11 == 0            locale:ka:parse  1243.4                     1      javascript // Expected 0 // Actual   11 11 == 0            locale:ka:parse  1243.5                         1      javascript // Expected 0 // Actual   11 11 == 0            locale:ka:parse  1243.6                     1      javascript // Expected 0 // Actual   11 11 == 0            locale:ka:parse  1243.7                         1      javascript // Expected 0 // Actual   11 11 == 0            locale:ka:parse  1243.8                     1      javascript // Expected 0 // Actual   11 11 == 0            locale:ka:format ordinal  1245.5      5      javascript // Expected    5 // Actual      4     4  ==     5             locale:ka:format week  1247.4                         javascript // Expected                  // Actual                                       ==                               locale:km:parse  1264.1        should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:km:parse  1264.2        should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:km:parse  1264.3        should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:km:parse  1264.4        should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:km:parse  1264.5        should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:km:parse  1264.6        should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:km:parse  1264.7        should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:km:parse  1264.8        should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:km:format ordinal  1266.5   5th      javascript // Expected 5 // Actual   4  4  ==  5             locale:km:format week  1268.4                    javascript // Expected             // Actual                                               ==                          locale:ko:parse  1285.1   1  should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ko:parse  1285.2   1  should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ko:parse  1285.3   1  should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ko:parse  1285.4   1  should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ko:parse  1285.5   1  should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ko:parse  1285.6   1  should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ko:parse  1285.7   1  should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ko:parse  1285.8   1  should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ko:format ordinal  1288.5   5       javascript // Expected 5  // Actual   4   4   ==  5              locale:ko:format week  1290.4                javascript // Expected         // Actual                     ==                      locale:lb:parse  1307.1   Januar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:lb:parse  1307.2   Jan. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:lb:parse  1307.3   Januar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:lb:parse  1307.4   Jan. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:lb:parse  1307.5   januar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:lb:parse  1307.6   jan. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:lb:parse  1307.7   JANUAR should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:lb:parse  1307.8   JAN. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:lb:format week  1310.4   M ttwoch M . M       javascript // Expected M ttwoch M . M  // Actual   D nschdeg D . D   D nschdeg D . D   ==  M ttwoch M . M              locale:lt:parse  1315.1   sausio should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:lt:parse  1315.2   sau should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:lt:parse  1315.3   sausio should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:lt:parse  1315.4   sau should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:lt:parse  1315.5   sausio should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:lt:parse  1315.6   sau should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:lt:parse  1315.7   SAUSIO should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:lt:parse  1315.8   SAU should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:lt:format ordinal  1317.5   5 oji      javascript // Expected 5 oji // Actual   4 oji  4 oji  ==  5 oji             locale:lt:format week  1319.4   tre iadienis Tre T      javascript // Expected tre iadienis Tre T // Actual   antradienis Ant A  antradienis Ant A  ==  tre iadienis Tre T             locale:lt:format week on US calendar  1320.4   tre iadienis Tre T      javascript // Expected tre iadienis Tre T // Actual   antradienis Ant A  antradienis Ant A  ==  tre iadienis Tre T             locale:lv:parse  1337.1   janv ris should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:lv:parse  1337.2   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:lv:parse  1337.3   janv ris should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:lv:parse  1337.4   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:lv:parse  1337.5   janv ris should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:lv:parse  1337.6   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:lv:parse  1337.7   JANV RIS should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:lv:parse  1337.8   JAN should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:lv:format ordinal  1339.5   5.      javascript // Expected 5. // Actual   4.  4.  ==  5.             locale:lv:format week  1341.4   tre diena T T      javascript // Expected tre diena T T // Actual   otrdiena O O  otrdiena O O  ==  tre diena T T             locale:mk:parse  1358.1           should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:mk:parse  1358.2       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:mk:parse  1358.3           should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:mk:parse  1358.4       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:mk:parse  1358.5           should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:mk:parse  1358.6       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:mk:parse  1358.7           should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:mk:parse  1358.8       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:mk:format ordinal  1360.5   5         javascript // Expected 5    // Actual   4     4     ==  5                locale:mk:format week  1362.4                     javascript // Expected              // Actual                                   ==                           locale:ml:parse  1379.1          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ml:parse  1379.2      . should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ml:parse  1379.3          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ml:parse  1379.4      . should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ml:parse  1379.5          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ml:parse  1379.6      . should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ml:parse  1379.7          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ml:parse  1379.8      . should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ml:format ordinal  1381.5   5      javascript // Expected 5 // Actual   4  4  ==  5             locale:ml:format week  1383.4                         javascript // Expected                  // Actual                                           ==                               locale:mr:parse  1401.1            should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:mr:parse  1401.2       . should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:mr:parse  1401.3            should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:mr:parse  1401.4       . should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:mr:parse  1401.5            should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:mr:parse  1401.6       . should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:mr:parse  1401.7            should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:mr:parse  1401.8       . should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:mr:format ordinal  1403.5          javascript // Expected   // Actual         ==                locale:mr:format week  1405.4                      javascript // Expected               // Actual                                     ==                            locale:ms my:parse  1423.1   Januari sepatutnya bulan 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ms my:parse  1423.2   Jan sepatutnya bulan 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ms my:parse  1423.3   Januari sepatutnya bulan 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ms my:parse  1423.4   Jan sepatutnya bulan 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ms my:parse  1423.5   januari sepatutnya bulan 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ms my:parse  1423.6   jan sepatutnya bulan 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ms my:parse  1423.7   JANUARI sepatutnya bulan 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ms my:parse  1423.8   JAN sepatutnya bulan 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ms my:format ordinal  1425.5   5      javascript // Expected 5 // Actual   4  4  ==  5             locale:ms my:format week  1427.4   Rabu Rab Rb      javascript // Expected Rabu Rab Rb // Actual   Selasa Sel Sl  Selasa Sel Sl  ==  Rabu Rab Rb             locale:my:parse  1444.1            should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:my:parse  1444.2       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:my:parse  1444.3            should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:my:parse  1444.4       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:my:parse  1444.5            should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:my:parse  1444.6       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:my:parse  1444.7            should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:my:parse  1444.8       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:my:format ordinal  1446.5          javascript // Expected   // Actual         ==                locale:my:format week  1448.4                         javascript // Expected                  // Actual                                           ==                               locale:nb:parse  1465.1   januar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:nb:parse  1465.2   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:nb:parse  1465.3   januar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:nb:parse  1465.4   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:nb:parse  1465.5   januar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:nb:parse  1465.6   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:nb:parse  1465.7   JANUAR should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:nb:parse  1465.8   JAN should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:nb:format ordinal  1467.5   5.      javascript // Expected 5. // Actual   4.  4.  ==  5.             locale:nb:format week  1469.4   onsdag ons on      javascript // Expected onsdag ons on // Actual   tirsdag tirs ti  tirsdag tirs ti  ==  onsdag ons on             locale:ne:parse  1486.1         should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ne:parse  1486.2     . should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ne:parse  1486.3         should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ne:parse  1486.4     . should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ne:parse  1486.5         should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ne:parse  1486.6     . should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ne:parse  1486.7         should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ne:parse  1486.8     . should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ne:format ordinal  1488.5          javascript // Expected   // Actual         ==                locale:ne:format week  1490.4             .   .      javascript // Expected           .   . // Actual                 .                    .      ==            .   .             locale:nl:parse  1508.1   januari should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:nl:parse  1508.2   jan. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:nl:parse  1508.3   januari should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:nl:parse  1508.4   jan. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:nl:parse  1508.5   januari should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:nl:parse  1508.6   jan. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:nl:parse  1508.7   JANUARI should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:nl:parse  1508.8   JAN. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:nl:format ordinal  1510.5   5de      javascript // Expected 5de // Actual   4de  4de  ==  5de             locale:nl:format week  1512.4   woensdag wo. Wo      javascript // Expected woensdag wo. Wo // Actual   dinsdag di. Di  dinsdag di. Di  ==  woensdag wo. Wo             locale:nn:parse  1530.1   januar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:nn:parse  1530.2   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:nn:parse  1530.3   januar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:nn:parse  1530.4   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:nn:parse  1530.5   januar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:nn:parse  1530.6   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:nn:parse  1530.7   JANUAR should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:nn:parse  1530.8   JAN should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:nn:format ordinal  1532.5   5.      javascript // Expected 5. // Actual   4.  4.  ==  5.             locale:nn:format week  1534.4   onsdag ons on      javascript // Expected onsdag ons on // Actual   tysdag tys ty  tysdag tys ty  ==  onsdag ons on             locale:pl:parse  1551.1   stycze  should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:pl:parse  1551.2   sty should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:pl:parse  1551.3   stycze  should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:pl:parse  1551.4   sty should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:pl:parse  1551.5   stycze  should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:pl:parse  1551.6   sty should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:pl:parse  1551.7   STYCZE  should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:pl:parse  1551.8   STY should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:pl:format ordinal  1553.5   5.      javascript // Expected 5. // Actual   4.  4.  ==  5.             locale:pl:format week  1555.4    roda  r  r      javascript // Expected  roda  r  r // Actual   wtorek wt Wt  wtorek wt Wt  ==   roda  r  r             locale:pt br:parse  1572.1   janeiro should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:pt br:parse  1572.2   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:pt br:parse  1572.3   janeiro should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:pt br:parse  1572.4   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:pt br:parse  1572.5   janeiro should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:pt br:parse  1572.6   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:pt br:parse  1572.7   JANEIRO should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:pt br:parse  1572.8   JAN should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:pt br:format ordinal  1574.5   5       javascript // Expected 5  // Actual   4   4   ==  5              locale:pt br:format week  1576.4   quarta feira qua      javascript // Expected quarta feira qua // Actual   ter a feira ter  ter a feira ter  ==  quarta feira qua             locale:pt:parse  1592.1   Janeiro should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:pt:parse  1592.2   Jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:pt:parse  1592.3   Janeiro should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:pt:parse  1592.4   Jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:pt:parse  1592.5   janeiro should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:pt:parse  1592.6   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:pt:parse  1592.7   JANEIRO should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:pt:parse  1592.8   JAN should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:pt:format ordinal  1594.5   5       javascript // Expected 5  // Actual   4   4   ==  5              locale:pt:format week  1596.4   quarta feira qua 4       javascript // Expected quarta feira qua 4  // Actual   ter a feira ter 3   ter a feira ter 3   ==  quarta feira qua 4              locale:ro:parse  1612.1   ianuarie should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ro:parse  1612.2   ian. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ro:parse  1612.3   ianuarie should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ro:parse  1612.4   ian. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ro:parse  1612.5   ianuarie should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ro:parse  1612.6   ian. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ro:parse  1612.7   IANUARIE should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ro:parse  1612.8   IAN. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ro:format ordinal  1614.5   5      javascript // Expected 5 // Actual   4  4  ==  5             locale:ro:format week  1616.4   miercuri Mie Mi      javascript // Expected miercuri Mie Mi // Actual   mar i Mar Ma  mar i Mar Ma  ==  miercuri Mie Mi             locale:ru:parse  1633.1          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ru:parse  1633.2       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ru:parse  1633.3          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ru:parse  1633.4       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ru:parse  1633.5          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ru:parse  1633.6       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ru:parse  1633.7          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ru:parse  1633.8       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ru:format ordinal  1637.5   5        javascript // Expected 5   // Actual   4    4    ==  5               locale:ru:format week  1643.4                    javascript // Expected             // Actual                                 ==                          locale:sk:parse  1659.1   janu r should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sk:parse  1659.2   jan. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sk:parse  1659.3   janu r should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sk:parse  1659.4   jan. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sk:parse  1659.5   janu r should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sk:parse  1659.6   jan. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sk:parse  1659.7   JANU R should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sk:parse  1659.8   JAN. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sk:format ordinal  1661.5   5.      javascript // Expected 5. // Actual   4.  4.  ==  5.             locale:sk:format week  1663.4   streda st st      javascript // Expected streda st st // Actual   utorok ut ut  utorok ut ut  ==  streda st st             locale:sl:parse  1682.1   januar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sl:parse  1682.2   jan. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sl:parse  1682.3   januar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sl:parse  1682.4   jan. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sl:parse  1682.5   januar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sl:parse  1682.6   jan. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sl:parse  1682.7   JANUAR should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sl:parse  1682.8   JAN. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sl:format ordinal  1684.5   5.      javascript // Expected 5. // Actual   4.  4.  ==  5.             locale:sl:format week  1686.4   sreda sre. sr      javascript // Expected sreda sre. sr // Actual   torek tor. to  torek tor. to  ==  sreda sre. sr             locale:sq:parse  1703.1   Janar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sq:parse  1703.2   Jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sq:parse  1703.3   Janar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sq:parse  1703.4   Jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sq:parse  1703.5   janar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sq:parse  1703.6   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sq:parse  1703.7   JANAR should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sq:parse  1703.8   JAN should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sq:format ordinal  1706.5   5.      javascript // Expected 5. // Actual   4.  4.  ==  5.             locale:sq:format week  1708.4   E M rkur  M r M       javascript // Expected E M rkur  M r M  // Actual   E Mart  Mar Ma  E Mart  Mar Ma  ==  E M rkur  M r M              locale:sr cyrl:parse  1725.1          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sr cyrl:parse  1725.2      . should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sr cyrl:parse  1725.3          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sr cyrl:parse  1725.4      . should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sr cyrl:parse  1725.5          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sr cyrl:parse  1725.6      . should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sr cyrl:parse  1725.7          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sr cyrl:parse  1725.8      . should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sr cyrl:format ordinal  1727.5   5.      javascript // Expected 5. // Actual   4.  4.  ==  5.             locale:sr cyrl:format week  1729.4            .         javascript // Expected          .    // Actual             .               .     ==           .                locale:sr:parse  1746.1   januar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sr:parse  1746.2   jan. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sr:parse  1746.3   januar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sr:parse  1746.4   jan. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sr:parse  1746.5   januar should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sr:parse  1746.6   jan. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sr:parse  1746.7   JANUAR should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sr:parse  1746.8   JAN. should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sr:format ordinal  1748.5   5.      javascript // Expected 5. // Actual   4.  4.  ==  5.             locale:sr:format week  1750.4   sreda sre. sr      javascript // Expected sreda sre. sr // Actual   utorak uto. ut  utorak uto. ut  ==  sreda sre. sr             locale:sv:parse  1767.1   januari should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sv:parse  1767.2   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sv:parse  1767.3   januari should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sv:parse  1767.4   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sv:parse  1767.5   januari should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sv:parse  1767.6   jan should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sv:parse  1767.7   JANUARI should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sv:parse  1767.8   JAN should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:sv:format ordinal  1769.5   5e      javascript // Expected 5e // Actual   4e  4e  ==  5e             locale:sv:format week  1771.4   onsdag ons on      javascript // Expected onsdag ons on // Actual   tisdag tis ti  tisdag tis ti  ==  onsdag ons on             locale:ta:parse  1788.1         should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ta:parse  1788.2         should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ta:parse  1788.3         should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ta:parse  1788.4         should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ta:parse  1788.5         should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ta:parse  1788.6         should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ta:parse  1788.7         should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ta:parse  1788.8         should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:ta:format ordinal  1790.5   5         javascript // Expected 5    // Actual   4     4     ==  5                locale:ta:format week  1792.4                            javascript // Expected                     // Actual                                                         ==                                  locale:th:parse  1809.1          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:th:parse  1809.2        should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:th:parse  1809.3          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:th:parse  1809.4        should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:th:parse  1809.5          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:th:parse  1809.6        should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:th:parse  1809.7          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:th:parse  1809.8        should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:th:format week  1812.4            .      javascript // Expected          . // Actual                  .                 .  ==           .             locale:tl ph:parse  1829.1   Enero should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tl ph:parse  1829.2   Ene should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tl ph:parse  1829.3   Enero should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tl ph:parse  1829.4   Ene should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tl ph:parse  1829.5   enero should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tl ph:parse  1829.6   ene should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tl ph:parse  1829.7   ENERO should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tl ph:parse  1829.8   ENE should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tl ph:format ordinal  1831.5   5      javascript // Expected 5 // Actual   4  4  ==  5             locale:tl ph:format week  1833.4   Miyerkules Miy Mi      javascript // Expected Miyerkules Miy Mi // Actual   Martes Mar Ma  Martes Mar Ma  ==  Miyerkules Miy Mi             locale:tr:parse  1849.1   Ocak should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tr:parse  1849.2   Oca should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tr:parse  1849.3   Ocak should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tr:parse  1849.4   Oca should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tr:parse  1849.5   ocak should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tr:parse  1849.6   oca should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tr:parse  1849.7   OCAK should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tr:parse  1849.8   OCA should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tr:format ordinal  1851.5   5th      javascript // Expected 5 inci // Actual   4  nc   4  nc   ==  5 inci             locale:tr:format week  1853.4    ar amba  ar  a      javascript // Expected  ar amba  ar  a // Actual   Sal  Sal Sa  Sal  Sal Sa  ==   ar amba  ar  a             locale:tzm latn:parse  1870.1   innayr should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tzm latn:parse  1870.2   innayr should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tzm latn:parse  1870.3   innayr should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tzm latn:parse  1870.4   innayr should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tzm latn:parse  1870.5   innayr should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tzm latn:parse  1870.6   innayr should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tzm latn:parse  1870.7   INNAYR should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tzm latn:parse  1870.8   INNAYR should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tzm latn:format ordinal  1872.5   5      javascript // Expected 5 // Actual   4  4  ==  5             locale:tzm latn:format week  1874.4   akras akras akras      javascript // Expected akras akras akras // Actual   asinas asinas asinas  asinas asinas asinas  ==  akras akras akras             locale:tzm:parse  1891.1          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tzm:parse  1891.2          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tzm:parse  1891.3          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tzm:parse  1891.4          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tzm:parse  1891.5          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tzm:parse  1891.6          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tzm:parse  1891.7          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tzm:parse  1891.8          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:tzm:format ordinal  1893.5   5      javascript // Expected 5 // Actual   4  4  ==  5             locale:tzm:format week  1895.4                          javascript // Expected                   // Actual                                               ==                                locale:uk:parse  1912.1          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:uk:parse  1912.2       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:uk:parse  1912.3          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:uk:parse  1912.4       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:uk:parse  1912.5          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:uk:parse  1912.6       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:uk:parse  1912.7          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:uk:parse  1912.8       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:uk:format ordinal  1915.5   5        javascript // Expected 5   // Actual   4    4    ==  5               locale:uk:format week  1918.4                     javascript // Expected              // Actual                                   ==                           locale:uz:parse  1934.1          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:uz:parse  1934.2       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:uz:parse  1934.3          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:uz:parse  1934.4       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:uz:parse  1934.5          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:uz:parse  1934.6       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:uz:parse  1934.7          should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:uz:parse  1934.8       should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:uz:format ordinal  1936.5   5      javascript // Expected 5 // Actual   4  4  ==  5             locale:uz:format week  1938.4                        javascript // Expected                 // Actual                                   ==                              locale:vi:parse  1955.1   th ng 1 should be month 0      javascript // Expected 0 // Actual   11 11 == 0            locale:vi:parse  1955.2   Th01 should be month 0      javascript // Expected 0 // Actual   11 11 == 0            locale:vi:parse  1955.3   th ng 1 should be month 0      javascript // Expected 0 // Actual   11 11 == 0            locale:vi:parse  1955.4   Th01 should be month 0      javascript // Expected 0 // Actual   11 11 == 0            locale:vi:parse  1955.5   th ng 1 should be month 0      javascript // Expected 0 // Actual   11 11 == 0            locale:vi:parse  1955.6   th01 should be month 0      javascript // Expected 0 // Actual   11 11 == 0            locale:vi:parse  1955.7   TH NG 1 should be month 0      javascript // Expected 0 // Actual   11 11 == 0            locale:vi:parse  1955.8   TH01 should be month 0      javascript // Expected 0 // Actual   11 11 == 0            locale:vi:format ordinal  1957.5   5      javascript // Expected 5 // Actual   4  4  ==  5             locale:vi:format week  1959.4   th  t  T4 T4      javascript // Expected th  t  T4 T4 // Actual   th  ba T3 T3  th  ba T3 T3  ==  th  t  T4 T4             locale:zh cn:parse  1976.1      should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:zh cn:parse  1976.2   1  should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:zh cn:parse  1976.3      should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:zh cn:parse  1976.4   1  should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:zh cn:parse  1976.5      should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:zh cn:parse  1976.6   1  should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:zh cn:parse  1976.7      should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:zh cn:parse  1976.8   1  should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:zh cn:format week  1979.4                 javascript // Expected          // Actual                       ==                       locale:zh tw:parse  1998.1      should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:zh tw:parse  1998.2   1  should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:zh tw:parse  1998.3      should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:zh tw:parse  1998.4   1  should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:zh tw:parse  1998.5      should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:zh tw:parse  1998.6   1  should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:zh tw:parse  1998.7      should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:zh tw:parse  1998.8   1  should be month 1      javascript // Expected 0 // Actual   11 11 == 0            locale:zh tw:format week  2001.4                 javascript // Expected          // Actual                       ==                ,iafan,closed,4,2014-10-29 10:26:31,2015-07-12 07:45:15,,Unit Test Failed,,,0,1
12234,moment/moment,2015,Strip  Uhr  suffix from localized formats  in german locales ,The  Uhr  suffix is not as part of a time string as  AM / PM  would be. So remove it from the localized formats  LT  LLL and LLLL  but keep it in calendar time. Also update the tests.  closes issue  2006 ,kleinph,closed,2,2014-10-29 10:56:19,2014-11-17 04:25:34,,,2.8.4,1,1
12233,moment/moment,2016,Fix long date format for Czech,Removed nonbreaking spaces from  L  long date format. ,radekdostal,closed,5,2014-10-29 14:53:45,2014-11-17 17:23:29,,,,1,1
12232,moment/moment,2017,relativeTime has no option to display time in weeks,I m developing an application where I d like to indicate something was   s weeks ago    this week   or  in  s weeks . Looking through the docs  there doesn t appear to be an option for week based relative time. Is this the case? ,folz,closed,3,2014-10-29 19:46:31,2016-04-02 02:05:27,,Enhancement,,,0,1
12231,moment/moment,2018,Incorrect week at year boundary,My machine is UTC 2.5 NT  moment  2010 01 01T00:01:05Z  .format  YYYY [W]WW   // Correct  2009 W53    moment  2010 01 01T00:01:05Z  .utc  .format  YYYY [W]WW   // Incorrect  2010 W53   moment  1970 01 01T00:01:05Z  .format  YYYY [W]WW   // Incorrect  1969 W01   moment  1970 01 01T00:01:05Z  .utc  .format  YYYY [W]WW   // Correct  1970 W01   moment  1980 01 01T00:01:05Z  .format  YYYY [W]WW   // Incorrect  1979 W01   moment  1980 01 01T00:01:05Z  .utc  .format  YYYY [W]WW     1980 W01   This bug occurs in 2.7.0 and on momentjs.com  2.8.3  ,pauljoey,closed,1,2014-10-29 21:41:40,2014-10-29 21:47:43,,,,0,1
12230,moment/moment,2019,momentjs in for loop,I want to write all month names with moment. but moment is not works on loop. it says January for all month names.   Simple code:   for  var i = 1; i<13; i          console.log moment i .locale  en  .format  MMMM   ;    Output:   January  x12  i tried with async but didnt change. Its bug or what is problem ? ,araufdogan,closed,3,2014-10-29 21:49:48,2014-10-30 12:25:44,,,,0,1
12229,moment/moment,2020,Issue getting month and day printed as in blog post type ,App.js      function updatePost        last_updated = new Date       ...        Jade template  HTML      .date      .day   last_updated       .month.uppercase   last_updated   JQuery in jade template      var date =    .month  .day  .text   alert date  var convertMonth = moment date   DD MMM YYYY  .format  MMM      .month  .html convertMonth  var convertDay = moment date   DD MMM YYYY  .format  D      .day  .html convertDay       Alert date  returns   Thu Oct 30 2014 14:16:28 GMT 0800  SGT Thu Oct 30 2014 14:16:28 GMT 0800  SGT Thu Oct 30 2014 12:42:51 GMT 0800  SGT Thu Oct 30 2014 12:42:51 GMT 0800  SGT Wed Oct 29 2014 15:45:00 GMT 0800  SGT Wed Oct 29 2014 15:45:00 GMT 0800  SGT   The result prints repeatedly: Invalid date Invalid date  Everytime user saves post  the date is also updated.  On the listing  the day and month should be reflected upon updating or creating post.  I searched invalid date on google for answers but still it wasn t solved even with answers I found. Help appreciated  ,josleow,open,11,2014-10-30 09:30:50,0000-00-00 00:00:00,,Enhancement,,,0,1
12228,moment/moment,2021,explanation about diff order is wrong in documentation,i believe it should be the other way around  right ?  http://glui.me/?i=ogkc19bwxn3lkj9/2014 10 30_at_13.46.png/ ,bobmoff,closed,3,2014-10-30 12:49:35,2014-11-11 15:34:18,,,,0,1
12227,moment/moment,2022,Nanosecond precision,momentjs should support nanosecond precision  9 digits after the second   at least for parsing and formatting.  The following code should output 2014 07 30 02:59:32.109590000      moment  2014 07 30 02:59:32.10959   YYYY MM DD HH:mm:ss.SSSSSSSSS  .format  YYYY MM DD HH:mm:ss.SSSSSSSSS        ,codingtony,closed,16,2014-10-30 15:50:08,2015-06-23 01:34:17,,New Feature,,,0,1
12226,moment/moment,2023,Pluggable calendar?,I have standalone code that converts to/from the Badi  Baha i  calendar  and formats dates in that system. I would like to make a calendar plugin so that Badi dates are available in moment.  Is there a well documented way to add another calendar system?  Or should I just see what others have done  eg. https://github.com/jalaali/moment jalaali or http://momentjs.com/docs/ /plugins/isocalendar/  and try to mimic or reverse engineer those? ,glittle,closed,3,2014-10-31 00:23:21,2014-10-31 14:11:53,,,,0,1
12225,moment/moment,2024,moment array/object constructor should take dayOfYear,The javascript Date constructor will take dayOfYear as the date if you specify 0 for the month.  moment should do this also.  Fiddle:  http://jsfiddle.net/tL35qx12/ ,snoopyjc,closed,2,2014-10-31 13:09:21,2015-04-01 04:44:17,,,,0,1
12224,moment/moment,2025,Improve support for ISO8601 compact format,Can t parse this ISO timestamp without specifying a format string.   2014 10 02T1526Z  ,szechyjs,closed,5,2014-10-31 15:05:38,2016-01-11 03:12:42,,Enhancement,,,0,1
12223,moment/moment,2026,month comparison currently broken in EST,Morning  If you try the following from somewhere set to 1pm EST on Oct 31  2014   moment  11/14    MM/YY  .diff moment     months   true    you get a negative number. This appears to be because of the dst offset calculation in  diff   but I haven t been able to find the exact bug yet.  ,patrickkettner,closed,2,2014-10-31 17:46:43,2014-12-30 07:46:50,,Bug,,,0,1
12222,moment/moment,2027,Regression: Moment can t be cloned,Repro steps: 1. Invoke  history.replaceState moment    window.title  window.location.href   under Chrome 38 2. Version 2.7.0 works fine. 3. Version 2.8.1 throws  Uncaught DataCloneError: Failed to execute  replaceState  on  History : An object could not be cloned.   Version 2.8.3 fails as well. The regression was introduced somewhere between version 2.7.0 and 2.8.1. ,cowwoc,closed,2,2014-10-31 21:57:03,2014-12-30 07:36:33,,Bug,,,0,1
12221,moment/moment,2028,1 test failed. locale:el:calendar last week  462.6 ,    Client info      Date String   : Sat Nov 01 2014 00:27:29 GMT 0100  CET  Locale String : 1 November 2014 00:27:29 CET Offset        :  60 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_10  AppleWebKit/600.1.25  KHTML  like Gecko  Version/8.0 Safari/600.1.25            locale:el:calendar last week  753.18   Today   6 days one o clock      javascript // Expected                             2:30    // Actual                                2:30                                  2:30     ==                              2:30         ,io41,open,5,2014-10-31 23:28:17,0000-00-00 00:00:00,,DST,Unit Test Failed,,,0,1
12220,moment/moment,2029,How to convert time?,Good afternoon  How to convert time?  Example:  13:00   15:00 Europe/London .  If the user has a time zone of  Europe/Moscow   time has to be  16:00   18:00 . ,dts7,closed,3,2014-11-02 21:49:21,2014-11-12 01:15:55,,,,0,1
12219,moment/moment,2030,466 tests failed. [Calendar Day   DAYLIGHT SAVINGS TIME],    Client info      Date String   : Sun Nov 02 2014 16:47:43 GMT 0500  EST  Locale String : November 2  2014 at 4:47:43 PM EST Offset        : 300 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_10  AppleWebKit/600.1.25  KHTML  like Gecko  Version/8.0 Safari/600.1.25            preparsePostformat:calendar day  264.1   today at the same time      javascript // Expected Today at @:   AM // Actual   Today at  :   AM  Today at  :   AM  ==  Today at @:   AM             preparsePostformat:calendar day  264.2   Now plus 25 min      javascript // Expected Today at @:@  AM // Actual   Today at  :@  AM  Today at  :@  AM  ==  Today at @:@  AM             preparsePostformat:calendar day  264.3   Now plus 1 hour      javascript // Expected Today at  :   AM // Actual   Today at  :   AM  Today at  :   AM  ==  Today at  :   AM             preparsePostformat:calendar day  264.4   tomorrow at the same time      javascript // Expected Tomorrow at @:   AM // Actual   Tomorrow at  :   AM  Tomorrow at  :   AM  ==  Tomorrow at @:   AM             preparsePostformat:calendar day  264.5   Now minus 1 hour      javascript // Expected Today at  :   AM // Actual   Today at  @:   AM  Today at  @:   AM  ==  Today at  :   AM             preparsePostformat:calendar day  264.6   yesterday at the same time      javascript // Expected Yesterday at @:   AM // Actual   Yesterday at  :   AM  Yesterday at  :   AM  ==  Yesterday at @:   AM             locale:af:calendar day  381.1   today at the same time      javascript // Expected Vandag om 02:00 // Actual   Vandag om 01:00  Vandag om 01:00  ==  Vandag om 02:00             locale:af:calendar day  381.2   Now plus 25 min      javascript // Expected Vandag om 02:25 // Actual   Vandag om 01:25  Vandag om 01:25  ==  Vandag om 02:25             locale:af:calendar day  381.3   Now plus 1 hour      javascript // Expected Vandag om 03:00 // Actual   Vandag om 01:00  Vandag om 01:00  ==  Vandag om 03:00             locale:af:calendar day  381.4   tomorrow at the same time      javascript // Expected M re om 02:00 // Actual   M re om 01:00  M re om 01:00  ==  M re om 02:00             locale:af:calendar day  381.5   Now minus 1 hour      javascript // Expected Vandag om 01:00 // Actual   Vandag om 00:00  Vandag om 00:00  ==  Vandag om 01:00             locale:af:calendar day  381.6   yesterday at the same time      javascript // Expected Gister om 02:00 // Actual   Gister om 01:00  Gister om 01:00  ==  Gister om 02:00             locale:ar ma:calendar day  402.1   today at the same time      javascript // Expected                  02:00 // Actual                    01:00                   01:00  ==                   02:00             locale:ar ma:calendar day  402.2   Now plus 25 min      javascript // Expected                  02:25 // Actual                    01:25                   01:25  ==                   02:25             locale:ar ma:calendar day  402.3   Now plus 1 hour      javascript // Expected                  03:00 // Actual                    01:00                   01:00  ==                   03:00             locale:ar ma:calendar day  402.4   tomorrow at the same time      javascript // Expected                02:00 // Actual                  01:00                 01:00  ==                 02:00             locale:ar ma:calendar day  402.5   Now minus 1 hour      javascript // Expected                  01:00 // Actual                    00:00                   00:00  ==                   01:00             locale:ar ma:calendar day  402.6   yesterday at the same time      javascript // Expected                02:00 // Actual                  01:00                 01:00  ==                 02:00             locale:ar sa:calendar day  423.1   today at the same time      javascript // Expected                    :   // Actual                      :                       :    ==                     :               locale:ar sa:calendar day  423.2   Now plus 25 min      javascript // Expected                    :   // Actual                      :                       :    ==                     :               locale:ar sa:calendar day  423.3   Now plus 1 hour      javascript // Expected                    :   // Actual                      :                       :    ==                     :               locale:ar sa:calendar day  423.4   tomorrow at the same time      javascript // Expected                  :   // Actual                    :                     :    ==                   :               locale:ar sa:calendar day  423.5   Now minus 1 hour      javascript // Expected                    :   // Actual                      :                       :    ==                     :               locale:ar sa:calendar day  423.6   yesterday at the same time      javascript // Expected                  :   // Actual                    :                     :    ==                   :               locale:ar:calendar day  444.1   today at the same time      javascript // Expected                    :   // Actual                      :                       :    ==                     :               locale:ar:calendar day  444.2   Now plus 25 min      javascript // Expected                    :   // Actual                      :                       :    ==                     :               locale:ar:calendar day  444.3   Now plus 1 hour      javascript // Expected                    :   // Actual                      :                       :    ==                     :               locale:ar:calendar day  444.4   tomorrow at the same time      javascript // Expected                   :   // Actual                     :                      :    ==                    :               locale:ar:calendar day  444.5   Now minus 1 hour      javascript // Expected                    :   // Actual                      :                       :    ==                     :               locale:ar:calendar day  444.6   yesterday at the same time      javascript // Expected                  :   // Actual                    :                     :    ==                   :               locale:az:calendar day  465.1   today at the same time      javascript // Expected bug n saat 02:00 // Actual   bug n saat 01:00  bug n saat 01:00  ==  bug n saat 02:00             locale:az:calendar day  465.2   Now plus 25 min      javascript // Expected bug n saat 02:25 // Actual   bug n saat 01:25  bug n saat 01:25  ==  bug n saat 02:25             locale:az:calendar day  465.3   Now plus 1 hour      javascript // Expected bug n saat 03:00 // Actual   bug n saat 01:00  bug n saat 01:00  ==  bug n saat 03:00             locale:az:calendar day  465.4   tomorrow at the same time      javascript // Expected sabah saat 02:00 // Actual   sabah saat 01:00  sabah saat 01:00  ==  sabah saat 02:00             locale:az:calendar day  465.5   Now minus 1 hour      javascript // Expected bug n saat 01:00 // Actual   bug n saat 00:00  bug n saat 00:00  ==  bug n saat 01:00             locale:az:calendar day  465.6   yesterday at the same time      javascript // Expected d n n 02:00 // Actual   d n n 01:00  d n n 01:00  ==  d n n 02:00             locale:be:calendar day  488.1   today at the same time      javascript // Expected         02:00 // Actual           01:00          01:00  ==          02:00             locale:be:calendar day  488.2   Now plus 25 min      javascript // Expected         02:25 // Actual           01:25          01:25  ==          02:25             locale:be:calendar day  488.3   Now plus 1 hour      javascript // Expected         03:00 // Actual           01:00          01:00  ==          03:00             locale:be:calendar day  488.4   tomorrow at the same time      javascript // Expected          02:00 // Actual            01:00           01:00  ==           02:00             locale:be:calendar day  488.5   Now minus 1 hour      javascript // Expected         01:00 // Actual           00:00          00:00  ==          01:00             locale:be:calendar day  488.6   yesterday at the same time      javascript // Expected         02:00 // Actual           01:00          01:00  ==          02:00             locale:bg:calendar day  509.1   today at the same time      javascript // Expected        2:00 // Actual          1:00         1:00  ==         2:00             locale:bg:calendar day  509.2   Now plus 25 min      javascript // Expected        2:25 // Actual          1:25         1:25  ==         2:25             locale:bg:calendar day  509.3   Now plus 1 hour      javascript // Expected        3:00 // Actual          1:00         1:00  ==         3:00             locale:bg:calendar day  509.4   tomorrow at the same time      javascript // Expected        2:00 // Actual          1:00         1:00  ==         2:00             locale:bg:calendar day  509.5   Now minus 1 hour      javascript // Expected        1:00 // Actual          0:00         0:00  ==         1:00             locale:bg:calendar day  509.6   yesterday at the same time      javascript // Expected         2:00 // Actual           1:00          1:00  ==          2:00             locale:bn:calendar day  530.1   today at the same time      javascript // Expected         :        // Actual           :                 :         ==          :                    locale:bn:calendar day  530.2   Now plus 25 min      javascript // Expected         :        // Actual           :                 :         ==          :                    locale:bn:calendar day  530.3   Now plus 3 hour      javascript // Expected          :        // Actual           :                 :         ==           :                    locale:bn:calendar day  530.4   tomorrow at the same time      javascript // Expected               :        // Actual                 :                       :         ==                :                    locale:bn:calendar day  530.5   Now minus 1 hour      javascript // Expected         :        // Actual            :                  :         ==          :                    locale:bn:calendar day  530.6   yesterday at the same time      javascript // Expected            :        // Actual              :                    :         ==             :                    locale:bo:calendar day  552.1   today at the same time      javascript // Expected                :   // Actual                  :                   :    ==                 :               locale:bo:calendar day  552.2   Now plus 25 min      javascript // Expected                :   // Actual                  :                   :    ==                 :               locale:bo:calendar day  552.3   Now plus 3 hour      javascript // Expected                 :   // Actual                  :                   :    ==                  :               locale:bo:calendar day  552.4   tomorrow at the same time      javascript // Expected                :   // Actual                  :                   :    ==                 :               locale:bo:calendar day  552.5   Now minus 1 hour      javascript // Expected                :   // Actual                   :                    :    ==                 :               locale:bo:calendar day  552.6   yesterday at the same time      javascript // Expected              :   // Actual                :                 :    ==               :               locale:br:calendar day  574.1   today at the same time      javascript // Expected Hiziv da 2e00 AM // Actual   Hiziv da 1e00 AM  Hiziv da 1e00 AM  ==  Hiziv da 2e00 AM             locale:br:calendar day  574.2   Now plus 25 min      javascript // Expected Hiziv da 2e25 AM // Actual   Hiziv da 1e25 AM  Hiziv da 1e25 AM  ==  Hiziv da 2e25 AM             locale:br:calendar day  574.3   Now plus 1 hour      javascript // Expected Hiziv da 3e00 AM // Actual   Hiziv da 1e00 AM  Hiziv da 1e00 AM  ==  Hiziv da 3e00 AM             locale:br:calendar day  574.4   tomorrow at the same time      javascript // Expected Warc hoazh da 2e00 AM // Actual   Warc hoazh da 1e00 AM  Warc hoazh da 1e00 AM  ==  Warc hoazh da 2e00 AM             locale:br:calendar day  574.5   Now minus 1 hour      javascript // Expected Hiziv da 1e00 AM // Actual   Hiziv da 12e00 AM  Hiziv da 12e00 AM  ==  Hiziv da 1e00 AM             locale:br:calendar day  574.6   yesterday at the same time      javascript // Expected Dec h da 2e00 AM // Actual   Dec h da 1e00 AM  Dec h da 1e00 AM  ==  Dec h da 2e00 AM             locale:bs:calendar day  588.1   today at the same time      javascript // Expected danas u 2:00 // Actual   danas u 1:00  danas u 1:00  ==  danas u 2:00             locale:bs:calendar day  588.2   Now plus 25 min      javascript // Expected danas u 2:25 // Actual   danas u 1:25  danas u 1:25  ==  danas u 2:25             locale:bs:calendar day  588.3   Now plus 1 hour      javascript // Expected danas u 3:00 // Actual   danas u 1:00  danas u 1:00  ==  danas u 3:00             locale:bs:calendar day  588.4   tomorrow at the same time      javascript // Expected sutra u 2:00 // Actual   sutra u 1:00  sutra u 1:00  ==  sutra u 2:00             locale:bs:calendar day  588.5   Now minus 1 hour      javascript // Expected danas u 1:00 // Actual   danas u 0:00  danas u 0:00  ==  danas u 1:00             locale:bs:calendar day  588.6   yesterday at the same time      javascript // Expected ju er u 2:00 // Actual   ju er u 1:00  ju er u 1:00  ==  ju er u 2:00             locale:ca:calendar day  608.1   today at the same time      javascript // Expected avui a les 2:00 // Actual   avui a la 1:00  avui a la 1:00  ==  avui a les 2:00             locale:ca:calendar day  608.2   Now plus 25 min      javascript // Expected avui a les 2:25 // Actual   avui a la 1:25  avui a la 1:25  ==  avui a les 2:25             locale:ca:calendar day  608.3   Now plus 1 hour      javascript // Expected avui a les 3:00 // Actual   avui a la 1:00  avui a la 1:00  ==  avui a les 3:00             locale:ca:calendar day  608.4   tomorrow at the same time      javascript // Expected dem  a les 2:00 // Actual   dem  a la 1:00  dem  a la 1:00  ==  dem  a les 2:00             locale:ca:calendar day  608.5   tomorrow minus 1 hour      javascript // Expected dem  a la 1:00 // Actual   dem  a les 0:00  dem  a les 0:00  ==  dem  a la 1:00             locale:ca:calendar day  608.6   Now minus 1 hour      javascript // Expected avui a la 1:00 // Actual   avui a les 0:00  avui a les 0:00  ==  avui a la 1:00             locale:ca:calendar day  608.7   yesterday at the same time      javascript // Expected ahir a les 2:00 // Actual   ahir a la 1:00  ahir a la 1:00  ==  ahir a les 2:00             locale:cs:calendar day  630.1   today at the same time      javascript // Expected dnes v 2:00 // Actual   dnes v 1:00  dnes v 1:00  ==  dnes v 2:00             locale:cs:calendar day  630.2   Now plus 25 min      javascript // Expected dnes v 2:25 // Actual   dnes v 1:25  dnes v 1:25  ==  dnes v 2:25             locale:cs:calendar day  630.3   Now plus 1 hour      javascript // Expected dnes v 3:00 // Actual   dnes v 1:00  dnes v 1:00  ==  dnes v 3:00             locale:cs:calendar day  630.4   tomorrow at the same time      javascript // Expected z tra v 2:00 // Actual   z tra v 1:00  z tra v 1:00  ==  z tra v 2:00             locale:cs:calendar day  630.5   Now minus 1 hour      javascript // Expected dnes v 1:00 // Actual   dnes v 0:00  dnes v 0:00  ==  dnes v 1:00             locale:cs:calendar day  630.6   yesterday at the same time      javascript // Expected v era v 2:00 // Actual   v era v 1:00  v era v 1:00  ==  v era v 2:00             locale:cv:calendar day  652.1   today at the same time      javascript // Expected      02:00         // Actual        01:00               01:00          ==       02:00                     locale:cv:calendar day  652.2   Now plus 25 min      javascript // Expected      02:25         // Actual        01:25               01:25          ==       02:25                     locale:cv:calendar day  652.3   Now plus 1 hour      javascript // Expected      03:00         // Actual        01:00               01:00          ==       03:00                     locale:cv:calendar day  652.4   tomorrow at the same time      javascript // Expected      02:00         // Actual        01:00               01:00          ==       02:00                     locale:cv:calendar day  652.5   Now minus 1 hour      javascript // Expected      01:00         // Actual        00:00               00:00          ==       01:00                     locale:cv:calendar day  652.6   yesterday at the same time      javascript // Expected      02:00         // Actual        01:00               01:00          ==       02:00                     locale:cy:same day  672.1   today at the same time      javascript // Expected Heddiw am 02:00 // Actual   Heddiw am 01:00  Heddiw am 01:00  ==  Heddiw am 02:00             locale:cy:same day  672.2   Now plus 25 min      javascript // Expected Heddiw am 02:25 // Actual   Heddiw am 01:25  Heddiw am 01:25  ==  Heddiw am 02:25             locale:cy:same day  672.3   Now plus 1 hour      javascript // Expected Heddiw am 03:00 // Actual   Heddiw am 01:00  Heddiw am 01:00  ==  Heddiw am 03:00             locale:cy:same day  672.4   tomorrow at the same time      javascript // Expected Yfory am 02:00 // Actual   Yfory am 01:00  Yfory am 01:00  ==  Yfory am 02:00             locale:cy:same day  672.5   Now minus 1 hour      javascript // Expected Heddiw am 01:00 // Actual   Heddiw am 00:00  Heddiw am 00:00  ==  Heddiw am 01:00             locale:cy:same day  672.6   yesterday at the same time      javascript // Expected Ddoe am 02:00 // Actual   Ddoe am 01:00  Ddoe am 01:00  ==  Ddoe am 02:00             locale:de at:calendar day  709.1   today at the same time      javascript // Expected Heute um 02:00 Uhr // Actual   Heute um 01:00 Uhr  Heute um 01:00 Uhr  ==  Heute um 02:00 Uhr             locale:de at:calendar day  709.2   Now plus 25 min      javascript // Expected Heute um 02:25 Uhr // Actual   Heute um 01:25 Uhr  Heute um 01:25 Uhr  ==  Heute um 02:25 Uhr             locale:de at:calendar day  709.3   Now plus 1 hour      javascript // Expected Heute um 03:00 Uhr // Actual   Heute um 01:00 Uhr  Heute um 01:00 Uhr  ==  Heute um 03:00 Uhr             locale:de at:calendar day  709.4   tomorrow at the same time      javascript // Expected Morgen um 02:00 Uhr // Actual   Morgen um 01:00 Uhr  Morgen um 01:00 Uhr  ==  Morgen um 02:00 Uhr             locale:de at:calendar day  709.5   Now minus 1 hour      javascript // Expected Heute um 01:00 Uhr // Actual   Heute um 00:00 Uhr  Heute um 00:00 Uhr  ==  Heute um 01:00 Uhr             locale:de at:calendar day  709.6   yesterday at the same time      javascript // Expected Gestern um 02:00 Uhr // Actual   Gestern um 01:00 Uhr  Gestern um 01:00 Uhr  ==  Gestern um 02:00 Uhr             locale:de:calendar day  729.1   today at the same time      javascript // Expected Heute um 02:00 Uhr // Actual   Heute um 01:00 Uhr  Heute um 01:00 Uhr  ==  Heute um 02:00 Uhr             locale:de:calendar day  729.2   Now plus 25 min      javascript // Expected Heute um 02:25 Uhr // Actual   Heute um 01:25 Uhr  Heute um 01:25 Uhr  ==  Heute um 02:25 Uhr             locale:de:calendar day  729.3   Now plus 1 hour      javascript // Expected Heute um 03:00 Uhr // Actual   Heute um 01:00 Uhr  Heute um 01:00 Uhr  ==  Heute um 03:00 Uhr             locale:de:calendar day  729.4   tomorrow at the same time      javascript // Expected Morgen um 02:00 Uhr // Actual   Morgen um 01:00 Uhr  Morgen um 01:00 Uhr  ==  Morgen um 02:00 Uhr             locale:de:calendar day  729.5   Now minus 1 hour      javascript // Expected Heute um 01:00 Uhr // Actual   Heute um 00:00 Uhr  Heute um 00:00 Uhr  ==  Heute um 01:00 Uhr             locale:de:calendar day  729.6   yesterday at the same time      javascript // Expected Gestern um 02:00 Uhr // Actual   Gestern um 01:00 Uhr  Gestern um 01:00 Uhr  ==  Gestern um 02:00 Uhr             locale:el:calendar day  751.1   today at the same time      javascript // Expected             2:00    // Actual              1:00                1:00     ==              2:00                locale:el:calendar day  751.2   Now plus 25 min      javascript // Expected             2:25    // Actual              1:25                1:25     ==              2:25                locale:el:calendar day  751.3   Now plus 1 hour      javascript // Expected             3:00    // Actual              1:00                1:00     ==              3:00                locale:el:calendar day  751.4   tomorrow at the same time      javascript // Expected            2:00    // Actual             1:00               1:00     ==             2:00                locale:el:calendar day  751.5   Now minus 1 hour      javascript // Expected            1:00    // Actual               12:00                 12:00     ==             1:00                locale:el:calendar day  751.6   yesterday at the same time      javascript // Expected           2:00    // Actual            1:00              1:00     ==            2:00                locale:en au:calendar day  772.1   today at the same time      javascript // Expected Today at 2:00 AM // Actual   Today at 1:00 AM  Today at 1:00 AM  ==  Today at 2:00 AM             locale:en au:calendar day  772.2   Now plus 25 min      javascript // Expected Today at 2:25 AM // Actual   Today at 1:25 AM  Today at 1:25 AM  ==  Today at 2:25 AM             locale:en au:calendar day  772.3   Now plus 1 hour      javascript // Expected Today at 3:00 AM // Actual   Today at 1:00 AM  Today at 1:00 AM  ==  Today at 3:00 AM             locale:en au:calendar day  772.4   tomorrow at the same time      javascript // Expected Tomorrow at 2:00 AM // Actual   Tomorrow at 1:00 AM  Tomorrow at 1:00 AM  ==  Tomorrow at 2:00 AM             locale:en au:calendar day  772.5   Now minus 1 hour      javascript // Expected Today at 1:00 AM // Actual   Today at 12:00 AM  Today at 12:00 AM  ==  Today at 1:00 AM             locale:en au:calendar day  772.6   yesterday at the same time      javascript // Expected Yesterday at 2:00 AM // Actual   Yesterday at 1:00 AM  Yesterday at 1:00 AM  ==  Yesterday at 2:00 AM             locale:en ca:calendar day  793.1   today at the same time      javascript // Expected Today at 2:00 AM // Actual   Today at 1:00 AM  Today at 1:00 AM  ==  Today at 2:00 AM             locale:en ca:calendar day  793.2   Now plus 25 min      javascript // Expected Today at 2:25 AM // Actual   Today at 1:25 AM  Today at 1:25 AM  ==  Today at 2:25 AM             locale:en ca:calendar day  793.3   Now plus 1 hour      javascript // Expected Today at 3:00 AM // Actual   Today at 1:00 AM  Today at 1:00 AM  ==  Today at 3:00 AM             locale:en ca:calendar day  793.4   tomorrow at the same time      javascript // Expected Tomorrow at 2:00 AM // Actual   Tomorrow at 1:00 AM  Tomorrow at 1:00 AM  ==  Tomorrow at 2:00 AM             locale:en ca:calendar day  793.5   Now minus 1 hour      javascript // Expected Today at 1:00 AM // Actual   Today at 12:00 AM  Today at 12:00 AM  ==  Today at 1:00 AM             locale:en ca:calendar day  793.6   yesterday at the same time      javascript // Expected Yesterday at 2:00 AM // Actual   Yesterday at 1:00 AM  Yesterday at 1:00 AM  ==  Yesterday at 2:00 AM             locale:en gb:calendar day  814.1   today at the same time      javascript // Expected Today at 02:00 // Actual   Today at 01:00  Today at 01:00  ==  Today at 02:00             locale:en gb:calendar day  814.2   Now plus 25 min      javascript // Expected Today at 02:25 // Actual   Today at 01:25  Today at 01:25  ==  Today at 02:25             locale:en gb:calendar day  814.3   Now plus 1 hour      javascript // Expected Today at 03:00 // Actual   Today at 01:00  Today at 01:00  ==  Today at 03:00             locale:en gb:calendar day  814.4   tomorrow at the same time      javascript // Expected Tomorrow at 02:00 // Actual   Tomorrow at 01:00  Tomorrow at 01:00  ==  Tomorrow at 02:00             locale:en gb:calendar day  814.5   Now minus 1 hour      javascript // Expected Today at 01:00 // Actual   Today at 00:00  Today at 00:00  ==  Today at 01:00             locale:en gb:calendar day  814.6   yesterday at the same time      javascript // Expected Yesterday at 02:00 // Actual   Yesterday at 01:00  Yesterday at 01:00  ==  Yesterday at 02:00             locale:en:calendar day  835.1   today at the same time      javascript // Expected Today at 2:00 AM // Actual   Today at 1:00 AM  Today at 1:00 AM  ==  Today at 2:00 AM             locale:en:calendar day  835.2   Now plus 25 min      javascript // Expected Today at 2:25 AM // Actual   Today at 1:25 AM  Today at 1:25 AM  ==  Today at 2:25 AM             locale:en:calendar day  835.3   Now plus 1 hour      javascript // Expected Today at 3:00 AM // Actual   Today at 1:00 AM  Today at 1:00 AM  ==  Today at 3:00 AM             locale:en:calendar day  835.4   tomorrow at the same time      javascript // Expected Tomorrow at 2:00 AM // Actual   Tomorrow at 1:00 AM  Tomorrow at 1:00 AM  ==  Tomorrow at 2:00 AM             locale:en:calendar day  835.5   Now minus 1 hour      javascript // Expected Today at 1:00 AM // Actual   Today at 12:00 AM  Today at 12:00 AM  ==  Today at 1:00 AM             locale:en:calendar day  835.6   yesterday at the same time      javascript // Expected Yesterday at 2:00 AM // Actual   Yesterday at 1:00 AM  Yesterday at 1:00 AM  ==  Yesterday at 2:00 AM             locale:eo:calendar day  856.1   today at the same time      javascript // Expected Hodia  je 02:00 // Actual   Hodia  je 01:00  Hodia  je 01:00  ==  Hodia  je 02:00             locale:eo:calendar day  856.2   Now plus 25 min      javascript // Expected Hodia  je 02:25 // Actual   Hodia  je 01:25  Hodia  je 01:25  ==  Hodia  je 02:25             locale:eo:calendar day  856.3   Now plus 1 hour      javascript // Expected Hodia  je 03:00 // Actual   Hodia  je 01:00  Hodia  je 01:00  ==  Hodia  je 03:00             locale:eo:calendar day  856.4   tomorrow at the same time      javascript // Expected Morga  je 02:00 // Actual   Morga  je 01:00  Morga  je 01:00  ==  Morga  je 02:00             locale:eo:calendar day  856.5   Now minus 1 hour      javascript // Expected Hodia  je 01:00 // Actual   Hodia  je 00:00  Hodia  je 00:00  ==  Hodia  je 01:00             locale:eo:calendar day  856.6   yesterday at the same time      javascript // Expected Hiera  je 02:00 // Actual   Hiera  je 01:00  Hiera  je 01:00  ==  Hiera  je 02:00             locale:es:calendar day  877.1   today at the same time      javascript // Expected hoy a las 2:00 // Actual   hoy a la 1:00  hoy a la 1:00  ==  hoy a las 2:00             locale:es:calendar day  877.2   Now plus 25 min      javascript // Expected hoy a las 2:25 // Actual   hoy a la 1:25  hoy a la 1:25  ==  hoy a las 2:25             locale:es:calendar day  877.3   Now plus 1 hour      javascript // Expected hoy a las 3:00 // Actual   hoy a la 1:00  hoy a la 1:00  ==  hoy a las 3:00             locale:es:calendar day  877.4   tomorrow at the same time      javascript // Expected ma ana a las 2:00 // Actual   ma ana a la 1:00  ma ana a la 1:00  ==  ma ana a las 2:00             locale:es:calendar day  877.5   tomorrow minus 1 hour      javascript // Expected ma ana a la 1:00 // Actual   ma ana a las 0:00  ma ana a las 0:00  ==  ma ana a la 1:00             locale:es:calendar day  877.6   Now minus 1 hour      javascript // Expected hoy a la 1:00 // Actual   hoy a las 0:00  hoy a las 0:00  ==  hoy a la 1:00             locale:es:calendar day  877.7   yesterday at the same time      javascript // Expected ayer a las 2:00 // Actual   ayer a la 1:00  ayer a la 1:00  ==  ayer a las 2:00             locale:et:calendar day  898.1   today at the same time      javascript // Expected T na  2:00 // Actual   T na  1:00  T na  1:00  ==  T na  2:00             locale:et:calendar day  898.2   Now plus 25 min      javascript // Expected T na  2:25 // Actual   T na  1:25  T na  1:25  ==  T na  2:25             locale:et:calendar day  898.3   Now plus 1 hour      javascript // Expected T na  3:00 // Actual   T na  1:00  T na  1:00  ==  T na  3:00             locale:et:calendar day  898.4   tomorrow at the same time      javascript // Expected Homme  2:00 // Actual   Homme  1:00  Homme  1:00  ==  Homme  2:00             locale:et:calendar day  898.5   Now minus 1 hour      javascript // Expected T na  1:00 // Actual   T na  0:00  T na  0:00  ==  T na  1:00             locale:et:calendar day  898.6   yesterday at the same time      javascript // Expected Eile  2:00 // Actual   Eile  1:00  Eile  1:00  ==  Eile  2:00             locale:eu:calendar day  919.1   today at the same time      javascript // Expected gaur 02:00etan // Actual   gaur 01:00etan  gaur 01:00etan  ==  gaur 02:00etan             locale:eu:calendar day  919.2   now plus 25 min      javascript // Expected gaur 02:25etan // Actual   gaur 01:25etan  gaur 01:25etan  ==  gaur 02:25etan             locale:eu:calendar day  919.3   now plus 1 hour      javascript // Expected gaur 03:00etan // Actual   gaur 01:00etan  gaur 01:00etan  ==  gaur 03:00etan             locale:eu:calendar day  919.4   tomorrow at the same time      javascript // Expected bihar 02:00etan // Actual   bihar 01:00etan  bihar 01:00etan  ==  bihar 02:00etan             locale:eu:calendar day  919.5   now minus 1 hour      javascript // Expected gaur 01:00etan // Actual   gaur 00:00etan  gaur 00:00etan  ==  gaur 01:00etan             locale:eu:calendar day  919.6   yesterday at the same time      javascript // Expected atzo 02:00etan // Actual   atzo 01:00etan  atzo 01:00etan  ==  atzo 02:00etan             locale:fa:calendar day  940.1   today at the same time      javascript // Expected              :   // Actual                :                 :    ==               :               locale:fa:calendar day  940.2   Now plus 25 min      javascript // Expected              :   // Actual                :                 :    ==               :               locale:fa:calendar day  940.3   Now plus 1 hour      javascript // Expected              :   // Actual                :                 :    ==               :               locale:fa:calendar day  940.4   tomorrow at the same time      javascript // Expected             :   // Actual               :                :    ==              :               locale:fa:calendar day  940.5   Now minus 1 hour      javascript // Expected              :   // Actual                :                 :    ==               :               locale:fa:calendar day  940.6   yesterday at the same time      javascript // Expected              :   // Actual                :                 :    ==               :               locale:fi:calendar day  961.1   today at the same time      javascript // Expected t n  n klo 02.00 // Actual   t n  n klo 01.00  t n  n klo 01.00  ==  t n  n klo 02.00             locale:fi:calendar day  961.2   Now plus 25 min      javascript // Expected t n  n klo 02.25 // Actual   t n  n klo 01.25  t n  n klo 01.25  ==  t n  n klo 02.25             locale:fi:calendar day  961.3   Now plus 1 hour      javascript // Expected t n  n klo 03.00 // Actual   t n  n klo 01.00  t n  n klo 01.00  ==  t n  n klo 03.00             locale:fi:calendar day  961.4   tomorrow at the same time      javascript // Expected huomenna klo 02.00 // Actual   huomenna klo 01.00  huomenna klo 01.00  ==  huomenna klo 02.00             locale:fi:calendar day  961.5   Now minus 1 hour      javascript // Expected t n  n klo 01.00 // Actual   t n  n klo 00.00  t n  n klo 00.00  ==  t n  n klo 01.00             locale:fi:calendar day  961.6   yesterday at the same time      javascript // Expected eilen klo 02.00 // Actual   eilen klo 01.00  eilen klo 01.00  ==  eilen klo 02.00             locale:fr ca:same day  998.1   today at the same time      javascript // Expected Aujourd hui   02:00 // Actual   Aujourd hui   01:00  Aujourd hui   01:00  ==  Aujourd hui   02:00             locale:fr ca:same day  998.2   Now plus 25 min      javascript // Expected Aujourd hui   02:25 // Actual   Aujourd hui   01:25  Aujourd hui   01:25  ==  Aujourd hui   02:25             locale:fr ca:same day  998.3   Now plus 1 hour      javascript // Expected Aujourd hui   03:00 // Actual   Aujourd hui   01:00  Aujourd hui   01:00  ==  Aujourd hui   03:00             locale:fr ca:same day  998.4   tomorrow at the same time      javascript // Expected Demain   02:00 // Actual   Demain   01:00  Demain   01:00  ==  Demain   02:00             locale:fr ca:same day  998.5   Now minus 1 hour      javascript // Expected Aujourd hui   01:00 // Actual   Aujourd hui   00:00  Aujourd hui   00:00  ==  Aujourd hui   01:00             locale:fr ca:same day  998.6   yesterday at the same time      javascript // Expected Hier   02:00 // Actual   Hier   01:00  Hier   01:00  ==  Hier   02:00             locale:fr:same day  1018.1   today at the same time      javascript // Expected Aujourd hui   02:00 // Actual   Aujourd hui   01:00  Aujourd hui   01:00  ==  Aujourd hui   02:00             locale:fr:same day  1018.2   Now plus 25 min      javascript // Expected Aujourd hui   02:25 // Actual   Aujourd hui   01:25  Aujourd hui   01:25  ==  Aujourd hui   02:25             locale:fr:same day  1018.3   Now plus 1 hour      javascript // Expected Aujourd hui   03:00 // Actual   Aujourd hui   01:00  Aujourd hui   01:00  ==  Aujourd hui   03:00             locale:fr:same day  1018.4   tomorrow at the same time      javascript // Expected Demain   02:00 // Actual   Demain   01:00  Demain   01:00  ==  Demain   02:00             locale:fr:same day  1018.5   Now minus 1 hour      javascript // Expected Aujourd hui   01:00 // Actual   Aujourd hui   00:00  Aujourd hui   00:00  ==  Aujourd hui   01:00             locale:fr:same day  1018.6   yesterday at the same time      javascript // Expected Hier   02:00 // Actual   Hier   01:00  Hier   01:00  ==  Hier   02:00             locale:gl:calendar day  1038.1   today at the same time      javascript // Expected hoxe  s 2:00 // Actual   hoxe   1:00  hoxe   1:00  ==  hoxe  s 2:00             locale:gl:calendar day  1038.2   Now plus 25 min      javascript // Expected hoxe  s 2:25 // Actual   hoxe   1:25  hoxe   1:25  ==  hoxe  s 2:25             locale:gl:calendar day  1038.3   Now plus 1 hour      javascript // Expected hoxe  s 3:00 // Actual   hoxe   1:00  hoxe   1:00  ==  hoxe  s 3:00             locale:gl:calendar day  1038.4   tomorrow at the same time      javascript // Expected ma    s 2:00 // Actual   ma     1:00  ma     1:00  ==  ma    s 2:00             locale:gl:calendar day  1038.5   tomorrow minus 1 hour      javascript // Expected ma     1:00 // Actual   ma    s 0:00  ma    s 0:00  ==  ma     1:00             locale:gl:calendar day  1038.6   Now minus 1 hour      javascript // Expected hoxe   1:00 // Actual   hoxe  s 0:00  hoxe  s 0:00  ==  hoxe   1:00             locale:gl:calendar day  1038.7   yesterday at the same time      javascript // Expected onte   2:00 // Actual   onte a 1:00  onte a 1:00  ==  onte   2:00             locale:he:calendar day  1059.1   today at the same time      javascript // Expected        02:00 // Actual          01:00         01:00  ==         02:00             locale:he:calendar day  1059.2   Now plus 25 min      javascript // Expected        02:25 // Actual          01:25         01:25  ==         02:25             locale:he:calendar day  1059.3   Now plus 1 hour      javascript // Expected        03:00 // Actual          01:00         01:00  ==         03:00             locale:he:calendar day  1059.4   tomorrow at the same time      javascript // Expected       02:00 // Actual         01:00        01:00  ==        02:00             locale:he:calendar day  1059.5   Now minus 1 hour      javascript // Expected        01:00 // Actual          00:00         00:00  ==         01:00             locale:he:calendar day  1059.6   yesterday at the same time      javascript // Expected         02:00 // Actual           01:00          01:00  ==          02:00             locale:hi:calendar day  1080.1   today at the same time      javascript // Expected         :       // Actual           :                :        ==          :                   locale:hi:calendar day  1080.2   Now plus 25 min      javascript // Expected         :       // Actual           :                :        ==          :                   locale:hi:calendar day  1080.3   Now plus 3 hour      javascript // Expected          :       // Actual           :                :        ==           :                   locale:hi:calendar day  1080.4   tomorrow at the same time      javascript // Expected         :       // Actual           :                :        ==          :                   locale:hi:calendar day  1080.5   Now minus 1 hour      javascript // Expected         :       // Actual            :                 :        ==          :                   locale:hi:calendar day  1080.6   yesterday at the same time      javascript // Expected         :       // Actual           :                :        ==          :                   locale:hr:calendar day  1102.1   today at the same time      javascript // Expected danas u 2:00 // Actual   danas u 1:00  danas u 1:00  ==  danas u 2:00             locale:hr:calendar day  1102.2   Now plus 25 min      javascript // Expected danas u 2:25 // Actual   danas u 1:25  danas u 1:25  ==  danas u 2:25             locale:hr:calendar day  1102.3   Now plus 1 hour      javascript // Expected danas u 3:00 // Actual   danas u 1:00  danas u 1:00  ==  danas u 3:00             locale:hr:calendar day  1102.4   tomorrow at the same time      javascript // Expected sutra u 2:00 // Actual   sutra u 1:00  sutra u 1:00  ==  sutra u 2:00             locale:hr:calendar day  1102.5   Now minus 1 hour      javascript // Expected danas u 1:00 // Actual   danas u 0:00  danas u 0:00  ==  danas u 1:00             locale:hr:calendar day  1102.6   yesterday at the same time      javascript // Expected ju er u 2:00 // Actual   ju er u 1:00  ju er u 1:00  ==  ju er u 2:00             locale:hu:calendar day  1124.1   today at the same time      javascript // Expected ma 2:00 kor // Actual   ma 1:00 kor  ma 1:00 kor  ==  ma 2:00 kor             locale:hu:calendar day  1124.2   Now plus 25 min      javascript // Expected ma 2:25 kor // Actual   ma 1:25 kor  ma 1:25 kor  ==  ma 2:25 kor             locale:hu:calendar day  1124.3   Now plus 1 hour      javascript // Expected ma 3:00 kor // Actual   ma 1:00 kor  ma 1:00 kor  ==  ma 3:00 kor             locale:hu:calendar day  1124.4   tomorrow at the same time      javascript // Expected holnap 2:00 kor // Actual   holnap 1:00 kor  holnap 1:00 kor  ==  holnap 2:00 kor             locale:hu:calendar day  1124.5   Now minus 1 hour      javascript // Expected ma 1:00 kor // Actual   ma 0:00 kor  ma 0:00 kor  ==  ma 1:00 kor             locale:hu:calendar day  1124.6   yesterday at the same time      javascript // Expected tegnap 2:00 kor // Actual   tegnap 1:00 kor  tegnap 1:00 kor  ==  tegnap 2:00 kor             locale:hy am:calendar day  1150.1   today at the same time      javascript // Expected       02:00 // Actual         01:00        01:00  ==        02:00             locale:hy am:calendar day  1150.2   Now plus 25 min      javascript // Expected       02:25 // Actual         01:25        01:25  ==        02:25             locale:hy am:calendar day  1150.3   Now plus 1 hour      javascript // Expected       03:00 // Actual         01:00        01:00  ==        03:00             locale:hy am:calendar day  1150.4   tomorrow at the same time      javascript // Expected      02:00 // Actual        01:00       01:00  ==       02:00             locale:hy am:calendar day  1150.5   Now minus 1 hour      javascript // Expected       01:00 // Actual         00:00        00:00  ==        01:00             locale:hy am:calendar day  1150.6   yesterday at the same time      javascript // Expected      02:00 // Actual        01:00       01:00  ==       02:00             locale:id:calendar day  1170.1   today at the same time      javascript // Expected Hari ini pukul 02.00 // Actual   Hari ini pukul 01.00  Hari ini pukul 01.00  ==  Hari ini pukul 02.00             locale:id:calendar day  1170.2   Now plus 25 min      javascript // Expected Hari ini pukul 02.25 // Actual   Hari ini pukul 01.25  Hari ini pukul 01.25  ==  Hari ini pukul 02.25             locale:id:calendar day  1170.3   Now plus 1 hour      javascript // Expected Hari ini pukul 03.00 // Actual   Hari ini pukul 01.00  Hari ini pukul 01.00  ==  Hari ini pukul 03.00             locale:id:calendar day  1170.4   tomorrow at the same time      javascript // Expected Besok pukul 02.00 // Actual   Besok pukul 01.00  Besok pukul 01.00  ==  Besok pukul 02.00             locale:id:calendar day  1170.5   Now minus 1 hour      javascript // Expected Hari ini pukul 01.00 // Actual   Hari ini pukul 00.00  Hari ini pukul 00.00  ==  Hari ini pukul 01.00             locale:id:calendar day  1170.6   yesterday at the same time      javascript // Expected Kemarin pukul 02.00 // Actual   Kemarin pukul 01.00  Kemarin pukul 01.00  ==  Kemarin pukul 02.00             locale:is:calendar day  1191.1   today at the same time      javascript // Expected   dag kl. 2:00 // Actual     dag kl. 1:00    dag kl. 1:00  ==    dag kl. 2:00             locale:is:calendar day  1191.2   Now plus 25 min      javascript // Expected   dag kl. 2:25 // Actual     dag kl. 1:25    dag kl. 1:25  ==    dag kl. 2:25             locale:is:calendar day  1191.3   Now plus 1 hour      javascript // Expected   dag kl. 3:00 // Actual     dag kl. 1:00    dag kl. 1:00  ==    dag kl. 3:00             locale:is:calendar day  1191.4   tomorrow at the same time      javascript // Expected   morgun kl. 2:00 // Actual     morgun kl. 1:00    morgun kl. 1:00  ==    morgun kl. 2:00             locale:is:calendar day  1191.5   Now minus 1 hour      javascript // Expected   dag kl. 1:00 // Actual     dag kl. 0:00    dag kl. 0:00  ==    dag kl. 1:00             locale:is:calendar day  1191.6   yesterday at the same time      javascript // Expected   g r kl. 2:00 // Actual     g r kl. 1:00    g r kl. 1:00  ==    g r kl. 2:00             locale:it:calendar day  1211.1   today at the same time      javascript // Expected Oggi alle 02:00 // Actual   Oggi alle 01:00  Oggi alle 01:00  ==  Oggi alle 02:00             locale:it:calendar day  1211.2   Now plus 25 min      javascript // Expected Oggi alle 02:25 // Actual   Oggi alle 01:25  Oggi alle 01:25  ==  Oggi alle 02:25             locale:it:calendar day  1211.3   Now plus 1 hour      javascript // Expected Oggi alle 03:00 // Actual   Oggi alle 01:00  Oggi alle 01:00  ==  Oggi alle 03:00             locale:it:calendar day  1211.4   tomorrow at the same time      javascript // Expected Domani alle 02:00 // Actual   Domani alle 01:00  Domani alle 01:00  ==  Domani alle 02:00             locale:it:calendar day  1211.5   Now minus 1 hour      javascript // Expected Oggi alle 01:00 // Actual   Oggi alle 00:00  Oggi alle 00:00  ==  Oggi alle 01:00             locale:it:calendar day  1211.6   yesterday at the same time      javascript // Expected Ieri alle 02:00 // Actual   Ieri alle 01:00  Ieri alle 01:00  ==  Ieri alle 02:00             locale:ja:calendar day  1231.1   today at the same time      javascript // Expected      2 0  // Actual        1 0        1 0   ==       2 0              locale:ja:calendar day  1231.2   Now plus 25 min      javascript // Expected      2 25  // Actual        1 25        1 25   ==       2 25              locale:ja:calendar day  1231.3   Now plus 1 hour      javascript // Expected      3 0  // Actual        1 0        1 0   ==       3 0              locale:ja:calendar day  1231.4   tomorrow at the same time      javascript // Expected      2 0  // Actual        1 0        1 0   ==       2 0              locale:ja:calendar day  1231.5   Now minus 1 hour      javascript // Expected      1 0  // Actual        12 0        12 0   ==       1 0              locale:ja:calendar day  1231.6   yesterday at the same time      javascript // Expected      2 0  // Actual        1 0        1 0   ==       2 0              locale:ka:calendar day  1252.1                        javascript // Expected      2:00 AM    // Actual        1:00 AM          1:00 AM     ==       2:00 AM                locale:ka:calendar day  1252.2                            25           javascript // Expected      2:25 AM    // Actual        1:25 AM          1:25 AM     ==       2:25 AM                locale:ka:calendar day  1252.3                            1            javascript // Expected      3:00 AM    // Actual        1:00 AM          1:00 AM     ==       3:00 AM                locale:ka:calendar day  1252.4                        javascript // Expected      2:00 AM    // Actual        1:00 AM          1:00 AM     ==       2:00 AM                locale:ka:calendar day  1252.5                             1            javascript // Expected      1:00 AM    // Actual        12:00 AM          12:00 AM     ==       1:00 AM                locale:ka:calendar day  1252.6                         javascript // Expected       2:00 AM    // Actual         1:00 AM           1:00 AM     ==        2:00 AM                locale:km:calendar day  1273.1   today at the same time      javascript // Expected             02:00 // Actual               01:00              01:00  ==              02:00             locale:km:calendar day  1273.2   Now plus 25 min      javascript // Expected             02:25 // Actual               01:25              01:25  ==              02:25             locale:km:calendar day  1273.3   Now plus 1 hour      javascript // Expected             03:00 // Actual               01:00              01:00  ==              03:00             locale:km:calendar day  1273.4   tomorrow at the same time      javascript // Expected            02:00 // Actual              01:00             01:00  ==             02:00             locale:km:calendar day  1273.5   Now minus 1 hour      javascript // Expected             01:00 // Actual               00:00              00:00  ==              01:00             locale:km:calendar day  1273.6   yesterday at the same time      javascript // Expected               02:00 // Actual                 01:00                01:00  ==                02:00             locale:ko:calendar day  1295.1   today at the same time      javascript // Expected       2  0  // Actual         1  0         1  0   ==        2  0              locale:ko:calendar day  1295.2   Now plus 25 min      javascript // Expected       2  25  // Actual         1  25         1  25   ==        2  25              locale:ko:calendar day  1295.3   Now plus 1 hour      javascript // Expected       3  0  // Actual         1  0         1  0   ==        3  0              locale:ko:calendar day  1295.4   tomorrow at the same time      javascript // Expected       2  0  // Actual         1  0         1  0   ==        2  0              locale:ko:calendar day  1295.5   Now minus 1 hour      javascript // Expected       1  0  // Actual         12  0         12  0   ==        1  0              locale:ko:calendar day  1295.6   yesterday at the same time      javascript // Expected       2  0  // Actual         1  0         1  0   ==        2  0              locale:lt:calendar day  1325.1   today at the same time      javascript // Expected  iandien 02:00 // Actual    iandien 01:00   iandien 01:00  ==   iandien 02:00             locale:lt:calendar day  1325.2   Now plus 25 min      javascript // Expected  iandien 02:25 // Actual    iandien 01:25   iandien 01:25  ==   iandien 02:25             locale:lt:calendar day  1325.3   Now plus 1 hour      javascript // Expected  iandien 03:00 // Actual    iandien 01:00   iandien 01:00  ==   iandien 03:00             locale:lt:calendar day  1325.4   tomorrow at the same time      javascript // Expected Rytoj 02:00 // Actual   Rytoj 01:00  Rytoj 01:00  ==  Rytoj 02:00             locale:lt:calendar day  1325.5   Now minus 1 hour      javascript // Expected  iandien 01:00 // Actual    iandien 00:00   iandien 00:00  ==   iandien 01:00             locale:lt:calendar day  1325.6   yesterday at the same time      javascript // Expected Vakar 02:00 // Actual   Vakar 01:00  Vakar 01:00  ==  Vakar 02:00             locale:lv:calendar day  1346.1   today at the same time      javascript // Expected  odien pulksten 02:00 // Actual    odien pulksten 01:00   odien pulksten 01:00  ==   odien pulksten 02:00             locale:lv:calendar day  1346.2   Now plus 25 min      javascript // Expected  odien pulksten 02:25 // Actual    odien pulksten 01:25   odien pulksten 01:25  ==   odien pulksten 02:25             locale:lv:calendar day  1346.3   Now plus 1 hour      javascript // Expected  odien pulksten 03:00 // Actual    odien pulksten 01:00   odien pulksten 01:00  ==   odien pulksten 03:00             locale:lv:calendar day  1346.4   tomorrow at the same time      javascript // Expected R t pulksten 02:00 // Actual   R t pulksten 01:00  R t pulksten 01:00  ==  R t pulksten 02:00             locale:lv:calendar day  1346.5   Now minus 1 hour      javascript // Expected  odien pulksten 01:00 // Actual    odien pulksten 00:00   odien pulksten 00:00  ==   odien pulksten 01:00             locale:lv:calendar day  1346.6   yesterday at the same time      javascript // Expected Vakar pulksten 02:00 // Actual   Vakar pulksten 01:00  Vakar pulksten 01:00  ==  Vakar pulksten 02:00             locale:mk:calendar day  1367.1   today at the same time      javascript // Expected          2:00 // Actual            1:00           1:00  ==           2:00             locale:mk:calendar day  1367.2   Now plus 25 min      javascript // Expected          2:25 // Actual            1:25           1:25  ==           2:25             locale:mk:calendar day  1367.3   Now plus 1 hour      javascript // Expected          3:00 // Actual            1:00           1:00  ==           3:00             locale:mk:calendar day  1367.4   tomorrow at the same time      javascript // Expected         2:00 // Actual           1:00          1:00  ==          2:00             locale:mk:calendar day  1367.5   Now minus 1 hour      javascript // Expected          1:00 // Actual            0:00           0:00  ==           1:00             locale:mk:calendar day  1367.6   yesterday at the same time      javascript // Expected          2:00 // Actual            1:00           1:00  ==           2:00             locale:ml:calendar day  1388.1   today at the same time      javascript // Expected              2:00     // Actual                1:00                   1:00      ==               2:00                 locale:ml:calendar day  1388.2   Now plus 25 min      javascript // Expected              2:25     // Actual                1:25                   1:25      ==               2:25                 locale:ml:calendar day  1388.3   Now plus 3 hour      javascript // Expected              5:00     // Actual                3:00                   3:00      ==               5:00                 locale:ml:calendar day  1388.4   tomorrow at the same time      javascript // Expected             2:00     // Actual               1:00                  1:00      ==              2:00                 locale:ml:calendar day  1388.5   Now minus 1 hour      javascript // Expected              1:00     // Actual                12:00                   12:00      ==               1:00                 locale:ml:calendar day  1388.6   yesterday at the same time      javascript // Expected               2:00     // Actual                 1:00                    1:00      ==                2:00                 locale:mr:calendar day  1410.1   today at the same time      javascript // Expected            :         // Actual              :                     :          ==             :                     locale:mr:calendar day  1410.2   Now plus 25 min      javascript // Expected            :         // Actual              :                     :          ==             :                     locale:mr:calendar day  1410.3   Now plus 3 hour      javascript // Expected           :         // Actual              :                     :          ==            :                     locale:mr:calendar day  1410.4   tomorrow at the same time      javascript // Expected               :         // Actual                 :                        :          ==                :                     locale:mr:calendar day  1410.5   Now minus 1 hour      javascript // Expected            :         // Actual               :                      :          ==             :                     locale:mr:calendar day  1410.6   yesterday at the same time      javascript // Expected             :         // Actual               :                      :          ==              :                     locale:ms my:calendar day  1432.1   hari ini pada waktu yang sama      javascript // Expected Hari ini pukul 02.00 // Actual   Hari ini pukul 01.00  Hari ini pukul 01.00  ==  Hari ini pukul 02.00             locale:ms my:calendar day  1432.2   Sekarang tambah 25 minit      javascript // Expected Hari ini pukul 02.25 // Actual   Hari ini pukul 01.25  Hari ini pukul 01.25  ==  Hari ini pukul 02.25             locale:ms my:calendar day  1432.3   Sekarang tambah 1 jam      javascript // Expected Hari ini pukul 03.00 // Actual   Hari ini pukul 01.00  Hari ini pukul 01.00  ==  Hari ini pukul 03.00             locale:ms my:calendar day  1432.4   esok pada waktu yang sama      javascript // Expected Esok pukul 02.00 // Actual   Esok pukul 01.00  Esok pukul 01.00  ==  Esok pukul 02.00             locale:ms my:calendar day  1432.5   Sekarang tolak 1 jam      javascript // Expected Hari ini pukul 01.00 // Actual   Hari ini pukul 00.00  Hari ini pukul 00.00  ==  Hari ini pukul 01.00             locale:ms my:calendar day  1432.6   kelmarin pada waktu yang sama      javascript // Expected Kelmarin pukul 02.00 // Actual   Kelmarin pukul 01.00  Kelmarin pukul 01.00  ==  Kelmarin pukul 02.00             locale:my:calendar day  1453.1      .               javascript // Expected    .   :       // Actual      .   :           .   :        ==     .   :                   locale:my:calendar day  1453.2                                 javascript // Expected    .   :       // Actual      .   :           .   :        ==     .   :                   locale:my:calendar day  1453.3                               javascript // Expected    .   :       // Actual      .   :           .   :        ==     .   :                   locale:my:calendar day  1453.4                          javascript // Expected            :       // Actual              :                   :        ==             :                   locale:my:calendar day  1453.5                          javascript // Expected    .   :       // Actual      .   :           .   :        ==     .   :                   locale:my:calendar day  1453.6      .                javascript // Expected    .    :       // Actual      .    :           .    :        ==     .    :                   locale:nb:calendar day  1474.1   today at the same time      javascript // Expected i dag kl. 2.00 // Actual   i dag kl. 1.00  i dag kl. 1.00  ==  i dag kl. 2.00             locale:nb:calendar day  1474.2   Now plus 25 min      javascript // Expected i dag kl. 2.25 // Actual   i dag kl. 1.25  i dag kl. 1.25  ==  i dag kl. 2.25             locale:nb:calendar day  1474.3   Now plus 1 hour      javascript // Expected i dag kl. 3.00 // Actual   i dag kl. 1.00  i dag kl. 1.00  ==  i dag kl. 3.00             locale:nb:calendar day  1474.4   tomorrow at the same time      javascript // Expected i morgen kl. 2.00 // Actual   i morgen kl. 1.00  i morgen kl. 1.00  ==  i morgen kl. 2.00             locale:nb:calendar day  1474.5   Now minus 1 hour      javascript // Expected i dag kl. 1.00 // Actual   i dag kl. 0.00  i dag kl. 0.00  ==  i dag kl. 1.00             locale:nb:calendar day  1474.6   yesterday at the same time      javascript // Expected i g r kl. 2.00 // Actual   i g r kl. 1.00  i g r kl. 1.00  ==  i g r kl. 2.00             locale:ne:calendar day  1495.1   today at the same time      javascript // Expected            :       // Actual              :                   :        ==             :                   locale:ne:calendar day  1495.2   Now plus 25 min      javascript // Expected            :       // Actual              :                   :        ==             :                   locale:ne:calendar day  1495.3   Now plus 1 hour      javascript // Expected             :       // Actual              :                   :        ==              :                   locale:ne:calendar day  1495.4   tomorrow at the same time      javascript // Expected              :       // Actual                :                     :        ==               :                   locale:ne:calendar day  1495.5   Now minus 1 hour      javascript // Expected            :       // Actual               :                    :        ==             :                   locale:ne:calendar day  1495.6   yesterday at the same time      javascript // Expected              :       // Actual                :                     :        ==               :                   locale:nl:calendar day  1517.1   today at the same time      javascript // Expected vandaag om 02:00 // Actual   vandaag om 01:00  vandaag om 01:00  ==  vandaag om 02:00             locale:nl:calendar day  1517.2   Now plus 25 min      javascript // Expected vandaag om 02:25 // Actual   vandaag om 01:25  vandaag om 01:25  ==  vandaag om 02:25             locale:nl:calendar day  1517.3   Now plus 1 hour      javascript // Expected vandaag om 03:00 // Actual   vandaag om 01:00  vandaag om 01:00  ==  vandaag om 03:00             locale:nl:calendar day  1517.4   tomorrow at the same time      javascript // Expected morgen om 02:00 // Actual   morgen om 01:00  morgen om 01:00  ==  morgen om 02:00             locale:nl:calendar day  1517.5   Now minus 1 hour      javascript // Expected vandaag om 01:00 // Actual   vandaag om 00:00  vandaag om 00:00  ==  vandaag om 01:00             locale:nl:calendar day  1517.6   yesterday at the same time      javascript // Expected gisteren om 02:00 // Actual   gisteren om 01:00  gisteren om 01:00  ==  gisteren om 02:00             locale:nn:calendar day  1539.1   today at the same time      javascript // Expected I dag klokka 02:00 // Actual   I dag klokka 01:00  I dag klokka 01:00  ==  I dag klokka 02:00             locale:nn:calendar day  1539.2   Now plus 25 min      javascript // Expected I dag klokka 02:25 // Actual   I dag klokka 01:25  I dag klokka 01:25  ==  I dag klokka 02:25             locale:nn:calendar day  1539.3   Now plus 1 hour      javascript // Expected I dag klokka 03:00 // Actual   I dag klokka 01:00  I dag klokka 01:00  ==  I dag klokka 03:00             locale:nn:calendar day  1539.4   tomorrow at the same time      javascript // Expected I morgon klokka 02:00 // Actual   I morgon klokka 01:00  I morgon klokka 01:00  ==  I morgon klokka 02:00             locale:nn:calendar day  1539.5   Now minus 1 hour      javascript // Expected I dag klokka 01:00 // Actual   I dag klokka 00:00  I dag klokka 00:00  ==  I dag klokka 01:00             locale:nn:calendar day  1539.6   yesterday at the same time      javascript // Expected I g r klokka 02:00 // Actual   I g r klokka 01:00  I g r klokka 01:00  ==  I g r klokka 02:00             locale:pl:calendar day  1560.1   today at the same time      javascript // Expected Dzi  o 02:00 // Actual   Dzi  o 01:00  Dzi  o 01:00  ==  Dzi  o 02:00             locale:pl:calendar day  1560.2   Now plus 25 min      javascript // Expected Dzi  o 02:25 // Actual   Dzi  o 01:25  Dzi  o 01:25  ==  Dzi  o 02:25             locale:pl:calendar day  1560.3   Now plus 1 hour      javascript // Expected Dzi  o 03:00 // Actual   Dzi  o 01:00  Dzi  o 01:00  ==  Dzi  o 03:00             locale:pl:calendar day  1560.4   tomorrow at the same time      javascript // Expected Jutro o 02:00 // Actual   Jutro o 01:00  Jutro o 01:00  ==  Jutro o 02:00             locale:pl:calendar day  1560.5   Now minus 1 hour      javascript // Expected Dzi  o 01:00 // Actual   Dzi  o 00:00  Dzi  o 00:00  ==  Dzi  o 01:00             locale:pl:calendar day  1560.6   yesterday at the same time      javascript // Expected Wczoraj o 02:00 // Actual   Wczoraj o 01:00  Wczoraj o 01:00  ==  Wczoraj o 02:00             locale:pt br:calendar day  1580.1   today at the same time      javascript // Expected Hoje  s 02:00 // Actual   Hoje  s 01:00  Hoje  s 01:00  ==  Hoje  s 02:00             locale:pt br:calendar day  1580.2   Now plus 25 min      javascript // Expected Hoje  s 02:25 // Actual   Hoje  s 01:25  Hoje  s 01:25  ==  Hoje  s 02:25             locale:pt br:calendar day  1580.3   Now plus 1 hour      javascript // Expected Hoje  s 03:00 // Actual   Hoje  s 01:00  Hoje  s 01:00  ==  Hoje  s 03:00             locale:pt br:calendar day  1580.4   tomorrow at the same time      javascript // Expected Amanh   s 02:00 // Actual   Amanh   s 01:00  Amanh   s 01:00  ==  Amanh   s 02:00             locale:pt br:calendar day  1580.5   Now minus 1 hour      javascript // Expected Hoje  s 01:00 // Actual   Hoje  s 00:00  Hoje  s 00:00  ==  Hoje  s 01:00             locale:pt br:calendar day  1580.6   yesterday at the same time      javascript // Expected Ontem  s 02:00 // Actual   Ontem  s 01:00  Ontem  s 01:00  ==  Ontem  s 02:00             locale:pt:calendar day  1600.1   today at the same time      javascript // Expected Hoje  s 02:00 // Actual   Hoje  s 01:00  Hoje  s 01:00  ==  Hoje  s 02:00             locale:pt:calendar day  1600.2   Now plus 25 min      javascript // Expected Hoje  s 02:25 // Actual   Hoje  s 01:25  Hoje  s 01:25  ==  Hoje  s 02:25             locale:pt:calendar day  1600.3   Now plus 1 hour      javascript // Expected Hoje  s 03:00 // Actual   Hoje  s 01:00  Hoje  s 01:00  ==  Hoje  s 03:00             locale:pt:calendar day  1600.4   tomorrow at the same time      javascript // Expected Amanh   s 02:00 // Actual   Amanh   s 01:00  Amanh   s 01:00  ==  Amanh   s 02:00             locale:pt:calendar day  1600.5   Now minus 1 hour      javascript // Expected Hoje  s 01:00 // Actual   Hoje  s 00:00  Hoje  s 00:00  ==  Hoje  s 01:00             locale:pt:calendar day  1600.6   yesterday at the same time      javascript // Expected Ontem  s 02:00 // Actual   Ontem  s 01:00  Ontem  s 01:00  ==  Ontem  s 02:00             locale:ro:calendar day  1621.1   today at the same time      javascript // Expected azi la 2:00 // Actual   azi la 1:00  azi la 1:00  ==  azi la 2:00             locale:ro:calendar day  1621.2   Now plus 25 min      javascript // Expected azi la 2:25 // Actual   azi la 1:25  azi la 1:25  ==  azi la 2:25             locale:ro:calendar day  1621.3   Now plus 1 hour      javascript // Expected azi la 3:00 // Actual   azi la 1:00  azi la 1:00  ==  azi la 3:00             locale:ro:calendar day  1621.4   tomorrow at the same time      javascript // Expected m ine la 2:00 // Actual   m ine la 1:00  m ine la 1:00  ==  m ine la 2:00             locale:ro:calendar day  1621.5   Now minus 1 hour      javascript // Expected azi la 1:00 // Actual   azi la 0:00  azi la 0:00  ==  azi la 1:00             locale:ro:calendar day  1621.6   yesterday at the same time      javascript // Expected ieri la 2:00 // Actual   ieri la 1:00  ieri la 1:00  ==  ieri la 2:00             locale:ru:calendar day  1647.1   today at the same time      javascript // Expected           02:00 // Actual             01:00            01:00  ==            02:00             locale:ru:calendar day  1647.2   Now plus 25 min      javascript // Expected           02:25 // Actual             01:25            01:25  ==            02:25             locale:ru:calendar day  1647.3   Now plus 1 hour      javascript // Expected           03:00 // Actual             01:00            01:00  ==            03:00             locale:ru:calendar day  1647.4   tomorrow at the same time      javascript // Expected          02:00 // Actual            01:00           01:00  ==           02:00             locale:ru:calendar day  1647.5   Now minus 1 hour      javascript // Expected           01:00 // Actual             00:00            00:00  ==            01:00             locale:ru:calendar day  1647.6   yesterday at the same time      javascript // Expected         02:00 // Actual           01:00          01:00  ==          02:00             locale:sk:calendar day  1669.1   today at the same time      javascript // Expected dnes o 2:00 // Actual   dnes o 1:00  dnes o 1:00  ==  dnes o 2:00             locale:sk:calendar day  1669.2   Now plus 25 min      javascript // Expected dnes o 2:25 // Actual   dnes o 1:25  dnes o 1:25  ==  dnes o 2:25             locale:sk:calendar day  1669.3   Now plus 1 hour      javascript // Expected dnes o 3:00 // Actual   dnes o 1:00  dnes o 1:00  ==  dnes o 3:00             locale:sk:calendar day  1669.4   tomorrow at the same time      javascript // Expected zajtra o 2:00 // Actual   zajtra o 1:00  zajtra o 1:00  ==  zajtra o 2:00             locale:sk:calendar day  1669.5   Now minus 1 hour      javascript // Expected dnes o 1:00 // Actual   dnes o 0:00  dnes o 0:00  ==  dnes o 1:00             locale:sk:calendar day  1669.6   yesterday at the same time      javascript // Expected v era o 2:00 // Actual   v era o 1:00  v era o 1:00  ==  v era o 2:00             locale:sl:calendar day  1691.1   today at the same time      javascript // Expected danes ob 2:00 // Actual   danes ob 1:00  danes ob 1:00  ==  danes ob 2:00             locale:sl:calendar day  1691.2   Now plus 25 min      javascript // Expected danes ob 2:25 // Actual   danes ob 1:25  danes ob 1:25  ==  danes ob 2:25             locale:sl:calendar day  1691.3   Now plus 1 hour      javascript // Expected danes ob 3:00 // Actual   danes ob 1:00  danes ob 1:00  ==  danes ob 3:00             locale:sl:calendar day  1691.4   tomorrow at the same time      javascript // Expected jutri ob 2:00 // Actual   jutri ob 1:00  jutri ob 1:00  ==  jutri ob 2:00             locale:sl:calendar day  1691.5   Now minus 1 hour      javascript // Expected danes ob 1:00 // Actual   danes ob 0:00  danes ob 0:00  ==  danes ob 1:00             locale:sl:calendar day  1691.6   yesterday at the same time      javascript // Expected v eraj ob 2:00 // Actual   v eraj ob 1:00  v eraj ob 1:00  ==  v eraj ob 2:00             locale:sq:calendar day  1713.1   today at the same time      javascript // Expected Sot n  02:00 // Actual   Sot n  01:00  Sot n  01:00  ==  Sot n  02:00             locale:sq:calendar day  1713.2   Now plus 25 min      javascript // Expected Sot n  02:25 // Actual   Sot n  01:25  Sot n  01:25  ==  Sot n  02:25             locale:sq:calendar day  1713.3   Now plus 1 hour      javascript // Expected Sot n  03:00 // Actual   Sot n  01:00  Sot n  01:00  ==  Sot n  03:00             locale:sq:calendar day  1713.4   tomorrow at the same time      javascript // Expected Nes r n  02:00 // Actual   Nes r n  01:00  Nes r n  01:00  ==  Nes r n  02:00             locale:sq:calendar day  1713.5   Now minus 1 hour      javascript // Expected Sot n  01:00 // Actual   Sot n  00:00  Sot n  00:00  ==  Sot n  01:00             locale:sq:calendar day  1713.6   yesterday at the same time      javascript // Expected Dje n  02:00 // Actual   Dje n  01:00  Dje n  01:00  ==  Dje n  02:00             locale:sr cyrl:calendar day  1734.1   today at the same time      javascript // Expected         2:00 // Actual           1:00          1:00  ==          2:00             locale:sr cyrl:calendar day  1734.2   Now plus 25 min      javascript // Expected         2:25 // Actual           1:25          1:25  ==          2:25             locale:sr cyrl:calendar day  1734.3   Now plus 1 hour      javascript // Expected         3:00 // Actual           1:00          1:00  ==          3:00             locale:sr cyrl:calendar day  1734.4   tomorrow at the same time      javascript // Expected         2:00 // Actual           1:00          1:00  ==          2:00             locale:sr cyrl:calendar day  1734.5   Now minus 1 hour      javascript // Expected         1:00 // Actual           0:00          0:00  ==          1:00             locale:sr cyrl:calendar day  1734.6   yesterday at the same time      javascript // Expected        2:00 // Actual          1:00         1:00  ==         2:00             locale:sr:calendar day  1755.1   today at the same time      javascript // Expected danas u 2:00 // Actual   danas u 1:00  danas u 1:00  ==  danas u 2:00             locale:sr:calendar day  1755.2   Now plus 25 min      javascript // Expected danas u 2:25 // Actual   danas u 1:25  danas u 1:25  ==  danas u 2:25             locale:sr:calendar day  1755.3   Now plus 1 hour      javascript // Expected danas u 3:00 // Actual   danas u 1:00  danas u 1:00  ==  danas u 3:00             locale:sr:calendar day  1755.4   tomorrow at the same time      javascript // Expected sutra u 2:00 // Actual   sutra u 1:00  sutra u 1:00  ==  sutra u 2:00             locale:sr:calendar day  1755.5   Now minus 1 hour      javascript // Expected danas u 1:00 // Actual   danas u 0:00  danas u 0:00  ==  danas u 1:00             locale:sr:calendar day  1755.6   yesterday at the same time      javascript // Expected ju e u 2:00 // Actual   ju e u 1:00  ju e u 1:00  ==  ju e u 2:00             locale:sv:calendar day  1776.1   today at the same time      javascript // Expected Idag 02:00 // Actual   Idag 01:00  Idag 01:00  ==  Idag 02:00             locale:sv:calendar day  1776.2   Now plus 25 min      javascript // Expected Idag 02:25 // Actual   Idag 01:25  Idag 01:25  ==  Idag 02:25             locale:sv:calendar day  1776.3   Now plus 1 hour      javascript // Expected Idag 03:00 // Actual   Idag 01:00  Idag 01:00  ==  Idag 03:00             locale:sv:calendar day  1776.4   tomorrow at the same time      javascript // Expected Imorgon 02:00 // Actual   Imorgon 01:00  Imorgon 01:00  ==  Imorgon 02:00             locale:sv:calendar day  1776.5   Now minus 1 hour      javascript // Expected Idag 01:00 // Actual   Idag 00:00  Idag 00:00  ==  Idag 01:00             locale:sv:calendar day  1776.6   yesterday at the same time      javascript // Expected Ig r 02:00 // Actual   Ig r 01:00  Ig r 01:00  ==  Ig r 02:00             locale:ta:calendar day  1797.1          02:00      javascript // Expected       02:00 // Actual         01:00        01:00  ==        02:00             locale:ta:calendar day  1797.2          02:25      javascript // Expected       02:25 // Actual         01:25        01:25  ==        02:25             locale:ta:calendar day  1797.3          03:00      javascript // Expected       03:00 // Actual         01:00        01:00  ==        03:00             locale:ta:calendar day  1797.4         02:00      javascript // Expected      02:00 // Actual        01:00       01:00  ==       02:00             locale:ta:calendar day  1797.5          01:00      javascript // Expected       01:00 // Actual         00:00        00:00  ==        01:00             locale:ta:calendar day  1797.6           02:00      javascript // Expected        02:00 // Actual          01:00         01:00  ==         02:00             locale:th:calendar day  1817.1   today at the same time      javascript // Expected             2        0      // Actual               1        0                   1        0       ==              2        0                  locale:th:calendar day  1817.2   Now plus 25 min      javascript // Expected             2        25      // Actual               1        25                   1        25       ==              2        25                  locale:th:calendar day  1817.3   Now plus 1 hour      javascript // Expected             3        0      // Actual               1        0                   1        0       ==              3        0                  locale:th:calendar day  1817.4   tomorrow at the same time      javascript // Expected               2        0      // Actual                 1        0                     1        0       ==                2        0                  locale:th:calendar day  1817.5   Now minus 1 hour      javascript // Expected             1        0      // Actual               0        0                   0        0       ==              1        0                  locale:th:calendar day  1817.6   yesterday at the same time      javascript // Expected                  2        0      // Actual                    1        0                        1        0       ==                   2        0                  locale:tl ph:same day  1837.1   today at the same time      javascript // Expected Ngayon sa 02:00 // Actual   Ngayon sa 01:00  Ngayon sa 01:00  ==  Ngayon sa 02:00             locale:tl ph:same day  1837.2   Now plus 25 min      javascript // Expected Ngayon sa 02:25 // Actual   Ngayon sa 01:25  Ngayon sa 01:25  ==  Ngayon sa 02:25             locale:tl ph:same day  1837.3   Now plus 1 hour      javascript // Expected Ngayon sa 03:00 // Actual   Ngayon sa 01:00  Ngayon sa 01:00  ==  Ngayon sa 03:00             locale:tl ph:same day  1837.4   tomorrow at the same time      javascript // Expected Bukas sa 02:00 // Actual   Bukas sa 01:00  Bukas sa 01:00  ==  Bukas sa 02:00             locale:tl ph:same day  1837.5   Now minus 1 hour      javascript // Expected Ngayon sa 01:00 // Actual   Ngayon sa 00:00  Ngayon sa 00:00  ==  Ngayon sa 01:00             locale:tl ph:same day  1837.6   yesterday at the same time      javascript // Expected Kahapon sa 02:00 // Actual   Kahapon sa 01:00  Kahapon sa 01:00  ==  Kahapon sa 02:00             locale:tr:calendar day  1858.1   today at the same time      javascript // Expected bug n saat 02:00 // Actual   bug n saat 01:00  bug n saat 01:00  ==  bug n saat 02:00             locale:tr:calendar day  1858.2   Now plus 25 min      javascript // Expected bug n saat 02:25 // Actual   bug n saat 01:25  bug n saat 01:25  ==  bug n saat 02:25             locale:tr:calendar day  1858.3   Now plus 1 hour      javascript // Expected bug n saat 03:00 // Actual   bug n saat 01:00  bug n saat 01:00  ==  bug n saat 03:00             locale:tr:calendar day  1858.4   tomorrow at the same time      javascript // Expected yar n saat 02:00 // Actual   yar n saat 01:00  yar n saat 01:00  ==  yar n saat 02:00             locale:tr:calendar day  1858.5   Now minus 1 hour      javascript // Expected bug n saat 01:00 // Actual   bug n saat 00:00  bug n saat 00:00  ==  bug n saat 01:00             locale:tr:calendar day  1858.6   yesterday at the same time      javascript // Expected d n 02:00 // Actual   d n 01:00  d n 01:00  ==  d n 02:00             locale:tzm latn:calendar day  1879.1   today at the same time      javascript // Expected asdkh g 02:00 // Actual   asdkh g 01:00  asdkh g 01:00  ==  asdkh g 02:00             locale:tzm latn:calendar day  1879.2   Now plus 25 min      javascript // Expected asdkh g 02:25 // Actual   asdkh g 01:25  asdkh g 01:25  ==  asdkh g 02:25             locale:tzm latn:calendar day  1879.3   Now plus 1 hour      javascript // Expected asdkh g 03:00 // Actual   asdkh g 01:00  asdkh g 01:00  ==  asdkh g 03:00             locale:tzm latn:calendar day  1879.4   tomorrow at the same time      javascript // Expected aska g 02:00 // Actual   aska g 01:00  aska g 01:00  ==  aska g 02:00             locale:tzm latn:calendar day  1879.5   Now minus 1 hour      javascript // Expected asdkh g 01:00 // Actual   asdkh g 00:00  asdkh g 00:00  ==  asdkh g 01:00             locale:tzm latn:calendar day  1879.6   yesterday at the same time      javascript // Expected assant g 02:00 // Actual   assant g 01:00  assant g 01:00  ==  assant g 02:00             locale:tzm:calendar day  1900.1   today at the same time      javascript // Expected        02:00 // Actual          01:00         01:00  ==         02:00             locale:tzm:calendar day  1900.2   Now plus 25 min      javascript // Expected        02:25 // Actual          01:25         01:25  ==         02:25             locale:tzm:calendar day  1900.3   Now plus 1 hour      javascript // Expected        03:00 // Actual          01:00         01:00  ==         03:00             locale:tzm:calendar day  1900.4   tomorrow at the same time      javascript // Expected        02:00 // Actual          01:00         01:00  ==         02:00             locale:tzm:calendar day  1900.5   Now minus 1 hour      javascript // Expected        01:00 // Actual          00:00         00:00  ==         01:00             locale:tzm:calendar day  1900.6   yesterday at the same time      javascript // Expected         02:00 // Actual           01:00          01:00  ==          02:00             locale:uk:calendar day  1922.1   today at the same time      javascript // Expected            02:00 // Actual              01:00             01:00  ==             02:00             locale:uk:calendar day  1922.2   Now plus 25 min      javascript // Expected            02:25 // Actual              01:25             01:25  ==             02:25             locale:uk:calendar day  1922.3   Now plus 1 hour      javascript // Expected            03:00 // Actual              01:00             01:00  ==             03:00             locale:uk:calendar day  1922.4   tomorrow at the same time      javascript // Expected          02:00 // Actual            01:00           01:00  ==           02:00             locale:uk:calendar day  1922.5   Now minus 1 hour      javascript // Expected            01:00 // Actual              00:00             00:00  ==             01:00             locale:uk:calendar day  1922.6   yesterday at the same time      javascript // Expected         02:00 // Actual           01:00          01:00  ==          02:00             locale:uk:calendar day  1922.7   same day at 11 o clock      javascript // Expected             11:00 // Actual              09:00             09:00  ==              11:00             locale:uz:calendar day  1943.1   today at the same time      javascript // Expected            02:00    // Actual              01:00                01:00     ==             02:00                locale:uz:calendar day  1943.2   Now plus 25 min      javascript // Expected            02:25    // Actual              01:25                01:25     ==             02:25                locale:uz:calendar day  1943.3   Now plus 1 hour      javascript // Expected            03:00    // Actual              01:00                01:00     ==             03:00                locale:uz:calendar day  1943.4   tomorrow at the same time      javascript // Expected        02:00    // Actual          01:00            01:00     ==         02:00                locale:uz:calendar day  1943.5   Now minus 1 hour      javascript // Expected            01:00    // Actual              00:00                00:00     ==             01:00                locale:uz:calendar day  1943.6   yesterday at the same time      javascript // Expected           02:00    // Actual             01:00               01:00     ==            02:00                locale:vi:calendar day  1964.1   today at the same time      javascript // Expected H m nay l c 02:00 // Actual   H m nay l c 01:00  H m nay l c 01:00  ==  H m nay l c 02:00             locale:vi:calendar day  1964.2   Now plus 25 min      javascript // Expected H m nay l c 02:25 // Actual   H m nay l c 01:25  H m nay l c 01:25  ==  H m nay l c 02:25             locale:vi:calendar day  1964.3   Now plus 1 hour      javascript // Expected H m nay l c 03:00 // Actual   H m nay l c 01:00  H m nay l c 01:00  ==  H m nay l c 03:00             locale:vi:calendar day  1964.4   tomorrow at the same time      javascript // Expected Ng y mai l c 02:00 // Actual   Ng y mai l c 01:00  Ng y mai l c 01:00  ==  Ng y mai l c 02:00             locale:vi:calendar day  1964.5   Now minus 1 hour      javascript // Expected H m nay l c 01:00 // Actual   H m nay l c 00:00  H m nay l c 00:00  ==  H m nay l c 01:00             locale:vi:calendar day  1964.6   yesterday at the same time      javascript // Expected H m qua l c 02:00 // Actual   H m qua l c 01:00  H m qua l c 01:00  ==  H m qua l c 02:00             locale:zh cn:calendar day  1984.1   today at the same time      javascript // Expected     2   // Actual       1        1    ==      2               locale:zh cn:calendar day  1984.2   Now plus 25 min      javascript // Expected     2 25 // Actual       1 25      1 25  ==      2 25             locale:zh cn:calendar day  1984.3   Now plus 1 hour      javascript // Expected     3   // Actual       1        1    ==      3               locale:zh cn:calendar day  1984.4   tomorrow at the same time      javascript // Expected     2   // Actual       1        1    ==      2               locale:zh cn:calendar day  1984.5   Now minus 1 hour      javascript // Expected     1   // Actual       12        12    ==      1               locale:zh cn:calendar day  1984.6   yesterday at the same time      javascript // Expected     2   // Actual       1        1    ==      2               locale:zh tw:calendar day  2006.1   today at the same time      javascript // Expected     2 00 // Actual       1 00      1 00  ==      2 00             locale:zh tw:calendar day  2006.2   Now plus 25 min      javascript // Expected     2 25 // Actual       1 25      1 25  ==      2 25             locale:zh tw:calendar day  2006.3   Now plus 1 hour      javascript // Expected     3 00 // Actual       1 00      1 00  ==      3 00             locale:zh tw:calendar day  2006.4   tomorrow at the same time      javascript // Expected     2 00 // Actual       1 00      1 00  ==      2 00             locale:zh tw:calendar day  2006.5   Now minus 1 hour      javascript // Expected     1 00 // Actual       12 00      12 00  ==      1 00             locale:zh tw:calendar day  2006.6   yesterday at the same time      javascript // Expected     2 00 // Actual       1 00      1 00  ==      2 00      ,beepiams,closed,2,2014-11-02 21:50:51,2016-03-08 22:09:41,,Unit Test Failed,,,0,1
12218,moment/moment,2031,Importing moment.js into a QML project in Qt 5.2,Hey moment.js devs   This isn t a real  issue  in the sense that there was something wrong in moment.js itself. I m posting this here merely because I thought you might find it interesting  and hoping that it might help someone that might be googling for this same thing in the future.  I m using moment.js in my QML app because it enables me to do fun stuff with timestamps  but the QML Javascript engine is not really friendly to the library. There are three issues: 1. The Javascript engine does not support modifying the global object so the exported  moment  variable must be put into a local variable which will then be automatically exposed to callers by the Javascript engine. 2. The Javascript engine does not support IIFEs without some work. The gist I ve linked later in this post shows one way to fix it. 3. The Javascript engine  since Qt 5.2  does not allow the word  as  in identifiers. This means the moment.js function  as  results in a parse error. I fixed this by renaming  as  into  asUnit .  I ve written about this matter on Google  [here] https://plus.google.com/ MikkoAhlroth/posts/c5gnV9kiy1L  and I ve created a [gist] https://gist.github.com/Nicd/6dac64ba3b97c714a65b file moment js diff  which contains the diff between the original and the modified library which works with the QML Javascript engine.  So  it s not an issue with moment.js  but rather a curiosity of the QML Javascript engine. :  Of course I m open to hearing any ideas or if someone has dealt with this in a more elegant way. ,Nicd,open,7,2014-11-03 20:49:11,0000-00-00 00:00:00,,Loading,,,0,1
12217,moment/moment,2032,UTC Issues,moment.utc  2014 10 1  .unix   and moment  2014 10 1  .unix   . i got zhe same secounds. ,mario56,closed,2,2014-11-04 02:45:21,2014-11-27 07:27:02,,,,0,1
12216,moment/moment,2033,Setting ISO week year sometimes results in wrong year,    moment  2012 12 31T00:00:00.000Z  .isoWeekYear 2013 .isoWeekYear  ;  // 2013 moment  2012 12 31T00:00:00.000Z  .isoWeekYear 2012 .isoWeekYear  ;  // 2011 moment  2012 12 31T00:00:00.000Z  .isoWeekYear 2011 .isoWeekYear  ;  // 2010 moment  2012 12 31T00:00:00.000Z  .isoWeekYear 2010 .isoWeekYear  ;  // 2009 moment  2012 12 31T00:00:00.000Z  .isoWeekYear 2019 .isoWeekYear  ;  // 2009     ,Pumpuli,closed,7,2014-11-04 07:13:13,2015-11-09 02:54:29,,Bug,High Priority,,,0,1
12215,moment/moment,2034,Request for Time Format Constant,The new moment.ISO_8601 is great  but I d like to propose a new constant: Internet Message Format.  The specs for this format can be found here: http://tools.ietf.org/html/rfc7231 page 65  Since it s part of an IETF RFC it seems like this format might be useful to others  and so I think a constant for it might be a nice enhancement. ,machineghost,closed,2,2014-11-04 17:49:31,2014-11-11 17:50:02,,,,0,1
12214,moment/moment,2035,valueOf   doesn t take zone   information into account,    javascript moment  2014 11 04 20:25:33 0000  .format    2014 11 04T20:25:33 00:00   moment  2014 11 04 20:25:33 0000  .valueOf   1415132733000 <= correct utc for local time  moment  2014 11 04 20:25:33 0800  .format    2014 11 04T12:25:33 00:00  <=correct Australian to UK time   moment  2014 11 04 20:25:33  .zone 8 .format    2014 11 04T12:25:33 08:00  <=correct Australian to UK time with negative zone??  moment  2014 11 04 20:25:33  .zone 8 .valueOf   1415132733000 <= incorrect utc unix from Australia conversion   moment  2014 11 04 20:25:33 0800  .valueOf   1415103933000 <= correct utc unix from Australia        ,ykurtbas,closed,1,2014-11-04 21:23:19,2014-11-07 19:52:53,,,,0,1
12213,moment/moment,2036,isValid not working when supplying pattern to constructor,Since we are not going to support supplying arbitrary strings to the constructor https://github.com/moment/moment/issues/1407 a needed to add the pattern as a secondary parameter.  But the outcome of isValid   is not the same afterwards      js var d = moment  not a real date    yyyy MM dd  ; console.log  valid date   d.isValid    d ;      will return true for isValid    whilst the below returns the correct isValid   == false      js var d = moment  not a real date  ; console.log  valid date   d.isValid    d ;     ,leon,closed,2,2014-11-05 08:28:35,2014-11-11 17:55:46,,,,0,1
12212,moment/moment,2037,moment.endOf  month   return wrong date,Today 5 Nov 2014  if i do  moment  .endOf  month    returns 31 october 2014 23:59  I m using  moment.js  and  moment/locale/es.js  lastest release 2.8.3  I ve tested without  moment/locale/es.js  and fails again ,rkmax,closed,1,2014-11-05 13:17:53,2014-11-05 14:15:30,,,,0,1
12211,moment/moment,2038,about fromNow method,code: var t = moment  demo  .fromNow  ;  print t  we can see  a few seconds ago .Actually  demo  is not a correct param. but we can t know it by debug message. ,AxeMea,closed,2,2014-11-07 05:56:05,2014-11-11 17:57:08,,,,0,1
12210,moment/moment,2039,Showing server time not client time on the browser,Actually im working with moment.js and showing weeks days on client side  i have this code  im using meteor        javascriptTemplate.main.helpers      showLunes  : function      moment.locale  es  ;     var lunes = moment  .startOf  week  .add 0  days  .format  LLLL  ;   return lunes;   ;      and calling this helper simply like    showLunes     This works for me  but when other partner open the web page and he have different hour or date or whatever  the browser take client time and instead show current day  its show another day ,Ethaan,closed,2,2014-11-07 17:51:06,2016-04-01 02:55:50,,,,0,1
12209,moment/moment,2040,Time setter bug in Safari 8.0,With this [JSBin] http://jsbin.com/giwivumazu/1/edit?html js console   I get the expected time on Nov 2  last sunday; writing this on Nov 7  2014  in Chrome  FF  ad Safari.  However  in Safari  the hour changes depending on how many time setters I m using after the day setter  one hour is subtracted for every time setter used .  The  potential  bug doesn t seem to appear when setting the day to anything other than Sunday/0.  I m not sure how the it behaves on other days/times.  This looks like a bug  but please let me know if I m missing something  ,Koosmann,closed,4,2014-11-07 22:26:50,2016-04-01 18:45:06,,Troubleshooting,,,0,1
12208,moment/moment,2041,Appropriate way to set custom data for locales,Just a quick question: Is it frowned upon to set custom keys when registering a locale?  For example:      javascript moment.locale  fr         greeting:  Bonjour     ;      Accessed via:      javascript > moment.localeData  ._greeting >  Bonjour        Is there any reason to not do this? Or is there a better way to do something like this? ,mmase,closed,2,2014-11-09 00:39:33,2014-11-11 18:01:42,,,,0,1
12207,moment/moment,2042,.fromNow   does not respect current locale setting, .fromNow    always use first locale set by  moment.locale  LNG    .So it is not possible to change current language at runtime   I have created a reproducable example at http://jsfiddle.net/s__a/ceu9kqt6/2/ ,s-a,closed,5,2014-11-09 23:09:27,2016-04-08 11:57:25,,Enhancement,,,0,1
12206,moment/moment,2043,Wrong date created with IE8,The following code returns  3914 11 01  in IE8 and  2014 11 01  in the latest Chrome.      var   now = new Date      firstDayOfTheMonth = moment [now.getYear   1900  now.getMonth    1]  ; console.log firstDayOfTheMonth.format  YYYY MM DD  ;      I ve fixed it with the following code:      firstDayOfTheMonth = moment [now.getYear    now.getYear   < 1900 ? 1900 : 0   now.getMonth    1]         created a [jsfiddle] http://jsfiddle.net/4z7xLf16/3/  but jsfiddle doesn t seem to work in IE8. ,jameslnewell,closed,1,2014-11-10 01:44:36,2014-11-11 18:14:36,,,,0,1
12205,moment/moment,2044,Modified CONTRIBUTING.md in order to correct a duplicate wording...,I deleted a duplicate of the word  pull  within the CONTRIBUTING.md documentation file. The file is now more readable.  ,ChicagoDev,closed,1,2014-11-11 04:50:55,2014-11-16 22:27:43,,,,1,1
12204,moment/moment,2045,adding Duration.preciseHumanize to return precise human readable duration,inspired by http://codebox.org.uk/pages/moment date range plugin but with better fitting into the existing code ,HoffmannP,closed,2,2014-11-11 14:15:45,2014-11-16 22:27:12,,,,1,1
12203,moment/moment,2046,Prevent Bubbling when setting DOY/hours/minutes/etc,We have a form that lets users input the value for minutes  seconds  DOY  etc to then build date objects used elsewhere  and having everything bubble up by default is rather unexpected to most users.  Moment having an option to disable this or bypass the bubbling up  event saying it s invalid etc would be great. ,Gillingham,open,5,2014-11-11 22:09:55,0000-00-00 00:00:00,,Enhancement,,,0,1
12202,moment/moment,2047,error in creating durations from mutated durations,    a = moment.duration 1  a.subtract a  // a now has a duration of 0 milliseconds b = moment.duration a  // b has a duration of 1 millisecond      I think the duration created with a duration parameter should have the length of that duration  but it seems to be picking up the original length of that duration before its value was mutated. ,jacoblyles,closed,0,2014-11-12 01:57:38,2014-11-12 01:58:14,,,,0,1
12201,moment/moment,2048,Croatian months  hr    corrected typo   months: sje anj to sije anj  and...,... vel. to velj.  lj can not be splitted . Reference https://hr.wikipedia.org/wiki/Kategorija:Mjeseci_u_godini ,trebor74hr,closed,8,2014-11-12 04:38:41,2015-05-04 16:17:16,,Needs tests,,2.10,1,1
12200,moment/moment,2049,Bug in diff calculation?,I do      moment  moment  2014 09 29 21:10:39   .diff moment  2014 09 29 20:38:57    .format  hh:mm:ss   > 01:31:42       While it should be:       00:31:42       So  I always see extra hour. Why it is like this? ,minimedj,closed,5,2014-11-12 13:53:35,2014-11-29 19:10:39,,,,0,1
12199,moment/moment,2050,moment ICU format,Hi   Why moment does not follow the ICU  like intl extension ?  for the day  ICU said : dd for 01 31 but moment use DD for the same thing. http://www.icu project.org/apiref/icu4c/classSimpleDateFormat.html details  Thanks ,Erwane,closed,2,2014-11-14 15:37:49,2015-11-17 08:25:35,,,,0,1
12198,moment/moment,2051,add a space,When using  fromNow    to display a space  between English word and Chinese character will make a better UX for Chinese users. And most of the websites in China do like so. ,egoist,closed,4,2014-11-14 17:09:53,2015-05-04 07:56:51,,Needs tests,,2.10,1,1
12197,moment/moment,2052,wrong time format for german,The german time format is shown with  am  and  pm  and not in 24h. if you delete [Uhr] in the LT it works fine   longDateFormat :   LT:  HH:mm [Uhr]   L :  DD.MM.YYYY   LL :  D. MMMM YYYY   LLL :  D. MMMM YYYY LT   LLLL :  dddd  D. MMMM YYYY LT     ,Jantastic,closed,5,2014-11-17 08:15:48,2014-11-26 13:21:12,,,,0,1
12196,moment/moment,2053,Update zh tw.js,Appended     in zh tw test files. ,lockchou,closed,1,2014-11-17 08:19:27,2015-01-17 09:13:43,,,,1,1
12195,moment/moment,2054,Call updateOffset when creating moment,Goes along with [moment timezone/pull/152] https://github.com/moment/moment timezone/pull/152 . ,elad,closed,7,2014-11-17 18:20:17,2014-12-28 17:00:42,,,2.9,1,1
12194,moment/moment,2055,Lost precision when summing moments with milliseconds values,I am trying to use moment.js for processing some race results and I need precision to the millisecond. I have noticed that when I sum up two moments that have values to the milliseconds  the impact of the second moment gets lost.   Here an example  which you can also find here http://jsfiddle.net/8e2nzxug/6/ :  > var a = moment  01:333    ss:SSS   > var b = moment  02:444    ss:SSS   > a.add b .format  ss:SSS   >  03:333   I would expect the answer to be  03:777 .  Am I doing anything wrong? ,fedeoasi,closed,1,2014-11-19 01:00:08,2014-11-19 05:55:53,,,,0,1
12193,moment/moment,2056,New formatToken  x  broken?,moment  .format  x   returns x itself instead of the unix time in millis. I guess that something is wrong with the new  x  format processing ,LeleDev,closed,1,2014-11-19 07:54:52,2014-11-19 09:53:22,,,,0,1
12192,moment/moment,2057,moment calendar month,I think it would be a great addition to add nextMonth and lastMonth to the  Locale calendar . Extending it like this:      js moment.locale  en         calendar :           lastDay :  [Yesterday at] LT           sameDay :  [Today at] LT           nextDay :  [Tomorrow at] LT           lastWeek :  [last] dddd [at] LT           nextWeek :  dddd [at] LT           lastMonth:  foo           nextMonth:  bar           sameElse :  L          ;     ,vdclouis,closed,2,2014-11-19 08:06:06,2016-04-01 03:20:29,,Enhancement,,,0,1
12191,moment/moment,2058,Capitalize JavaScript properly on momentjs.com,Kind of blatant.  Also  is there a repo for the website? ,dandv,closed,2,2014-11-19 09:15:18,2014-12-01 06:45:27,,,,0,1
12190,moment/moment,2059,Add packaging for Meteor.js,Continuing  1974 for full Meteor.js support. ,dandv,closed,21,2014-11-19 11:12:26,2014-11-20 18:04:35,,,,1,1
12189,moment/moment,2060,2 tests failed. diff:diff between utc and local  80.2  diff:diff between utc and local  80.4  ,    Client info      Date String   : Fri Nov 21 2014 17:09:34 GMT 0300  RTZ 2         Locale String : 21.11.2014  17:09:34 Offset        :  180 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/38.0.2125.111 Safari/537.36            diff:diff between utc and local  80.2   month diff      javascript // Expected 2 // Actual   1 1 == 2            diff:diff between utc and local  80.4   week diff      javascript // Expected 3 // Actual   2 2 == 3     ,sovetkin-am,closed,1,2014-11-21 14:09:43,2015-07-15 21:44:31,,Unit Test Failed,,,0,1
12188,moment/moment,2061,Do not include development/documentation in bower release,,joscha,closed,7,2014-11-23 14:10:53,2015-05-04 07:55:56,,,2.10,1,1
12187,moment/moment,2062,Fix Meteor integration and make it more robust,Fix issues encountered in PR  2059. ,dandv,closed,2,2014-11-24 03:09:17,2014-11-29 19:16:41,,,,1,1
12186,moment/moment,2063,Date issue on windows OS,Hello  there is an interesting issue  reproducible on windows with patch http://support.microsoft.com/kb/2998527/  Here is a small piece of code to show the problem  run it in the browser  which uses V8 JavaScript Engine. Chrome for example :      javascript new Date  2014 01 01   // Wed Jan 01 2014 04:00:00 GMT 0400 new Date 2014  0  1  // Tue Dec 31 2013 23:00:00 GMT 0300      As a result  the following code in moment.js works a bit odd:      javascript moment  2014 10 31  .dayOfYear   // 305 moment  2014 11 01  .dayOfYear   // 336 moment  2014 11 02  .dayOfYear   // 307      So  what you think about it? Should it be fixed in moment.js or it s better to wait for the global solution? ,sullenor,closed,2,2014-11-24 10:57:08,2015-05-02 23:15:36,,,,0,1
12185,moment/moment,2064,Fix JavaScript spelling,,dandv,closed,1,2014-11-24 11:13:55,2014-12-22 09:15:39,,,,1,1
12184,moment/moment,2065,Fix JavaScript spelling,,dandv,closed,1,2014-11-24 11:14:55,2014-12-22 09:15:15,,,,1,1
12183,moment/moment,2066,Uniform package description across Bower  Npmjs etc.,,dandv,closed,2,2014-11-24 11:15:42,2014-12-24 21:34:33,,,2.9,1,1
12182,moment/moment,2067,Add single digit option for AM/PM,Could you add the option of a single A or P or a or p ?  THanks. ,KrunchMuffin,closed,1,2014-11-24 18:08:03,2014-12-01 06:58:23,,,,0,1
12181,moment/moment,2068,Remove [ client   server ] from meteor/package.js,Architecture is only necessary if you want only client or server or if you want to use the third options argument. ,zimme,closed,1,2014-11-25 05:06:58,2014-11-29 18:40:33,,,,1,1
12180,moment/moment,2069,2 tests failed. diff:diff between utc and local  80.2  diff:diff between utc and local  80.4  ,    Client info      Date String   : Tue Nov 25 2014 10:34:21 GMT 0300  RTZ 2         Locale String : 25.11.2014  10:34:21 Offset        :  180 User Agent    : Mozilla/5.0  Windows NT 6.2; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/41.0.2229.2 Safari/537.36            diff:diff between utc and local  80.2   month diff      javascript // Expected 2 // Actual   1 1 == 2            diff:diff between utc and local  80.4   week diff      javascript // Expected 3 // Actual   2 2 == 3     ,Gizmodo,closed,1,2014-11-25 07:57:48,2015-06-19 06:23:21,,Unit Test Failed,,,0,1
12179,moment/moment,2070,Extra white space in localized format for Serbian  Croatian  Bosnian  and Slovenian,For the locales listed below there should be no white space in the localized date string    L     i.e.  25. 11. 2014  should be  25.11.2014 .  Historically  all these _inherit_ from the German locale.   Serbian  sr  [at line 46] https://github.com/moment/moment/blob/develop/locale/sr.js L46  and  sr cyrl  [at line 46] https://github.com/moment/moment/blob/develop/locale/sr cyrl.js L46    Croatian  hr  [at line 78] https://github.com/moment/moment/blob/develop/locale/hr.js L78    [Bosnian] http://en.wikipedia.org/wiki/Bosnia_and_Herzegovina   bs  [at line 77] https://github.com/moment/moment/blob/develop/locale/bs.js L77    [Slovenian] http://en.wikipedia.org/wiki/Slovenia   sl  [at line 84] https://github.com/moment/moment/blob/develop/locale/sl.js L84   Macedonian locale has the correct date format. ,cebence,closed,6,2014-11-25 13:05:30,2016-04-08 11:55:35,,,,0,1
12178,moment/moment,2071,Using add  d   1  in Firefox on 06 January gives Groundhog Day  any year ,Hello  I use momentjs for calendar and generate list of days via add  d   1 .  I have an interesting issue in Firefox with it.  Here is fiddle for it  please run by Firefox : http://jsfiddle.net/zvp4L1ug/  It appears on Januaries  version momentjs 2.3.1  but latest too gives bug  when I set value  any  and format:   [7b97fedc5c9b60d3578bfff93343c30f] https://cloud.githubusercontent.com/assets/2650331/5227926/f6e1d022 7713 11e4 8225 bae84a755860.png   But when I don t set value and format all is ok.   [image] https://cloud.githubusercontent.com/assets/2650331/5227942/4ed48644 7714 11e4 8374 4ed79c9b7b89.png  ,amIwho,closed,3,2014-11-28 13:05:07,2015-11-26 14:42:12,,,,0,1
12177,moment/moment,2072,Support of grammatical inflections in .format  ,I believe there is a need for another format option for displaying months; some languages  Russian and Polish for sure  grammatically differentiate between  January  as in  11th of January   something that you d write below a blog post  and  January  as in  The month of January   something you d place as a caption on a dictionary widget . So in Russian it sounds like  11          [odinnadtsatoye yanvarya]  but                [mesyats yanvar]. Both forms are used in natural language very often  yet as of now moment.js only supports the latter  which seriously cripples its expressiveness when used with Russian locale and forces the developers to come up with his own improvised solutions. Some other projects such as Django already took a note of this pressing need  https://docs.djangoproject.com/en/1.7/ref/templates/builtins/ date . I very much hope that this feature can be implemented. No doubt Russian  Ukrianian and Polish developer communities  at the very least these three  will appreciate it greatly. ,htch,closed,2,2014-11-28 13:12:09,2014-12-01 11:19:31,,,,0,1
12176,moment/moment,2073,Get rid of the .sh scripts; target all Meteor versions,No more  .sh  scripts :   Hope to be the last PR in the  2062 series. ,dandv,closed,1,2014-11-30 07:18:28,2014-12-01 06:40:39,,,,1,1
12175,moment/moment,2074,Implement moment.fn.utcOffset  deprecate momen.fn.zone,Implements  1779 ,ichernev,closed,1,2014-11-30 19:03:19,2014-12-24 21:33:59,,,2.9,1,1
12174,moment/moment,2075,Can t add fractional months,Nothing happens when trying to add fractions of months  moment  .add  months:0.5     while working correctly with whole numbers. http://plnkr.co/edit/JUXa2QH1N91yRWxYZreA ,lefnire,closed,1,2014-11-30 22:41:38,2014-11-30 22:49:53,,,,0,1
12173,moment/moment,2076,Manipulating dates does not update value returned by toISOString and toJSON functions,Using toISOString and toJSON functions outputs the original date instead of the manipulated date.  http://jsfiddle.net/wdnomhr8/ ,dplarina,closed,1,2014-12-01 17:29:00,2016-04-01 03:16:58,,Troubleshooting,,,0,1
12172,moment/moment,2077,fromNow: Letting window open on FIREFOX in the background cause unresponsive javascript error,I am calling  moment dateString .fromNow  ;  every 30 seconds to update the time since in firefox and leave it in the background. After approximately 7 10 minutes  observe the following error pop up.   A script on this page may be busy  or it may have stopped responding. You can stop the script now  open the script in the debugger  or let the script continue.  Script: js/moment.js:599   The issue seems similar to the one listed here but in my case  there is no crash but a unresponsive script error: https://code.google.com/p/chromium/issues/detail?id=336129  Versions used: moment.js version : 2.8.3 moment timezone.js: version : 0.2.2 ,sunilsd,closed,4,2014-12-01 19:32:00,2016-04-01 18:47:14,,Troubleshooting,,,0,1
12171,moment/moment,2078,Problem with ISO_8601 parsing.,This used to work in 2.6.0:  var a = new moment  2014 11 30T00:00:00 02:00   a.format moment.ISO_8601   It does not work in 2.8.2 anymore.  ,FrikkinLazer,closed,4,2014-12-02 12:45:54,2015-04-01 07:04:39,,,,0,1
12170,moment/moment,2079,Bug: fromNow   gives the wrong result for invalid number,  What is the bug?      > var j = moment NaN  undefined > j.fromNow    a few seconds ago  > j.calendar    Invalid date        Why is it a bug? 1. Inconsistency   calendar    correctly detects that this date is invalid but  fromNow    blindly spit out results 2. Probability. In our case we parse an angular attribute like this:  moment Number attrs.epoch    and instead of saying  Invalid date  it says  a few seconds ago .  version : 2.8.3 ,userpixel,closed,3,2014-12-02 16:13:28,2015-05-04 07:52:09,,,,0,1
12169,moment/moment,2080,startOf  day   == endOf  day   ?,It s possible to get in a state where startOf  day   is the same as endOf  day  . Which I guess really means that endOf  day   is buggy. Here s how to reproduce:   Note that I m in GMT 500  I think you need to change this to midnight where ever you are   var foo = moment  Mon Nov 17 2014 00:00:00 GMT 0500  ; foo.startOf  day  .isSame foo.endOf  day     => true  It s not an isSame issue either  just print the dates. ,gflarity,closed,1,2014-12-02 20:50:31,2014-12-02 21:54:57,,,,0,1
12168,moment/moment,2081,Missing locale files en and en US,I appreciate this may be the default language  but it would be convenient if the source had reference files  even empty ones  for these two locales.  At best one could expect a 404 for some implementations that dynamically switch locales  but in my case I m having to create a list of the locale subset supported by both AngularJS and MomentJS   unfortunately   en  and  en US  don t make the of course.  How about a couple of blank files with the simple text /   default  / ? ,danieljsinclair,closed,3,2014-12-04 16:53:56,2014-12-21 20:31:41,,,,0,1
12167,moment/moment,2082,Mistake  closed.,,acoyfellow,closed,0,2014-12-04 21:14:02,2014-12-04 21:22:55,,,,0,1
12166,moment/moment,2083,Update NuGet package with version 2.8.4,It seems like the NuGet package was not updated since 2.8.2. Should probably be updated :  ,nmehlei,closed,1,2014-12-05 12:27:43,2014-12-21 20:28:15,,,,0,1
12165,moment/moment,2084,fix some JS minifiers from choking on regex literal,Some JS minifiers  e.g. jsmin 1.0.1  interpret this line as an unterminated regex. ,cmathew,closed,3,2014-12-05 23:30:33,2014-12-06 00:29:46,,,2.9,1,1
12164,moment/moment,2085,5 tests failed. locale:el:parse meridiem  804.2  locale:el:parse meridiem  804.4  locale:el:parse meridiem  804.6  locale:el:parse meridiem  804.8  locale:el:parse meridiem  804.10  ,    Client info      Date String   : Sun Dec 07 2014 13:28:56 GMT 0300 Locale String : 7         2014  . 13:28:56 Offset        :  180 User Agent    : Opera/9.80  Windows NT 6.1; WOW64  Presto/2.12.388 Version/12.17            locale:el:parse meridiem  804.2   1:25:10    should be parsed as valid      javascript // Expected true // Actual   false false == true            locale:el:parse meridiem  804.4   10        > true      javascript // Expected true // Actual   false false == true            locale:el:parse meridiem  804.6   10        > true      javascript // Expected true // Actual   false false == true            locale:el:parse meridiem  804.8   10  . .     > true      javascript // Expected true // Actual   false false == true            locale:el:parse meridiem  804.10   10  . .     > true      javascript // Expected true // Actual   false false == true     ,moraug,open,1,2014-12-07 10:32:49,0000-00-00 00:00:00,,Unit Test Failed,,,0,1
12163,moment/moment,2086,how to parse date with locale format?,I want parse a string date using the global locale set. I want the reverse function of this: moment  .format  L   In short I want the right way to make this: moment.locale my_locale ; moment locale_date  moment._locale._longDateFormat.L ; I aspect ti do something like this: moment locale_date   L    Thanks  Alessandro ,alex75it,closed,1,2014-12-07 23:46:48,2014-12-21 20:27:41,,,,0,1
12162,moment/moment,2087,Enhancement: isBetween,There s a isBefore  isAfter and isSame ... but I m missing an isBetween.  :  ,MojoDK,closed,3,2014-12-08 08:26:06,2014-12-28 16:23:46,,Enhancement,,,0,1
12161,moment/moment,2088,add isBetween,closes  2087 ,stoeffel,closed,5,2014-12-08 21:16:41,2014-12-24 21:28:57,,,2.9,1,1
12160,moment/moment,2089,Better names for date formats,I ve to render date in  short date  format. For  en  culture it is  12/8/2014    M/d/yy  . For  it  culture it is  08/12/2014    dd/MM/yy  . The first one correspond to moment   l     M/D/YY   and the second to moment   L    DD/MM/YY .  I de like to use a simple format name as  shortDate   examples: date.format  shortDate   or date.format moment.formats.SHORT_DATE   1  How to choose the right locale format for  short date   this is not a matter for momentJS? 2  Why not use clear name for formats as shortDate  longDate  shortTime  fullDate?  Thanks  Alessandro ,alex75it,closed,1,2014-12-08 22:36:56,2014-12-21 20:25:48,,,,0,1
12159,moment/moment,2090,Add a special case for years in Hebrew locale,In Hebrew years that end with a zero except 10  20  30  100  etc.  use a different plural form  which is identical to the singular.  I added this form.  This is also used by the CLDR plural rules. ,amire80,closed,3,2014-12-09 00:28:42,2014-12-24 21:27:58,,,2.9,1,1
12158,moment/moment,2091,fromNow   returns invalid date if invalid, 2079 ,donaldpcook,closed,2,2014-12-09 20:11:12,2015-05-04 07:52:24,,Needs tests,,2.10,1,1
12157,moment/moment,2092,Moment doesn t always attach to window.,Hello guys.  There s this line in moment.js      js globalScope = typeof global  ==  undefined  ? global : this       If there s an element on the page that has  id= global   then moment will be attached to this element and not to window because unfortunately this http://www.w3.org/html/wg/drafts/html/master/browsers.html named access on the window object  I cannot provide jsfiddle because it s not happening in jsfiddle  not sure why   but it happens with simple test page like this.      html < doctype html> <html> <head>     <title>Moment test</title> </head> <body>     <div id= global ></div>     <script src= http://momentjs.com/downloads/moment.min.js ></script>     <script>        console.log document.getElementById  global  .moment ; //works        console.log moment ; //moment is undefined     </script> </body> </html>     ,vxsx,closed,7,2014-12-10 10:17:36,2015-04-01 04:42:09,,,,0,1
12156,moment/moment,2093,moment directive for angular?,If we detect angular is present  we can expose a directive:      html <ANY moment date= scope.myDate  format=  lll  ></ANY>          js  use strict ;  /      @ngdoc directive    @name momentjs.directive:moment    @description      moment    <ANY moment date= scope.iso8601date  format=  lll  ></ANY>   / angular.module  momentjs     .directive  moment   function          return         restrict:  A         scope:           date:  =           format:  =                 link: function postLink scope  element  attrs            scope.formattedDate = moment scope.date .format scope.format ;         element.text scope.formattedDate ;              ;     ;      I don t know about the detection part  maybe just share the recipe on momentjs website? thoughts? ,dnozay,closed,1,2014-12-10 17:46:57,2014-12-21 20:16:20,,,,0,1
12155,moment/moment,2094,Object constructor should use  date  not  day ,When creating a new moment from an object  the Day of the Month property should be called  date  to be consistent with the rest of the API. The  day  is the day of the week  I guess you should leave it for backwards compatibility  though .      moment   year :2010  month :3  day :5  hour :15  minute :10  second :3  millisecond :123  ;      becomes      moment   year :2010  month :3  date :5  hour :15  minute :10  second :3  millisecond :123  ;     ,snoopyjc,closed,1,2014-12-10 18:02:36,2014-12-21 06:52:39,,,,0,1
12154,moment/moment,2095,isDay  isMonth  ...,Add logical methods  moment  .isDay  Sunday    or  moment  .isDay 0    moment  .isMonth  January    or  moment  .isMonth 0    moment  .isDate 24    moment  .isYear 2014   ... ,tamtakoe,closed,1,2014-12-11 08:33:04,2014-12-21 06:43:54,,,,0,1
12153,moment/moment,2096,How many days in month,Hi. I just wonder  can I count how much days in current months? ,m4a1fox,closed,2,2014-12-11 13:44:01,2014-12-11 14:10:09,,,,0,1
12152,moment/moment,2097,add ar tn locale,,naderio,closed,3,2014-12-11 20:11:25,2014-12-24 21:25:42,,,2.9,1,1
12151,moment/moment,2098,Add nuget publishing support,Added with the support of @corydeppen ,ichernev,closed,3,2014-12-14 21:48:02,2014-12-24 21:24:57,,,2.9,1,1
12150,moment/moment,2099,moment.js Uncaught SyntaxError: Unexpected end of input,When I use moment.min.js  chrome gave me such error Uncaught SyntaxError: Unexpected end of input moment.min.js:7  Here is pieces of .html:     <script src= /static/js/jquery.min.js ></script>     <script src= /static/js/bootstrap.min.js ></script>     <script src= /static/js/headroom.min.js ></script>     <script src= /static/js/jQuery.headroom.min.js ></script>     <script src= /static/js/template.js ></script>     <script src= /static/js/moment.min.js ></script>     <script src= /static/js/bootstrap datetimepicker.min.js ></script>  I tried version 2.6 and 2.8.4 2.8.3  but met the same error. ,buptmuye,closed,3,2014-12-15 13:18:27,2015-04-01 06:28:03,,,,0,1
12149,moment/moment,2100,Incorrect docs or bug in behaviour?,I m not sure if this is incorrect docs or if there is a bug in behaviour.   At http://momentjs.com/docs/ /parsing/string format/ the docs      The parser ignores non alphanumeric characters  so both of the following will return the same thing.  moment  12 25 1995    MM DD YYYY  ; moment  12 25 1995    MM DD YYYY  ;      However  running  moment  12 25 1995    MM DD YYYY  .isValid    will return  true   and running  moment  12 25 1995    MM DD YYYY  .isValid    will return false.  Is this a bug or just incorrect docs?  Separate to this I also noticed that in the  Year  month  and day tokens  section on the same page it specified that  M  and  MM  can be used for  1..12  for month number  same for  D    DD  for day of month . However  doing the following  moment  12 9 1995    MM DD YYYY   true .isValid    would return  false  whereas  moment  12 9 1995    MM D YYYY   true .isValid    would return  true . I understand the behaviour   DD  required two digits whereas  D  allows one or two   but the docs seem confusing around this. I ll gladly submit doc update PR s for these items. I just wanted to check that the bahviour is correct and not a bug  especially in the first item above  ,briandela,closed,1,2014-12-16 01:04:36,2014-12-21 04:08:30,,,,0,1
12148,moment/moment,2101,Error thrown for moment.duration null ,How should moment.duration handle nulls? Currently  moment.duration undefined   creates a valid duration object  whereas  moment.duration null   throws the following error  Cannot use  in  operator to search for  from  in null .  Is this the correct behaviour? ,eddielee6,closed,1,2014-12-16 14:31:55,2014-12-29 14:12:20,,Bug,,,0,1
12147,moment/moment,2102,2 tests failed. diff:diff between utc and local  80.2  diff:diff between utc and local  80.4  ,    Client info      Date String   : Tue Dec 16 2014 20:42:55 GMT 0300  RTZ 2         Locale String : 16.12.2014  20:42:55 Offset        :  180 User Agent    : Mozilla/5.0  Windows NT 6.3; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/39.0.2171.95 Safari/537.36            diff:diff between utc and local  80.2   month diff      javascript // Expected 2 // Actual   1 1 == 2            diff:diff between utc and local  80.4   week diff      javascript // Expected 3 // Actual   2 2 == 3     ,brutto,closed,1,2014-12-16 17:43:51,2015-06-19 06:23:30,,Unit Test Failed,,,0,1
12146,moment/moment,2103,Explicit dependency array to make AMD definition Dojo Loader compatible,Dojo Loader doesn t like the explicit module name syntax with implicit dependencies:      define  moment   function  require  exports  module          It s however OK when everything is implicit:      define function  require  exports  module          But  then the implicit module name could cause problems with Moment plugins if the path to Moment is mapped to a module other than  moment . So  a more compatible fix would be to declare the dependencies explicitly  both RequireJS and Dojo Loader are OK with this syntax :      define  moment   [ require    exports    module ]  function  require  exports  module        ,atesgoral,closed,2,2014-12-16 20:15:31,2014-12-25 18:31:12,,,,1,1
12145,moment/moment,2104,Frisian  fy  language file with unit test,I translated the language file to Frisian  fy: Frysk   a language spoken in the northern part of the Netherlands. ,RobinvanderVliet,closed,4,2014-12-16 21:57:16,2014-12-24 21:23:12,,,2.9,1,1
12144,moment/moment,2105,Changing the unit of measurement in diff,Current documentation says you should use  days     years    seconds  to format the output of diff. The code says otherwise  it is looking for  day    hour    week    year   etc. ,icg-imarinova,closed,2,2014-12-16 22:45:46,2014-12-18 17:33:31,,,,0,1
12143,moment/moment,2106,diff does not return an absolute value,diff uses the absRound function and by the name I was expecting to get an absolute value which is not the case. ,icg-imarinova,closed,3,2014-12-16 23:03:24,2014-12-19 08:08:20,,,,0,1
12142,moment/moment,2107,Add the unit of time for minute in locale zh tw . ,I add the unit of time for minute in traditional chinese  zh tw   and the unit test is pass now.  Testing zh tw.js........................OK ,wtsai,closed,7,2014-12-17 06:42:04,2015-05-04 07:44:54,,,2.10,1,1
12141,moment/moment,2108,moment allowing invalid dates,moment  12/13345345345/2014    MM DD YYYY  .isValid   returns true and evaluates to  Tue Dec 13 3453 . However  moment  12/33345345345/2014    MM DD YYYY  .isValid   returns false. My assumption is that it is looking at the first 2 numbers as the month  the second two as the day and the next 4 as the year regardless of any additional numbers. This is counter intuitive and both of the examples above should return false. For the first one  moment   should evaluate the month as  12   the day as  13345345345  and the year as  2014 . ,jayrosen1576,closed,4,2014-12-17 15:55:44,2014-12-19 08:06:29,,,,0,1
12140,moment/moment,2109,Date diff in months returning possible incorrect value   less for later date,I am using moment for some date duration validation  and got a failing test around a month border.  We are trying to get the  months  difference  and a later date is showing a smaller difference.  Is the months difference something we shouldn t rely on  or is this a bug  or expected behavior due to the annoying month of February?      javascript // notice how the diff for 01 Feb to 01 May goes DOWN from 30 Apr.  It goes back up  moment  2014 02 01  .diff moment  2014 04 30 23:59:59     months   true ;  //  3.034482359514687 moment  2014 02 01  .diff moment  2014 05 01 23:59:59     months   true ;  //  3.0338979127432517 moment  2014 02 01  .diff moment  2014 05 02 23:59:59     months   true ;  //  3.0677962178279974      Doing the same without times results in  3 for two different dates:      javascript moment  2014 02 01  .diff moment  2014 04 30     months   true ;  //  3 moment  2014 02 01  .diff moment  2014 05 01     months   true ;  //  3      Edit: Downloaded  moment.min.js  yesterday   v2.8.4   ,awbacker,closed,2,2014-12-18 08:48:16,2014-12-19 03:23:32,,,,0,1
12139,moment/moment,2110,Append  now   2d  parsing support feature,Hi   what do you think about improve momentjs parsing to support some string like :       moment  now   2d  ; moment  now   2week  ; ...     ,harobed,closed,1,2014-12-18 13:59:27,2014-12-19 08:04:17,,,,0,1
12138,moment/moment,2111,Create valid duration object when null is passed to moment.duration  ,Fixes https://github.com/moment/moment/issues/2101. ,chasenlehara,closed,4,2014-12-19 08:42:36,2014-12-29 14:12:00,,,,1,1
12137,moment/moment,2112,ISO 8601 YYYYMMDD format not valid,for some reason  i m using v 2.8.3  moment gives an invalid error when you pass in a string in the ISO 8601 format of YYYYMMDD according to the ISO  the     are not required and subject is valid under the standard. ,marc-gist,closed,2,2014-12-19 14:20:16,2014-12-21 03:20:54,,,,0,1
12136,moment/moment,2113,AMD: Multiple anonymous defines in locale bundles,This affects the following files:    min/locales.js     min/locales.min.js     min/moment with locales.js     min/moment with locales.min.js   These files each contain multiple anonymous  define s which makes it impossible to load them AMD style  e.g. with require.js .  The sources for each locale are simply concatenated in those files. To make them work properly  the locale module s name would have to be included in each locale s  define  call. ,selfawaresoup,open,3,2014-12-19 17:12:22,0000-00-00 00:00:00,,Loading,,,0,1
12135,moment/moment,2114,How do you get a duration object representing the difference between two dates?,I would have thought that momentObject.subject momentObject2  would return a duration object  but it seems not to. I can t find anything about getting the difference between two dates  tho i thought this would be basic. How can I do this? ,fresheneesz,closed,3,2014-12-19 23:26:06,2014-12-21 03:07:47,,,,0,1
12134,moment/moment,2115,incorrect  weekOfYear  for certain dow/doy combos,It appears the week calculation algorithm isn t generic enough  as it seems to handle certain dow/doy combinations incorrectly:      js // see http://en.wikipedia.org/wiki/Seven day_week cite_ref 15 moment.locale moment.locale      week:   dow: 6  doy: 1     ; moment  2012 12 28    YYYY MM DD  .week  ; // 51    should be 52? moment  2012 12 29    YYYY MM DD  .week  ; // 52    should be 1 moment  2013 01 01    YYYY MM DD  .week  ; // 52    should be 1 moment  2013 01 08    YYYY MM DD  .week  ; // 53    should be 2 moment  2013 01 11    YYYY MM DD  .week  ; // 53    should be 2 moment  2013 01 12    YYYY MM DD  .week  ; // 1    should be 3 moment  .weeksInYear 2012 ; // 52      I assume something s a bit off in the [ weekOfYear ] /moment/moment/blob/98164/moment.js L1737 1756  function  unless I m doing something wrong? ,usmonster,closed,13,2014-12-21 19:38:39,2015-07-12 23:21:24,,Bug,,,0,1
12133,moment/moment,2116,moment String  Format  not working correctly ,If I do the following   moment this.organicFieldStatusTo   MM DD YYYY  ;  I get the full date with the time   The following works great but I get the Deprecation warning: moment construction falls back to js  moment this.organicFieldStatusTo .format  MMMM DD  YYYY  ;  I would like to return just the date. this.organicFieldStatusTo = ISODate  2015 01 03T15:06:43.000Z   ,AlmogRnD,closed,1,2014-12-22 15:14:21,2015-02-17 18:30:38,,,,0,1
12132,moment/moment,2117,Add globalScope hack to more reliably distinguish Node vs browser,Browser based apps that have DOM nodes with the id  global  were being detected as Node apps for purposes of assigning moment to the runtime s global namespace.  This change is intended to fix that issue for most practical use cases  hopefully without breaking anyone s existing usage.  Algorithm:  If  global  is not defined  then we want to use  window .  If  global  is defined but  window  is not  then we want to use  global .  If both  global  and  window  are defined  then we want to assign to  global  if  window === global.window     otherwise we assume that  global === window.global   in which case we want to assign to  window .  This is an actually working version of my suggestion from  2092. ,butterflyhug,closed,1,2014-12-22 15:14:29,2014-12-24 21:21:49,,,2.9,1,1
12131,moment/moment,2118,Adding locale Sinhala  si ,[Sinhala] http://en.wikipedia.org/wiki/Sinhala_language  is the language spoken by an ethnic group called [Sinhalese] http://en.wikipedia.org/wiki/Sinhalese_people  of around 15 million individuals  mainly residing in the island nation [Sri Lanka] http://en.wikipedia.org/wiki/Sri_Lanka . ,sampathsris,closed,2,2014-12-23 06:37:41,2014-12-23 20:05:27,,,,1,1
12130,moment/moment,2119,Adding locale Sinhala  si ,Sinhala is the language spoken by an ethnic group called Sinhalese of around 15 million individuals  mainly residing in the island nation Sri Lanka. ,sampathsris,closed,3,2014-12-23 20:35:25,2015-05-04 07:44:16,,,2.10,1,1
12129,moment/moment,2120,Adding moment.to  similar to moment.from ,Newly added  moment.to  is similar to  moment.from   but the result is reversed as the relativity of dates are considered.      var today = moment  ; var dayafter = moment today .add 2   d  ;  console.log today.from dayafter  ;       // 2 days ago console.log today.to dayafter  ;         // in 2 days console.log today.to dayafter  true  ;   // 2 days     ,sampathsris,closed,2,2014-12-24 05:24:42,2015-05-04 16:35:58,,,2.10,1,1
12128,moment/moment,2121,Add current week for zh tw,The day after tomorrow was always determined as next week. So we should subtract startOfWeek time from current time  and check it is larger then a week. ,davidyen1124,closed,7,2014-12-24 06:17:40,2015-07-13 01:23:36,,Language,,2.10.5,1,1
12127,moment/moment,2122,Get months name array in different langualge,In default language  en  works fine.      moment  .format  LL  ;    25 December 2014 moment.months  ;    [ January    February   March   April   May   June   July   August   September   October   November   December ]      Now with different language    pt br       var pt = moment  .locale  pt br  ; pt.format  LL  ;    25 de dezembro de 2014 pt.months  ;    11        pt.months  ;    Why not it returns array of month names ? Is there different method to get month array ? ,Nisarg-tatva,closed,3,2014-12-25 13:00:41,2015-01-09 10:25:27,,,,0,1
12126,moment/moment,2123,added to_object method and added test for to_array as well.,,sadams,closed,3,2014-12-26 11:20:57,2015-07-26 03:02:08,,es6 rework,,2.10.5,1,1
12125,moment/moment,2124,Talossan  tzl  translation,Hello  together with Iust  Canun I created a Talossan  tzl  translation of Moment.js. It is almost finished  but there is one problem. The relative time sentences don t fit in the variables  they differ per time  future/past . Could somebody explain to me how I can implement the time sentences?  The missing future sentences: in a few seconds => osprei viensas secunds in a minute => osprei  n m ut in   minutes => osprei   m uts in an hour => osprei  n  ora in   hours => osprei    oras in a day => osprei  n ziua in   days => osprei   ziuas in a month => osprei  n mes in   months => osprei   mesen in a year => osprei  n ar in   years => osprei   ars  The missing past sentences: a few seconds ago => ja iensas secunds a minute ago => ja iens m ut   minutes ago => ja   m uts an hour ago => ja iensa  ora   hours ago => ja    oras a day ago => ja iensa ziua   days ago => ja   ziuas a month ago => ja iens mes   months ago => ja   mesen a year ago => ja iens ar   years ago => ja   ars ,RobinvanderVliet,closed,10,2014-12-26 15:30:23,2015-07-26 03:36:27,,Language,es6 rework,,2.10.5,1,1
12124,moment/moment,2125,Fix test that fails at the end of the year,Fixes failing test because it s expectation isn t met at the end of the year. ,Gobie,closed,1,2014-12-28 14:25:07,2015-01-16 18:26:36,,,,1,1
12123,moment/moment,2126,Add .editorconfig,,Gobie,closed,2,2014-12-28 14:33:45,2015-05-04 07:24:23,,,2.10,1,1
12122,moment/moment,2127,Code cleanup and speedup,Code cleanup   remove unused code   use undefined consistently  short circuiting  existing functionality  computed values  ...   clean structure of some conditions  Code speedup   optimize zeroFill by  20   benchmark added ,Gobie,closed,4,2014-12-28 14:45:58,2015-07-12 23:38:04,,,2.10.5,1,1
12121,moment/moment,2128,Add firstDayOfWeek  firstDayOfYear locale getters,Fixes  1830 ,ichernev,closed,0,2014-12-28 17:34:36,2014-12-28 17:37:23,,,,1,1
12120,moment/moment,2129,1 test failed. create:parsing week and weekday information  65.44  ,    Client info      Date String   : Sun Dec 28 2014 22:17:01 GMT 0100 Locale String : 28. 12. 2014 22:17:01 Offset        :  60 User Agent    : Mozilla/5.0  Windows NT 6.3; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/39.0.2171.95 Safari/537.36            create:parsing week and weekday information  65.44   iso week keeps this year      javascript // Expected 2015 // Actual   2014 2014 == 2015     ,michalkutil,closed,0,2014-12-28 21:35:47,2015-04-01 06:43:53,,Unit Test Failed,,,0,1
12119,moment/moment,2130,Date diff,    var diff1 = moment [1981  4  4] .from moment [2014  9  4]  ; var diff2 = moment [1981  4  4] .from moment [2014  10  4]  ; var diff3 = moment [1981  4  4] .from moment [2015  4  4]  ;  console.log diff1 ; //  33 years ago  console.log diff2 ; //  34 years ago  console.log diff2 ; //  34 years ago       v.2.8.4  As I understand we should have something like this: 33 years ago 33 years ago 34 years ago ,OxCom,closed,1,2014-12-29 07:34:10,2015-04-01 06:42:32,,,,0,1
12118,moment/moment,2131,Add quarter diff support,Fixes  1991 ,ichernev,closed,0,2014-12-29 09:11:41,2014-12-29 09:26:21,,,2.9,1,1
12117,moment/moment,2132,week number is 1 as of today,currently I m having issue with this on deployment server  as of today moment shows week of the year as 1  all my MySql queries for depend on this. Any help would be appreciated. ,ailegion,closed,2,2014-12-29 09:40:23,2014-12-29 11:09:40,,,,0,1
12116,moment/moment,2133,Reimplement month diff logic,The new algorithm to compute month differences between two moments  used in  diff a   month quarter year      is as follows:   take the whole number of months between the two dates  ignoring day of month   and hour      wholeMonthDiff    the above is adjusted linearly by how much the second date is away from the   whole month diff date  the date where the result would be exactly    wholeMonthDiff    This algorithm makes sure that dates that are exact number of months apart would return whole numbers  like previous algorithm   but also fixes a few edge cases that the old agorithm failed to do  like when the first moment is close to the end of a long month and the second moment was in the begining of a short month  end of Jan to begining of Feb for example .  Fixes  2026 ,ichernev,closed,0,2014-12-29 11:28:44,2014-12-30 07:46:50,,,,1,1
12115,moment/moment,2134,week setter not respecting the first day of week from locales, [image] https://cloud.githubusercontent.com/assets/4736419/5570509/df4cd57e 8f82 11e4 953f 134c666c751a.png   Codepen: http://codepen.io/anon/pen/Eagrzg  I ve read http://momentjs.com/docs/ /get set/week/ and I cannot understand why the weekday is changed from monday to sunday when the start date is dec 29  2014. Docs states that  When setting the week of the year  the day of the week is retained. .  Am I missing something? ,Cottin,closed,1,2014-12-29 16:54:45,2014-12-29 17:58:00,,,,0,1
12114,moment/moment,2135,Test duration custom relativeTimeThreshold,Please consider these new tests as a bug report. I ve also created a fiddle here:  http://jsfiddle.net/ca9vfr3b/  It has to do with the rounding of the  duration.as  m    value. When rounding down  29 seconds becomes 0 minutes  so the logic here results in using the  mm  unit instead of the  m  unit:  https://github.com/moment/moment/blob/develop/moment.js L1738  I attempted a fix by simply using Math.ceil   instead of round   but that turned out to be rather short sighted as it resulted in failure of many other tests. ,marcguyer,closed,4,2014-12-29 19:39:15,2015-11-09 05:41:30,,,,1,1
12113,moment/moment,2136,added Montenegrin locale  me.js ,Added missing locale for Montenegrin language    me.js    ,miodragnikac,closed,7,2014-12-29 23:27:54,2015-05-04 07:23:28,,,2.10,1,1
12112,moment/moment,2137,4 tests failed. create:first century  60.1  create:first century  60.4  create:first century  60.7  weeks:count years with iso week 53  336.1  ,    Client info      Date String   : Tue Dec 30 2014 20:17:16 GMT 0000  WET  Locale String : 30/12/2014  20:17:16 Offset        :  60 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10.10; rv:34.0  Gecko/20100101 Firefox/34.0            create:first century  60.1   Year AD 0      javascript // Expected 0000 01 01 // Actual   0000 12 31  0000 12 31  ==  0000 01 01             create:first century  60.4   Year AD 0      javascript // Expected 0000 01 01 // Actual   0000 12 31  0000 12 31  ==  0000 01 01             create:first century  60.7   Year AD 0      javascript // Expected 00000 01 01 // Actual   00000 12 31  00000 12 31  ==  00000 01 01             weeks:count years with iso week 53  336.1   Should have 71 years in 400 year cycle with iso week 53      javascript // Expected 71 // Actual   97 97 == 71     ,kozay9,closed,1,2014-12-30 20:22:14,2017-03-18 19:18:52,,Unit Test Failed,,,0,1
12111,moment/moment,2138,1 test failed. isBefore:is before day  175.10  ,    Client info      Date String   : Thu Jan 01 2015 17:55:27 GMT 0000  WET  Locale String : 1/1/2015 17:55:27 Offset        : 0 User Agent    : Mozilla/5.0  X11; Ubuntu; Linux x86_64; rv:34.0  Gecko/20100101 Firefox/34.0            isBefore:is before day  175.10   exact end of day      javascript // Expected false // Actual   true true == false     ,Youzardos,closed,1,2015-01-01 17:56:50,2017-06-17 19:40:49,,Troubleshooting,Unit Test Failed,,,0,1
12110,moment/moment,2139,Use Cyrillic letters for Chuvash diacritics,In Chuvash previously we used some additional latin letters because the Cyrillic ones could not be displayed properly. [Now it is time to use the right ones] http://chuvash.eu/2014/04/13/it is time to standardize the chuvash keyboard layout/ . I even updated the name of May:       previously it was      . ,mirontoli,closed,12,2015-01-01 22:24:48,2015-05-04 07:14:02,,,2.10,1,1
12109,moment/moment,2140, hh  token allows 0 which should be 1...12,I want to validate if a hh:mm time input is valid or not. But moment  00:59   hh:mm   true .isValid   returns true.  It should be false.  ,qizhengyu,closed,2,2015-01-02 21:21:26,2015-07-12 23:15:27,,Bug,,,0,1
12108,moment/moment,2141,moment.isDSTShifted   not reporting expected values,I m having issues with  isDSTShifted    working as expected. Please see the following fiddle:  http://jsfiddle.net/natewittstock/s2uf18ea/1/    My Output:        // Chrome 2015 03 08 1:30:     2015 03 08T01:30:00 08:00   false 2015 03 08 2:30:     2015 03 08T03:30:00 07:00   false 2015 03 08 3:30:     2015 03 08T03:30:00 07:00   false  // Firefox 2015 03 08 1:30:     2015 03 08T01:30:00 08:00   false 2015 03 08 2:30:     2015 03 08T01:30:00 08:00   false 2015 03 08 3:30:     2015 03 08T03:30:00 07:00   false  // nodejs  entered in REPL as below  > moment  2015 03 08 1:30    YYYY MM DD HH:mm  .format    2015 03 08T01:30:00 08:00  > moment  2015 03 08 2:30    YYYY MM DD HH:mm  .format    2015 03 08T01:30:00 08:00  > moment  2015 03 08 3:30    YYYY MM DD HH:mm  .format    2015 03 08T03:30:00 07:00  > moment  2015 03 08 1:30    YYYY MM DD HH:mm  .isDSTShifted   false > moment  2015 03 08 2:30    YYYY MM DD HH:mm  .isDSTShifted   false > moment  2015 03 08 3:30    YYYY MM DD HH:mm  .isDSTShifted   false      I d expect the calls with  2015 03 08 2:30  to show  true  for calls to  isDSTShifted     I m seeing this issue on:   nodejs v0.10.35   Chrome 39.0.2171.95  64 bit    Firefox 34.0.5   all on Mac OS X 10.10.1; reproducible across varying systems of relatively the same spec  either OS X 10.9 or 10.10; latest ish of Chrome  as confirmed by my co workers   My system s timezone is being set automatically by the Apple preference pane  and reports  Time Zone: Pacific Standard Time  and  Closest City: Portland  OR   United States   Can confirm the Javascript date object thinks I m in PST  via       > new Date   Fri Jan 02 2015 14:25:10 GMT 0800  PST       Let me know if there s any other information I can give you. Thanks  ,fardog,closed,2,2015-01-02 22:28:02,2015-07-26 04:50:22,,Bug,,,0,1
12107,moment/moment,2142,Z does not parse ISO8601   HH,[ISO8601] http://en.wikipedia.org/wiki/ISO_8601  allows   01  in addition to   0100  and   01:00  as timezone offset. Is there any reason why this isn t parsed by moment.js? It is trivial enough to fix  but perhaps there are other considerations I m unaware of? ,syranide,closed,6,2015-01-05 14:52:39,2015-05-02 06:01:14,,Bug,,,0,1
12106,moment/moment,2143,Incorrect fallback value?,I stumbled across this while browsing the code... https://github.com/moment/moment/blob/2.8.4/moment.js L1167  Specifically  ...    []  at the end of  tzChunk   shouldn t it be  ...       ? It doesn t actually matter because       [] ===      but it seems like a mistake. ,syranide,closed,4,2015-01-05 14:58:44,2015-07-12 22:35:10,,Bug,,,0,1
12105,moment/moment,2144,Moment returns invalid time in Day light saving mode,My timezone is New york   GMT 500 on EST and GMT 400 on EDT . In New york  Day light saving for 2015 starts at Mar 8  2015 02:00:00    That means  if we pass this datetime to momentjs   it should return isDST   as true.  But for me   moment  Sun Mar 08 2015 02:15:00 GMT 0400  EDT   .isDST  ;    it returns false  // means it is not DST  but actually it is DST  When i execute    moment  Sun Mar 08 2015 02:15:00 GMT 400  .isDSTShifted  ;  it returns false // means time is not shifted  but it is shifted   shifted 1 hour back wards then change to GMT 500  EST   now it shows Sun Mar 08 2015 01:15:00 GMT 0500  EST  which is wrong  since 02:15:00 is an invalid datetime  it should move forward 1 hour ideally.  When i execute  moment  Sun Mar 08 2015 02:15:00 GMT 400  .isValid  ;  it returns true //means date is valid  actually the date is not valid since time 02:15:00  does not exist on that date  Mar 08 2015   The issue occurs in the 1 hour in the beginning of the transition from Non DST to DST.  Kindly suggest a solution.  I need to get Sun Mar 08 2015 02:15:00 GMT 400  EDT  as Sun Mar 08 2015 03:15:00 GMT 400  EDT . ,sreejith-m-sreedharan1987,closed,4,2015-01-06 06:44:41,2015-07-22 17:41:13,,,,0,1
12104,moment/moment,2145,.diff takes same two values with same date as being 1 day apart,Hi  I have some code which takes the current date and compares it to a value retrieved from a variable      function readUptime tenant  status  service  element  uptimeText  statusText        var lastStateChangeTime = moment status.extinfo.service_info.last_state_change .format  YYYY MM DD HH:mm:ss  ;     var currentTime = moment  .format  YYYY MM DD HH:mm:ss  ;     var diff = moment currentTime .diff lastStateChangeTime ;      var toInnerHTML = moment diff .format  DD[d ]HH[h ]mm[m ]ss[s]  ;     element.innerHTML = toInnerHTML;      Provided the value YYYY MM DD of variable lastStateChangeTime matches the value of variable currentTime  the output of toInnerHTML will always display as follows:  01d 00h 00m 00s  where it should display as  00d 00h 00m 00s  Please advise.  Thanks ,ghost,closed,2,2015-01-06 17:59:59,2015-01-08 16:15:16,,,,0,1
12103,moment/moment,2146,.fromNow   of future unix timestamp,Using  .fromNow     on a timestamp in the future give the result  a few seconds ago  ,Jakobovski,closed,4,2015-01-06 21:37:42,2015-01-20 16:00:53,,,,0,1
12102,moment/moment,2147,t,,r-pascal,closed,0,2015-01-08 08:46:24,2015-01-08 09:18:13,,,,0,1
12101,moment/moment,2148,Updated lv locale for better phrasing,In my opinion current phrasing for from and fromNow methods was little bit awkward  therefore tried to change it. ,krauzand,closed,9,2015-01-08 13:45:27,2015-11-09 05:47:13,,Language,,,1,1
12100,moment/moment,2149,Moment isValid returning true for an Invalid date,I am trying to use moment for date validation.  I am using Moment 2.8.3.  When I pass into moment the following:  moment  12    MM/DD/YYYY  .isValid   // true  The result is true. I also tried using the strict option    moment  12    MM/DD/YYYY   true .isValid   //true  Both seem to be evaluating to true.  Is this intended behavior or am I missing something? ,jwenger100,closed,1,2015-01-08 17:34:11,2015-01-08 17:40:34,,,,0,1
12099,moment/moment,2150,Merge remote upstream into local.,,mattgrande,closed,1,2015-01-08 20:23:38,2015-01-08 20:24:11,,,,1,1
12098,moment/moment,2151,Moment.js Locale   Timezone on Atmosphere.js,Could you also provide  for   Meteor    an official Moment.js package which includes all translations    locale    and mabye also a seperate package for   Moment Timezone   ?  It would be nice to find all popular moment packages on your Atmosphere channel: https://atmospherejs.com/momentjs ,boustanihani,open,11,2015-01-08 23:40:41,0000-00-00 00:00:00,,Up-For-Grabs,,,0,1
12097,moment/moment,2152,Converting current time to PST using moment.js,I am using the following code to change the current time to PST like this:  var now = moment  .tz  America/Los_Angeles  .format  YYYY MM DD HH:mm:00  ; console.log now ;  On an IST machine  it gives me the current time.  But on a machine which has GMT 7  it gives different current time.  On the IST time: 2015 01 09 13:00:00  it returns: 2015 01 08 23:30:00  which is correct   Where as  on GMT 7 machine  current time: 2015 01 09 07:28:09 it returns: 2015 01 09 06:28:00  which should have been 2015 01 08 23:30:00  ,prachicsa,closed,1,2015-01-09 06:20:49,2015-04-01 04:38:33,,,,0,1
12096,moment/moment,2153,How to create customized calendar,I want to develop a calendar in which user can have much options for marking his availability non availability events others availability birthdays meetings venue details and so many things.  I want to develop it in angularjs.  I have two options : 1.   Use angular ui calendar and customize html and js files.        Here I think it will consume so much efforts in customizing the calendar and at some time I may stuck and I will not be available to add more features. 2.   Develop my own calendar and implement all what I want.        Here the only problem is I am not sure about how complex the development of calendar is Because I have to write whole logic like time zone handling day light savings etc.  So which option is better?  The main thing is calendar will be too complex and flexible. ,ankitoodles,closed,1,2015-01-09 08:30:02,2015-04-01 06:29:55,,,,0,1
12095,moment/moment,2154,Wrong values generated by Duration toISOString   when mixing positive and negative values,Creating a moment Duration with more than one unit and specifying positive and negative values makes  toISOString    to return wrong values.  For instance  [jsfiddle] http://jsfiddle.net/k4jwmac4/  :      javascript  moment.duration     days:  1    hours: 8   .toISOString  ;      Will return   P1DT8H   which is not what the duration object contained.   P1DT8H  would mean _1 day and 8 hours less_  opposed to the original meaning _1 day less  8 hours more_.  I found this issue while working with FullCalendar  which returns moment Durations on some callbacks. Just a question to know if this should be reported to FullCalendar instead: does it make sense to create Duration objects mixing units and positive/negative values?  Putting it another way: should the unit recalculations be performed before calling the Duration constructor  o should Duration do some calculations before returning an ISO string? ,adobo,open,2,2015-01-11 19:20:41,0000-00-00 00:00:00,,Bug,,,0,1
12094,moment/moment,2155,Latin locales,Latin countries  usually  capitalizes month names  and weekday names  much like in english ,ramongr,closed,2,2015-01-12 19:18:45,2015-01-16 18:10:28,,,,1,1
12093,moment/moment,2156,Changed Swedish locale.,Changed the Swedish locale for lastWeek to something more like what one would say. As it was before with for instance  F rra s ndagen   Last Sunday  while referring to the closest passed Sunday is not what is used in language  last Sunday refers to the Sunday before the closest passed one  so I changed it to that. ,eweilow,closed,7,2015-01-12 21:17:52,2015-05-04 05:24:52,,,2.10.4,1,1
12092,moment/moment,2157,moment  .format  MMMM Mo  YYYY   is always giving me  January 1st  2015 ,Hi All  Moment is awesome   doing some test while my client reported a bug  seems that moment  .format  MMMM Mo  YYYY   is returning  January 1st  2015  even today that is 13.  Best Regards  Alfredo. ,alfredooo,closed,1,2015-01-13 11:13:52,2015-01-13 11:17:37,,,,0,1
12091,moment/moment,2158,Localized MM/DD/YY,In some use cases like in HTML table it might be better to use two digit year to save some space. It will be useful to have a localized MM/DD/YY in addition to the existing  DD/MM/YYYY . Something like LY or LSY could be used.  Thanks ,benbro,open,6,2015-01-13 23:11:59,0000-00-00 00:00:00,,Enhancement,Up-For-Grabs,,,0,1
12090,moment/moment,2159,javanese locale,,lantip,closed,2,2015-01-14 16:11:56,2015-05-04 16:09:36,,,2.10,1,1
12089,moment/moment,2160,Method add   days change the Timezone,When i add days  the timezone is changed from  1 to  2 but only between 75 and 282 days.  Is anyone have the same issue ?  OS: unix Moment version: 2.8.3  Thanks ,aelamrani,closed,0,2015-01-14 17:01:33,2015-01-15 08:37:03,,,,0,1
12088,moment/moment,2161,1 test failed. utc:utc and local  307.6  ,    Client info      Date String   : Thu Jan 15 2015 18:08:23 GMT 0530  India Standard Time  Locale String : 1/15/2015  6:08:23 PM Offset        :  330 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64; rv:34.0  Gecko/20100101 Firefox/34.0            utc:utc and local  307.6   the hours  8  should be correct for local      javascript // Expected 9 // Actual   8 8 == 9     ,aanavaneeth,closed,0,2015-01-15 12:39:06,2015-04-01 06:20:32,,Unit Test Failed,,,0,1
12087,moment/moment,2162,Duration formatting,When using the  Moment.duration   days: 67   .toIsoString    portion of this library  I am noticing that the ISOString that is formatted is  P2M7D   but  what I need is  P67D  which is a more accurate representation of what I need.  Is there anyway  using Moment.js  to achieve this? Maybe through some kind of passed in option? ,dennismonsewicz,closed,7,2015-01-15 19:12:41,2017-12-22 04:44:33,,Enhancement,,,0,1
12086,moment/moment,2163,longDateFormat does not fully convert LLL and LLLL tokens,I use moment in my Bootstrap datepicker plugin. A user brought this to my attention.  Shouldn t  LLL  and  LLLL  tokens get converted to include the time format? As it is  LLL  returns  MMMM D  YYYY LT  instead of the expected  MMMM D  YYYY h:mm A       log moment  .localeData  .longDateFormat  LT   ; log moment  .localeData  .longDateFormat  LLL   ; //<   should return  MMMM D  YYYY h:mm A  log moment  .localeData  .longDateFormat  LLLL   ;//<   should return  dddd  MMMM D  YYYY h:mm A       http://jsfiddle.net/Eonasdan/5Ld0ycLr/ ,Eonasdan,closed,9,2015-01-15 19:40:57,2015-06-19 05:58:28,,Bug,,,0,1
12085,moment/moment,2164,Control over isBetween s exclusivity/exclusivity behavior,The isBetween method checks if a moment is between two others  but not if it s equal to either of the comparison times. I think we need an inclusive argument  although with the third argument currently being the units  it may be best to create a separate isBetweenInclusive method.  Thanks ,mhayes14,closed,26,2015-01-16 04:26:07,2016-02-04 19:09:41,,Enhancement,Up-For-Grabs,,,0,1
12084,moment/moment,2165,Allowing plugins  or any external code  to override existing formats,I am writing a library that handles French revolutionary calendar dates.  When looking into how I could use moment together with it  I found that it s quite difficult for a plugin to define new formats. The [jalaali plugin] /jalaali/moment jalaali  has to completely wrap moment in order to add its _jYYYY_ and so on formats. In the process  it also has to reimplement  often just copying  internal functions  just because it can t access and modify moment s internal variables.  I tried a quick modification of moment s code to allow plugins to declare  extraFormats  that will then be handled just like the default internal ones  here it is: https://github.com/seeschloss/moment/commit/ff4920f9827af43b98bceccd2cc1c1a3be67eb69  That s not a pull request because: 1. I m not sure the moment project is interested at all in the idea 2. It s far from complete  doesn t provide any support for parsing these extra formats 3. Kind of a quick hack  especially the really ugly RegExp modification part  and could be done in other  probably better  ways  Basically  before doing anything better I d like to know what you think of this idea? Is it worth it? ,seeschloss,open,1,2015-01-16 19:33:12,0000-00-00 00:00:00,,,,0,1
12083,moment/moment,2166,duration can be in inconsistent state after subtraction,I haven t explored to see all the circumstances that can cause it  but I notice that a duration s fields do not necessarily get normalized after subtraction.  Depending on how you do the same subtraction  conceptually   you get different results.  Here s a fiddle to see the issue in action: http://jsfiddle.net/9cs8o1v1/3/  A test that would break due to this bug is:      var subtract1 = moment.duration 600   days  .subtract 1   year  ; var subtract2 = moment.duration 600   days  .subtract 365   days  ; assertEqual subtract1.months    subtract2.months   ;      As you can see in the fiddle   subtract1.months    yields   5   while  subtract2.months    yields  7 . ,zacronos,closed,6,2015-01-16 22:30:05,2015-07-26 04:52:09,,Bug,,,0,1
12082,moment/moment,2167,Support Intl support,There is finally an official JavaScript way to do localization  its called [Intl] https://developer.mozilla.org/en US/docs/Web/JavaScript/Reference/Global_Objects/Intl  and its pretty well supported [caniuse] http://caniuse.com/ search=Intl .  We might add an  moment.fn.intl  that accepts tokens  and coverts them to  options  argument of  toLocale Date/Time String . We can even fall back to moment locales in case the returned string is empty. ,ichernev,open,5,2015-01-17 10:46:23,0000-00-00 00:00:00,,Enhancement,,,0,1
12081,moment/moment,2168,ES6 Modules,This converts the codebase from one 3000 line file to many smaller ES6 modules.  We can then create builds using [6to5] https://6to5.org/  to target CommonJS  AMD  and browser globals.  As part of the conversion to es6 modules  I also converted the tests to es6 modules. Unfortunately  I couldn t find a great way of getting nodeunit to play well with es6 modules  so I also converted the test framework to QUnit.  There are still a few outstanding tasks to get this production ready.   [x] Convert locales and tests.   [x] Build globals and amd bundles with grunt and es6 module transpiler   [x] Build commonjs files using grunt 6to5   [ ] Build single moment   tests for browser  momentjs.com    [ ] Build commonjs folder with moment   tests   [ ] update test task to generate commonjs moment   tests and run tests  make it possible to test a single file   [x] Build UMD single file version of the library  with all the UMD patches applied currently    [ ] Generate minified files for amd  umd and globals   [ ]   Use https://github.com/developit/grunt esperanto to create amd and browser bundles     [ ]   Use https://github.com/6to5/grunt 6to5 to transpile to commonjs     [ ] Comb through the unit test conversion commit  making sure nothing fell through the cracks. ,timrwood,closed,8,2015-01-17 17:49:56,2015-04-07 05:18:16,,,,1,1
12080,moment/moment,2169,Create nds nl.js,Translation for the nds nl wiki. ,Servien,closed,4,2015-01-18 14:53:49,2015-09-18 16:05:55,,Language,Needs tests,,,1,1
12079,moment/moment,2170,moment.locale   throws TypeError,I am using moment js as a bootstrap datimepicker dependency. Unfortunately am getting   TypeError: undefined is not a function  in the console which ultimately prevents the datetimepicker from working correctly. Can you please have a look at this?. Thanks p.s. I am using gem momentjs rails for Rails which implements moment.js version 2.9.0. ,ewamarciniak,closed,2,2015-01-19 10:35:32,2015-04-17 06:24:56,,,,0,1
12078,moment/moment,2171,GMT format question,Maybe a silly question  but why are the results different?      javascript moment  2015 01 29 04:00  .subtract 60   m  .format  YYYY MM DD HH:mm  ;  2015 01 29 03:00           javascript moment  2015 01 29T04:00Z  .subtract 60   m  .format  YYYY MM DD HH:mm  ;  2015 01 29 04:00      ,maiolica,closed,2,2015-01-19 17:48:26,2015-01-20 01:07:02,,,,0,1
12077,moment/moment,2172,GMT format and timezone,Hello   I have a REST call giving me timestamps like follows  GMT format        timestamp  :  2015 01 19T16:20:52.000Z        And then I use        moment timestamp .format  MM/DD/YY hh:mm:ss        To me the output is different than somebody in a different timezone  I personally see 05:20:52. I want to show the date as it is so... I am not sure  is this converting to my timezone automatically? Is there a way to prevent that conversion? ,ferrannp,closed,2,2015-01-19 19:33:20,2015-01-20 00:57:37,,,,0,1
12076,moment/moment,2173,Format with timezones doesn t work as expected,Hello  I m having an issue with moment.js.  I have this in my code:   moment.tz.setDefault  UTC  ;   Then I fetch a date field from my backend and try to convert it to local timezone in the front this way:  moment this.model.get  start_date   .tz USER_TIME_ZONE .format this.momentDateFormat    But it still gives me the same hour as in UTC.  If I do this  it works correctly:  moment.utc this.model.get  start_date   .tz USER_TIME_ZONE .format this.momentDateFormat    So it seems that moment is ignoring the default UTC settings... Writing the prefix function  utc  everytime seems a bit strange so maybe I m doing something wrong.  Thank you for your amazing library.  Miguel. ,MiguelSR,closed,2,2015-01-21 10:35:56,2015-02-17 18:23:31,,,,0,1
12075,moment/moment,2174,Suggest optional arguments for setters,If it doesn t conflict with the concept of this lib  I hope the setters could have additional optional arguments as the builtin  Date  do. It could be convenient in some cases.  For example       javascript moment  .year yearValue[  monthValue[  dayValue]]  moment  .hour hoursValue[  minutesValue[  secondsValue[  msValue]]]      ,warmsea,closed,4,2015-01-22 14:27:18,2015-04-01 04:18:12,,,,0,1
12074,moment/moment,2175,generate stack trace when logging deprecation messages,note that if we wanted to get really fancy  we could unwind the first couple of items off the generated error stack to point at the exact line of code with usage that spawned the deprecation warning  didn t do that here   > Original issue: https://github.com/moment/moment/issues/1407 issuecomment 71213788 >  > Just a thought  what about grabbing a stack trace with new Error   and stuffing it in the deprecation warning? It took me a while to hunt down where this was happening  it was one of our dependencies  https://github.com/urish/angular moment . I ve just started using the same approach in sails/node machine and it s been pretty effective so far. I ll send a PR  feel free to close or accept  no pressure : 1: ,mikermcneil,closed,2,2015-01-23 16:00:43,2015-05-04 05:17:10,,,2.10.4,1,1
12073,moment/moment,2176,ignore files in packages,  sort patterns   use same ignored patterns between bower and spm  except min  ,chulkilee,closed,2,2015-01-23 19:49:05,2015-05-04 05:14:27,,,2.10.4,1,1
12072,moment/moment,2177,locale/ko: update some spacing and awkward phrases,There was some spacing problems like       oneminute  and little awkward pharses  so fixed them. tests included. ,hibiyasleep,closed,6,2015-01-23 20:33:18,2015-11-09 05:48:13,,Language,es6 rework,,,1,1
12071,moment/moment,2178,1 test failed. utc:utc and local  307.6  ,    Client info      Date String   : Sat Jan 24 2015 14:51:03 GMT 0530  IST  Locale String : 24/01/2015 14:51:03 Offset        :  330 User Agent    : Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/40.0.2214.91 Safari/537.36            utc:utc and local  307.6   the hours  8  should be correct for local      javascript // Expected 9 // Actual   8 8 == 9     ,barathbaisetty,closed,1,2015-01-24 09:18:19,2015-07-09 18:19:18,,Troubleshooting,Unit Test Failed,,,0,1
12070,moment/moment,2179,Month name fix,Sije anj instead of sje anj  january  ,tomhorvat,closed,0,2015-01-24 22:42:51,2015-01-24 23:35:50,,,,1,1
12069,moment/moment,2180,Time Location Season,[Suggestion] it would be nice to detect the actual SEASON based on Time and Location ,delfo,closed,1,2015-01-24 23:28:13,2015-02-17 18:14:40,,,,0,1
12068,moment/moment,2181,Locale hr: Month name fix,,tomhorvat,closed,4,2015-01-24 23:44:31,2015-05-04 05:13:05,,,2.10.4,1,1
12067,moment/moment,2182,How can I display actual seconds instead of  a few seconds ago ?,Is this currently possible? If not  what function should I look into  to add this behavior?  Bonus question: If I want one minute to be displayed only when it s passed exactly one minute  should I set  moment.relativeTimeThreshold  s   59 ;  or  moment.relativeTimeThreshold  s   60 ; ?  Thanks. ,doplumi,closed,1,2015-01-25 17:01:25,2015-04-17 06:23:33,,,,0,1
12066,moment/moment,2183,1 test failed. utc:utc and local  307.6  ,    Client info      Date String   : Mon Jan 26 2015 01:56:46 GMT 0330  Iran Standard Time  Locale String : 1/26/2015  1:56:46 AM Offset        :  210 User Agent    : Mozilla/5.0  Windows NT 6.1; rv:35.0  Gecko/20100101 Firefox/35.0            utc:utc and local  307.6   the hours  6  should be correct for local      javascript // Expected 7 // Actual   6 6 == 7     ,babaei,closed,0,2015-01-25 22:31:39,2015-01-25 22:33:10,,Unit Test Failed,,,0,1
12065,moment/moment,2184,2 tests failed. diff:diff across DST  66.17  diff:diff across DST  66.19  ,    Client info      Date String   : Mon Jan 26 2015 10:31:35 GMT 0200  Jerusalem Standard Time  Locale String : 1/26/2015  10:31:35 AM Offset        :  120 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/39.0.2171.99 Safari/537.36            diff:diff across DST  66.17   month diff across DST  lower bound      javascript // Expected true // Actual   false false == true            diff:diff across DST  66.19   year diff across DST  lower bound      javascript // Expected true // Actual   false false == true     ,artyil,closed,0,2015-01-26 08:32:14,2015-04-01 06:20:20,,Unit Test Failed,,,0,1
12064,moment/moment,2185,Globals undefined when  use strict  is applied to locale/ .js files,Browser usage. We do not wish to include all 80 translations in moment with locales.min.js  but rather include only a handful of files in locales/_.js These files are minified and are put in a  use strict  environment. The locale/_js files in moment.js are not  use strict  safe. When minified  the code is in a use strict environment and the  this  object is undefined  and  global  . This fix adds  window  as a parameter to the ifees in locale/ js files. ,abhustoft,closed,1,2015-01-26 14:20:57,2015-02-17 18:06:19,,,,0,1
12063,moment/moment,2186,Strict parser failed on month abbreviation with trailing period ,Parser can not deal with trailing period in the token      javascript moment.lang  fr         monthsShort :  janv._f vr._mars_avr._mai_juin_juil._ao t_sept._oct._nov._d c. .split  _     ; var month = moment  .format  MMM  ; // returns  janv.  moment month   MMM   true .isValid  ; // returns false     ,Grygir,closed,3,2015-01-26 15:50:29,2015-12-10 05:32:15,,Bug,Up-For-Grabs,,,0,1
12062,moment/moment,2187,Creating moment with object/array results in incremented month,    var date = moment   year: 2015  month: 1  day: 1   ; date.month  ; // => 1  zero based so this should be 0  date.format  YYYY MM DD  ; // => 2015 02 01 date.toISOString  ; // => 2015 02 01T00:00:00.000Z      Same result if using  moment [2015  1  1] ;  Anyone else notice this? ,michael-ygt,closed,1,2015-01-26 17:10:56,2015-02-17 17:59:15,,,,0,1
12061,moment/moment,2188,Fixed week number calculation for non standard dow/doy combinations.,For some non standard combination of dow and doy the computation of the week number would return a wrong week number. This pull request fixes the problem.  Also added tests for all 7 7 dow/doy combinations. ,gregor-rayman,closed,8,2015-01-27 14:37:14,2015-04-18 13:41:04,,,,1,1
12060,moment/moment,2189,moment  .set Object String  Int  ; fails in normalizeUnit,As per the documentation i tried to use:      javascript moment  .set   year : 2001   month : 11  ;       which fails in normalizeUnit when trying to lowerCase the object.  undefined is not a function       javascript moment  .set  year   2001 .set  month   11 ;      works as intended though. ,Crypth,closed,1,2015-01-27 15:19:12,2015-02-17 17:58:08,,,,0,1
12059,moment/moment,2190,3 tests failed. create:string with format   years  32.4  weekYear:weekday first day of week Sunday  dow 0   353.5  weeks:count years with iso week 53  376.1  ,    Client info      Date String   : Tue Jan 27 2015 16:16:21 GMT 0000  GMT  Locale String : 27/01/2015 16:16:21 Offset        :  60 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10.9; rv:35.0  Gecko/20100101 Firefox/35.0            create:string with format   years  32.4   70 > 1970      javascript // Expected 1970 // Actual   1969  1969  ==  1970             weekYear:weekday first day of week Sunday  dow 0   353.5   Jan  1 1970 is Thursday     4th day      javascript // Expected 4 // Actual   3 3 == 4            weeks:count years with iso week 53  376.1   Should have 71 years in 400 year cycle with iso week 53      javascript // Expected 71 // Actual   110 110 == 71     ,DMA57361,closed,0,2015-01-27 16:20:34,2017-06-17 19:40:59,,Troubleshooting,Unit Test Failed,,,0,1
12058,moment/moment,2191,fix seconds in relative time in pt br locale,fix relative time so that  s  means  a few seconds  instead of  just  seconds  in pt br locale. ,ivanquirino,closed,4,2015-01-27 16:29:03,2015-07-26 03:08:26,,Language,es6 rework,,2.10.5,1,1
12057,moment/moment,2192,Starting with lowercase or uppercase letter,In some languages the sentences start with a lowercase letter and in some languages the sentences start with an uppercase letter. I think we should for consistency choose one of the two for every language  where appropriate .  Current lowercase examples: Dutch   gisteren om 00:07 Frisian   juster om 00:07 Turkish   d n 00:07  Current uppercase examples: English   Yesterday at 12:07 AM Afrikaans   Gister om 00:07 Luxembourgish   G schter um 0:07 Auer  I think we should go for lowercase  as those are not really sentences. If you want to use them midsentence I would recommend a function like PHP s ucfirst. ,RobinvanderVliet,closed,3,2015-01-28 23:07:14,2015-02-17 17:56:16,,,,0,1
12056,moment/moment,2193,Ethiopian Date Support,We would like you to have support to amharic date  Ethiopian Calender .  ,bcopmt143,closed,1,2015-01-29 05:53:59,2015-02-17 17:52:28,,,,0,1
12055,moment/moment,2194,1 test failed. utc:utc and local  307.6  ,    Client info      Date String   : Thu Jan 29 2015 11:58:16 GMT 0530  IST  Locale String : 1/29/2015  11:58:16 AM Offset        :  330 User Agent    : Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/40.0.2214.93 Safari/537.36            utc:utc and local  307.6   the hours  8  should be correct for local      javascript // Expected 9 // Actual   8 8 == 9     ,nianurag,closed,0,2015-01-29 06:29:03,2015-04-01 06:20:20,,Unit Test Failed,,,0,1
12054,moment/moment,2195,Update moment.js,Small change avoids minification bugs. ,Hypercubed,closed,5,2015-01-30 11:24:40,2015-11-09 06:17:01,,,,1,1
12053,moment/moment,2196,Omit option to add/subtract,I have no idea if this is _actually_ a good idea. In fact  it s probably terrible. But I thought I d suggest it in case anyone thinks it s a good one.  There are [numerous] https://github.com/moment/moment/issues/1281  [requests] https://github.com/moment/moment/issues/1947  to support work days in Moment  but it s a technically challenging problem. The constant time solution itself is interesting [in and of itself] https://twitter.com/tkellen/status/561392005373509632   but more importantly  work days and week ends aren t the same for every country.  One way to handle this would be a way to omit values when adding or subtracting. This you could simply specify what values you want to include or not include. It could even work for time scales other than days.  I kno  I kno. Bad idea. But I just had to put it out there. :speak_no_evil:  ,jamesplease,closed,2,2015-01-31 20:57:19,2015-02-17 17:51:18,,,,0,1
12052,moment/moment,2197,atom shell html script moment.js is undefined, Uncaught ReferenceError: moment is not defined  appears in the devTools console when I try to use moment within an html page via [atom shell] https://github.com/atom/atom shell  node.js   chromium .  I ve tried including the js with these locations:  <script src= js/moment.min.js ></script>   <script src= https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.9.0/moment.min.js ></script>   Oddly other libs like jQuery and TweenLite work perfectly fine. If I load the html file via the browser moment works like it should  so I m assuming there is some sort of conflict going on? Or for some reason in atom shell it has been defined differently?  Still very new to atom shell  it seems to let you require   node modules via js in the browser/html end. I can probably just use the node package for moment though I m curious what s causing the issue  would it be similar to the require.js one described on the docs? ,polarathene,closed,3,2015-02-02 05:26:45,2016-04-01 01:51:38,,Troubleshooting,,,0,1
12051,moment/moment,2198,Include browser global for   use strict   environments  minifications ,The locale/_js files in moment.js are not  use strict . Some projects will only include some of the locale files  as opposed to loading all the 80 translations in moment with locales.min.js . When minified  the locale/_js files might often be placed in a  use strict  environment resulting in the  this  object to be undefined. This fix adds  window  as a paramter to the IIFE s in locale/ js files. ,abhustoft,closed,5,2015-02-02 08:44:25,2015-11-09 06:17:52,,,,1,1
12050,moment/moment,2199,Validate units,Is there a recommended way to validate units? My application accepts a scale as a query param  and I want to handle the user typing invalid scales.  I considered trying to leverage  normalizeUnits  for this  but I m not sure if it will work:      js moment.normalizeUnits  pasta  ; // => pasta  moment.normalizeUnits  day  ; // => day      At the moment I m hardcoding the accepted values  then seeing if the input value is in the array. ,jamesplease,closed,1,2015-02-03 19:00:50,2015-02-17 17:46:27,,,,0,1
12049,moment/moment,2200,moment undefined .format  LLL   gives a date 2 days back,This should not be an expected result. ,saiyeek,closed,3,2015-02-05 00:01:45,2015-02-17 17:41:40,,,,0,1
12048,moment/moment,2201,.isValid   returning true for invalid string with format,I passed a time string along with a format through the  .isValid    function  and despite the string being invalid  the  .isValid    returned  true  as demonstrated in this [jsFiddle] http://jsfiddle.net/dzul1983/3n8os5ee/1/ .      javascript console.log moment  12:30    HH:mm  .isValid   ; // true console.log moment  12:abc    HH:mm  .isValid   ; // true console.log moment  12:abc  .isValid   ; // false     ,dnasir,closed,2,2015-02-05 10:40:50,2015-02-17 17:40:21,,,,0,1
12047,moment/moment,2202,Update tests for pull request  1904,Update tests for  1904  ,zenozeng,closed,5,2015-02-06 13:20:33,2015-05-04 05:10:04,,,2.10.4,1,1
12046,moment/moment,2203,Removed scanning for backslash es  as such an option is unspecified,,500poundbear,closed,1,2015-02-06 13:25:49,2015-04-17 05:13:38,,,,1,1
12045,moment/moment,2204,Patch for pull 2051,remove unnecessary space and update tests for  2051  ,zenozeng,closed,4,2015-02-06 14:13:41,2015-05-04 05:05:20,,,2.10.4,1,1
12044,moment/moment,2205,Natural duration parsing,Great looking library  I m look for something like: http://domchristie.github.io/juration/    Before I pass on moment is there a natural parser? e.g. 1day 6hr 60mins 6sec   ,geemang2000,closed,1,2015-02-06 23:07:43,2015-02-17 17:38:46,,,,0,1
12043,moment/moment,2206,Relative Time   Question,Using MomentJs 2.9.0      javascript moment.locale  en         relativeTime :           future:  in  s           past:     s ago           s:   seconds           m:   a minute           mm:   d minutes           h:   an hour           hh:   d hours           d:  function  number  withoutSuffix  key  isFuture              return  yesterday ;                   dd:   d days           M:   a month           MM:   d months           y:   a year           yy:   d years          ;      I ve tried a couple other things too  returning a function inside that function but nothing I ve tried works.  How do I get it to return  yesterday  without adding a suffix to it after? ,bondz,closed,2,2015-02-09 08:42:04,2015-02-17 17:36:47,,,,0,1
12042,moment/moment,2207,Remove periods from short days/months in Slovenian,Remove periods from short days/months in Slovenian so users can add them if they need them. ,ntadej,closed,4,2015-02-09 09:41:20,2015-04-18 18:44:14,,,,1,1
12041,moment/moment,2208,Fix Turkish calendar translation,Simple change proposal for better calendar time translations.  There are 2 changes introduced in calendar time translation. 1. Before this commit  translations for calendar time for next week    was sort of broken. Say on a Monday  if you would get     moment  .day 5 .calendar    to get the next Friday  you would get    something like  Next week Friday at ...  instead of  Next Friday    at ... . This commit changes it to  This Friday at ... . 2. Before this commit  translations for last week was similar to     Last week Friday at ...  and this commit changes it to  Last    Friday at ... . It suits better with Turkish language. ,umurkontaci,closed,10,2015-02-09 16:48:02,2015-09-01 17:36:51,,Language,,,1,1
12040,moment/moment,2209,Update is_date.js,exports.add clobbers tests for  add_subtract . renaming this to avoid conflict. ,shcarrico,closed,1,2015-02-10 07:37:59,2015-04-17 05:05:00,,,,1,1
12039,moment/moment,2210,Update nb.js locale s time format for LT and LTS,The time format for LT and LTS do not align with what is the default time settings in Windows for locale Norwegian Bokm l and what most people use. Propose H:mm instead of H.mm and LT:ss instead of LT.ss. Most norwegians do not use a 13.37 time format  but rather 13:37. ,HenrikWM,closed,1,2015-02-10 09:45:55,2015-02-10 10:04:06,,,,1,1
12038,moment/moment,2211,Fix 0 hour checking in strict parsing.,Basically augments the  bigHour  check to see if  in addition to the hour being less than 12  it s also greater than 0.  This should fix [ 2140] https://github.com/moment/moment/issues/2140 . ,lvn,closed,4,2015-02-10 13:16:27,2015-05-04 05:03:32,,,2.10.4,1,1
12037,moment/moment,2212,businessAdd need attention,function getBusinessDate startDate  daysToAdd             var mStartDate = moment startDate       if  mStartDate.isValid      jQuery.isNumeric daysToAdd     isNaN daysToAdd  == false            var mBDays = mStartDate.businessAdd daysToAdd ;         return mBDays.format  ddd            mBDays.format  d           mBDays.format  MMM           mBDays.format  YYYY  ;       else         return  DATE NOT SET          If I getBusinessDate  2/10/2015  10  i get today s date. Not sure what am I missing. I have tested it before and it looked like it worked right. I am using version 2.9.0. ,dipeshnepal,closed,1,2015-02-10 20:05:52,2015-02-12 20:06:25,,,,0,1
12036,moment/moment,2213,moment.utc   is missing .isMoment obj ,I m developing a component and would like to have one reference to moment that I can use in all of my code. It s a calendar that depends on every moment being moment.utc. Having one reference  prevents calls to moment   _without utc_ to creep in. But moment.utc does not have a isMoment function and perhaps others. So I have to differentiate and watch my step.      js var m1 = moment  1981 04 10  ; var m2 = moment.utc  1981 04 10  ; console.log     moment.isMoment m1     moment.utc.isMoment m1  // throws error    moment.isMoment m2     moment.utc.isMoment m2  // throws error  ;     ,dotnetCarpenter,open,1,2015-02-10 20:50:18,0000-00-00 00:00:00,,Enhancement,Up-For-Grabs,,,0,1
12035,moment/moment,2214,[Major?] Saving to a local variable creates inconsistencies ,Hello   I just tried the following:      var currentMoment = moment.unix 1449587079 ;  console.log currentMoment ; console.log moment.unix 1449587079  ;      For some odd reason  only the last one is right and both console logs are different   Why is that? Or am I doing something wrong?  Bye Defcon0 ,Defcon0,closed,1,2015-02-11 15:44:14,2015-02-11 16:53:10,,,,0,1
12034,moment/moment,2215,Localize time  3:00 pm  using LT into Chinese says   3 00,In Chinese  usually it says   3  or   3   for this case.  Also for the same LT pattern  if the date is 3:06pm  it says   3 06  but better to say  3 06 .  For iPhone in Chinese  it says   3:00   3:06 ,lucozhao,closed,2,2015-02-12 01:47:09,2015-02-17 17:24:57,,,,0,1
12033,moment/moment,2216,12 hour clock format isValid with military time?,I m seeing a strange issue where   moment  21:35 pm    h:mm a   true .isValid    evaluates to true.  I checked this against  new Date  2015/01/01 21:35 pm    which yields an  invalid date   I feel it should return  false  in this case  I m seeing this issue in 2.8.3 ,stoltene2,closed,2,2015-02-12 19:52:16,2015-02-17 17:23:12,,,,0,1
12032,moment/moment,2217,Browser tests,I think should give a try to https://ci.testling.com/ by browser testing. ,inf3rno,closed,1,2015-02-12 21:45:44,2015-02-12 21:48:28,,,,0,1
12031,moment/moment,2218,1 test failed. utc:utc and local  307.6  ,    Client info      Date String   : Sat Feb 14 2015 20:31:24 GMT 1030  Cen. Australia Summer Time  Locale String : 14/02/2015 20:31:24 Offset        :  630 User Agent    : Mozilla/5.0  Windows NT 6.3; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/40.0.2214.111 Safari/537.36            utc:utc and local  307.6   the hours  13  should be correct for local      javascript // Expected 14 // Actual   13 13 == 14     ,dspacejs,closed,0,2015-02-14 10:02:01,2015-04-01 06:20:20,,Unit Test Failed,,,0,1
12030,moment/moment,2219,Override moment.parseTwoDigitYear,I m trying to change the two year cuttoff from  68  to  16 .  The documentation says  > By default  two digit years above 68 are assumed to be in the 1900 s and years below 68 are assumed to be in the 2000 s.   This can be changed by replacing the moment.parseTwoDigitYear method.    This was my attempt:      javascript moment.parseTwoDigitYear = function  input        return toInt input     toInt input  > 16 ? 1900 : 2000 ;  ; var parsedDate = moment   id .val   ; if  parsedDate.isValid            id .val parsedDate.format  MM/DD/YYYY   ;  ;      i m not hitting the breakpoint inside my  parseTwoDigitYear  override.  Does anyone have a working example of this? ,arecker,closed,5,2015-02-16 16:31:48,2015-02-17 15:13:09,,,,0,1
12029,moment/moment,2220,Patch to regular expression that was causing a lint warning,_Lint Warning: regular expressions should be preceded by a left parenthesis  assignment  colon  or comma._  This warning was causing errors while trying to minify  moment.js  using  JSMin . With this patch  the problem is solved. ,davidmsantos90,closed,3,2015-02-16 16:33:04,2015-05-04 04:57:00,,,2.10.4,1,1
12028,moment/moment,2221,Question: How best to set the time of an already instantiated moment without individually having to set the hours and minutes?,Suppose you already have a moment and a separate time String  what is the best way to set the moment with the given time without having to split the time String into pieces or create another moment? Basically something like a  setTime    function where you provide the input format.      js var d1 = moment options.maxTime   HH:mm  ; var d2 = moment datetime.currentTime ; //d2 = d2.setTime options.maxTime   HH:mm  ; d2 = d2.hour d1.get  hour   ; d2 = d2.minute d1.get  minutes   ;     ,u01jmg3,closed,5,2015-02-16 21:25:53,2015-02-17 11:40:30,,,,0,1
12027,moment/moment,2222,Can we support the old and new way of doing add/subtract?,Hey everyone  I ve gotten into writing pure functions and currying functions. The new change to moment causes the data to come first  then the type. I have to write functions just to flip the arguments  can we just do a type check for the arguments  rather than just flipping the arguments around. I would also like to understand the change  as it had set me back a bit on a new project. I rather not have fork the moment for just argument changes.  For those new to currying  it simply lets me place part of a functions arguments in and it will return a new function that waits for the remaining arguments. It s great for chaining  and making simpler functions. ,JemiloII,closed,2,2015-02-17 00:00:49,2015-02-17 17:19:26,,,,0,1
12026,moment/moment,2223,Problem with Etc/GMT X,Hi guys  I bring you a problem I m getting using the library in the client side:  My local time is GMT 1 and I m experimenting using the Etc/GMT X transformation. For example:      js var d = new Date  ; //> d //< Wed Feb 18 2015 13:15:58 GMT 0100  CET  moment d .tz  Etc/GMT 1  .format  h  ; //< 11      The expected ouput is  1  but I get two hours less. However  if a try with the negative offset:      js moment d .tz  Etc/GMT 1  .format  h  ; //< 1      Is this a bug or am I missing something?  Thanks in advance ,IvanGuardado,closed,4,2015-02-18 12:21:04,2015-02-26 17:05:59,,,,0,1
12025,moment/moment,2224,Library conflict,Hi everyone   I just started to use your library  such an amazing work   in combination with [fabric.js] http://www.fabricjs.com  on Chrome. For some reason that I still don t understand  the following line of the   makeFormatFunction   function was not working:    output  = array[i] instanceof Function ? array[i].call mom  format  : array[i];   According to my debugging process  the call to the function stored in the array was never executed and  thus  the resulting output was a String concatenating the function definitions and the tokens of the received format string.   To solve the problem  I had to change this line for:   output  = typeof array[i] ==  function  ? array[i].call mom  format  : array[i];   Hope this helps. Again  congrats on the work you have done. This library is amazing   Cheers  Gonzalo Gabriel ,ggmendez,closed,3,2015-02-18 17:31:42,2015-04-16 17:10:43,,,,0,1
12024,moment/moment,2225,startOf  week   not respecting locale information?,Hi   I seem to be having some trouble with startOf  week   in 2.9.0.    TL;DR   I think that moment  .startOf  week   should return a locale specific day  e.g. Sunday  but it seems to always return Monday.  _Using the locale  de :_      javascript // the locale thinks weeks begin on Sunday in Germany. // I m not sure this is right  but it illustrates the point: moment.weekdaysShort  ; // [ So.    Mo.    Di.    Mi.    Do.    Fr.    Sa. ] // the following is expected  as per ISO 8601 the week always begins on Monday: moment  .startOf  isoweek   // Mon Feb 16 2015 00:00:00 GMT 0100  W. Europe Standard Time  // here I expect  Sunday Feb 15 2015 00:00:00 GMT 0100  W. Europe Standard Time    // as the locale thinks the week starts on Sunday  but instead I get: moment  .startOf  week  ; // Mon Feb 16 2015 00:00:00 GMT 0100  W. Europe Standard Time   // to satiate my curiosity that moment.localeData and moment  .localeData are the same: moment.localeData   == moment  .localeData  ; // true      regardless of this  moment.js is a really great library  ,mattjacobsen,closed,1,2015-02-19 13:26:55,2015-02-19 14:48:26,,,,0,1
12023,moment/moment,2226,Fix Slovenian locale,  Lines 13 83   136 150   The original implementation used a colloquial form of expressing relative time in the past. _Colloquial:_   2 uri nazaj      3 dni nazaj      4 mesece nazaj   _Proper:_   pred 2 urama      pred 3 dnevi      pred 4 meseci   This probably would not have been possible to implement before the  isFuture  parameter was introduced to the callback function.    Lines 99 135   The accusative case is for weekdays when referring to a past or future event. _Past_:   prej njo soboto ob 9:00   _Future_:   v soboto ob 9:00   ,philtre,closed,3,2015-02-19 20:01:12,2015-05-04 04:54:40,,,2.10.4,1,1
12022,moment/moment,2227,IE Date Object with only two digits for year,When passing a Date Object a string in IE with only two numbers for the year value it bases those from 1900  and Chrome it bases from 2000. Would there be a way to get consistent results based from 2000 when using IE?  I found the main issue when passing a string to a  new Date    object with only two numbers in the year.  https://jsfiddle.net/someyoungideas/ggLq9mvz/ ,someyoungideas,closed,1,2015-02-19 20:54:50,2015-02-20 20:47:21,,,,0,1
12021,moment/moment,2228,Added Swahili Locale,,fadsel,closed,3,2015-02-20 01:16:09,2015-10-07 17:23:31,,Language,,,1,1
12020,moment/moment,2229,Problem with time zone conversions ,I am having the start and end date as below       Start Date:  2015 02 19T00:00:00 08:00  End Date:  2015 02 19T17:00:00 08:00       as you see the date format is in PST so the date is fine in PST time zone the snippet i am using as below       Javascript     moment StartDate .format  MMM Do  ;       but when i view the same page in IST it shows as below        Start Date:  Feb 19th  End Date:  Feb 20th       Please help me out on this  let me know is there anything i am missing. Thanks in advance. ,arivazhagan,closed,1,2015-02-20 07:15:02,2015-02-26 17:03:13,,,,0,1
12019,moment/moment,2230,1 test failed. utc:utc and local  307.6  ,    Client info      Date String   : Fri Feb 20 2015 16:02:30 GMT 0530  India Standard Time  Locale String : 2/20/2015  4:02:30 PM Offset        :  330 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/40.0.2214.111 Safari/537.36            utc:utc and local  307.6   the hours  8  should be correct for local      javascript // Expected 9 // Actual   8 8 == 9     ,prakashguru,closed,0,2015-02-20 10:46:55,2015-04-01 06:20:20,,Unit Test Failed,,,0,1
12018,moment/moment,2231,Singular for relative times,Hi  I use the great feature moment date .fromNow    but I would like to display something like  1 hour  1 month  etc  instead of  one hour  one month .  I now I can customize this  but I will have to do it for each and every langage ...  Is there another way than customize every langage or can we expect a parameter in the livrary or in the method to choose beetween singular pronoun and just  1  ?  Thanks in advance ,bluepioupiou,closed,1,2015-02-20 14:18:00,2016-04-08 11:51:12,,,,0,1
12017,moment/moment,2232,omitting  dot  at day names,omitting  dot  at day names ,manfredjb,closed,10,2015-02-23 07:15:32,2015-11-09 06:20:31,,Language,,,1,1
12016,moment/moment,2233,Valid date for Feb 31,moment [2015  2  31] .isValid   returns true ,epeschier,closed,1,2015-02-23 08:44:00,2015-02-23 18:11:30,,,,0,1
12015,moment/moment,2234,Allow multiple units in one isSame   call,We use  isSame    a lot in our unit tests. However we usually end up with code like this:      test.ok moment results.date .isSame testData[i].date   year     year is correct  ; test.ok moment results.date .isSame testData[i].date   month     month is correct  ; test.ok moment results.date .isSame testData[i].date   day     day is correct  ;      This makes our test codes verbose. In a dream world we could do:      test.ok moment results.date .isSame testData[i].date  [ year    month    day ]    date is correct  ;     ,userpixel,closed,6,2015-02-23 12:45:18,2015-06-18 22:49:23,,,,0,1
12014,moment/moment,2235,Two instances that give exactly the same string aren t the same ,    a = moment  .set  hour   2 .set  minute   0 .set  second   0 ; b = moment  020000    HHmmss  ; a.format   === b.format  ;  //true a.isSame b ;  //false      A colleague pointed out that  isSame    compares the dates up to milliseconds when called without an extra parameter.  https://github.com/moment/moment/blob/develop/moment.js L2438   So I did a little test:      a.get  ms  ;   //123 or some other millisecond at the time  a  was created b.get  ms  ;   //0      But nevertheless  this is the wrong behavior because:  When b is created  it _takes_ the current year  month and day to fill in the missing bits. So it would be unexpected if it doesn t take the milliseconds. Milliseconds are missing from the provided pattern. No big   S   in   HHmmss  . ,userpixel,closed,2,2015-02-23 16:27:31,2015-02-23 22:55:57,,,,0,1
12013,moment/moment,2236,Same length for weekdaysMin parts  Polish ,I just tried to use the short Polish names and I noticed that  min  Polish weekday names haven t the same length  six of them are two chars long  while  sunday  corresponds to  N  . Polish colleagues say there should be one more  d . I d also make all  short  names 3 chars long  agree? ,massic80,closed,6,2015-02-23 16:41:39,2015-11-09 06:27:06,,Language,,,1,1
12012,moment/moment,2237,Same length for weekdaysMin parts  Italian ,I m making timetables with weekdaysMin particles  but they look weird  since not all the days are same sized. I m making all of them two chars long. ,massic80,closed,8,2015-02-23 16:45:03,2015-09-23 18:56:18,,Language,es6 rework,,,1,1
12011,moment/moment,2238,Is it possible to set the timezone globally for all moment methods?,Is it possible  upon page load  to set the timezone  e.g. America/New_York  for moment so that for any of moment s methods from that point have properly adjusted times even if the client computer timezone is set differently?    ,oevna,closed,1,2015-02-23 20:20:59,2015-02-26 17:07:53,,,,0,1
12010,moment/moment,2239,Fixed Monday s abbr in Burmese,Mostly we use    to abbr Monday in Burmese. Check these examples  http://www.localeplanet.com/icu/my/index.html http://www.unicode.org/cldr/charts/26/summary/my.html ,thanyawzinmin,closed,3,2015-02-23 23:19:09,2015-05-04 04:36:21,,,2.10.4,1,1
12009,moment/moment,2240,[Documentation] Daylight Savings Time is not the correct spelling,Hello   This is a minor issue but thought I would report it anyway. The documentation uses both the correct spelling and incorrect spelling for the period known as Daylight Saving Time. The common mistake is to pluralize Saving by adding an  S .  The incorrect usage appears three times. ,GiraffeSlacks,closed,1,2015-02-25 06:53:02,2015-02-26 16:34:54,,,,0,1
12008,moment/moment,2241,Allow locale aliases,Hello    Thanks for a great library    Did you consider adding an option for locale aliases?   For example  in my application I m using zh  instead of zh cn  and would like to use the same name for momentjs by setting an alias for zh cn   Thanks    ,NatashaCh,closed,1,2015-02-25 07:58:39,2015-04-01 04:33:01,,,,0,1
12007,moment/moment,2242,How to convert just the hour from local to UTC and back,Hello all and thanks for any help...  I need to convert the day and hour combination from local to UTC and back.  I am getting unexpected results when converting from UTC to local.  Here is the [jsfiddle] http://jsfiddle.net/SciGno/akfeeor2/   I have read that _d should not be used but that s the only way I ve been able to convert from UTC to local.  Any help will be greatly appreciated. ,SciGno,closed,2,2015-02-26 06:25:53,2015-02-26 17:01:18,,,,0,1
12006,moment/moment,2243,Moment with locale return nothing in strict mode parsing,v 2.9      var x = moment  26         2015    DD MMMM YYYY   true ;      x is undefined.  without strict mode its ok. ,markuezzz,closed,17,2015-02-26 13:07:56,2015-09-23 17:48:44,,Bug,Language,,,0,1
12005,moment/moment,2244,Bug in Firefox  time returned as  Invalid Date ,I ve been trying to parse a timestamp that I get back from Twitter through moment  it works fine in Chrome but fails in Firefox. Instead  my wording for all the tweets in Firefox are shown as  a few seconds ago .  I tried the following in Chrome:      javascript moment  .format     >  2015 02 27T10:58:55 05:00  moment  2015 02 27 10:03:06  0500  .format   // a sample timestamp for a tweet returned by Twitter   > 2015 02 27T10:03:06 05:00       However in Firefox I get:      javascript moment  .format     >  2015 02 27T10:58:55 05:00  moment  2015 02 27 10:03:06  0500  .format     > Invalid date       So the question is  is this a Firefox bug? Or should I be formatting the time properly before running it through moment  and if so how?  Thanks. ,davesierra,closed,2,2015-02-27 16:11:37,2015-02-28 06:52:33,,,,0,1
12004,moment/moment,2245,2 tests failed. diff:diff across DST  66.17  diff:diff across DST  66.19  ,    Client info      Date String   : Sat Feb 28 2015 10:09:50 GMT 0200  Jerusalem Standard Time  Locale String : 2/28/2015  10:09:50 AM Offset        :  120 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64; rv:36.0  Gecko/20100101 Firefox/36.0            diff:diff across DST  66.17   month diff across DST  lower bound      javascript // Expected true // Actual   false false == true            diff:diff across DST  66.19   year diff across DST  lower bound      javascript // Expected true // Actual   false false == true     ,Aternus,closed,0,2015-02-28 08:10:42,2015-04-01 06:20:00,,Unit Test Failed,,,0,1
12003,moment/moment,2246, format  failed,nodejs: v0.10.30 momentjs: 2.9.0      js var adate= 2015 02 27T17:58:00.000 03:00 ; var bdate=moment adate ;      bdate:      js   _isAMomentObject: true    _i:  2015 02 27T17:58:00.000 03:00     _f:  YYYY MM DDTHH:mm:ss.SSSSZ     _tzm: 180    _isUTC: false    _pf:       empty: false       unusedTokens: []       unusedInput: []       overflow:  1       charsLeftOver: 0       nullInput: false       invalidMonth: null       invalidFormat: false       userInvalidated: false       iso: true      _locale:       _ordinalParse: / d 1 2  th st nd rd /       ordinal: [Function]       _abbr:  en        _ordinalParseLenient: / d 1 2  th st nd rd   d 1 2 /      _d: Fri Feb 27 2015 17:58:00 GMT 0300  MSK     _isValid: true            js console.log bdate.format  YYYY MM DD HH:MM:SS    //  2015 02 27 17:02:00      ,askovpen,closed,2,2015-03-01 20:19:21,2015-03-03 12:00:37,,,,0,1
12002,moment/moment,2247,Non Intl Subset build,Hiya   This is somewhat related to  2167 .  I d love a build of moment that does all the stuff that moment does  minus any formatting. There s so much useful parsing and  .add  type functionality that I don t want to get rid of moment in my project  however  I m moving to the standardized  Intl.DateTimeFormat  stuff in recent apps.  It could be that the formatting code doesn t take up much of th 12KB gzip/minified file size of moment  sans locales   but if it would save a few KB  it could be worth doing a build without formatting  since I think more and more  people will be moving to the built in browser functionality.  Thanks  ,SlexAxton,closed,2,2015-03-01 22:47:03,2016-04-01 01:37:45,,,,0,1
12001,moment/moment,2248,Object doesn t support this action   IE8,I get this error:  Object doesn t support this action  refering to moment/meteor/export.js at line 3.  I suggest to change this line to something like this:      js try       delete this.moment;   catch e        this[ moment ] = undefined;        @dandv. ,bompi88,closed,2,2015-03-02 09:20:44,2015-03-02 21:54:02,,,,0,1
12000,moment/moment,2249,IE8 compatibility,@dandv Unfortunately  some people still use IE8  which  among many other things  doesn t support  delete  operations on the  window  object. ,alethes,closed,1,2015-03-02 22:47:45,2015-04-17 04:54:04,,,,1,1
11999,moment/moment,2250,utcOffset   doesn t work as expected,When I explicitly set the UTC offset using utcOffset    I expect that the epoch returned should be the same across different timezones. However  here s what I ve observed:    In some Canadian timezone:   moment  20150303    YYYYMMDD  .utcOffset __TIMEZONE_OFFSET_MINUTES .unix     1425362400      In IST:   moment  20150303    YYYYMMDD  .utcOffset __TIMEZONE_OFFSET_MINUTES .unix     1425321000    ___TIMEZONE_OFFSET_MINUTES is 330  IST  in both cases._  How can I get the same epoch in both cases? 1425321000 is the expected one. ,judepereira,closed,2,2015-03-03 03:19:04,2015-03-04 21:36:22,,,,0,1
11998,moment/moment,2251,1 test failed. locale:zh cn:calendar next week  2321.1  ,    Client info      Date String   : Tue Mar 03 2015 10:39:49 GMT 0500  EST  Locale String : 3/3/2015  10:39:49 AM Offset        : 300 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_10_2  AppleWebKit/537.36  KHTML  like Gecko  Chrome/40.0.2214.115 Safari/537.36            locale:zh cn:calendar next week  2321.1   Today   7 days beginning of day      javascript // Expected      12   // Actual        12         12    ==       12        ,jasonseminara,closed,0,2015-03-03 15:40:04,2015-04-01 06:20:00,,Unit Test Failed,,,0,1
11997,moment/moment,2252,1 test failed. locale:zh cn:calendar next week  2321.1  ,    Client info      Date String   : Tue Mar 03 2015 12:35:22 GMT 0500  EST  Locale String : 3/3/2015 12:35:22 Offset        : 300 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_10_2  AppleWebKit/537.36  KHTML  like Gecko  Chrome/40.0.2214.115 Safari/537.36            locale:zh cn:calendar next week  2321.1   Today   7 days beginning of day      javascript // Expected      12   // Actual        12         12    ==       12        ,frank-weindel,closed,1,2015-03-03 17:38:13,2015-04-01 06:20:00,,Unit Test Failed,,,0,1
11996,moment/moment,2253,Milliseconds since epoch are not formatted as integers.,Fiddle here http://jsfiddle.net/tutuca/e3s21Lab/  although it fails to run. I have packaged the minimal case that you can run  [download] https://dl.dropboxusercontent.com/u/163405/tiempo.tar.gz    So  the gist of it is that  moment  .format  x    doesn t return a valid integer so  sinon.fakeTimer  fails with a non obvious error  I d probably report it there too.       describe  Test sinon.fakeTimes with Moment.js   function         var today  tomorrow  ticks  clock;     beforeEach function            // get milliseconds since UNIX epoch for this date.         ticks = parseInt moment  01/15/2015  .format  x   ;         // set the timers to start at expected time.         clock = sinon.useFakeTimers ticks ;        ;     afterEach function            clock.restore  ;       ;     it  date is set in some arbitrary time.   function             today = new moment  ;         tomorrow = today.add 1   days  ;         expect tomorrow.format  MM/DD/YYYY   .toBe  01/16/2015  ;       ;   ;      See how I needed to wrap the time with  parseInt ?   Thing is  that format returns something that looks like a number  so it should be a number so I don t have to rely on  parseInt  for it to work  no?  Opinions? ,tutuca,closed,2,2015-03-03 18:00:14,2015-04-01 06:06:05,,,,0,1
11995,moment/moment,2254,1 test failed. utc:utc and local  307.6  ,    Client info      Date String   : Wed Mar 04 2015 12:40:36 GMT 0530  India Standard Time  Locale String : 3/4/2015  12:40:36 PM Offset        :  330 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/40.0.2214.115 Safari/537.36            utc:utc and local  307.6   the hours  8  should be correct for local      javascript // Expected 9 // Actual   8 8 == 9     ,shardulkul,closed,0,2015-03-04 07:11:13,2015-04-01 06:20:00,,Unit Test Failed,,,0,1
11994,moment/moment,2255,Getting wrong offset for the date objects which descends from Nov 2014 ,For 1 DEC 2014 if convert the date object using moment.tz   it is giving correct offset //example EST  05:00  For 1Nov 2014 if convert the date object using moment.tz   it is giving offset with difference of less than 1 hour. // example EST  04:00 ,manihoney,closed,2,2015-03-04 14:09:34,2015-03-18 07:34:54,,,,0,1
11993,moment/moment,2256,Updated the license date range,,CalMlynarczyk,closed,1,2015-03-04 14:34:43,2015-04-17 04:49:57,,,,1,1
11992,moment/moment,2257,instanceof shows better performance over toString call,It is faster to use instanceof operator over toString call  check: jsperf: http://jsperf.com/isdate. It shows even better performance when the input is Date type  but I evaluated the change also on other object types.  ,marijaselakovic,closed,1,2015-03-04 16:57:57,2015-04-17 04:48:30,,,,1,1
11991,moment/moment,2258,Cloning moment object changes date,Using the clone method is causing the date to change in Safari 8.0.3  This is an example of the code I am using.      var firstDay = startDate.clone  ; var lastDay = endDate.clone  ; console.log startDate ; console.log firstDay ; console.log endDate ; console.log lastDay ;      This is what it returns:      [Log] Moment  daterangepicker.js  line 1095  _d: Tue Jan 27 2015 00:00:00 GMT 1100  AEDT  _i: 1422277200000 _isAMomentObject: true _isUTC: false _locale: Locale _pf: Object __proto__: Moment  [Log] Moment  daterangepicker.js  line 1096  _d: Mon Jan 26 2015 12:00:00 GMT 1100  AEDT  _i: 1422277200000 _isAMomentObject: true _isUTC: false _locale: Locale _pf: Object __proto__: Moment  [Log] Moment  daterangepicker.js  line 1097  _d: Thu Apr 02 2015 00:00:00 GMT 1100  AEDT  _i: 1427893200000 _isAMomentObject: true _isUTC: false _locale: Locale _pf: Object __proto__: Moment  [Log] Moment  daterangepicker.js  line 1098  _d: Mon Apr 06 2015 01:59:59 GMT 1000  AEST  _i: 1427893200000 _isAMomentObject: true _isUTC: false _locale: Locale _pf: Object __proto__: Moment      Am I doing something horribly wrong or is something wrong with moment js? ,Rambomst,closed,6,2015-03-05 05:14:39,2016-04-01 01:31:24,,Troubleshooting,,,0,1
11990,moment/moment,2259,1 test failed. locale:zh cn:calendar next week  2321.1  ,    Client info      Date String   : Thu Mar 05 2015 16:24:35 GMT 0500  EST  Locale String : 3/5/2015  4:24:35 PM Offset        : 300 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_9_4  AppleWebKit/537.36  KHTML  like Gecko  Chrome/41.0.2272.76 Safari/537.36            locale:zh cn:calendar next week  2321.1   Today   7 days beginning of day      javascript // Expected      12   // Actual        12         12    ==       12        ,facultymatt,closed,1,2015-03-05 21:25:04,2015-04-01 06:20:00,,Unit Test Failed,,,0,1
11989,moment/moment,2260,daylight saving different results between safari/chrome,Hello  I ran this line in chrome and Safari and I get different result: Safari seems to be wrong is there a workaround?  In Safari  moment  2015 03 08 07:30  .toDate   => Sun Mar 08 2015 08:30:00 GMT 0700  PDT   In Node or Chrome moment  2015 03 08 07:30  . toDate   => Sun Mar 08 2015 07:30:00 GMT 0700  PDT  ,pgherveou,closed,2,2015-03-06 01:08:13,2015-04-01 05:56:26,,,,0,1
11988,moment/moment,2261, grunt  command is failing when using the latest 0.11.0 version of grunt contrib jshint,The  grunt  command is failing with the latest update to  grunt contrib jshint .  The error is       Running  jshint:all   jshint  task     test/moment/duration.js     644          test.equal JSON.stringify d         d.toISOString           JSON.stringify on duration should return ISO string  ;                             ^  JSON  is not defined.    test/moment/format.js     168          var supportsJson = typeof JSON  ==  undefined     JSON.stringify    JSON.stringify.call                                                                     ^  JSON  is not defined.     168          var supportsJson = typeof JSON  ==  undefined     JSON.stringify    JSON.stringify.call                                                                                       ^  JSON  is not defined.     176              test.equal JSON.stringify                                   ^  JSON  is not defined.      When downgrading  grunt contrib jshint  to the previous version  0.10.0  the  grunt  command completes successfully. ,radakovich,closed,1,2015-03-06 04:43:44,2016-04-01 01:42:33,,,,0,1
11987,moment/moment,2262,Corrected month names for croatian locale,,tomislav-s,closed,6,2015-03-06 15:28:48,2015-11-09 06:29:05,,Language,,,1,1
11986,moment/moment,2263,Why moment 1000 60 60 .format  HH:mm:ss   returns  02:00:00  instead of  01:00:00 ?,According to [docs] http://momentjs.com/docs/ /parsing/unix offset/   moment constructor should interpret an integer argument as milliseconds.      javascript var   formatted = moment 1000 60 60 .format  HH:mm:ss  ;  console.log formatted ; // 02:00:00      Why  .format    returns  02:00:00  instead of  01:00:00 ? ,adriano-di-giovanni,closed,2,2015-03-06 17:28:58,2015-03-07 07:47:39,,,,0,1
11985,moment/moment,2264,moscow time is off,http://www.timeanddate.com/time/zone/russia/moscow  I think they changed their daylight savings time this year and it seems to be off by an hour right now. ,flogball00,closed,1,2015-03-06 18:13:21,2015-03-06 18:57:03,,,,0,1
11984,moment/moment,2265,1 test failed. locale:zh cn:calendar next week  2321.1  ,    Client info      Date String   : Fri Mar 06 2015 14:03:56 GMT 0600  CST  Locale String : 3/6/2015  2:03:56 PM Offset        : 360 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_10_2  AppleWebKit/537.36  KHTML  like Gecko  Chrome/41.0.2272.76 Safari/537.36            locale:zh cn:calendar next week  2321.1   Today   7 days beginning of day      javascript // Expected      12   // Actual        12         12    ==       12        ,ryanblanks,closed,0,2015-03-06 20:05:08,2015-04-01 06:20:00,,Unit Test Failed,,,0,1
11983,moment/moment,2266,Time zone offset changed by adding a day  but not an hour ,Sorry to add another issue seeing there s so many. One of my unit tests for a countdown timer failed. Adding a day  but not an hour  seems to change the timezone offset.       javascript log  new Date   log  moment  .toDate     log  moment  .add   days: 1   .toDate       // here log  moment  .add   hours: 1   .toDate              LOG: Sat Mar 07 2015 16:40:51 GMT 0500  EST  LOG: Sat Mar 07 2015 16:40:51 GMT 0500  EST  LOG: Sun Mar 08 2015 16:40:51 GMT 0400  EDT       and here LOG: Sat Mar 07 2015 17:40:51 GMT 0500  EST       I assume this is unexpected behavior. Let me know what info I can provide  and would be happy to prepare a PR with a little guidance of where to look. Thank you.  ,aj0strow,closed,2,2015-03-07 22:24:39,2015-03-09 04:49:26,,,,0,1
11982,moment/moment,2267,The documentation is incorrect for getting a month name using locale data.,In the [Changing locales locally] http://momentjs.com/docs/ /i18n/instance locale/  section of the documentation  there is an error in the following code:      var fr = moment  .locale  fr  ; fr.locale  .months moment [2012  0]   //  janvier  fr.locale  en  ; fr.locale  .months moment [2012  0]   //  January       The call to  fr.locale    in  fr.locale  .months moment [2012  0]    returns the string   fr    not the locale data.  It should be changed to  from what I can gather  the following:      var fr = moment  .locale  fr  ; fr.localeData  .months moment [2012  0]   //  janvier  fr.locale  en  ; fr.localeData  .months moment [2012  0]   //  January       [Here] http://jsfiddle.net/f8qb01rp/1/  is a link to a JSFiddle showing the issue.  I would be happy to update the docs  but I don t think I can.   ,radakovich,closed,1,2015-03-08 00:55:27,2015-03-08 01:17:13,,,,0,1
11981,moment/moment,2268,[locale/ar] Fix text direction of D/M/Y formats,The order in which D/M/Y is displayed in browsers is reversed  because of [the way bidi algorithm works] https://en.wikipedia.org/wiki/Bi directional_text .  This is how Arabic DD/MM/YYYY format is displayed on moment s homepage:  [image] https://cloud.githubusercontent.com/assets/1012761/6544324/ee79d974 c552 11e4 9911 dc807a991504.png   Changing the element s direction does not help:  [image] https://cloud.githubusercontent.com/assets/1012761/6544326/07e70350 c553 11e4 9ce4 d8d11c4ff285.png   Adding the Unicode non printing character [ Right to left mark   U 200F ] https://en.wikipedia.org/wiki/Right to left_mark  between the date fragments is a possible fix. I made this JSBin to demonstrate the issue: http://jsbin.com/yelaqajumi/1/ Also  I unified the L and l formats  because as far as I know  leading zeros are never used in dates in Arabic. ,forabi,closed,3,2015-03-08 03:31:23,2015-05-04 04:29:25,,,2.10.4,1,1
11980,moment/moment,2269,get  hour   incorrect?,var aaa is a utc string with a zero hour offset  but moment aaa .get  hour   adds one hour when there was DST at the time. Why?  I only want to read out the hour from aaa as the console.log shows when I log aaa. Why does it add one hour for the September date in 1966 and none for January? aaa = 14:00 but get  hour   says 15. This is driving me insane  :  Is there something I m overlooking? Thanks      var ccc = insYear     pad insMonth      pad insDay      pad insHour   :  pad insMinute ;             var aaa = moment.tz ccc.toString    insTZ .utc  .format  ;             console.log  aaa =   aaa    ccc =   ccc  insTZ ;             insYear = moment aaa .get  year  ;             insMonth = moment aaa .get  month   1;             insDay = moment aaa .get  date  ;             insHour = moment aaa .get  hour  ;             insMinute = moment aaa .get  minute  ;             var birthData =                   Year: insYear                  Month: insMonth                  Day: insDay                  Hour: insHour                  Minute: insMinute              console: aaa = 1966 09 10T14:00:00 00:00  ccc = 1966 09 10 15:00 Europe/Vienna Date sent:    Year :1966  Month :9  Day :10  Hour :15  Minute :0   aaa = 1966 01 10T14:00:00 00:00  ccc = 1966 01 10 15:00 Europe/Vienna Date sent:    Year :1966  Month :1  Day :10  Hour :14  Minute :0  ,elasticsteve,closed,2,2015-03-08 13:09:00,2015-04-01 04:11:18,,,,0,1
11979,moment/moment,2270,Month representation in arrays seems to start at 0  whereas days start at 1,When using arrays with moment  or the toArray   method  it seems like months start at 0  whereas days start at 1.  Is this intentional  or a bug?      javascript require  moment   [2015  12  31] .format    Invalid date  require  moment   [2015  11  31] .format    2015 12 31T00:00:00 08:00  > require  moment    2015 01 31T00:00:00 08:00  .toArray   [ 2015  0  31  0  0  0  0 ] > require  moment    2015 01 01T00:00:00 08:00  .toArray   [ 2015  0  1  0  0  0  0 ]     ,datfinesoul,closed,1,2015-03-08 18:01:43,2015-03-18 07:20:09,,,,0,1
11978,moment/moment,2271,1 test failed. utc:utc and local  307.6  ,    Client info      Date String   : Mon Mar 09 2015 16:56:06 GMT 0530  IST  Locale String : 3/9/2015  4:56:06 PM Offset        :  330 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_10_0  AppleWebKit/537.36  KHTML  like Gecko  Chrome/41.0.2272.76 Safari/537.36            utc:utc and local  307.6   the hours  8  should be correct for local      javascript // Expected 9 // Actual   8 8 == 9     ,ktrajasekar,closed,0,2015-03-09 11:26:49,2015-04-01 06:20:00,,Unit Test Failed,,,0,1
11977,moment/moment,2272,79 tests failed.  Firefox 36.0.1; Windows 8.1 ,    Client info      Date String   : Mon Mar 09 2015 12:17:26 GMT 0500  Central Standard Time  Locale String : 3/9/2015  12:17:26 PM Offset        : 360 User Agent    : Mozilla/5.0  Windows NT 6.3; WOW64; rv:36.0  Gecko/20100101 Firefox/36.0            preparsePostformat:calendar day  271.6   yesterday at the same time      javascript // Expected Yesterday at @:   AM // Actual   Yesterday at  :   AM  Yesterday at  :   AM  ==  Yesterday at @:   AM             locale:af:calendar day  428.6   yesterday at the same time      javascript // Expected Gister om 02:00 // Actual   Gister om 03:00  Gister om 03:00  ==  Gister om 02:00             locale:ar ma:calendar day  452.6   yesterday at the same time      javascript // Expected                02:00 // Actual                  03:00                 03:00  ==                 02:00             locale:ar sa:calendar day  476.6   yesterday at the same time      javascript // Expected                  :   // Actual                    :                     :    ==                   :               locale:ar tn:calendar day  500.6   yesterday at the same time      javascript // Expected                02:00 // Actual                  03:00                 03:00  ==                 02:00             locale:ar:calendar day  524.6   yesterday at the same time      javascript // Expected                  :   // Actual                    :                     :    ==                   :               locale:az:calendar day  548.6   yesterday at the same time      javascript // Expected d n n 02:00 // Actual   d n n 03:00  d n n 03:00  ==  d n n 02:00             locale:be:calendar day  574.6   yesterday at the same time      javascript // Expected         02:00 // Actual           03:00          03:00  ==          02:00             locale:bg:calendar day  598.6   yesterday at the same time      javascript // Expected         2:00 // Actual           3:00          3:00  ==          2:00             locale:bn:calendar day  622.6   yesterday at the same time      javascript // Expected            :       // Actual              :                   :        ==             :                   locale:bo:calendar day  647.6   yesterday at the same time      javascript // Expected              :   // Actual                :                 :    ==               :               locale:br:calendar day  672.6   yesterday at the same time      javascript // Expected Dec h da 2e00 AM // Actual   Dec h da 3e00 AM  Dec h da 3e00 AM  ==  Dec h da 2e00 AM             locale:bs:calendar day  689.6   yesterday at the same time      javascript // Expected ju er u 2:00 // Actual   ju er u 3:00  ju er u 3:00  ==  ju er u 2:00             locale:ca:calendar day  713.7   yesterday at the same time      javascript // Expected ahir a les 2:00 // Actual   ahir a les 3:00  ahir a les 3:00  ==  ahir a les 2:00             locale:cs:calendar day  738.6   yesterday at the same time      javascript // Expected v era v 2:00 // Actual   v era v 3:00  v era v 3:00  ==  v era v 2:00             locale:cv:calendar day  763.6   yesterday at the same time      javascript // Expected      02:00         // Actual        03:00               03:00          ==       02:00                     locale:cy:same day  786.6   yesterday at the same time      javascript // Expected Ddoe am 02:00 // Actual   Ddoe am 03:00  Ddoe am 03:00  ==  Ddoe am 02:00             locale:de at:calendar day  829.6   yesterday at the same time      javascript // Expected Gestern um 02:00 Uhr // Actual   Gestern um 03:00 Uhr  Gestern um 03:00 Uhr  ==  Gestern um 02:00 Uhr             locale:de:calendar day  852.6   yesterday at the same time      javascript // Expected Gestern um 02:00 Uhr // Actual   Gestern um 03:00 Uhr  Gestern um 03:00 Uhr  ==  Gestern um 02:00 Uhr             locale:el:calendar day  877.6   yesterday at the same time      javascript // Expected           2:00    // Actual             3:00               3:00     ==            2:00                locale:en au:calendar day  901.6   yesterday at the same time      javascript // Expected Yesterday at 2:00 AM // Actual   Yesterday at 3:00 AM  Yesterday at 3:00 AM  ==  Yesterday at 2:00 AM             locale:en ca:calendar day  925.6   yesterday at the same time      javascript // Expected Yesterday at 2:00 AM // Actual   Yesterday at 3:00 AM  Yesterday at 3:00 AM  ==  Yesterday at 2:00 AM             locale:en gb:calendar day  949.6   yesterday at the same time      javascript // Expected Yesterday at 02:00 // Actual   Yesterday at 03:00  Yesterday at 03:00  ==  Yesterday at 02:00             locale:en:calendar day  973.6   yesterday at the same time      javascript // Expected Yesterday at 2:00 AM // Actual   Yesterday at 3:00 AM  Yesterday at 3:00 AM  ==  Yesterday at 2:00 AM             locale:eo:calendar day  997.6   yesterday at the same time      javascript // Expected Hiera  je 02:00 // Actual   Hiera  je 03:00  Hiera  je 03:00  ==  Hiera  je 02:00             locale:es:calendar day  1021.7   yesterday at the same time      javascript // Expected ayer a las 2:00 // Actual   ayer a las 3:00  ayer a las 3:00  ==  ayer a las 2:00             locale:et:calendar day  1045.6   yesterday at the same time      javascript // Expected Eile  2:00 // Actual   Eile  3:00  Eile  3:00  ==  Eile  2:00             locale:eu:calendar day  1069.6   yesterday at the same time      javascript // Expected atzo 02:00etan // Actual   atzo 03:00etan  atzo 03:00etan  ==  atzo 02:00etan             locale:fa:calendar day  1093.6   yesterday at the same time      javascript // Expected              :   // Actual                :                 :    ==               :               locale:fi:calendar day  1117.6   yesterday at the same time      javascript // Expected eilen klo 02.00 // Actual   eilen klo 03.00  eilen klo 03.00  ==  eilen klo 02.00             locale:fr ca:same day  1160.6   yesterday at the same time      javascript // Expected Hier   02:00 // Actual   Hier   03:00  Hier   03:00  ==  Hier   02:00             locale:fr:same day  1183.6   yesterday at the same time      javascript // Expected Hier   02:00 // Actual   Hier   03:00  Hier   03:00  ==  Hier   02:00             locale:fy:calendar day  1207.6   yesterday at the same time      javascript // Expected juster om 02:00 // Actual   juster om 03:00  juster om 03:00  ==  juster om 02:00             locale:gl:calendar day  1232.7   yesterday at the same time      javascript // Expected onte   2:00 // Actual   onte   3:00  onte   3:00  ==  onte   2:00             locale:he:calendar day  1256.6   yesterday at the same time      javascript // Expected         02:00 // Actual           03:00          03:00  ==          02:00             locale:hi:calendar day  1280.6   yesterday at the same time      javascript // Expected         :       // Actual           :                :        ==          :                   locale:hr:calendar day  1306.6   yesterday at the same time      javascript // Expected ju er u 2:00 // Actual   ju er u 3:00  ju er u 3:00  ==  ju er u 2:00             locale:hu:calendar day  1331.6   yesterday at the same time      javascript // Expected tegnap 2:00 kor // Actual   tegnap 3:00 kor  tegnap 3:00 kor  ==  tegnap 2:00 kor             locale:hy am:calendar day  1360.6   yesterday at the same time      javascript // Expected      02:00 // Actual        03:00       03:00  ==       02:00             locale:id:calendar day  1383.6   yesterday at the same time      javascript // Expected Kemarin pukul 02.00 // Actual   Kemarin pukul 03.00  Kemarin pukul 03.00  ==  Kemarin pukul 02.00             locale:is:calendar day  1408.6   yesterday at the same time      javascript // Expected   g r kl. 2:00 // Actual     g r kl. 3:00    g r kl. 3:00  ==    g r kl. 2:00             locale:it:calendar day  1431.6   yesterday at the same time      javascript // Expected Ieri alle 02:00 // Actual   Ieri alle 03:00  Ieri alle 03:00  ==  Ieri alle 02:00             locale:ja:calendar day  1454.6   yesterday at the same time      javascript // Expected      2 0  // Actual        3 0        3 0   ==       2 0              locale:ka:calendar day  1478.6                         javascript // Expected       2:00 AM    // Actual         3:00 AM           3:00 AM     ==        2:00 AM                locale:km:calendar day  1502.6   yesterday at the same time      javascript // Expected               02:00 // Actual                 03:00                03:00  ==                02:00             locale:ko:calendar day  1527.6   yesterday at the same time      javascript // Expected       2  0  // Actual         3  0         3  0   ==        2  0              locale:lt:calendar day  1563.6   yesterday at the same time      javascript // Expected Vakar 02:00 // Actual   Vakar 03:00  Vakar 03:00  ==  Vakar 02:00             locale:lv:calendar day  1587.6   yesterday at the same time      javascript // Expected Vakar pulksten 02:00 // Actual   Vakar pulksten 03:00  Vakar pulksten 03:00  ==  Vakar pulksten 02:00             locale:mk:calendar day  1611.6   yesterday at the same time      javascript // Expected          2:00 // Actual            3:00           3:00  ==           2:00             locale:ml:calendar day  1635.6   yesterday at the same time      javascript // Expected               2:00     // Actual                 3:00                    3:00      ==                2:00                 locale:mr:calendar day  1660.6   yesterday at the same time      javascript // Expected             :         // Actual               :                      :          ==              :                     locale:ms my:calendar day  1686.6   kelmarin pada waktu yang sama      javascript // Expected Kelmarin pukul 02.00 // Actual   Kelmarin pukul 03.00  Kelmarin pukul 03.00  ==  Kelmarin pukul 02.00             locale:my:calendar day  1711.6      .                javascript // Expected    .    :       // Actual      .    :           .    :        ==     .    :                   locale:nb:calendar day  1735.6   yesterday at the same time      javascript // Expected i g r kl. 2.00 // Actual   i g r kl. 3.00  i g r kl. 3.00  ==  i g r kl. 2.00             locale:ne:calendar day  1759.6   yesterday at the same time      javascript // Expected              :       // Actual                 :                      :        ==               :                   locale:nl:calendar day  1785.6   yesterday at the same time      javascript // Expected gisteren om 02:00 // Actual   gisteren om 03:00  gisteren om 03:00  ==  gisteren om 02:00             locale:nn:calendar day  1810.6   yesterday at the same time      javascript // Expected I g r klokka 02:00 // Actual   I g r klokka 03:00  I g r klokka 03:00  ==  I g r klokka 02:00             locale:pl:calendar day  1834.6   yesterday at the same time      javascript // Expected Wczoraj o 02:00 // Actual   Wczoraj o 03:00  Wczoraj o 03:00  ==  Wczoraj o 02:00             locale:pt br:calendar day  1857.6   yesterday at the same time      javascript // Expected Ontem  s 02:00 // Actual   Ontem  s 03:00  Ontem  s 03:00  ==  Ontem  s 02:00             locale:pt:calendar day  1880.6   yesterday at the same time      javascript // Expected Ontem  s 02:00 // Actual   Ontem  s 03:00  Ontem  s 03:00  ==  Ontem  s 02:00             locale:ro:calendar day  1904.6   yesterday at the same time      javascript // Expected ieri la 2:00 // Actual   ieri la 3:00  ieri la 3:00  ==  ieri la 2:00             locale:ru:calendar day  1933.6   yesterday at the same time      javascript // Expected         02:00 // Actual           03:00          03:00  ==          02:00             locale:sk:calendar day  1958.6   yesterday at the same time      javascript // Expected v era o 2:00 // Actual   v era o 3:00  v era o 3:00  ==  v era o 2:00             locale:sl:calendar day  1983.6   yesterday at the same time      javascript // Expected v eraj ob 2:00 // Actual   v eraj ob 3:00  v eraj ob 3:00  ==  v eraj ob 2:00             locale:sq:calendar day  2008.6   yesterday at the same time      javascript // Expected Dje n  02:00 // Actual   Dje n  03:00  Dje n  03:00  ==  Dje n  02:00             locale:sr cyrl:calendar day  2032.6   yesterday at the same time      javascript // Expected        2:00 // Actual          3:00         3:00  ==         2:00             locale:sr:calendar day  2056.6   yesterday at the same time      javascript // Expected ju e u 2:00 // Actual   ju e u 3:00  ju e u 3:00  ==  ju e u 2:00             locale:sv:calendar day  2080.6   yesterday at the same time      javascript // Expected Ig r 02:00 // Actual   Ig r 03:00  Ig r 03:00  ==  Ig r 02:00             locale:ta:calendar day  2104.6           02:00      javascript // Expected        02:00 // Actual          03:00         03:00  ==         02:00             locale:th:calendar day  2128.6   yesterday at the same time      javascript // Expected                  2        0      // Actual                    3        0                        3        0       ==                   2        0                  locale:tl ph:same day  2151.6   yesterday at the same time      javascript // Expected Kahapon sa 02:00 // Actual   Kahapon sa 03:00  Kahapon sa 03:00  ==  Kahapon sa 02:00             locale:tr:calendar day  2175.6   yesterday at the same time      javascript // Expected d n 02:00 // Actual   d n 03:00  d n 03:00  ==  d n 02:00             locale:tzm latn:calendar day  2199.6   yesterday at the same time      javascript // Expected assant g 02:00 // Actual   assant g 03:00  assant g 03:00  ==  assant g 02:00             locale:tzm:calendar day  2223.6   yesterday at the same time      javascript // Expected         02:00 // Actual           03:00          03:00  ==          02:00             locale:uk:calendar day  2248.6   yesterday at the same time      javascript // Expected         02:00 // Actual           03:00          03:00  ==          02:00             locale:uz:calendar day  2272.6   yesterday at the same time      javascript // Expected           02:00    // Actual             03:00               03:00     ==            02:00                locale:vi:calendar day  2296.6   yesterday at the same time      javascript // Expected H m qua l c 02:00 // Actual   H m qua l c 03:00  H m qua l c 03:00  ==  H m qua l c 02:00             locale:zh cn:calendar day  2319.6   yesterday at the same time      javascript // Expected     2   // Actual       3        3    ==      2               locale:zh tw:calendar day  2345.6   yesterday at the same time      javascript // Expected     2 00 // Actual       3 00      3 00  ==      2 00      ,jpickwell,closed,1,2015-03-09 17:24:23,2015-04-01 06:20:00,,Unit Test Failed,,,0,1
11976,moment/moment,2273,parse natural language,I m working on s.th. where  moment.duration    comes in handy  but my input is natural language.  while this works:      javascript  moment  .subtract  moment.duration   hours:1      .format  ;  2015 03 09T17:04:11 01:00           javascript  moment  .subtract  moment.duration  1:00     .format  ;  2015 03 09T17:04:11 01:00       this doesn t:      javascript  moment  .subtract  moment.duration  1 hour     .format  ;  2015 03 09T18:04:11 01:00       it would be nice if this was supported. a bit like [later.js] http://bunkat.github.io/later/parsers.html text  does it. ,freder,closed,5,2015-03-10 09:27:45,2015-03-18 07:18:56,,,,0,1
11975,moment/moment,2274,How can I force format MMMM to use accusative form in Russian language?, [html layout] http://i.imgur.com/KLytdwj.png   I have html layout shown above and I want format month in accusative form  so in this example it should show          instead of       . I checked source code for ru locale and found this code      nounCase =  /D[oD]?  [[^ [ ]]  ]  s   MMMM?/ .test format  ?      accusative  :      nominative ;      Can we somehow change regexp here or add param to  format  method? ,Yankovsky,open,4,2015-03-10 09:55:19,0000-00-00 00:00:00,Menelion,Language,,,0,1
11974,moment/moment,2275,Parsing months in PL locale in strict mode,Hello   This is the issue I stumbled upon: http://jsfiddle.net/oo0v17xy/ In Polish language there are actually two ways of writing month  both correct  22 march could be  22 marca  or  22 marzec    and both should be considered valid in strict mode parsing.   As I can see those variations are already defined in moment.js codebase for polish locale  but not taken into account while parsing. ,szwacz,closed,3,2015-03-10 11:00:44,2016-02-25 23:17:08,,Language,,,0,1
11973,moment/moment,2276,zh cn / zh tw short date format match with CLDR s ,Hi folks   I know there has been some discussion [0] around the possible adoption of CLDR data in moment.js  but until that happens  would it be possible to make some changes to bring more consistency?   Specifically  it would be great if the short date format for zh cn and zh tw were updated to: yy/mm/dd   e.g. 15/3/10  Thanks  Leandro Reis  [0] https://github.com/moment/moment/issues/315 ,lreis,closed,7,2015-03-10 17:21:15,2016-03-08 23:32:11,Menelion,Language,,,0,1
11972,moment/moment,2277,Adding an image to the string date returns invalid date,I am getting the date as: ex: 3/11/2011  I am assigning a bunch of dates into an array  U  and then dumping it into a datable. var resolution = moment data.d.results[u].Resolution_x0020_Due .format  l hh:mm A  ;  data.d.results[u].Resolution_x0020_Due = resolution     < img style= padding left: 20px;  title= SLA is currently on time  src= sla_good.png / >  ;  When I want to add and image to that string it returns invalid date. Is there a way to add an image without getting invalid date back? ,andresan21,closed,1,2015-03-11 16:55:51,2015-03-18 07:14:35,,,,0,1
11971,moment/moment,2278,Fix PL locale months parsing,Fix for https://github.com/moment/moment/issues/2275 Is a little hacky  but this is still the sanest way of solving this issue I have found. ,szwacz,closed,5,2015-03-11 21:43:04,2015-05-04 04:21:59,,,2.10.4,1,1
11970,moment/moment,2279,02/28   1 month,    javascript moment  .startOf  month  .subtract 1  seconds   // > Sat Feb 28 2015 23:59:59 GMT 0800  CST   moment  .startOf  month  .subtract 1  seconds  .subtract 1  month   // > Wed Jan 28 2015 23:59:59 GMT 0800  CST  // Was expecting Sat Jan 31 2015 23:59:59 GMT 0800  CST       Is this a bug? ,gsklee,closed,2,2015-03-13 06:59:05,2015-03-13 15:10:30,,,,0,1
11969,moment/moment,2280,9 tests failed. duration:JSON.stringify duration  111.1  duration:JSON.stringify duration  111.2  locale:el:parse meridiem  868.1  locale:el:parse meridiem  868.5  locale:el:parse meridiem  868.9  locale:el:parse meridiem  868.13  locale:el:parse meridiem  868.17  locale:el:parse meridiem  868.21  locale:el:parse meridiem  868.25  ,    Client info      Date String   : Fri Mar 13 14:39:50 MDT 2015 Locale String : Friday  March 13  2015 2:39:50 PM Offset        : 420 User Agent    : Mozilla/4.0  compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; InfoPath.3; MS RTC LM 8             duration:JSON.stringify duration  111.1   Expected 1 assertions  0 ran      javascript // Expected undefined // Actual   undefined undefined undefined undefined            duration:JSON.stringify duration  111.2  ,marccma,closed,0,2015-03-13 20:41:09,2015-04-01 06:20:00,,Unit Test Failed,,,0,1
11968,moment/moment,2281,Week date format anomaly,Using Moment 2.9.0 moment  2014 12 29  .format  YYYY MM   should display 2014 52 but instead it displays 2014 01. ,pjdevries,closed,5,2015-03-13 21:46:56,2015-03-18 07:10:12,,,,0,1
11967,moment/moment,2282,included passed values in the range,The inBetween function doesn t check for the dates being passed  only dates between the dates being passed. It makes sense to check the actual dates too because they would be considered in the range passed. ,talymo,closed,0,2015-03-13 21:54:49,2015-03-13 22:14:23,,,,1,1
11966,moment/moment,2283,included passed values in the range   fixed,Added the ability to check the dates being passed in the range. Currently  if I have a range of 3/18/2015   4/12/2015 and 3/18/2015 is the date being passed to check  it will return false even though it is in the date range. ,talymo,closed,3,2015-03-13 22:13:35,2015-04-17 04:38:17,,,,1,1
11965,moment/moment,2284,Uses  today  when converting to utc using .utc  ,var date1 = moment  .utc  2015 03 11T08:17:26.65   //changes the date to today  var date2 = moment  2015 03 11T08:17:26.65  .utc   //works as expected ,JRMalherbe,closed,3,2015-03-19 10:34:00,2015-04-01 03:48:43,,,,0,1
11964,moment/moment,2285,Problems with momentjs in Meteor 1.0.4.1,CC: @dandv   Both myself and another Meteor/momentjs user have encountered problems with the most recent Meteor upgrade.  Here s the existing SO:  http://stackoverflow.com/questions/29135488/momentjs with meteor doesnt seem to work on server side/29135787 ,benmgreene,closed,39,2015-03-19 22:14:07,2015-10-10 17:51:46,,Troubleshooting,,,0,1
11963,moment/moment,2286,Use compressed values per comments on  1883 and  1915,Finally getting back to this  funny how weeks turn into months . In its own pull request this time. ,jsmreese,closed,2,2015-03-20 19:01:08,2015-05-04 04:20:22,,,2.10.4,1,1
11962,moment/moment,2287,lastDay format error in Spanish,An error occurs when formatting the yesterday s date in Spanish with moment.calendar.lastDay. This is because lastDay is a function in Spanish but is expected to be a string. ,wenchaodudu,closed,1,2015-03-20 23:16:50,2015-03-24 21:00:37,,,,0,1
11961,moment/moment,2288,fixed typos,,seferov,closed,5,2015-03-21 20:38:05,2015-06-08 22:03:24,,,2.10.4,1,1
11960,moment/moment,2289,fromNow   wrong if relativeTimeThreshold gets changed? ,Take a look at [this fiddle] http://jsbin.com/wuxitufaqe/2/edit?js console   I would expect the third output   1 minutes ago   to be   a minute ago   instead.  Is this a bug? Should/can I fix it?  ,pogopaule,closed,3,2015-03-25 16:11:16,2015-09-24 05:06:30,,Bug,,,0,1
11959,moment/moment,2290,Should moment.duration constructor support ISO8601?,This works:      javascript a = moment.duration 26   minutes  ; b = moment.duration a.toISOString    a.asMilliseconds   == b.asMilliseconds   => true      If the constructor specifically supports this  can it be added to the documentation? ,jnfeinstein,closed,2,2015-03-25 18:39:36,2015-06-19 05:54:50,,Documentation,,,0,1
11958,moment/moment,2291,moment  .set   should accept date formatting,I have a database that is storing absolute times  in the format  HH:mm .  When transforming the relative timings to date specific times  I have to do the following:      js var time =  10:30 ; // I would get this from the database var day = moment  ;  time = time.split  :  ; day.set     hours: time[0]    minutes: time[1]         Sure it works and it s not such a big deal  but it would be nice if I could use  set  as follows:      js var time =  10:30 ;  var day = moment  .set time   HH:mm  ;     ,albertorestifo,open,12,2015-03-26 10:56:16,0000-00-00 00:00:00,,New Feature,,,0,1
11957,moment/moment,2292,1 test failed. locale:zh cn:calendar next week  2321.1  ,    Client info      Date String   : Thu Mar 26 2015 12:40:01 GMT 0100  CET  Locale String : 26.3.2015 12:40:01 Offset        :  60 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_10_2  AppleWebKit/537.36  KHTML  like Gecko  Chrome/41.0.2272.89 Safari/537.36            locale:zh cn:calendar next week  2321.1   Today   7 days beginning of day      javascript // Expected      12   // Actual        12         12    ==       12        ,marcelbirkner,closed,0,2015-03-26 11:41:19,2015-04-01 06:20:00,,Unit Test Failed,,,0,1
11956,moment/moment,2293,1 test failed. locale:zh cn:calendar next week  2321.1  ,    Client info      Date String   : Thu Mar 26 2015 20:21:59 GMT 0100  Mitteleurop ische Zeit  Locale String : 26.3.2015 20:21:59 Offset        :  60 User Agent    : Mozilla/5.0  Windows NT 6.3; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/41.0.2272.101 Safari/537.36            locale:zh cn:calendar next week  2321.1   Today   7 days beginning of day      javascript // Expected      12   // Actual        12         12    ==       12        ,w33zel,closed,0,2015-03-26 19:22:41,2015-04-01 06:20:00,,Unit Test Failed,,,0,1
11955,moment/moment,2294,1 test failed. locale:zh cn:calendar next week  2321.1  ,    Client info      Date String   : Fri Mar 27 2015 11:16:35 GMT 0100  Hora est ndar romance  Locale String : 27/3/2015 11:16:35 Offset        :  60 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/41.0.2272.101 Safari/537.36            locale:zh cn:calendar next week  2321.1   Today   7 days beginning of day      javascript // Expected      12   // Actual        12         12    ==       12        ,martinlaregina,closed,0,2015-03-27 10:17:05,2015-04-01 06:20:00,,Unit Test Failed,,,0,1
11954,moment/moment,2295,0,,mtree,closed,0,2015-03-27 11:14:50,2015-03-27 11:40:46,,,,0,1
11953,moment/moment,2296,Make use of simple factory,Re: https://github.com/moment/moment/blob/develop/moment.js L1713 L1716  I have created a module that combats this issue [simple factory] https://github.com/bmullan91/simple factory ; it might be useful just to create one top level date factory and reuse it throughout.  If this is something that you agree with I d be happy to help  and submit a PR. ,bmullan91,closed,1,2015-03-27 12:28:01,2015-04-01 03:37:44,,,,0,1
11952,moment/moment,2297,ru locale raises TypeError when parsing date string which includes month name,Hi  I m trying to parse date using russian locale  but it raises  TypeError: this._longMonthsParse is undefined . This error occurs only with month names:  MMM  or  MMMM  format   MM  format seems to work fine. Here is [jsfiddle] http://jsfiddle.net/dtpahykx/ . ,hjarvard,closed,1,2015-03-27 13:58:22,2015-07-22 17:23:41,,,,0,1
11951,moment/moment,2298,[question] convert to full timeago  x years  y months  z days ago  not only  years/months/days  ago,Hi  Thank you @ichernev for this awesome plugin : 1:  sorry for my bad english :   Is it possible to convert a given   datetime   to   full timeago in words   using   Moment.js   like this :    2015 01 25 03:37:46   to    2 months  one day  5 hours and 10 minutes ago     Thanks ,flashios09,closed,1,2015-03-27 19:46:00,2015-04-01 03:34:19,,,,0,1
11950,moment/moment,2299,Cursor option to pre process results,Hi   Is there a way to say to pass a function to the  find method  pre process  returned documents?  I d need to convert the result documents to my own Javascript object instead of having them as a standard Object created fron JSON.  Thank you. ,paha77,closed,2,2015-03-29 20:49:36,2015-04-01 05:50:08,,,,0,1
11949,moment/moment,2300,dddd parsing and defaults uses start of year instead of something closer to current time,var d = moment  Thursday 8:30pm   [ dddd h:mm a ]   en  ;  var d2 = d.format  YYYY Do MMMM dddd h:mm a  ;  produces 2015 1st January Thursday 8:30 pm  Which I found surprising given the documentation for defaults. Is this intended behaviour? ,rj33,closed,5,2015-03-30 02:54:36,2016-10-03 16:19:38,,Bug,,,0,1
11948,moment/moment,2301,moment  .startOf  day   == moment.startOf  day  .endOf  day  ,Hey  this code didn t do what I expected because  moment  .startOf  day   == moment.startOf  day  .endOf  day     The work around is to use  var end = moment  .endOf  day    which will fail at midnight.        function makeTimesForInterval  numMins        var times = [];     var time = moment  .startOf  day  ;     var end = time.endOf  day  ;     console.log time ;     console.log end ;      if  numMins <= 0  throw Error  Your killing me smalls  ;      while  time.isBefore end     // one day       times.push   display: time.format  h:mm a    time: time  ;       time.add numMins   m  ;           console.log times ;     return times;         ,MichaelJCole,closed,2,2015-04-01 04:59:47,2015-04-01 05:44:18,,,,0,1
11947,moment/moment,2302,Wrong number of week in 2015,I know this problem is already referenced through issues  2137 and  2190 but MomentJS indicates that there is 52 weeks in 2015 while there is 53.   Here is a [fiddle] http://jsfiddle.net/aeq2L0em/  demonstrating the issue. The fiddle is based on the fact that the week of the 28th december 2015 is the 53rd week of the year since there is at least 4 days located in 2015 in that week  either the week is ISO or start on Sunday .  This implies that it is risky to iterate over weeks since switching from 2015 to 2016 triggers an error in the week / date link.  I am not sure it is exactly easy to fix but is there any workaround that exists for this issue ?   Many thanks ,PierreReliquet,closed,1,2015-04-01 08:01:18,2015-04-01 08:17:35,,,,0,1
11946,moment/moment,2303,Performance: improve parsing of moments from valid Date objects,EDIT: es6 stuff is merged  so this PR needs to get rewritten.  I do plan on getting to it  but not immediately.  For explanation of some of these changes  I ll discuss my numbers.  I m doing this from memory and can re measure if necessary  but...  My CPU profile in Chrome started at 400ms  and after this suite of changes  the profile was reduced to 200ms.   https://github.com/brianwyantora/moment/commit/6bc5d2e075b0cad32083ea5209bb6ac695029aa7     This change resulted in a reduction of about 70ms on my profile.     Basically  in my use case  I never send invalid dates from server to client.  So while I might do some work on the first date sent from the server to make sure the browser can parse it  once I ve done that  I won t call  moment.fn.isValid   .  Generating the parsing flags takes a notable amount of time  so deferring that generation is a significant help.   https://github.com/brianwyantora/moment/commit/928e068349c10d90bceb5266727e016f0cda1259     This change resulted in a reduction of about 60ms on my profile.     This change might look wrong on first glance  but notice    makeMoment  is only called from two places  the public constructors   and will pass the config object through  new Moment config  .   Moment  already clones the date  so doing the same in  makeMoment  is just duplicating work unnecessarily. ,brianwyantora,closed,6,2015-04-03 15:31:29,2015-05-04 04:15:07,,performance,,2.10.4,1,1
11945,moment/moment,2304,4 tests failed. utcOffset:zone to local ...,    Client info      Date String   : Sat Apr 04 2015 15:01:40 GMT 1300  New Zealand Standard Time  Locale String : 4/04/2015 3:01:40 pm Offset        :  780 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64; rv:38.0  Gecko/20100101 Firefox/38.0            utcOffset:zone to local  keepLocalTime = true  349.25   utcOffset 12:00  to local failed to keep local time      javascript // Expected 2015 04 04 14:01:19 // Actual   2015 04 04 15:01:19  2015 04 04 15:01:19  ==  2015 04 04 14:01:19             utcOffset:zone to local  keepLocalTime = true  349.26   utcOffset 13:00  to local failed to keep local time      javascript // Expected 2015 04 04 15:01:19 // Actual   2015 04 04 16:01:19  2015 04 04 16:01:19  ==  2015 04 04 15:01:19             utcOffset:zone to local  keepLocalTime = true  349.27   utcOffset 14:00  to local failed to keep local time      javascript // Expected 2015 04 04 16:01:19 // Actual   2015 04 04 17:01:19  2015 04 04 17:01:19  ==  2015 04 04 16:01:19             zoneSwitching:zone to local  keepLocalTime = true  388.1   zone  12:00  to local failed to keep local time      javascript // Expected 2015 04 04 14:01:19 // Actual   2015 04 04 15:01:19  2015 04 04 15:01:19  ==  2015 04 04 14:01:19      ,BARNZ,closed,1,2015-04-04 02:08:55,2015-05-05 03:17:20,,Troubleshooting,Unit Test Failed,,,0,1
11944,moment/moment,2305,floating point days in durations are trouble,I m seeing some surprising behavior adding/subtracting a partial day duration to a moment:      var moment = require  moment  ; var now = new moment  ; var halfday = moment.duration 1/2   d  ; var fullday = moment.duration 1   d  ; var day_ago = now.clone  .subtract fullday ; var halfday_ago = now.clone  .subtract halfday ; var otherhalf_ago = now.clone  .subtract halfday.as  ms   ; if  day_ago.isSame halfday_ago     console.log  surprise   ;   if   halfday_ago.isSame otherhalf_ago     console.log  surprise   ;        examining the actual dates  subtracting halfday subtracts a full day  and adding halfday adds nothing .  doing the computation with halfday.as  ms   produces the correct result. The momentjs code is pretty opaque in this regard  is this expected behavior? ,welch,closed,5,2015-04-05 17:03:57,2016-06-05 10:13:29,,Enhancement,,,0,1
11943,moment/moment,2306,Breaks in Meteor using IE8 due to export.js,In meteor/export.js:      // moment.js makes  moment  global on the window  or global  object  while Meteor expects a file scoped global variable moment = this.moment; delete this.moment;      the  delete this.moment  call causes an error in IE8 and breaks Meteor applications.  Should be surrounded with a try/catch as per [this StackOverflow] http://stackoverflow.com/questions/1073414/deleting a window property in ie  ,abecks,closed,2,2015-04-06 05:26:14,2015-05-02 23:08:34,,,,0,1
11942,moment/moment,2307,Humanize parsing error,Hi   I ran into a small issue with duration:  moment.duration  1025   seconds   .humanize   and moment.duration   1025    seconds   .humanize   show different results. I have to do  moment.duration   1025  1   seconds   .humanize   or parseInt to my value to make sure it is an int. However  if you set duration to seconds  moment could do this for you.  Cheers ,mattiLeBlanc,closed,2,2015-04-06 07:05:34,2015-07-08 11:30:21,,,,0,1
11941,moment/moment,2308,Fix for IE8,Fixes momentjs in Meteor on IE8 as per  2306  ,abecks,closed,3,2015-04-06 19:09:27,2015-04-17 04:06:46,,,,1,1
11940,moment/moment,2309,Time localization issue,Moment changes  one day  to  a day  and  one hour  to  an hour  while localizing for different languages. But many apps may not want that and for them can we have a flag or something like that not get this change? Where we can keep  one hour  to  one hour  and not an hour? ,erdevanshusharma,closed,1,2015-04-07 19:15:40,2015-04-17 06:19:24,,,,0,1
11939,moment/moment,2310,moment.duration.fn is missing in 2.10.0,It seems that moment.duration.fn was removed from 2.10.0 without prior deprecation and yet source code still mentions it:  moment/src/lib/duration/humanize.js:  // helper function for moment.fn.from  moment.fn.fromNow  and moment.duration.fn.humanize  This now breaks a 3rd party plugin and I can t see any workaround to extend duration?  ,boskee,closed,4,2015-04-07 21:21:36,2015-04-09 13:15:44,,,,0,1
11938,moment/moment,2311, 2/30/2014   February 30th  parses as valid string.  ,I m sure this _had_ to have been discussed  but I couldn t find a thread anywhere  so why does this not behave as expected?    var m = moment  02/30/2012     //   undefined m.isValid    //   true  What gives? ,c-johnson,closed,1,2015-04-07 23:43:01,2015-04-08 02:26:54,,,,0,1
11937,moment/moment,2312,Add duration.fn back,Reported in  2310 ,ichernev,closed,0,2015-04-08 02:41:30,2015-04-09 04:24:02,,,,1,1
11936,moment/moment,2313,2 tests failed. diff:diff across DST  2021.17  diff:diff across DST  2021.19  ,    Client info      Date String   : Wed Apr 08 2015 15:08:06 GMT 0500  CDT  Locale String : 4/8/2015  3:08:06 PM Offset        : 360 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_10_2  AppleWebKit/537.36  KHTML  like Gecko  Chrome/41.0.2272.118 Safari/537.36            diff:diff across DST  2021.17   month diff across DST  lower bound      javascript // Expected true // Actual   false false === true            diff:diff across DST  2021.19   year diff across DST  lower bound      javascript // Expected true // Actual   false false === true     ,pierre-t,closed,0,2015-04-08 20:11:53,2015-05-05 03:17:20,,Troubleshooting,Unit Test Failed,,,0,1
11935,moment/moment,2314,1 test failed. add and subtract:add across DST  1957.1  ,    Client info      Date String   : Wed Apr 08 2015 21:26:04 GMT 0400  EDT  Locale String : April 8  2015 at 9:26:04 PM EDT Offset        : 300 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_10_2  AppleWebKit/600.4.10  KHTML  like Gecko  Version/8.0.4 Safari/600.4.10            add and subtract:add across DST  1957.1   Expected at least one assertion  but none were run   call expect 0  to accept zero assertions.      javascript // Expected undefined // Actual   null null === undefined     ,torrelasley,closed,0,2015-04-09 01:27:00,2015-05-05 03:17:20,,Troubleshooting,Unit Test Failed,,,0,1
11934,moment/moment,2315,Issue with time manipulation / possible daylight saving in safari/mobile safari,I have an odd issue with Safari   when I have a date of 2015 04 04 and I try to set the hour to 16  it actually sets it to 17.  this basic example:      var m = moment  2015 04 04  ; m.hour 16 ; console.log m.format   ;      prints out      2015 04 04T17:00:00 11:00      I ve created a jsbin here: http://jsbin.com/yematocemi/1/edit?html js console output  I suspect that it is related to daylight savings   I m in Australia  AEST  and the clocks go back an hour at 3am   back to 2am  on 5/4/2015.  I ve reproduced against latest moment.js on both Safari and Mobile Safari and it works fine in Chrome and Firefox ,paulduran,closed,4,2015-04-09 07:37:50,2015-04-17 04:30:46,,,,0,1
11933,moment/moment,2316,Error when initializing datetimepicker with defaultDate and inline:true,Hi there   When initializing datetimepicker with defaultDate and inline:true  it generates the following error:  Uncaught TypeError: Cannot read property  trim  of undefined  at  bootstrap datetimepicker.js:1492 .  Probably because it attempts to test the value of input while it does not have an input in inline mode.  Best regards   Christophe ,christophe,closed,2,2015-04-10 08:23:04,2015-04-16 17:01:16,,,,0,1
11932,moment/moment,2317,Merge date and time,I added a new merge method that combines date and time components from different sources.  This simplifies common use cases  such as one in which forms display separate date and time fields whose values then have to be merged before sending or processing the data.  The purpose is to be able to do something along these lines  pseudocode :      var fullDateTime = moment.merge dateField.value  timeField.value ; var forDisplay = fullDateTime.format  ; sendToServer fullDateTime.toDate   ;      The implementation allows the date and time components to be specified separately  in different ways. For example  the date could be a Date object and the time could be a string or a Moment object. ,noamkfir,closed,3,2015-04-10 09:23:17,2015-04-15 16:57:49,,,,1,1
11931,moment/moment,2318,Please do not unpublish old versions from the NPM registry,Hi  I just noticed that moment  2.10.0  and  2.10.1  do not longer exist in the NPM registry.  I suspect it is because you unpublished them from the registry. Please don t do that  because it might break some workflows  i.e.  npm shrinkwrap  .  Perhaps you can use  npm deprecate  instead? ,moretti,closed,3,2015-04-10 13:29:31,2015-08-11 16:22:12,,Build/Release,,,0,1
11930,moment/moment,2319,Update link to example unit test,Because it was broken. ,leehankyeol,closed,1,2015-04-11 02:59:17,2015-04-15 16:54:27,,,,1,1
11929,moment/moment,2320,Update formats with correct grammar and consistency,,leehankyeol,closed,8,2015-04-11 03:46:34,2015-04-23 23:53:51,,,2.10.4,1,1
11928,moment/moment,2321,Relative times  short date format.,  Grammar for relative times  see http://www.uzdevumi.lv/p/latviesu valoda/11 klase/stilistika 8130/re 68541d02 c66f 4e5b bd29 ce6de3421c5a .   Fix singular unit durations for withoutSuffix=true cases  they matched withoutSuffix=false cases .   The short date format adjusted  see http://likumi.lv/ta/id/219491 dokumentu izstradasanas un noformesanas kartiba p 363331 .   Cache already split units  do not split them every time. ,JanisE,closed,4,2015-04-11 19:04:27,2015-05-04 04:13:15,,,2.10.4,1,1
11927,moment/moment,2322,Moment.js deprecation  global state  is breaking on 10.0,The deprecation of the global object for moment.js should be marked  Here there be dragons .  Moving from the 0.9 to 0.10 means that things break for our complicated build system which uses moment from None in the GruntFile and lots of ecmascript that is occasionally translated to older javascript.  Aside from reverting to 0.9.0 to go back to running  we haven t played with all the moving parts.  One odd spot  is that the GruntFile.js  which has just a   var moment = require  moment  ;  suddenly stopped being able to find moment .  We are running a couple outdated grunt plugins  but I doubt that s the cause:     grunt@0.4.5       grunt legacy log@0.1.1       grunt legacy util@0.2.0     grunt connect proxy@0.1.10     grunt contrib clean@0.6.0     grunt contrib compress@0.12.0     grunt contrib connect@0.8.0     grunt contrib copy@0.7.0     grunt contrib less@0.11.3     grunt contrib watch@0.6.1     grunt cordovacli@0.5.1     grunt express server@0.4.19     grunt less imports@0.9.1     grunt notify@0.3.1  The second are those odd deprecation warnings in the browser.  We are running a SPA with CanJS  Steal.JS  Bower  and a host of players.   We get the  Accessing Moment through the global scope is deprecated  and will be removed in an upcoming release  error  which might be related.  The files generally grab moment using  import moment from  moment ;    We often use it like  return   now   moment value   < check ;  or  moment.duration 20   minutes  .asMilliseconds   .    So  why does a minor release break things?   How exactly is a deprecation originally tagged as something for the node global space causing issues?  I don t know.  It takes a human hour just to get the systems into a state with an upgraded moment@2.10 to run tests; so I pass on experiences here without detailed diagnostics.  Given the behavior  anything is possible.  Watch for dragons.   ,merriam,closed,3,2015-04-12 04:34:03,2017-03-20 19:35:54,,,,0,1
11926,moment/moment,2323,Pass duration to relativeTime s formatting handlers,This gives more flexibility to do things like  2 days and 6 hours ago  for example instead of the current  2 days ago .  Of course the parameter is completely optional and doesn t disturb anything else.   Thank you in advance. ,laurentguilbert,closed,5,2015-04-13 10:12:12,2015-11-09 06:30:10,,Enhancement,,,1,1
11925,moment/moment,2324,Year changing between 20   and 19   when formatting,Hi there   I was experiencing issues with the year format within a date of birth field I have set up.  Years between 97 69 would output correclty  however 68 and below would output 2068 etc.  I tested this in the console as well: var test = moment  25/02/69    DD/MM/YY  ; test.format  ; output:  1969 02 25T00:00:00 00:00   var test1 = moment  25/02/69    DD/MM/YY  ; test1.format  ; output:  2068 02 25T00:00:00 00:00   I ve been able to change our expected format to YYYY which is working fine   but for some people that might not be able to change the data coming in this might be a big problem ,liam-swinney,closed,3,2015-04-13 10:47:34,2015-04-16 16:58:25,,,,0,1
11924,moment/moment,2325,addRegexToken,Androd 2.3.3 stock browser reports typeof Regex object /../  as function and so its added to regexes array by addRegexToken and tried to be called as a function which fails and whole moment parsing from a valid iso string fails. I heard there are some browsers that also report typeof Regex object as function. http://stackoverflow.com/questions/5054352/why use typeof for identifying a function  So  this needs to be fixed.   function addRegexToken  token  regex  strictRegex            regexes[token] = typeof regex ===  function  ? regex : function  isStrict                return  isStrict    strictRegex  ? strictRegex : regex;          ;       ,lockedscope,closed,6,2015-04-13 12:24:15,2015-07-13 00:41:37,,Bug,,,0,1
11923,moment/moment,2326,German dates and timezones,Hello  I m trying to use moment.js with german dates but the following problem occurs: For example I use the Date  YYYY MM DD  2015 05 15 and the following code:      html <script type= text/javascript  src= bower_components/moment/moment.js ></script> <script type= text/javascript  src= bower_components/moment/locale/de.js ></script>          javascript var d = moment  2015 05 15    Y m d    de   true ; d.format  YYYY/mm/DD  ;      Format outputs: 2015 05 12 Im using PHP to calculate the date  PHP uses timezone  Europe/Berlin  .  How can i fix this? ,ghost,closed,1,2015-04-13 13:55:25,2015-04-13 15:26:13,,,,0,1
11922,moment/moment,2327,toDate   Ignores time zone,Unfortunately setting the time zone global for moment objects does not affect the JS date since it uses timestamp to create the time  so we lose the timezone      javascript moment   Moment  _isAMomentObject: true  _isUTC: false  _pf: Object  _locale: Locale  _d: Tue Apr 14 2015 16:13:14 GMT 0100  GMT Summer Time    moment.tz.setDefault  Europe/Istanbul  ; global.js:15 function utils_hooks__hooks             return hookCallback.apply null  arguments ;       moment   Moment  _isAMomentObject: true  _isUTC: true  _pf: Object  _locale: Locale  _d: Tue Apr 14 2015 19:13:26 GMT 0100  GMT Summer Time    moment  .toDate   Tue Apr 14 2015 16:13:33 GMT 0100  GMT Summer Time       https://github.com/moment/moment/blob/develop/src/lib/moment/to type.js L10      javascript export function toDate          return this._offset ? new Date  this  : this._d;        workaround      javascript moment.fn.toJsDateWithTimezone = function       return new Date this.year    this.month    this.date    this.hour    this.minute    this.second    this.millisecond   ;  ;     ,ykurtbas,closed,1,2015-04-14 15:26:59,2015-04-16 06:02:57,,,,0,1
11921,moment/moment,2328,Standard nomenclature  pt  pt br  es ,I realized in pt and pt br have some different things than others. In english and some other languages  the first of the characters is in uppercase. So why is different in pt and pt br?  I started to implement the change  missing the tests yet and adjust in locale/pt. But I wonder if I can adjust.    Note: DON T merge this PR yet. Tests Failing.   ,raphamorim,closed,8,2015-04-14 22:07:19,2015-05-04 04:12:38,,,2.10.4,1,1
11920,moment/moment,2329,Add the minute unit of time for zh cn and zh tw locales and update tests.,The translation team I m working with for a project is interested in the unit addition for minute.  This wraps up the work discussed in this PR  2107 by applying the change to zh cn and zh tw respectively.  Either PR is fine with me  if the other one is updated  from a merge standpoint :smile: ,hemp,closed,2,2015-04-15 13:20:39,2015-05-04 04:11:39,,,2.10.4,1,1
11919,moment/moment,2330,Add dates to changelog?,Just a minor request: start adding dates next to the version numbers in https://github.com/moment/moment/blob/develop/CHANGELOG.md. Can be helpful when you know roughly when you last upgraded but don t remember version numbers. ,philfreo,closed,3,2015-04-15 14:57:40,2017-03-20 03:00:01,,Documentation,,,0,1
11918,moment/moment,2331,moment  .fromNow   for age verification inaccurate,It seems fromNow   only calculates the difference based on the year? This is providing inaccurate difference. Is there a parameter I m missing? Check my method here: https://github.com/jgoldsmith83/7 Crimes/blob/master/index/index scripts.js Let me know if I m using it wrong or missing something. ,jgoldsmith83,closed,2,2015-04-15 18:49:22,2015-04-16 05:52:46,,,,0,1
11917,moment/moment,2332,Numerical Values to handle  MMM DD YYYY  format,Hello   This is the issue I ran into: http://jsfiddle.net/Massiel/ns4dj4oL/4/ Even though the moment for   5 5 2015    [ MMM DD YYYY ]  is recognized as valid  the month on the actual object is always set to January.  Are you guys supporting this case; or maybe there is a bug with the parseTokenWord regex to handle it  so the month s value is not being added properly to the token array.   Best Regards   Massiel ,MassielCuba,closed,1,2015-04-15 22:12:22,2015-04-16 05:29:49,,,,0,1
11916,moment/moment,2333,How can I make time format change to Chinese?Can moment automatically translate?,How can I make time format change to Chinese?Can moment automatically translate? ,lwd426,closed,2,2015-04-16 09:45:01,2015-04-16 16:49:31,,,,0,1
11915,moment/moment,2334,Potential BUG on format yymmdd,Hi  I just tried the moment.js and found that when I parse a date using the following snippet   var moment = require  moment  ; moment  150416    yymmdd  .format  YYYY/MM/DD    It turns out to be  2015/04/17   is something went wrong  or I didn t read the document carefully? ,etman,closed,1,2015-04-16 17:03:49,2015-04-16 23:39:16,,,,0,1
11914,moment/moment,2335,create moment with customlanguages is failing,On 2.9 the following command works   grunt uglify embedLocales   embedLocales pt  Running  uglify:main   uglify  task  > > 3 files created.  Running  uglify:customlocales   uglify  task  > > 1 file created.  Running  embedLocales  task  Done  without errors.  but on 2.10.2 using the same command  returns the following   Running  embedLocales  task Warning: Cannot read property  targetLocales  of undefined Use   force to continue.  using   force does not create a moment with customlanguages ,webmutation,open,3,2015-04-17 14:07:29,0000-00-00 00:00:00,,Build/Release,Documentation,,,0,1
11913,moment/moment,2336,Fixes year/week parsing for non standard dow/doy combinations,Fixes incorrect year/week parsing for non standard dow/doy combinations. Replaces the pull request  2188. See also the issue  2115.  ,gregor-rayman,closed,2,2015-04-18 13:39:31,2015-07-12 23:40:31,,,2.10.5,1,1
11912,moment/moment,2337,Support alternate clock sources,It would be a nice feature if the source of current time was pluggable  rather than always obtained from  new Date   .  There should be a simple function that can be overwritten to provide custom functionality.  For example:   I might want to get the current time from a server  rather than trusting the client s clock.   It would be helpful during unit tests to set up a fake clock with fixed values.  I envision an interface similar to:      javascript // default implementation moment.now = function     return moment new Date   ;    // an alternate implementation  using a starting value from elsewhere var now = moment  2015 01 01T00:00:00Z  ; setInterval function    now.add 1  s  ;    1000 ; moment.now = function     return now;    // a fixed value implementation  for use in unit tests moment.now = function     return moment  2015 01 01T00:00:00Z  ;        This seems like it would be very easy to implement.  Thoughts? ,mj1856,closed,8,2015-04-20 23:53:23,2015-12-10 06:39:02,,New Feature,,,0,1
11911,moment/moment,2338,HH timezones not interpreted as HH00,http://jsfiddle.net/zy3qwbzL/  Expected these to be the same:      moment  2014 02 01 00:00:00 06  .format   moment  2014 02 01 00:00:00 0600  .format        but received:      2014 01 31T22:00:00 08:00 2014 02 01T00:00:00 08:00       motivated by output format of generate_series in psql  ,AustinBGibbons,closed,1,2015-04-21 23:48:17,2015-05-02 06:01:36,,,,0,1
11910,moment/moment,2339,How to set datetimepicker range title with variables,I want to set variable in place of range JSON key  titles . Like ranges:               today : [moment    moment  ]              yesterday : [moment  .subtract  days   1   moment  .subtract  days   1 ]              lastSevenDays : [moment  .subtract  days   6   moment  ]              lastThirtyDays : [moment  .subtract  days   29   moment  ]              thisMonth : [moment  .startOf  month    moment  .endOf  month  ]              lastMonth : [moment  .subtract  month   1 .startOf  month    moment  .subtract  month   1 .endOf  month  ]           There all keys are variables. And i want the values of that variables to show... ,bilaliqbalr,closed,1,2015-04-22 16:38:25,2015-04-24 10:45:16,,,,0,1
11909,moment/moment,2340,moment  .unix   works in Chrome but not in Firefox,^^ Try this: moment  Jul 2015  .unix   under both chrome and firefox ,ghost,closed,2,2015-04-22 22:44:19,2015-04-23 03:44:43,,,,0,1
11908,moment/moment,2341,duration parsing question ,I wanted to parse strings like this from youtube and vimeo s time duration:  7:52   = 7 minutes  52 seconds  moment.duration  7:52   assumes 7 hours and 52 minutes.  Is there a simple built in way where the following would convert:  15  = 15 seconds  12:15  = 12 minutes  15 seconds  7:12:15  = 7 hours  12 minutes and 15 seconds.  I m using the latest nodejs npm package  2.10.2  ,amit777,closed,1,2015-04-23 05:04:17,2015-05-28 21:45:57,,,,0,1
11907,moment/moment,2342,Support Django DurationField de serialization.,I haven t included tests yet because I m not sure if you will support adding this. You might not believe it s a common enough use case. Source of the string is [here] https://github.com/django/django/blob/0ed7d155635da9f79d4dd67e4889087d3673c6da/django/utils/duration.py . Examples are [here] http://www.regexr.com/3asci . This could be incorporated into the  aspNetRegex  if that would be preferrable. Current:      javascript /    ? ?:  d   . ?  d   :  d   ?: :  d   .?  d 3  ? ?/      12 13:22:45.334  021   Currently looses the last three characters but that s changeable ofc.      javascript /    ? ?:  d  [ . ] ?  d   :  d   ?: :  d   .?  d 3  ? d 0 3  ?/     ,willstott101,closed,5,2015-04-23 12:44:02,2015-11-09 06:36:22,,,,1,1
11906,moment/moment,2343,There doesn t seem to be a way to handle either 2 or 4 digit years,I feel that the following snippet:      moment  23/4/14    D/M/YYYY        ought to return the date  2014 04 23   using ISO for the avoidance of doubt   but instead it returns  0014 04 23   which is pretty unlikely to have been what the user intended.    The opposite way round:      moment  23/4/2014    D/M/YY        gives you  2020 04 23   which isn t likely to have been what the user meant either...  To maintain backwards compatibility  perhaps there should be another format specifier  e.g. a single  Y  that doesn t care whether it gets a 2 digit year or a 4 digit year  and returns something sensible either way.  I.e.  I want to be able to parse the user input and not care whether they used a 4 digit year or a 2 digit year  and use some sensible rules to return the date the user expected. ,stewartml,closed,11,2015-04-23 16:36:24,2015-07-26 04:49:17,,Enhancement,todo,,,0,1
11905,moment/moment,2344,Add support for U format  for 2 or 4 digit years,This attempts to fix  2343 by adding a new format specifier   U   to allow the parsing of dates with either 2 or 4 digit years.  E.g.:      moment  D/M/U    18/9/14  .format  DD/MM/YYYY   ==  18/09/2014  moment  D/M/U    18/9/2014  .format  DD/MM/YYYY   ==  18/09/2014       I said in the issue that I was going to use  Y  as the specifier  but it appears already to be in use for [something else] https://github.com/stewartml/moment/blob/develop/src/lib/units/year.js L26 .  So I picked  U   for no real reason.  I m not very familiar with the layout of the code  so hopefully I ve done the right things here... ,stewartml,closed,9,2015-04-23 21:12:27,2015-07-26 05:02:22,,,2.10.5,1,1
11904,moment/moment,2345,moment  .utcOffet  5   60 .day 5  resulting in  last  Friday,I have the following code:      js d = moment   //  >  2015 04 26T13:46:22 09:00   this is a Sunday  JST   d.utcOffet  5   60  //  >  2015 04 25T23:46:22 05:00   this is a Saturday  EST   d.day   //  > 6  as I said  Saturday  d.day 5  //  >  2015 04 24T23:46:22 05:00   this is  last  Friday       I thought  moment  .day 5   was supposed to set the date to __next__ Friday. If this is the case  then the above is exhibiting a bug.  If not  what is the correct way to go about this?  Cheers in advance  ,Panoplos,closed,2,2015-04-26 04:53:38,2015-05-02 01:25:38,,,,0,1
11903,moment/moment,2346,How do I convert iso 8601 duration to seconds?,Hello. I have a small question  but before I ask  I just want to let you guys know that this is an awesome library   great work   My question is: How can I convert an iso 8601 duration   PT15M51S   into seconds? I tried this:      JavaScript var moment = require  moment  ; var duration =  PT15M51S ; var x = moment duration  moment.ISO_8601 ; console.log x.seconds   ;      But it prints  NaN . Any ideas? Thank you. ,bookercodes,closed,1,2015-04-26 12:51:56,2015-04-26 17:00:44,,,,0,1
11902,moment/moment,2347,Change Malay language code to comply IOS639 2,According to ISO 639 2 Malay language code/tag is  ms  please refer [here] http://www.loc.gov/standards/iso639 2/php/code_list.php . ,wajatimur,closed,4,2015-04-27 02:37:40,2015-07-12 23:45:49,,Language,,2.10.5,1,1
11901,moment/moment,2348,UTC hours   reports unexpected hours,Hello all  I m sure you get a bunch of these questions all the time  but I m sort of stumped. And I would guess I m missing something simple.  Here s my simple code:      var expiryMoment = moment.utc new Date expiry  ;  // Set the beginning of the day. var expiryBegin = expiryMoment.clone  ; expiryBegin.hours 0 ;       expiry  variable is a string with no time and no timezone  only a month/day/year. But I am using utc and that gives me 0 hours. So far  so good.  However  calling  expiryMoment.hours    gives me 7. I am UTC 08:00.  Before setting the hours   expiryMoment.format    gives me  04/17/2015 00:00:00 . After setting the hours to 0  the  expiryMoment.format    method gives me  04/16/2015 17:00:00 . Shouldn t it just do nothing?  Many thanks. ,mscappini,closed,4,2015-04-27 05:45:04,2015-04-27 17:52:56,,,,0,1
11900,moment/moment,2349,html time element use case,Be good if there was a canonical example how to use it in conjunction with uses of https://html.spec.whatwg.org/multipage/semantics.html the time element  For example is there a non jquery example that simply presents any time element with dateTime= defined in a web page? Something better than my own: view source:http://bus.dabase.com/ ,kaihendry,open,2,2015-04-27 09:29:38,0000-00-00 00:00:00,,Documentation,Up-For-Grabs,,,0,1
11899,moment/moment,2350,The code generator has deoptimised the styling of moment.js as it exceeds the max of  100KB ,Moment.js comes OOTB in [KeystoneJS] http://github.com/keystonejs/keystone   This error started cropping up after the ES6 switch. I ve found this SO link for reference: https://stackoverflow.com/questions/29576341/what does the code generator has deoptimised the styling of some file as it e  Is there anything I can do to avoid this from happening? ,peterpme,closed,2,2015-04-27 14:50:06,2015-07-12 18:37:10,,,,0,1
11898,moment/moment,2351, Infinity as a date,<sub><sup>I know this might seem counter intuitive to the library as is and you may not decide to do anything about it  but I was surprised to find that you don t support  Infinity  type  I know in some cases in this library that could prove to be problematic  such as format  etc.. </sup></sub>  If you pull down from PostgreSQL a date value of  Infinity   The use case I was hoping to use is as such;  moment myVal .isBefore Date.now     where  myVal  could be any date from   Infinity  to  Infinity .  What we get though right now is:      js > moment Infinity .isBefore Date.now    false > moment Infinity .isAfter Date.now    false > moment  Infinity .isBefore Date.now    false > moment  Infinity .isAfter Date.now    false      Expected:      js > moment Infinity .isBefore Date.now    false > moment Infinity .isAfter Date.now    true > moment  Infinity .isBefore Date.now    true > moment  Infinity .isAfter Date.now    false     ,blakmatrix,closed,2,2015-04-28 18:02:20,2015-05-02 00:48:45,,,,0,1
11897,moment/moment,2352,duration parsing is giving incorrect value in 2.10.2,moment.duration  months: 2  .asDays    > 61 moment.duration  months: 3  .asDays    > 91 moment.duration  months: 4  .asDays    > 122  and so on.... ,shishirdwivedi,closed,1,2015-04-29 10:47:06,2015-05-02 00:42:03,,,,0,1
11896,moment/moment,2353,Firefox and Chrome adds 1 day differently,  I am using MacOSX 10.9.5  Chrome Version 42.0.2311.90  64 bit  and Firefox Nightly 40.0a1  2015 04 29 .   My computer timezone is set to Brasilia Standard Time  city S o Paulo  Brazil  The result of adding one day to some dates in the months of October  is causing a bug in firefox that affects a calendar widget I am using  see https://github.com/gpbl/react day picker/issues/18  Here is a simplified test case:      javascript var oct182014 = moment  2014 10 18  ; var oct182014Plus1 = moment  2014 10 18  .add 1  d  ; console.log  18 of october 2014:   oct182014.format    oct182014.valueOf   ; console.log  18 of october 2014   1 day:   oct182014Plus1.format    oct182014Plus1.valueOf   ;      The output on Chrome:      18 of october 2014: 2014 10 18T00:00:00 03:00 1413601200000 18 of october 2014   1 day: 2014 10 19T01:00:00 02:00 1413687600000      And the output on Firefox:       18 of october 2014:   2014 10 18T00:00:00 03:00  1413601200000  18 of october 2014   1 day:   2014 10 18T23:00:00 03:00  1413684000000     ,fczuardi,closed,5,2015-04-29 14:37:42,2015-05-02 03:54:09,,Timezones,Troubleshooting,,,0,1
11895,moment/moment,2354,Invalid  modified moments should not return true in  isSame ,Hi   Noticed something odd:      coffee> moment.invalid  .isSame moment.invalid  .year 2010   false coffee> moment.invalid  .year 2010 .isSame moment.invalid  .year 2010   true      :cake:  ,Radagaisus,closed,9,2015-04-29 15:18:25,2015-07-13 00:33:39,,Bug,,,0,1
11894,moment/moment,2355,Strange behaviour with month,Hi  I m getting a wrong month after parsing a date with format.  Please look at this code:      javascript var dateStr =  19/03/1978 ; var parsed = moment dateStr   DD/MM/YYYY  ; var month = parsed.get  month  ; console.log parsed.format  DD/MMM/YYYY   ; // writes  19/03/1978   OK   console.log month ; //writes  2   Wrong  should be 3      ,jselesan,closed,1,2015-04-30 12:00:01,2015-04-30 12:10:42,,,,0,1
11893,moment/moment,2356,Add constructor argument to the deprecation warning,I feel it would be helpful if the  1407 deprecation warning printed to the console also indicated the failing argument passed to the constructor   particularly for cases where  moment.js  is minified in a production build and debugging is not readily available.  I would guess this would be changing [ warn msg  ] https://github.com/moment/moment/blob/ce233cecf3d07aa15869a1db0fd8a8c43efccfcd/moment.js L722  to also print the constructor argument passed  but it s not clear what effect that may have on other deprecation warnings.  :beers: ,brianmhunt,closed,4,2015-04-30 14:15:48,2016-01-08 20:48:45,,Enhancement,Up-For-Grabs,,,0,1
11892,moment/moment,2357,Improve unit bubbling for ISO dates,   What is this?  This PR intends to fix issues with invalid ISO dates getting created from a well formatted  moment.duration . GitHub Issues I am aware of:   https://github.com/moment/moment/issues/2162   https://github.com/moment/moment/issues/1697  What I have done is basically:   not use  this.data  as source of truth anymore for  toISOString      I thought about changing the way  data  is filled  but I believe this would be the wrong approach  correct me if I am wrong   use some custom bubbling for  toISOString  that stops bubbling at   hours   and   days       these are basically the borders that are also used internally     internal fields are milliseconds  which can bubble up to hours   days and month  becoming years    add one line spec that should cover all new edge cases    Why is it useful?  The ISO 8601 standard  which I only know from second hand knowledge   makes a difference between hours  days and months. That is:    P1D  means tommorrow  at the same time    PT24H  means in 24 hours  which can be different from the former case  if the clock changed in the meantime  think of DST changes  leap seconds  etc     P30D  means in thirty days  no matter how many days the current month has    P1M  means on the same date in the next month  Thus from an ISO perspective there is a difference between  moment.duration 1   days    and  moment.duration 24   hours    which should now be reflected.  _Note: I ve written down similar arguments in the linked issues  but I believe it helps clarity to repeat it if I open a PR ^^_ ,NobodysNightmare,closed,3,2015-05-04 15:44:50,2015-07-12 23:58:43,,,2.10.5,1,1
11891,moment/moment,2358,Cannot submit builds to the App Store in a PhoneGap application,I have been experiencing an issue submitting an Ionic/PhoneGap build to the App Store that uses angular moment. The error is below. My solution was to exclude the MOMENT library from the included library and just include moment.min.js directly.  The same issue is report here: https://github.com/AppGyver/steroids/issues/918  > ERROR ITMS 90035:  Invalid Signature. Code object is not signed at all. The binary at path [myapp.app/Application/build/components/moment/scripts/npm_prepublish.sh] contains an invalid signature. Make sure you have signed your application with a distribution certificate  not an ad hoc certificate or a development certificate. Verify that the code signing settings in Xcode are correct at the target level  which override any values at the project level . Additionally  make sure the bundle you are uploading was built using a Release target in Xcode  not a Simulator target. If you are certain your code signing settings are correct  choose  Clean All  in Xcode  delete the  build  directory in the Finder  and rebuild your release target. For more information  please consult developer.apple.com/ /Introduction.html  ,kayzee,closed,4,2015-05-04 15:48:07,2015-05-05 03:14:21,,,,0,1
11890,moment/moment,2359,moment format problem,moment  2015 5 5   in chrome has no problem  but failed in safari and firefox  need sransfer moment  2015 05 05     [image] https://cloud.githubusercontent.com/assets/1269254/7466684/b8f66484 f31a 11e4 8009 1661a197c0b7.png   left is chrome and right is safari ,sirzxj,closed,1,2015-05-05 03:35:03,2015-05-21 07:04:34,,,,0,1
11889,moment/moment,2360,Fixed issue  2289  if the custom seconds to minutes threshold is set bel...,...ow 30 seconds than bug occurs ,davidkmenta,closed,3,2015-05-05 09:58:16,2015-09-24 04:37:24,,,,1,1
11888,moment/moment,2361,incorrect diff in days,The difference in days is incorrect when running the snippet below and is returning 0.  moment  1900 04 01T00:00:00.000Z  .diff moment  1900 03 31T00:00:00.000Z     days  ;  I noticed this when the two lines of code below were both returning 89.  moment  1900 03 31T00:00:00.000Z  .diff moment  1900 01 01T00:00:00.000Z     days  ; moment  1900 04 01T00:00:00.000Z  .diff moment  1900 01 01T00:00:00.000Z     days  ;  Any date comparisons that start before or on 1900 03 31T00:00:00.000Z and on or after 1900 04 01T00:00:00.000Z are then out by one day. ,SamWhitby,closed,6,2015-05-05 20:54:24,2015-05-07 00:49:25,,Timezones,,,0,1
11887,moment/moment,2362,moment.min returns different results depending on the order,If I try to get the min of two moments  one of which is invalid  then the result I get depends on the order in which I specify the moments:      javascript moment.min moment      moment   .toDate   // Invalid Date moment.min moment    moment     .toDate   // Wed May 06 2015 14:52:20 GMT 0500  CDT       I m not sure what the expected behavior should be  but what I expected is something like this:      javascript function getMin       var dates = Array.prototype.slice.call arguments ;   dates = dates.filter function  a   return a.isValid  ;  ;   // etc.       ,cwohlman,closed,5,2015-05-06 19:57:25,2015-07-08 11:02:53,,Bug,,,0,1
11886,moment/moment,2363,Can t change only some locales,I tried to change only some locales this way: http://jsfiddle.net/xr9nshft/ but this throws error  Uncaught TypeError: Cannot read property  replace  of undefined . In this case it s because of missing locale for the  mm  variable. I suppose the correct way is replace only locales those are named. If I had to set all the variables  then I had to copy the whole logic for the localization  for example inflection in cs.js . ,davidkmenta,closed,1,2015-05-07 12:17:23,2015-06-26 22:19:19,,,,0,1
11885,moment/moment,2364,can t validate date in  it  locale,I m trying to validate date in it locale       javascript moment.locale  it  ; var a =  13/12/2015 ; moment a .isValid  ; //return false  but should true moment  .format  L  ; //return  08/05/2015  moment a [ DD/MM/YYYY ] .isValid  ; //return true      How I can validate other locales dates without putting format in params?  Thank you  ,idej,closed,2,2015-05-08 12:03:55,2015-05-21 07:00:53,,,,0,1
11884,moment/moment,2365,Moment month zero based  format output of month is one based,When outputting a moment object as a string  for example say May 5th 2015 formatted with  YYYY MM DD  would be  2015 05 05 .   If this string is split and then fed into a moment object like so       var m = moment  ; var mydateString = m.format  YYYY MM DD  ;  var tmp = mydateString.split     ; m = moment [tmp[0] tmp[1] tmp[2]] ; //  Moment object is one month ahead here      The corresponding date would become June 5th 2015.   For some reason the month is zero based in input  and one based in output ? ,peterver,closed,10,2015-05-08 16:18:37,2015-06-19 06:32:19,,,,0,1
11883,moment/moment,2366,Consider zone formatting token for normalizing  00:00 to Z,Originally moment/moment timezone 213      javascript var m = // any moment var s = m.format  YYYY MM DD HH:mm:ss      m.utcOffset   === 0 ?  [Z]  :  Z   ;      It would be nice to have a formatting token that already had this behavior.  Perhaps  ZZZ .  The intended behavior is that _if_ the offset is   00:00  that it outputs  Z   otherwise  it would output the offset.  We might also consider variants  where  ZZZ  has a colon  and  ZZZZ  does not. ,mj1856,closed,2,2015-05-08 20:13:20,2015-06-26 22:15:23,,Enhancement,,,0,1
11882,moment/moment,2367,moment with locales.custom.js uses last defined locale by default,For example  run  grunt transpile:fr ru  then load up moment and start using it.   Expected: like previous releases  the english locale is manually set after all locales are defined.   moment  .format  LLLL    formats in English.   Actual:  moment  .format  LLLL    doesn t format in English. ,wyantb,closed,2,2015-05-09 00:33:48,2015-07-30 02:51:29,,Bug,High Priority,,,0,1
11881,moment/moment,2368,perf: use faster form of copying dates  across the board improvement,Reference: http://jsperf.com/date copy constructor/3  Didn t expect this to make so much of a difference  but here we are.  I presume  Moment  always gets a  config  object where  _d  is a Date; certainly seems to be the case and no tests failed.  Results of  grunt test update index benchmark :       Before:      Running benchmark clone [benchmarks/clone.js]... >> clone x 3 698 440 ops/sec  0.77   85 runs sampled  Running benchmark fromDate [benchmarks/fromDate.js]... >> fromDate x 1 709 634 ops/sec  1.05   79 runs sampled  Running benchmark fromDateUtc [benchmarks/fromDateUtc.js]... >> fromDateUtc x 1 623 291 ops/sec  0.95   90 runs sampled            After:      Running benchmark clone [benchmarks/clone.js]... >> clone x 4 919 547 ops/sec  0.69   87 runs sampled  Running benchmark fromDate [benchmarks/fromDate.js]... >> fromDate x 2 232 456 ops/sec  0.54   92 runs sampled  Running benchmark fromDateUtc [benchmarks/fromDateUtc.js]... >> fromDateUtc x 2 151 327 ops/sec  1.01   78 runs sampled      ,wyantb,closed,4,2015-05-09 17:51:34,2015-07-13 00:01:44,,performance,,2.10.5,1,1
11880,moment/moment,2369,locale/ru.js,Before update  moment.locale    ru  var m = moment  2015 05 01  ; m.weekday   4 => _       _  true   _       _  ,anagorsky,closed,0,2015-05-11 00:23:26,2015-05-11 00:40:20,,,,1,1
11879,moment/moment,2370,Fix comparisons on invalid moments.,This fixes https://github.com/moment/moment/issues/2354 and matches the precedent in javascript following that invalid types are not comparable  similar to NaN . ,skabbes,closed,8,2015-05-13 01:16:46,2015-07-12 22:26:17,,,2.10.5,1,1
11878,moment/moment,2371,bower.json: remove moot  version  field,Per https://github.com/bower/bower.json spec/commit/a325da3d79baab018c572d75dc1781b12322f6cd ,cvrebert,closed,7,2015-05-13 03:25:28,2015-06-25 04:41:41,,,2.10.4,1,1
11877,moment/moment,2372,toJSON   and toISOString   does not handle weeks, moment.duration  P1W  .toJSON    returns  P7D  and I would like it to return  P1W  instead. This shold be according to the ISO spec  even if I could understand that we need to set a specific setting for this.  Is there a way to do this or will I have to add a rather ugly hack to accomplish this myself? ,martindanielson,open,10,2015-05-13 08:34:20,0000-00-00 00:00:00,,Enhancement,,,0,1
11876,moment/moment,2373,Modularize moment.js  make the core as light as possible,I remember when moment was a  lightweight  library  right now at 12kb  gziped no less  for  what it s in most cases  just very very simple date manipulation.  A simple solution to this problem would be to modularize momentjs so at least for environments like browerify  webpack and such a minimal version can be obtained.  eg.  Regular usage can stay the same       js // get everything under the sun var moment = require  moment  ;      Modular usage could look like this       js // get core  the core does nothing  no validation  no nothing // it would only define a internal storage structure and the bare minimum // methods for getting values out of it: day  month  year  etc  no  format   // functions or  fromNow  since you might not even want to use them  var moment = require  moment/core  ;  // add plugins for all the stuff you need  if you ever want ALL of them you  // just include the directory instead  node/browserify/webpack will pick up // a index.js inside it that would have all the things  moment.plugin [      // if you know this is all the parsers you need this is all you add     require  moment/plugins/parser/yyyy mm dd time        require  moment/plugins/parser/unixtime         require  moment/plugins/validator/yyyy mm dd time        // if we don t use unixtime locally  only on server we dont care for that     // when it comes to validation      require  moment/plugins/fromNow        require  moment/plugins/toUnixTime         // with a modular structure we can add 3rd party stuff really easily     require  moment phpstyle format        require  moment chained functions format    ] ;  // lock in the configuration so that calling plugin method throw and exception // this would be irreversible but you can get a unlocked version by calling copy // this will force people to get a  copy  of the configuration before doing  // anything stupid    or help them find the mistake if they add it later moment.lock  ;  // you now just include this file where you need it module.exports = moment;      Let s pretend the above is in something like  lib/moment  and represents your default boilerplate configuration for it. Obviously you may eventually encounter situations where you need more advanced functions. If we add to the default boilerplate we unfortunately add to every other context that doesn t need it. This is a big bummer if we re trying to keep client size down with things like webpack code splitting.     However    so long as the modular system is capable of being extending any time there s no problem whatsoeve. Ideally  to avoid subtle race condition bugs  we should be able to get a new  advanced  version as a separate instance:      js // load boilerplate we defined previously // we request a copy of the instance so no funny business happens var moment = require  lib/moment  .copy  ;   // we can also create a separate boilerplate if we re use this a lot moment.plugin require  expensive internationalization timezone nonsense   ; moment.lock  ; // lock the new copy just in case its passed around  // moment instances should be able to do a quick copy between instances // to ensure functionality  ie. moment createdAt  could just swap plugin pointers      Now only the module that actually uses that feature pays the cost. If you use moment in 100 places and only 1 actually needs internationalization just that one place will ever pay for it. This applies to all functions  all the core needs to do is store a plain date object and some getters. Is everything you do just pass unix time from the server? you can just have unixtime parser. Do you only ever validate dates on the server? you can skip on any and all validation  etc.   It s effectively as light as you building your own specialized helpers. And much like projects like gulp  postcss and so on the community can contribute easily to it though easily maintainable chunks.  And in this way  momentjs can  _once again_  be called  [lightweight javascript date library] https://web.archive.org/web/20111214102140/http://momentjs.com/  . ,srcspider,open,99,2015-05-13 11:38:18,0000-00-00 00:00:00,,Enhancement,,3.0,0,1
11875,moment/moment,2374,Two digit years aren t parsed well,Currently   moment  10 10 10    fails to be parsed and falls back to using  Date   which ignores the logic in  parseTwoDigitYear   which makes sense.   Using   moment  10 10 10    MM DD YY    works  but this is somewhat inflexible  since I want   10 10 2010   to also work and ignore the  parseTwoDigitYear  logic. Currently   moment  10 10 2010    MM DD YY    will turn   2010   into   20   and  run  parseTwoDigitYear   turning   20   into 1920 or 2020.  There isn t a good way to check whether a date s year is given with 2 digits or 4. Strict validation is too strict  and would require checking all different kinds of punctuation. In general  a  middle  strictness  which ignored punctuation but enforced format  would be great.  ,pnachum,closed,2,2015-05-14 21:01:27,2015-06-23 01:00:10,,,,0,1
11874,moment/moment,2375,Mess with formats,MomentJS does some dirty tricks with empty function  Moment.ISO_8601 . I wonder why not just provide ISO string constants instead? There is a _buggy_ behavior here:      js import Moment from  moment ;  // this can be used for parsing Moment  2015 01 02   Moment.ISO_8601 ; // ok   // but not formatting Moment  2015 01 02   Moment.ISO_8601 .format Moment.ISO_8601 ; // exception          .../node_modules/moment/moment.js:455         var array = format.match formattingTokens   i  length;                            ^ TypeError: undefined is not a function     ,ivan-kleshnin,closed,3,2015-05-15 12:42:16,2015-05-28 21:40:14,,,,0,1
11873,moment/moment,2376,fix transpile custom, grunt transpile:fr ru  is broken   if you attempt to use a resulting custom build  the browser will throw the error  moment is undefined.  The offending line in the build:  var moment_with_locales_custom = moment;  should be  var moment_with_locales_custom = moment__default;  This substitution is made with regex that I added. ,rjruizes,closed,5,2015-05-15 23:42:13,2015-07-13 15:29:47,,,2.10.5,1,1
11872,moment/moment,2377,Remove unreachable code,There is unreachable code in function cloneWithOffset  . ,nasitra,closed,1,2015-05-16 01:02:06,2015-06-19 06:06:01,,,2.10.4,1,1
11871,moment/moment,2378,Calendar Support,I found  Moment  very useful but it unfortunately does not support other calendars  e.g. Jalali  natively. The way people currently add their calendars by writing plugins  e.g. moment jalaali  is not good. A better solution is to add support for custom calendars so developers can write and add their own calenders easily. The main benefit of this approach is that the API and function names are the same and you can switch between calendars by a line of code:      javascript setCalendar  Jalali  ;      I can provide more details if it is not clear. ,mkhahani,closed,1,2015-05-16 06:01:35,2015-05-21 06:55:40,,,,0,1
11870,moment/moment,2379,jspm locale not working,First installed with  jspm install moment  version 2.10.3 gets installed   Moment gets imported import moment from  moment ;  Later when moment is used i.e. moment  .locale  sv  .fromNow  ;  the local is still en.  Are we doing something wrong or missing something? Or is it broken? ,emilcardell,closed,9,2015-05-19 07:43:17,2017-03-28 04:14:35,,Troubleshooting,,,0,1
11869,moment/moment,2380,update license attribute,https://docs.npmjs.com/files/package.json license http://npm1k.org/ ,pgilad,closed,0,2015-05-19 11:01:33,2015-06-03 19:28:52,,,2.10.4,1,1
11868,moment/moment,2381,.date   question,Hi   Could anyone please explain me why  moment  2013 04 22 00:00:00 07:00  .date    returns 21?  For example  moment  2013 04 22 00:00:00 02:00  .date    returns 22. I would be interested in getting the date without taking into account any timezone info in the string from which the moment object is built  i.e. always 22 in this case.  Thanks  ,adrianhara,closed,1,2015-05-19 11:50:32,2015-05-19 12:41:04,,,,0,1
11867,moment/moment,2382,1 test failed. add and subtract:add across DST  2023.1  ,    Client info      Date String   : Wed May 20 2015 11:32:26 GMT 0400  EDT  Locale String : May 20  2015 at 11:32:26 AM EDT Offset        : 300 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_10_3  AppleWebKit/600.6.3  KHTML  like Gecko  Version/8.0.6 Safari/600.6.3            add and subtract:add across DST  2023.1   Expected at least one assertion  but none were run   call expect 0  to accept zero assertions.      javascript // Expected undefined // Actual   null null === undefined     ,jonathan,closed,0,2015-05-20 15:33:26,2015-07-13 00:47:55,,Unit Test Failed,,,0,1
11866,moment/moment,2383,2 tests failed. diff:diff across DST  2087.17  diff:diff across DST  2087.19  ,    Client info      Date String   : Thu May 21 2015 19:52:05 GMT 0500  CDT  Locale String : May 21  2015 at 7:52:05 PM CDT Offset        : 360 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_10_3  AppleWebKit/600.6.3  KHTML  like Gecko  Version/8.0.6 Safari/600.6.3            diff:diff across DST  2087.17   month diff across DST  lower bound      javascript // Expected true // Actual   false false === true            diff:diff across DST  2087.19   year diff across DST  lower bound      javascript // Expected true // Actual   false false === true     ,RobertoGongora,closed,5,2015-05-22 00:52:43,2016-03-08 22:07:18,,Unit Test Failed,,,0,1
11865,moment/moment,2384,Allow to synchronize time with server  set offset ,MomentJS relies on current browser time  OS time . If it is set to different time than the server s  unexpected behavior may happen.  I have noticed it when I had used  fromNow  method of momentjs for displaying comment add time: 1. Browser time: 3:00pm  server time: 3:05pm. 2. Add comment  creation time is taken from server during database insert . 3. Date is passed back to frontend  3:05pm . 4. MomentJS displays  comment added in 5 minutes   I would expect momentJS to allow configuring  current time . It should then calculate offset between given  now  and browser time and respect it on all operations  i.e.:      js var time = getCurrentTimeFromBackendWithAjaxOrSomething  ; moment.setCurrentTime time ;      Related:   [how to sync the date with the server time  Moment.js ] http://stackoverflow.com/questions/26924843/how to sync the date with the server time moment js    [Moment.js set the base time from the server] http://stackoverflow.com/questions/19629561/moment js set the base time from the server  ,fracz,closed,1,2015-05-22 16:48:23,2015-06-19 06:30:51,,,,0,1
11864,moment/moment,2385,.add   doesn t work with parsed moment?,Consider this:   var date = moment  07/10/1986  .add 1  days     I expect date to be a moment object referencing 07/  11  /1986  but for some reason when I enter the date this way it doesn t add the day  but gives me the same moment object. ,JulianKingman,closed,3,2015-05-23 05:45:51,2015-05-26 16:28:24,,,,0,1
11863,moment/moment,2386,diff   bug,Hi   There seems to be a bug. I have the dates var a = moment [2015  6  30] ; // last day of june 2015 var b = moment [2015  7  1] ; // first day of july 2015 var totaldays = b.diff a   days  ; // 2 but should be 1 I have the link to demo.   http://plnkr.co/edit/X8E78NR9hJzWipau2i3m?p=preview ,saffabook,closed,2,2015-05-23 11:34:53,2015-05-23 17:49:55,,,,0,1
11862,moment/moment,2387,add coverage reporting using nyc and coveralls,This pull adds coverage reporting facilitated by [nyc] https://www.npmjs.com/package/nyc  and the hosted coverage service coveralls.io.   run  npm run coverage  to get a human readable coverage report.   run  npm run coverage      reporter=lcov  to get an HTML report over coverage in the /coverage folder.   run  npm run coveralls  to report coverage to the [coveralls.io] https://coveralls.io/ .     you ll need to setup your repo on coveralls.io and grap the  COVERALLS_REPO_TOKEN .     on travis ci.org  you ll need to set an environment variable with the value of  COVERALLS_REPO_TOKEN   Here s what coverage currently looks like for moment:      shell                                                                              File                             Stmts    Branches       Funcs       Lines                                                                                   ./                              100          50         100         100         Gruntfile.js                 100          50         100         100      ./build/umd/                  98.11       92.61       97.59        98.1         moment.js                  98.11       92.61       97.59        98.1      ./build/umd/locale/            93.9       71.01       95.99        93.9         af.js                      77.78       57.89          80       77.78         ar ma.js                     100        37.5         100         100         ar sa.js                   84.62          40        87.5       84.62         ar tn.js                     100        37.5         100         100         ar.js                      89.47       65.38       90.91       89.47         az.js                      76.47        61.9          80       76.47         be.js                      94.44       81.67       90.91       94.44         bg.js                      95.24       74.19         100       95.24         bn.js                      94.74       68.75        87.5       94.74         bo.js                      94.74       68.75        87.5       94.74         br.js                      96.15       72.73         100       96.15         bs.js                      89.13        74.6         100       89.13         ca.js                        100       73.33         100         100         cs.js                      86.79          90         100       86.79         cv.js                        100       58.33         100         100         cy.js                      91.67       68.42         100       91.67         da.js                        100        37.5         100         100         de at.js                     100          50         100         100         de.js                        100          50         100         100         el.js                        100          75         100         100         en au.js                     100       68.75         100         100         en ca.js                     100       68.75         100         100         en gb.js                     100       68.75         100         100         eo.js                         75       42.86          75          75         es.js                        100          60         100         100         et.js                        100       64.29         100         100         eu.js                        100        37.5         100         100         fa.js                      84.62          40        87.5       84.62         fi.js                        100       68.89         100         100         fo.js                        100        37.5         100         100         fr ca.js                     100          50         100         100         fr.js                        100          50         100         100         fy.js                        100       66.67         100         100         gl.js                        100          65         100         100         he.js                        100          75         100         100         hi.js                        100          80         100         100         hr.js                      89.13        74.6         100       89.13         hu.js                      92.86       78.87        87.5       92.86         hy am.js                   96.43       78.26          90       96.43         id.js                        100       76.92         100         100         is.js                      82.98       59.52         100       82.98         it.js                       87.5          50         100        87.5         ja.js                       87.5          50          75        87.5         jv.js                        100       76.92         100         100         ka.js                      90.91       67.86         100       90.91         km.js                        100        37.5         100         100         ko.js                        100          50         100         100         lb.js                       87.8       72.73         100        87.8         lt.js                      92.86       61.29         100       92.86         lv.js                        100          75         100         100         me.js                        100          64         100         100         mk.js                      95.24       74.19         100       95.24         ml.js                      92.86       68.75          75       92.86         mr.js                        100          80         100         100         ms my.js                     100       76.92         100         100         my.js                        100        37.5         100         100         nb.js                        100        37.5         100         100         ne.js                        100       82.35         100         100         nl.js                        100       66.67         100         100         nn.js                        100        37.5         100         100         pl.js                      96.15       78.38         100       96.15         pt br.js                     100       58.33         100         100         pt.js                        100       58.33         100         100         ro.js                        100       61.54         100         100         ru.js                      93.02       82.14       91.67       93.02         si.js                        100       57.14         100         100         sk.js                      86.79       89.89         100       86.79         sl.js                      90.16       80.39         100       90.16         sq.js                      83.33          50          75       83.33         sr cyrl.js                   100          64         100         100         sr.js                        100          64         100         100         sv.js                        100       68.75         100         100         ta.js                        100       85.29         100         100         th.js                         75          40          75          75         tl ph.js                     100        37.5         100         100         tr.js                        100       66.67         100         100         tzm latn.js                  100        37.5         100         100         tzm.js                       100        37.5         100         100         uk.js                      92.11       77.78       91.67       92.11         uz.js                        100        37.5         100         100         vi.js                        100        37.5         100         100         zh cn.js                   97.44       76.92         100       97.44         zh tw.js                    96.3       81.08         100        96.3      ./tasks/                      44.98        37.1       43.01       44.98         bump_version.js               20           0          50          20         check_sauce_creds.js       33.33           0          50       33.33         component.js               33.33         100          50       33.33         embed_locales.js           29.17           0       16.67       29.17         history.js                    20           0        6.25          20         nuget.js                     100         100         100         100         size.js                       20           0        8.33          20         transpile.js               79.05       76.67       81.58       79.05         update_index.js              100         100         100         100         zones.js                      20           0        7.69          20                                                                                All files                        91.68       76.29       90.09       91.67       ,bcoe,closed,5,2015-05-25 20:28:19,2015-07-26 05:05:04,,Troubleshooting,,2.10.5,1,1
11861,moment/moment,2388,does en locale should display time in 12 hours format ?,I m using Moment.js 2.10.3. In according to moment with locales.js :       javascript     var defaultLongDateFormat =           LTS  :  h:mm:ss A           LT   :  h:mm A           L    :  MM/DD/YYYY           LL   :  MMMM D  YYYY           LLL  :  MMMM D  YYYY LT           LLLL :  dddd  MMMM D  YYYY LT       ;      Does it mean en locale should display time in 12 hours format with LTS format ?  [a jsfiddle demonstrating the issue] http://jsfiddle.net/ezoqkgca/4/  Sorry  my English is not very good now... ,beastsergey,closed,2,2015-05-27 08:50:06,2015-05-28 21:34:55,,,,0,1
11860,moment/moment,2389,1 test failed. utc:utc and local  2337.6  ,    Client info      Date String   : Wed May 27 2015 18:34:27 GMT 0530  IST  Locale String : 5/27/2015  6:34:27 PM Offset        :  330 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_10_3  AppleWebKit/537.36  KHTML  like Gecko  Chrome/43.0.2357.81 Safari/537.36            utc:utc and local  2337.6   the hours  8  should be correct for local      javascript // Expected 9 // Actual   8 8 === 9     ,sujith3g,closed,0,2015-05-27 13:06:29,2015-07-13 00:45:04,,Unit Test Failed,,,0,1
11859,moment/moment,2390,Locale  en  is no more used as default when loading moment with locales.min.js,After version 2.9.0  the expected default locale  en  seems broken. ,Pikoulol,closed,1,2015-05-27 13:59:11,2015-05-28 21:08:56,,,,0,1
11858,moment/moment,2391,Handling Non Earth Times  e.g. Mars Time ,I m currently using moment for time handling in a project and one of our common tasks is converting times from UTC to Mars Solar Time and back again effortlessly.  At first I had thought that defining a moment timezone would handle this tidily  but it s not just a fixed offset   days are longer on mars: 24h 37m 22.663s.  The other thing is that typically  Mars missions are recorded in sols  martian solar days  from a fixed date  typically when the mission landed on Mars .  So Sol 1 would be the solar day the mission landed on Mars.  We can call this time  for any specific mission   Mars Mission Time.  Per mission  a UTC time can be provided that corresponds to the start of Sol 1.  I was trying to figure out how I could extend moment to allow UTC  > Mars Solar Time  > Mars Mission Time conversions  and the reverse as well.  Similarly  I d like to be able to use moment.format to format dates in Mars Mission Time but I m afraid it would not handle the extra 37 minutes in the day correctly  would it?   It looks like I might be able to achieve this with a custom timezone but I m not sure how that will handle the longer duration of martian days.  Any pointers you can give me for where to start implementing this would be much appreciated.  Some background information: http://en.wikipedia.org/wiki/Timekeeping_on_Mars  If this isn t the right venue for a question like this  please let me know where I should direct it. ,larkin,closed,4,2015-05-27 15:31:10,2015-05-28 20:11:07,,,,0,1
11857,moment/moment,2392,UTC to Local fails after subsequent converts...,Hi  first of all  congrats for such amazing framework  : 1:   What i m trying to do is:   I have a huge  around 90  date inputs on page   I have UTC times on Database   I want to show the local time to the user  instead of the UTC time  Problem: First UTC to local conversion  works good   I m in spain  so  2h to UTC  BUT  after that first one  the subsequent dates add  1h instead of  2h...  So this is an example of the dates   [2015 05 28_0113] https://cloud.githubusercontent.com/assets/1419525/7849598/6883a83a 04d7 11e5 9b29 61cd3716c807.png   And here is the code  alerts are commented :  [2015 05 28_0119] https://cloud.githubusercontent.com/assets/1419525/7849630/aaa195ba 04d7 11e5 93f4 7f39e5b5d3e0.png   I m sure i m doing something wrong  but I ve being looking for into all Docs but nothing like utc flushing  or forcing format again... ,dabrave,closed,1,2015-05-27 23:24:58,2015-05-28 19:43:32,,,,0,1
11856,moment/moment,2393,Fix building tasks for  moment with locales.js  and  moment with locales.custom.js , 2367   moment with locales.custom.js uses last defined locale by default     moment with locales.js  and  moment with locales.custom.js  were default to  en .  See grunt task  embedLocales :       javascript var languageReset =  moment.locale   en   ; ;      Adding it back to transpiling task seems the right thing to do.          custom locale building was broken     [screen shot 2015 05 28 at 2 38 08 pm] https://cloud.githubusercontent.com/assets/25500/7871808/34824378 0547 11e5 9279 f550314e703f.png   In current built  moment with locales.custom.js :  this line      javascript var moment_with_locales_custom = moment;      which  moment  is actually undefined  and should be replaced with the matches from the regex   and thus become      javascript var moment_with_locales_custom = moment__default;     ,dennisgl,closed,4,2015-05-28 21:51:21,2015-06-23 00:53:55,,High Priority,,2.10.4,1,1
11855,moment/moment,2394,Error running transpile raw task: Module does not export  moment ,Fresh clone of Build 2.10.3  25cc720fbaab7323a1016cd0beb6a36e349c41be   Grunt output:      C: Dev moment>grunt Running  jshint:all   jshint  task >> 305 files lint free.  Running  jscs:all   jscs  task >> 305 files without code style errors.  Running  transpile  task  Running  clean:build   clean  task >> 1 path cleaned.  Running  transpile raw  task >> build/umd/moment.js >> build/umd/locale/ .js >> build/umd/test/moment/ .js >> error transpiling [Error: Module  C:/Dev/moment/src/moment  does not export  moment   imported by  test/locale/af  ] Warning: Module  C:/Dev/moment/src/moment  does not export  moment   imported by  test/locale/af   Use   force to continue.  Aborted due to warnings.      The specific locale that triggers the error seems non deterministic and changes on each run.  System is Windows 7  node v0.12.4  fresh install of all dependencies ,flibX0r,closed,6,2015-05-29 03:56:07,2015-12-10 05:36:51,,Bug,Build/Release,,,0,1
11854,moment/moment,2395,Cannot set property  moment  of undefined,Issue  1179 seems to have reared its ugly head again today.  jQuery uses this approach which I think moment should adopt as well      javascript typeof window  ==  undefined  ? window : this     ,iWader,closed,9,2015-05-29 14:05:59,2016-07-12 20:56:57,icambron,Troubleshooting,,,0,1
11853,moment/moment,2396,composer.json type causing issues,The composer type  component  in your composer.json is causing issues with TYPO3 composer installer. Please add a correct type mentioned in https://getcomposer.org/doc/04 schema.md type ,sneps85,closed,0,2015-05-29 15:21:41,2015-06-01 05:52:41,,,,0,1
11852,moment/moment,2397,Support for time only in moment.js,Currently  it seems it is not possible to work only with time partial using moment.js. With HTML5 time and date form elements  it is possible that you get both of that separably  so it would be great if you could parse both of them with moment.js and then combine them. So something like  combine moment date   YYYY MM DD    moment time   HH:mm:ss    . Currently the second  moment  object has date parts set to current date. This is problematic because it is unclear later on when you pass  moment  object around if the object represents just time  or full datetime. ,mitar,closed,5,2015-05-31 03:53:24,2015-06-14 00:49:53,,,,0,1
11851,moment/moment,2398,1 test failed. add and subtract:add across DST  2023.1  ,    Client info      Date String   : Mon Jun 01 2015 14:10:05 GMT 0400  EDT  Locale String : June 1  2015 at 2:10:05 PM EDT Offset        : 300 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_10_3  AppleWebKit/600.6.3  KHTML  like Gecko  Version/8.0.6 Safari/600.6.3            add and subtract:add across DST  2023.1   Expected at least one assertion  but none were run   call expect 0  to accept zero assertions.      javascript // Expected undefined // Actual   null null === undefined     ,cribaudo,closed,1,2015-06-01 18:11:01,2015-06-19 06:18:01,,Unit Test Failed,,,0,1
11850,moment/moment,2399,Adding locales js forces language to zh tw,Tried the files downloaded form the server  min  non min  and same files form bower. My LLLL strings show Chinese localisation.  V: 2.10.3 ,designbyadrian,closed,4,2015-06-02 08:48:51,2015-06-05 18:27:49,,,,0,1
11849,moment/moment,2400,Update hr.js,,diomed,closed,1,2015-06-03 18:09:13,2015-08-13 07:23:01,,Language,,,1,1
11848,moment/moment,2401,Update sr.js,,diomed,closed,4,2015-06-03 18:19:52,2015-09-24 04:11:24,,Language,,,1,1
11847,moment/moment,2402,Duration Keeps Decimal as Days,I want to create a duration  and then add it to a moment. The reason is because Delphi stores dates in the format <Days from 12/30/1899>.<fraction of day> and moment doesnt know how to parse this. So my solution was going to be to create a duration and add it to the moment.  The problem is that duration keeps the days in a decimal format. Shouldnt this reduce it down all the way to the millisecond spot?          var base = moment  12/30/1899  ;     console.log base.format  dddd  MMMM Do YYYY  h:mm:ss a        var dur = moment.duration 42156.4710896412   days  ;     console.log dur.years           dur.days           dur.hours           dur.minutes           dur.seconds           dur.milliseconds        base.add dur ;     console.log base.format  dddd  MMMM Do YYYY  h:mm:ss a         if not does anyone have any alternatives to getting the hours minutes seconds and milliseconds from a decimal like that  besides doing it manually  which is also an option  just looking for an easier way  ,NickBolles,closed,2,2015-06-03 20:09:10,2015-06-18 00:50:50,,,,0,1
11846,moment/moment,2403, Invalid Format  error when trying to convert one date format to another,I want to take a data format and convert it to another format... I heard  new Date  syntax will be depreciated at some point so can t use this at some point  I see that in the logs as well  so cant do this at some point:      moment new Date  Wednesday  June 3  2015 17:25:34   .format  YYYY MM DD        I see a warning in the browser when using the implicit syntax below which im guessing calls the same  new Date  as above:      moment  Wednesday  June 3  2015 17:25:34  .format  YYYY MM DD        Im trying to supply the format so I can get passed the depreciated  new Date  code by doing something like this:      moment  Wednesday  June 3  2015 17:25:34    dddd  MMMM D  YYYY HH:mm:ss  .format  YYYY MM DD   //should output 2015 06 03      but Im getting  Invalid Format  but the initial format I set looks fine to me.  Can anyone tell me why? Thanks  Ari ,armyofda12mnkeys,closed,6,2015-06-03 21:46:22,2015-06-19 06:28:19,,,,0,1
11845,moment/moment,2404,Fix Strict Date Parsing of ISO 8601 Dates Without Times,When a valid ISO 8601 date string without a time component is parsed using  moment.ISO_8601  as the date format and strict parsing is enabled  the resulting Moment object is invalid.  Here s a JSFiddle: https://jsfiddle.net/k3snbte9/ ,philjohnson789,closed,5,2015-06-04 21:52:33,2015-07-13 00:15:11,,,2.10.5,1,1
11844,moment/moment,2405,sorry wrong place to post,:  ,TrejGun,closed,0,2015-06-05 06:42:07,2015-06-05 06:59:33,,,,0,1
11843,moment/moment,2406,C  port,This isn t really an issue  but I wanted you to know that I ve ported your library to C  at https://github.com/Eonasdan/MomentSharp  I love using this library in my javascript code and I wanted to be able to do some DateTime operations from this library in my C .  Thanks for your hard work  ,Eonasdan,closed,1,2015-06-05 15:16:20,2015-06-05 18:30:21,,,,0,1
11842,moment/moment,2407,Future and Past,Add constants for undefined future and past dates.  the undefined future date should always test as greater than any date compared to it and the undefined past date should always test less than. ,DominoDev,closed,5,2015-06-05 15:54:46,2015-06-25 05:36:08,,Enhancement,,,0,1
11841,moment/moment,2408,Improperly parsing negative durations,moment properly parses duration of type   P1D   however   P 1D  is not parsed correctly:      moment.duration  P 1D  .days   0 moment.duration   P1D  .days    1      I couldn t find the actual ISO 8601 standard  but found a Java Duration description that implies this is [allowed] https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html parse java.lang.CharSequence  :  >  P 6H3M        parses as   6 hours and  3 minutes  >   P6H3M        parses as   6 hours and  3 minutes  >   P 6H 3M      parses as   6 hours and  3 minutes  ,timuralp,closed,3,2015-06-05 22:45:33,2016-02-24 16:54:13,,Enhancement,Up-For-Grabs,,,0,1
11840,moment/moment,2409,Add a way to parse relative date,From what I know  there is no way to parse a relative date   moment  19 years ago    returns  Invalid date  and it does not exist any token that we could use as second parameter to format such a date.  Yet it would be very helpful  is it possible to consider implementing this feature  please? ,Delgan,closed,1,2015-06-06 13:45:40,2015-06-08 21:48:40,,,,0,1
11839,moment/moment,2410,Date parsing broken on old webkit,I tried this with safari 5.0.5  uses webkit 533.21.1  and date parsing does not work. It s a simple example  just:  moment  2015 06 08  .isValid  ;  returns false  even if you pass the format  moment  2015 06 08    YYYY MM DD  .isValid  ; .  Here s the fiddle: http://jsfiddle.net/yuaw2ypt/8/ ,iwiznia,closed,7,2015-06-08 14:33:00,2015-12-10 07:07:14,,Browser Specific,Bug,,,0,1
11838,moment/moment,2411,1974 timezone issue,Local tz    moment  ._d.getTimezoneOffset   :  nbsp; nbsp; nbsp; nbsp;240   4 hours  EDT   In PostgreSQL  date  column  as viewed in pgadmin :  nbsp; nbsp; nbsp; nbsp;1974 01 23  Hibernate populates Entity  column is java.util.Date property type  which sets a time of midnight in local tz.  Entity is returned as JSON  property shows as timestamp:  nbsp; nbsp; nbsp; nbsp;128145600000  unixtimestamp.com for 128145600:  nbsp; nbsp; nbsp; nbsp;01/23/1974 @ 4:00am  UTC   Appears Java has done it s job correctly: daylight saving time started early in 1974  http://www.timeanddate.com/time/dst/1974.html   so  4 is correct and would make it midnight EDT.  Now  let s see what moment does with this.   moment.utc 128145600000 ._d.getTimezoneOffset   :  nbsp; nbsp; nbsp; nbsp;300  This offset is incorrect  300  5 hours  implies no daylight saving time  which is wrong. This extra hour causes the day to shift to the 22nd.   moment.utc 128145600000 .local  .format  MM/DD/YYYY HH:mm:ss   :  nbsp; nbsp; nbsp; nbsp; 01/22/1974 23:00:00   Further Info: http://www.timeanddate.com/worldclock/converted.html?iso=19740123T04 p1=0 p2=77:  Midnight between Tuesday  January 22  1974 and Wednesday  January 23  1974   not 11pm the 22nd  as moment shows . ,dailytabs,closed,2,2015-06-08 21:06:31,2015-06-08 21:36:23,,,,0,1
11837,moment/moment,2412,Remove moot  version  property from bower.json,Per bower/bower.json spec@a325da3 ,kkirsche,closed,1,2015-06-09 02:02:30,2015-06-11 23:43:25,,,,1,1
11836,moment/moment,2413,week calculation differs other way around,    moment  .year 2015 .week 1 .endOf  week   Moment  _isAMomentObject: true  _isUTC: false  _locale: Locale  _d: Sun Jan 11 2015 23:59:59 GMT 0100  CET   moment  .year 2015 .week 1 .startOf  week   Moment  _isAMomentObject: true  _isUTC: false  _locale: Locale  _d: Mon Jan 05 2015 00:00:00 GMT 0100  CET   moment.unix 1420830600  Moment  _isAMomentObject: true  _i: 1420830600000  _isUTC: false  _locale: Locale  _d: Fri Jan 09 2015 20:10:00 GMT 0100  CET   moment.unix 1420830600 .week   2     ,Morriz,closed,10,2015-06-10 09:13:47,2016-04-01 01:04:13,,Troubleshooting,,,0,1
11835,moment/moment,2414,Locales fr   fr ca: set an abbreviation for ordinal numbers >1,I went for the simpler  deuxi me  troisi me  form instead of  second  troisi me . All numbers after 1 share the same abbreviation.  My first idea was to go for   me   but looking for a source to back my PR I found that the  correct  way is  e   at least according to printing rules: https://fr.wiktionary.org/wiki/2 C3 A8me  The French Academy doesn t seem to have any article concerning the abbreviation  only the  second / deuxi me  usage: http://www.xn  acadmie franaise npb1a.fr/la langue francaise/questions de langue 29_strong em deuxime second em strong  Ping @jfroffice  ,maximevaly,closed,4,2015-06-11 09:25:04,2015-07-13 00:22:48,,Language,,2.10.5,1,1
11834,moment/moment,2415,Make today/tomorrow/yesterday/last usable standalone,moment with locales includes the translations of today/tomorrow/yesterday/last but only in fixed formats  Please make it possible to use the translations by themselves like for day/month ,synotna,open,16,2015-06-12 08:58:10,0000-00-00 00:00:00,,Enhancement,Up-For-Grabs,,,0,1
11833,moment/moment,2416,require moment without locales,I am using moment in a webpack build.  It looks like  require  moment    is the equivalent of using  moment with locales.min.js  from CDN  judging mainly by the size increase in my bundle .  Is there a way to require moment with only the default english locale?  i.e. the equivalen of  moment.min.js  from CDN .  I guess my question is related to  2373 ,naartjie,closed,16,2015-06-12 11:49:12,2015-06-29 14:56:16,,,,0,1
11832,moment/moment,2417,Converting to unix timestamps  then to calendar,This seems like pretty inconsistent behavior.      > string =  Sat  26 Sep 2015 20:00:00  0700   Sat  26 Sep 2015 20:00:00  0700  > moment string .calendar    09/26/2015  > unix = moment string .unix   1443322800 > moment unix .calendar    01/17/1970  > moment unix 1000 .calendar    09/26/2015      ,ccorcos,closed,7,2015-06-13 22:52:16,2015-06-13 23:42:56,,,,0,1
11831,moment/moment,2418,Parsing issue,From: http://stackoverflow.com/q/30832920/634824      javascript var m = moment  06/14/2015 123PM    MM/DD/YYYY hmmA  ; m.hour     // 12 m.minute   // 3      Even though one digit is specified for hours  and two are specified for minutes  the number is read left to right  taking two digits for the hour and leaving the remaining digit for the minute.  I would expect hour  13   1 pm  and minute  23 . ,mj1856,closed,2,2015-06-14 23:57:34,2015-11-09 02:51:15,,Bug,Forgiving parsing,,,0,1
11830,moment/moment,2419,Ensure all longDateFormats are fully expanded,fixes  2163  Not sure if the [test] https://github.com/jisaacks/moment/commit/73858808bdccc66f977201106798fb12e2eb6f33 diff a7ade0358f2dce9fbec30b1a36e39523R328  is necessary  having to manually list all the locales could become hard to maintain. Would love to have that list generated. However  the test sure helped me feel confident I did not miss any. ,jisaacks,closed,1,2015-06-15 15:36:46,2015-06-19 05:58:28,,,2.10.4,1,1
11829,moment/moment,2420,nominative month translation added to lt.js language,,ignasne,closed,2,2015-06-16 14:26:25,2015-07-26 04:25:56,,Language,,2.10.5,1,1
11828,moment/moment,2421,fix bengali translation of morning,Bengali translation of morning should be          sokal  not       shokal . This PR fixes that. ,aniruddha-adhikary,closed,3,2015-06-17 03:36:53,2015-07-13 00:27:57,,Language,,2.10.5,1,1
11827,moment/moment,2422,German words for today/yesterday/tomorrow should not be capitalized,Grammar ref: http://www.duden.de/sprachwissen/rechtschreibregeln/Gro C3 9F  20und 20Kleinschreibung  The original authors of these   de  and  de at   translation are: @lluchs @Oire @MadMG  ,mik01aj,closed,6,2015-06-17 09:33:56,2015-11-09 02:58:24,,Language,,2.11.0,1,1
11826,moment/moment,2423,dd  ddd  and dddd strict parsing is not working appropriately, date = moment  a    dddd   true .isValid    will return true  along with any gibberish input ,ccorcos,closed,3,2015-06-17 10:20:07,2015-07-08 10:10:20,,Bug,,,0,1
11825,moment/moment,2424,Allow custom formats to be passed to calendar function.,This is useful if you want to override the locale specified defaults on a case by case basis  i.e.  not by changing the global config   for example if you don t want to include the time:      moment  .calendar null      sameDay:  [Today]     nextDay:  [Tomorrow]     nextWeek:  dddd     lastDay:  [Yesterday]     lastWeek:  [Last] dddd          Note that if you don t override a format  the default from the locale is still used   i.e.   sameElse  isn t specified above. ,joefreeman,closed,1,2015-06-17 11:23:32,2015-06-23 00:51:18,,Enhancement,,2.10.4,1,1
11824,moment/moment,2425,Strict Date Parsing of ISO 8601 Dates Without Times Doesn t Work,When a valid ISO 8601 date string without a time component is parsed using  moment.ISO_8601  as the date format and strict parsing is enabled  the resulting Moment object is invalid. For example   moment  2007 07 02   moment.ISO_8601  true ;  does not return a valid object.  Here s a JSFiddle that demonstrates the problem in Moment.js v2.10.3: https://jsfiddle.net/k3snbte9/ Here s the pull request with my fix: https://github.com/moment/moment/pull/2404 ,philjohnson789,closed,4,2015-06-18 15:50:46,2015-07-05 15:50:33,,Bug,High Priority,,,0,1
11823,moment/moment,2426,year  week  date  > month?,Hi.  I would like to get the month from following values: year  week  date. For example: I have year:2015  week: 27  date:29 so the month should be 6 but I always get 7 by following code  moment  .set   year :  scope.year   week :  scope.week   date : date  .month    ,kinhbang89,closed,6,2015-06-18 23:27:11,2015-06-20 22:46:39,,,,0,1
11822,moment/moment,2427,isSame  isBefore   isAfter behavior with different offsets,Example: var time1 = moment  .utcOffset 12 ;  var time2 = moment  ;  time1.isSame time2   day    // TRUE  console.log time1.format  MM DD YYYY   ;   06 20 2015 console.log time2.format  MM DD YYYY   ;   06 19 2015 ,ZloyDyadka,open,11,2015-06-19 17:35:58,0000-00-00 00:00:00,,Enhancement,,,0,1
11821,moment/moment,2428,Error parsing short month names ending with a .,The short month names for French are ending in a with a  .   yet the strict parser does not seem to accept it:          moment  11 f vr. 2014    D MMM YYYY    fr   true .isValid   == false     ,SamMousa,closed,2,2015-06-19 21:36:01,2015-06-20 08:18:13,,,,0,1
11820,moment/moment,2429,Improved Finnish translations,Modified the translation originally made by @bleadof to be more similar to the other translations. ,crisu83,closed,10,2015-06-20 11:09:07,2015-11-09 07:58:26,,Language,Needs tests,,,1,1
11819,moment/moment,2430,Is it a way to .add   or .subtract   float values?,    javascript moment  .add 1   months   // >> Mon Jul 20 2015 13:36:12 GMT 0200 moment  .add 1.9   months   // >> Mon Jul 20 2015 13:36:12 GMT 0200 // Excpected: Mon Aug 17 2015 09:34:37 GMT 0200      For now  I have to do:      javascript var duration = moment.duration 1.9   months  ;  var ms = duration.asMilliseconds  ; var date = moment  .add ms   ms  ;      Why can not these methods add or substract float values? ,Delgan,closed,2,2015-06-20 11:57:07,2015-06-20 22:36:00,,,,0,1
11818,moment/moment,2431,Klingon locale,I recently stumbled upon this most excellent resource:     [A Quick Reference to Time Expressions in Klingon] http://klingonska.org/ref/time.html   There would appear to be enough detail in here to create a Klingon locale for moment.js.  IMHO  this would be a fun addition to the library   I ve not got the time to do it myself  but perhaps someone would like to pick it up?  Related:   [The Klingon Language Institute] http://www.kli.org/    [Bing Translator] https://www.bing.com/translator/   has two Klingon settings  ,mj1856,closed,7,2015-06-22 01:34:22,2016-01-04 23:53:27,,Language,Up-For-Grabs,,,0,1
11817,moment/moment,2432,using string and a number in utcOffset do not have same effect.,Hi There  I used the utcOffset with number and a string and they both do not returns the same dates  you can also check the fiddle which i have linked. http://jsfiddle.net/dpadmrr5/  For example if i use  05:00  and 5 in utcOffset the both shows the different times. Here is my code;  var testDate =  2015 06 07T04:00:00 ;  var date_1 = moment testDate .utcOffset  05:00  .format  HH:mm:ss  ; var date_2 = moment testDate .utcOffset 5 .format  HH:mm:ss  ;  alert  using offset as 05:00 the date is   date_1 ; alert  using offset as 5 the date is   date_2 ; ,ahmedali5530,closed,3,2015-06-22 06:50:21,2015-06-22 18:30:47,,Documentation,,,0,1
11816,moment/moment,2433,Get months and monthsShort arrays for locale without changing the global locale,Hi   I am creating a calendar with i18n support using moment.js and it works nice for main languages but Spanish. In every locale file  monthsShort  is defined as an array but in Spanish it is a function  and I can t access to the list of short months names.  It seems to the single language to have that function  that only serves to add a point at the end of the month   can t that be done by the user of moment.js?    Cheers  Javi ,arqex,closed,10,2015-06-22 15:09:22,2017-12-22 04:35:50,,Enhancement,,,0,1
11815,moment/moment,2434,fix hu :Improve long date time formats for hungarian.,See datetimes at: http://www 01.ibm.com/support/knowledgecenter/SSS28S_8.1.0/XFDL/i_xfdl_r_formats_hu_HU.dita ,ghost,closed,11,2015-06-22 17:32:21,2015-07-13 00:31:56,,Language,,2.10.5,1,1
11814,moment/moment,2435,1 test failed. utc:utc and local  2337.6  ,    Client info      Date String   : Mon Jun 22 2015 17:52:52 GMT 0430  Venezuela Standard Time  Locale String : 22/6/2015 17:52:52 Offset        : 270 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64; rv:38.0  Gecko/20100101 Firefox/38.0            utc:utc and local  2337.6   the hours  22  should be correct for local      javascript // Expected 23 // Actual   22 22 === 23     ,oscarr-reyes,closed,2,2015-06-22 22:23:46,2015-07-09 18:15:34,,Unit Test Failed,,,0,1
11813,moment/moment,2436,Formatting with more than three S tokens repeats,We don t want to support finer precision than milliseconds  but we do need to contend with working with strings containing such precision  even if we truncate.  Parsing is already supported  with any number of decimal places. But formatting has some weirdness is that it repeats the value in the formatting.      javascript moment  2014 07 30 02:59:32.123456789   YYYY MM DD HH:mm:ss.SSSSSSSSS  .format  YYYY MM DD HH:mm:ss.SSSSSSSSS   // returns:  2014 07 30 02:59:32.1231231  // expected:  2014 07 30 02:59:32.1230000       See also  2022  ,mj1856,closed,4,2015-06-23 01:34:05,2015-07-05 15:31:15,,Bug,todo,,,0,1
11812,moment/moment,2437,how can i set number to chinese character,Hi  is it possible set number to chinese character 2015/06/25 =     /  /   0 1 2 3 4 5 6 7 8 9 10                       Thanks ,david43,open,10,2015-06-25 08:38:03,0000-00-00 00:00:00,Menelion,Enhancement,Language,Up-For-Grabs,,,0,1
11811,moment/moment,2438,Fix inconsistent moment.min and moment.max results,Fixes  2362  includes updated tests for moment.min and moment.max.  Also includes tests to show that moment.isBefore and moment.isAfter correctly handle invalid moments. ,cwohlman,closed,12,2015-06-26 23:48:58,2015-07-13 00:33:38,,,2.10.5,1,1
11810,moment/moment,2439,Fix imports in locale files,Moment is exported as a default export from moment.js but locale files import it as a named export. This results in  Module does not export  moment   errors  issue  2394 .  This pull request fixes named imports in locale files to use default import. ,raleksandar,closed,4,2015-06-27 15:05:43,2015-07-13 00:36:35,,,2.10.5,1,1
11809,moment/moment,2440,Fail on leap year,This should produce true  but it produces false.  It s not accounting for the leap year.  console.log moment  Feb 29 1894    MMM D YYYY   true .isValid   ; ,jeffg2k,closed,2,2015-06-29 18:09:18,2015-06-29 18:24:27,,,,0,1
11808,moment/moment,2441,Expose function to return parsed format,Consider:      javascript var m = moment  29 06 1995   [ MM DD YYYY    DD MM    DD MM YYYY ] ;      How does one determine _which_ format was used?  Currently  the only way is by checking the  _f  private field.   It would be useful if there was a function that returned this as part of the public API.  Ref: http://stackoverflow.com/q/31101657/634824 ,mj1856,closed,2,2015-06-29 19:25:00,2016-06-11 11:49:36,,Enhancement,New Feature,,,0,1
11807,moment/moment,2442,Cut Russian month short names to 3 characters,Even 4 character month names should be cut to 3 symbols ,balek,closed,10,2015-06-30 11:57:39,2015-07-04 06:28:27,,Language,,2.10.5,1,1
11806,moment/moment,2443,Feature request: public API for getting _i,I have a use case where module A  at the data layer  parses user inputted strings into  moment  objects and module B  at the UI layer  needs to emit error messages if the string can t be parsed.      js feztober3 = moment  3 Feztober  1992  ; feztober3.isValid  ; // false  good feztober3.format  YYYY MM DD  ; //  Invalid Date   good      But I can t get   3 Feztober  1992   back out of  feztober3  without using the private  ._i . I d love something like  moment.source    so I could do      js date moment      if  moment.isValid          return  <time datetime=   moment.format  X    >  moment.format  YYYY MM DD   </time> ;     else       return  <span class= invalid date >Invalid Date:   moment.source   </span> ;           ,jamesarosen,closed,3,2015-07-01 18:31:17,2016-06-10 15:36:48,,New Feature,,,0,1
11805,moment/moment,2444,Moment 2.10 locale defaults to zh tw,Something changed between 2.9 and 2.10 and now the default locale is  zh tw  instead of the browser s locale.  http://jsfiddle.net/Eonasdan/hfwhs7vx/1/ ,Eonasdan,closed,1,2015-07-01 20:12:51,2015-07-01 22:56:31,,,,0,1
11804,moment/moment,2445,moment year ,Why I get different values on different timezones ?      moment  2015    Thu Jan 01 2015 08:00:00 GMT 0800  CST  Wed Dec 31 2014 19:00:00 GMT 0500  CST      ,fxding,closed,1,2015-07-04 04:24:33,2015-07-09 22:24:11,,,,0,1
11803,moment/moment,2446,[Correction] Nepali Language  meridiem and days of week.,Fixed  1. Grammatically corrected the words 2. Corrected the mini form of week days 2. Corrected the meridiem time 3. Corrected day of week and day of year ,njsubedi,closed,6,2015-07-04 04:50:10,2015-11-09 04:04:02,,Language,,2.11.0,1,1
11802,moment/moment,2447,isSame returns false when using same ISO src string,Hi all:      js d.sometime === t1.format   //=> true t1.format   //=>  2015 07 04T15:16:23 07:00  t1.isSame d.sometime  //=> false      For an actual test bed  you can ref: https://github.com/cdaringe/ampersand state mixin datatype iso date/blob/master/test/test.js L42.  I would expect  .isSame ...   to return  true  in this example.  If I am mistaken  please let me know   Thanks  ,cdaringe,closed,2,2015-07-04 23:35:25,2015-07-05 05:03:43,,,,0,1
11801,moment/moment,2448,Support up to milliseconds tokens up to 9 digits  fixes  2436,Add support for parsing and formatting up to 9 digit milliseconds  fractional seconds . Only milliseconds are stored  so extra digits read are discarded  and extra digits printed are zeros. ,ichernev,closed,2,2015-07-05 15:30:38,2015-07-26 05:01:23,,,2.10.5,1,1
11800,moment/moment,2449,Fix ISO 8601 support  date only   fixes  2425,This just fixes the bug at hand. Quickly skimming through the ISO 8601 section on wikipedia reveals a ton of issues  which need to be addressed with a bigger code reorganization. ,ichernev,closed,1,2015-07-05 15:50:03,2015-07-13 00:15:29,,,,1,1
11799,moment/moment,2450,ISO 8601 support,You would think that moment supports ISO 8601 ... well only the pieces that we want to :    [x] support basic formats for date and time and date time  no dashes    [x] support 2 digit timezone   [ ] datetime separator can be  T   or      space    but not in strict mode  or nothing   [x] fractional seconds can be split by  .  or       [ ] both  T  and  Z  are case insensitive.  t  and  z  are valid. ,ichernev,closed,9,2015-07-05 15:59:16,2015-12-10 05:37:54,,Bug,,,0,1
11798,moment/moment,2451,fix of spelling error,Even though names of months are  sije anj   velja a  etc. that is NOT the right way to write them as a date    Po istom ovom principu pi u se i ostali mjeseci  same goes for other months  : 14. velja e 3. o ujka 17. travnja 21. svibnja 26. lipnja 19. srpnja 1. kolovoza 9. rujna 10. listopada 22. studenog a  15. prosinca  ,diomed,closed,0,2015-07-06 13:05:01,2015-08-13 07:22:01,,Language,,,1,1
11797,moment/moment,2452,String parse format with preceding 0s for day and month,It seems there s no way to tell moment.js that the expected _day_ and _month_ has to have preceding 0s. For example:  > 07 09 12:12  In [the docs] http://momentjs.com/docs/ /parsing/string format/  it seems D and DD will be both parse to  1..31  and the same with M and MM.  [Reproduction of the issue] http://jsfiddle.net/wn0m8w6j/1/ .       javascript var momentDate = moment  7 9 12:40    DD MM HH:mm  ; alert  isValid:     momentDate.isValid   ;  //output TRUE      I would expect it to return  false . As I explicitly indicated I expect two numbers for the day and month.  ,alvarotrigo,closed,1,2015-07-07 11:18:08,2015-07-07 11:25:53,,,,0,1
11796,moment/moment,2453,Error   : Object is not a function,I get the following exception in this function:      javascript function deprecate msg  fn            var firstTime = true              msgWithStack = msg     n     new Error   .stack;          return extend function                  if  firstTime                    warn msgWithStack ;                 firstTime = false;                           return fn.apply this  arguments ;            fn ;            When it hits the new Error   call  I get this exception : object is not a function. ,shekky,closed,1,2015-07-07 22:22:24,2015-07-07 22:33:28,,,,0,1
11795,moment/moment,2454,Why not support  yyyy MM dd ,Why not support  yyyy MM dd ?? ,CN-Sean,closed,1,2015-07-08 05:41:41,2015-07-08 22:59:07,,,,0,1
11794,moment/moment,2455,Northern Sami,,Karamell,closed,4,2015-07-08 05:46:17,2015-11-09 04:06:50,,Language,,2.11.0,1,1
11793,moment/moment,2456,Mark moment as invalid if bad string weekday repr is parsed  fixes  2423,Well  we were just not checking if the weekday was invalid.  I also found other issues related to the week year  week  week day parsing    we don t do any overflow checks there  I ll submit it as another issue. ,ichernev,closed,3,2015-07-08 10:09:49,2015-07-13 00:40:07,,,2.10.5,1,1
11792,moment/moment,2457,include week calendar overflow check,Currently  only year month day overflow checks are performed  but not week calendar overflow checks. So any combination of week year  week  weekday would produce a moment  even if values are too high/low.  Add checks in the  src/lib/units/day of year.js   dayOfYearFromWeeks  function  maybe :  ,ichernev,closed,2,2015-07-08 10:13:30,2015-11-09 02:54:28,,Bug,,,0,1
11791,moment/moment,2458,Typos at months,source of currect names for months is http://www.localeplanet.com/icu/uz/ ,shabanovd,closed,12,2015-07-08 10:38:59,2015-11-09 04:09:05,,Language,,2.11.0,1,1
11790,moment/moment,2459,Fix function check to workaround old browsers  fixes  2325,Add a class check  as proposed here https://github.com/moment/moment/issues/2325 issuecomment 94516827 ,ichernev,closed,1,2015-07-08 11:22:32,2015-07-13 00:41:49,,,2.10.5,1,1
11789,moment/moment,2460,Support grunt test   only=moment/duration locale/ru,When too much tests are broken  testing just a single file makes things easier to debug. ,ichernev,closed,1,2015-07-08 13:27:23,2015-07-13 00:42:49,,,2.10.5,1,1
11788,moment/moment,2461,Improved duration bubbling  fixes  2166,It also fixes broken way days were bubbling to months before  including  but not limited to  364 days being 1 year and 4 days  because we round 30 days to a month  and extract 12 months from 364 with 4 extra ... LOL .  I had to change the  fundamental  30 days == 1 month  now its 31 days  because of the anchoring .  @icambron @mj1856 what do you think? ,ichernev,closed,6,2015-07-08 13:29:45,2015-07-26 04:52:07,,,2.10.5,1,1
11787,moment/moment,2462,valueOf should return NaN for any invalid moment,this fixes an issue where isSame would return true for two invalid moments  which is inconsistent with NaN === NaN and also inconsistent with other cases where isSame would return false for two invalid moments.  some invalid moments are backed by a valid date   Fixes  2354 ,cwohlman,closed,1,2015-07-08 14:00:32,2015-07-13 00:44:00,,,2.10.5,1,1
11786,moment/moment,2463,1 test failed. utc:utc and local  2337.6  ,    Client info      Date String   : Thu Jul 09 2015 00:46:32 GMT 0530  IST  Locale String : 9 July 2015 00:46:32 IST Offset        :  330 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_10_3  AppleWebKit/600.6.3  KHTML  like Gecko  Version/8.0.6 Safari/600.6.3            utc:utc and local  2337.6   the hours  8  should be correct for local      javascript // Expected 9 // Actual   8 8 === 9     ,dreamweaver1231,closed,1,2015-07-08 19:16:56,2015-07-09 17:56:25,,Unit Test Failed,,,0,1
11785,moment/moment,2464,Updated nb.js to reflect the official versions,Updated to reflect the approved ISO standard  and abbreviations according to official rules ,sigurdga,closed,6,2015-07-08 21:54:15,2015-11-09 04:15:38,,Language,,2.11.0,1,1
11784,moment/moment,2465,Only call setFullYear when necessary,I noticed a comment and code indicating that  Date  won t take years before 1970  which is not true  it s just that years 0 99 are remapped to 1900 1999.   Updating accordingly. ,mj1856,closed,0,2015-07-08 23:21:57,2015-08-12 20:23:44,,,2.10.6,1,1
11783,moment/moment,2466,Circular dependency when using i18n via RequireJS?,I m having a problem that is mentioned in the comments of http://stackoverflow.com/a/17242839/341983: how do you load a  translated  version of moment.js via RequireJS  correctly ?      require.config       paths      :            moment                 :  ../bower_components/moment/moment            momentDE               :  vendor/moment/locale/de             shim       :            moment : [ momentDE ]         ;  define function  require        var moment = require  moment  ;   ;      I ended up with a circular dependency when I set the localization as a dependency.  I guess the  moment  requirement within  de.js  causes this.   My current workaround:      require.config       paths      :            moment                 :  ../bower_components/moment/moment            momentDE               :  vendor/moment/locale/de          ;  define function  require        var moment = require  momentDE  ;   ;      I made a change within the locale file   vendor/moment/locale/de.js   to make this construct work. Instead of  return de  I use  return moment  to loop the moment object/library trough.  Is there a better way? ,riddla,open,0,2015-07-09 12:21:33,0000-00-00 00:00:00,,Loading,Troubleshooting,,,0,1
11782,moment/moment,2467,Fix test for fractional hour offsets  fixes  2389,When this test was switched from  .zone    to  .utcOffset     the sign of the value changed  which broke the test for time zones that use fractional hour offsets  such as UTC 05:30.  We now need to round down instead of up.  Fixes  2389.  ,mj1856,closed,3,2015-07-09 18:17:28,2015-07-13 00:45:05,,,2.10.5,1,1
11781,moment/moment,2468,locale specific longDateFormat  without the year ,Currently  I see there is a way to access the longDateFormat for a particular locale  but no way to get that same format without the year  e.g. there are cases when I want to show the full date  as YYYY/MM/DD or DD/MM//YYYY  depending on the locale   which I can do with the longDateFormat  but there are times where this is too verbose  ie  YYYY is the current year   and I d prefer MM/DD or DD/MM.  As [suggested on StackOverflow] http://stackoverflow.com/q/27360102   one could perform some  surgery  to produce the desired result  but it would be nice for there to be an officially supported way of the longDateFormatWithoutTheYear. ,saifelse,open,2,2015-07-10 02:06:42,0000-00-00 00:00:00,,Enhancement,flexible-presets,,,0,1
11780,moment/moment,2469,Parse value without fallback,Passing an arbitrary value to  moment value   produces a deprecation warning as per  1407.  It would be really nice if there was some way to use this parsing but without falling back to the Date constructor. The only way I have found so far is fairly clumsy:      if  moment.isDate value         return moment value ;   else       return moment value  moment.ISO_8601 ;        And even then this still doesn t parse ASP.net  /Date 1198908717056 /  strings.  The simplest option would be to allow the strict option in two argument form:  moment value  true  .  Thanks. ,SystemParadox,open,9,2015-07-10 10:45:39,0000-00-00 00:00:00,,Enhancement,,,0,1
11779,moment/moment,2470,help with date pattern validation,As far as [I cannot rely explicitly on  new Date  validation] http://stackoverflow.com/q/30964943/1057730   I decided to validate input dates with date patterns. But it still not work for me.    D DD  is for Day of month    MMM MMMM  is for Month name in locale set by moment.locale      YYYY  is for 4 digit year      js var pattern =  DD MMMM YYYY ; moment new Date  asd qw 101    pattern .isValid  ; // false and it is okay moment new Date  21 June 2015    pattern .isValid  ; // false and it is actually   why?       I helplessly lurked documentation and its not worked for me. Can anybody help me and explain why second check return false  while passed String is valid Date string? ,iamstarkov,closed,3,2015-07-11 01:19:26,2015-07-11 11:01:52,,,,0,1
11778,moment/moment,2471,Update sr cyrl.js,,milanpavke,closed,3,2015-07-11 10:02:48,2015-11-09 08:20:30,,Language,Needs tests,,,1,1
11777,moment/moment,2472,1 test failed. add and subtract:add across DST  2023.1  ,    Client info      Date String   : Sat Jul 11 2015 18:02:47 GMT 0400  EDT  Locale String : July 11  2015 at 6:02:47 PM EDT Offset        : 300 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_10_4  AppleWebKit/600.7.12  KHTML  like Gecko  Version/8.0.7 Safari/600.7.12            add and subtract:add across DST  2023.1   Expected at least one assertion  but none were run   call expect 0  to accept zero assertions.      javascript // Expected undefined // Actual   null null === undefined     ,halukugurlu,closed,1,2015-07-11 22:02:59,2015-07-11 22:04:40,,,,0,1
11776,moment/moment,2473,Expect 0 assertions to fix  2382,Fixes QUnit complaining about exiting test early. ,mj1856,closed,5,2015-07-12 05:42:23,2015-07-13 00:47:56,,,2.10.5,1,1
11775,moment/moment,2474,7 tests failed. diff:diff across DST  2087.17  diff:diff across DST  2087.19  start and end of units:start of quarter  2317.7  start and end of units:end of quarter  2318.4  start and end of units:end of quarter  2318.5  start and end of units:end of quarter  2318.6  start and end of units:end of quarter  2318.7  ,    Client info      Date String   : Sun Jul 12 2015 09:49:16 GMT 0300  Jordan Daylight Time  Locale String : 7/12/2015  9:49:16 AM Offset        :  120 User Agent    : Mozilla/5.0  Windows NT 6.3; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/43.0.2357.132 Safari/537.36            diff:diff across DST  2087.17   month diff across DST  lower bound      javascript // Expected true // Actual   false false === true            diff:diff across DST  2087.19   year diff across DST  lower bound      javascript // Expected true // Actual   false false === true            start and end of units:start of quarter  2317.7   strip out the hours      javascript // Expected 0 // Actual   1 1 === 0            start and end of units:end of quarter  2318.4   keep the quarter      javascript // Expected 2 // Actual   3 3 === 2            start and end of units:end of quarter  2318.5   set the month      javascript // Expected 5 // Actual   6 6 === 5            start and end of units:end of quarter  2318.6   set the day      javascript // Expected 30 // Actual   1 1 === 30            start and end of units:end of quarter  2318.7   set the hours      javascript // Expected 23 // Actual   0 0 === 23     ,mj1856,closed,1,2015-07-12 06:51:40,2016-03-08 22:08:12,,Unit Test Failed,,,0,1
11774,moment/moment,2475,8 tests failed. diff:diff across DST  2087.17  diff:diff across DST  2087.19  diff:diff between utc and local  2089.2  diff:diff between utc and local  2089.4  diff:month diffs  2092.2  diff:month diffs  2092.8  diff:year diffs  2094.8  quarter:quarter diff  2309.1  ,    Client info      Date String   : Wed Oct 29 2014 10:40:03 GMT 0300  Russia TZ 2 Standard Time  Locale String : 10/29/2014  10:40:03 AM Offset        :  180 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/43.0.2357.132 Safari/537.36            diff:diff across DST  2087.17   month diff across DST  lower bound      javascript // Expected true // Actual   false false === true            diff:diff across DST  2087.19   year diff across DST  lower bound      javascript // Expected true // Actual   false false === true            diff:diff between utc and local  2089.2   month diff      javascript // Expected 2 // Actual   1 1 === 2            diff:diff between utc and local  2089.4   week diff      javascript // Expected 3 // Actual   2 2 === 3            diff:month diffs  2092.2     0.016150740242261104 ===  0.016129032258064516  Jan 1 to Jan 1 noon should be 0.5 / 31 months      javascript // Expected true // Actual   false false === true            diff:month diffs  2092.8     0.9676985195154778 ===  0.967741935483871  Jan 1 to Jan 31 should be 30 / 31 months      javascript // Expected true // Actual   false false === true            diff:year diffs  2094.8     1.0013458950201886 ===  1.0013440860215055  Jan 1 2012 to Jan 1 2013 noon should be 1  0.5 / 31  / 12 years      javascript // Expected true // Actual   false false === true            quarter:quarter diff  2309.1   diff  1 quarter      javascript // Expected  1 // Actual   0 0 ===  1     ,mj1856,closed,2,2015-07-12 07:43:37,2016-03-08 22:08:06,,Unit Test Failed,,,0,1
11773,moment/moment,2476,Fix isDSTShifted  fixes  2141,Maybe its a bit of a hack  but I didn t want to store the input array   _a   inside the moment object  just for that function. So I recreate it  as if the moment is created right now  then I do the checks and cache the result.  @icambron what do you think? ,ichernev,closed,2,2015-07-12 23:11:12,2015-07-26 04:50:20,,,2.10.5,1,1
11772,moment/moment,2477,Add ms locale  copy ms my ,The  ms my  key for the Malay locale is wrong  but we can not just remove the old one  backwards compatibility   so I ll just add the new locale  and we can remove the old one in  3.0 .  This is a redo of  2347. ,ichernev,closed,1,2015-07-12 23:54:58,2015-07-12 23:59:10,,,2.10.5,1,1
11771,moment/moment,2478,Add current week for zh tw,The day after tomorrow was always determined as next week. So we should subtract startOfWeek time from current time  and check it is larger then a week. ,davidyen1124,closed,2,2015-07-13 02:41:58,2015-08-13 03:50:31,,Language,,,1,1
11770,moment/moment,2479,deprecate function slow down Firefox 10,The call to  new Error   .stack  in the  deprecate  function slow down Firefox 10  even if you don t use any deprecated function . Moving  new Error   .stack  where it is used is a possible fix:       javascript function deprecate msg  fn            var firstTime = true;          return extend function                  if  firstTime                    warn msg     n     new Error   .stack ;                 firstTime = false;                           return fn.apply this  arguments ;            fn ;            Momentjs version is 2.10.3. ,Xaar37,closed,4,2015-07-13 10:32:01,2015-07-22 16:28:31,,performance,,,0,1
11769,moment/moment,2480,2 tests failed. diff:diff across DST  2087.17  diff:diff across DST  2087.19  ,    Client info      Date String   : Mon Jul 13 2015 18:50:05 GMT 0300  Sri Lanka Standard Time  Locale String : 7/13/2015  6:50:05 PM Offset        :  120 User Agent    : Mozilla/5.0  Windows NT 6.1; rv:39.0  Gecko/20100101 Firefox/39.0            diff:diff across DST  2087.17   month diff across DST  lower bound      javascript // Expected true // Actual   false false === true            diff:diff across DST  2087.19   year diff across DST  lower bound      javascript // Expected true // Actual   false false === true     ,Turkm,closed,1,2015-07-13 15:52:05,2015-07-15 21:25:46,,Unit Test Failed,,,0,1
11768,moment/moment,2481,subtract and add a bit confusing,//In chrome now = moment  ; now.subtract 1   day  .toDate   === now.add  1   day  .toDate  ; //true now.subtract  1   day  .toDate   === now.add  1   day  .toDate  ; //true now.subtract  1   day  .toDate   === now.subtract 1   day  .toDate  ; //true    now.subtract 1   day  .toDate   === now.add 1   day  .toDate  ; //true    now.add 1   day  .toDate   === now.add  1   day  .toDate  ; //true     Shouldn t it be false at one point?  ,Polopollo,closed,2,2015-07-13 16:38:08,2015-07-15 21:31:06,,,,0,1
11767,moment/moment,2482,merge/overwrite only parsed values to existing moment,hey i hope this is the right place for a feature request. eventually it is already possible to accomplish this   but i did not find the right way.  if i have a valid moment   is it possible to merge a user .format UserInput  formatstring  strict_parsing ? so that only the parts that are given in the formatstring and successfully parsed are merged? that would make it easier if you want to merge two user inputs to one date object.  for example in this [angular.js date/time input formater directive] http://plnkr.co/edit/I87YcH?p=preview   ,s-light,open,4,2015-07-13 22:12:14,0000-00-00 00:00:00,,,,0,1
11766,moment/moment,2483,Time zone on UTC time works incorrectly,    javascript moment.utc  2015 07 05T23:16:00Z  .tz  Europe/Warsaw  .format   // 2015 07 06T01:16:00 02:00      01:16:00 02:00 is incorrect  it should be 23:16:00 02:00 ,fyodorvi,closed,1,2015-07-14 22:47:33,2015-07-15 21:23:29,,,,0,1
11765,moment/moment,2484,Date format falls back? how can I solve the date format compatability?,Date format is so annoying  even xxxx x x is not valid in firefox. If moment can help me to solve this mess  it will be very helpful. What s your solution? write a util function? yes it s ok  but not perfect. I think date format compatability is the basic thing. ,hxlniada,closed,1,2015-07-15 05:29:31,2015-07-15 20:58:58,,,,0,1
11764,moment/moment,2485,Parsing moment to javascript date.,I had problem when converting moment to javascript date object. The sample bellow will show the problem.  var m1 = moment.tz  2013 11 18 00:55   America/New_York  ; var m2 = moment.tz m1   America/Los_Angeles  ;  var d1 = m1.toDate  ; var d2 = m2.toDate  ;  var str1 = d1.toString  ; //  Mon Nov 18 2013 06:55:00 GMT 0100  CET   var str2 = d2.toString  ; //  Mon Nov 18 2013 06:55:00 GMT 0100  CET    I expected that str2 to be  Sun Nov 17 2013 22:55:00 GMT 0100  CET   because time zone change. But I get str2 =    Mon Nov 18 2013 06:55:00 GMT 0100  CET  . ,vetonshala,closed,1,2015-07-15 12:17:53,2015-07-15 21:17:09,,,,0,1
11763,moment/moment,2486,Run travis tests on last IO.js   node versions,I suggest this commit to let travis run on last version of iojs and more versions of node.  <    Reviewable:start   >  [<img src= https://reviewable.io/review_button.png  height=40 alt= Review on Reviewable />] https://reviewable.io/reviews/moment/moment/2486   <    Reviewable:end   > ,mathiasrw,closed,5,2015-07-15 13:54:17,2015-11-09 04:17:24,,,2.11.0,1,1
11762,moment/moment,2487,Fix Bangla translation for Evening  relative time  friday,A few Bangla words are fixed.   Ref:    http://www.ovidhan.org/b2b/ E0 A6 AC E0 A6 BF E0 A6 95 E0 A6 BE E0 A6 B2    or https://translate.google.com/ en/bn/ E0 A6 AC E0 A6 BF E0 A6 95 E0 A6 BE E0 A6 B2   https://translate.google.com/ en/bn/Friday ,thehungrycoder,closed,6,2015-07-15 18:08:06,2015-11-09 04:22:51,,Language,,2.11.0,1,1
11761,moment/moment,2488,Cannot parse short monthnames with periods,In some locales the short monthnames have a trailing period. In german   de   for example  Jan._Febr._....  When I try to parse something like this:  20 Jan. 2013  with the format  DD MMM YYYY  I cannot get true from the isValid   function in strict mode. Without strict it is valid  but a lot of other crap too.   <script type= text/javascript  src= https://code.jquery.com/jquery 2.1.4.min.js ></script>   <script type= text/javascript  src= http://momentjs.com/downloads/moment with locales.js ></script>   <script type= text/javascript >  var date =  20 Jan. 2013 ; var format =  DD MMM YYYY ; var locale =  de  var valid = 0; moment.locale locale ; document.writeln moment.monthsShort 0  ; moment date  format  locale  true .isValid   ? valid =  true  : valid =  false ; document.writeln date         format         locale           Valid:     valid ;  </script>  ,s1738berger,closed,3,2015-07-16 06:01:29,2015-07-16 21:52:39,,Bug,,,0,1
11760,moment/moment,2489,Update deprecate.js,As explained in the issue  2479  deprecate function causes Firefox 10 to hang for approximatively 3 seconds at each page load. ,Xaar37,closed,4,2015-07-16 06:56:43,2015-07-22 16:26:57,,performance,,2.10.5,1,1
11759,moment/moment,2490,Importing locales with webpack,I m trying to do the following:      js var moment = require  moment  ; require  moment/locale/nb  ;      But it fails because apparently  in  nb.js   the require function is not defined somehow:   [screenshot] http://i.imgur.com/dfhAjH7.png   Am I doing something wrong? I m aware this could be a webpack issue  not a moment one  but figured I d ask here first. ,anlutro,closed,1,2015-07-16 11:59:05,2015-07-16 12:14:16,,,,0,1
11758,moment/moment,2491,bug weekdays,locale =  ru  moment  2014 06 29T23:59:59  .weekday  7  result ==>  Mon Jun 16 2014 23:59:59 GMT 0300  RTZ 2          moment js does not work with negative numbers? ,pasapsi,closed,0,2015-07-17 10:11:18,2015-07-17 10:20:01,,,,0,1
11757,moment/moment,2492,Add ability to create negative durations  Fix  2408,This commit solves the problem with negative durations  which was described here: https://github.com/moment/moment/issues/2408 ,jsidorenko,closed,2,2015-07-17 16:32:27,2015-11-09 08:25:03,,,,1,1
11756,moment/moment,2493,Fix parsing months for cs and sk  2243,Fixes  2243 for Czech  overwrites default parser due to  477  and Slovak  uses default parser since it doesn t actually have the same problem .  I ve tried writing a test for parsing in strict mode by changing      js function equalTest input  mmm  monthIndex      assert.equal moment input  mmm .month    monthIndex  input     should be month      monthIndex   1  ;        to      js function equalTest input  mmm  monthIndex      assert.equal moment input  mmm  true .month    monthIndex  input     should be month      monthIndex   1  ;        but it fails with:      Module: locale:cs Test: strict parse Died on test  1     at /Users/petrbela/code/petrbela/moment/build/umd/test/locale/cs.js:74:5     at test  /Users/petrbela/code/petrbela/moment/build/umd/test/locale/cs.js:3:67      at Object.<anonymous>  /Users/petrbela/code/petrbela/moment/build/umd/test/locale/cs.js:6:2      at Module._compile  module.js:456:26      at Object.Module._extensions..js  module.js:474:10      at Module.load  module.js:356:32      at Function.Module._load  module.js:312:12      at Module.require  module.js:364:17 : Cannot read property  0  of undefined TypeError: Cannot read property  0  of undefined     at Locale.localeMonthsParse [as monthsParse]  /Users/petrbela/code/petrbela/moment/build/umd/moment.js:659:49      at Object.<anonymous>  /Users/petrbela/code/petrbela/moment/build/umd/moment.js:626:36      at addTimeToArrayFromToken  /Users/petrbela/code/petrbela/moment/build/umd/moment.js:580:26      at configFromStringAndFormat  /Users/petrbela/code/petrbela/moment/build/umd/moment.js:1197:17      at createFromConfig  /Users/petrbela/code/petrbela/moment/build/umd/moment.js:1324:13      at createLocalOrUTC  /Users/petrbela/code/petrbela/moment/build/umd/moment.js:1380:16      at local__createLocal  /Users/petrbela/code/petrbela/moment/build/umd/moment.js:1384:16      at utils_hooks__hooks  /Users/petrbela/code/petrbela/moment/build/umd/moment.js:16:29      at notEqualTest  /Users/petrbela/code/petrbela/moment/build/umd/test/locale/cs.js:80:30      at Object.<anonymous>  /Users/petrbela/code/petrbela/moment/build/umd/test/locale/cs.js:84:13       Any idea what might be going wrong? ,petrbela,closed,3,2015-07-20 13:51:53,2015-09-23 17:44:59,,Language,,,1,1
11755,moment/moment,2494,Fix two digit year parsing with YYYY format,Further to the discussion in  2344  this PR provides an alternative way to fix  2343.  I ve had to delete one of the existing tests to get this to pass    it seems that although a couple of people have agreed that the behaviour described in  2343 is unwanted  there was actually a test there to make sure it happened. ,stewartml,closed,2,2015-07-20 13:57:04,2015-07-26 04:49:16,,,2.10.5,1,1
11754,moment/moment,2495,Using fromNow   with interval multiple times,Hi   I have a table which grows / shrinks dynamically  usually max 50   60 records .  Within each row  I am using fromNow   to display the amount of time elapsed from a specific date. I m trying to understand how I get the time to update using interval and in an efficient way so that I don t take a hit on performance by doing something wrong.  Can anyone help?  Thanks ,aHumanBeing,closed,2,2015-07-21 01:11:01,2015-07-22 02:58:29,,,,0,1
11753,moment/moment,2496,.isoWeeks does not retain year,From the docs:  http://momentjs.com/docs/ /get set/iso week/   > Gets or sets the ISO week of the year.  This suggests that:      var date = moment 2016   YYYYY  ; date.isoWeeks 1 ; console.log date.format  YYYY MM DD   ;      Calculates the first week of 2016  however the result is:  2015 01 02  ,stefanmajoor,closed,5,2015-07-21 10:26:40,2015-10-13 17:07:52,,Bug,,,0,1
11752,moment/moment,2497,Month names and day names should not be capitalized in Spanish,These should all be downcased  https://github.com/moment/moment/blob/develop/locale/es.js  source: http://spanish.about.com/od/writtenspanish/a/capitalization.htm ,mattbailey,closed,6,2015-07-21 19:21:37,2015-08-11 10:26:17,,Language,,,0,1
11751,moment/moment,2498,Days and months in spanish should be lowercase,In Spanish  day and month names should be lowercase... as they were prior to commit 7d147d6  fixes  2497  ,StevenHeinrich,closed,3,2015-07-21 20:30:03,2015-11-09 04:24:17,,Language,,2.11.0,1,1
11750,moment/moment,2499,locale specific shortDateFormat  with 2 digit year ,Hello there    I am currently working on a project  where moment.js saved days and days of my life. I must say it is a great library  and I really appreciate the work that you guys have done. I recently run into one small problem which is  I hope  solvable. The locale specific shortDate format looks like this now: 09/04/1986. I was wondering if it is possible to have the version of date with the 2 digit year representation  like 09/04/86? Thank you guys in advance  and keep up the good work   Luka ,lukapopovic,closed,1,2015-07-22 14:10:23,2015-07-22 17:15:37,,,,0,1
11749,moment/moment,2500,1 test failed. utc:utc and local  2337.6  ,    Client info      Date String   : Wed Jul 22 2015 19:40:09 GMT 0530  India Standard Time  Locale String : 22/7/2015 7:40:09 pm Offset        :  330 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64; rv:39.0  Gecko/20100101 Firefox/39.0            utc:utc and local  2337.6   the hours  8  should be correct for local      javascript // Expected 9 // Actual   8 8 === 9     ,manslogic,closed,1,2015-07-22 14:39:30,2015-07-22 17:14:18,,Unit Test Failed,,,0,1
11748,moment/moment,2501,Is isBetween active unexpectedly?,Whats going on here? its clear that  deliverAt  is between  timeNow and  timeNow   2 hours .  Am I doing something wrong?      console.log deliverAt ; // Moment  _isAMomentObject: true  _i: Thu Jul 23 2015 04:20:51 GMT 0800  SGT   _isUTC: false  _locale: Locale  _d: Thu Jul 23 2015 04:20:51 GMT 0800  SGT   console.log timeNow ;   // Moment  _isAMomentObject: true  _i: Thu Jul 23 2015 03:41:38 GMT 0800  SGT   _isUTC: false  _locale: Locale  _d: Thu Jul 23 2015 03:41:38 GMT 0800  SGT   console.log timeNow.add 2   h   ; // Moment  _isAMomentObject: true  _i: Thu Jul 23 2015 03:41:38 GMT 0800  SGT   _isUTC: false  _locale: Locale  _d: Thu Jul 23 2015 05:41:38 GMT 0800  SGT   console.log deliverAt.isBetween timeNow  timeNow.add 2   h    ; // false     ,krzkrzkrz,closed,1,2015-07-22 19:47:40,2015-07-22 21:18:00,,,,0,1
11747,moment/moment,2502,unicode string returned from add subtract startOf endOf functions,I m using momentjs 2.4.0.  I have a need to be able to get the start of the current day and end of current day  start of previous day and end of previous day  start of previous week and end of previous week etc.  So in my code I have:        document .on  change     date range select   function         var m = moment  ;     switch   this .val              case  today :             start = m.startOf  day  .fromNow  ;             end = m.endOf  day  .fromNow  ;             break;         case  yesterday :             start = m.startOf  day  .subtract 1   days  .calendar  ;             end = m.endOf  day  .subtract 1   days  .calendar  ;             break;         case  lastweek :             start = m.startOf  week  .subtract 7   days  .calendar  ;             end = m.endOf  week  .subtract 7   days  .calendar  ;             break;           console.log start ;     console.log end ;   ;      When I change the field to any one of these options  the resulting console.log is something like this:          12 00        11 59       If I change the function for  today  to:      start = m.hours 0 .minutes 0 .seconds 0 .milliseconds 0 ; end = m.hours 23 .minutes 59 .seconds 59 .milliseconds 0 ;      When I run the function  I get moment objects  which according to the documentation  I should also get from the startOf and endOf functions.  I tried to change the  lastweek  functionality to do the longer method like in  today  but with the subtract function. It still results in the asian characters in the console.log.  I can t for the life of me figure out why this is happening.  Appreciate the help  ,emergingdzns,closed,2,2015-07-23 17:22:46,2015-07-27 03:57:50,,,,0,1
11746,moment/moment,2503,diff   sets today as 0 and tomorrow as  0,In MomentJS when using  diff    the difference between today and today is 0. The difference between today and tomorrow is  0.   Why  0 and not  1?  <a href= http://jsfiddle.net/cs1jxwmt/1/  >Here s an example.</a>  adjust the today and tomorrow date according to what the date is for you at the time of viewing   Is this a bug or do I misunderstand the logic behind this?  The main problem I faced was that JavaScript treats 0 and  0 the same. I posted a question on <a href= http://stackoverflow.com/questions/31599665/javascript detecting the difference between 0 and 0 >StackOverflow</a> and luckily I was able to overcome the issue. I m sure others will face this same issue. ,bensinclair,closed,6,2015-07-23 23:49:15,2015-07-31 05:19:03,,,,0,1
11745,moment/moment,2504,Bug in date validation,This date should not get validated since there is only 30 days in April      javascript moment  2015 04 31    YYYY MM DD  .isValid   //  > true     ,malek0512,closed,1,2015-07-24 09:02:17,2015-07-24 09:18:23,,,,0,1
11744,moment/moment,2505,Add new localised date format for full date  without time,According to http://momentjs.com/docs/ /displaying/format/  Moment.js supports  among others  these localised date formats  omitting lowercase variants for brevity :    Contents   Code   Example                         Month name  day of month  year   LL   September 4 1986     Month name  day of month  year  time   LLL   September 4 1986 8:30 PM     Month name  day of month  day of week  year  time   LLLL   Thursday  September 4 1986 8:30 PM    I would like to have a date format consisting of month name  day of month  day of week  and year   but without the time. What LL is to LLL  the hypothetical format would be to LLLL.  Right now I use the following snippet to construct such a format  but I d very much like to switch to a less hacky solution. It essentially takes the difference between LLL and LL  and applies it to LLLL  to remove the time and any language specific additions associated with it.      javascript var localeData = moment.localeData  moment.locale          llll = localeData.longDateFormat   llll         lll = localeData.longDateFormat   lll         ll = localeData.longDateFormat   ll         format = llll.replace  lll.replace  ll            ;      The use case is a date selector  with calendar  for MediaWiki: https://phabricator.wikimedia.org/T97425. ,MatmaRex,open,5,2015-07-25 00:28:06,0000-00-00 00:00:00,,Enhancement,flexible-presets,,,0,1
11743,moment/moment,2506,Redo  2123 in es6,Same as  2123  but inside the es6 directory structure. ,ichernev,closed,1,2015-07-26 03:00:40,2015-07-26 04:32:52,,,2.10.5,1,1
11742,moment/moment,2507,Redo 2191 in es6,Same as  2191 but in es6 directory structure. ,ichernev,closed,1,2015-07-26 03:08:00,2015-07-26 04:30:27,,,2.10.5,1,1
11741,moment/moment,2508,Redo  2124,Redo  2124 in es6 ,ichernev,closed,1,2015-07-26 03:36:06,2015-07-26 04:28:15,,,2.10.5,1,1
11740,moment/moment,2509,Coveralls.io reporting doesn t work,I think it is caused by running coverage on temporary  out of repo  files.  Initial coveralls integration written in  2387. ,ichernev,open,1,2015-07-26 05:04:53,0000-00-00 00:00:00,,Build/Release,,,0,1
11739,moment/moment,2510,Add Lao locale  lo ,,ryanhart2,closed,1,2015-07-26 05:21:05,2015-08-09 00:59:54,,Language,,,1,1
11738,moment/moment,2511,Unhandled Exception on parsing non date strings,In version 2.10.5 if I call  moment  a   moment.ISO_8601 ;  I get an unhandled exception.    In earlier versions this would give me an invalid moment object  which is what I want. ,ghost,closed,1,2015-07-27 12:27:29,2015-07-27 13:51:54,,,,0,1
11737,moment/moment,2512,moment iso date parsing difference between 2.10.3 and 2.10.5,Hello   Using 2.10.3 I was parsing likely ISO 8601 dates like this:      var m = moment datestr  moment.ISO_8601 ; if  m.isValid          ...      and things worked as expected when passing   invalid   dates. On updating to 2.10.5 this is no longer the case    I get an exception in the moment call. The exception is thrown here:      function Moment config        copyConfig this  config ;     this._d = new Date config._d.getTime   ;      because config._d is undefined.  Should I be doing things differently or is this a regression?  Jsfiddle showing the 2.10.3 behaviour here: http://jsfiddle.net/xnvofgrm/  Thanks   Tim ,timbell,closed,4,2015-07-27 12:29:28,2015-07-28 04:54:59,,Bug,High Priority,,,0,1
11736,moment/moment,2513,possible duration bug for calculating days, 2.10.3  moment.duration 123456   minutes  .asDays   85.73333333333333 moment.duration 123456   minutes  .days   25   2.10.5  moment.duration 123456   minutes  .asDays   85.73333333333333 moment.duration 123456   minutes  .days   24  should this be 25 days? ,amccarthyMatchbook,closed,6,2015-07-27 12:30:05,2015-07-27 13:50:51,,,,0,1
11735,moment/moment,2514,Improved Chinese localization, L s   and  l s   get the same result but standard months  L   should use the Chinese number. GB/T 7408 1994 ,Vic020,closed,3,2015-07-27 14:19:08,2015-08-12 05:44:46,,Language,Needs tests,,,1,1
11734,moment/moment,2515,Fix constructor regression,This was caused by https://github.com/moment/moment/pull/2368/files diff e792da0601bb2705000e86ef203f8e73R61  We should have had a test to cover for this case :   Fix for  2512 ,ichernev,closed,2,2015-07-27 16:56:26,2015-07-28 04:30:43,,,2.10.6,1,1
11733,moment/moment,2516,Follow Semantic Versioning principles,We re using the  MAJOR.MINOR.PATCH  versioning scheme  but we re not fully following the principles of [Semantic Versioning] http://semver.org/ .  Specifically  we re incrementing the _patch_ number when introducing new functionality  instead of the _minor_ number.  The most recent change should have been labeled  2.11.0   not  2.10.5 . ,mj1856,closed,3,2015-07-27 17:36:44,2015-09-21 05:26:59,,Build/Release,,,0,1
11732,moment/moment,2517,How to load only locales i want?,I am using Webpack and your npm package. Unfortunately it require all locales at once. Webpack knows they are optional      [252] ./ /moment/locale/bs.js 4.59 kB  0   1  [optional] [built] [253] ./ /moment/locale/ca.js 2.85 kB  0   1  [optional] [built] [254] ./ /moment/locale/cs.js 5.79 kB  0   1  [optional] [built]      but for some reason they are not droped. Is there any way how to require just core with selected locales? ,schovi,closed,18,2015-07-27 20:06:57,2016-02-24 05:41:05,,Troubleshooting,,,0,1
11731,moment/moment,2518,setting with object notation sets erroneous date,    > var date = moment  year:1998 month:7 day:29   undefined > date.calendar    08/29/1998      ,mattbailey,closed,2,2015-07-28 16:55:22,2015-07-28 18:39:36,,,,0,1
11730,moment/moment,2519,Version 2.10.6 is missing at cdnjs.com,Can you please upload latest version of moment to cdnjs.com? Currently latest version is 2.10.3  http://cdnjs.com/libraries/moment.js/  and I need some of the new features in version 2.10.5 ASAP. ,ismarslomic,closed,1,2015-07-28 21:15:30,2015-07-28 22:14:00,,,,0,1
11729,moment/moment,2520,Exclude tests.js from release?,I was looking into disk space used by our node_modules and noticed moment was rather large. After further digging I found out that the majority of the weight was tests. Would it be possible to publish a minimal version of moment to npm that excludes the 2.1MB test file in the min folder? ,icirellik,closed,1,2015-07-29 06:47:10,2015-07-31 04:48:01,,Build/Release,,,0,1
11728,moment/moment,2521,date diff error for same date,    javascript var now = moment  .format  YYYY MM DD   console.log  time is    now  var now1 = moment  .format  YYYY MM DD   console.log  Diff Now:     now.diff now1   days         Produces the following error      console.log  Diff Now:     now.diff now1   days                                   ^ TypeError: undefined is not a function     at Object.<anonymous>  c: work_folder trial_apps  testMoment.js:18:32      at Module._compile  module.js:460:26      at Object.Module._extensions..js  module.js:478:10      at Module.load  module.js:355:32      at Function.Module._load  module.js:310:12      at Function.Module.runMain  module.js:501:10      at startup  node.js:129:16      at node.js:814:3     ,hodiapa,closed,1,2015-07-29 20:34:05,2015-07-29 21:38:25,,,,0,1
11727,moment/moment,2522,Calculating  last Wednesday   etc.,Reading [the docs for the  day  setter] http://momentjs.com/docs/ /get set/day/   I see these examples:      javascript moment  .day  7 ; // last Sunday  0   7  moment  .day 7 ; // next Sunday  0   7  moment  .day 10 ; // next Wednesday  3   7  moment  .day 24 ; // 3 Wednesdays from now  3   7   7   7       These don t necessarily work consistently.  For example  consider:      javascript moment  2015 07 29  .day 6 7 .format  YYYY MM DD  dddd   ; //  2015 07 25  Saturday   moment  2015 07 29  .day 0 7 .format  YYYY MM DD  dddd   ; //  2015 07 19  Sunday        I asked for  last Saturday   and  last Sunday  respectively.  Since the supplied date is a Wednesday  I would expect the results to only be a day apart  the 25th and 26th .  Consider also that we support  .day  Sunday    in string format.  Both numeric and string forms would appear to prefer the current week   which is fine.  It s just the bubbling function of the numeric form that doesn t make logical sense.  I propose:   Remove the bubbling function.  Either modulo to the same day of week  or throw an error when out of range.   Add some new functions for getting the last/next instance of a day of week  perhaps with an optional  n  number of weeks  defaulting to 1 .   Do the same thing with respect to locale aware day of week functions and ISO day of week functions.   Update the docs accordingly. ,mj1856,open,11,2015-07-29 22:08:44,0000-00-00 00:00:00,,Bug,Enhancement,New Feature,Up-For-Grabs,,,0,1
11726,moment/moment,2523,Mode of week operations,It s confusing to have so many similar separate functions depending on what kind of weeks you re using.    day    weekday   and  isoWeekday     week   and  isoWeek     weekYear  and  isoWeekYear     weeksInYear  and  isoWeeksInYear    Potential new functions proposed in  2522   IMHO  it would make more sense to have a  week mode  getter/setter  similar to how we have local and UTC mode.    ,mj1856,open,2,2015-07-29 22:20:10,0000-00-00 00:00:00,,Enhancement,,3.0,0,1
11725,moment/moment,2524,Standard nomenclature  ro  ca  eo  eu  fo  fr  fr ca ,In english and some other languages  the first of the characters is in uppercase. So why is different in this languages?  I already implemented this change in other languages: [Standart nomenclature  pt  pt br  es ] https://github.com/moment/moment/pull/2328  ,raphamorim,closed,4,2015-07-30 04:16:06,2015-07-30 08:23:43,,,,1,1
11724,moment/moment,2525,moment undefined  format  create unexpected result,For example  in version 2.8.3  moment undefined   D/M/YYYY H:mm:ss     > Sat Jan 01 0 00:00:00 GMT 0800   moment undefined   D      moment undefined   M    or any other format  > Thu Jul 30 2015 00:00:00 GMT 0800  But in version 2.10.6  both of them output  > Thu Jul 30 2015 00:00:00 GMT 0800   I wonder is there any change in the api caused this. As I first thought I ve reset the date at some part of the code  but turns out I ve passed wrong parameter into the constructor. This behavior make debug more difficult. ,inDream,closed,3,2015-07-30 07:47:10,2015-07-31 04:24:26,,,,0,1
11723,moment/moment,2526,Website refers to English  England  rather than English  United Kingdom ,Your website refers to _English  England _   what about Scotland  Wales and Northern Ireland? Can we use _English  United Kingdom _ please? See for example [this] http://gouk.about.com/od/Practical UK Visitor Tips/ss/Things To Never Do In The United Kingdom.htm step5  for why this is an issue. ,meh-uk,closed,3,2015-07-30 09:12:59,2015-07-31 04:21:29,,,,0,1
11722,moment/moment,2527,moment crashs if you try to strictly validate locale dates,       get md date git: master  npm ls   grep moment     moment@2.10.6    get md date git: master  node > var moment = require  moment  ; undefined > moment  21         2015    DD MMM YYYY    ru   true .isValid  ; TypeError: Cannot read property  0  of undefined     at Locale.localeMonthsParse [as monthsParse]  /Users/matmuchrapna/projects/get md date/node_modules/moment/moment.js:659:49      at Object.<anonymous>  /Users/matmuchrapna/projects/get md date/node_modules/moment/moment.js:626:36      at addTimeToArrayFromToken  /Users/matmuchrapna/projects/get md date/node_modules/moment/moment.js:580:26      at configFromStringAndFormat  /Users/matmuchrapna/projects/get md date/node_modules/moment/moment.js:1199:17      at prepareConfig  /Users/matmuchrapna/projects/get md date/node_modules/moment/moment.js:1336:13      at createFromConfig  /Users/matmuchrapna/projects/get md date/node_modules/moment/moment.js:1307:44      at createLocalOrUTC  /Users/matmuchrapna/projects/get md date/node_modules/moment/moment.js:1385:16      at local__createLocal  /Users/matmuchrapna/projects/get md date/node_modules/moment/moment.js:1389:16      at utils_hooks__hooks  /Users/matmuchrapna/projects/get md date/node_modules/moment/moment.js:16:29      at repl:1:1      prob I missed something  so ask me anything ,iamstarkov,closed,12,2015-07-30 12:07:10,2015-09-23 17:46:33,,Duplicate,Language,,,0,1
11721,moment/moment,2528,Ignore min/tests.js from npm package,Requested in https://github.com/moment/moment/issues/2520 ,ichernev,closed,2,2015-07-31 04:47:47,2015-09-10 19:05:21,,,2.11.0,1,1
11720,moment/moment,2529,moment.min is broken in 2.10.6  works in 2.10.3 ,    var moment = require  moment  ; var oct = moment  20111031    YYYYMMDD  ; var nov = moment  20111131    YYYYMMDD  ; var longest_ago = moment.min [oct  nov]       I would expect  longest_ago === oct   but it does not.  Works just fine in the last stable moment version  ,chbrown,closed,1,2015-08-01 18:17:43,2015-08-01 22:29:20,,,,0,1
11719,moment/moment,2530,Official support for parsing RFC2822 dates,In  1407 it is claimed that only ISO dates are parsed because others can t be reliably parsed. But RFC2822 date is support by  Date  since JavaScript 1.0 in all browsers. In fact  RFC2822 date is the most supported format in JavaScript. ISO 8601 was added just in ECMAScript 5.  So  I understand why arbitrary strings might not tried to be parsed automatically  but why not allow parsing RFC2822 strings? They are as clearly defined as ISO strings?  In my opinion moment.js should support what Date supports across platforms  and add more. Not that is supports less? ,mitar,closed,24,2015-08-02 06:29:44,2017-03-19 09:28:56,,Enhancement,Up-For-Grabs,,,0,1
11718,moment/moment,2531,use requirejs configuration to customize Moment,hi  is there a possibility to pass customization config to moment via requirejs config  like noGlobal option. per example :      javascript requirejs.config       ...     config:           moment :               noGlobal: true              locale:                    en :                       calendar:   ...                        months:   ...                                       fr :   ...                                   ...           ...   ;      Thank you. ,absolux,closed,2,2015-08-03 00:24:02,2015-09-21 05:09:03,,Enhancement,,,0,1
11717,moment/moment,2532,Option to use  ceil  instead of  round  for duration humanization?,Currently the  humanize  method of duration works like this:      moment.duration 25   hours  .humanize  ; >  a day  moment.duration 35   hours  .humanize  ; >  a day  moment.duration 36   hours  .humanize  ; >  2 days       However  sometimes  ceil  may be needed instead of  round   which means the humanized text will be  2 days  when the duration is larger than 24 hour and less than 48 hours..  Is it possible for moment to add an option to use  ceil  instead of  round  for duration humanization? ,hanfeisun,closed,1,2015-08-03 02:13:30,2015-08-11 10:02:59,,Enhancement,,,0,1
11716,moment/moment,2533,Only number without unit and suffix,Is it possible to get only number without any suffix or unit? For instance  using  fromNow    will get simple result  xxx days ago . But just need  xxx  without    days ago    ,tony0918,closed,2,2015-08-03 07:26:05,2015-08-03 22:57:37,,,,0,1
11715,moment/moment,2534,verified  require  is a function  on templates ,Added a check to verify  require  is a function  before assuming it exists. In some cases  exports  and  module  are defined even when the system is not using require.  such as when using the lumbarjs module management . ,liorch88,closed,2,2015-08-03 10:54:06,2015-11-09 04:26:24,,,2.11.0,1,1
11714,moment/moment,2535,Unnecessary deprecation warning,Hello  I am using moment js for my application and I faced a problem. So I have something like this:      javascript if   moment inputValue .isValid        // some stuff going on here...        As you see I am trying to use the isValid   method only for verification. Sometimes my input is not a valid date for moment js so it produces the  Deprecation warning: moment construction falls back to js Date.  message. I understand why you have put deprecation warning for the moment constructor but in my case I only want to use moment for verification. Shouldn t there be a way to use the isValid   functionality without getting the deprecation message. I need this because of some logging I have to handle. Best regards  Stefan. ,SVasilev,closed,7,2015-08-03 14:14:19,2015-08-03 22:50:31,,,,0,1
11713,moment/moment,2536,Khmer translation  km  is wrong for key sameDay,Hello   There is a wrong spelling of key  sameDay  for Khmer translation in the file  moment with locales.js    moment with locales.min.js  and locale file  km.js .    Incorrect        calendar:               sameDay:  [           ] LT               nextDay:  [          ] LT               nextWeek:  dddd [    ] LT               lastDay:  [             ] LT               lastWeek:  dddd [          ] [    ] LT               sameElse:  L                    Correct        calendar:               sameDay:  [            ] LT               nextDay:  [          ] LT               nextWeek:  dddd [    ] LT               lastDay:  [             ] LT               lastWeek:  dddd [          ] [    ] LT               sameElse:  L                  And thank you very much for making this javascript library. ,sereysethy,closed,4,2015-08-04 09:47:11,2015-08-11 10:01:47,,Language,,,0,1
11712,moment/moment,2537,Minimized locale files are corrupted, //  author : Bojan Markovi  : https://github.com/bmarkovic function s a b c  var d=a    ;switch c  case m :return b? jedna minuta : jedne minute ;case mm :return d =1===a? minuta :2===a  3===a  4===a? minute : minuta ;case h :return b? jedan sat : jednog sata ;case hh :return d =1===a? sat :2===a  3===a  4===a? sata : sati ;case dd :return d =1===a? dan : dana ;case MM :return d =1===a? mjesec :2===a  3===a  4===a? mjeseca : mjeseci ;case yy :return d =1===a? godina :2===a  3===a  4===a? godine : godina   function t a b c d  var e=a;switch c  case s :return d  b? n h ny m sodperc : n h ny m sodperce ;case m :return egy   d  b?  perc :  perce  ;case mm :return e  d  b?  perc :  perce  ;case h :return egy   d  b?   ra :   r ja  ;case hh :return e  d  b?   ra :   r ja  ;case d :return egy   d  b?  nap :  napja  ;case dd :return e  d  b?  nap :  napja  ;case M :return egy   d  b?  h nap :  h napja  ;case MM :return e  d  b?  h nap :  h napja  ;case y :return egy   d  b?   v :   ve  ;case yy :return e  d  b?   v :   ve   return   function u a  return a?  : [m lt]     [  Fa[this.day  ]  ] LT[ kor]     you better check this out  because after last croatian word : godina  everything else is hungarian apparently.  bosnian:   //  based on  hr  translation by Bojan Markovi  function k a b c  var d=a    ;switch c  case m :return b? jedna minuta : jedne minute ;case mm :return d =1===a? minuta :2===a  3===a  4===a? minute : minuta ;case h :return b? jedan sat : jednog sata ;case hh :return d =1===a? sat :2===a  3===a  4===a? sata : sati ;case dd :return d =1===a? dan : dana ;case MM :return d =1===a? mjesec :2===a  3===a  4===a? mjeseca : mjeseci ;case yy :return d =1===a? godina :2===a  3===a  4===a? godine : godina   function l a  return a>1  5>a  1 ==   a/10  function m a b c d  var e=a    ;switch c  case s :return b  d? p r sekund : p r sekundami ;case m :return b? minuta :d? minutu : minutou ;case mm :return b  d?e  l a ? minuty : minut  :e  minutami ;break;case h :return b? hodina :d? hodinu : hodinou ;case hh :return b  d?e  l a ? hodiny : hodin  :e  hodinami ;break;case d :return b  d? den : dnem ;case dd :return b  d?e  l a ? dny : dn   :e  dny ;break;case M :return b  d? m s c : m s cem ;case MM :return b  d?e  l a ? m s ce : m s c   :e  m s ci ;break;case y :return b  d? rok : rokem ;case yy :return b  d?e  l a ? roky : let  :e  lety      same goes here  minutou  minutami ... etc. that is not bosnian language  neither is anything after that. ,diomed,closed,8,2015-08-04 13:58:29,2015-08-12 19:53:29,,,,0,1
11711,moment/moment,2538,potential moment.duration   bug,    > var moment = require  moment  ;  > moment.duration 120   minutes     [Number: 7200000]   _milliseconds: 7200000    _days: 0    _months: 0    _data:      milliseconds: 0       seconds: 0       minutes: 0       hours: 2       days: 0       months: 0       years: 0     > moment.duration  120    minutes     [Number: 0]   _milliseconds: 0    _days: 0    _months: 0    _data:      milliseconds: 0       seconds: 0       minutes: 0       hours: 0       days: 0       months: 0       years: 0         When I pass in the number 120  it construct a correct duration. However  when I pass in the string  120   it creates a duration with all the fields initialized to 0. Is that the desired behaviour?  ,Jackyjjc,closed,2,2015-08-07 00:02:29,2015-08-07 03:37:25,,,,0,1
11710,moment/moment,2539,Inconsistent localisation formatting for Japanese,There seems to be away to get the month with it s counter particle    but it s impossible to get the day and year counter particle.      moment  .format  M Y D    8 Y 7   moment  .format  MM YY DD    08 15 07   moment  .format  MMM YYY DDD    8  15Y 219  // Expected for DDD: 07  moment  .format  MMMM YYYY DDDD    8  2015 219  // Expected for YYYY: 2015  moment  .format  MMMM YYYYY DDDD    8  02015 219  moment  .format  MMMM YYYY DDDD    8  2015 219       Is there a way for me to add my own custom keys? For example  as a sibling of  LLL   I want like  hello  for example. ,moneytree-doug,closed,2,2015-08-07 07:12:26,2015-09-21 05:07:52,,Language,,,0,1
11709,moment/moment,2540,Client s timezone lost on toJSON,I d like to ask whether there s any way moment could retain timezone information when serializing to JSON.  Assuming an application with international use  and a viewmodel containing a  moment  that is serialized before being POSTed to the server  the information of the user s local timezone is lost because of moment s  toJSON  behaviour.  My current workaround is to call  .format    on moments before POST  since that retains the timezone   but it d be more convenient if I could simply convert the entire viewmodel  including  moment   to JSON.  Is it currently possible to affect this behaviour to retain timezone information  or could moment be made configurable to allow this behaviour to be changed across an entire application?  n.B. not keen on overriding moment s  toJSON  unless that is the suggested workaround. ,mdsharpe,closed,4,2015-08-07 14:49:54,2015-08-09 21:43:53,,,,0,1
11708,moment/moment,2541,Fix russian locale for calendar next week,Reproduce issue: 1. Open http://momentjs.com/ 2. Set  Russian  locale. 3. Execute in console  wrong       js moment  .subtract 3   days  .calendar   == moment  .add 4   days  .calendar       ,vsn4ik,closed,6,2015-08-07 21:38:51,2015-11-09 04:27:57,,Language,,2.11.0,1,1
11707,moment/moment,2542,Precision of .fromNow   and related methods?, moment  .fromNow    and related methods   .from      .toNow      .to     as outlined in the documentation return an approximate value of the time since. How can an exact value be returned?   E.g.       > moment  2015 06 27T00:00:00.000Z  .fromNow    a month ago       But what I d like is the exact amount of time since  and as an example  the spaghetti way I found to do this is:      > moment.duration moment  .diff moment  2015 06 27T00:00:00.000Z    ._data   milliseconds: 44    seconds: 41    minutes: 6    hours: 23    days: 10    months: 1    years: 0       ,jasonmendes,closed,2,2015-08-07 23:05:59,2015-08-10 18:30:16,,,,0,1
11706,moment/moment,2543,New isFunction util, isFunction  was introduced in  2325 but only for one case:  addRegexToken .  There are also other cases where legacy  Android  versions mistake  RegExps  for  functions   so we should not rely on  typeof x ===  function   but rather always check using  isFunction . ,gabrielmaldi,closed,2,2015-08-08 03:45:15,2015-11-09 04:29:27,,,2.11.0,1,1
11705,moment/moment,2544,Add Lao locale  lo ,Add locale for Lao language Replace earlier Pull Request  2510 ,ryanhart2,closed,2,2015-08-09 01:34:51,2015-11-09 04:32:22,,Language,,2.11.0,1,1
11704,moment/moment,2545,Add swahili  sw  locale,This is an update of Pull Request  2228 authored by @fadsel.  It has been rebased to latest develop; the locale moved to src/local; and tests added. I don t speak swahili so the language is as per the original Pull Request.  To be confirmed by @fadsel:   [x] Is using AM and PM for time correct? As this is not defined  AM/PM this will be used by default;   [x] Is it correct that no ordinals are defined? This will mean that 1st  2nd  3rd and 4th are just written as 1  2  3 and 4.   [ ] Does  hivi punde baadaye  make sense for  in a few seconds / in a short while  and does  tokea hivi punde  make sense for  a few seconds ago / a short while ago ? This is how Moment will produce those phrases.   [ ] The translation of  at  seems inconsistent for today   tomorrow   saa   vs. next week and last week   saat   and seems to be missing for yesterday i.e. should  [jana] LT  be  [jana saa] LT ?   [ ] Next week   last week seem to be the equivalent of  next week Tuesday  and  last week Tuesday . Wouldn t you just say  next Tuesday  and  last Tuesday ?  That s all. Feel free to submit your own Pull Request using this work if it helps. ,ryanhart2,closed,4,2015-08-09 06:04:16,2015-11-09 04:34:23,,Language,,2.11.0,1,1
11703,moment/moment,2546,15 tests failed. locale:el:parse  450.23  locale:el:parse  450.39  locale:el:parse  450.47  locale:el:parse  450.55  locale:el:parse  450.87  locale:el:parse meridiem  451.5  locale:el:parse meridiem  451.9  locale:el:parse meridiem  451.13  locale:el:parse meridiem  451.17  locale:el:parse meridiem  451.21  locale:el:parse meridiem  451.25  locale:tzl:suffix  1869.2  locale:tzl:now from now  1870.1  duration:JSON.stringify duration  2186.1  format:full expanded format is returned from abbreviated formats  2218.1  ,    Client info      Date String   : Mon Aug 10 00:15:19 UTC 0100 2015 Locale String : 10 August 2015 00:15:19 Offset        : 0 User Agent    : Mozilla/4.0  compatible; MSIE 7.0; Windows NT 5.1; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR 1.1.4322; .NET4.0C             locale:el:parse  450.23   ??????S should be month 3      javascript // Expected 2 // Actual   7 7 === 2            locale:el:parse  450.39   ????S should be month 5      javascript // Expected 4 // Actual   7 7 === 4            locale:el:parse  450.47   ??????S should be month 6      javascript // Expected 5 // Actual   7 7 === 5            locale:el:parse  450.55   ??????S should be month 7      javascript // Expected 6 // Actual   7 7 === 6            locale:el:parse  450.87   ????????S should be month 11      javascript // Expected 10 // Actual   7 7 === 10            locale:el:parse meridiem  451.5   10 should be 22      javascript // Expected 22 // Actual   10 10 === 22            locale:el:parse meridiem  451.9   10 should be 22      javascript // Expected 22 // Actual   10 10 === 22            locale:el:parse meridiem  451.13   10 should be 22      javascript // Expected 22 // Actual   10 10 === 22            locale:el:parse meridiem  451.17   10 should be 22      javascript // Expected 22 // Actual   10 10 === 22            locale:el:parse meridiem  451.21   10 should be 22      javascript // Expected 22 // Actual   10 10 === 22            locale:el:parse meridiem  451.25   10 should be 22      javascript // Expected 22 // Actual   10 10 === 22            locale:tzl:suffix  1869.2   Died on test  2 undefined: Object doesn t support this property or method      javascript // Expected undefined // Actual   null null === undefined            locale:tzl:now from now  1870.1   Died on test  1 undefined: Object doesn t support this property or method      javascript // Expected undefined // Actual   null null === undefined            duration:JSON.stringify duration  2186.1   Died on test  1 undefined:  JSON  is undefined      javascript // Expected undefined // Actual   null null === undefined            format:full expanded format is returned from abbreviated formats  2218.1   Died on test  1 undefined: Object doesn t support this property or method      javascript // Expected undefined // Actual   null null === undefined     ,MarkMaldaba,open,3,2015-08-09 23:27:14,0000-00-00 00:00:00,,Browser Specific,Unit Test Failed,,,0,1
11702,moment/moment,2547,npmignore,Add please min/tests.js to npmignore ,TrySound,closed,1,2015-08-10 10:15:26,2015-08-10 18:34:21,,Duplicate,,,0,1
11701,moment/moment,2548,Add scots gaelic  gd  support,This PR is to add Scots Gaelic  gd  support to moment.js   [x] modifies parser to accept Gaelic months   [x] include Scots Gaelic Language file   [x] includes Scots Gaelic unit tests ,jonashdown,closed,4,2015-08-10 10:34:54,2015-11-09 04:37:25,,Language,,2.11.0,1,1
11700,moment/moment,2549,Fix locale for khmer language,,sereysethy,closed,5,2015-08-10 11:23:18,2015-11-09 04:38:43,,Language,,2.11.0,1,1
11699,moment/moment,2550,Warning with formatting today s date moment  .format ... ,Anyone know why the following gives me a deprecation warning?      moment  .format  MM/DD/YYYY            Deprecation warning: moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.      I read through the thread  but I don t really see how pass in  nothing  into the moment constructor gives me this error.  I m just trying to get today s date in a certain format ,stevewillard,closed,2,2015-08-10 18:07:36,2015-08-11 17:05:46,,,,0,1
11698,moment/moment,2551,Implement language inheritance,This has been requested over and over.  The idea is to enable creating a language by specifying the differences with another language. This will only be used by user code  not in the build in locales  so that they remain independent .  To do this properly we need to:   have a  not specified  value  that would mean it wasn t specified in the current description   wrap all locale token access with methods  in  Language  class     two implementations    return value directly  or check for  not specified  and fall back to parent language. ,ichernev,closed,3,2015-08-11 09:59:42,2016-03-23 06:11:29,,Enhancement,,,0,1
11697,moment/moment,2552,Moment Truck Factor,As part of my PhD research on code authorship  we calculated the Truck Factor  TF  of some popular GitHub repositories.  As you probably know  the [Truck  or Bus  Factor] https://en.wikipedia.org/wiki/Bus_factor  designates the minimal number of developers that have to be hit by a truck  or quit  before a project is incapacitated. In our work  we consider that a system is in trouble if more than 50  of its files become orphan  i.e.  without a main author .  More details on our work in this preprint: https://peerj.com/preprints/1233  We calculated the TF for   Moment   and obtained a value of   19  .  The developers responsible for this TF are:  Iskren Chernev   author of 79  of the files Tim Wood   author of 32  of the files Abdel Said   author of 4  of the files Isaac Cambron   author of 3  of the files Menelion Elens  le  Andre Polykanine    author of 3  of the files Jonathan Abourbih   author of 2  of the files Dan Dascalescu   author of 1  of the files Armen Darabyan   author of 1  of the files Werner Mollentze   author of 1  of the files kraz   author of 1  of the files kaushik gandhi   author of 1  of the files vajradog   author of 1  of the files jbleduigou   author of 1  of the files Nedim Cholich   author of 1  of the files Petr Bela   author of 1  of the files Anatoly Mironov   author of 1  of the files Robert Allen   author of 1  of the files MadMG   author of 1  of the files Aggelos Karalias   author of 1  of the files  To validate our results  we would like to ask   Moment   developers the following three brief questions:   a  Do you agree that the listed developers are the main developers of   Moment  ?   b  Do you agree that   Moment   will be in trouble if the listed developers leave the project  e.g.  if they win in the lottery  to be less morbid ?   c  Does   Moment   have some characteristics that would attenuate the loss of the listed developers  e.g.  detailed documentation ?  Thanks in advance for your collaboration   Guilherme Avelino PhD Student Applied Software Engineering Group  ASERG  UFMG  Brazil http://aserg.labsoft.dcc.ufmg.br/ ,gavelino,closed,2,2015-08-11 16:54:47,2015-08-11 19:47:30,,,,0,1
11696,moment/moment,2553,Improved Chinese localization, L s   and  l s   get the same result but standard months  L   should use the Chinese number. GB/T 7408 1994  2514 BTW only modify the src/. file ,Vic020,closed,0,2015-08-12 05:51:50,2015-08-13 01:28:38,,,,1,1
11695,moment/moment,2554,Parsing Issue with single digits days and months in strict mode,When parsing in Strict mode to get all the benefits of it  one would expect      javascript moment  10 1 2015   [ DD MM YYYY ]  true       to be true.  notice the single digit month . the same goes for single digit date. Because they are valid dates and I believe the intention is universally accepted where one does not need to append a  0  before single digit numbers in date and month value.  To work around  right now I need to do      javascript moment  10 1 2015   [ DD MM YYYY   DD M YYYY   D MM YYYY   D M YYYY ]  true      ,mkhanal,closed,2,2015-08-12 08:27:06,2015-08-12 22:38:47,,,,0,1
11694,moment/moment,2555,LDML yyyy produces weird results with no warning,I didn t realize that Moment didn t use LDML  and applied MM/dd/yyyy format. I didn t get an error message  just a weirdly wrong date  and one that was randomly correct . I know  my bad for not thoroughly reading the docs. However  it would be good if invalid moment date format strings  but commonly used  valid LDML formats would produce an error message of some sort  even if they proceeded to execute.  Alternatively  it would be nice if YYYY/yyyy were both supported  since I don t think this would break anyone s existing code and move closer to LDML. Since you use  ddd  instead of  eee   maybe supporting both DD/dd would be problematic?  I don t know if there s a LDML to moment translation layer like moment tokens.js does for strftime. That might be nifty too. ,StevenACoffman,closed,1,2015-08-12 17:17:56,2015-09-10 19:36:42,,,,0,1
11693,moment/moment,2556,Support for Telugu locale,,kcthota,closed,2,2015-08-13 06:10:42,2015-11-09 04:41:01,,Language,,2.11.0,1,1
11692,moment/moment,2557,Update hr.js,Even though names of months are  sije anj   velja a  etc. that is NOT the right way to write them as a date   same goes for other months  : 14. velja e 3. o ujka 17. travnja 21. svibnja 26. lipnja 19. srpnja 1. kolovoza 9. rujna 10. listopada 22. studenog 15. prosinca ,diomed,closed,5,2015-08-13 09:17:31,2015-11-09 09:54:56,,Language,Needs tests,,,1,1
11691,moment/moment,2558,relativeTime Seconds,I m using relativeTime and noticed the  s  equals  a few seconds  rather than  seconds  as shown in the documentation  http://momentjs.com/docs/ /customization/relative time/ . Is it possible to add a  seconds  and  second  value? I was hoping to use these as part as custom humanize implementation with multilingual support  and  a few seconds  isn t granular enough. Thanks  ,randdusing,closed,5,2015-08-14 18:48:57,2017-03-21 18:38:04,,Enhancement,,,0,1
11690,moment/moment,2559,Enhancement   Add ordinal support for quarters,It would be nice to add ordinal support for quarters. For example I want to display the date as  1st quarter 2015 .   momentObject.format  Qo [quarter] YYYY   ,markusklooth,closed,3,2015-08-15 23:41:06,2015-10-14 02:30:08,,Enhancement,Up-For-Grabs,,,0,1
11689,moment/moment,2560,SyntaxError: unreachable code after return statement,With moment.min.js version 2.10.3 using Firefox 40.0 I get the following message console:   SyntaxError: unreachable code after return statement  ,hdon,closed,12,2015-08-17 16:53:21,2015-12-10 06:07:44,,Bug,Troubleshooting,,,0,1
11688,moment/moment,2561,isValid   works incorrect for  MM DD YYYY  when day is invalid,Seems like day limit is missing:      javascript     > moment  05 118 2015   [ MM DD YYYY ] .isValid       true     ,alexkravets,closed,4,2015-08-18 06:52:49,2015-09-03 05:31:24,,,,0,1
11687,moment/moment,2562,Adding swiss french locale fr ch.,Swiss french is slightly different from french: we use dots instead of slashes to display dates  14.2.2014 versus 14/2/2014 . I also included the ordinal changes recently made to fr ca conerning ordinal abbreviation but am not sure why it was rejected in  fr  locale and if this rejection would also apply to  fr ch .  @jfroffice  do you have examples where the abbreviation looks wrong ? ,gaspard,closed,2,2015-08-18 11:16:51,2015-11-09 04:44:12,,Language,,2.11.0,1,1
11686,moment/moment,2563,isValid   => true   strange flags with use of  Post or ante meridiem ,Hello   Here is just an example of the issue :   But I just figured out that the problem was more with the  a  or  A  formatting   I m adaptating the issue exemple            javascript moment  text here TUESDAY text there   DD MM YYYY HHa  .isValid   true               javascript moment  text here TUESDAY text there   DD MM YYYY HHa  .parsingFlags   unusedInput: Array[3] 0:  text  1:  here TUESD  2:  Y text there  unusedTokens: Array[4] 0:  DD  1:  MM  2:  YYYY  3:  HH            So as far as I can understand  it says it s valid because the  A  of  TUESDAY  is matching with the meridiem  a   that doesnt appear in the unused tokens.  Don t know if it matters  but from what I wrote in the format  I expected at least that the hours are linked to the meridiem like 10am 12pm  maybe 12noon but it doesnt matter since it s understood as 12am so it s fine . But not sure if I  using the tool right.  Using the latest version of moment  moment.version =  2.10.6   in a Meteor environnment.  ,chneau,closed,1,2015-08-18 12:50:47,2015-09-10 19:41:56,,,,0,1
11685,moment/moment,2564,Different results for different invocations,Is the following behaviour correct? I expected these two to have the same result.      moment new Date  2015 07 08   .toDate   Wed Jul 08 2015 03:00:00 GMT 0300  EEST   moment  08/07/2015    DD/MM/YYYY  .toDate   Wed Jul 08 2015 00:00:00 GMT 0300  EEST       Taking the UTC mode into consideration:      moment.utc new Date  2015 07 08   .toDate   Wed Jul 08 2015 03:00:00 GMT 0300  EEST   moment.utc  08/07/2015    DD/MM/YYYY  .toDate   Wed Jul 08 2015 03:00:00 GMT 0300  EEST       Is this by any chance related to https://github.com/moment/moment/issues/1407  Be careful when falling back to Date constructor ? ,apandichi,closed,4,2015-08-18 17:11:22,2015-09-10 19:35:55,,,,0,1
11684,moment/moment,2565,creationData for issue  2443,Hi Guys  just cannot wait. so put this feature in. Please review and advise. Thx more details is here: [ 2441] https://github.com/moment/moment/issues/2441  and [ 2443] https://github.com/moment/moment/issues/2443   the feature is to make a function called creationData    which returns an object with input  format  isUTC  locale ,alburthoffman,closed,2,2015-08-18 17:44:44,2015-11-09 04:52:57,,,2.11.0,1,1
11683,moment/moment,2566,2.10.3:  Cannot read property  preparse  of null  when parsing dates using Swedish locale,I was planning to use  moment  to parse dates from an API that uses Swedish locale.  The problem is that when I parse using language code  sv  I get an internal error in  moment .  Here s the simple functionality I have:      javascript var moment = require  moment  ; var raw_input =  20 maj 2013 09:01 ; var format    =  D MMMM YYYY HH:mm ; console.log moment raw_input  format   en  .isValid   ; console.log moment raw_input  format   sv  .isValid   ;      I adapted the code from the official docs  moment  2012 juillet    YYYY MMM    fr  ;    The expected output of this should be:      false true      But the output I m getting is:      false Uncaught TypeError: Cannot read property  preparse  of null      I have traced the error to the function  prepareConfig   see  Error here  :      javascript     function prepareConfig  config            var input = config._i              format = config._f;          config._locale = config._locale    locale_locales__getLocale config._l ;          if  input === null     format === undefined    input ===                    return valid__createInvalid  nullInput: true  ;                    if  typeof input ===  string                 config._i = input = config._locale.preparse input ; <    Error here                I have installed  moment 2.10.3  using npm.  Tested on Firefox and Chrome with same error on both.  Here s a screenshot of the config object printed to the log:   [Log print] http://i.imgur.com/joyXSaG.png  ,rzetterberg,closed,1,2015-08-19 11:55:28,2015-08-19 14:17:43,,,,0,1
11682,moment/moment,2567,Getting timezone from offset,I ve read and re read the documentation and I cannot find how to return the user s current timezone with moment.js or moment timezone.js   Is there not a format that I can specify that will return the timezone based on the time offset? Seems strange I can go one way but not another. ,nwkeeley,closed,1,2015-08-19 15:34:24,2015-08-20 14:50:33,,,,0,1
11681,moment/moment,2568,isDuration not documented?,As far as I can tell there is a  isDuration  static method on moment that returns  true  when called with a moment duration. I do not see this documented anywhere  however. Can this be relied on? And if I can help doc this please let me know. ,hulbert,closed,2,2015-08-20 04:33:47,2015-09-10 19:30:12,,,,0,1
11680,moment/moment,2569,Russian locale: capitalized first cahracters in names,Why month and weekday names are in lower case in  ru  locale  not with capitalized first character  like in other locales and anoter datepickers  Windows calendar etc ? For example                          and      is more habitual for calendar than                         and     . First of all  question is for @Viktorminator  author of locale file. Can I make a PR to fix this? ,RomeroMsk,closed,8,2015-08-20 07:33:29,2015-09-21 04:55:58,,Language,,,0,1
11679,moment/moment,2570,Build moment.js not minified and without locales,,evilebottnawi,closed,1,2015-08-20 08:52:26,2015-08-20 08:56:29,,,,0,1
11678,moment/moment,2571,16 tests failed. create:object  2075.1  diff:diff key after  2135.1  diff:diff key after  2135.2  diff:diff key after  2135.4  diff:diff key after  2135.6  diff:diff key after  2135.7  diff:diff key before  2136.3  diff:diff key before  2136.5  diff:diff key before  2136.7  diff:diff key before singular  2137.3  diff:diff key before singular  2137.5  diff:diff key before singular  2137.7  diff:diff key before abbreviated  2138.3  diff:diff key before abbreviated  2138.5  diff:diff key before abbreviated  2138.7  diff:diff floored  2143.3  ,    Client info      Date String   : Thu Aug 20 2015 14:28:25 GMT 0300  FET  Locale String : August 20  2015 at 2:28:25 PM GMT 3 Offset        :  180 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_10  AppleWebKit/600.1.25  KHTML  like Gecko  Version/8.0 Safari/600.1.25            create:object  2075.1       javascript // Expected 2010 01 01 00:00:00.000 // Actual   2010 01 01 01:00:00.000  2010 01 01 01:00:00.000  ===  2010 01 01 00:00:00.000             diff:diff key after  2135.1   year diff      javascript // Expected  1 // Actual   0 0 ===  1            diff:diff key after  2135.2   month diff      javascript // Expected  2 // Actual    1  1 ===  2            diff:diff key after  2135.4   week diff      javascript // Expected  1 // Actual   0 0 ===  1            diff:diff key after  2135.6   week diff      javascript // Expected  3 // Actual    2  2 ===  3            diff:diff key after  2135.7   day diff      javascript // Expected  3 // Actual    2  2 ===  3            diff:diff key before  2136.3   day diff      javascript // Expected 3 // Actual   2 2 === 3            diff:diff key before  2136.5   week diff      javascript // Expected 1 // Actual   0 0 === 1            diff:diff key before  2136.7   week diff      javascript // Expected 3 // Actual   2 2 === 3            diff:diff key before singular  2137.3   day diff singular      javascript // Expected 3 // Actual   2 2 === 3            diff:diff key before singular  2137.5   week diff singular      javascript // Expected 1 // Actual   0 0 === 1            diff:diff key before singular  2137.7   week diff singular      javascript // Expected 3 // Actual   2 2 === 3            diff:diff key before abbreviated  2138.3   day diff abbreviated      javascript // Expected 3 // Actual   2 2 === 3            diff:diff key before abbreviated  2138.5   week diff abbreviated      javascript // Expected 1 // Actual   0 0 === 1            diff:diff key before abbreviated  2138.7   week diff abbreviated      javascript // Expected 3 // Actual   2 2 === 3            diff:diff floored  2143.3   24 hours = 1 day      javascript // Expected 1 // Actual   0 0 === 1     ,alex-hudenko,closed,1,2015-08-20 11:29:21,2017-03-18 19:11:28,,Unit Test Failed,,,0,1
11677,moment/moment,2572,add Moment.prototype.creationData,This function returns an object containing the input format  input value  locale  and whether the moment was created in UTC.  Resolves  2443 ,jamesarosen,closed,3,2015-08-20 21:56:07,2015-11-09 08:26:35,,,,1,1
11676,moment/moment,2573,change  A few seconds ago  to  X seconds ago ,I couldn t find this in the docs  but is there any way to change the relative time of  a few seconds  to a more specific timeframe e.g.  15 seconds ago ? ,danhodkinson,closed,1,2015-08-21 13:28:46,2015-09-21 04:52:30,,Enhancement,,,0,1
11675,moment/moment,2574,Adding a success callback on loading of locales,Hello and thanks for your work.  Is there a way to be notified when locales have finished loading ? When the locale takes time to load  I end up having the dates displayed in the wrong language  English . Thank you. ,louisameline,closed,12,2015-08-24 10:34:58,2016-06-22 03:38:21,,Troubleshooting,,,0,1
11674,moment/moment,2575,Different DST offsets between windows and linux,We are running into issues where moment returns different DST offsets for dates in the past whether it runs on linux or windows.  The following fiddle http://jsfiddle.net/Nq3KD/49/ prints the following  Linux:       index :29 Tue Jan 01 1980 00:00:00 GMT 0100  index :31 Wed Oct 01 1980 00:00:00 GMT 0100  index :33 Fri Oct 24 1980 00:00:00 GMT 0100  index :35 Sun Jul 24 1977 00:00:00 GMT 0100      Windows:       index :29 Tue Jan 01 1980 00:00:00 GMT 0100  index :31 Wed Oct 01 1980 00:00:00 GMT 0200  index :33 Fri Oct 24 1980 00:00:00 GMT 0200  index :35 Sun Jul 24 1977 00:00:00 GMT 0200     ,sLite,closed,3,2015-08-24 15:56:15,2015-08-31 01:15:14,,,,0,1
11673,moment/moment,2576,Firefox 37.0.2  moment is not a function,I have no idea what s going on  Chrome have function and Firefox is wrapping the moment into an object.  I wish I can tell you more but I have no idea how I should debug this  Firefox  [screen shot 2015 08 24 at 4 50 50 pm] https://cloud.githubusercontent.com/assets/4237280/9452093/666da5b6 4a80 11e5 9679 691ad90db116.png   Chrome  [screen shot 2015 08 24 at 4 51 15 pm] https://cloud.githubusercontent.com/assets/4237280/9452092/666af730 4a80 11e5 9235 debe23c6e7d0.png  ,yordis,closed,3,2015-08-24 20:53:09,2015-09-21 04:48:14,,Troubleshooting,,,0,1
11672,moment/moment,2577,Fixed package.json jspm config,We shouldn t point to the bundled file in the jspm config. Because in the top the bundled file is trying to export itself when runs inside jspm bundle is broken in Firefox  https://github.com/moment/moment/issues/2576   I can t replicate this in Chrome but even that we shouldn t do that.  @ryanlanciaux keep in mind this issue for Griddle because is the same problem in this ticket https://github.com/GriddleGriddle/Griddle/issues/201 The main file is very important file for these tools. ,yordis,closed,26,2015-08-24 23:32:40,2015-10-27 21:15:30,,,2.11.0,1,1
11671,moment/moment,2578,Unexpected reserved word in Moment.js 2.10.6,I found this issue in an angularjs project. My project fails all tests because of an  Unexpected reserved word.   Karma output:      Chrome 44.0.2403  Linux 0.0.0  ERROR   Uncaught SyntaxError: Unexpected reserved word   at /mnt/DATA/Documents/Web_Development/Projects/buzzweb/vendor/moment/src/moment.js:7      This issue on stackoverflow also describes the same error http://stackoverflow.com/questions/29977553/uncaught syntax error with moment js  I m not a javascript expert  but it appears to be an issue with the switch to ES6 ,liamlundy,closed,6,2015-08-25 04:38:17,2016-04-01 00:16:09,,Troubleshooting,,,0,1
11670,moment/moment,2579,Russian locale: capitalized first cahracters in names  fix  2569,Russian locale: capitalized first cahracters in names  fixes:  2569 ,RomeroMsk,closed,4,2015-08-25 12:41:20,2015-11-09 05:06:56,,Language,,2.11.0,1,1
11669,moment/moment,2580,Does not support ISO 8601 comma separator,I was debugging a problem with parsing the following date string  which moment was calling invalid:      2015 08 09T12:10:51 555      According to the [WP article] https://en.wikipedia.org/wiki/ISO_8601   this is valid and the preferred millisecond separator in the standard:  > A decimal mark  either a comma or a dot  without any preference as stated in resolution 10 of the 22nd General Conference CGPM in 2003 [14] but with a preference for a comma according to ISO 8601:2004 [15] is used as a separator between the time element and its fraction.   Should moment support this? ,jinder,closed,1,2015-08-25 14:06:42,2015-08-31 01:02:21,,,,0,1
11668,moment/moment,2581,Bad ISO week calculation,moment is incorrectly calculating the   year   of the first ISO week when the ISO week begins in the previous year.      > moment  2015 W01  .format  YYYY MM DD    2014 12 29  // right > moment  2014 12 29  .format  YYYY [W]WW    2014 W01  // oopsie      Works when the first week begins in the current year:      > moment  2012 W01  .format  YYYY MM DD    2012 01 02  // right > moment  2012 01 02  .format  YYYY [W]WW    2012 W01  // right      moment 2.10.6  node 0.12  us locale  PDT  ,daguej,closed,1,2015-08-26 00:48:17,2015-08-26 17:42:33,,,,0,1
11667,moment/moment,2582,Wrong IsValid,Hi  How can the myDate...  var myDate = moment  1s    DD MM YYYY  ;  ... be valid? ,MojoDK,closed,1,2015-08-26 08:06:03,2015-08-31 00:57:52,,,,0,1
11666,moment/moment,2583,Ignore src directory in bower.json,I m not sure why the  src  directory needs to be distributed via bower. The  main  file is set to  /moment.js   outside of  src   and users also have access to the  min  directory. ,nikolas,closed,2,2015-08-26 23:34:43,2015-12-09 05:54:58,,,2.11.0,1,1
11665,moment/moment,2584,moment.locale  zh cn   dose not work in Meteor ?,moment.locale  zh cn   dose not work in Meteor ? ,hojas,open,15,2015-08-27 03:18:34,0000-00-00 00:00:00,,Build/Release,,,0,1
11664,moment/moment,2585,Potential Bug   Phone numbers being seen as valid dates,First let me start by saying I don t know whether or not this is intentional or not.. off the top of my head I don t see a reason why you d want an array of numbers in this format to a valid date but I could be wrong..  First I ll give you the set of circumstances where things work as I d expect then I ll give you all of the other cases where it does not work as expected.  Correct   moment            .isValid   = false   Moment version: 2.2.1 with..   IE version: 11.0.9600.17914 / Update version: 11.0.21  Incorrect   moment            .isValid   = true   Moment version: 2.2.1 with..   IE version: >11.0.9600.17914 / Update version: >11.0.21   OR   Moment version: 2.10.6  current  with   All versions of IE tested... and all chrome/firefox versions we currently have installed across my team.  If I don t hear back from anyone telling me this is actually how it is planned to function I can dig into why its occurring and propose a resolution after work.. Like I said  I m not familiar with that number format being a standard for date and/or time but I could be wrong. ,jklaus,closed,1,2015-08-27 17:57:40,2015-08-31 00:44:18,,,,0,1
11663,moment/moment,2586,To support the Taiwan year format,Dear reader   In Taiwan   the year format is 4 digits year minus 1911. eg. 2015  displayed as 104.  and maybe like this         javascript     addFormatToken 0  [ YYY   3]  0  function              return this.year     1911;       ;     addRegexToken  YYY   match1to3  match3 ;     addParseToken  YYY   function  input  array            array[YEAR] = hooks.parseThreeDigitYear input ;       ;     hooks.parseThreeDigitYear = function  input            return toInt input    1911;      ;       but these methods are not published. so is there any other way to add a new date format?  thank you very much ,bradwoo8621,closed,4,2015-08-28 02:46:52,2015-08-31 01:07:13,,,,0,1
11662,moment/moment,2587,Fix minor typos in the changelog,,mcauser,closed,3,2015-08-28 03:29:10,2015-11-09 05:09:00,,,2.11.0,1,1
11661,moment/moment,2588,Add Mongolian language locale to moment.js,,digz6666,closed,4,2015-08-28 08:35:51,2015-12-09 06:08:07,,Language,Needs tests,,,1,1
11660,moment/moment,2589,Spellchecking / Correcci n ortogr fica,Salvo que la may scula venga exigida por la puntuaci n  a comienzo de texto o despu s de punto   los nombres de los d as de la semana  de los meses y de las estaciones del a o se escriben en espa ol con min scula inicial. ,ghost,closed,3,2015-08-30 23:21:14,2015-09-24 03:38:32,,Language,,,1,1
11659,moment/moment,2590,Wrong  .diff  for days calculation while i need moment base on  days ,    Try      js moment  2015 08 31  .diff  2015 09 01    days            js  1  // Awesome         Then      js moment  2015 08 31 07:43:00  .diff  2015 09 01    days            js  0 //  1 Expected      Of cause the diff is not one day enough. But i wanna the diff of   days   as 2nd param of  .diff . It should return   1 . ,gordomium,closed,1,2015-08-30 23:47:32,2015-08-31 00:38:30,,,,0,1
11658,moment/moment,2591,Enhancement: Add support for parsing relative dates like datejs does.,Ability to parse dates like  next tuesday    tomorrow  etc  in a localized way. ,krisnye,closed,1,2015-09-01 19:48:07,2015-09-10 19:18:29,,,,0,1
11657,moment/moment,2592,Wrong parsing when month is overflown and there is MMM in one of the formats,HI.  Getting really strange parse result  when passing formats and there is a month overflow in input string and one of the formats is with MMM. Example  http://jsfiddle.net/igoryan/yyx0j6os/4/ : moment  01/15/80 3:34   [ DD/MM/YY h:mm ]  works correctly but moment  01/15/80 3:34   [ DD/MM/YY h:mm    DD MMM YY hh:mm ]  will result in  Thu Jan 01 2015 03:34:00 GMT 0600   instead of invalid value.   Looks like in first case the isValid   is  false   because _pf.overflow = 1  and then second format is accepted  even though  MMM  and  /80  are not matched. ,igoryan-k,closed,6,2015-09-01 20:52:00,2015-09-21 04:32:16,,Bug,,,0,1
11656,moment/moment,2593,Wrong parsing of time when using format with H or h and no separators,Hi  Found an issue when parsing with formats like  hmm  or  Hmm .  E.g. moment  334   [ hmm ] ; results in invalid value  because despite of the passed format  it considers h=33  mm =4.  Example: http://jsfiddle.net/igoryan/koqe5m5f/ ,igoryan-k,closed,4,2015-09-01 23:37:03,2015-09-10 19:22:06,,,,0,1
11655,moment/moment,2594,Add dv locale,Adds locale and tests for Dhivehi/Thaana language. ,jawish,closed,3,2015-09-02 04:03:19,2015-11-09 05:11:18,,Language,,2.11.0,1,1
11654,moment/moment,2595,moment.Duration humanize,I try to display some durations but there is something wrong. Start date is 01.01.2015 Stop date is 05.02.2015 I Iterate over and created everytime durations. But then on 25 happen this....      Duration   _milliseconds=0   _days=25   _months=0   more...  => 25 days Duration   _milliseconds=0   _days=26   _months=0   more...  => one month      25 Days are not a month. That are 25 days ? Here is my [Fiddle] http://jsfiddle.net/mah23cvf/6/  ,chapterjason,closed,2,2015-09-02 14:22:00,2015-09-10 19:16:27,,,,0,1
11653,moment/moment,2596,ISO 8601 allows comma separated milliseconds  momentjs does not.,the 8601 standard allows fractional seconds to be separated by dot or comma  search for  decimal mark  in the wikipedia page you link in your docs . I see the comma variant in cassandra and elastic search logs.  ,welch,closed,1,2015-09-02 21:38:09,2015-09-08 17:54:22,,,,0,1
11652,moment/moment,2597,added ukrainian translation,,zhil,closed,9,2015-09-03 18:41:26,2015-09-22 03:30:01,,Duplicate,Language,,,1,1
11651,moment/moment,2598,Trivial ?  miscalculations with diff method and months as unit, diff    is sometimes off by a very small margin of error using the  months unit  and hence also year .   all example below are using floating point number  as floored results would  fix  the error in most cases   Diffing  2016 02 29T00:00:00.000Z  with  2016 02 28T23:59:59.999Z  should yield the same result as  1 / 1000 / 60 / 60 / 24 / 29   1 ms in a leap month  which is  3.991060025542784e 10   but instead I m getting  3.7335722819593786e 10   That s the result of a month with 31 days  not 29. Funny enough  if I reverse the order I get the correct result:   3.991060025542784e 10   The same thing happens with  2015 03 29T06:00:00.000Z  and  2015 03 28T06:00:00.000Z . Given the longer time span the error is larger  but still trivial. The expected result should yield the same result as  1/31   1 day in a month with 31 day   which is  0.03225806451612903   but I m getting  0.034482758620689655    1/29  .  Again  reversing the order yields the correct result.  In this [codepen] http://codepen.io/fullkornslimpa/pen/BoyJpP  I have compared the results with a custom method  UTC only . ,friday,closed,5,2015-09-05 20:46:52,2015-09-21 04:22:24,,Troubleshooting,,,0,1
11650,moment/moment,2599,Can i subtract moment from moment ,i have  for example:  moment  2000 12 01    and  moment  2015 09 01    i want calc difference in months  thank you  ,a-x-,closed,2,2015-09-10 02:39:06,2015-09-10 19:08:19,,,,0,1
11649,moment/moment,2600,Add [at] to localisations,A few times now I ve used moment for projects where there was a need to display  Date [at] Time . This is fine when we re only working with English languages  but gets complex with foreign languages.  Moment s calendar feature partially covers this off   could we add support for localising the word  at  for appointments and edited times  etc? ,mrmckeb,closed,2,2015-09-10 05:22:07,2015-09-21 04:15:49,,Enhancement,,,0,1
11648,moment/moment,2601,momentjs avalonjs conflict,momentjs avalonjs conflict  Uncaught Error: http://localhost:8181/static/momentjs/moment.js                     script    http://localhost:8181/static/momentjs/moment.js   avalon.mix.error  @ avalon.min.js:34g.delay  @ avalon.min.js:127C.define  @ avalon.min.js:128 anonymous function   @ moment.js:9 anonymous function   @ moment.js:11 ,ystyle,closed,4,2015-09-10 06:34:25,2015-09-21 04:13:25,,Troubleshooting,,,0,1
11647,moment/moment,2602,cut down npm package size,There are 2.2mb of tests in the package   seems wasteful  especially as it s so easy to  .npmignore  or specify   files :  in package.json.  If this is of interest I m happy to PR. ,timruffles,closed,2,2015-09-10 11:16:24,2015-09-10 19:01:53,,,,0,1
11646,moment/moment,2603,Implement proper ISO 8601 parsing  fixes  2450,Adds a normalize function for iso8601 strings which is used only when the string after the normalization appears to be valid iso8601.  I ve added tests to this pull request as well by copying the existing tests and removing the dashes and colons  and replacing the dots by commas.  fixes:  2450 ,pietercolpaert,closed,9,2015-09-10 11:54:44,2015-11-09 09:56:43,,,,1,1
11645,moment/moment,2604,moment  05 03 1997  .isValid   in chrome returns true but at firefox returns False ,i used latest moment .js but still the issue exist   basically moment  05 03 1997  .isValid   at chorme returns true   at fire fox retuns false   and for all     dates   i used moment  05 03 1997 . replace / /g    /    .isValid    as a work around     kindly i would like to participate on its fix   can anyone tell me form where i begin trace at momentjs repositoy ?   thanks in advance  ,amera7md,closed,1,2015-09-10 15:33:00,2015-09-10 18:59:57,,,,0,1
11644,moment/moment,2605,Incorrect time difference display when using  hh:mm:ss  instead of  mm:ss ,Hello  I have encountered this  i am not sure if its intended behavior  I assume its not because it does not make much sense.      moment airplanes[5].arrival_time   airplanes[5].departure_time .format  mm:ss    01:10           moment airplanes[5].arrival_time   airplanes[5].departure_time .format  hh:mm:ss    12:01:10      ,silentwarrior,closed,1,2015-09-13 11:36:14,2015-09-21 04:08:57,,,,0,1
11643,moment/moment,2606,correctly parses 24hr input with ante/post merdiem format  except for midday,I m guessing the  solution  to this might be to note it in the docs.      > moment  1:00    HH mm a  .format  hh:mm a    01:00 am   > moment  13:00    HH mm a  .format  hh:mm a    01:00 pm   > moment  0:00    HH mm a  .format  hh:mm a    12:00 am   > moment  12:00    HH mm a  .format  hh:mm a    12:00 am      ,justinTNT,closed,1,2015-09-14 09:04:21,2015-09-21 04:06:13,,,,0,1
11642,moment/moment,2607,moment returns incorrect dates when formatting,The following jsfiddle shows the issue I m experiencing:  http://jsfiddle.net/qn78kLpm/2/  Essentially   .format    seems to not work as expected. I would expect the second call to  .format    to output  Apr 1st ; instead  it outputs  Apr 4th   even though the underlying date object is correct. This problem is compounded the more times it moves through. ,gms8994,closed,1,2015-09-14 15:54:10,2015-09-14 17:56:22,,,,0,1
11641,moment/moment,2608,How can I import momentjs in es6?,Hi   I ve tried the following imports in node  to execute  moment.format  date    but all of them fail with:  format is undefined .      javascript import moment from  moment  import   moment   from  moment  import   as moment from  moment       How is the correct way of importing this library from es6?  Thanks in advance  ,alesch,closed,89,2015-09-14 19:27:03,2017-10-12 08:45:26,,Build/Release,Loading,,,0,1
11640,moment/moment,2609,Simple Parsing in March 2015 results in wrong results,See https://jsfiddle.net/pep85n1d/      moment  2015 03 27 08:00  .format   moment  2015 03 28 08:00  .format   moment  2015 03 29 08:00  .format   moment  2015 03 30 08:00  .format        results in      2015 03 27T08:00:00 01:00 2015 03 28T08:00:00 01:00 2015 03 29T08:00:00 02:00 // here 2015 03 30T08:00:00 02:00 // here      but should be      2015 03 27T08:00:00 01:00 2015 03 28T08:00:00 01:00 2015 03 29T08:00:00 01:00 // here 2015 03 30T08:00:00 01:00 // here       [screen] https://cloud.githubusercontent.com/assets/14015079/9861349/ff66ef22 5b31 11e5 8bd5 96a8ac10d68d.png   Am I missing something important? Or is this a bug? ,schamese,closed,2,2015-09-14 20:45:49,2015-09-21 03:52:44,,,,0,1
11639,moment/moment,2610,isValid doesn t respect format ,Why does isValid returns true when I explicitly give string format ?   moment  2011/11/10   DD/MM/YYYY   .isValid   //=>  true ,bobiblazeski,closed,1,2015-09-15 08:48:57,2015-09-21 03:51:06,,,,0,1
11638,moment/moment,2611,Incorrect date returned when     is used in date format,Hi   I d like to parse a date string where date parts are delimited by      so I tried the following.  moment  10 10 2015    DD MM YYYY  .isValid   returned true  moment  10 10 2015    DD MM YYYY  .toDate   returned Sun May 10 2015 00:00:00 GMT 0100  GMT Daylight Time  when I expected Sat Oct 10 2015 00:00:00 GMT 0100  GMT Daylight Time   Is this a bug or is there a special convention for using     delimiter?  Thanks  Funmi ,foflade,closed,5,2015-09-15 12:06:54,2015-09-18 16:28:39,,,,0,1
11637,moment/moment,2612,Getting Invalid Day in Date when using moment.js in Mozilla Firefox,Hello  Found a issue when trying to use the .add x  days  in Mozilla Firefox  it s really weird.  I Described the entire process in StackOverflow  take a look:  http://stackoverflow.com/questions/32573951/getting invalid day in date when using moment js in mozilla firefox  When using a current time instance  var variable = moment    it seems to work  but when using a ISO8601 coded date  it presents  2015 10 17  twice   Any help apreciated :  ,ghost,closed,1,2015-09-15 12:34:57,2015-09-17 22:59:09,,,,0,1
11636,moment/moment,2613,adds kazakh kk  locale,adds kazakh locale with its tests ,nurlan,closed,3,2015-09-16 04:25:57,2015-11-09 05:12:58,,Language,,2.11.0,1,1
11635,moment/moment,2614,Incorrect strict parsing behavior for Day of Week  dd/ddd/dddd ,With strict parsing enabled  I would expect all the following calls to return an invalid date:      js moment  monday    dd   true  // => Mon Dec 29 2014 00:00:00 // Expected: invalid date   moment  monday    ddd   true  // => Mon Dec 29 2014 00:00:00 // Expected: invalid date   moment  mon    dddd   true  // => Mon Dec 29 2014 00:00:00 // Expected: invalid date      Now  it wouldn t be so bad if   dd   were to match results for   ddd   and   dddd   as well. Unfortunately  even with strict parsing enabled  also completely different strings are matched:      js moment  month    dd   true  // => Mon Dec 29 2014 00:00:00 // Expected: invalid date      I tested this with moment.js 2.10.6. ,wmnnd,closed,3,2015-09-16 11:42:38,2015-11-09 02:31:01,,Bug,,,0,1
11634,moment/moment,2615,Multiple copies of moment function,Is there a way to create multiple  independently configured copies of the  moment    function?  What I would like to do is enforce strict mode parsing across my entire codebase  disable the fallback to the native Date function . The method I would like to use to do this is covered [here] https://github.com/moment/moment/issues/2469 issuecomment 126570896    override  createFromInputFallback  to always return an invalid Date. The only snag in my situation is that I m developing a widget library that depends on moment and I can t modify the global moment object that my users depend on. If I could configure my own copy of the moment function separately from the global one it would solve that problem neatly.  I can theoretically update all of my  moment string   calls to be  moment string  format  true   and that will give the strict parsing behavior I would like. The catch is that we would then have to implement a human rule across our team that says  always remember to pass format and true to moment    but human rules are easy to forget. If it s possible to enforce this behavior in code that seems like a cleaner solution to me. ,bkputnam,closed,4,2015-09-16 18:45:29,2015-09-21 03:48:32,,,,0,1
11633,moment/moment,2616,Adding months is confusing,When adding months to a moment instance  it automatically take you to the start of the resulting month.   In other languages and environments like SQL  when you add a month to a date  it would stay on the same day of the month but move x months into the desired direction.   For example  let s say I ve got a date of  2015 09 17 09:01:15.461Z . And I want to go 3 months into the past  so I do this:  moment  2015 09 17 09:01:15.461Z  .add  3   months  .toDate  ; .   I would expect the result to be  2015 06 17 09:01:15.461Z   but instead it s  2015 06 01 09:01:15.461Z .   Why did it go to the first of the month? It doesn t work like that if you do direct month manipulation in JS  or any other languages that I ve worked with.   Is this behaviour by design  or is it a bug? If it s by design  is there a way to override this behaviour?  ,hendrikswan,closed,6,2015-09-17 09:05:16,2015-09-18 15:33:59,,Troubleshooting,,,0,1
11632,moment/moment,2617,Rethink _d,I m wondering if we really need to track a  Date  object in  _d .   Loads of questions are raised from folks logging a moment instance to the console  seeing  _d  and not understanding how to interpret it.  While  ._  convention is common for internal/private fields  it s still not something the common user understands.  Also in the console  the string it displays is implementation dependent.  Most browsers show the local time  but others  like Firefox  show the UTC time.  So a lot of misunderstandings are when the string representation of  _d  doesn t align with the date emitted by  .format   .   Currently  the value of  _d.valueOf    is the same as  moment.valueOf    only when the moment is either local or UTC.  As soon as there is an offset set in  _offset   then the  _d  value no longer represents the same instant in time  but rather the instant shifted by the offset.  Our  valueOf    function  and many others  have to take  _offset  into account and shouldn t.  This is both an efficiency problem  and an easy source of errors.  It also isn t understood when users look at  _d  in isolation  per my first point .   It would make a lot more sense  IMHO  to keep just a timestamp as a number  which is always the UTC based timestamp of the specific instant in time that the moment is about.  Perhaps in  _ts   for timestamp . The  _offset  would be applied to  _ts  for the functions that need it.   We may find we can actually get rid of several functions that use the  Date  object.  For example  I have recently [re implemented functions for date part to timestamp and vice versa in pure JavaScript] https://gist.github.com/mj1856/f6aa5e8b8aa040f65ae1   and they perform _faster_ than native code.  This could be pulled into moment  and other similar functions can probably be written that manipulate the timestamp directly rather than calling functions like  setMonth    on the  Date  object.  This would also have the benefit of not being browser dependent on DST transition adjustment behavior.   I think this will also make it easier for some of the moment timezone integration. ,mj1856,open,5,2015-09-17 21:29:45,0000-00-00 00:00:00,,Enhancement,performance,,,0,1
11631,moment/moment,2618,Moment should provide consistent DST behavior,_ updated _  When a moment is created or manipulated to a value that is either invalid or ambiguous due to daylight saving time  the results should be consistent across implementations.  Currently  we rely strictly on the  Date  object  which may not always provide the same behavior.  Specifically  when a local time is invalid  we should advance by the DST bias  2:30 becomes 3:30 .  When a local time is ambiguous  we should pick the _first_ occurrence _1:30 is 1:30  daylight_ time  not standard time .       _ originally reported _  The issue described in  2612 is explainable  but what I find strange is that the behavior isn t the same in other time zones.  For Brazil  Firefox always goes backwards instead of forwards like Chrome.  But for other time zones  moment always goes forwards   even in Firefox.  Example in Firefox in Brazil:      javascript moment  2015 10 17  .add 1   days  .format    2015 10 17T23:00:00 03:00  moment  2015 10 18  .add 1   days  .format    2015 10 18T23:00:00 02:00       Example in Firefox in Pacific Time:      javascript moment  2015 03 08 02:00  .add 1   days  .format    2015 03 09T03:00:00 07:00  moment  2015 03 07 02:00  .add 1   days  .format    2015 03 08T03:00:00 07:00       Given Brazil s behavior  I would expect Pacific time to also roll back to 1:00  but it jumps forward to 3:00.  It s good if moment makes it consistent for Pacific. But then it s not clear why Brazil is still inconsistent if we re trying to compensate. ,mj1856,open,12,2015-09-17 23:08:57,0000-00-00 00:00:00,mj1856,Bug,DST,Enhancement,,,0,1
11630,moment/moment,2619,Unexpected behavior of getter methods for invalid dates obtained from parsing with patterns,When parsing invalid strings with patterns such as   M    Y   L   also when using strict mode   a moment.js object is returned that gives the current date when using getter methods such as  month    or  year    instead of an error.  format    still returns  Invalid date  as expected.      js var foo  = moment  xyz    L   true  foo.month   //=> 8 // expected: NaN foo.year   // => 2015 // expected: NaN foo.format  l   // =>  Invalid date       Without parsing patterns  the following expected behavior is shown:      js var bar  = moment  xyz   bar.month   //=> NaN bar.year   // => NaN bar.format  l   // =>  Invalid date       I tested this with moment.js 2.10.6. ,wmnnd,closed,4,2015-09-18 02:48:46,2015-12-10 07:07:56,,Bug,,,0,1
11629,moment/moment,2620,moment transform  plugin to manipulate dates through patterns,I ve finally decided to do something with that plugin of mine  here it is: http://a    .github.io/moment transform/  It allows simple operations  set / add / substract  to parts  year  day  hour     from a string.      javascript moment  .transform  YYYY MM  01 06:00:00.000  ; // Tomorrow at 6am      Some options are available like defining your own patterns. ,A----,closed,2,2015-09-18 15:17:56,2015-09-18 15:37:23,,,,0,1
11628,moment/moment,2621,Detect default locale,  Why   do we default the locale to US English?   Per [this S.O. answer] http://stackoverflow.com/a/25842472/634824  we can detect the user s locale with:      javascript window.navigator.userLanguage    window.navigator.language      Why not set the default locale to match the user s locale?  Alternatively  consider adding this as a new function  or as a special parameter to pass into  moment.locale  ? ,mj1856,closed,3,2015-09-18 16:54:22,2017-03-21 20:51:25,,Enhancement,New Feature,todo,,,0,1
11627,moment/moment,2622,Modified moment/calendar.js to accept functions as formats similar to ,  locale/calendar.js; added moment/calendar tests ,timothyfstephens,closed,3,2015-09-20 20:15:28,2016-03-31 06:42:50,,,,1,1
11626,moment/moment,2623,Cannot use callbacks in formats parameter to moment calendar function,Using a callback in the formats parameter to moment calendar function results in an error  format.replace is not a function  in expandFormat function   which is allowed when setting calendar options on the locale.  I have created a pull request [here] https://github.com/moment/moment/pull/2622  with a fix  based on the code from the locale version. ,timothyfstephens,closed,1,2015-09-20 20:20:12,2015-09-21 05:35:39,,,,0,1
11625,moment/moment,2624,Proper handling of invalid moments,Implement proper handling of invalid moments across all methods.  The current situation is that only format will display moments as invalid  but most other methods will kind of work with some  undefined behavior  Date object stored underneath.  Now all methods are predictable  I added tests  and work almost like NaNs    operations involving them result in more NaNs and boolean checks return false.  Fixes  2619 ,ichernev,closed,1,2015-09-21 03:03:32,2015-11-09 02:21:40,,,2.11.0,1,1
11624,moment/moment,2625,Changed relative time translation,Corrected Marathi translation  locale/mr.js  for relative time with suffix ,vnathalye,closed,5,2015-09-21 15:11:45,2015-09-22 15:48:04,,rewrite,,,1,1
11623,moment/moment,2626,possible 2.10 regression in date string construction,Sorry if this is a duplicate post or some behavior change that I don t recognize  but from  2.9.0   >  2.10.x  the following behaves differently:   moment  2015 09 21 18:30:17    YYYY MM DD HH:mm:ss.SSSSS ZZ  .format  ;   In  2.9.0  I get the date formatted in my local timezone  the inputed one being in UTC   but in .10 it s returning the same date string. ,paulfalgout,closed,5,2015-09-21 18:58:06,2015-10-11 00:21:37,,,,0,1
11622,moment/moment,2627,date format in the gantt tooltip,I want to display the date in tooltip in the  MMM DD  format. i tried like this date format= moment  .format  MMM DD  ;  but this is not working if i dont use date format attribute it displays date in default format i.e. MMM DD  HH:mm and for moment  .format  ; only it displays the date in default format YYYY MM DDTHH:mm:ssZ please help me to resolve this ,amitchandavale,closed,4,2015-09-22 09:02:47,2015-09-23 07:44:14,,,,0,1
11621,moment/moment,2628,APA formatting for AM/PM,Per [APA formatting standards] https://owl.english.purdue.edu/owl/resource/593/01/  under the   Time of Day   heading the proper formatting for AM/PM is either A.M./P.M or a.m./p.m. ,besartbytyqi,closed,4,2015-09-22 15:10:07,2015-09-22 15:39:59,,,,0,1
11620,moment/moment,2629,Issue with the setDefault timezone.,Upon switching form 2.09 to 2.10 I noticed that the setDefault timezone was no longer adjusting all of the moments like it was previously. Is there a known bug with the default timezone feature? ,michplunkett,closed,2,2015-09-22 16:12:15,2015-09-23 22:57:03,,,,0,1
11619,moment/moment,2630,Changed relative time translation,Hi @kalehv   @ichernev   As per discussion in earlier PR  2625  committing only the 2 files under src folder. src/locale/mr.js src/test/locale/mr.js ,vnathalye,closed,3,2015-09-22 16:52:26,2015-11-09 05:15:26,,,2.11.0,1,1
11618,moment/moment,2631,getting the locale .. correctly ,sorry guys but could not find how to get a locale correctly set ..   should I download any file  ? is it already compiled in ?   if I need to download it   from where ?  ...    I have already a var locale set   which is running fine  with DataTables   var langUrl =  //cdn.datatables.net/plug ins/be7019ee387/i18n/French.json ; if  locale ===  en     langUrl =  //cdn.datatables.net/plug ins/be7019ee387/i18n/English.json ;    where should I write the moment.locale locale ;  thanks for help ... ,erwin16,closed,1,2015-09-22 17:42:21,2015-09-22 20:29:04,,,,0,1
11617,moment/moment,2632,Subtracting days doesn t account for DST changes,We recently had some tests start blowing up  and I tracked it down to an issue with Moment s handling of DST. In order to get the results I expected  we need to first convert to UTC  then subtract.  Testcase:      var moment = require  moment  ;  // Specifically chosen because DST ends on Nov 1st this year var endDSTDate = moment  2015 11 02 10:22:33  ; var clonedDSTDate = moment endDSTDate  console.log endDSTDate.subtract 3   days  .toDate    console.log clonedDSTDate.utc  .subtract 3   days  .toDate          Actual Run:        node moment testcase.js Fri Oct 30 2015 10:22:33 GMT 0600  MDT  Fri Oct 30 2015 11:22:33 GMT 0600  MDT       [Fiddle] http://jsfiddle.net/dxt3pfwv/     note HTTPS breaks the fiddle since it imports moment as an http resource  I believe that moment should always be doing day/month/year operations on UTC values. ,kusold,closed,2,2015-09-22 23:19:33,2015-09-23 23:35:21,,,,0,1
11616,moment/moment,2633,moment.utc  .isSame moment.utc  .toArray    fails,    javascript var dateUtc = moment.utc  ; dateUtc.isSame dateUtc.toArray    === true; // this fails  var dateLocal = moment  ; dateLocal.isSame dateLocal.toArray    === true; // this doesn t      I guess since creating a moment from an array  for comparison  creates it in local time because the array doesn t contain timezone information. Is this expected behaviour? ,joelmukuthu,closed,1,2015-09-23 09:34:49,2015-09-23 23:23:22,,,,0,1
11615,moment/moment,2634,Fix strict month parsing issue in cs ru sk,So I added short and long months parse arrays where they were needed and updated the tests   [x] fix broken locales   [ ] make sure we check for that when we create a locale   [ ] add strict month parsing tests for all locales   fixes  2243  obsoletes  2493   2527 ,ichernev,closed,5,2015-09-23 17:41:31,2015-11-09 02:23:50,,,2.11.0,1,1
11614,moment/moment,2635,Fix wrong humanize format with weird custom relative thresholds,Fixes  2289  obsoletes  2360. ,ichernev,closed,1,2015-09-24 04:37:10,2015-11-09 02:25:21,,,,1,1
11613,moment/moment,2636,Same length for weekdaysMin parts  Italian ,Rebasing  as discussed here https://github.com/moment/moment/pull/2237 ,massic80,closed,1,2015-09-24 09:35:48,2015-09-24 16:43:50,,,,1,1
11612,moment/moment,2637, Same length for weekdaysMin parts  Italian  ES6,Rebasing  as discussed here https://github.com/moment/moment/pull/2237 ,massic80,closed,5,2015-09-24 09:39:32,2015-09-25 01:27:38,,,,1,1
11611,moment/moment,2638,Updated strings,Updated tests due to https://github.com/moment/moment/pull/2637 issuecomment 142983561 ,massic80,closed,3,2015-09-24 17:49:20,2015-09-25 01:28:58,,,,1,1
11610,moment/moment,2639,Same length for weekdaysMin parts  Italian  ES6,This is the combination of  2638 and  2637 for on behalf of @massic80  ,jisaacks,closed,2,2015-09-24 21:12:19,2015-11-09 09:58:46,,,2.11.0,1,1
11609,moment/moment,2640,moment   instanceof moment fails,Can it made so that the javascript standard way of finding out what an object   IS   works with moment? With the latest version using  moment   instanceof moment  returns  false .  I can put  moment.prototype = moment.fn  at the beginning of my code and then  moment   instanceof moment  returns  true  and everything seems fine in the ways I am using moment. However  there may be some case where this does not work so it would be real handy to have this ability integrated into the library by a professional to ease our testing when a moment is a moment  if it is as simple to do as it appears.  Thanks in advance  dAc ,nsbawden,closed,4,2015-09-26 21:34:46,2015-11-26 13:50:23,,Enhancement,,,0,1
11608,moment/moment,2641,Implement basic format and comma as ms separator in ISO 8601,Proper implementation for the remaining ISO 8601 pieces.  Fixes  2450 ,ichernev,closed,1,2015-09-29 05:20:01,2015-11-09 02:28:28,,,,1,1
11607,moment/moment,2642,moment.diff in months around Feb 28th is wrong,When using  moment.diff  with 28th Feb  the results wrong. The function reports exactly 1 month difference with any date where the day of the month is 28 or more.      moment  2015 03 28  .diff moment  2015 02 28    months  true ; // 1 moment  2015 03 29  .diff moment  2015 02 28    months  true ; // 1 moment  2015 03 30  .diff moment  2015 02 28    months  true ; // 1 moment  2015 03 31  .diff moment  2015 02 28    months  true ; // 1  // Different result when switching the dates around moment  2015 02 28  .diff moment  2015 03 31    months  true ; //  1.0955585464333781      I can t see a situation where this result would be expected.  http://jsfiddle.net/vjqa50dy/ ,JamesSkinner,closed,6,2015-09-30 08:09:18,2015-10-02 17:35:20,,,,0,1
11606,moment/moment,2643,String dates containing ordinals are treated as invalid, moment  30th September 2015  .format     Returns   Invalid date  . I d expect Moment to detect and correctly handle ordinals  especially when valid . ,JamesDonnelly,closed,1,2015-09-30 09:43:08,2015-10-01 18:42:08,,,,0,1
11605,moment/moment,2644,Change  a few seconds ago  to  seconds ago ,Is this something you want/would accept? How are translations then updated? How is the process of such a change?  If you don t want this in moment.js this is also fine. Feel free to close this ticket then.  Related ticket: owncloud/core 18627   we can also maintain a wrapper  but having it upstream would be the ideal way to solve this ;  ,MorrisJobke,closed,1,2015-10-02 08:04:45,2015-10-02 17:27:07,,,,0,1
11604,moment/moment,2645,Weird parsing behavior for invalid dates with years before 1970,    > moment [2015  null  null] .isValid   < false > moment [1968  null  null] .isValid   < true      The second date is just as invalid as the first date. This appears to be a direct result of the pre 1970 workaround in  https://github.com/moment/moment/blob/develop/src/lib/create/date from array.js . ,elreimundo,closed,5,2015-10-02 16:49:25,2016-08-01 06:16:53,,Bug,,,0,1
11603,moment/moment,2646,Fix  2645   invalid dates pre 1970,Fixes  2645  ,elreimundo,closed,3,2015-10-02 17:26:12,2015-11-09 05:18:41,,,2.11.0,1,1
11602,moment/moment,2647,Calendar reference date ignored.,Hi I ve been trying to set the output of the .calendar   method to  DD/MM/YYYY  for dates that are more than a week ago    So tried various ways to do this. See image attached from my console. It appears the referenceDate in the .calendar method is completely ignored...   [image] https://cloud.githubusercontent.com/assets/2983327/10279726/de826794 6b5f 11e5 88c1 c7e63315229e.png  ,export-mike,closed,8,2015-10-05 11:53:32,2015-10-07 16:41:04,,,,0,1
11601,moment/moment,2648,fix issue  2640: support instanceof operator,refer to  2640  add code to support instanceof operator and make tests. ,alburthoffman,closed,3,2015-10-05 14:48:11,2015-11-09 10:15:35,,,,1,1
11600,moment/moment,2649,German localization,Hi  the short strings for german  de  should look like this:      monthsShort :  Jan_Feb_Mrz_Apr_Mai_Jun_Jul_Aug_Sep_Okt_Nov_Dez  weekdaysShort :  So_Mo_Di_Mi_Do_Fr_Sa       The current version with dots looking very strange and are not required.  Almost same for Austria  de_at :      monthsShort :  J n_Feb_M r_Apr_Mai_Jun_Jul_Aug_Sept_Okt_Nov_Dez  weekdaysShort :  So_Mo_Di_Mi_Do_Fr_Sa       Many thanks in advance. ,lothargrieb,closed,5,2015-10-05 14:58:05,2017-03-18 18:58:25,Menelion,Language,,,0,1
11599,moment/moment,2650,Update README.md,Expansion. ,PeterMortensen,closed,0,2015-10-05 18:04:31,2015-10-07 16:21:19,,,,1,1
11598,moment/moment,2651,Correction of german localization   2649 ,,lothargrieb,closed,5,2015-10-06 06:51:26,2015-12-09 06:04:45,,Language,,,1,1
11597,moment/moment,2652,Correction of german  Austria  localization   2649 ,,lothargrieb,closed,2,2015-10-06 06:53:54,2015-12-09 06:05:02,,Language,,,1,1
11596,moment/moment,2653,Define default english locale instead of using it only.,In the source    en   locale is activated via  getSetGlobalLocale . This means that when I load other locale and change to it  e.g.  moment.locale  pl      then I cannot simply go back to english   moment.locale  en    return still   pl    because en locale is not defined .  I propose to change  getSetGlobalLocale  to  defineLocale  when setting   en   locale. This way english would still be active  but also it will be available later as defined locale. ,zlorf,closed,8,2015-10-06 08:35:50,2015-10-06 18:11:53,,Troubleshooting,,,0,1
11595,moment/moment,2654,Add Node.js v0.12 and v4 to Travis config,Node.js v0.10 is a bit old at this point. ,lukehorvat,closed,2,2015-10-07 04:52:52,2015-11-09 23:29:14,,,,1,1
11594,moment/moment,2655,add/subtract by business days,moment  .add N   businessdays    which increments forward by N business days  defined as mon fri .  similarly with subtract   ,craigryan,closed,3,2015-10-07 05:16:59,2015-10-07 16:14:57,,New Feature,,,0,1
11593,moment/moment,2657,if unsupported locale is set  null error is thrown  instead should fall back to default language,[chooseLocale returns null] https://github.com/moment/moment/blob/49f88864ff411003bfe0550c36defcc75f30d93e/src/lib/locale/locales.js L37  if no matching locale dictionary can be found  which leads to  this._locale  being  null  and subsequent calls using it throwing errors like      TypeError: null is not an object  evaluating  this.localeData  .postformat        It should instead fall back to a default that s always present  either English:      return locales[ en ];       or something configurable:      return locales[defaultLocale];      In our case  we set the locale dynamically passed in the body s  lang  attribute using  moment  .locale document.documentElement.lang    coming from our server. If a new language pops up on the server that isn t yet supported in moment.js or we don t have it included yet  we have a custom moment.js build with only the languages we need   we don t want the error but a safe default fallback until we can include the right locale. ,alexkli,closed,4,2015-10-07 20:40:30,2016-05-10 23:55:08,,,,0,1
11592,moment/moment,2658,Adding own longDateFormats not possible,Why is it not possible to add more formats to the longDateFormats array? ,antpaw,closed,1,2015-10-07 20:53:28,2015-10-13 17:15:09,,,,0,1
11591,moment/moment,2659,Investigate performance tuning of moment creation and comparison,This isn t necessarily a _bug_  but a [StackOverflow user stumbled across an interesting effect] http://stackoverflow.com/a/33003021/634824 .  Rapid creation of two  Date  objects can go through several thousand iterations before getting different values:       javascript setInterval function    console.log new Date  .getTime   === new Date  .getTime   ;   0 ;       [image] https://cloud.githubusercontent.com/assets/1396388/10354742/f8cd389a 6d17 11e5 81ae ffe734550ffb.png   But rapid creation of two  moment  objects gets different values after under 100 iterations:      javascript setInterval function    console.log moment  .isSame moment    ;   0 ;       [image] https://cloud.githubusercontent.com/assets/1396388/10354696/7dbceef2 6d17 11e5 8503 7b049a1f05ab.png   Is this just because a  moment  is more expensive than a  Date  in terms of memory and CPU?  Is there perf work that could be done here?  Does it matter? ,mj1856,open,3,2015-10-08 00:24:11,0000-00-00 00:00:00,,performance,,,0,1
11590,moment/moment,2660,Possible bug in unix  ,not sure if this is a bug or not  but Resharper doesn t like      function unix          return Math.floor  this / 1000 ;        Is  this/1000  valid javascript?    Other methods seem to use this._offset ,PhilPJL,closed,1,2015-10-08 10:55:03,2015-10-08 14:12:59,,,,0,1
11589,moment/moment,2661,fromNow   not rounding correctly for birthday use case,when I create a moment date of Jan 26th 1993  date.fromNow   should return 22 years instead of 23 years.  Example from a pen: http://codepen.io/AaronLlanos/pen/zvzwJz ,AaronLlanos,closed,8,2015-10-08 18:54:48,2015-10-12 19:18:03,,,,0,1
11588,moment/moment,2662,startOf week 53 and 1 returns same day.,I m hoping this is me doing something wrong than a bug. I ve built an app that gets the date of the first day of a week only knowing week number and year.       js moment [2015] .startOf  isoWeek  .week 53 .add 0   day  .format  D/M    > 28/12          sh moment [2016] .startOf  isoWeek  .week 1 .add 0   day  .format  D/M    > 28/12      The second should report 4/1  moment  2016 01 01  .isoWeek   gives 53 and moment  2016 01 04  .isoWeek   gives 1 as expected.  Bug in startOf  or just me? ,dermike,closed,2,2015-10-09 12:37:13,2015-10-13 17:07:15,,,,0,1
11587,moment/moment,2663,Make package compatible with Meteor v1.2,It s currently breaking on apps running Meteor v1.2. Very simple fix.   Line 6 was breaking for me when developing this locally. I had it set up by symlinking this directory over to my packages/ directory within an app. Had to supply the absolute path to  package.json  to get it to work locally  but I think that s only because of my setup. ,nickdandakis,closed,2,2015-10-09 21:52:12,2015-12-01 17:01:21,,,2.11.0,1,1
11586,moment/moment,2664,Unquoted property name caused renaming issue with Google Closure Compiler,Hi   Can these property be defined using quoted string literal? https://github.com/moment/moment/blob/d5262a01beec4f6ed1b0ad73ba2da66782b2f60b/lib/locale/relative.js L2 L14  When I tried to compile moment.js with Google Closure Compiler and moment js externs  these property name is renamed. I think it s better to use string literal like:      var defaultRelativeTime =        future  :  in  s        past    :   s ago        s   :  a few seconds        m   :  a minute        mm  :   d minutes        h   :  an hour        hh  :   d hours        d   :  a day        dd  :   d days        M   :  a month        MM  :   d months        y   :  a year        yy  :   d years   ;     ,jacobcui,closed,1,2015-10-10 12:19:17,2015-10-12 19:10:34,,,,0,1
11585,moment/moment,2665,Implement stricter weekday parsing,This fixes  2614   We still need to do something about dots in the end of weekdays  sample problem is for months too . ,ichernev,closed,2,2015-10-10 20:31:37,2015-11-09 02:30:59,,,2.11.0,1,1
11584,moment/moment,2666,Adds klingon tlh  locale,Adds klingon locale  as proposed in Issue  2431.  Based on some excellent online resources :  ,amaranthrose,closed,11,2015-10-11 12:51:55,2015-12-18 14:36:04,,Language,,2.11.0,1,1
11583,moment/moment,2667,Mai I help translating the documentation in ITA?,May I translate the documentation?  Does exist a place to put these translations? ,roccomuso,closed,1,2015-10-11 16:37:06,2015-10-11 19:57:27,,,,0,1
11582,moment/moment,2668,isValid   method does not seem to be working accurately,The date  100110/09/2015  is invalid.  But running  moment  100110/09/2015    L  .isValid  ;  returns  true .  Please see the [jsfiddle] http://jsfiddle.net/sore2ynm/2/ .  This does not look like expected behaviour. ,jerryjohnjacob,closed,4,2015-10-12 06:23:24,2015-11-26 13:40:31,,Forgiving parsing,,,0,1
11581,moment/moment,2669,Attempt to add support for ordinal format for quarters. Fixes issue  2559,Have some problems removing historical commits from the PR. Please ignore the two initial commits listed. No source code is included with them.  I have added ordinal support for quarters and tests for that according to my understanding of issue  2559. If you also want me to add parsing support  please let me know. Of course also open to any comments you may have to my code. ,joelmheim,closed,4,2015-10-12 07:33:13,2015-11-09 05:21:32,,Enhancement,,2.11.0,1,1
11580,moment/moment,2670, Correction of german localization   2649 ,,lothargrieb,closed,2,2015-10-12 11:23:39,2015-12-09 06:05:31,,Language,,,1,1
11579,moment/moment,2671, Correction of german  Austria  localization   2649 ,,lothargrieb,closed,2,2015-10-12 11:29:08,2015-12-09 06:05:41,,Language,,,1,1
11578,moment/moment,2672,Provide a function that would tell whether a date fragment value is implicit or explicit,The original question: http://stackoverflow.com/questions/33085487/how to tell if moment date object date fragment value is implicit or explicit      js // In the following example  month and day are explicit values. Year is implicit value. //  2015 03 23  moment  23 March    DD MMMM  .format  YYYY MM DD  ;  // In the following example  month is an explicit value. Year and month are implicit. //  2015 01 01  moment  January    MMMM  .format  YYYY MM DD  ;      In the above examples  how to programmatically tell whether the values of month  day and year are implicit or explicit? ,gajus,open,7,2015-10-12 16:45:12,0000-00-00 00:00:00,,New Feature,,,0,1
11577,moment/moment,2673,Provide a function to analyse the format,Provide a function that would provide tokens for the format. This is useful when writing higher order function that wraps  moment . Without it  I must rely to string inspection local implementation which is not reliably to say the least  e.g.      js if  format.indexOf  MM   ===  1    format.indexOf  MMMM   ===  1        throw new Error   format  parameter value must include month format  MM  MMMM .      if  format.indexOf  DD   ===  1    format.indexOf  Do   ===  1        throw new Error   format  parameter value must include day of the month format  DD  Do .         ,gajus,open,1,2015-10-12 17:14:37,0000-00-00 00:00:00,,New Feature,,,0,1
11576,moment/moment,2674,Overwrite system time for testing purposes,It would be nice if it was possible to overwrite moment time for testing purposes  e.g.      js // 10/12/2015 @ 5:40pm  UTC  moment.setTime 1444671639000 ;  // The following would always return 2015 10 12. moment  .format  YYYY MM DD       ,gajus,closed,1,2015-10-12 17:41:38,2015-10-12 19:12:52,,,,0,1
11575,moment/moment,2675,Adding age calculation function,To help with issues like  2331 and  2661   adding a common function to calculate a person s exact age   or other whole year differences between two given calendar dates.  Example Usage:      javascript moment  1976 08 27  .age   // 39      Note that I changed the function slightly from the example in  2331  such that Feb 29th birthdays will fall on Feb 28th in years without leap years.  There s a test for that included. ,mj1856,closed,7,2015-10-12 22:00:22,2015-11-09 05:33:49,,New Feature,,,1,1
11574,moment/moment,2676,endOf  day   returns different results on depending on system locale,I m using getting inconsistent results using moment.endOf  day   with Moment version 2.10.6. This may be because Ubuntu  our server  has TZ of UTC  but locally  OSX  my TZ is Europe London.  Is moment  or the underlying lib  converting the date using the system locale before rolling to the end of day?  Ubuntu      var moment = require  moment   moment  2015 10 12T23:00:00.000Z  .endOf  day  .toISOString    2015 10 12T23:59:59.999Z       OSX      var moment = require  moment   moment  2015 10 12T23:00:00.000Z  .endOf  day  .toISOString    2015 10 13T22:59:59.999Z      ,cressie176,closed,1,2015-10-13 22:20:48,2015-10-13 22:55:34,,,,0,1
11573,moment/moment,2677,Fix accents over spanish version.,Hello.  If I use the current version  Build 2.10.5  of es locale the accent doesn t look ok  even with UTF 8 as charset.  Thanks  Here is the fixed version:      //  moment.js locale configuration //  locale : spanish  es  //  author : Julio Napur  : https://github.com/julionc   function  global  factory       typeof exports ===  object     typeof module  ==  undefined  ? factory require  ../moment    :    typeof define ===  function     define.amd ? define [ moment ]  factory  :    factory global.moment    this  function  moment     use strict ;       var monthsShortDot =  Ene._Feb._Mar._Abr._May._Jun._Jul._Ago._Sep._Oct._Nov._Dic. .split  _            monthsShort =  Ene_Feb_Mar_Abr_May_Jun_Jul_Ago_Sep_Oct_Nov_Dic .split  _  ;      var es = moment.defineLocale  es             months :  Enero_Febrero_Marzo_Abril_Mayo_Junio_Julio_Agosto_Septiembre_Octubre_Noviembre_Diciembre .split  _            monthsShort : function  m  format                if  / MMM /.test format                     return monthsShort[m.month  ];               else                   return monthsShortDot[m.month  ];                                  weekdays :  Domingo_Lunes_Martes_Mi u00e9rcoles_Jueves_Viernes_S u00e1bado .split  _            weekdaysShort :  Dom._Lun._Mar._Mi u00e9._Jue._Vie._S u00e1b. .split  _            weekdaysMin :  Do_Lu_Ma_Mi_Ju_Vi_S u00e1 .split  _            longDateFormat :               LT :  H:mm               LTS :  H:mm:ss               L :  DD/MM/YYYY               LL :  D [de] MMMM [de] YYYY               LLL :  D [de] MMMM [de] YYYY H:mm               LLLL :  dddd  D [de] MMMM [de] YYYY H:mm                     calendar :               sameDay : function                      return  [hoy a la      this.hours    == 1  ?  s  :        ] LT ;                            nextDay : function                      return  [ma u00f1ana a la      this.hours    == 1  ?  s  :        ] LT ;                            nextWeek : function                      return  dddd [a la      this.hours    == 1  ?  s  :        ] LT ;                            lastDay : function                      return  [ayer a la      this.hours    == 1  ?  s  :        ] LT ;                            lastWeek : function                      return  [el] dddd [pasado a la      this.hours    == 1  ?  s  :        ] LT ;                            sameElse :  L                     relativeTime :               future :  en  s               past :  hace  s               s :  unos segundos               m :  un minuto               mm :   d minutos               h :  una hora               hh :   d horas               d :  un d u00eda               dd :   d d u00edas               M :  un mes               MM :   d meses               y :  un a u00f1o               yy :   d a u00f1os                     ordinalParse : / d 1 2  /          ordinal :   d            week :               dow : 1  // Monday is the first day of the week.             doy : 4  // The week that contains Jan 4th is the first week of the year.                 ;      return es;     ;     ,javenosa,closed,3,2015-10-13 23:12:09,2015-10-15 22:13:46,,Language,,,0,1
11572,moment/moment,2678,Rendering calendar option by invocation using function instead of string,Since 2.10.5 we can define calendar options by invocation   http://momentjs.com/docs/ /displaying/calendar time/  But defining option using function seems not to work. Here is my example   I want to render only date   without hours.      moment  .calendar null        sameDay:  [Dzi ]       nextDay:  [Jutro]       nextWeek:  [W najbli szy] dddd       lastDay:  [Wczoraj]       lastWeek: function              switch  this.day                  case 0:                 return  [W zesz   niedziel ] ;             case 3:                 return  [W zesz    rod ] ;             case 6:                 return  [W zesz   sobot ] ;             default:                 return  [W zesz y] dddd ;                      sameElse:  L    ;     ,piernik,closed,6,2015-10-14 10:48:26,2015-10-21 21:46:55,,Bug,Up-For-Grabs,,,0,1
11571,moment/moment,2679,8 tests failed. locale:cs:calendar next week  322.8  locale:cs:calendar next week  322.9  locale:ru:calendar last week  1592.16  locale:ru:calendar last week  1592.18  locale:sk:calendar next week  1632.8  locale:sk:calendar next week  1632.9  locale:zh cn:calendar current week  2017.4  locale:zh cn:calendar next week  2018.1  ,    Client info      Date String   : Wed Oct 14 2015 16:31:13 GMT 0300  E. South America Standard Time  Locale String : 14/10/2015 16:31:13 Offset        : 120 User Agent    : Mozilla/5.0  Windows NT 6.3; WOW64; rv:41.0  Gecko/20100101 Firefox/41.0            locale:cs:calendar next week  322.8   Today   4 days beginning of day      javascript // Expected v ned li v 23:00 // Actual   v sobotu v 23:00  v sobotu v 23:00  ===  v ned li v 23:00             locale:cs:calendar next week  322.9   Today   4 days end of day      javascript // Expected v ned li v 23:59 // Actual   v sobotu v 23:59  v sobotu v 23:59  ===  v ned li v 23:59             locale:ru:calendar last week  1592.16   Today   2 days current time      javascript // Expected             23:59 // Actual           23:59          23:59  ===              23:59             locale:ru:calendar last week  1592.18   Today   2 days end of day      javascript // Expected             23:59 // Actual           23:59          23:59  ===              23:59             locale:sk:calendar next week  1632.8   Today   4 days beginning of day      javascript // Expected v nede u o 23:00 // Actual   v sobotu o 23:00  v sobotu o 23:00  ===  v nede u o 23:00             locale:sk:calendar next week  1632.9   Today   4 days end of day      javascript // Expected v nede u o 23:59 // Actual   v sobotu o 23:59  v sobotu o 23:59  ===  v nede u o 23:59             locale:zh cn:calendar current week  2017.4   Monday   6 days current time      javascript // Expected      12   // Actual        11         11    ===       12               locale:zh cn:calendar next week  2018.1   Today   7 days beginning of day      javascript // Expected      12   // Actual        12         12    ===       12        ,gcgoncalves,closed,1,2015-10-14 19:33:51,2017-12-29 06:27:44,,Unit Test Failed,,,0,1
11570,moment/moment,2680,Format Times Depending on Age,How would one go about formatting times with angular moment  depending on their age.  For example:  Within the last 24 hours: Yesterday at 9:18pm Outside the last 24 hours: Oct 10  10:15am Outside the current year: Dec 4  2012  12:07pm Is something like this possible?  Any help is appreciated. Thanks in advance  ,realph,closed,1,2015-10-15 15:05:11,2015-10-15 15:37:36,,,,0,1
11569,moment/moment,2681,endOf  week   returns incorrect value on midnight DST transition,I m getting what I think is an incorrect result with the Brazilian time zones  specifically with moment.endOf  week   on Chrome  46  and Firefox  43.0a2       javascript d = moment.tz  2015 10 16 20:00:00 0400    America/Cuiaba  ; d.endOf  week  .format      >  2015 10 17T22:59:59 04:00       The  missing hour  in this transition is actually 00:00:00 04:00 to 01:00:00 03:00  so  endOf  week    should be 23:59:59 0400.  startOf  week    in the subsequent week correctly reports 2015 10 18 01:00:00 0300. ,irvingreid,closed,4,2015-10-15 15:45:28,2015-10-15 22:27:12,,,,0,1
11568,moment/moment,2682,Correction of spanish localization,Fix accents over spanish locale. ,javenosa,closed,3,2015-10-15 21:54:24,2015-10-16 04:07:33,,,,1,1
11567,moment/moment,2683,en NZ locale  values from windows locale settings,,lukemcgregor,closed,5,2015-10-18 22:13:26,2015-11-10 08:29:32,,Language,,,1,1
11566,moment/moment,2684,fix Ukrainian version when build relative time,,max-mykhailenko,closed,3,2015-10-19 13:05:46,2015-12-01 17:04:55,,,2.11.0,1,1
11565,moment/moment,2685,Added an HTML import for Polymer and Web Components,,BLamy,closed,5,2015-10-19 15:26:00,2016-01-16 06:27:43,,,,1,1
11564,moment/moment,2686,Leap Year Test / Doc Typo,Okay  now I really think I m losing my mind   Is there a typo in the docs...   moment [2010  1  29] .isValid  ;  // false  not a leap year    The [possibly] ironic part is this same logic appears on a StackOverflow answer from 2013:  http://stackoverflow.com/questions/16353211/check if year is leap year in javascript  Leap years are when February  month 2  has 29 days  known as the  leap day  .  Shouldn t we be checking  2010  2  29 ?  Normally I d think this was a typo  but the same logic is in two places.  So  either there s a interesting irony here  or I m about to publically humiliate myself twice. ,FredLackeyOfficial,closed,3,2015-10-19 16:19:00,2015-10-19 18:06:42,,,,0,1
11563,moment/moment,2687,Parser should not return a valid date for strings only containing  a  or  p  with  a  format,The following permissive parser returns a  valid  date:      moment  help yourself to pork pies   [    MM/DD/YYYY h:mma  ] .isValid   // true      This appears to be true for any non numeric string containing either  a  or  p   which are accepted by the   a   formatting string. The date is midnight of the current day.  This is nonsensical behavior   I d suggest that no string should be judged valid solely on the basis of the   a   token. Obviously strict mode would help  but strict mode isn t desirable when parsing user input. ,nrabinowitz,closed,1,2015-10-20 00:58:45,2016-02-25 16:57:13,,Troubleshooting,,,0,1
11562,moment/moment,2688,moment.duration does not produce same values when converting units,I think I have found an inconsistency  converting a year to seconds  and then those seconds into years doesn t produce the expected value  1 .      javascript var duration_1year = moment.duration 1   year  ; var seconds_1year = duration_1year.asSeconds  ;  var newDuration = moment.duration seconds_1year   seconds  ; var newDurationAsYears = newDuration.asYears  ; console.log     Moment  moment.version     says that a year is   seconds_1year   seconds  but again it claims that n     seconds_1year   seconds is   newDurationAsYears   years  ;      This code produces the following output;      Moment 2.10.6 says that a year is 31536000 seconds  but  31536000 seconds is 0.9993360575508053 years     ,furkanmustafa,open,5,2015-10-20 06:33:51,0000-00-00 00:00:00,,Bug,,,0,1
11561,moment/moment,2689,Change the weekend days to Friday and Saturday,Hi  I want to change the weekend days from Saturday and Sunday to be Friday and Saturday   Please if you can tell me how to do it would be nice. ,heavenchains,closed,1,2015-10-20 10:58:02,2015-10-21 21:17:20,,,,0,1
11560,moment/moment,2690,Update it.js,update weekdaysMin to 2 letters ,pungggi,closed,4,2015-10-20 15:10:11,2015-12-01 17:07:45,,Language,,,1,1
11559,moment/moment,2691,Allow calendar to use functions,This is in response to the issue  2678  I have tried to fix the bug by checking if it is a function or not  similar to what is done in this file      Javascript // src/lib/locale/calendar.js export function calendar  key  mom  now        var output = this._calendar[key];     return typeof output ===  function  ? output.call mom  now  : output;        Also a test file was created  as suggested by @mj1856 . I was wondering if there are any arguments to be passed in the function via call method. Any suggestions/reviews? ,kepta,closed,6,2015-10-21 08:23:06,2015-11-09 05:31:43,,Enhancement,,2.11.0,1,1
11558,moment/moment,2692,2 tests failed. locale:el:calendar last week  462.7  locale:zh cn:calendar last week  2019.1  ,    Client info      Date String   : Wed Oct 21 2015 19:55:54 GMT 0200  E. South America Daylight Time  Locale String : 10/21/2015  7:55:54 PM Offset        : 120 User Agent    : Mozilla/5.0  Windows NT 6.3; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/46.0.2490.71 Safari/537.36            locale:el:calendar last week  462.7   Today   3 days beginning of day      javascript // Expected                              1:00    // Actual                               1:00                                 1:00     ===                               1:00                locale:zh cn:calendar last week  2019.1   Monday   1 days next week      javascript // Expected      12   // Actual        1         1    ===       12        ,ffarzat,open,1,2015-10-21 21:57:20,0000-00-00 00:00:00,,Unit Test Failed,,,0,1
11557,moment/moment,2693,Update ta.js,Updated the number format in tamil when tamil locale is chosen ,krishnakumar03,closed,7,2015-10-22 05:29:44,2015-12-01 17:38:38,,Language,,,1,1
11556,moment/moment,2694,Question: isSame   week returns false while comparing consequent weekend days. How would you play around it?,    moment  2015 10 24  .isSame  2015 10 25    week  ; // false      What would I need to do  to get  true  out of this comparison?  Same goes to:      moment.duration moment  .diff moment  .startOf  week    .asHours  ; // would return 0 at Sunday 00:00   01:00 AM      Anyone? Thanks.    EDIT:  Sorry  was too hurry. Found it:      moment.locale  en         week:           dow: 1 // Monday is the first day of the week.         ;     ,mr-moon,closed,0,2015-10-22 17:49:11,2015-10-22 18:38:59,,,,0,1
11555,moment/moment,2695,can provide a branch that only formatting related to keep momentjs fit,As titled  most of time people use momentjs to display instead of manipulate  so suggest give a build option / branch only related to display/formatting to make it faster.  Is it possible? ,futurist,closed,1,2015-10-23 06:36:15,2015-10-24 18:20:40,,,,0,1
11554,moment/moment,2696,RequireJS fix?,Old version that I use  2.6.0  in production has define like so: define  moment   function  require  exports  module    That works. The new version 2.10.6  change in maybe one in the middle  does not. Please review my fix  thank you. ,piddle,closed,2,2015-10-23 16:37:30,2015-11-10 08:41:44,,,,1,1
11553,moment/moment,2697,isAfter   returns  true  when given an  undefined  or  null  variable,When using the isAfter method I provided the first argument with a variable. If the variable is  null  or  undefined  I expected a return result of  false   but instead I got  true .  example:      javascript var day = null; moment  .isAfter day ; // => true  day = moment  .subtract 1   days  ; moment  .isAfter day ; // => true      I realize this is because if you pass nothing into a query method  it assumes  today . But that was not my expected interaction with it. Since I was in fact not passing in  nothing .  expected results:      javascript var day = null; moment  .isAfter day ; // => false  day = moment  .subtract 1   days  ; moment  .isAfter day ; // => true     ,coreyzev,open,12,2015-10-24 06:09:35,0000-00-00 00:00:00,,,,0,1
11552,moment/moment,2698,How to convert from UTC to local time,I have a simple use case but I cannot figure out how to convert from GMT/UTC to local time in moment.js.   Example:       var gmtDateTime = moment.utc  2015 10 24 20:00    YYYY MM DD HH  .format  YYYY MMM DD h:mm A  ;       console.log gmtDateTime   emits  2015 Oct 24 8:00 PM   which is correct. Now I simply want to convert this to my local time  which happens to be Mountain Daylight Time. So the correct converted date would be  2015 Oct 24 2:00 PM   because I am 6 hours earlier than GMT/UTC.  How can this be done simply with moment.js?  THANKS   ,HerrimanCoder,closed,1,2015-10-24 17:33:37,2015-10-24 18:16:11,,,,0,1
11551,moment/moment,2699,Day that have 25 hours. Daylight savings.,Check this js fiddle.  http://jsfiddle.net/mauron85/aujyeacc/ ,mauron85,closed,6,2015-10-25 16:54:20,2015-10-25 19:49:21,,,,0,1
11550,moment/moment,2700,Add hmm and hmmss formatting tokens,Now hmm and hmmss will be properly parsed. Note that  hmm  can parse  123  as 1 hour 23 minute and also  1234  which is 12 hour and 34 minutes  Fixes  2418  ,ichernev,closed,3,2015-10-26 08:19:40,2015-11-09 02:51:13,,,2.11.0,1,1
11549,moment/moment,2701,date with format parsing bug, moment  Oct 10th 2015   MM Do YYYY  true .toString    returns  Thu Oct 01 2015 00:00:00 GMT 0700 .  Shouldn t it return Oct 10? ,cepm-nate,closed,1,2015-10-26 18:22:10,2015-10-26 18:42:58,,,,0,1
11548,moment/moment,2702,Week rework,A few changes fixing issues with the week calendar.  Fixes  2457 and  1379 ,ichernev,closed,2,2015-10-27 08:10:00,2015-11-09 02:54:26,,,2.11.0,1,1
11547,moment/moment,2703,order of quarter token is affecting date output, moment  Q1 March 2015    [Q]Q MMMM YYYY    will return an expected date of Sun Mar 01 2015 00:00:00 GMT 0500  US Eastern Standard Time   but  moment  March Q1 2015    MMMM [Q]Q YYYY    returns Thu Jan 01 2015 00:00:00 GMT 0500  US Eastern Standard Time .  Actually formatting   moment  .format  MMMM [Q]Q YYYY     an already made moment object works just fine and as expected.  As such the workaround  moment  March Q1 2015    MMMM [Q1][Q2][Q3][Q4] YYYY    is  technically  valid.  documented here: http://jsfiddle.net/3o631puy/ ,mhedrick,closed,2,2015-10-27 16:30:50,2017-04-05 05:15:53,,,,0,1
11546,moment/moment,2704,isoWeekday String  inconsistent with isoWeekday Number  on Sunday,  isoWeekday 7    gives me Sunday of   this   iso week  monday sunday    isoWeekday  Sunday     gives me the Sunday of   previous   iso week   [screen shot 2015 10 28 at 07 53 49] https://cloud.githubusercontent.com/assets/2909621/10781644/2eb5712a 7d49 11e5 9a5b e404cf5ff4c5.png   version: https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.10.6/moment.min.js ,nvdh,closed,5,2015-10-28 06:56:41,2016-06-14 09:47:21,,Bug,Documentation,Up-For-Grabs,,,0,1
11545,moment/moment,2705,GMT 01:00,Cannot generate the above string with format. e.g.      js moment  .format  HH:mm:ss GMTZZ  ;     ,adaptabi,closed,1,2015-10-28 15:51:26,2015-10-29 22:23:00,,,,0,1
11544,moment/moment,2706,Calling  endOf  month    mutates the original moment.,For the give code snippet      moment1 = moment new Date  2015 10 30    console.log moment1.toDate    // Fri Oct 30 2015 00:00:00 GMT 0530  IST   moment2 = moment1.endOf  month   console.log moment1.toDate    // Sat Oct 31 2015 23:59:59 GMT 0530  IST       I am not able to figure out the reasoning for the output produced.   I expected that  moment1  would remain the same.  ,chetankothari,closed,1,2015-10-28 16:09:05,2015-10-28 16:11:32,,,,0,1
11543,moment/moment,2707,Time Setter,It would be useful to have a function to set the time as a string.  Currently we only have functions for setting each individual component of time.  Examples:      javascript var m = // some moment object m.time  23:55  ; m.time  23:55:00  ; m.time  23:55:00.1234567  ; m.time  11:55 PM    h:mm A  ;      Currently  one has to do something like this to achieve the same effect:      javascript moment m.format  YYYY MM DD           timeString   YYYY MM DD     formatOfTimeString       Parsing and  reformatting is not good  as it ignores any subtleties such as the utc/local mode  offset  or time zone. ,mj1856,closed,9,2015-10-28 18:25:58,2016-02-02 18:33:12,,New Feature,Up-For-Grabs,,,0,1
11542,moment/moment,2708,Multiple moment versions in node project can cause problems,I was running into this error when trying to format an incoming date that is a moment object from a different version:      moment possibleExistingMomentObjectFromAnotherVersion .utc  .format  YYYY MM DD HH:mm:ss            TypeError: Cannot read property  postformat  of undefined     at Moment.format  /var/app/current/node_modules/mantis reporting/node_modules/moment/moment.js:1951:33      ,parisholley,open,3,2015-10-28 19:59:55,0000-00-00 00:00:00,,Troubleshooting,,,0,1
11541,moment/moment,2709,Add convenience methods for date comparisons,    isSameOrAfter     isSameOrBefore ,nscornia,closed,7,2015-10-28 21:39:32,2015-12-01 17:43:15,,,2.11.0,1,1
11540,moment/moment,2710,Locale Calendar   Capitalization ,Hi   When using the .calendar   function inside a sentence  the resulting text looks bad due to capitalization. For example:  We re open Today at 12:00 .  We re open Tomorrow at 1:00 pm .  Possible hacking solutions have different problems:   Uncapitalize the first letter won t work if the resulting string is  Thursday at 12:00 .   Uncapitalize specifically the words  Today    Tomorrow    Next week  won t work for different languages unless we have a long search replace list for all languages.  I suggest adding another sent of calendar locale definitions for the case were the calendar needs to be mid sentence  and a parameter to the calendar function.  Thanks. ,3LOK,open,0,2015-10-29 09:09:20,0000-00-00 00:00:00,,Enhancement,,,0,1
11539,moment/moment,2711,Locale Calendar   Today at xxxx,Hi   Another request in the .calendar   function s locale definition. For  Today at 12:00  you simply want sometime to just write  at 12:00 . For example   We ll open at 12:00 .  Can we add another locale calendar definition for just [at]  and an option in the .calendar   function to use that definition for today?  Thanks   ,3LOK,open,2,2015-10-29 09:11:11,0000-00-00 00:00:00,,Enhancement,,,0,1
11538,moment/moment,2712,isValid   returns true for invalid ISO8601 format,,xpepermint,closed,1,2015-10-29 16:52:58,2015-10-29 17:51:12,,,,0,1
11537,moment/moment,2713,Turkey Just announced extension to DST for 2 weeks effective immediately. ,http://time.is/time_zone_news  > Turkey s DST extension is now official > 2015 10 01 > As previously reported by several unofficial channels  Turkey will keep Daylight Saving Time  DST  two weeks longer than usual this year. This decision has now been confirmed by the official news agency Anadolu Ajans   and published in the governmental Resim Gazete. > The DST extension is intended to facilitate the 1 November 2015 election  by ensuring that the sun is still up when the poll closes at 5 pm. > Daylight Saving Time in Turkey will end at 4 am on 8 November 2015.  Would it be possible to get an update version before sunday to account for this? ,hemlok,closed,1,2015-10-29 21:20:44,2015-10-29 22:20:56,,,,0,1
11536,moment/moment,2714,Improve the moment timezone interface,This is a design change proposal for a future version  ie. 3.0   Currently  moment timezone works by monkey patching several moment functions.  This has led to inconsistent behavior and several bugs in moment timezone.  It would be preferred if moment had an explicit interface for moment timezone to plug into. ,mj1856,open,1,2015-10-29 22:31:30,0000-00-00 00:00:00,,rewrite,,3.0,0,1
11535,moment/moment,2715,Function to get next/last DST transitions,See moment/moment timezone 266.  This issue tracks the moment part.  It needs to scan the local environment by interrogating the offsets for various dates.  @timrwood  and I both did something similar working on time zone detection  so we can repurpose that here. ,mj1856,open,0,2015-10-30 04:37:38,0000-00-00 00:00:00,,DST,New Feature,,,0,1
11534,moment/moment,2716,Update .travis.yml,Test also against node_js versions 0.12 and 4. ,paladox,closed,1,2015-10-30 10:18:19,2015-11-10 08:44:38,,,,1,1
11533,moment/moment,2717,Update Gruntfile.js,Update os and browsers to test against. ,paladox,closed,3,2015-10-30 10:22:48,2015-11-10 08:46:15,,,,1,1
11532,moment/moment,2718,Replace esperanto with Babel,Warnings are showing in travis ci that esperanto and isn t being developed anymore and is deprecated and that to replace it with Babel instead. ,paladox,closed,3,2015-10-30 10:29:48,2015-12-09 06:18:18,,,,1,1
11531,moment/moment,2719,Fix deperecation warnings caught by travis ci,Please fix deprecation warnings caught by travis ci https://travis ci.org/moment/moment/builds/88308563  355Deprecation warning: moment  .add period  number  is deprecated. Please use moment  .add number  period .  356Deprecation warning: moment  .subtract period  number  is deprecated. Please use moment  .subtract number  period .  357Deprecation warning: toIsoString   is deprecated. Please use toISOString   instead  notice the capitals   358Error  359    at Duration.toIsoString  /home/travis/build/moment/moment/build/umd/moment.js:750:36   360    at Object.<anonymous>  /home/travis/build/moment/moment/build/umd/test/moment/duration.js:322:42   361    at Object.Test.run  /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:136:18   362    at /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:279:10  363    at process  /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:1277:24   364    at null._onTimeout  /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:383:5   365    at Timer.listOnTimeout [as ontimeout] timers.js:121:15   366Deprecation warning: years accessor is deprecated. Use year instead  367Error  368    at Moment.years  /home/travis/build/moment/moment/build/umd/moment.js:750:36   369    at Object.<anonymous>  /home/travis/build/moment/moment/build/umd/test/moment/getters_setters.js:86:11   370    at Object.Test.run  /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:136:18   371    at /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:279:10  372    at process  /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:1277:24   373    at null._onTimeout  /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:383:5   374    at Timer.listOnTimeout [as ontimeout] timers.js:121:15   375Deprecation warning: months accessor is deprecated. Use month instead  376Error  377    at Moment.months  /home/travis/build/moment/moment/build/umd/moment.js:750:36   378    at Object.<anonymous>  /home/travis/build/moment/moment/build/umd/test/moment/getters_setters.js:87:11   379    at Object.Test.run  /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:136:18   380    at /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:279:10  381    at process  /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:1277:24   382    at null._onTimeout  /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:383:5   383    at Timer.listOnTimeout [as ontimeout] timers.js:121:15   384Deprecation warning: dates accessor is deprecated. Use date instead.  385Error  386    at Moment.dates  /home/travis/build/moment/moment/build/umd/moment.js:750:36   387    at Object.<anonymous>  /home/travis/build/moment/moment/build/umd/test/moment/getters_setters.js:88:11   388    at Object.Test.run  /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:136:18   389    at /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:279:10  390    at process  /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:1277:24   391    at null._onTimeout  /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:383:5   392    at Timer.listOnTimeout [as ontimeout] timers.js:121:15   393Deprecation warning: moment.lang is deprecated. Use moment.locale instead.  394Error  395    at Function.lang  /home/travis/build/moment/moment/build/umd/moment.js:750:36   396    at Object.<anonymous>  /home/travis/build/moment/moment/build/umd/test/moment/locale.js:195:16   397    at Object.Test.run  /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:136:18   398    at /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:279:10  399    at process  /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:1277:24   400    at null._onTimeout  /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:383:5   401    at Timer.listOnTimeout [as ontimeout] timers.js:121:15   402Deprecation warning: moment.langData is deprecated. Use moment.localeData instead.  403Error  404    at Function.langData  /home/travis/build/moment/moment/build/umd/moment.js:750:36   405    at Object.<anonymous>  /home/travis/build/moment/moment/build/umd/test/moment/locale.js:198:29   406    at Object.Test.run  /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:136:18   407    at /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:279:10  408    at process  /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:1277:24   409    at null._onTimeout  /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:383:5   410    at Timer.listOnTimeout [as ontimeout] timers.js:121:15   411Deprecation warning: moment  .lang   is deprecated. Instead  use moment  .localeData   to get the language configuration. Use moment  .locale   to change languages.  412Error  413    at Duration.lang  /home/travis/build/moment/moment/build/umd/moment.js:750:36   414    at Object.<anonymous>  /home/travis/build/moment/moment/build/umd/test/moment/locale.js:289:40   415    at Object.Test.run  /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:136:18   416    at /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:279:10  417    at process  /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:1277:24   418    at null._onTimeout  /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:383:5   419    at Timer.listOnTimeout [as ontimeout] timers.js:121:15   420Deprecation warning: moment  .zone is deprecated  use moment  .utcOffset instead. https://github.com/moment/moment/issues/1779  421Error  422    at Moment.zone  /home/travis/build/moment/moment/build/umd/moment.js:750:36   423    at Object.<anonymous>  /home/travis/build/moment/moment/build/umd/test/moment/utc.js:63:15   424    at Object.Test.run  /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:136:18   425    at /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:279:10  426    at process  /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:1277:24   427    at null._onTimeout  /home/travis/build/moment/moment/node_modules/qunit/node_modules/qunitjs/qunit/qunit.js:383:5   428    at Timer.listOnTimeout [as ontimeout] timers.js:121:15  ,paladox,closed,3,2015-10-30 10:31:13,2016-04-01 12:20:42,,Help Wanted,,,0,1
11530,moment/moment,2720,[Ignore this],,needo2,closed,1,2015-10-30 15:37:35,2015-10-30 15:40:09,,,,0,1
11529,moment/moment,2721,Fix moment creation with object of strings,Fixes problem with parsing Aug 31st for objects with string values  see test for an example of the problem . Analogous behavior to problem in  1870 with arrays ,troyastorino,closed,3,2015-10-31 00:44:03,2015-12-01 17:45:35,,,2.11.0,1,1
11528,moment/moment,2722,Update Malay translations,,od3n,closed,6,2015-10-31 15:50:25,2016-03-21 00:33:45,Menelion,Language,,,1,1
11527,moment/moment,2723,Show arguments in deprecation warnings.,Add an  arguments  line to show more information about where the deprecated call was used.  Closes  2356   Here s a jsfiddle with a demonstration: http://jsfiddle.net/sc6x537w/  [image] https://cloud.githubusercontent.com/assets/148787/10866892/efb63c2a 8013 11e5 9ba7 10de97b4443f.png  ,calebcauthon,closed,2,2015-11-01 02:12:57,2015-12-09 06:21:41,,,2.11.0,1,1
11526,moment/moment,2724,Hour diff test fails if being run in the hour preceding a switch from DST to Standard Time,Test is no longer dependent on the time it s being run. Test date is now statically set to the Summer Solstice of 2015 which should make it immune to DST related inconsistencies. ,zbarnett,closed,3,2015-11-01 06:39:59,2015-12-09 06:23:08,,,2.11.0,1,1
11525,moment/moment,2725,moment.date  day .month  month .year  year  behaves different than moment [ year   month   date] ,The date is parsed differently using these two setter methods. When setting the date to  October 31  2015 . The chained method returns  2015 10 01  while the init method returns  2015 10 31       var year = 2015; var month = 9; //october var day = 31;  console.log moment  .date day .month month .year year .format  YYYY MM DD   ; //2015 10 01  console.log moment [year  month  day] .format  YYYY MM DD   ; //2015 10 31      JS Fiddle: http://jsfiddle.net/dgnjer7z/ ,aoxrud,closed,4,2015-11-02 16:49:13,2015-11-26 13:15:43,,,,0,1
11524,moment/moment,2726,Fix Macedonian locale,,B0k0,closed,2,2015-11-03 02:54:15,2015-12-09 06:26:11,,,2.11.0,1,1
11523,moment/moment,2727,When initializing an invalid date by using constructor with format  toISOString   returns current date,Hello   during app development I noticed a confusing issue. If an invalid date is initialized by using the constructor with the format parameter  the method  toISOString    returns the current date.   [bug momentjs] https://cloud.githubusercontent.com/assets/1684826/10911672/31ac4ae6 8246 11e5 8841 03527027ed91.png  ,Fensterbank,closed,2,2015-11-03 15:45:56,2015-12-10 07:16:56,,Bug,,,0,1
11522,moment/moment,2728,September should be abbreviated as Sept.,Currently  moment  uses Sep for the September abbreviation  but per the OED it should be Sept.  http://public.oed.com/how to use the oed/abbreviations/ s ,aweary,closed,6,2015-11-03 22:02:42,2016-01-09 09:13:31,,Language,Up-For-Grabs,,,0,1
11521,moment/moment,2729,moment  .format does not alert when passed in undefined ,moment  .format can take zero arguments  but when the first argument is undefined  it should throw or return null.  The reason is: One time I happened to passed a undefined variable. It formats to wrong result leading the following procedure got wrong result  which I discover this a long time after.  Hiding exception is dangerous ,yinrong,closed,1,2015-11-04 01:07:41,2015-11-26 13:09:42,,,,0,1
11520,moment/moment,2730,moment cannot always parse moment default formatted negative years,Hello   The following is perhaps off limits  but seems an issue:      javascript var min = moment   271821 04 20 02:00  ; console.log min.format   ; //  271821 04 20T02:00:00 02:00  var tsm = moment min.format   ; console.log tsm.format   ; //  271821 04 20T02:00:00 02:00  var ts1 = moment   000001 01 01 00:00  ; console.log ts1.format   ; //  0001 01 01T00:00:00 01:00  var ts2 = moment ts1.format   ; console.log ts2.format   ; // Invalid date  var ts3 = moment   000002 12 31T23:00:00.000Z  ; console.log ts3.format   ; //  0001 01 01T00:00:00 01:00  var ts4 = moment ts3.format   ; console.log ts4.format   ; // Invalid date      I know it is better to tell moment the format while parsing but shouldn t moment at least be able to parse the format it produces by default ? ,gautaz,open,3,2015-11-04 15:28:45,0000-00-00 00:00:00,,Bug,,,0,1
11519,moment/moment,2731,Added dot after days and [kl.] on time formats for  nn  locale,@mechuwind Date and time format more in line with official guide lines http://www.sprakradet.no/sprakhjelp/Skriveregler/Dato/ ,kambo,closed,2,2015-11-05 15:14:06,2015-12-09 06:29:55,,,,1,1
11518,moment/moment,2732,moment.utc  2015 11 01  .format  YYYY MM DD   return  2015 11 02  ? ? ?,my bad...I added a day. Strange that props seam to stay the same ,ruifortes,closed,1,2015-11-05 20:14:34,2015-11-05 20:19:34,,,,0,1
11517,moment/moment,2733,Support the en IE locale,Support the IS/EN 28601 standard for date time formats in Ireland.  See:  http://lists.w3.org/Archives/Public/www international/2001JulSep/0037.html for an in depth discussion on how it should be formatted.  ,chriscartlidge,closed,2,2015-11-06 17:03:24,2016-02-25 23:00:32,,Enhancement,Language,,,0,1
11516,moment/moment,2734,ADDED: Support for the en ie locale based on the IS/EN 28601 standard.,This PR adds support for the IS/EN 28601 date time formats. We used the W3C post from John Cowan as guidance. He s a convenor who is on the national character set committee in Ireland.  See: http://lists.w3.org/Archives/Public/www international/2001JulSep/0037.html  Issue: https://github.com/moment/moment/issues/2733 ,chriscartlidge,closed,3,2015-11-06 17:08:08,2015-12-09 06:40:45,,,2.11.0,1,1
11515,moment/moment,2735,Reset the locale back to  en  after defining all locales in min/locales.js,Right now  if you include/import/load locales.js the locale is changed to  zh tw   because it is the last one defined. This patch resets the locale to  en  after all locales are defined.  Fixes  1798 ,ichernev,closed,1,2015-11-07 20:26:11,2015-11-09 02:34:00,,,,1,1
11514,moment/moment,2736,Loading moment twice discards extensions,Consider the following use case: 1. Project loads  moment  2. Project loads an extension  for example https://github.com/moment/moment timezone  3. Project loads another dependency which loads  moment   This causes the extension to be discarded  as moment is redefined. Trying to use the extension causes  moment.extension is undefined  error.    Expected behaviour   When moment loads  it checks if it is already loaded. If it is already loaded  it returns silently. Resulting extensions to remain defined and usable.    Proposed fix        javascript if  global.moment  == undefined      // Moment is already loaded  don t redefine   return;        I think this should be inserted before https://github.com/moment/moment/blob/develop/moment.js L8 ,TimvdLippe,closed,12,2015-11-08 22:11:26,2017-10-11 12:49:53,,Bug,Troubleshooting,,,0,1
11513,moment/moment,2737,Customisable day length for .humanize  ,Hi there.  Someone naievely tossed moment.humanize calls all through our application which has resulted in some epic confusion.  it d be super awesome to be able to define that a day is  8 hours  or  7.5 hours   Not super urgent  just would be a nifty feature. ,freman,open,1,2015-11-09 00:32:07,0000-00-00 00:00:00,,Enhancement,,,0,1
11512,moment/moment,2738,Fix language  meridiem and days of week.,Fixed 1. Grammatically corrected the words 2. Corrected the mini form of week days 2. Corrected the meridiem time 3. Corrected day of week and day of year  Rework of  2446 ,ichernev,closed,1,2015-11-09 04:02:01,2015-11-09 04:03:26,,,2.11.0,1,1
11511,moment/moment,2739,Add ; before each main file s IIFE,This is the proper implementation of  2195   I m not sure if the minified files should also start with a semicolon. ,ichernev,closed,1,2015-11-09 06:14:25,2015-12-09 06:47:08,,,2.11.0,1,1
11510,moment/moment,2740,Enable  d hh:mm:ss.sss  format for durations,Fix  2342 ,ichernev,closed,1,2015-11-09 06:35:59,2015-12-09 06:48:58,,,2.11.0,1,1
11509,moment/moment,2741,Fix cases in Croatian,Fix  2557.  Also make it easier to write standalone/format variants of months and weekdays. ,ichernev,closed,1,2015-11-09 09:54:43,2015-12-09 06:53:05,,,2.11.0,1,1
11508,moment/moment,2742,[Please ignore this],,darkred,closed,0,2015-11-09 23:24:10,2015-11-10 00:24:34,,,,0,1
11507,moment/moment,2743,Why this strict parsing is failing?,    moment  Tue Nov 10 2015 00:09:10  02:00   ddd MMM DD YYYY hh:mm:ss Z  true .isValid   // false     ,thelinuxlich,closed,1,2015-11-10 00:55:05,2015-11-10 02:05:07,,,,0,1
11506,moment/moment,2744,Only call setFullYear when necessary,This reapplies  2465  which was approved for 2.10.6  but somehow got deleted before it was merged.  Basically  the comments are wrong about the  Date  object not accepting years before 1970.  It s just that it re maps years 0 to 99 to 1900 1999 in a strange attempt at a Y2K fix. ,mj1856,closed,4,2015-11-10 06:19:24,2015-12-09 06:54:27,,,2.11.0,1,1
11505,moment/moment,2745,month the return is different,I m doing a test object moment  but the return is different from my country admitted to give me 1 month apart  I m doing wrong     scope.horaReal =moment    years:2015  months:11  date:10 hour:12  minute:00   ; //HTML   >  hora:  2015 12 09T18:10:00.000Z    http://embed.plnkr.co/zML9HoAEm7q3cwk27PQt/preview ,newmesiss,closed,2,2015-11-11 03:08:43,2015-11-26 12:57:14,,,,0,1
11504,moment/moment,2746,Changed September Abbreviation to  Sept  in locale specific english files and default locale file,I hope this fixes  2728   ,mbad0la,closed,11,2015-11-12 06:53:45,2015-12-09 07:14:36,,,,1,1
11503,moment/moment,2747,if expiry date is less than 3 months then show the validation message  issue in comparing in if    condition ,    js      document .ready function                 expirydate  .blur function                checkmydate  ;           ;                ;     function checkmydate            var duration= moment.duration 6   M  .humanize  ;         var expirydate =     expirydate  .val  ;         var today = moment  .format  L  ;         var dt = moment expirydate .diff moment today  ;         var result = moment.duration dt .humanize  ;          if result <= duration               var msg =  Expiry Date should be greater than 3 months ;                .alert  .html msg ;          else                 .alert  .html    ;                      the if condition is not working ...  any help is highly appreciated. ,asifrafeeq,closed,1,2015-11-12 07:16:38,2015-11-26 12:56:49,,,,0,1
11502,moment/moment,2748,isAfter   returns wrong boolean result,I could be mistaken but I think there is a bug in the isAfter ...  method. Here s what I ve got:      javascript var clientDate = moment  2015 11 11T17:37:00  // 5:37pm var openingDate = moment  .hours 17 .minutes 00 .seconds 0 .milliseconds 0 // 5pm if  clientDate.isAfter openingDate         console.log  is after     else       console.log  is not after              This prints  is not after  for me.  I also tried the  toString    method and received the following:      open date: Wed Nov 11 2015 17:00:00 GMT 0000 client date: Wed Nov 11 2015 17:37:00 GMT 0000      _disclaimer: I am using this in  Parse.com  cloud code but I imported the latest master library  2.10.0  from your repo._ ,jlnbuiles,closed,2,2015-11-12 16:18:51,2015-12-21 01:41:26,,,,0,1
11501,moment/moment,2749,startOf  hour   and endOf  hour   not DST aware,For the hour when DST ended in the  ECT  Europe/Copenhagen   timezone   startOf  hour    mutates the moment to the start of the previous hour instead of the current hour:      js moment  2015 10 25T02:00:00.000 02:00  .unix  ; // 1445731200  an hour before DST ended  moment  2015 10 25T02:00:00.000 01:00  .unix  ; // 1445734800  the extra hour  moment  2015 10 25T03:00:00.000 01:00  .unix  ; // 1445738400  the hour after DST ended   // however  with startOf  hour    this happens moment  2015 10 25T02:00:00.000 02:00  .startOf  hour  .unix  ; // 1445731200  good  moment  2015 10 25T02:00:00.000 01:00  .startOf  hour  .unix  ; // 1445731200  bad  this should be 1445734800  moment  2015 10 25T03:00:00.000 01:00  .startOf  hour  .unix  ; // 1445738400  good       Might be related to https://github.com/moment/moment/issues/1990. Tested on version 2.10.6 ,joelmukuthu,open,4,2015-11-13 15:54:19,0000-00-00 00:00:00,,Bug,DST,Up-For-Grabs,,,0,1
11500,moment/moment,2750,Add locale format option LY for MM/DD/YY in en and en gb,PR for Issue https://github.com/moment/moment/issues/2158  Localized MM/DD/YY     Changes Summary     Adds locale format option  LY  to format date as:       MM/DD/YY  in  en       DD/MM/YY  in  en gb   cc: locale author  @chrisgedrim    Includes corresponding tests.   grunt test  output screenshot below.  <img width= 417  alt= screen shot 2015 11 16 at 4 09 47 pm  src= https://cloud.githubusercontent.com/assets/6678014/11187506/937517ac 8c7e 11e5 822c 7e4104d557f0.png > ,blankmaker,closed,12,2015-11-16 16:27:33,2016-03-30 00:48:37,,,,1,1
11499,moment/moment,2751,fromNow and toNow,If I understand this right then one of these  fromNow  and  toNow  functions should be used for dates in the past and the other for dates in the future? Could there be a new function like  relative  or something that determines which to use based on if the date provided is in the past or future? Would simplify the application logic. ,rightaway,closed,1,2015-11-16 21:24:11,2015-11-26 12:49:23,,,,0,1
11498,moment/moment,2752,How to format a Duration,Hello everyone  I saw this was requested before  but didn t manage to find if since there there are any new solutions.  I have a moment.duration    and I d like to format it as  hh:mm:ss.   Specifically I d like to use the format   function  so I don t have to take care of padding 0s as well as missing part of the time:  61000ms    >    01:01    and not 00:01:01  or 1:1  59000 ms   >   59  In the past I wrote something like this:       return function seconds        const hours = Math.floor this.props.length /  60   60  ;     const reminderFromHours = this.props.length    60   60 ;     const minutes = Math.floor reminderFromHours / 60 ;      const reminderFromMinutes = reminderFromHours   60;     const seconds = Math.ceil reminderFromMinutes ;        // add leading zero and start concatenating the string     let timeString =  seconds < 10  ?   0    seconds  : seconds;     if  minutes > 0          timeString =   minutes < 10  ?   0    minutes  : minutes     :    timeString;           if  hours > 0          timeString = hours    :    timeString;           return timeString;  ;      But as I said  I d prefer to leverage the built in functions of the library :   ,nicolabortignon,closed,1,2015-11-17 01:02:58,2015-11-26 12:20:56,,,,0,1
11497,moment/moment,2753,2 tests failed. diff:diff across DST  2140.17  diff:diff across DST  2140.19  ,    Client info      Date String   : Tue Nov 17 2015 10:40:09 GMT 0200  Middle East Standard Time  Locale String : 11/17/2015  10:40:09 AM Offset        :  120 User Agent    : Mozilla/5.0  Windows NT 10.0; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/46.0.2490.86 Safari/537.36            diff:diff across DST  2140.17   month diff across DST  lower bound      javascript // Expected true // Actual   false false === true            diff:diff across DST  2140.19   year diff across DST  lower bound      javascript // Expected true // Actual   false false === true     ,fakoua,closed,1,2015-11-17 08:41:17,2016-03-08 22:07:06,,Unit Test Failed,,,0,1
11496,moment/moment,2754,Handle incomplete locale on initialization,Make sure locales have all/none of monthsParse and weekdaysParse  so  2634 doesn t happen again. ,ichernev,open,0,2015-11-17 17:49:01,0000-00-00 00:00:00,,Bug,,,0,1
11495,moment/moment,2755,Why does moment.localeData  th  .firstDayOfWeek   return 0?,In Thai Monday is the first weekday ,a-wart,closed,1,2015-11-18 07:56:00,2015-11-18 09:40:15,,,,0,1
11494,moment/moment,2756,days difference broken in some timezones,I reproduced this issue in Asuncion  Paraguay  UTC 4   but I think it happens in any timezone where the time change occurs at midnight.  So in this timezone   moment new Date 2016  9  3  .diff new Date 2016  9  2    d    returns 0 instead of 1. ,stilltorik,closed,2,2015-11-18 11:56:02,2015-11-19 20:59:15,,,,0,1
11493,moment/moment,2757,Detect user s timezone,It would be great to be able to guess user s current timezone with Moment.js.  Any chances for implementing that? ,9dev,closed,1,2015-11-18 19:02:31,2015-11-19 01:58:08,,,,0,1
11492,moment/moment,2758,Parse String   Format issue,The following date parse results in a wrong date:  testDate = moment  20151114240833   YYYYMMDDHHmmss  true ; //Results is: Nov  15  2015 00:08 am    should be Nov 14   It looks like the parser adds 1 day to the date when the hour value is 24.  ,bms270,closed,5,2015-11-19 03:21:30,2015-11-19 20:45:44,,,,0,1
11491,moment/moment,2759,the spanish translation file is not in UTF 8,,novia713,closed,4,2015-11-19 09:47:04,2015-11-26 12:48:29,,,,0,1
11490,moment/moment,2760,Trigger an error if desired date is out of range,It looks like Moment silently falls back to some value instead of triggering an error when we pass a date out of range as an argument. Is there any way of checking if the date is correct?   isValid    does not work here   it returns  true  even for dates out of range.  Demo of the problem: http://jsfiddle.net/8bd0z9jn/ ,9dev,open,2,2015-11-19 11:02:48,0000-00-00 00:00:00,,Enhancement,,,0,1
11489,moment/moment,2761,2.10.7,When will be 2.10.7 release ?  we can t wait it  we want to use  kk.js  :  ,talgautb,closed,2,2015-11-19 12:49:38,2015-11-19 20:27:12,,,,0,1
11488,moment/moment,2762,Format token to emit hours 01 24 instead of 00 23,We can currently _parse_ a value with  24  in the hours field  representing midnight at the end of a day.  However  we cannot currently emit such a value when _formatting_.  Parsing was added in  1965 Formatting was discussed recently in  2758  Suggest  k   1 24  and  kk   01 24  to match Java and iOS APIs.  Important: This requires some pre processing  as combination of  hours == 0  and  k  or  kk  being present in the format must subtract a whole day from the output of all other tokens.  Example:      javascript moment  2015 12 01T00:00:00  .format  YYYY MM DD HH:mm   // 2015 12 01 00:00 moment  2015 12 01T00:00:00  .format  YYYY MM DD kk:mm   // 2015 11 30 24:00     ,mj1856,closed,6,2015-11-19 20:45:29,2016-04-16 05:58:47,,Enhancement,Up-For-Grabs,,,0,1
11487,moment/moment,2763,add   subtract method inconsistency on negative and positive floating numbers with bigger units,> m  .add 1.2   months  .toString  ;  >  Sun Dec 20 2015 12:12:57 GMT 1030    > m  .add 1   months  .toString  ;   >  Sun Dec 20 2015 12:13:01 GMT 1030    > m  .add  1   months  .toString  ;   >  Tue Oct 20 2015 12:13:06 GMT 1030    > m  .add  1.2   months  .toString  ; >  Sun Sep 20 2015 12:13:10 GMT 0930     I don t expect the floating numbers to be exactly calculated into smaller units fractions given the known two issues here: https://github.com/moment/moment/issues/2305 https://github.com/moment/moment/issues/2430  But adding with negative floating number seems give the wrong month  too. I d expect the last line to be   Sun   Oct   20 2015 12:13:10 GMT 1030     A Math.round   vs Math.floor   difference?  I live in an area doing DST change in early Ocotober  please ignore the GMT offset differences. :  ,huttli,closed,3,2015-11-20 01:54:27,2016-02-24 16:46:24,,Bug,,,0,1
11486,moment/moment,2764,Question : Can moment generate timestamp in format 2015 11 20T03:11:55Z ?,Can moment generate timestamp in format 2015 11 20T03:11:55Z ?  Tried below..      console.log moment.utc  .format  YYYY MM DDTHH:mm:ss   ; // 2015 11 20T03:11:55    console.log moment.utc  .format  YYYY MM DDTHH:mm:ssZ   ; // 2015 11 20T03:11:55 00:00  console.log moment.utc  .format  YYYY MM DDTHH:mm:ssz   ; // 2015 11 20T03:11:55UTC  console.log moment.utc  .format  YYYY MM DDTHH:mm:sszz   ; // 2015 11 20T03:11:55Coordinated Universal Time       I had to append  Z  to the string.   Is there any cleaner way supported by moment ?        console.log moment.utc  .format  YYYY MM DDTHH:mm:ss    Z  ; // 2015 11 20T03:11:55Z    //need this.      Thanks  Sasi ,sasikanth,closed,2,2015-11-20 03:59:00,2015-11-24 05:11:05,,,,0,1
11485,moment/moment,2765,Change file header,Switches file header from using  //   to using  /    followed by    . ,robertmain,closed,4,2015-11-20 12:41:25,2015-12-09 07:45:42,,,,1,1
11484,moment/moment,2766,Alternate Clock Source Support,Fix  2337  Motivation: Need to implement client side time synchronization for other project.  Example:      moment  .toISOString    2015 11 22T23:02:47.586Z   moment.fn.now = function     return 10000;  ;      return 10000;    moment  .toISOString    1970 01 01T00:00:10.000Z   moment.fn.now = function     return Date.now     2;  ;      return Date.now     2;    moment  .toISOString    2061 10 13T22:06:22.934Z      ,atogata,closed,3,2015-11-22 23:04:48,2015-12-09 08:14:25,,,2.11.0,1,1
11483,moment/moment,2767,Strange deprecation warning,With version 2.10.6 issuing  moment  .startOf  month  .format  DD.MM.YYYY    leads to:     Deprecation warning: moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.   The warning looks wrong to me. ,softwarerero,closed,1,2015-11-23 17:47:19,2015-11-23 21:51:39,,,,0,1
11482,moment/moment,2768,Not working : unless you specify a timezone offset  parsing a string will create a date in the current timezone,Hello   On my local computer  timezone  01:00  :  moment  2015 01 01 00:00  05:00    YYYY MM DD HH:mm Z  .endOf  month  .diff moment  2015 01 01 00:00  05:00    YYYY MM DD HH:mm Z     days   = 0  so it seems that the date is automatically converted in my local timezone  documentation says otherwise. ,florere,closed,1,2015-11-24 11:20:25,2015-11-24 14:53:15,,,,0,1
11481,moment/moment,2769,.month   didn t work,Hi  i try to set month trough .month   method or by .set  month   1   but it s didn t make any changes. ,h16bit,closed,3,2015-11-24 11:31:47,2015-11-24 14:50:26,,,,0,1
11480,moment/moment,2770,Allow locale as second argument to moment,The documentation says you can supply a locale as the _third_ argument to  moment . It would be really handy to have it supported in the _second_ argument:      moment  24/11/2015 00:00:00    en gb  ;      That runs and gives a date  but the date is wrong. In contrast  of course  this throws the deprecation notice about falling back to  Date   and fails to parse because it s not in U.S. format  on my UK locale machine  because  Date  always assumes U.S. format when it sees  /   as you know :      moment  24/11/2015 00:00:00   ;      The request is to allow using the locale as the second  not just third  argument. E.g.  to use locale specific date patterns when parsing. ,tjcrowder,open,8,2015-11-24 12:22:19,0000-00-00 00:00:00,,New Feature,,,0,1
11479,moment/moment,2771,Function to   not return the total of days after 25 days,I m using to function  and I founded the follow bug. Follow code and results tested at console in  Chrome.      javascript var init = moment  2015 09 13T00:00:00.000 03:00  ; var end = moment  2015 10 08T00:00:00.000 03:00  ; init.to end  true ; //result 25 days      But when type 9 as day the result will be a month.      javascript var init = moment  2015 09 13T00:00:00.000 03:00  ; var end = moment  2015 10 09T00:00:00.000 03:00  ;  init.to end  true ; //result a month      And a suggestion is a option to return return month and day combined to precision on date range. ,flpms,closed,2,2015-11-24 16:59:01,2015-12-21 01:36:38,,,,0,1
11478,moment/moment,2772,isoWeeksInMonth and isoMonthStartWeek,I would like to request the addition of the folllowing functions:   isoWeeksInMonth month   which would return the number of weeks in a month.   isoMonthStartWeek month   which would return the week number that the requested month starts in. ,iandevlin,open,2,2015-11-25 12:13:36,0000-00-00 00:00:00,,New Feature,,,0,1
11477,moment/moment,2773,New isUndefined utility method,Updated all test for undefined to use new utility method isUndefined ,rclanan,closed,4,2015-11-26 02:24:12,2015-12-09 08:17:21,,,,1,1
11476,moment/moment,2774,Implement locale inheritance and locale updating,Users have requested this in one way or another.    Locale inheritance  Now  you can write      javascript moment.defineLocale  en foo       parentLocale:  en     /   /   ;      which would create a new locale  en foo   taking as base the  en  locale and modifying the specified properties. Providing an object field  like calendar  will update only the supplied fields  the rest will be inherited.  for exampe specifying  calendar:  sameDay:  ...     will update  sameDay   but keep  nextDay  and the other calendar attributes .    Locale update      javascript moment.updateLocale  en       /  /   ;      This has similar semantics to inheritance  but changes the specified locale  instead of creating a new one. Actually the original locale is not changed but a new one with the same name created. This means existing moments using the updated locale _won t_ change behavior.  Use      javascript moment.updateLocale  en   null ;      To revert an update. If there are no applied updates this removes the locale.  TODO:   [ ] make a proper base English locale  make other locales inherit from it behind the scenes ,ichernev,closed,7,2015-11-27 06:03:29,2016-03-06 08:36:32,,,2.12.0,1,1
11475,moment/moment,2775,Milliseconds are not parsed correctly,This affects 2.10.6.  moment  2000 01 01T00:00:00.12Z    YYYY mm DDTHH:mm:ss.SZ    is parsed as  2000 01 01T00:00:00.120Z   but should be  2000 01 01T00:00:00.012Z   12 milliseconds  not 120 . Same result for   YYYY mm DDTHH:mm:ss.SSZ   and   YYYY mm DDTHH:mm:ss.SSSZ  .   2000 01 01T00:00:00.012Z   is parsed correctly. ,jochenberger,closed,5,2015-11-27 15:04:44,2015-11-30 21:27:02,,,,0,1
11474,moment/moment,2776,add chinese locales: zh SG  zh HK  zh MO,This adds missing chinese locales.   zh SG  is a copy of  zh CN  as simplified chinese.  zh MO  and  zh HK  are copies of  zh TW  as traditional chinese.  As far as I know there is no differences between these copies but this might be the case so it make sense to copy these files and not just link them. Note that I don t speak chinese at all but I work for chinese clients. All I know about the traditional and simplified chinese is described in this issue https://github.com/getnikola/nikola/issues/1637 . ,rdubigny,closed,8,2015-11-27 16:52:05,2016-04-10 13:48:20,Menelion,Language,,,1,1
11473,moment/moment,2777,Tests for two digit time zone offsets,I m trying to come up with a failing test and fix for https://github.com/moment/moment/issues/1723  but it seems to be working just fine in  develop .  Am I missing anything?  Fixes https://github.com/moment/moment/issues/1723 ,johanneswuerbach,closed,2,2015-11-27 19:08:15,2015-12-09 08:24:30,,,2.11.0,1,1
11472,moment/moment,2778,Coveralls badge should use develop branch,Since  develop  is this repo s default branch and there s no coverage data for master  yet . ,nickmerwin,closed,1,2015-11-27 19:20:14,2016-01-16 00:44:56,,,,1,1
11471,moment/moment,2779, String  and  String   Format  yields different results for empty inputs,Not sure if this is a desired behaviour  but it seems like a bug for me.      moment    .format   // Invalid date  ok moment    .format  X   // Invalid date  ok moment    .unix   // NaN  ok moment      DD/MM/YYYY  .format   // Invalid date  ok moment      DD/MM/YYYY  .format  X   // Invalid date  ok moment      DD/MM/YYYY  .unix   // 1448668800  wat      1448668800 apparently is the timestamp for today s midnight. But shouldn t both yield exactly the same results? Shouldn t  format  X    and  unix    return the same? ,igorsantos07,closed,4,2015-11-28 16:06:20,2015-12-10 08:12:14,,Bug,,,0,1
11470,moment/moment,2780,Feature Request: fuzzy time formatting,I am using the fuzzy clock KDE provides on Linux and it nicely formats the time in a less accurate way  for example   Five to nine   Twenty five to two   Half past six   Noon   Middle of the week  depending on the configured level of fuzziness.  I d love to use it in the Atom editor  see https://github.com/b3by/atom clock/issues/5 event 472791628   but somehow it appears to be a suitable feature request for moment.  There already is an implementation in C   which includes a lot of locale definitions  MIT licensed :  https://github.com/m66n/fuzzyclock  So if it is not too much work and a considered a useful feature  please implement it. ,sluedecke,closed,1,2015-11-29 12:32:52,2015-11-30 21:22:16,,,,0,1
11469,moment/moment,2781,Single letter fromNow   format,Attempting to use one letter to describe format with  moment  .fromNow  ;   Example: opposed to  1 hour    1 day    1 week . Looking to have  1h    1d    1w .  Is it a setting I m missing to use a single letter format like so? ,DarrylD,closed,8,2015-11-29 22:43:18,2015-11-30 21:19:46,,,,0,1
11468,moment/moment,2782,Fix locales with abbreviated months/weekdays ending in dot,This has been an issue for a long time.  The parser got a little bit more complicated  I don t think it can be done simpler. Basically each parsing function can say how many characters were consumed  so that a dot at the end of the month/weekday will be initially matched but then released  if the month doesn t end with a dot.  TODO:   [x] fix  2801   [ ] put locale tests for months ending in dot for all locales  or at least the ones with dots    [ ] auto compute  haveDot  properties in locales on creation   [ ] redo dotFix locale method   put it out of locale prototype  change wording and put comments   [ ] handle non strict dot ending token with two dots separated by whitespace  Fixes  1920  ,ichernev,closed,8,2015-11-30 08:09:15,2016-04-10 13:49:42,,Bug-fix,Enhancement,,,1,1
11467,moment/moment,2783,isSame behaves differently with null and undefined,    javascript moment  .isSame null   year   //  > false moment  .isSame undefined   year   //  > true      The latter case seems wrong to me  I would expect false for both. Seems to behave the same for any unit. ,MattKunze,closed,5,2015-11-30 19:52:47,2015-11-30 23:30:59,,,,0,1
11466,moment/moment,2784,utcOffset < 16,There seems to be no official way to set UTC offsets smaller than  16. I m setting  _offset  myself now as a workaround hack for that case  and I realize that doing it via Integers to  utcOffset  would break backwards compatibility.  How about removing the < 16 check when a string is in the   00:05  format? I could write a PR for that if there s interest. ,manveru,closed,2,2015-12-01 16:01:07,2015-12-01 20:42:42,,Bug,Up-For-Grabs,,,0,1
11465,moment/moment,2785,Add preparse/postformat for ta,Redo of  2693 ,ichernev,closed,1,2015-12-01 17:38:18,2015-12-01 17:41:50,,,2.11.0,1,1
11464,moment/moment,2786,Don t treat string offsets like ints,,manveru,closed,2,2015-12-01 20:28:52,2015-12-09 08:26:56,,,2.11.0,1,1
11463,moment/moment,2787,72 tests failed on half hour timezone,Tests fails on half hour offset based timezone like  5:30  IST .      Module: create Test: parsing iso moment should be able to parse specified ISO 2011281 180420 05 with  0530     at Object.<anonymous>  /var/www/html/github/moment/build/umd/test/moment/create.js:636:20  Actual value: 2011 10 08T18:34:20.000 05:30 Expected value: 2011 10 08T18:04:20.000 05:30  Module: create Test: parsing iso moment should be able to parse specified strict ISO 2011281 180420 05 with  05     at Object.<anonymous>  /var/www/html/github/moment/build/umd/test/moment/create.js:638:20  Actual value: 2011 10 08T18:34:20.000 05:30 Expected value: 2011 10 08T18:04:20.000 05:30      I can trace it back to this test in [src/tests/moment/create.js] https://github.com/moment/moment/blob/develop/src/test/moment/create.js L416   Moment always converts to correct  5:30 based offset in all cases but test value to compare with are incorrect.   For instance when asked to convert  ISO 2011281 180420 05        Actual Value:  2011 10 08T18:34:20.000 05:30  OK           Expected value: 2011 10 08T18:04:20.000 05:30  Not OK   It should be compared with  5 => UTC =>  5:30   But test compares it with  5 => UTC =>  5      ,sushantdhiman,closed,2,2015-12-03 11:00:25,2015-12-22 12:38:17,,Unit Test Failed,,,0,1
11462,moment/moment,2788,Remove timezone from a moment.js object,I m using [datetimepicker.js] https://eonasdan.github.io/bootstrap datetimepicker/Functions/ date  and its  date  function returns a [moment.js] http://momentjs.com/  object. It does so with the local UTC offset in it and my original date has a different offset.  My original date:      2015 10 01T15:00:00.000Z      What I display on the date time picker   DD MM HH:mm  :      01 10 15:00      What I get:      2015 10 01T15:40:00 01:00      What I want:      2015 10 01T15:40:00 00:00      Note how I removed the  01 offset at the end.  How can I do this applying it for any local UTC ? This is  without having to manually remove the 01  as it can be a any other local offset depending on the user location .  This is what I have so far to get the date  but I don t know how to remove the offset by keeping the same time.      javascript     var momentDate = timePicker.data  DateTimePicker  .date  ;     console.log momentDate.format   ;     //this prints  2015 10 01T15:40:00 01:00     ,alvarotrigo,closed,2,2015-12-04 10:45:58,2015-12-04 21:37:15,,,,0,1
11461,moment/moment,2789,isValid   returns true for random Strings,I m trying to validate a user input that should be a date with following format:  12:30 PM . Unfortunately  following code yields  true       moment  not a real date    h:mm A  .isValid  ;      But if you remove the  A   Post or ante meridiem  from the format  it returns the expected  false  result:      moment  not a real date    h:mm  .isValid  ;     ,gillerr,closed,3,2015-12-04 15:12:23,2015-12-07 15:55:44,,,,0,1
11460,moment/moment,2790,Days Diff Returning Floats,    var today = moment  2015 12 24T17:45:00  ; var tomorrow = moment  2015 12 25T05:21:00  ;  today.diff tomorrow   days   //  0 today.diff tomorrow   days   true  //  0.48333333333333334      I don t think it makes sense to have a result of negative zero. I do understand that without the third argument the value gets rounded but in the case of days difference it s not intuitive that we would get floating point numbers. ,chrisrng,closed,3,2015-12-04 16:17:23,2015-12-25 05:25:44,,,,0,1
11459,moment/moment,2791,Standalone localized time ago statements ,I d like [Time from now] http://momentjs.com/docs/ /displaying/fromnow/  and [Time to now] http://momentjs.com/docs/ /displaying/tonow/  to have a standalone flag.      in a day a few seconds ago      would be      In a day A few seconds ago     ,kirkstrobeck,closed,3,2015-12-04 19:37:01,2015-12-21 01:22:14,,,,0,1
11458,moment/moment,2792,please add support for martian sols,https://en.wikipedia.org/wiki/Timekeeping_on_Mars  It s a brave new world out here and we re doing lots of stuff with Mars  have quite a few active properties on the red to track.  Obviously providing the extensibility to handle other orbital bodies and would be great as well  but Mars is the most pressing for current data viz :  ,termie,closed,1,2015-12-04 22:59:35,2015-12-09 05:51:57,,,,0,1
11457,moment/moment,2793,3 tests failed. create:string with format   years  2104.4  week day:weekday first day of week Sunday  dow 0   2449.5  weeks:count years with iso week 53  2472.1  ,    Client info      Date String   : Sat Dec 05 2015 12:53:42 GMT 0000  GMT  Locale String : 05/12/2015  12:53:42 Offset        :  60 User Agent    : Mozilla/5.0  X11; Ubuntu; Linux x86_64; rv:42.0  Gecko/20100101 Firefox/42.0            create:string with format   years  2104.4   70 > 1970      javascript // Expected 1970 // Actual   1969  1969  ===  1970             week day:weekday first day of week Sunday  dow 0   2449.5   Jan  1 1970 is Thursday     4th day      javascript // Expected 4 // Actual   3 3 === 4            weeks:count years with iso week 53  2472.1   Should have 71 years in 400 year cycle with iso week 53      javascript // Expected 71 // Actual   110 110 === 71     ,pmarki,open,1,2015-12-05 12:55:06,0000-00-00 00:00:00,,Unit Test Failed,,,0,1
11456,moment/moment,2794,Tests shouldn t fail on non whole hour offsets:,Fixing failing unit tests as raised on Issue  2787  ,SwamWithTurtles,closed,2,2015-12-06 12:57:13,2015-12-09 08:35:30,,,,1,1
11455,moment/moment,2795,AM/PM not localized,Hello   Is there a reason that I m missing that AM/PM strings are not localized? ,danielgindi,closed,2,2015-12-07 14:57:05,2015-12-21 00:56:02,,,,0,1
11454,moment/moment,2796,Created South African locale,South Africa uses [ISO8601] https://en.wikipedia.org/wiki/ISO_8601  since [1998] https://en.wikipedia.org/wiki/Date_and_time_notation_in_South_Africa  so I ve setup a locale for it ,StevenMcD,closed,6,2015-12-08 06:39:31,2016-02-11 05:06:13,,Language,Needs tests,,,1,1
11453,moment/moment,2797,moment.duration can t parse weeks and days simultaneously,Hi. I was trying to parse YouTube video duration which is 500  hours long  however  moment gave me wrong value. For string   P3W3DT20H31M21S    moment gave me result of:      _data:  days: 0  hours: 0  milliseconds: 0  minutes: 0  months: 0  seconds: 0  years: 0       Is weeks supported by moment? Thanks. ,Vladimir-Purple,closed,4,2015-12-08 12:51:15,2016-01-16 00:39:22,,Bug,Up-For-Grabs,,,0,1
11452,moment/moment,2798,Add setting for hooks.parseTwoDigitYear,Hi   We make a service  where users can enter date in different formats. But As I find out when moment parse date with 2 digit year  it s choosing 19YY year if YY > 68.  It will be great  if we can configure this. May be override hooks.parseTwoDigitYear function. For example: if we work with date of birth  it should be always less then current date  55 = 1955 in this case  ,VitaliyZheleznov,closed,1,2015-12-08 14:00:28,2015-12-09 06:06:59,,,,0,1
11451,moment/moment,2799,Remove caps in spanish month and days,There is no caps in spanish date as you can see:  https://es.wikipedia.org/wiki/Mes https://es.wikipedia.org/wiki/D C3 ADa http://www.spanish.cl/Vocabulary/Notes/Dias_Meses.htm http://www.rae.es/consultas/mayuscula o minuscula en los meses los dias de la semana y las estaciones del ano http://www.wikilengua.org/index.php/Fecha  Tests are already in lower case expect abbreviation  @julionc are you agree ? :   ,clairecoloma,closed,4,2015-12-08 15:23:12,2015-12-09 08:38:53,,,,1,1
11450,moment/moment,2800,Difference in Unix Epoch between Date and moment,Why is moment returning different value than Date in following      javascript var unixTimestamp = Date.now  ;          var asDate = new Date unixTimestamp ;    var asMoment1 = moment unixTimestamp ;   var asMoment2 = moment asDate.toISOString   ; var asMoment3 = moment.unix unixTimestamp/1000 ; console.dir [unixTimestamp  asDate.getTime    asMoment1.unix   1000  asMoment2.unix   1000  asMoment3.unix   1000] ;      I get something like:      0: 1449602410074 1: 1449602410074 2: 1449602410000 3: 1449602410000 4: 1449602410000      Notice that JS Date  0 1  is different than Moment  2 3 4  ,zam6ak,closed,1,2015-12-08 19:27:07,2015-12-09 15:21:35,,,,0,1
11449,moment/moment,2801,Put all tests common for all locales together,Currently a bunch of tests are copy pasted to all locales. This makes it hard to maintain  so we need to reorganize it.  Also fix  src/test/moment/format.js  which iterates over almost all locales ... ,ichernev,closed,1,2015-12-09 06:36:01,2016-03-23 16:47:10,,Bug,,,0,1
11448,moment/moment,2802,Date format bug,Moment.js seems to have a problem formatting 29 02 2015. It s not a leap year so I expect it to be an invalid date  but instead it returns me 29 02 2020.  I created a small fiddle to reproduce the bug : http://jsfiddle.net/r42jg/1183/ ,MHakvoort,closed,1,2015-12-09 10:03:37,2015-12-09 15:18:14,,,,0,1
11447,moment/moment,2803,Checkmarx Issue   Divide by Zero,Hello   We are using momentjs in our application  with data  and we ran [Checkmarx] https://www.checkmarx.com/  against it. It returned a security issue with the minified script:  Issue Type: Divide by Zero Code in question:  a[b   1] = 1 / 0   Note that this is in the minified version   the actual source code makes use of  Infinity  instead of dividing by zero.  We just wish to check if this is a valid issue or a false positive. ,callmekatootie,closed,2,2015-12-09 15:57:19,2015-12-10 05:32:42,,,,0,1
11446,moment/moment,2804,Correction of the week names in pt BR,In Brazil the right names in week that consists in  feira  is  DAYOFWEEK feira    Feira  is incorrect. ,marlonmleite,closed,3,2015-12-09 19:43:12,2016-03-06 09:12:09,,Language,,2.12.0,1,1
11445,moment/moment,2805,Error in formatting moment,I have a moment object   a   [image] https://cloud.githubusercontent.com/assets/9649659/11651482/fc4d9d7c 9dcb 11e5 904a 9b3856200de4.png   On calling  a.format  YYYYMMDD      I get this    TypeError   stack : TypeError: this.localeData ... .postformat is not a function  ,debopamsengupta,closed,5,2015-12-10 10:29:31,2016-03-17 03:12:18,,Troubleshooting,,,0,1
11444,moment/moment,2806,Google Chrome search page,Searching the page for text works  but something is updating the content and breaking the highlighting. Only happens on this site.  Steps to reproduce: 1. Press <kbd>CTRL</kbd> <kbd>F</kbd> 2. Type any text such as .format 3. Wait a few seconds for the highlighting to disappear  First second after searching:  [image] https://cloud.githubusercontent.com/assets/621940/11728237/56140336 9f4e 11e5 8c25 126129edc2ac.png   A few moments later:  [image] https://cloud.githubusercontent.com/assets/621940/11728268/7eb3b5a2 9f4e 11e5 89f9 820f5fa88cbc.png  ,pcnate,closed,1,2015-12-10 21:00:06,2015-12-10 21:10:48,,,,0,1
11443,moment/moment,2807,Day marker character is missing for Japanese,For Japanese: moment  .format  MMMM Do YYYY  h:mm:ss a  ; // // 12  10 2015  4:58:09    It miss     after 10. It expect to 12  10  2015  4:58:09   .  Japanese date format should be   The most commonly used date format in Japan is  year month day  weekday    with the Japanese characters meaning  year    month  and  day  inserted after the numerals.  Example: 2008 12 31      for  Wednesday  December 31  2008 .   FYI: https://en.wikipedia.org/wiki/Date_and_time_notation_in_Japan  Btw  For S Chinese  T Chinese  Korean  they all include day marker character with moment  .format  MMMM Do YYYY  h:mm:ss a  ; ,XueWei,closed,7,2015-12-11 01:00:20,2016-02-25 02:28:22,,Language,,,0,1
11442,moment/moment,2808,locale is returning chinese by default  ,I did not changed the default locale which is supposed to be    en    but for some reason is    zh tw   .   Some info     In my bower.json:        moment :   2.10.6          When calling: moment.locale  ;       zh tw         Finally when running: moment  .format  MMM Do YY  ;       12  11  15     ,victorhazbun,closed,3,2015-12-11 16:57:15,2016-01-11 00:58:33,,,,0,1
11441,moment/moment,2809,.format  W   treats Monday as start of week instead of Sunday,,ghost,closed,1,2015-12-11 19:40:02,2015-12-21 00:44:41,,,,0,1
11440,moment/moment,2810,Update ar sa.js,Correct some of the words ,turkialawlqy,closed,7,2015-12-11 22:35:28,2016-03-21 00:34:43,Menelion,Language,,,1,1
11439,moment/moment,2811,duration format fails for YouTube s duration output,Checking via  https://developers.google.com/youtube/v3/docs/videos/list  and using  contentDetails  for  part  section and  04cF1m6Jxu8  as  id  for longest video on youtube we get this output:      json     kind :  youtube videoListResponse     etag :    3WIcRE7IJ70nCYemJJIi1L7dYAg/o7GK6h95_J4cZbzd eZOVGC9ZAM       pageInfo :      totalResults : 1     resultsPerPage : 1       items : [         kind :  youtube video       etag :    3WIcRE7IJ70nCYemJJIi1L7dYAg/iIaJv70njXPPGD1Q 3NFr8AXvUk         id :  04cF1m6Jxu8       contentDetails :        duration :  P3W3DT20H31M21S        dimension :  2d        definition :  sd        caption :  false        licensedContent : false           ]         duration  value is  P3W3DT20H31M21S  which when parsed by  moment.duration duration .format    always returns  0 .  Shouldn t this be supported since it seems like a valid [ISO 8601 Duration] https://en.wikipedia.org/wiki/ISO_8601 Durations  ,vBm,closed,3,2015-12-12 01:36:46,2015-12-15 18:12:34,,,,0,1
11438,moment/moment,2812,Feature request: add a .since a  b  method that returns a Duration,This would essentially be  moment.duration moment a .diff b   . ,dbkaplun,closed,2,2015-12-12 18:21:00,2016-09-14 06:04:25,,New Feature,,,0,1
11437,moment/moment,2813,use moment.js in angular and require.js but get a  moment is not defined  error,first I define path in require:      js require.config          paths:              moment : js/moment/2.10.6/moment                   then      js define [ moment ] function moment   ......         when I use moment in my angular js code       js eventData =               id:data[i].eId          title: data[i].name          start: new moment data[i].startDate           end: new moment data[i].endDate         but the chrome give me a  ReferenceError: moment is not defined  what s wrong with my code? ,anotherten,closed,2,2015-12-13 03:35:22,2016-04-01 00:19:19,,Troubleshooting,,,0,1
11436,moment/moment,2814,How to subtract 2 times with moment.js  then subtract some minutes?,I need to subtract 2 times with moment.js  get the difference   and then with that result  subtract some additional minutes  simple int . It s for calculating timesheets. A few examples:      Example  1: Start time: 10:00 AM  represented in js as  10:00   End time: 2:00 PM  represented in js as  14:00   Lunch: 30 minutes   30   Expected result:  3:30   10am   2pm is 4 hours  minus 30 minutes for lunch = 3hrs 30 mins    and I need it output as  3:30    Example  2: Start time: 6:15 AM  represented in js as  6:15   End time: 4:45 PM  represented in js as  16:45   Lunch: 0 minutes   0   Expected result:  10:30       I know moment.js can do this but I m struggling to get expected results. I ve been trying this:      function getTimeInterval startTime  endTime           return moment moment startTime  hh:mm  .diff moment endTime  hh:mm    .format  hh:mm  ;         The formatting seems right  but I m getting incorrect values. For example  the result returned for my example  2 is  6:30  instead of  10:30    And then how do I subtract off int minutes for lunch?    Any help is much appreciated. ,HerrimanCoder,closed,1,2015-12-13 05:38:06,2015-12-13 20:06:32,,,,0,1
11435,moment/moment,2815,Update zh cn.js,the week.dow does not matching weekdays  weekdaysShort and weekdaysMin.     means Monday      means Sunday ,bcw104,closed,1,2015-12-15 07:54:01,2015-12-19 23:10:37,,,,1,1
11434,moment/moment,2816,Invalid date for  Hmm ,Hey there  for following time I get as result  Invalid date .      moment       800       Hmm   .format   HH:mm   ;      Following are working fine:      moment       8.00       H.mm   .format   HH:mm   ;          moment       0800       HHmm   .format   HH:mm   ;     ,Ninos,closed,1,2015-12-15 10:22:10,2015-12-15 18:03:01,,,,0,1
11433,moment/moment,2817,Format ddd gives wrong day of week,Using ddd gives the wrong day of the week   by   1  .   The formatting using dd or dddd works fine so it s just an issue with the abbreviation of 3 letters   e.g.  var date =  2015 12 15  var formattedDate = moment date   YYYY MM DD  .format  ddd D MMM  ; console.log  formattedDate  ;  Expected output: Tue 15 Dec  Actual output: Wed 15 Dec ,hollyrobson,closed,8,2015-12-15 11:05:22,2016-01-13 05:09:30,,Troubleshooting,,,0,1
11432,moment/moment,2818,Parse ISO 8061 duration containing both day and week values,This should resolve issue  2797   More generally it looks like it was previously not possible to combine week values with anything else; when weeks were specified they had to be the ONLY value given. ,JohnAnthony,closed,5,2015-12-16 01:36:54,2016-03-06 08:55:55,,Bug-fix,,2.12.0,1,1
11431,moment/moment,2819,Adding time to an invalid moment and then comparing it using .after causing weird behavior,See fiddle:  http://jsfiddle.net/8jb95uhs/  This code produces interesting results:      var d =  moment  abcd    YYYY MM DD HH:mm:ss   console.log d.isAfter moment      // false console.log d.add 50   minutes  .isAfter moment      // true ?      I only observed this around a change of day though  midnight   so the behavior might not be consistent. ,evansiroky,closed,3,2015-12-16 08:33:13,2015-12-22 19:38:42,,Bug,,,0,1
11430,moment/moment,2820,Moment Fails to specify week when advancing over year,Imagine the date is a proper date object moment  Fri Jan 01 2016 12:00:00 GMT 0100  CET   .add 2   days  .format  YYYY WW  ;  This outputs  2016 53  when it should be  2016 01  ,MichaelFBA,closed,3,2015-12-16 17:00:40,2015-12-21 00:31:30,,,,0,1
11429,moment/moment,2821,Inconsistencies/docs missing between format   and toISOString  ,The 2 top answers and comment on this [SO post] http://stackoverflow.com/questions/25725019/how do i format a date as iso 8601 in moment js/28641878 28641878  illustrate this minor issue:  Basically  format    outputs in local time without milliseconds and  toISOString  converts to UTC and outputs milliseconds. The docs seem to indicate they are equivalent. Perhaps a note should be added to clarify that  toISOString  will convert to UTC or better yet  maintain the timezone and also make both formats use/not use milliseconds. ,cyberwombat,open,5,2015-12-16 20:04:38,0000-00-00 00:00:00,maggiepint,Documentation,Up-For-Grabs,,,0,1
11428,moment/moment,2822,How to get Start date and end date of the next upcoming month,if i am in november i need the start date and end date of the next upcoming month.  How it be possible? ,riginoommen,closed,1,2015-12-17 09:04:33,2015-12-17 11:04:47,,,,0,1
11427,moment/moment,2823,Deprecation warning: moment  .add period  number  is depreciated. Although using correct format: moment  .add number  period ,This is the code:      keystone.list  Bewerbung  .model.find  function err  bewerbungen        bewerbungen.forEach  function bewerbung            if  moment Date.now   .isAfter moment bewerbung.createdAt .add 14  d               bewerbung.state =  geschlossen ;          ;       ;   ;      and I get an error executing it:  deprecation warning: moment  .add period  number  is depreciated. Use moment  .add number  period  instead.  I am using moment 2.10.3 and as you can see keystone.js. My node.js version is 5.1.1.  Can anybody help me please? ,MarcErdmann,closed,7,2015-12-17 15:18:10,2016-04-01 00:17:27,,Troubleshooting,,,0,1
11426,moment/moment,2824,Add filipino  fil  locale,This PR adds support for Filipino  Tagalog  locale.  All tests should be passing. ,gzurbach,closed,7,2015-12-18 00:16:04,2016-03-21 01:15:35,Menelion,Language,,,1,1
11425,moment/moment,2825,BUG: the week.dow does not matching weekdays  weekdaysShort and weekdaysMin in zh cn.js,this is my pull request https://github.com/moment/moment/pull/2815 ,bcw104,closed,0,2015-12-18 03:02:08,2015-12-19 23:10:44,,,,0,1
11424,moment/moment,2826,Improved Hebrew locale,,danielgindi,closed,8,2015-12-21 05:44:51,2016-03-06 09:10:57,,Language,,2.12.0,1,1
11423,moment/moment,2827,Add day marker character for Japanese.,Patch for  2807. ,XueWei,closed,3,2015-12-22 00:34:57,2015-12-22 15:55:43,,,,1,1
11422,moment/moment,2828,how can add new custom locale js file  of moment with locales,,YakoobHammouri,closed,1,2015-12-22 10:14:12,2016-01-11 01:32:07,,,,0,1
11421,moment/moment,2829,Add day marker character for Japanese. update ,Move changing to src/locale/ja.js. ,XueWei,closed,8,2015-12-22 15:57:50,2016-03-06 09:22:58,Menelion,Language,,2.12.0,1,1
11420,moment/moment,2830,dep: add grunt cli,currently the project relies on grunt cli to run unit tests. There are no instructions in the readme to inform developers of this dependency.  This PR adds grunt cli to the dev dependencies for a more seamless development process. This PR will also make moment compatible with [CITGM] https://github.com/nodejs/citgm  the node.js smoketesting utility. This will allow moment s unit test suite to be ran against every release of Node.js  giving us an opportunity to give you a heads up if anything breaks before a release. ,MylesBorins,closed,15,2015-12-22 22:46:29,2016-01-09 09:52:02,,,2.11.1,1,1
11419,moment/moment,2831,Moment no longer exporting global when require.js is present,As of version 2.10.0  the moment global is no longer available if a module system is detected.  This was previously working in 2.9.0.  This is causing a headache for us as we have newer code written with Polymer that is HTML Importing moment  and we re integrating it with older code written with require.js.  Moment detects require.js and doesn t add the global  which causes our elements to fail at runtime.  Our tests and demo pages still work because they do not have require.js present  and the Polymer elements themselves don t need require.js to function.  Fiddle is below  but please note that it appears to be freezing for a short period before dumping out to the console.  You ll ultimately get  moment is not defined  error and a  Mismatched anonymous define   module  error from require.js. Fiddle: https://jsfiddle.net/f5xu1cho/1/ ,jimsimon-cengage,closed,4,2015-12-23 05:35:05,2016-06-16 11:24:22,,Help Wanted,Loading,Troubleshooting,,,0,1
11418,moment/moment,2832,Use a different end of day value than midnight for relative date strings,Hii   I have an app that works in the nightlife industry  in order to make saneness at night we time shift and consider 00:00 until 06:00 as the day before so that a party on sunday night will be showen as  today  even after midnight.  There is an option to work with moment.js and configure it to time shift the days only? ,dorshay6,open,3,2015-12-24 14:03:12,0000-00-00 00:00:00,,New Feature,,,0,1
11417,moment/moment,2833,Use moment.now instead of moment.fn.now for changing time source, now  was being exported at both  moment.now  and  moment.fn.now   but only moment.fn.now was used for time source.  I m fixing this so there is only  moment.now .  Fixes  2766. ,ichernev,closed,1,2015-12-25 14:46:02,2015-12-29 18:06:44,,,,1,1
11416,moment/moment,2834,moment  .year 2015 .week 52   ==    year 2016  week 52,    javascript  var date = moment  .year 2015 .week 52   console.log  year:   date.year      // = 2016 console.log  week:   date.week    // = 52       pen: http://codepen.io/anon/pen/wMzQgv  Is this a problem or I misunderstood something? ,FallenMax,closed,8,2015-12-27 07:54:11,2016-01-04 09:20:59,,,,0,1
11415,moment/moment,2835,Add strict field to creationData,I noticed strict flag was not exposed in newly added creationData function. ,ichernev,closed,1,2015-12-27 11:55:07,2015-12-29 18:13:51,,,,1,1
11414,moment/moment,2836,Maybe try to parseInt the parameter when it s in ms,I spent 10 minutes about find out what was wrong with my code:      <script> var variableFromAjaxCall; // this variable is  1451234747583  var time = moment variableFromAjaxCall ; </script>      This gave me a warning pointing to this thread https://github.com/moment/moment/issues/1407.  The solution was simply parsing an int from variableFromAjaxCall:      <script> var variableFromAjaxCall; var time = moment parseInt variableFromAjaxCall  ; </script>      Would it be possible if this could be done automatically  when the parameter is something like the time in ms  1451234747583 ? ,dban0001,closed,1,2015-12-27 17:31:44,2015-12-27 22:32:12,,,,0,1
11413,moment/moment,2837,return true for February 31 st,with the following code  the isValid function return true  how its possible    var m = moment  2/31/2015  ;   console.log m.isValid   ;   ,azadnio,closed,1,2015-12-28 10:56:01,2015-12-28 12:05:16,,,,0,1
11412,moment/moment,2838,Chinese Traditional Encoding  Big5  Regex,Found by [@nosekbk] https://twitter.com/nosekbk  Tested with moment.js 2.10.6 1. Make my browser use Chinese Traditional Encoding  Big5  2. refresh site 3. see error in console  Uncaught SyntaxError: Invalid regular expression: missing /  4. see file for Arabic Saudi Arabia  ar sa  has a broken regex    Suggested fix  : use  String.fromCharCode 000   where  000  is the character code for all the unicode characters you re currently using as literals. Since javascript executes in UTF 16 this will ensure all your characters are transferred in ascii _ie: the int param for  fromCharCode _ and generated as unicode at runtime as expected. <img width= 591  alt= screen shot 2015 12 29 at 18 16 33  src= https://cloud.githubusercontent.com/assets/707633/12045468/ff8cc65a ae58 11e5 89e3 dfb83c6d0fee.png >  <img width= 459  alt= screen shot 2015 12 29 at 18 16 52  src= https://cloud.githubusercontent.com/assets/707633/12045471/069ef3dc ae59 11e5 8ed3 8539d6e3a0f0.png > missing closing bracked in regex ^ due to hard coded non ascii string literals ,YoavGivati,open,1,2015-12-30 02:25:02,0000-00-00 00:00:00,,Bug,,,0,1
11411,moment/moment,2839,2015 W53 7 Invalid Date,http://jsfiddle.net/wlc3/ht2xbh68/2/  moment  2015 W53 1   gives the expected value:  2015 12 28T05:00:00.000Z    moment  2015 W53 7   does not:    2015   01 03T05:00:00.000Z    shouldn t it be    2016   01 03... ?  also:  moment  2015 W53 1  .format  dddd  MMMM Do  ; // Monday  December 28th  but:  moment  2015 W53 7  .format  dddd  MMMM Do  ; //   Invalid Date    If this really _is_ a bug  and not just my lack of understanding  I d be happy to work on a fix ,wleecarter,closed,4,2015-12-30 10:40:10,2016-01-03 19:12:02,,Troubleshooting,,,0,1
11410,moment/moment,2840,Fix th locales months short to correctly in thai language,ref: http://www.xn  12c0ecxsex2q.com/ E0 B8 95 E0 B8 B1 E0 B8 A7 E0 B8 A2 E0 B9 88 E0 B8 AD E0 B9 80 E0 B8 94 E0 B8 B7 E0 B8 AD E0 B8 99/ ,nonmadden,closed,5,2015-12-31 04:00:16,2016-03-21 01:20:29,Menelion,Language,,,1,1
11409,moment/moment,2841,parsing bug for MMM,    > moment  1 jan 2016    D MMM Y   true .isValid       true > moment  1 jan 2016    D MMM Y   true .year       2015 > moment.version      2.10.6      ,ericremoreynolds,closed,5,2015-12-31 09:16:50,2016-01-09 09:25:33,,Bug,High Priority,,2.11.1,0,1
11408,moment/moment,2842,Fix broken tests in IE8,A few minor corrections to make moment work in IE8. ,ichernev,closed,1,2015-12-31 10:01:59,2015-12-31 11:42:41,,,,1,1
11407,moment/moment,2843,Updated copyright to 2016,,aqnouch,closed,2,2016-01-01 01:56:12,2016-01-09 09:55:55,,,,1,1
11406,moment/moment,2844,fixing spelling in ka locale,for accusative          =>          ,tskapo,closed,3,2016-01-01 13:01:09,2016-03-21 01:21:49,Menelion,Language,Needs tests,,,1,1
11405,moment/moment,2845,1 test failed. week year:week numbers 2012/2013  2446.7  ,1 test failed. week year:week numbers 2012/2013  2446.7       Client info      Date String   : Fri Jan 01 2016 12:48:01 GMT 0800  PST  Locale String : 1/1/2016  12:48:01 PM Offset        : 480 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_11_2  AppleWebKit/537.36  KHTML  like Gecko  Chrome/47.0.2526.106 Safari/537.36               Date String   : Fri Jan 01 2016 11:50:07 GMT 0800  PST  Locale String : January 1  2016 at 11:50:07 AM PST Offset        : 480 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_11_2  AppleWebKit/601.3.9  KHTML  like Gecko  Version/9.0.2 Safari/601.3.9            week year:week numbers 2012/2013  2446.7       javascript // Expected 53 // Actual   52 52 === 53     ,andytuba,closed,2,2016-01-01 20:51:54,2016-03-23 05:47:39,,Unit Test Failed,,,0,1
11404,moment/moment,2846,Expose helper function to test strings for ISO string validity,Would it be possible to expose a helper function to test a string against the ISO date regexes as defined in https://github.com/moment/moment/blob/develop/src/lib/create/from string.js L8 L9?  My use case is that I am implementing auto detection for valid ISO date strings coming out of JSON data  and if they match  they are automatically converted to moment objects in my models.   Currently  I use the following work around to extend moment  but it would be helpful if this function is refactored into a standalone utility and exposed via the moment API:      javascript //ISO regexes taken from moment source code //See: https://github.com/moment/moment/blob/develop/src/lib/create/from string.js L8 L9 var extendedIsoRegex = /^ s   ?:[  ] d 6   d 4    ?: d d  d d W d d  d W d d  d d d  d d   ?: T     d d ?:: d d ?:: d d ?:[. ] d  ? ? ?  [    ] d d ?::? d d ?  s Z ? ?/; var basicIsoRegex = /^ s   ?:[  ] d 6   d 4   ?: d d d d W d d d W d d  d d d  d d   ?: T     d d ?: d d ?: d d ?:[. ] d  ? ? ?  [    ] d d ?::? d d ?  s Z ? ?/;  //Add helper function to check if a string is a valid ISO date string moment.isValidISOString = function string      return  extendedIsoRegex.exec string     basicIsoRegex.exec string  ;  ;      Since Moment already uses this internally  it would be cleaner to expose this via the public API rather than have to duplicate the regexes and hack it in.  If this is something that seems sensible  I would be happy to try and create a pull request for it. ,adamreisnz,closed,2,2016-01-02 01:22:54,2016-01-11 04:50:59,,,,0,1
11403,moment/moment,2847,3 tests failed. diff:diff across DST  2140.17  diff:diff across DST  2140.19  week year:week numbers 2012/2013  2446.7  ,    Client info      Date String   : Sun Jan 03 2016 03:26:40 GMT 0800  Ulaanbaatar Standard Time  Locale String : 1/3/2016  3:26:40 AM Offset        :  480 User Agent    : Mozilla/5.0  Windows NT 6.3; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/47.0.2526.106 Safari/537.36            diff:diff across DST  2140.17   month diff across DST  lower bound      javascript // Expected true // Actual   false false === true            diff:diff across DST  2140.19   year diff across DST  lower bound      javascript // Expected true // Actual   false false === true            week year:week numbers 2012/2013  2446.7       javascript // Expected 53 // Actual   52 52 === 53     ,tseveen,closed,1,2016-01-02 19:28:11,2016-03-08 22:07:00,,Unit Test Failed,,,0,1
11402,moment/moment,2848,Allow user to get/set the rounding method used when calculating relative time,There are many use cases where relative time humanization should use different rounding methods.  This PR is on the same wavelength as https://github.com/moment/moment/pull/1794 ,numeraltwo,closed,6,2016-01-03 02:21:18,2016-06-14 08:20:50,,Enhancement,,2.14.0,1,1
11401,moment/moment,2849,Setting isoWeek   cousing bad year, moment  .year 2015 .isoWeek 10 .isoWeekday 1 .format    and  moment  .year 2016 .isoWeek 10 .isoWeekday 1 .format    gives the same result  for example 2015 03 02T13:37:42 01:00. In fact  it happens 28 times in years 1900 2099.  Moment version: 2.11.0 ,xDuszek,closed,1,2016-01-03 13:15:29,2016-01-03 14:22:48,,,,0,1
11400,moment/moment,2850,Common locale tests,Put tests common to all locales in a single place.  Fixes  2801. ,ichernev,closed,3,2016-01-03 15:07:54,2016-03-06 08:32:50,,,2.12.0,1,1
11399,moment/moment,2851,Add support for brazilian date time format,  Date  :  dd/mm/yyyy  or  dd/mm/yy   eg:  01/12/2016  or  01/12/16      Expanded date  :  dd de mmmm de yyyy   eg:  31 de janeiro de 2016  or  if it s first day of month:  1  de janeiro de 2016      Time  : hh:mm:ss  eg:  23:59:59      Short time  : hh:mm  eg:  23:59   ,llagerlof,closed,1,2016-01-03 15:23:23,2016-01-11 00:21:20,,,,0,1
11398,moment/moment,2852,Canadian English longDateFormat,Canadian English mostly puts the day after the month like  January 3  2016   Usage examples:   Parliament: http://www.lop.parl.gc.ca/Visitors/index e.html   Government: http://www.cic.gc.ca/english/citizenship/become how.asp   Citizenship application forms were updated on   June 11  2015   ...    Toronto Star: http://torontostar.newspaperdirect.com/epaper/viewer.aspx  Original author: @jonbca ,zhantongz,closed,4,2016-01-03 15:33:35,2016-03-06 09:10:00,,Language,,2.12.0,1,1
11397,moment/moment,2853,moment  2015 12 27   == year 2015  week 1,    javascript console.log moment  .format     // this test is produced on: 2016 01 03T23:47:51 08:00  var date = moment  2015 12 27   console.log  year:   date.year     // 2015 console.log  week:   date.week     // 1      pen: http://codepen.io/anon/pen/yegPoY  Is this a problem or am I misunderstanding how  .week    works?  relevant issue:  2834  ,FallenMax,closed,3,2016-01-03 15:53:16,2016-01-04 05:55:09,,,,0,1
11396,moment/moment,2854,month format for locale en and en_au,We pulled the latest version of moment.js and noticed the  monthsShort  for  September  in the most of  en  locale files have been changed.   Before it was  Sep  and now it becomes  Sept   all the other months still stay with three letters.  Is there any specific reason for this change?  Thank you. ,lifeifei,closed,15,2016-01-03 23:26:38,2016-01-09 09:24:00,,,,0,1
11395,moment/moment,2855,Storing a reference to Date.now breaks fake timer based tests,The upgrade to  2.11.0  breaks builds using fake timers  e.g. [sinon s fake timers] http://sinonjs.org/docs/ clock  . Because the new code stores a reference to  Date.now  instead of doing a dynamic access.  Sample test case:      javascript var     sinon = require  sinon        moment = require  moment  ;  sinon.clock = sinon.useFakeTimers  ;  console.log  new Date   .toString   ; console.log moment  .toString   ;      Output with moment 2.10.6:      bash Thu Jan 01 1970 08:00:00 GMT 0800  SGT  Thu Jan 01 1970 08:00:00 GMT 0800      Output with moment 2.11.0:      bash Thu Jan 01 1970 08:00:00 GMT 0800  SGT  Mon Jan 04 2016 12:52:13 GMT 0800      From a npm perspective  if a project uses  moment timezone   then because the dependency on moment is  >= 2.6.0   you get an automatic upgrade to  2.11.0  and travis starts faiing on the fake timers.  The fix is simple: use moment s hook  moment.now  for tests instead  so this issue can be solved with a simple:      javascript moment.now = function     return Date.now  ;        I m opening the issue anyway because storing references to internal functions is a bit of a dodgy practice  and for reference in case anybody else using  sinon  and  moment  start seeing failing builds. ,timotheeg,closed,4,2016-01-04 05:20:24,2016-01-05 19:10:18,,,,0,1
11394,moment/moment,2856,moment.locale   :: Uncaught ReferenceError :: When browser s languages array is passed as argument.,The documentation says that  moment.local    accepts an array of locale strings from which it will use the first match it finds. However  when I try to use  window.navigator.languages   which is an array of locale strings  as the argument I get an Uncaught ReferenceError.       javascript moment  .locale window.navigator.languages ;          javascript Uncaught ReferenceError: module is not defined    loadLocale @ moment with locales.min.js:267 chooseLocale @ moment with locales.min.js:249 locale_locales__getLocale @ moment with locales.min.js:340 locale_locales__getSetGlobalLocale @ moment with locales.min.js:287  anonymous function  @ VM417:2       This occurs with the latest version of  moment.js  downloaded from  momentjs.com   http://momentjs.com/downloads/moment with locales.js  ,lots0logs,closed,5,2016-01-04 07:52:11,2016-01-11 01:02:49,,,2.11.1,0,1
11393,moment/moment,2857,Broke MockDate,Something in the 2.11.0 release broke [MockDate] https://www.npmjs.com/package/mockdate  support. I believe it was the commit https://github.com/moment/moment/commit/f54a32f4c62c12a710335211a73cb002a7249646 and the follow on refactoring https://github.com/moment/moment/commit/b1d686ed481e2211cb81a1c60eca850fcea93f21. I am not certain if this is something that you care to support  or if you view this as the responsibility of MockDate to fix  however  since MockDate simply patches the global Date object  it would seem breaking this generic mocking lib is a bad thing. Let me know what you think.  This used to work  but now breaks.      js const moment = require  moment        mockdate = require  mockdate        frozenTime = moment  ;  mockdate.set frozenTime ; console.log  Frozen time:    frozenTime.toISOString   ;  setTimeout function         console.log  Moment time:    moment  .toISOString   ;    1000 ;          bash   node index.js Frozen time:  2016 01 04T14:21:55.335Z Moment time:  2016 01 04T14:21:56.355Z     ,nowells,closed,5,2016-01-04 14:23:40,2016-01-05 18:53:08,,Bug,,,0,1
11392,moment/moment,2858,Fix Date mocking regression introduced in 2.11.0,The commit https://github.com/moment/moment/commit/f54a32f4c62c12a710335211a73cb002a7249646 and the follow on refactoring https://github.com/moment/moment/commit/b1d686ed481e2211cb81a1c60eca850fcea93f21 broke the ability for Date mocking libraries  [MockDate] https://www.npmjs.com/package/mockdate   SinonJS  etc.  to mock out the Date object. I believe we should restore this functionality.      js const moment = require  moment        mockdate = require  mockdate        frozenTime = moment  ;  mockdate.set frozenTime ; console.log  Frozen time:    frozenTime.toISOString   ;  setTimeout function         console.log  Moment time:    moment  .toISOString   ;    1000 ;      Running the code above will yield the following in  moment@2.10.6  and  moment@2.11.0  respectively.      bash   moment@2.10.6   node index.js Frozen time:  2016 01 04T14:21:55.335Z Moment time:  2016 01 04T14:21:55.335Z    moment@2.11.0   node index.js Frozen time:  2016 01 04T14:21:55.335Z Moment time:  2016 01 04T14:21:56.355Z       Fixes  2857   Fixes  2855 ,nowells,closed,15,2016-01-04 15:00:56,2016-01-09 09:43:20,,Bug,High Priority,,2.11.1,1,1
11391,moment/moment,2859,Issue when parsing single  Y  format,Hi   moment  5.12.2015    D.M.Y  .year   is giving 2016  incorrect   while  moment  5.12.2015    D.M.YYYY  .year   is giving 2015  correct   Is single character year unsupported? Or is it a bug?  We are using locale strings from angular  and noticed the bug because of the year change.  Thanks. ,michaelgeorgeattard,closed,5,2016-01-04 15:36:22,2016-01-06 22:26:18,,Bug,,2.11.1,0,1
11390,moment/moment,2860,timezone is wrong in version 2.4.0 and subtract month function throws error in version 2.11.0,Hi   We are using the momentjs version 2.4.0 we are getting wrong timezone when the date time is converted to moment. for example    var momentNow = moment nowNew .format  MM/DD/YYYY h:mm A ZZ  ;  01/04/2016 9:42 PM  0530    is wrongly shows as  01/04/2016 9:42 PM  0550    I tried to update the latest version    of moment.min.js bit i am getting the below error when we try to subtract 6 months it gives the below error.  moment momentNow .subtract  months   6  0x800a1391   JavaScript runtime error:  console  is undefined  attached the screenshot of the error please give me a solution.   [error] https://cloud.githubusercontent.com/assets/16287275/12094191/43c79c36 b32d 11e5 9552 c638a0bb356e.PNG  ,visvak,closed,7,2016-01-04 16:21:35,2016-01-06 19:02:21,,Troubleshooting,,,0,1
11389,moment/moment,2861,Incorrect moment validation on 2.11.0,A bug has appeared in  2.11.0  regarding moment validation.  In this case a perfectly valid date is returned as invalid.      js moment  25 May 2015    DD MMM YYYY   true .isValid   // Returns false      This code returned  true  in 2.10.6 I ve only been able to replicate this issue using  MMM  as part of the date string  so possibly the bug is there ,MarshallOfSound,closed,4,2016-01-04 20:52:51,2016-01-06 21:36:31,,Bug,High Priority,,2.11.1,0,1
11388,moment/moment,2862,module is not defined on 2.11.0,error on firefox   [module is not defined] https://cloud.githubusercontent.com/assets/6071313/12101050/9f8018d8 b36d 11e5 80e2 5630937114d2.jpg  ,realmx,closed,5,2016-01-04 21:32:39,2016-01-06 21:35:11,,Bug,High Priority,,2.11.1,0,1
11387,moment/moment,2863,Format for output and parsing works inconsistently  strict mode,Hello everyone   I apologize if this issue is a duplicate for another active one.  For  en  locale: When I format a date like that  YYYY MMM DD   I get  2016 Jan 05   however parsing it back  strict mode  gives _invalid date_.  console.log moment moment  2016 01 05  .format  YYYY MMM DD     YYYY MMM DD   true  ;  Is it the expected behavior? ,estorski,closed,1,2016-01-05 00:15:07,2016-01-05 19:08:48,,,,0,1
11386,moment/moment,2864,Include changelog in npm release,Noticed it missing from the npm tarball when our test broke after upgrading to 2.11 ,SimenB,closed,1,2016-01-05 12:24:19,2016-01-09 09:50:34,,,2.11.1,1,1
11385,moment/moment,2865,Use typeof checks for undefined for global variables,Fixes  2862   broken in  2773. ,ichernev,closed,2,2016-01-05 19:16:24,2016-01-09 09:38:59,,High Priority,,2.11.1,1,1
11384,moment/moment,2866,Mocking the current date in jasmine no longer works,If you mocked the date in jasmine  moment   would pick up this mocked date fine in v2.10.6  but in 2.11  moment   will always return the current date.  Example: With moment 2.10.6: http://jsfiddle.net/mrhaasguy/0zbt9x8x/2/ With moment 2.11: http://jsfiddle.net/mrhaasguy/yqn1q4yj/3/ ,mrhaasguy,closed,1,2016-01-05 20:42:18,2016-01-05 20:46:09,,,,0,1
11383,moment/moment,2867,Incorrect strict parsing with japenese parenthesis,When dateString and formatString contain the the character          in  moment dateString  formatString  localeString  true ;   the parsing fails  checked with  .isValid    .           here is the japanese fullwidth parenthesis character  marukakko   /U FF09   the whitespace is part of the character itself  not another whitespace.   moment  2016 5 18        YYYY M D  dddd     ja   true .isValid  ; // Returns false  This code returns false e.g. in moment version 2.11.0  2.10.6 and 2.5.1 ,StefanIGI,closed,4,2016-01-06 15:24:54,2017-12-17 00:37:44,,Bug,,,0,1
11382,moment/moment,2868,Add format and parse token Y  so it actually works,Fix  2859  ,ichernev,closed,1,2016-01-06 22:25:54,2016-01-09 09:37:34,,,2.11.1,1,1
11381,moment/moment,2869,Fix months parsing for stranger locales,This fixes  2841  TODO:   [ ] add weekdays in the mix   [ ] test with months ending in dot and enable it there too   [x] sort regex parts by reverse length   [ ] add tests specific to this feature   [ ] fix polish monthsParse hack ,ichernev,closed,6,2016-01-06 23:46:23,2016-01-09 12:42:18,,,2.11.1,1,1
11380,moment/moment,2870,Error after updating to 2.11.0, [capture] https://cloud.githubusercontent.com/assets/271656/12166876/d5450cf8 b520 11e5 9ce8 227245d63120.PNG   [capture1] https://cloud.githubusercontent.com/assets/271656/12166877/d547d33e b520 11e5 90bb d2f94b814817.PNG   Currently using 2.10.6 as part of Bootstrap.VS.Datetimepicker.CSS. After updating to 2.11.0 I get the attached error. ,PhilPJL,closed,3,2016-01-07 09:29:06,2016-01-07 19:01:43,,,,0,1
11379,moment/moment,2871,The way moment   constructs changed in 2.11.0,I ve upgraded to 2.11.0 and some of my tests start to fail. After investigation I ve noticed that the way  moment    contructs seems to be different  comparing to 2.10.0.  We use sinon to fake timer  simplified version of test      js // before console.log  test  moment before fake   moment  .toDate   ;  // clock fake const futureTimeInMilliseconds = moment  .add 2   days  .valueOf  ; const clock = sinon.useFakeTimers futureTimeInMilliseconds ;  // after console.log  test  moment after fake   moment  .toDate   ;      The output       plain test  moment before fake Thu Jan 07 2016 11:36:22 GMT 0100  CET  test  moment after fake Thu Jan 07 2016 11:36:22 GMT 0100  CET       With 2.10.0 however  it gives      plain test  moment before fake Thu Jan 07 2016 11:36:22 GMT 0100  CET  test  moment after fake Thu Jan 09 2016 11:36:22 GMT 0100  CET          2 days  the behaviour my tests expects .  PS. If I construct moment as  moment new Date     it would give expected  Thu Jan 09 2016 11:36:22 GMT 0100  CET  . I found long time ago discussion on this topic  https://github.com/moment/moment/pull/451 could it be a potential regression issue? ,alexbeletsky,closed,2,2016-01-07 10:44:11,2016-01-07 19:01:23,,,,0,1
11378,moment/moment,2872,v2.11.0 parses not valid ISO 8601 strings ,After updating to v 2.11.0 invalid ISO strings are parsed and isValid   returns true. Bad formatted part and next ones are set to 0.      // moment 2.10.6 var m = moment.utc  2013 11 21T15:5:18   moment.ISO_8601 ; console.log m.isValid    //false console.log m.format  D MMM YYYY H:mm:ss z   ; // Invalid date    //moment 2.11.0 var m = moment.utc  2013 11 21T15:5:18   moment.ISO_8601 ; console.log m.isValid    //true console.log m.format  D MMM YYYY H:mm:ss z   ; // 21 Nov 2013 15:00:00 UTC      ,gswatowski,closed,5,2016-01-07 16:25:14,2016-01-07 20:40:40,,,,0,1
11377,moment/moment,2873,September should be abbreviated as Sep., _CONTEXT_ September used to be abbreviated as Sep  but after  2728 it was changed to Sept.  While I agree that in American English Sept. is more common  Sep is understandable and I think we should use it when formatting dates  to keep consistency with other languages  and JavaScript itself .  Some points in favor of changing it back to Sep:   This is inconsistent with most programming languages: Java  Ruby  Scala and Python  the languages I tested on  all use Sep instead of Sept when formatting dates  snippets below .   Ruby  Java and Python do not accept Sept as an argument when parsing dates.    This could cause issues in the interface  as well: suppose you re displaying the date on an element with a fixed width. September is the only month which requires more space  as it is the only month with 4 characters.  Ruby      ruby   Date.strptime  Sep 01 2015     b  d  Y   // works   Date.strptime  Sept 01 2015     b  d  Y   // error: ArgumentError: invalid date      Python      python datetime.datetime.strptime   Sep     b    // works datetime.datetime.strptime   Sept     b    // error: // Traceback  most recent call last :   File  <stdin>   line 1  in <module>   File  /System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/_strptime.py   line 328  in _strptime     data_string[found.end  :]  ValueError: unconverted data remains: t      JavaScript      js var d = new Date 2016  8  1 ; d.toString   // Thu Sep 01 2016 00:00:00;      JavaScript dateformat  most popular library for formatting date on npm   https://www.npmjs.com/package/dateformat       js var date = new Date 2015  8  10 ;  dateFormat date   mmm   // Sep;      Java  including its new Time API :      java DateTimeFormatter formatter = DateTimeFormatter.ofPattern  MMM dd yyyy  ; LocalDate date = LocalDate.parse  Sep 10 2016   formatter ; // works LocalDate date = LocalDate.parse  Sept 10 2016   formatter ; // error:  Exception in thread  main  java.time.format.DateTimeParseException: Text  Sept 10 2016  could not be parsed at index 3      In fact  I discovered this because I faced an error when trying to consume an API that used the pattern  MMM DD YYYY  for dates  but failed to accept  Sept  as an argument. ,marlonbernardes,closed,4,2016-01-07 22:12:06,2016-01-09 09:23:04,,,,0,1
11376,moment/moment,2874,Invalid date and format arguments fail silently,I was unable to find any other issue relating directly to this  other than [this issue] https://github.com/moment/moment/issues/1805  talking about things failing silently maybe   so I apologize if this is already a known issue.  Here is what I m concerned with. Let s say you want to create and format a new  moment  instance  only instead of passing a string for the date argument  we simply pass a  Date  instance      javascript let dateObj = new Date  ; let ISOStringFormat =  YYYY MM DD[T]HH:mm:ss.SSS[Z] ;  let invalidValue = moment dateObj  ISOStringFormat ; // invalid date arg  valid format arg invalidValue.constructor //  valid  Moment instance created invalidValue.format  MM YYYY  ; // returns  Invalid date       Another case where this could be an issue is if you pass a correct date argument but a non ISO format argument      javascript let invalidFormat = moment dateObj.toISOString     MM YYYY  ; // valid date arg  invalid  non ISO format arg invalidFormat.constructor //  valid  Moment instance created invalidFormat.format  MM YYYY  ; // returns  Invalid date       Notice how close both of these cases are to a valid  moment  instance      javascript let valid = moment dateObj.toISOString    ISOStringFormat ; valid.format  MM YYYY  ; // returns  01 2016   as expected      It may seem trivial  but the fact that  moment  returns a valid instance when it is created with incorrect arguments  fails silently  and then just simply returns   Invalid date   whenever you try to call any methods on it makes it difficult for one to know where they messed up  especially people  like myself  who haven t used the library very much before.  With that said  this is an awesome library and I appreciate the fact that you guys are adding to it and maintaining it. If this issue is something you would like to pursue fixing  I would be more than happy to help and contribute as best I can  just let me know :  ,indiesquidge,closed,3,2016-01-07 22:52:49,2016-01-09 09:21:25,,,,0,1
11375,moment/moment,2875,locales/es just capitalized month and day names,Because they re proper names   most other locales are capitalized ,luciotato,closed,1,2016-01-08 10:22:37,2016-01-16 00:35:45,,Language,,,1,1
11374,moment/moment,2876,Issues with  loadLocale   ,A couple of days ago v2.11.0 was released and fixed a number of bugs but most notably the problem which resulted in the default language being  zh tw     2735  . At the time it was the first time I d seen this particular bug and after some searching noticed it was resolved in v2.11.0  so I upgraded our installed version to the latest. However  in doing so it s brought in a number of issues in for our JS Unit Tests and some areas of the the live code where we have to override the default language for various reasons.  Whenever I run the Code/Unit Tests since upgrading to v2.11.0 a number of errors get thrown  this is an example of one such error  to be honest most of them are pretty much the same error :   ReferenceError: module is not defined at w  file:///C:/Users/Source/Repos/  Solution Directory Name  /Scripts/moment with locales.min.js:1:2581    After doing a bit of digging through the source code and referring to the errors which are thrown the issue is with  loadLocale    and  Module  not being instantiated correctly. I ve tried a number of fixes locally  without modifying the plugin source  to resolve the issue because we need to define the locale.  The only way I ve found to resolve this issue is to downgrade to v2.10.6 as this was the last point where  module  was instantiated without issue. Unfortunately  in doing so it s brought back the  zh tw  locale issues but we ve decided to live with this for the time being. However  it s likely we ll come across this issue again in the future and not be able to just  deal with it   so I was wondering if anyone is aware of a fix for this? If not  are the developers aware of this issue and is there potential to fix this in the next update? ,Damo1155,closed,1,2016-01-08 10:49:32,2016-01-09 09:19:03,,,,0,1
11373,moment/moment,2877,Use explicit .valueOf   calls instead of coercion,This seems to result in speedups by around 10  for comparing moments.  http://jsperf.com/explicit valueof for momentjs ,topaxi,closed,3,2016-01-08 12:47:27,2016-04-16 05:55:35,,performance,,2.13.0,1,1
11372,moment/moment,2878,Variable parseTwoDigitYear,I have cases when parsing and formatting two digits dates  when the cut off date changes based on which legacy database the information comes from.  I can imagine a way to keep switching the moment.parseTwoDigitYear function  but that does seem error prone.  What I would need is have multiple  moment  objects  then I d be able to have each of them have their own configuration  but that doesn t seem possible.  Is the parseTwoDigitYear given a context parameter which could serve as discriminant in the function ? ,mleduque,closed,3,2016-01-08 14:14:48,2016-01-09 09:18:11,,,,0,1
11371,moment/moment,2879,Parsing ASP.NET JSON Dates  WCF format  is not working correctly.,As mentioned in the Moment.js documentation [here] http://momentjs.com/docs/ /parsing/asp net json date/   the parsing is supposed to work. However  there seems to be a problem with it. Using the example given there        javascript moment  /Date 1198908717056 0700 /  ; // 2007 12 28T23:11:57.056 07:00      The time calculated should be  Fri Dec 28 2007 23:11:57 GMT 0000 . Instead  using       javascript moment  /Date 1198908717056 0700 /  ;      give us  Sat Dec 29 2007 06:11:57 GMT 0000 . This is the same as callinng      javascript moment  /Date 1198908717056 /  ;      This means  that the offset is not being parsed correctly and included in the calculation  which needs to be done so. This bug can easily be recreated using the console on this website. If you want to parse the WCF format correctly  the following snippet might be useful:      javascript Date.parseWcfDate = function str      var regex = str.match / /Date   [0 9]   [  ]  [0 9]     // ;   var millisecs = parseInt regex[1] ;   var offset = parseFloat regex[2]   regex[3]  / 100;   var utcMillsecs = millisecs   offset   3600   1000;   return new Date utcMillsecs ;  ;      EDIT:  corresponding [jsfiddle] https://jsfiddle.net/themakshter/jpu6x5o6/  has been added. ,themakshter,closed,12,2016-01-08 17:03:11,2016-01-09 14:54:22,,,,0,1
11370,moment/moment,2880,Feature Request: Easier to Read  ie. Longer  Formatting Tokens,The Sugar library is ... not a great library.  It does have one great feature though  its date formatter  which allows you to do the following:      var someDate = new Date  ; someDate.format   Weekday   d   Month    yyyy   ;      Now  compare that to equivalent Moment code:      var someDate = moment new Date   ; someDate.format  dddd D MMMM  YYYY  ;      Obviously moment s syntax is more concise  and for people who do a lot of date formatting I m sure it s extremely intuitive  much like regular expressions .  However  I d imagine that most developers don t format dates frequently  which means they have to write date formatting strings while simultaneously reading the Moment documentation page.  If they  or a co worker  ever has to revisit that code  they have to return to the documentation page to translate each token one by one.  Now  I would never suggest getting rid of those tokens  just as I wouldn t want to get rid of regular expressions.  But at the same time  whenever possible I do try to avoid regular expressions in favor of more readable alternatives  eg.  indexOf    contains   custom functions  etc. .  Imagine if Moment provided alternative   human friendly   formatting tokens  and one could write:      var someDate = moment new Date   ; someDate.easyFormat   weekday   dayOfMonthZeroPadded   monthUnpadded    fullYear   ;      Even if you ve never heard of Moment  and were somewhere remote without internet access  you could still understand that code _instantly_  and perhaps even be able modify it .  I realize this may seem like a pointless request to someone who uses the Moment tokens on a daily basis  just as it would seem pointless to ask a regular expression expert to write a  contains  method for you   why bother  just use a regex   .  But just as  contains  methods are a lot easier to read  understand  and maintain than regular expressions  an  easy  set of formatting tokens in Moment would be very valuable to many. ,machineghost,open,2,2016-01-09 00:26:03,0000-00-00 00:00:00,,New Feature,,3.0,0,1
11369,moment/moment,2881,Revert  Merge pull request  2746 from mbad0la:develop  Sep >Sept,This reverts commit 9ea2d6b1a86d59b36bce792771cffc3f85b382b0  reversing changes made to f52a86863dd1fc638501b5f4b4fbe371f8fa725d.  Fixes  2873 Fixes  2854 ,ichernev,closed,1,2016-01-09 09:13:50,2016-01-09 09:34:26,,,2.11.1,1,1
11368,moment/moment,2882,Russian months and days of week capitalization,Months and days of week in russian language should not be capitalized. Examples:   January 1st = 1             Next Monday =                           Fri  January 1st = 1              .  Reference: [rules of Russian language] http://new.gramota.ru/spravka/rules/139 prop  It was suddenly capitalized in c74a101d549b8b443b72d9a470839eaffea852c2 ,SukharevAndrey,closed,8,2016-01-09 09:42:18,2016-02-22 09:34:41,,Language,,,0,1
11367,moment/moment,2883,some kind of bug,After wrestling with moment for a day  I believe I found a bug  which I reduced to the following simple example:  moment  1/1/15  .valueOf   == moment.utc  1/1/15  .valueOf    moment  1/1/15  .month 11 .valueOf   == moment.utc  1/1/15  .month 11 .valueOf    and  moment  11/1/15  .valueOf   == moment.utc  11/1/15  .valueOf    BUT... moment  11/1/15  .month 11 .valueOf    = moment.utc  11/1/15  .month 11 .valueOf    How can the valueOf two moments be equal  but calling month 11  on them makes them diverge? ,ethanj,closed,34,2016-01-09 18:36:06,2016-01-10 22:14:36,,Troubleshooting,,,0,1
11366,moment/moment,2884,setting month as a string number fails without notice,Hey   Consider this code:      javascript var d = moment  ; console.log d.year  2055   ; // works as expected console.log d.date  2   ; // works as expected console.log d.month  7   ; // does nothing  and does not throw any errors either console.log d.month 7  ; // works as expected      In my opinion it s worth to somehow handle a string number value for month  either parse it  0 11 basis   or throw a parsing error. Otherwise  it s a hidden pitfall for applications using _moment_ ,estorski,closed,9,2016-01-10 11:48:31,2016-01-16 00:01:17,,Enhancement,Up-For-Grabs,,,0,1
11365,moment/moment,2885,Ensure Locale calendar keys that are callback functions are scoped to ,In my testing when calling moment calendar  this  in a callback function referred not to the current moment but rather to the formatting strings object. Using apply and passing in the current moment fixed the issue. ,jkporter,closed,3,2016-01-11 06:34:34,2016-03-21 01:23:35,,,,1,1
11364,moment/moment,2886,toJSON of invalid moment returns  null ,We introduced a breaking change in 2.11.0 with  2624  with regard to invalid moments.      javascript // 2.10.6 var m = moment  blah   Y  ; var s = m.toJSON  ;  //  Invalid Date   // 2.11.0 var m = moment  blah   Y  ; var s = m.toJSON  ;  //  null       While we should have been clearer about the breaking change  [apologies] https://twitter.com/wraithgar/status/684085312331452416  to @wraithgar   we also made a mistake in the implementation  and unfortunately it will need to change again.  [src/lib/moment/to type.js L31 L34] https://github.com/moment/moment/blob/2.11.0/src/lib/moment/to type.js L31 L34  :      javascript export function toJSON          // JSON.stringify new Date NaN   ===  null      return this.isValid   ? this.toISOString   :  null ;        This is returning the string   null    not an actual JSON  null  literal.  You can see the difference when used within an object:      javascript var o =   d : new Date NaN   m : moment NaN   ; var s = JSON.stringify o ; console.log s ;          json   d :null  m : null        Therefore  the  toJSON  function should return  null   instead of   null   for invalid moments. ,mj1856,closed,3,2016-01-11 23:14:52,2016-01-12 00:51:55,,Bug,,,0,1
11363,moment/moment,2887,Fix toJSON casting of invalid moment,This is an attempt at solving issue  2886.  Invalid moments were casting as  null   the string  Now they are properly casting as null  the literal  ,wraithgar,closed,6,2016-01-11 23:52:14,2016-03-06 08:53:49,,Bug-fix,,2.12.0,1,1
11362,moment/moment,2888,Momentjs does not parse date with Chinese format,This is regarding an issue we are facing with Chinese date format.  I used a format   yyyy   mm   dd     Date   any date  It gives me   2015   12   24     but it should give me 2015 12 24    notice there are no single quotes in the date. I formatted using this format with java or other jqx formatting   it gives me correct result.  Can you please see  what is to be done. Does moment work well with Chinese timezone. ,raajamalik,closed,4,2016-01-12 05:14:38,2016-01-15 05:43:06,,,,0,1
11361,moment/moment,2889, moment ms .isSame    doesn t work without same timezone,Hi   I just encountered a weird bug while using the  isSame    method   unit  was day  week  month or year  it doesn t really matter .  Here is some code that didn t work on the server  but worked fine on my machine :      javascript var now = moment  ;  if  obj    obj.date    moment obj.date .isSame now   day          // Some code never executed  condition is false  on the server  but works fine locally          obj.date  being a number of milliseconds representing the beginning of a day  retrieved from a database  calculated by a mobile app  gone through  moment  before saving .  Now  here is the code that works everywhere:      javascript var now = moment  .tz  Europe/Paris  ;  if  obj    obj.date    moment obj.date .tz  Europe/Paris  .isSame now   day          // Some code properly executed when needed everywhere        Just by specifying the timezones and these dates  everything works fine.  The server in on _CST  GMT 6 _ timezone  my local machine in on _CET  GMT 1 _.  I m guessing the dates are not on the same timezone somehow  even though the  moment  objects are created basically at the same time.       NB: Specifying globally the timezone   moment.tz.setDefault  Europe/Paris     also seems to do the trick. ,viki53,closed,8,2016-01-12 11:01:52,2016-01-15 06:26:16,,,,0,1
11360,moment/moment,2890,hour 0  set hour to 23,Using this code:      javascript var m = moment  ; m.set  hour:0 minute:0 second:0 millisecond:0   console.log m.toISOString   ;      it show:  2016 01 12T23:00:00.000Z  the time is one hour off. ,jcubic,closed,1,2016-01-13 09:19:21,2016-01-13 09:21:20,,,,0,1
11359,moment/moment,2891,Update is.js,Icelandic  L  locale format should use a dot separator. ,ahreikningur,closed,2,2016-01-13 13:25:10,2016-02-02 18:59:34,,Language,,,1,1
11358,moment/moment,2892,Can t change locale with NativeScript on Android,I m using the [Moment] http://momentjs.com/  plugin to handle dates in my app and it works well... apart from one thing: I can t get any other locale than English  en  to work on Android; on iOS I can change to whatever locale I want.  I have installed Moment in my project   npm install moment   and this is what I m doing      javascript var moment = require  moment  ;  moment.locale  fr  ; console.log moment.locale   ; // Prints  fr  on iOS but  en  on Android    var m = moment  ; m.locale  da  ; console.log m.locale   ; // Prints  da  on iOS but  en  on Android         What is going wrong? Any ideas?  Best Regards  Nikolaj ,nikolajskov,closed,3,2016-01-13 15:07:19,2016-01-15 23:55:20,,Troubleshooting,,,0,1
11357,moment/moment,2893,GMT 03:00 Asia/Baghdad instead of Europe/Moscow,I have  moment.js  version : 2.11.1  moment timezone.js  version : 0.5.0 os windows 7  If I set timezone to UTC 3 Moscow  St.Petersburg  Volgograd  RTZ 2  then the following code   GMT    moment  .format  Z      :    moment.tz.guess    will produce  GMT 03:00:Asia/Baghdad   expected result is  GMT 03:00:Europe/Moscow   http://jsfiddle.net/3javhx7k/2/ ,alealex,closed,1,2016-01-13 16:21:30,2016-01-14 06:16:13,,,,0,1
11356,moment/moment,2894,Enable all non mutation functionality after Object.freeze  ,Splitting out @kruncher s [request] https://github.com/moment/moment/issues/1754 issuecomment 168643322  from the discussion on  1754:  > I have been using Object.freeze on moment instances and this has generally achieved what I have needed; except I just discovered that the following fails: >  >     js > let now = Object.freeze moment   ; > if  now.isSameOrBefore anotherTime     // throws exception >   >     >  > The exception: >  >     > TypeError: Can t add property _isValid  object is not extensible >  at valid__isValid  C: git quick test node_modules moment moment.js:93:24  >  at Moment.moment_valid__isValid [as isValid]  C: git quick test node_modules moment moment.js:2195:16  >  at Moment.isSame  C: git quick test node_modules moment moment.js:1945:44  >  at Moment.isSameOrBefore  C: git quick test node_modules moment moment.js:1962:21  >     >  > Can this be fixed so that Object.freeze can be used when desired? ,butterflyhug,open,1,2016-01-14 13:04:23,0000-00-00 00:00:00,,Bug,,,0,1
11355,moment/moment,2895,LT format is not correct for many locales,Why are the time locales all the same other than EN locale which is correct? For example the LT format in French should be 12h00 and not 12:00 which is what is outputted. It seems none of the locales have the proper time formats  dates are all correctly translated. Why is this?  Thanks ,aaronjpitts,open,9,2016-01-14 15:10:12,0000-00-00 00:00:00,,Bug,Language,Up-For-Grabs,,,0,1
11354,moment/moment,2896,Bug when calculating a week that start in 2015 and ends on 2016,Hi   I ve found a bug that is probably related to different years in the same week. Let s take a look:      moment  .hour 0 .minutes 0 .seconds 0 .week 51 .year 2015 .unix   1450749600  moment  .hour 0 .minutes 0 .seconds 0 .week 52 .year 2015 .unix   1451354400  moment  .hour 0 .minutes 0 .seconds 0 .week 53 .year 2015 .unix   1420423200      But with this it works        moment  .year 2015 .week 53 .startOf  week  .unix  ;  1451268000      Was this was already seen before? ,caioreis,closed,2,2016-01-14 16:47:38,2016-01-15 05:53:00,,,,0,1
11353,moment/moment,2897,parse string arguments for month   correctly  closes  2884,Lets  moment  .month  7    work the same as  moment  .month 7   ,andrewkolesnikov,closed,3,2016-01-15 08:42:34,2016-03-06 09:05:29,,Enhancement,,2.12.0,1,1
11352,moment/moment,2898,9 tests failed. diff:diff across DST  2396.17  diff:diff across DST  2396.19  duration from moments:pure year diff  2444.1  duration from moments:pure year diff  2444.2  start and end of units:start of quarter  2663.7  start and end of units:end of quarter  2664.4  start and end of units:end of quarter  2664.5  start and end of units:end of quarter  2664.6  start and end of units:end of quarter  2664.7  ,    Client info      Date String   : Fri Jan 15 2016 12:04:38 GMT 0200  EET  Locale String : 1/15/2016  12:04:38 PM Offset        :  120 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_11_2  AppleWebKit/537.36  KHTML  like Gecko  Chrome/47.0.2526.106 Safari/537.36            diff:diff across DST  2396.17   month diff across DST  lower bound      javascript // Expected true // Actual   false false === true            diff:diff across DST  2396.19   year diff across DST  lower bound      javascript // Expected true // Actual   false false === true            duration from moments:pure year diff  2444.1   year moment difference      javascript // Expected 1 // Actual   1.0001140794586245 1.0001140794586245 === 1            duration from moments:pure year diff  2444.2   negative year moment difference      javascript // Expected  1 // Actual    1.0001140794586245  1.0001140794586245 ===  1            start and end of units:start of quarter  2663.7   strip out the hours      javascript // Expected 0 // Actual   1 1 === 0            start and end of units:end of quarter  2664.4   keep the quarter      javascript // Expected 2 // Actual   3 3 === 2            start and end of units:end of quarter  2664.5   set the month      javascript // Expected 5 // Actual   6 6 === 5            start and end of units:end of quarter  2664.6   set the day      javascript // Expected 30 // Actual   1 1 === 30            start and end of units:end of quarter  2664.7   set the hours      javascript // Expected 23 // Actual   0 0 === 23     ,slimfadi,closed,2,2016-01-15 10:05:49,2016-03-08 22:08:37,,Unit Test Failed,,,0,1
11351,moment/moment,2899,Update th.js,In Thai people use 24 hour time format. Not  H hours m minutes s seconds . ,antonmedv,closed,9,2016-01-15 11:11:57,2016-03-21 01:24:45,Menelion,Language,,,1,1
11350,moment/moment,2900,Since 2.11.0 week numbers are not calculated correctly,I noticed that since updated to 2.11.0 week numbers  more precisely using format  w    are not calculated correctly on my fullCalendar. I m using spanish locale. For example  the week number for date 28/12/2015  should be 53 which is right in version 2.10.6. Starting 2.11.0  moment says it s 44. ,farlop,closed,4,2016-01-16 19:19:46,2016-01-26 05:42:04,,Troubleshooting,,,0,1
11349,moment/moment,2901,Update ko.js,relativeTime            // Correct relativeTime strings based on Korean grammar checker  http://speller.cs.pusan.ac.kr/PnuSpellerISAPI_201504/   1.      >     2.       >       3.      >     4.      >      @kyungw00k  Please check this  ,JunhoKim01,closed,8,2016-01-17 11:06:43,2016-04-16 08:17:38,Menelion,Language,,2.13.0,1,1
11348,moment/moment,2902,Wrong capital letters in Russian,    moment  .subtract 6   days  .calendar  ;  //                 23:27 moment  .subtract 3   days  .calendar  ;  //             23:27      These should be                  23:27  and              23:27 . Russian doesn t employ capitalization of weekdays. ,polkovnikov-ph,closed,2,2016-01-17 20:28:44,2016-01-19 00:54:26,,,,0,1
11347,moment/moment,2903,Setting or changing locale data per instance,I need to change the first day of week according to user profile; currently I could register my own locales or change already loaded locales but in the moment class   I need to change only some aspects of the locale data per moment instance  not sharing the locales. I couldn t even create a new locale base on the current one because I see no way of getting the locale data in a valid format so I could change de  dow . And no way I think on doing it programatically with startOfWeek or so.  What I wish is something like:      javascript var date = moment  .locale  en  ; date.locale   week:   dow: 1    ; //Only for this instance override/merge current localeData with this one console.log data.locale   ; //en console.log data.localeData  .firstDayOfWeek   ; //1   //This instance will use the plain globally loaded english locale date = moment  .locale  en  ; console.log data.locale   ; //en console.log data.localeData  .firstDayOfWeek   ; //0      ,hendrul,closed,3,2016-01-18 20:54:26,2016-01-19 01:04:57,,,,0,1
11346,moment/moment,2904,2 tests failed. diff:diff across DST  2396.17  diff:diff across DST  2396.19  ,    Client info      Date String   : Mon Jan 18 2016 19:33:22 GMT 0600  CST  Locale String : 18/1/2016 19:33:22 Offset        : 360 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_11_2  AppleWebKit/537.36  KHTML  like Gecko  Chrome/47.0.2526.111 Safari/537.36            diff:diff across DST  2396.17   month diff across DST  lower bound      javascript // Expected true // Actual   false false === true            diff:diff across DST  2396.19   year diff across DST  lower bound      javascript // Expected true // Actual   false false === true     ,kinduff,closed,5,2016-01-19 01:34:13,2016-03-08 22:06:03,,Unit Test Failed,,,0,1
11345,moment/moment,2905,ISO_8601 and parsing YYYY MMTHH:mm,I m hoping for clarification; this isn t necessarily an issue.  Wikipedia  yes yes  not necessarily the best source  please point me at a better one  appears to imply that the following is true: 1.  YYYY MM  is a valid  calendar date  2. any  complete   <date>T<time>  is a valid combined date time  where the date part is calendar  ordinal  or week  .. am I misreading this?  moment doesn t appear to treat  e.g.   2016 01T12:34  as strictly valid:      > moment  2016 01T12:34   moment.ISO_8601  true .isValid  ; false > moment  2016 01 12T12:34   moment.ISO_8601  true .isValid  ; true      I m happy to provide a patch  assuming this isn t a misreading on my part. ,aahoughton,closed,2,2016-01-19 02:41:15,2016-02-03 06:21:37,,,,0,1
11344,moment/moment,2906,Calling moment   is not returning correct date / time,Calling this is returning  January 2nd 2016       javascript var moment = require  moment   moment  .format  MMMM do YYYY        Please see here https://tonicdev.com/5694ed2704e6390d00da2550/569e139189c53111005fe8dd ,pthm,closed,0,2016-01-19 10:49:00,2016-01-19 15:53:48,,,,0,1
11343,moment/moment,2907,Russian locale fixes: capital letters, 2882  2569             : http://lh.2xlibre.net/locale/ru_RU/                                     PR                                      80fa7c5621797591e81b49c48621f53e858737a5 ,socketpair,closed,13,2016-01-19 19:52:04,2016-02-21 21:59:17,,Language,,2.12.0,1,1
11342,moment/moment,2908,diff   returns  0 for the exact same  start of  day ,  0   negative zero  seems to be expected behavior in certain cases  see issues  2503 and  2590 .  The recommendation is to use  startOf  day    when comparing dates based on the discussion in these tickets.  But if you run the following comparison using the exact same timestamp:      javascript var moment = require  moment timezone  ;  function isNegative n      return  1 / n  < 0;    var ts =  1977 05 12 00:00:00.000 ; var format =  YYYY MM DD hh:mm:ss.SSS ; var timezone =  America/Los_Angeles ;  var d1 = moment ts  format .tz timezone .startOf  day  ; var d2 = moment ts  format .tz timezone .startOf  day  ;  console.log  Diff on years is negative zero?:     isNegative d2.diff d1   years    ; console.log  Diff on months is negative zero?:     isNegative d2.diff d1   months    ; console.log  Diff on days is negative zero?:     isNegative d2.diff d1   days    ;      The resulting output will be:      Diff on years is negative zero?: true Diff on months is negative zero?: true Diff on days is negative zero?: false      You can verify this using [this jsfiddle link] http://jsfiddle.net/1410pbev/ .  It seems inconsistent that  years  and  months  are   0  but  days  is regular   0  for what should be the exact same point in time.  A few other things to note:   I get the same result even if I don t use  moment timezone    This does not occur for versions prior to  2.9.0   e.g. version  2.8.4  does not have this issue   I m currently employing a workaround of explicitly adding   0  to ensure I don t encounter   0  as follows:      javascript console.log  Diff on years is negative zero?:     isNegative d2.diff d1   years     0  ;      If behavior is not a bug  would it be possible to update the  moment.js  documentation to provide an explanation and suggested workaround.   P.S. Thanks for a great library    ,bijanvakili,closed,2,2016-01-19 20:29:55,2016-03-22 04:19:30,,Bug,,,0,1
11341,moment/moment,2909,Multiple date with commas how can i convert it,Please refers to <a href= http://codepen.io/sidaurukfreddy/pen/oboOMz >Here</a>  I don t know how to start convert it  with long date sperate with commas  i have also post in stackoverflow.com here is my post is <a href= http://stackoverflow.com/questions/34890798/change group concat in mysql date to indonesia date using moments js >Here</a>  Thanks ,sidaurukfreddy,closed,1,2016-01-20 10:05:38,2016-02-03 06:31:46,,,,0,1
11340,moment/moment,2910,Add  files  property for smaller npm module size, npm install moment  causes my project to be 5 MB larger than before. Looking at the code and the API documentation it seems to me  that only the  moment.js  file and the  locale  files are needed in node. The  min  directory can be omitted. I have added a  files  property to the  package.json  that  includes only  moment.js  and the  locale  directory. ,nknapp,closed,2,2016-01-20 12:37:58,2016-03-06 09:28:33,,,,1,1
11339,moment/moment,2911,Update to icelandic locale ,Format specifier  L  should use dot instead of forward slash:  14.02.2010  instead of  14/02/2010 .  @hinrik   could you confirm? ,jonoskar,closed,2,2016-01-20 14:14:05,2016-03-06 09:08:54,,Language,,2.12.0,1,1
11338,moment/moment,2912,Slashes are accepted when parsing with a format that requires dashes,I want to make sure that a given string is a date in YYYY MM DD format. For that  I use the moment parse and give that format I want as a second parameter. However  if I use slashes instead of dashes in my value  the value is still parsed correctly:      moment  1995 12 25    YYYY MM DD  .isValid  ; // true moment  1995/12/25    YYYY MM DD  .isValid  ; // true  but should be false      Is this behaviour intended? ,luchsamapparat,closed,1,2016-01-20 14:30:18,2016-01-20 14:36:08,,,,0,1
11337,moment/moment,2913,moment  .calendar referenceTime  shows  Tomorrow   while expected  Yesterday   etc.,How come  > moment  .calendar new Date     100000000   shows   Tomorrow at 4:38 PM   when expected   Yesterday ...     and both  > moment  .calendar new Date     10000000  > moment  .calendar new Date     10000000000   shows   Today at 4:38 PM  ?  It is totally wrong. ,laukstein,closed,7,2016-01-20 14:42:48,2016-02-22 21:49:30,,,,0,1
11336,moment/moment,2914,setTime function added,This commit is not ready for production  but I wanted a maintainer s opinion on a few things as I m not keyed in to the vision for this code base. 1. I need to reuse the meridiem fix wrap function in the create/from string and format.js file. At this point I have simply left it in that file and exported it  but I feel like maybe it belongs in a common folder. Any suggestions as to where? 2. I have move the ISO time regular expressions to the Parse/Regex.js file  again for the sake of reuse. Should we also remove the dates from the create/from string.js file for the sake of consistency? 3. I am not sure how you want the parsing flags handled. Right now  they are basically a copy/paste from the create/from string and format.js file  but this is wrong.    What happens if the TimeSet uses a token that was unused by the initial create? Should that token be removed from the unused tokens array  potentially rendering the date valid in strict mode when it previously wasn t?    What happens to the charsLeftOver value? If it previously had a value  it could now be reset to zero  but potentially those chars left over were from the date part of the initial parse not the time  so technically the moment is still invalid . If it was previously zero  it could now be reset to more than zero  this is less bad  a previously valid date has become invalid . I m not sure what the right way to handle this is.    Basically  validity has a lot of edge cases that get screwed up by doing more parsing. ,maggiepint,closed,7,2016-01-21 03:02:08,2016-01-30 00:18:13,,,,1,1
11335,moment/moment,2915,Week format and parse not equivalence,    js moment  2015 1    YYYY W  .format  YYYY W   ;    // 2014 1      Is that a problem or a strange feature? ,afc163,closed,1,2016-01-22 06:50:04,2016-01-22 07:43:07,,,,0,1
11334,moment/moment,2916,feat: moment.d.ts TypeScript definition,support for typescript type definition ,gdi2290,closed,17,2016-01-22 07:21:52,2016-04-18 02:40:15,,TypeScript,,2.13.0,1,1
11333,moment/moment,2917,Locale Punjabi Gurmukhi  India format conversion,Locale Punjabi Gurmukhi  India format conversion. ,harpreetkhalsagtbit,closed,7,2016-01-22 08:46:32,2016-03-06 09:07:59,Menelion,Language,,2.12.0,1,1
11332,moment/moment,2918,Non strict parsing of  1/1/1970  returns date of Dec 31 1969 if  x  format is included,This is not what I expected...      JavaScript moment  1/1/1970   [ M/D/YYYY h:mm A   x ]   en   false .toDate        returns Wed Dec 31 1969 18:00:00 GMT 0600  CST   but      JavaScript moment  1/1/1970    M/D/YYYY h:mm A    en   false .toDate        returns Thu Jan 01 1970 00:00:00 GMT 0600  CST  ,dalelotts,closed,3,2016-01-24 19:33:54,2016-02-22 19:41:13,,Forgiving parsing,,,0,1
11331,moment/moment,2919,Locale change event,I ve been looking for an event to subscribe to for when the locale changes  but there doesn t seem to be any.  The use case is that I m developing a custom  reusable  component that displays a calendar. I would like to automatically refresh the calendar when some outside code changes the locale.  Is there any other way other than monkey patching  moment.locale    to tap into this? ,andreialecu,open,2,2016-01-25 11:58:57,0000-00-00 00:00:00,,Discussion,Enhancement,,,0,1
11330,moment/moment,2920,Turkish locale fail on weekdaysParse,https://jsfiddle.net/xt4d0rLh/4/  Sunday and monday as friday and saturday starts as the same in turkish locale.  What I want is to build an array where the first element depends on the first day of week of the locale and the tail of the array is the other days in the right order. ,wadouk,closed,8,2016-01-25 16:01:23,2016-02-26 00:20:31,Menelion,Language,Troubleshooting,,,0,1
11329,moment/moment,2921,Added module.json file used for trans depend management,at run time by bootloader and other frameworks. it works like component.json but for NPM based frameworks    moment/moment  becomes package name  and absolute path of moment.js can be tracked. all module.json s in all bower packages are merged to create one single resources.json for project. ,lnt,closed,2,2016-01-25 18:29:58,2016-03-28 03:21:01,,,,1,1
11328,moment/moment,2922,Add Ukrainian locale,I ve just got a ukrainian locale translated by one of my friends. More or less  it should be correct and working. The locale s source was based on the source of Polish locale   pl.js  .  PR is not fully ready yet  though:   [ ] we would need some unit tests  like [the one for Polish locale] https://github.com/moment/moment/blob/develop/src/test/locale/pl.js  for example    [ ] I m not sure if the whole  calendar     relativeTime  thing is fully correct  Unfortunately  I m not an Ukrainian speaker to do it. I ll just leave the PR here  maybe someone would be willing to finish it? ,jtomaszewski,closed,3,2016-01-27 04:35:01,2016-02-02 18:46:38,,Language,,,1,1
11327,moment/moment,2923,defineLocale doesn t inherit form the main locale,this code doesn t work.  de short  will use weekdays from  en       moment.defineLocale  de     months:  Januar_Februar_M rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember .split  _     monthsShort:  Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez. .split  _     weekdays:  Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag .split  _     weekdaysShort:  So._Mo._Di._Mi._Do._Fr._Sa. .split  _     weekdaysMin:  So_Mo_Di_Mi_Do_Fr_Sa .split  _     longDateFormat:     LT:  HH:mm [Uhr]      L:  DD.MM.YYYY      LL:  D. MMMM YYYY      LLL:  D. MMMM YYYY LT      LLLL:  dddd  D. MMMM YYYY LT   moment.defineLocale  de short     calendar:     lastDay:  [Gestern ] LT      sameDay:  [Heute ] LT      nextDay:  [Morgen ] LT      lastWeek:  [letzten] dd[ ] LT      nextWeek:  [n chsten] dd[ ] LT      sameElse:  ll    longDateFormat:     l:  DD.MM.      LT:  HH:mm      L:  DD.MM.YYYY      LL:  D. MMMM YYYY      LLL:  D. MMMM YYYY LT      LLLL:  dddd  D. MMMM YYYY LT       am I doing something wrong? ,antpaw,closed,3,2016-01-27 16:11:36,2016-03-07 14:12:27,,Troubleshooting,,,0,1
11326,moment/moment,2924, Simple  bug in parsing a date with 3 vs 4 years,Using moment 2.11.1:      new moment  04/02/201    DD/MM/YYYY  .isValid   true      Is this expected behavior? I also get:      new moment  Marbrary    MMMM  .isValid   true     ,Karolusrex,closed,1,2016-01-28 09:37:55,2016-02-03 07:11:21,,,,0,1
11325,moment/moment,2925,delete  sorry,,mrchess,closed,0,2016-01-28 09:45:59,2016-01-28 09:51:17,,,,0,1
11324,moment/moment,2926,Locale aware weekdays are not working,In  ru_ru  locale  moment  .day 0 .format  ;  shows the last Sunday  while in Russia week starts in Monday. ,polkovnikov-ph,closed,1,2016-01-28 14:09:58,2016-02-03 07:03:46,,,,0,1
11323,moment/moment,2927,Locale aware moment.weekdays  methods,How do I get list of weekdays in proper locale aware order? ,polkovnikov-ph,closed,7,2016-01-28 14:12:42,2016-04-16 05:52:19,,Enhancement,Up-For-Grabs,,,0,1
11322,moment/moment,2928,Duration days value inconsistent depending on input  years/days ,When duration is provided as years  the days of it is zero:      javascript moment.duration 0.123   years  .months   // output: 1.476 moment.duration 0.123   years  .days   // output: 0      However  when providing the same value in days:      javascript moment.duration 0.123   365   days  .months   // output: 1 moment.duration 0.123   365   days  .days   // output: 13.894999999999996     ,juhamust,open,6,2016-01-28 21:42:44,0000-00-00 00:00:00,,Bug,,,0,1
11321,moment/moment,2929,vert yes not to boolean nodejs,,mzratio,closed,1,2016-01-28 23:12:41,2016-02-03 07:04:26,,,,0,1
11320,moment/moment,2930,Moment in and require   node xlsx   with the use of a problem,I use require   node xlsx   to read the xlsx file  the file contains the date  and now the problem is: If xlsx document as a whole there is only a date column  then parsed using moment no problem  if the document inside more than two columns  then all dates are resolved to 1970 01 01 format  I would like to ask is what causes? For example: 2015/12/1 2015/12/1 Moment  param[0] .Format   YYYY MM DD   parameter param[1] for the acquisition of the cell date If the entire document is only one column  then no problem If used again Moment  param[1] .Format   YYYY MM DD   on the emergence of 1970 01 01 as ,thinkive,closed,7,2016-01-31 03:55:11,2016-05-10 06:57:51,,Troubleshooting,,,0,1
11319,moment/moment,2931,README.md edit,Added a more _ non technical _ description of what Moment.js does. Hopefully it ll help some of the newer developers out there get a better understanding of what Moment.js can do for them in quick paragraph.   ,PatrickFranz,closed,14,2016-01-31 06:28:02,2016-03-11 04:46:46,,Documentation,,,1,1
11318,moment/moment,2932,List loaded locales,Fixes  843  This adds the method  moment.locales    to get an array of the locales that have been loaded  ie  bundled with moment.js or manually required in node.   It does not list or  require  available  but unloaded  locales in node. I think that should be a separate feature if needed at all. ,jisaacks,closed,4,2016-01-31 22:14:45,2016-03-06 08:52:44,,New Feature,,2.12.0,1,1
11317,moment/moment,2933,.week   returns 6 for 2/1/2016,          // get current time       var now = moment  ;       var minute = now.minute  ;       var hour = now.hour  ;       var day = now.date  ;       var week = now.week  ;       var month = now.month     1; // moment months are 0 indexed        console.log  week:  s   week ;      the momentjs is returning week number as 6 with the above code  shouldn t it be 1 instead? ,bonesoul,closed,1,2016-02-01 02:02:43,2016-02-01 02:45:16,,,,0,1
11316,moment/moment,2934,Possible to get week number relative to month?,week   returns the week number according to year  what i d like to get is week number relative to month. Is it possible? ,bonesoul,closed,3,2016-02-01 02:48:47,2016-02-24 16:52:51,,New Feature,Up-For-Grabs,,,0,1
11315,moment/moment,2935,Format problem with  LTS ,    > moment.version >  2.8.3   > moment._locale > Locale  _abbr:  en    > moment  2013 02 04T22:44:30.652Z  .format  LTS   >  11:44 PM6       What the heck is  PM6 ?  first decimal of milliseconds  ,anilanar,closed,1,2016-02-01 10:01:19,2016-02-01 10:11:59,,,,0,1
11314,moment/moment,2936,Regular Expression Denial of Service,Via the Node Security Project: https://nodesecurity.io/advisories/55  > _Overview_ >  > moment is vulnerable to regular expression denial of service when user input is passed unchecked into moment.duration   blocking the event loop for a period of time. >  >  The Regular expression Denial of Service  ReDoS  is a Denial of Service attack  that exploits the fact that most Regular Expression implementations may reach extreme situations that cause them to work very slowly  exponentially related to input size . An attacker can then cause a program using a Regular Expression to enter these extreme situations and then hang for a very long time.  [1] >  > It s not a huge amplification it takes about 25k characters to get 1.1 seconds however that s well under most servers max request size so it s certainly exploitable. >  > The regular expression in question >  > moment/2.10.6/moment.js >  >  1679     var aspNetRegex = /    ? ?:  d   . ?  d   :  d   ?: :  d   .?  d 3  ? ?/;  >  > _Proof of concept_ >  >     > var moment = require  moment  ; >  > var genstr = function  len  chr    >     > var result =   ; >     > for  i=0; i<=len; i      >         > result = result   chr; >     >   >  >     > return result; >   >  >  > for  i=20000;i<=10000000;i=i 10000    >     > console.log  COUNT:     i ; >     > var str =       genstr i   1   >     > console.log  LENGTH:     str.length ; >     > var start = process.hrtime  ; >     > moment.duration str  >  >     > var end = process.hrtime start ; >     > console.log end ; >   >     >  > _Results_ >  >     >   node moment.js > COUNT: 20000 > LENGTH: 20002 > [ 0  618931029 ] > COUNT: 30001 > LENGTH: 30003 > [ 1  401413894 ] > COUNT: 40002 > LENGTH: 40004 > [ 2  437075303 ] > COUNT: 50003 > LENGTH: 50005 > [ 3  824664804 ] > COUNT: 60004 > LENGTH: 60006 > [ 5  651335262 ] >     ,joeybaker,closed,18,2016-02-01 18:48:55,2016-02-03 05:38:30,,Bug,Help Wanted,Up-For-Grabs,,,0,1
11313,moment/moment,2937,Error to format  GGGG ,The error occurs when we show the following dates in format  GGGG :   moment  2015 01 01    YYYY MM DD      moment  2015 01 02    YYYY MM DD     moment  2015 01 03    YYYY MM DD    fiddle: https://jsfiddle.net/sa4axxkx/ ,hucharal,closed,6,2016-02-01 18:52:46,2016-02-03 07:08:11,,,,0,1
11312,moment/moment,2938,adding time set functionality,Adding functionality for parse and set of time. ,maggiepint,closed,6,2016-02-02 05:17:42,2016-03-22 19:46:17,,New Feature,,,1,1
11311,moment/moment,2939,use full string match to speed up aspnet regex match,Fixes: https://github.com/moment/moment/issues/2936  C  duration match was _almost_ complete enough to match full strings  just needed to allow for the extra digits in microseconds. Getting to put in  ^      resolves the speed problem reported @  2936. ,rvagg,closed,11,2016-02-02 07:04:22,2016-02-03 22:39:20,,High Priority,,2.11.2,1,1
11310,moment/moment,2940,Invalid date is not translated,Why isn t invalid date translated when everything else regarding the date/time is translated? ,johdah,open,5,2016-02-02 10:14:42,0000-00-00 00:00:00,,Enhancement,,,0,1
11309,moment/moment,2941,Language Telugu is spelt incorrectly in http://momentjs.com/, [screen shot 2016 02 03 at 12 22 52 pm] https://cloud.githubusercontent.com/assets/13711648/12770037/1918ff60 ca71 11e5 9259 314de3735604.png  Hi   Please change  Tegulu  to  Telugu .  Thanks  Ramesh ,grbbabu,closed,3,2016-02-03 00:58:31,2016-02-03 05:42:47,,,,0,1
11308,moment/moment,2942,isDSTShifted fails after hours are set,I noticed while playing with the parser that the isDSTShifted function will not work correctly if one of the set functions is called on the date. The following unit tests fail on a computer set to US central time where DST shift did happen on that day of that year at that time   I realize they don t work in the general case.      javascript assert.ok  moment  2013 03 10 2:30    YYYY MM DD HH:mm  .hours 3 .isDSTShifted     DST is no longer shifted  date was moved to 3:30  ; assert.ok moment  2013 03 10 3:30    YYYY MM DD HH:mm  .hours 2 .isDSTShifted     DST is now shifted as date was moved to nonexistent time  ;      This is because the isDSTShifted function simply re parses the original input and format to make it s determination of whether DST is shifted:      javascript export function isDaylightSavingTimeShifted          if   isUndefined this._isDSTShifted             return this._isDSTShifted;            var c =   ;      copyConfig c  this ;     c = prepareConfig c ;      if  c._a            var other = c._isUTC ? createUTC c._a  : createLocal c._a ;         this._isDSTShifted = this.isValid                  compareArrays c._a  other.toArray    > 0;       else           this._isDSTShifted = false;            return this._isDSTShifted;        This function also doesn t have test coverage. This may be because there isn t a great way to mock clock behavior in this situation.  I can get to this after I finish the set time request. I just wanted to document it. Also  let me know if I am misinterpreting the intent of the code. ,maggiepint,closed,10,2016-02-03 01:37:14,2016-07-04 05:00:50,,Bug,,,0,1
11307,moment/moment,2943,Added options param to m.isBetween.,Re: https://github.com/moment/moment/issues/2164  Did not include exhaustive tests for all the units inclusive. ,darrenjennings,closed,13,2016-02-03 05:27:24,2016-03-19 14:58:34,,Enhancement,,,1,1
11306,moment/moment,2944,Getting NaN when asking for the week of the year.,Hi  I m getting NaN when doing the following:    let year = 2014; let lastWeek = moment [year  12  31] .week  ; // lastWeek = NaN;    But this works instead:   let year = 2014; let lastWeek = moment  .year year .endOf  year  .week  ; // lastWeek = 1;    To solve the last week of the year being 1 I just do the following  but this is actually out of the scope of the bug report...   lastWeek =  lastWeek < 3  ? moment  .year year .endOf  year  .add  7   days  .week   : lastWeek ; // lastWeek = 51;    Note that I m in the GMT  1 Zone and for me the week starts on Monday  Cheers ,sandokanelcojo,closed,1,2016-02-03 12:19:09,2016-02-08 18:05:52,,Troubleshooting,,,0,1
11305,moment/moment,2945,Parse input with time zone offset in separate field, moment.parseZone  is good when the input string contains the time zone offset  however sometimes the offset is in a separate field  as either a string or in terms of whole minutes.  This can lead to code like:      javascript var input =  2014 01 08 8:00 AM ; var offset = 300; var m = moment.utc input   YYYY MM DD h:mm A  .add offset   minutes  .utcOffset offset ; console.log m.format   ; //  2014 01 08T18:00:00 05:00       It would be better if the offset could be passed as a parameter to  parseZone .  See moment/momentjs.com 97 ,mj1856,open,6,2016-02-03 17:03:57,0000-00-00 00:00:00,,Enhancement,Up-For-Grabs,,,0,1
11304,moment/moment,2946,Fix usage suggestions for min and max,The deprecation warnings for instance  min  and  max  give incorrect substitutions. Per the current documentation  moment  .min  and  moment.max    should be replaced by  moment.max  and  moment.min  respectively. We learned this the hard way.  <img width= 962  alt= screen shot 2016 02 03 at 1 32 52 pm  src= https://cloud.githubusercontent.com/assets/332880/12797803/ac0cc38e ca7a 11e5 8f03 3a8adf7fec70.png >  https://jsfiddle.net/s5ex3qh7/  open the console to see the deprecation warning  ,crteal,closed,7,2016-02-03 21:35:15,2016-03-06 08:48:18,,Bug-fix,,2.12.0,1,1
11303,moment/moment,2947,Regular Expression Denial of Service,https://nodesecurity.io/advisories/55 shows a security vulnerability with moment  I can certainly add the check in myself but it would be ideal if it was part of the package itself ,megamx28,closed,1,2016-02-04 01:19:39,2016-02-04 18:49:52,,,,0,1
11302,moment/moment,2948,Returns wrong year 2020  instead of 2016, moment  01/25/2016    MMDDYY  ._d   returns    Sat Jan 25 2020 00:00:00 GMT 0200   while expected   Sat Jan 25 2016 00:00:00 GMT 0200   I think in this case format  MMDDYY  must be validated as  MMDDYYYY . Format  MMDD  returns fine results. ,laukstein,closed,3,2016-02-04 07:49:14,2016-02-04 08:03:47,,,,0,1
11301,moment/moment,2949,moment  .format  wo   doesn t work correctly,I update the latest version  2.11.   andformat  wo   doesn t work correctly in local  zh       javascript function makeFormatFunction format        var array = format.match formattingTokens   i  length;      for  i = 0  length = array.length; i < length; i              if  formatTokenFunctions[array[i]]                array[i] = formatTokenFunctions[array[i]];           else               array[i] = removeFormattingTokens array[i] ;                      return function  mom            var output =   ;         for  i = 0; i < length; i                output  = array[i] instanceof Function ? array[i].call mom  format  : array[i];                   return output;      ;        I think this code here has some thing wrong. see the console panel. Please checkout. Thanks.  [screen shot 2016 02 05 at 10 31 01 am] https://cloud.githubusercontent.com/assets/7732663/12836622/a437be6c cbf5 11e5 938e 62a3fe9f3e07.png  ,VeraWei,closed,3,2016-02-05 02:46:20,2016-03-12 01:13:47,,Troubleshooting,,,0,1
11300,moment/moment,2950,Optimization in isArray,Hi   As you already do in isDate and isFunction  to speedup isArray method  use instanceof at first place. I made small jsperf test: http://jsperf.com/isarray 1. Basically  even if for some inputs the first condition is false  overall improvement is better with instanceof.. ,marijaselakovic,closed,4,2016-02-05 09:55:00,2016-02-12 18:26:45,,performance,,,1,1
11299,moment/moment,2951,Wrong calendar   function,Just did npm install moment  version    ^2.11.2   var yesterday = new Date  ; yesterday.setUTCDate yesterday.getUTCDate     1 ; console.log  yesterday:     yesterday           moment  .calendar yesterday  ;  Outputs: yesterday: Thu Feb 04 2016 12:27:49 GMT 0200  EET    Tomorrow at 12:27 PM  var yesterday = new Date  ; yesterday.setUTCDate yesterday.getUTCDate     1 ; console.log  yesterday:     yesterday           moment  .calendar yesterday  ;  Outputs: yesterday: Sat Feb 06 2016 12:30:19 GMT 0200  EET    Yesterday at 12:30 PM ,curlydevil,closed,1,2016-02-05 10:31:07,2016-02-05 11:05:12,,,,0,1
11298,moment/moment,2952,Allow moment.calendar to support more options,Often I want to display a date with more detail as it gets progressively older.      javascript moment.calendar null      sameDay:    [Today]            // Today   lastDay:    [Yesterday]        // Yesterday   nextDay:    [Tomorrow]         // Tomorrow   sameMonth:  ddd  D             // Fri  5   sameYear:   ddd  D MMM         // Fri  5 Feb   sameElse:   ddd  D MMM YYYY    // Fri  5 Feb 2015   ;     ,amk221,closed,4,2016-02-05 13:32:41,2016-03-19 16:44:17,,Enhancement,Up-For-Grabs,,,0,1
11297,moment/moment,2953,Add method  isSameOrBetween ,Allows user to determine if Moment is between or equal to a set of Moments  From  To  ,dbkirk4211,closed,6,2016-02-05 19:33:22,2016-02-08 17:56:05,,,,1,1
11296,moment/moment,2954,Add days not work for literal expression.,moment  2015 02 05  .add 1  days  ; the value still be 2015 02 5..... ,7upcat,closed,1,2016-02-06 12:59:15,2016-02-06 13:33:27,,,,0,1
11295,moment/moment,2955,Add parsing negative components in durations when ISO 8601,This is to resolve issue  2408 where formats such as  P 6D  were not supported for durations. It supports negating each component of the duration. If the whole duration has already been negated   P6D  >  6 days   then it will make the component positive    P 6D   > 6 days . The issue showed   P 6H 3M  as an example  but the lack of a  T  does not fit with the rest of the standard. In light of this  the changes allow for   PT 6H 3M  instead. ,stephenreddek,closed,4,2016-02-07 03:05:43,2016-04-16 07:36:50,,Enhancement,,2.13.0,1,1
11294,moment/moment,2956,Meaningless strings convert into valid dates when format strings are used,moment  f2    DD MM YYYY  ;  is parsed as  2 February 2016 . ,gibito,closed,1,2016-02-08 20:03:45,2016-02-10 19:39:04,,,,0,1
11293,moment/moment,2957,weekYear and isoWeekYear getters both return the year,I m using version 2.11.2.  The weekYear and isoWeekYear getters both return the year.      var moment = require  moment  ; var feb8 = moment new Date  Feb 8 2016   ; console.log feb8.year           feb8.weekYear           feb8.isoWeekYear   ;      This prints 2016 2016 2016 ,mheitzibm,closed,2,2016-02-08 20:10:16,2016-02-10 19:38:17,,,,0,1
11292,moment/moment,2958,optimization of isArray and unit tests,Optimization of isArray  use instanceof at first place  and unit tests ,marijaselakovic,closed,2,2016-02-10 08:12:27,2016-03-06 08:47:11,,performance,,2.12.0,1,1
11291,moment/moment,2959,Covert to 24 hours time formate, var start_time =    .start_time  .val  ;   this will return time like 02:00 PM  How can I convert it 24 hours time format using moment js. I used [this plugin] http://jdewit.github.io/bootstrap timepicker/  to show time. ,iamkallolpratim,closed,3,2016-02-11 07:47:23,2016-02-12 18:39:36,,,,0,1
11290,moment/moment,2960,diff between hours in the same timezone,I have a variable called   now   that is   o  _isAMomentObject: true  _isUTC: false  _pf: Object  _locale: t  _d: Thu Feb 11 2016 18:22:36 GMT 0200  BRST      an another called   then      o  _isAMomentObject: true  _i: Thu Feb 11 2016 18:20:29 GMT 0200  BRST   _isUTC: false  _pf: Object  _locale: t    I am trying to diff this 2 moments:      moment now.diff then  .format  HH:mm:ss    21:02:07       Why 21? shouldn t it be only 00:02:07?  What is my mistake? ,fredguth,closed,2,2016-02-11 20:36:54,2016-02-24 06:05:14,,Troubleshooting,,,0,1
11289,moment/moment,2961,moment  .isoWeekday 1  not working,I m trying to print out the weekday like  Tuesday :   moment  .isoWeekday 1     But all I m getting is an object:       d: Fri Feb 12 2016 12:03:33 GMT 0100  W. Europe Standard Time  _isAMomentObject: true _isUTC: false _isValid: true _locale: Locale _pf: Object __proto__: Moment      I m doing:    day = moment new Date parseInt ts   .weekday    then:  moment  .isoWeekday day    But it outputs an object  I ve tried  moment  .day 1    same result  And  moment  .isoWeekday day .format    outputs  2016 02 12T12:09:06 01:00   I use browserify and used  moment.locale  cs    as well after require.  Wat DOES work however is doing:   moment new Date parseInt ts   .format  dddd     I m curious why the other way doesn t work. Why would I need  .isoWeekday  when simply formatting works...?  But with  .format    I don t get things like  last Friday  or  next Tuesday   and I need that  with  .day  or  .weekday . But doing like the example in the docs:   moment  .weekday 7 ; // next Sunday   Outputs an  Object  not a  String    And for example doing:          now = moment parseInt ts       day  = now.day       date = now.date        outputs  Numbers  and not the promised  String  of the day  ie last Tuesday etc.   I must be missing something from the docs  or it is a weird  Browserify  bug. ,TrySpace,closed,2,2016-02-12 11:14:10,2016-02-12 18:20:24,,Troubleshooting,,,0,1
11288,moment/moment,2962,locale changes does nt work,When I try to change the locale value  nothing happens  not even error.            this. log.log moment.locale   ; // returns  en        this. log.log moment.locale  fr   ; // set to french but returns  en        this. log.log moment.locale   ; // of course  still returns  en  instead of  fr       I also tried from the Chrome developer tools console:      > moment.locale  fr    >  en      ,titimoby,closed,15,2016-02-15 11:25:08,2016-02-18 20:17:05,,Troubleshooting,,,0,1
11287,moment/moment,2963,Russian day of week lowercase names,In Russian language we use only lowercase day of week names.  To fix it  need to change 2 lines: https://github.com/moment/moment/blob/develop/locale/ru.js L45      standalone:             _           _       _     _       _       _        .split  _    format:             _           _       _     _       _       _        .split  _         with       standalone:             _           _       _     _       _       _        .split  _    format:             _           _       _     _       _       _        .split  _         For short names it possible to write day of week with uppercase letter. So  following two lines with shortnames can be unchanged. ,timeking,closed,1,2016-02-15 12:24:26,2016-02-17 21:02:31,,,,0,1
11286,moment/moment,2964,Decimals in add days and months don t work when negative,Kind of an obscure use case  but of the following tests  the second and fourth fail:      javascript assert.equal moment [2016 3 3] .add 1.5   days  .date    4   adding 1.5 days adds 1 day  ; assert.equal moment [2016 3 3] .add  1.5   days  .date   2   adding  1.5 days subtracts 1 day  ; assert.equal moment [2016 3 3] .add 1.5   months  .month    4   adding 1.5 months adds 1 month  ; assert.equal moment [2016 3 3] .add  1.5   months  .month    2   adding  1.5 months subtracts 1 month  ;          javascript moment [2016 3 3] .add  1.5   days  .date   = 1 moment [2016 3 3] .add  1.5   months  .month   = 1      As you can see  adding 1.5 of a non deterministic unit ends up adding 1 of it  while adding  1.5 ends up subtracting 2 of it.  I feel as though this behavior should be consistent  1 both ways .  Month and day should be coerced to integer values from floats. They aren t right now  and that s what is causing this.  2430 would make it clear that this is what is intended. Since all other time frames  year  quarter  week  are converted to months and days  only months and days would need to be coerced.  I have this fixed locally  but I want to add a whole bunch of unit tests because there was no unit test coverage of adding or subtracting floats  or of adding and subtracting negatives  so I want to cover everything.  Let me know if this isn t the desired behavior. An alternative would be to simply invalidate the date if a float was passed. I wouldn t mind this. ,maggiepint,closed,3,2016-02-16 02:58:37,2016-02-24 16:46:34,,Bug,,,0,1
11285,moment/moment,2965,add weekOfMonth,Implements https://github.com/moment/moment/issues/2934  Some questions that occurred to me while working on this:   Does it make sense to implement this function as a standalone method vs integrating it into  moment.week ?   Do we also need an  ISO  version of this method  similar to  isoWeek ?   Are my test cases sufficient? ,dmaii,closed,14,2016-02-16 06:27:02,2016-07-19 16:20:07,,New Feature,,,1,1
11284,moment/moment,2966,Using UTC format Z,v2.11.2: Input: moment  20160216120000    YYYYMMDDHHmmss Z  .toDate   Result: Date  Tue Feb 16 2016   12  :00:00 GMT 0100   v2.8.3:  Input: moment  20160216120000    YYYYMMDDHHmmss Z  .toDate   Result: Date  Tue Feb 16 2016   13  :00:00 GMT 0100   Using moment.utc   is OK in both: Input: moment.utc  20160216120000    YYYYMMDDHHmmss  .toDate   Result: Date  Tue Feb 16 2016 13:00:00 GMT 0100  ,felipem775,closed,1,2016-02-16 11:50:08,2016-02-16 19:14:33,,,,0,1
11283,moment/moment,2967,Suddenly getting  Deprecation warning: moment construction falls back to js Date.  calculating difference,It links to an issue here on the repo. I ve read about it and from what I understood  it should work with the value my code is providing.  Here s what I m doing:      js moment  .subtract moment  2016 02 17T02:57:59Z         That has been working perfectly  up until today. I haven t changed the version in  package.json . I tried with the latest version just in case. I haven t changed my code either.  Why is it throwing the error now? Isn t that string supposed to be valid?  By the way  it doesn t stop the script from executing.  Edit: the stack trace is      Deprecation warning: moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info. Arguments: [object Object] Error     at Function.createFromInputFallback  /project/node_modules/moment/moment.js:850:105      at configFromInput  /project/node_modules/moment/moment.js:1485:32      at prepareConfig  /project/node_modules/moment/moment.js:1456:13      at createFromConfig  /project/node_modules/moment/moment.js:1423:44      at createLocalOrUTC  /project/node_modules/moment/moment.js:1505:16      at local__createLocal  /project/node_modules/moment/moment.js:1509:16      at create__createDuration  /project/node_modules/moment/moment.js:1870:41      at Moment.subtract  /project/node_modules/moment/moment.js:1940:19      at /project/commands/uptime.js:16:35     at Request._callback  /project/node_modules/tmi.js/lib/api.js:49:13      ,johnRivs,closed,8,2016-02-17 11:16:42,2016-02-17 22:53:41,,Troubleshooting,,,0,1
11282,moment/moment,2968,moment and es6,I import module like this  import moment from  moment ;  So I am wondering if I can import only one function not a whole module.  I mean something like this   import  diff  format  from  moment ;  .  And also for me stays unclear how to change locale using es6?  Is it possible with latest version of this library? ,berdof,closed,2,2016-02-17 13:22:46,2016-02-17 20:59:34,,,,0,1
11281,moment/moment,2969,Add GitHub Issue/PR Templates,We should use this new feature in all three moment repos:  https://github.com/blog/2111 issue and pull request templates ,mj1856,open,2,2016-02-17 20:16:11,0000-00-00 00:00:00,mj1856,Up-For-Grabs,,,0,1
11280,moment/moment,2970,change add subtract to handle decimal values by rounding,Normalizes behavior of add and subtract when a decimal value is passed. Current behavior:      javascript moment  2016 04 03  .add 1.5   days  .format   =  2016 04 04T00:00:00 05:00   //  adds 1  moment  2016 04 03  .add  1.5   days  .format   =  2016 04 01T00:00:00 05:00   //  adds  2  moment  2016 04 03  .subtract 1.5   days  .format   =  2016 04 01T00:00:00 05:00   //  subtracts 2  moment  2016 04 03  .subtract  1.5   days  .format   =  2016 04 04T00:00:00 05:00   //  subtracts  1       Behavior after PR:      javascript moment  2016 04 03  .add 1.5   days  .format   =  2016 04 04T00:00:00 05:00   //  adds 1  moment  2016 04 03  .add  1.5   days  .format   =  2016 04 02T00:00:00 05:00   //  adds  1  moment  2016 04 03  .subtract 1.5   days  .format   =  2016 04 02T00:00:00 05:00   //  subtracts 1  moment  2016 04 03  .subtract  1.5   days  .format   =  2016 04 04T00:00:00 05:00   //  subtracts  1       The same behavior happens with months.  I understand where this could be interpreted as a breaking change  so I certainly won t be offended if you don t take it  but I think it definitely causes the API to behave in a manner closer to what the user would expect. ,maggiepint,closed,11,2016-02-18 00:14:18,2016-03-06 08:45:27,,Bug-fix,,2.12.0,1,1
11279,moment/moment,2971,moment  1 /  /        DD/MM/YYYY   has spaces but returns a valid object,https://jsfiddle.net/voftgu4c/  Is this intended behavior? ,xiankai,closed,1,2016-02-18 08:17:22,2016-02-18 08:45:01,,,,0,1
11278,moment/moment,2972,Use npmignore when publising npm packages,Hello   I ve noticed that  min/tests.js  is still present in npm package even if [it was added to npmignore] https://github.com/moment/moment/commit/eb35595035ebd10b2505c8f249f57fb79b468543 . I think the publication is made with  scripts/npm_prepublish.sh . So I ve added to this file a copy of the  .npmignore  file. ,nono,closed,4,2016-02-18 09:35:39,2016-03-06 08:40:13,,Build/Release,,2.12.0,1,1
11277,moment/moment,2973,3000ms results as 2.9999999999999996 seconds,    javascript var durationInMs = moment.duration 3000   milliseconds  ; durationInMs.as  seconds   //  > 2.9999999999999996     ,balasphilip,closed,3,2016-02-18 15:30:25,2016-02-24 05:22:09,,Troubleshooting,,,0,1
11276,moment/moment,2974,Add  date  as alias to  day  unit for startOf   and endOf  ,The  startOf    and  endOf    functions take a unit of time  but don t accept   date   as a valid unit  instead using   day   to refer to the day of the month. This is inconsistent with other parts of the API that use   date   to refer to the day of the month. This inconsistency requires a special case when creating higher level functions that use both the  startOf    function and other functions like  set    where   date   is the appropriate unit. ,fastfedora,closed,3,2016-02-18 20:26:48,2016-02-24 16:05:23,,Enhancement,Up-For-Grabs,,,0,1
11275,moment/moment,2975,Issue with duration add fraction of day,I can use fractions in duration when using hours or minutes when using the add function. However  for days the fraction is somehow floored.  This works as expected:      javascript add 0.5   hours   add 0.2   minutes  ;      However this doesn t:      javascript add 0.5   days   // 0 add 1.2   days   // 1;     ,gionkunz,closed,5,2016-02-21 16:58:40,2016-02-21 17:04:00,,,,0,1
11274,moment/moment,2976,Remove tests from published NPM package,The published NPM package is huge  >  4MB .  When looking into this  the tests  2.5MB  are published   Is there a reason for that? If not  can we ignore this from the NPM publish? ,dthree,closed,4,2016-02-22 03:09:06,2016-02-24 06:18:30,,Troubleshooting,,,0,1
11273,moment/moment,2977,Russian locale: months abbreviation,http://new.gramota.ru/spravka/buro/search answer?s=242637                                                . ,socketpair,closed,14,2016-02-22 08:46:26,2016-04-16 06:30:56,Menelion,Language,,2.13.0,1,1
11272,moment/moment,2978,2.3 hour duration gives 2h 17m  should be 2h 18m ,    js //moment.js 2.11.2 moment.duration 0.3   h  .minutes   //18  as expected moment.duration 2.3   h  .minutes   //17 //? ?      I understand that it s floating point problem  but can we work around this somehow  by not converting everything to milliseconds for instance? ,afanasy,open,19,2016-02-22 12:23:23,0000-00-00 00:00:00,,Bug,,,0,1
11271,moment/moment,2979,moment with locales:  ./locale  not found,I m getting this warning when using webpack:      WARNING in ./ /moment/min/moment with locales.js Module not found: Error: Cannot resolve  file  or  directory  ./locale in  node_modules moment min @ ./ /moment/min/moment with locales.js 271:16 43      any clues? ,electrobabe,open,30,2016-02-22 18:15:29,0000-00-00 00:00:00,,Bug,Help Wanted,,,0,1
11270,moment/moment,2980,Feature request: ES6 have RegExp.escape  . So don t reinvent wheel.,I mean  src/lib/parse/regex.js  file ,socketpair,closed,5,2016-02-22 19:06:53,2017-12-02 23:54:07,,es6 rework,,,0,1
11269,moment/moment,2981,Replace Esparanto with Babel / Rollup,We re currently using [Esperanto] https://github.com/esperantojs/esperanto  to do the ES6 to ES5 transpile  but Esperanto has been officially deprecated as of August 16  2015.  We should update to [Babel] http://babeljs.io/  ,mj1856,closed,10,2016-02-23 00:51:28,2016-04-26 16:49:29,timrwood,Build/Release,,,0,1
11268,moment/moment,2982,Add  date  as alias to  day  for startOf   and endOf  .,Patch for  2974. ,datyayu,closed,7,2016-02-23 04:33:59,2016-04-16 07:01:13,,Enhancement,,2.13.0,1,1
11267,moment/moment,2983,Unable to parse date,I am getting this format from some service  2016 02 23 11:31:23 AM  How can I parse it?? it says this is not supported format or something like that  is there a way I can set this valid format somewhere?  Or  lets say we did not have AM or PM  how can you tell this date is AM or PM?  ,Daxito,closed,5,2016-02-23 18:11:10,2016-02-23 19:32:05,,Forgiving parsing,,,0,1
11266,moment/moment,2984,Tips to test for overlapping times,I have 4 moments  start time 1   end time 1  start time 2  end time 2 .  Is there a simple solution using moment to test if the time from the first group overlaps with the time from the second group?  The time would be in YYYY MM DD hh:mm:ss.SSS A                          format btw.  Thanks ,aHumanBeing,closed,2,2016-02-23 20:37:51,2016-02-23 22:48:47,,,,0,1
11265,moment/moment,2985,Look for meridiem indicator when matching iso format,As presented in  2983  using the date format  2016 02 23 11:31:23 PM  will match an ISO format  even though it is not. This causes a wrong date to be parsed:      js moment  2016 02 23 11:31:23 PM  .format   =  2016 02 23T11:31:23 06:00       This is because 2016 02 23 11:31:23 technically is an ISO format. We need to change the from string file to check for a meridiem indicator and do something other than match ISO format if it is there. ,maggiepint,closed,15,2016-02-23 22:47:10,2016-11-06 17:13:21,,Bug,Forgiving parsing,,,0,1
11264,moment/moment,2986,Wrong parsing of strings starting from  a ,Hello. I found this issue:   moment  adsfasdffgdgw    hh:mma  .format  HH:mm     gives  00:00   Don t know why it happens  but it happens with every string starting from  a  letter. ,arsen91,closed,6,2016-02-24 22:24:25,2016-03-23 06:53:10,,Enhancement,Forgiving parsing,,,0,1
11263,moment/moment,2987,Validate format strings,In [the docs for string   format] http://momentjs.com/docs/ /parsing/string format/   we give an example of the forgiving parser using the format string   h:hh A .  The example should probably be changed to  h:mm A   but it brings up an interesting point.  Since there s no possible _valid_ input that would have two separate hours components  then we should probably raise an error.  It s not that the input is invalid  it s that the format string is invalid.  Similarly  we could raise an error any time a format string matches conflicting or obviously absent elements.  This would catch common mistakes such as:      javascript moment input   YYYY MM DD HH:MM    // used MM twice moment input   HH:mm A    // used 24 hour time with a 12 hour meridem moment input   hh:mm    // used 12 hour time without a meridem moment input   HH:mm:SS    // used fractional seconds without whole seconds      etc...  We should probably only do this for parsing input  as it s perfectly valid to built output strings with the same element presented more than once.   If we do want to validate output format strings  it should be a much more minimal set of validation rules. ,mj1856,open,4,2016-02-25 17:22:35,0000-00-00 00:00:00,,Enhancement,,,0,1
11262,moment/moment,2988,Fix wrong weekday parsing for TR,Fixes  2920. ,BYK,closed,6,2016-02-26 00:08:11,2016-04-10 14:10:20,,Language,,,1,1
11261,moment/moment,2989,Vietnamese: added meridiem,Fixes  1747. ,Menelion,closed,2,2016-02-26 00:12:16,2016-03-06 08:38:20,,Language,,2.12.0,1,1
11260,moment/moment,2990,Week function returns NaN after changing first day of week.,After I set the first day of week to Monday  like this:      moment.locale  pl         week:           dow : 1         ;       moment  .week    returns NaN. Is that a bug or am I doing something wrong? ,WizzieP,closed,6,2016-02-26 16:35:08,2016-03-08 02:04:20,,Bug,,,0,1
11259,moment/moment,2991,Added inclusivity parameter to isBetween method.,I didn t want this to go stale so I rewrote the necessary files.  The user can determine inclusivity via a fourth parameter by passing        [      ]   or  [] . The default behavior is     . ,dbkirk4211,closed,16,2016-02-27 19:27:27,2016-04-16 06:58:47,,Enhancement,,2.13.0,1,1
11258,moment/moment,2992,strict parsing mode accepts period at end of months where idiomatic,For some reason  this weekend I decided it would be a good idea to default the parser to strict mode and run all of the unit tests.  When I did that  I noticed an interesting issue with all locales that use . in their shortened months. The parser will not accept the . in strict mode. For example:      js moment.locale  nl  ; moment  jan.    MMM   true .format  ;  Invalid date       Note that the months for Dutch include . in them  optionally  based on the locale file.      js var monthsShortWithDots =  jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec. .split  _        monthsShortWithoutDots =  jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec .split  _  ;      Bosnian is another example of this:      js moment.locale  bs  ; moment  jan.    MMM   true .format  ;  Invalid date       In Bosnian the . is non optional:      js     months :  januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar .split  _        monthsShort :  jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec. .split  _         All together  I think there were 24 cultures.  I overrode their short month regular expression with a version of the generic word regex that is currently used  but modified to accept .  As this PR stands right now  in strict mode it will accept both short months with and without .  both Jan and Jan. . I think this is what the user would expect  even though it adds variability to strict mode  which is maybe undesirable.  Totally understand if we decide that strict mode shouldn t handle . at all and throw this one out. I just started fixing it and got kind of determined to finish :   ,maggiepint,closed,2,2016-02-29 02:12:34,2016-02-29 20:32:16,,,,1,1
11257,moment/moment,2993,[Date validation] Bad validation on 3 digits year,Hi there   I detect a problem with validation on a 3 digit year and parsing strict  with multiple date formats. Here s what I test :   var dateFormats = [ YYY    YYY YYY    MM/YYY    MM/YYY MM/YYY    JJ/MM/YYY    JJ/MM/YYY JJ/MM/YYY    YYYY    YYYY YYYY    MM/YYYY    MMMM YYYY    MM/YYYY MM/YYYY    MMMM YYYY MMMM YYYY    DD/MM/YYYY    DD MMMM YYYY    DD/MM/YYYY DD/MM/YYYY    DD MMMM YYYY DD MMMM YYYY    DD MMM. YYYY    DD MMM. YYYY DD MMM. YYYY    MMM. YYYY    MMM. YYYY MMM. YYYY ]; var date = moment  01/02/933   dateFormats  locale  true ; // locale is  fr   I defined it in another file console.log date ; // With use strict  return date with  MMM. YYYY MMM. YYYY  formats  so the last format of my array  console.log date.isValid   ; // returns false  Am I doing it wrong  or is it a real bug ? I thought it takes the 5th format of my list  but it appears not. I need to use strict usage to avoid bad date in fields  in french format.  Thanks by advance for your help ,mcharron,closed,4,2016-02-29 08:20:01,2016-03-01 22:19:25,,Troubleshooting,,,0,1
11256,moment/moment,2994,moment.set wrong date if set object,I have some random month when i set a date by passing an object and then format the date.  moment.set  ...  .format ...   For no reason  for some dates the mounth is not the good one  It happend when y set date within year  month AND day but if I don t setr the day it s always correct  Here some exemples :  if i set 2016/10 i get    11   2016       moment  .set     year: 2016    month: 10    day: 2   .format  MM YYYY      //  11 2016       But the same code in 2017 will output    10   2017       moment  .set     year: 2017    month: 10    day: 2   .format  MM YYYY      //  10 2017       And if i don t specify the day it will output    11   2017       moment  .set     year: 2017    month: 10   .format  MM YYYY      //  11 2017      ,nusson,closed,2,2016-02-29 20:05:35,2016-03-01 00:22:04,,,,0,1
11255,moment/moment,2995,Using 1000   60   60 instead of 36e5 to avoid floating point rounding errors, 2978 ,afanasy,closed,4,2016-03-01 05:15:35,2016-04-16 07:40:45,,Bug-fix,,2.13.0,1,1
11254,moment/moment,2996,Added extra options to moment.calender,Added options:       sameMonth       lastMonth       nextMonth       sameYear       lastYear       nextYear  Added L placeholder for locale files  format will be picked with decreasing preferences from the middle: <  sameElse lastYear sameYear lastMonth sameMonth lastWeek lastDay  sameDay  nextDay nextWeek sameMonth nextMonth sameYear nextYear sameElse  >  This is for issue https://github.com/moment/moment/issues/2952 ,niklabh,closed,6,2016-03-02 07:46:08,2016-05-29 20:13:23,,,,1,1
11253,moment/moment,2997,Fix date format for Czech,See  2016. ,enumag,closed,12,2016-03-02 08:15:11,2016-06-14 08:25:26,Menelion,Language,Needs tests,,,1,1
11252,moment/moment,2998,1 test failed. week year:week numbers 2012/2013  2446.7  ,    Client info      Date String   : Wed Mar 02 2016 16:24:00 GMT 0800          Locale String : 2016/3/2   4:24:00 Offset        :  480 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/45.0.2454.85 Safari/537.36            week year:week numbers 2012/2013  2446.7   moment   ,lazypen555,open,1,2016-03-02 08:27:18,0000-00-00 00:00:00,,Unit Test Failed,,,0,1
11251,moment/moment,2999,Moment.day   goes backwards instead of forwards ,Here s the documentation I see:  [selection_304] https://cloud.githubusercontent.com/assets/4021306/13514927/df4528ce e161 11e5 82b4 a4805b7e6278.png   If I ask what is the  Next monday  from August 1st 2015  I expect it to go forwards   give me 08 03 2015 which is the first Monday _after_ the given date. Instead  it went backwards to  last monday  even though I passed in a _positive_ integer for  next monday ....      js moment  2015 8 01    YYYY MM DD  .day 1 .format  YYYY MM DD   // gives  2015 07 27  // I expect  2015 08 03       If I tell it to give me  last Monday   its returning a date that isn t even a Monday. I d expect to get 2015 07 27      js moment  2015 8 01    YYYY MM DD  .day  1 .format  YYYY MM DD   // Gives  2015 07 25  // Expected  2015 07 27       Since Moment isn t working as I expected  I ve written the logic myself  here s how I expect it to behave:      js while myMoment.format  dddd    =  Monday      myMoment.add 1   days  ;       ,joshribakoff,closed,3,2016-03-04 01:06:33,2016-03-04 22:38:08,,,,0,1
11250,moment/moment,3000,moment  .add 1   month   changes timezone  offset from UTC ,Why does moment change the timezone from  8:00  to  7:00 ?   [image] https://cloud.githubusercontent.com/assets/6600095/13515188/40b6b68e e164 11e5 8a02 58336e3959f5.png   Note: it doesn t change when I add a year  Am I not understanding how it works? ,joeltello,closed,2,2016-03-04 01:19:39,2016-03-04 13:47:25,,,,0,1
11249,moment/moment,3001,When converting datetime to GMT or UTC result gets 21seconds added,When converting a specific datetime value to GMT or UTC the output is a bit confusing: moment.tz  1751 01 01T00:00:00    Europe/Dublin  .clone  .tz  Europe/London  .format  YYYY MM DDTHH:mm:ss.SSSS    >  1751 01 01T00:  25:21.0000    or this moment.tz  1751 01 01T00:00:00    Europe/Dublin  .clone  .utc  .format  YYYY MM DDTHH:mm:ss.SSSS    >  1751 01 01T00:  25:21.0000     The first thing I learned here is that the 25min added is actually not a bug :  But what about the extra 21 seconds added in both cases?? Is that a bug? ,ThePasko,closed,2,2016-03-04 09:52:22,2016-03-07 07:58:27,,,,0,1
11248,moment/moment,3002,Remove the YYYY to YY implicit matching,Docs state that:  > YYYY from version 2.10.5 supports 2 digit years  and converts them to a year near 2000  same as YY .  I believe it should not take place. When matching against multiple formats  I order formats from most specific to most ambiguous. That includes full 4 digit year format vs 2 digit year. For example:      js formats = [    YYYY/M/D      most specific  leading 4 digit year    D/M/YYYY      also very specific  trailing 4 digit year    D/M/YY        trailing ambiguous 2 digit year ];  date = moment  1/5/16   formats ;    This will produce year 0001   ?       The above will produce year  0001  because the first rule will applies  even with explicit  YYYY  declaration.  Fiddle: https://jsfiddle.net/Thinkscape/xats4pcy/ ,Thinkscape,closed,2,2016-03-04 14:09:28,2016-03-04 20:25:41,,Forgiving parsing,,,0,1
11247,moment/moment,3003,iso week parse format roundtrip fails,    js var fmt =  GGGG [W]W E ; // iso week format var m = moment.utc  2011 01 01  .format fmt ; //  2010 W52 6  moment.utc m  fmt .toISOString  ; //  2010 01 01T00:00:00.000Z      ,bblack,closed,1,2016-03-04 17:48:03,2016-03-04 19:14:24,,,,0,1
11246,moment/moment,3004,UUID recognized as a date,I happened across this by chance  but it s a very real scenario for me in a production application. Moment.js  when passed a specific UUID  believes it to be a date.  presumably other UUIDs are mistaken for dates as well  but this was the one I happened across   Here s an example;      > moment  5917238b 33ff f849 cd63 80f4c9b37d0c  .toDate   < Sun Aug 26 5917 00:00:00 GMT 0500  CDT  > moment  5917238b 33ff f849 cd63 80f4c9b37d0c  .isValid   < true      Compare that with just about any other UUID  and the result is what I d expect;      > moment  5e7af008 b108 40bb ae8d 50ea223a8219  .toDate   < Invalid Date > moment  5e7af008 b108 40bb ae8d 50ea223a8219  .isValid   < false      From an expectation standpoint  I d expect all UUIDs to return  false  for  isValid . The erroneous condition actually causes my application to run with the date Aug. 26 5917  as it assumed the user was trying to input a date :open_mouth:   I ve confirmed this behavior in both 2.11.0 running on Node.js  and 2.11.2 running in Chrome   same behavior in both platforms. ,jwhitehorn,closed,2,2016-03-04 23:18:18,2016-03-05 03:38:43,,Forgiving parsing,,,0,1
11245,moment/moment,3005,Feature request: duration.format  ,I would like to format my duration as  HH:MM:SS.mmm   is there any way to do this with the current API? ,dbkaplun,closed,1,2016-03-06 03:34:35,2016-03-08 01:52:05,,,,0,1
11244,moment/moment,3006,Support seasons  like summer   2016 SU  ,http://requirebin.com/?gist=69ab4683611aed6d5456 ,franciscolourenco,closed,1,2016-03-06 09:39:43,2016-03-06 18:37:06,,,,0,1
11243,moment/moment,3007,Add src without src/test to npm package,This hopefully fixes  2608. ,ichernev,closed,1,2016-03-06 09:41:22,2016-03-07 08:00:44,,,2.12.0,1,1
11242,moment/moment,3008,Object setter orders sets based on size of unit,Current code for using an object to set multiple values uses for ... in. MDN is quite clear on the fact that this runs in arbitrary order: https://developer.mozilla.org/en US/docs/Web/JavaScript/Reference/Statements/for...in  Order matters when values are being set.  The object setter should set the values in order of unit size  Years being biggest  milliseconds being smallest . This prevents errors like:      js moment  2016 04 30  .set  date:31  month:4  .format    2016 05 01T00:00:00 05:00       It is a minor separate change  but this also fixes an error where calling .get with an object will set the values passed in the object:      js moment  2016 04 30  .get  year:2017  .format    2017 04 30T00:00:00 05:00      ,maggiepint,closed,8,2016-03-07 04:28:13,2016-06-14 08:26:42,,Bug-fix,,2.14.0,1,1
11241,moment/moment,3009,Adding hours to March 13th is incorrect?,This is probably because of the timezone change  America/New_York    So I have a date on mid night of March 13th  Sun Mar 13 2016 00:00:00 GMT 0500   when I add more than 4 5 hours it is returning an extra hour  so say I add 6 hours it is returning 7AM.      date = moment.tz  2016 03 13   America/New_York  ; // Sun Mar 13 2016 00:00:00 GMT 0500 var minutes = 360; date.add  minutes   minutes   // Sun Mar 13 2016 07:00:00 GMT 0400      My question is there a way to tell if it is a special timezone changing date so I can handle it correctly. or is there a method to  just add   the hours? ,djorgji,closed,2,2016-03-07 16:13:08,2016-03-07 19:02:23,,,,0,1
11240,moment/moment,3010,2 tests failed. diff:diff across DST  1965.17  diff:diff across DST  1965.19  ,    Client info      Date String   : Mon Mar 07 2016 16:09:05 GMT 0600  CST  Locale String : 7/3/2016 16:09:05 Offset        : 360 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_10_5  AppleWebKit/537.36  KHTML  like Gecko  Chrome/48.0.2564.116 Safari/537.36            diff:diff across DST  1965.17   month diff across DST  lower bound      javascript // Expected true // Actual   false false === true            diff:diff across DST  1965.19   year diff across DST  lower bound      javascript // Expected true // Actual   false false === true     ,AlexVega,closed,3,2016-03-07 22:09:42,2016-03-08 22:05:54,,Unit Test Failed,,,0,1
11239,moment/moment,3011,Grunt build fails on Windows,In  .jscs.json  we have:      json      validateLineBreaks :  LF        This causes a ton of  Invalid line break  warnings with the default git configuration on Windows.  We can either change the git line ending handling with a  .gitattributes  file  or we can remove line ending validation from JSCS.  Personally  I d prefer removing this line  as changing git line ending behavior so late into the repo history can lead to lots of commits with only line ending changes.  Any objections? ,mj1856,closed,3,2016-03-08 02:26:31,2016-03-08 04:48:10,,Build/Release,,,0,1
11238,moment/moment,3012,Suppress deprecation warnings in unit tests,It s not helpful to have deprecation warnings show up in the test output. ,mj1856,closed,1,2016-03-08 04:42:52,2016-04-10 14:37:13,,Build/Release,,,1,1
11237,moment/moment,3013,Don t validate line endings,Per  3011   Don t validate line endings because it causes excessive warnings and fails the build on Windows. ,mj1856,closed,4,2016-03-08 04:47:34,2016-03-24 11:40:22,,Build/Release,,,1,1
11236,moment/moment,3014,inconsistent relativeTime locale in zh tw,for example    Current : 1 minutes ago =       2 minutes ago =  2     Expected :   1 minutes ago =  1    2 minutes ago =  2     also checked zh cn locale is worked as expected  ,gaplo917,closed,1,2016-03-08 16:00:16,2016-03-08 21:05:51,,,,0,1
11235,moment/moment,3015,Resolve issue  3014 inconsistent relativeTime locale in zh tw,fix the locale file and make it work as expected ,gaplo917,closed,8,2016-03-08 16:06:50,2016-04-16 08:14:13,Menelion,Language,,2.13.0,1,1
11234,moment/moment,3016,1 test failed. locale:zh cn:calendar next week  1848.1  ,    Client info      Date String   : Tue Mar 08 2016 10:40:04 GMT 0600  CST  Locale String : 3/8/2016  10:40:04 AM Offset        : 360 User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_11_3  AppleWebKit/537.36  KHTML  like Gecko  Chrome/49.0.2623.75 Safari/537.36            locale:zh cn:calendar next week  1848.1   Today   7 days beginning of day      javascript // Expected      12   // Actual        12         12    ===       12        ,timritzer,closed,5,2016-03-08 16:41:24,2016-03-15 18:14:29,,Bug,Language,Unit Test Failed,,,0,1
11233,moment/moment,3017,Duration object of moment.duration stringISO  with wrong days value,The object moment.duration  P59D   returns differents values.   [selecao_004] https://cloud.githubusercontent.com/assets/8635147/13614681/71c4a016 e550 11e5 81dd 45895a7195d3.png     Correct value: 59   ,santosguilherme,closed,2,2016-03-08 20:12:17,2016-03-08 21:09:44,,,,0,1
11232,moment/moment,3018,Date is expected to be in ISO 8601 format yyyy MM ddTHH:mm:ss.fffffff HH:MM,Just putting this here for somebody else Googling for it. It s a common error message  apparently? Respective to the niche I guess. ,brandonros,closed,2,2016-03-08 20:21:52,2016-03-08 20:21:54,,,,0,1
11231,moment/moment,3019,moment.ISO_8601 constant not accepted by format method,We have the  moment.ISO_8601  constant  but it only works when parsing.  It should also be accepted on formatting.  Currently   moment  .format moment.ISO_8601   gives  Uncaught TypeError: format.match is not a function  ,mj1856,open,15,2016-03-08 20:47:28,0000-00-00 00:00:00,,Breaking change,Bug,Enhancement,,,0,1
11230,moment/moment,3020,Formatting as ISO8601 should use a Z when in UTC mode,Currently  a moment in UTC mode  such as  moment.utc     or  moment  .utc     etc.  is formatted with a   00:00  offset when  .format    is called with no parameters.  Example:  [image] https://cloud.githubusercontent.com/assets/1396388/13615875/3c467172 e52c 11e5 838c 9a0f4e6d5b14.png   For best conformance to ISO8601/RFC3339  when the time zone is _explicitly_ UTC then we should use  Z  instead of   00:00 .  The difference is semantic only  though important in some contexts.  For example    00:00  might be from London in the winter  or from several places in Africa.  But  Z  is always UTC. ,mj1856,closed,2,2016-03-08 20:52:36,2016-04-08 01:05:52,,Enhancement,Up-For-Grabs,,,0,1
11229,moment/moment,3021,DST Unit Test Failures,We have a known issue that occasionally shows up as  diff:diff across DST  in the unit tests.  These are not mission critical  and can manifest in a variety of ways depending on OS  browser  time zone  and time zone data updates installed on the OS or in the browser.  For the time being  we ll use this issue to link to test failures related to DST and time zone variations.  Eventually we will try to address the root cause. ,mj1856,open,1,2016-03-08 22:04:45,0000-00-00 00:00:00,,Bug,DST,Known Issue,Timezones,Unit Test Failed,,,0,1
11228,moment/moment,3022,test suite failing on node v0.10 and v0.12 on ubuntu,We ve found a failing test in our smoke testing suite for moment on both v0.10 and v0.12.  https://ci.nodejs.org/job/thealphanerd smoker/108/nodes=ubuntu1204 64/tapTestReport/smoker 2Ftest.tap 28/  It seems to have to do with     Module: locale:zh cn Test: calendar next week  ,MylesBorins,closed,1,2016-03-08 23:10:32,2016-03-09 00:04:41,,,,0,1
11227,moment/moment,3023,Fix locale for Khmer   Miss spelling of March,Hi   The translation of March in Khmer should be written as        not       . ,sereysethy,closed,14,2016-03-09 04:57:32,2016-04-16 08:12:08,Menelion,Language,,2.13.0,1,1
11226,moment/moment,3024,Change months  weekdays to lowercase,@nurlan approve my changes ,talgautb,closed,4,2016-03-09 05:32:29,2016-04-16 08:10:59,Menelion,Bug-fix,Language,,2.13.0,1,1
11225,moment/moment,3025,Serialize locale data,I m trying to have language bundles that have all application language strings as JSON  along with modules language strings too.  Currently I have to load all moment locales upfront  in browserify it looks like a bunch of  require  moment/locale/xx    calls.  Looks like these modules return an empty object. Would be totally awesome if they returned locale data that I could somehow serialize and include in my JSON  or JSON like https://github.com/yahoo/serialize javascript  bundles and then load on demand when locale changes. Is there a way to somehow extract this data from moment instance perhaps? ,suprMax,closed,9,2016-03-09 13:56:55,2016-06-24 04:16:43,,Enhancement,,,0,1
11224,moment/moment,3026,DST started on March 8th instead of March 13th for 2016,On v2.12.0 I noticed that moment considers 03/08/2016 08:00:00 UTC to be the start of DST. However  DST starts at 03/13/2016 08:00:00 UTC.  Example: var orderTimeField =  03/08/2016 08:30:00 ; var orderDate = moment.utc orderTimeField   MM/DD/YY hh:mm:ss  ;   Gives a date object with my local time of 03/08/2016 03:30:00 CDT  05:00 Javascript Date object gives a local time of 03/08/2016 02:30:00 CST  06:00 ,GarrettWaitr,closed,2,2016-03-09 16:46:19,2016-03-09 18:38:22,,,,0,1
11223,moment/moment,3027,jQuery DatePicker href  ,Moment.js v2.12.0 combined with jQuery UI v1.11.4 will produce a DatePicker that will open a new page with a   href link when a date is clicked in the calendar. I guess one could suppress it with event.preventDefault   but I do not observe this behavior in Moment.js v2.11.2. ,techouse,closed,2,2016-03-09 17:19:48,2016-03-09 22:23:59,,Troubleshooting,,,0,1
11222,moment/moment,3028,Fix issue with DST transition in Chinese locale,Fixes  3016 by using the  diff  function instead of subtracting unix timestamps.  This was failing when crossing a DST boundary  such as the one upcoming for March 13th in the USA. ,mj1856,closed,2,2016-03-10 03:55:52,2016-04-16 08:09:48,,Bug-fix,Language,,2.13.0,1,1
11221,moment/moment,3029,Diff month for months with a different number of days,Hello   I am trying to get diff in months between months with a different number of days.  Let s say  Jan  31  2016  and  Feb  29  2016 . Both dates are last days in the months.   End even more. You will get  Feb  29  2016  date if you use  add  function and add exact 1 month to the  Jan  31  2016 . But current version displays strange diff resutls.  A have prepared two fiddles: 1. v2.12.0   https://jsfiddle.net/Maksym_Anikin/q94s0w92/2/   this version displays strange results 2. v1.7.2   https://jsfiddle.net/Maksym_Anikin/r489ync9/7/   this version works as expected   Issues:.  1. Current version returns different results if you switch start and end dates which is incorrent. Both variants should return the same number. 2. When you run diff starting from the  Feb  29  2016  it returns 0. Which is incorrect. Should be 1 since you got this date by adding 1 month. Logically you must get diff results equal to 1. ,MaxAnikin,open,6,2016-03-10 10:57:33,0000-00-00 00:00:00,,Bug,,,0,1
11220,moment/moment,3030,added kl. to the swedish times,@jisaacks @ichernev please check the swedish localization fix ,ksnabb,closed,7,2016-03-10 13:03:28,2016-04-16 08:08:22,Menelion,Language,,2.13.0,1,1
11219,moment/moment,3031,correct typo in min/max deprecation warnings,It would be better that we suggest people use min to find the min  and max to find the max. ,maggiepint,closed,4,2016-03-11 04:39:39,2016-03-11 04:44:39,,,,1,1
11218,moment/moment,3032,Restore unit tests commented out in  1379,Stumbled across two unit tests that were commented out in  1379.  That bug was fixed with  2702  but we forgot to put these tests back.  Also had to update these old tests to the current qunit API. ,mj1856,closed,1,2016-03-12 08:02:39,2016-03-24 11:04:28,,Unit Tests Only,,2.13.0,1,1
11217,moment/moment,3033, Time from  and  Time to  doesn t work properly,If I get the time from 1989 06 15 to today  2016 03 13  with  moment birthDate   YYYY MM DD  .toNow    it will say that 27 years passed but that s wrong  it s 26 years. The problem is that the number is rounded to the nearest integer and I think it shouldn t be rounded.   Here is an example: https://jsfiddle.net/8z9m6mwe/1/ ,JJBocanegra,closed,1,2016-03-12 23:06:16,2016-03-13 01:25:14,,,,0,1
11216,moment/moment,3034,Fix unit test failures during daylight saving time,Several unit tests failed as we approached the Spring Forward DST transition.  These were all just testing failures. ,mj1856,closed,72,2016-03-13 02:43:21,2016-03-24 10:57:59,,Bug-fix,Unit Tests Only,,2.13.0,1,1
11215,moment/moment,3035,112 tests failed  dst ,    Client info      Date String   : Sat Mar 12 2016 20:50:11 GMT 0700  Mountain Standard Time  Locale String : 3/12/2016  8:50:11 PM Offset        : 420 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/48.0.2564.116 Safari/537.36            locale:af:calendar day  15.4   tomorrow at the same time      javascript // Expected M re om 02:00 // Actual   M re om 03:00  M re om 03:00  ===  M re om 02:00             locale:ar ma:calendar day  34.4   tomorrow at the same time      javascript // Expected                02:00 // Actual                  03:00                 03:00  ===                 02:00             locale:ar sa:calendar day  53.4   tomorrow at the same time      javascript // Expected                  :   // Actual                    :                     :    ===                   :               locale:ar tn:calendar day  73.4   tomorrow at the same time      javascript // Expected                02:00 // Actual                  03:00                 03:00  ===                 02:00             locale:ar:calendar day  92.4   tomorrow at the same time      javascript // Expected                   :   // Actual                     :                      :    ===                    :               locale:az:calendar day  113.4   tomorrow at the same time      javascript // Expected sabah saat 02:00 // Actual   sabah saat 03:00  sabah saat 03:00  ===  sabah saat 02:00             locale:be:calendar day  134.4   tomorrow at the same time      javascript // Expected          02:00 // Actual            03:00           03:00  ===           02:00             locale:bg:calendar day  153.4   tomorrow at the same time      javascript // Expected        2:00 // Actual          3:00         3:00  ===         2:00             locale:bn:calendar day  172.4   tomorrow at the same time      javascript // Expected               :       // Actual                 :                      :        ===                :                   locale:bo:calendar day  192.4   tomorrow at the same time      javascript // Expected                :   // Actual                  :                   :    ===                 :               locale:br:calendar day  212.4   tomorrow at the same time      javascript // Expected Warc hoazh da 2e00 AM // Actual   Warc hoazh da 3e00 AM  Warc hoazh da 3e00 AM  ===  Warc hoazh da 2e00 AM             locale:bs:calendar day  231.4   tomorrow at the same time      javascript // Expected sutra u 2:00 // Actual   sutra u 3:00  sutra u 3:00  ===  sutra u 2:00             locale:ca:calendar day  250.4   tomorrow at the same time      javascript // Expected dem  a les 2:00 // Actual   dem  a les 3:00  dem  a les 3:00  ===  dem  a les 2:00             locale:cs:calendar day  270.4   tomorrow at the same time      javascript // Expected z tra v 2:00 // Actual   z tra v 3:00  z tra v 3:00  ===  z tra v 2:00             locale:cv:calendar day  290.4   tomorrow at the same time      javascript // Expected      02:00         // Actual        03:00               03:00          ===       02:00                     locale:cy:same day  308.4   tomorrow at the same time      javascript // Expected Yfory am 02:00 // Actual   Yfory am 03:00  Yfory am 03:00  ===  Yfory am 02:00             locale:de at:calendar day  341.4   tomorrow at the same time      javascript // Expected morgen um 02:00 Uhr // Actual   morgen um 03:00 Uhr  morgen um 03:00 Uhr  ===  morgen um 02:00 Uhr             locale:de:calendar day  359.4   tomorrow at the same time      javascript // Expected morgen um 02:00 Uhr // Actual   morgen um 03:00 Uhr  morgen um 03:00 Uhr  ===  morgen um 02:00 Uhr             locale:el:calendar day  388.4   tomorrow at the same time      javascript // Expected            2:00    // Actual              3:00                3:00     ===             2:00                locale:en au:calendar day  407.4   tomorrow at the same time      javascript // Expected Tomorrow at 2:00 AM // Actual   Tomorrow at 3:00 AM  Tomorrow at 3:00 AM  ===  Tomorrow at 2:00 AM             locale:en ca:calendar day  426.4   tomorrow at the same time      javascript // Expected Tomorrow at 2:00 AM // Actual   Tomorrow at 3:00 AM  Tomorrow at 3:00 AM  ===  Tomorrow at 2:00 AM             locale:en gb:calendar day  445.4   tomorrow at the same time      javascript // Expected Tomorrow at 02:00 // Actual   Tomorrow at 03:00  Tomorrow at 03:00  ===  Tomorrow at 02:00             locale:en ie:calendar day  464.4   tomorrow at the same time      javascript // Expected Tomorrow at 02:00 // Actual   Tomorrow at 03:00  Tomorrow at 03:00  ===  Tomorrow at 02:00             locale:en nz:calendar day  483.4   tomorrow at the same time      javascript // Expected Tomorrow at 2:00 AM // Actual   Tomorrow at 3:00 AM  Tomorrow at 3:00 AM  ===  Tomorrow at 2:00 AM             locale:en:calendar day  502.4   tomorrow at the same time      javascript // Expected Tomorrow at 2:00 AM // Actual   Tomorrow at 3:00 AM  Tomorrow at 3:00 AM  ===  Tomorrow at 2:00 AM             locale:eo:calendar day  522.4   tomorrow at the same time      javascript // Expected Morga  je 02:00 // Actual   Morga  je 03:00  Morga  je 03:00  ===  Morga  je 02:00             locale:es:calendar day  541.4   tomorrow at the same time      javascript // Expected ma ana a las 2:00 // Actual   ma ana a las 3:00  ma ana a las 3:00  ===  ma ana a las 2:00             locale:et:calendar day  560.4   tomorrow at the same time      javascript // Expected Homme  2:00 // Actual   Homme  3:00  Homme  3:00  ===  Homme  2:00             locale:eu:calendar day  579.4   tomorrow at the same time      javascript // Expected bihar 02:00etan // Actual   bihar 03:00etan  bihar 03:00etan  ===  bihar 02:00etan             locale:fa:calendar day  598.4   tomorrow at the same time      javascript // Expected             :   // Actual               :                :    ===              :               locale:fi:calendar day  617.4   tomorrow at the same time      javascript // Expected huomenna klo 02.00 // Actual   huomenna klo 03.00  huomenna klo 03.00  ===  huomenna klo 02.00             locale:fr ca:same day  650.4   tomorrow at the same time      javascript // Expected Demain   02:00 // Actual   Demain   03:00  Demain   03:00  ===  Demain   02:00             locale:fr ch:same day  668.4   tomorrow at the same time      javascript // Expected Demain   02:00 // Actual   Demain   03:00  Demain   03:00  ===  Demain   02:00             locale:fr:same day  686.4   tomorrow at the same time      javascript // Expected Demain   02:00 // Actual   Demain   03:00  Demain   03:00  ===  Demain   02:00             locale:fy:calendar day  705.4   tomorrow at the same time      javascript // Expected moarn om 02:00 // Actual   moarn om 03:00  moarn om 03:00  ===  moarn om 02:00             locale:gd:calendar day  725.4   tomorrow at the same time      javascript // Expected A m ireach aig 02:00 // Actual   A m ireach aig 03:00  A m ireach aig 03:00  ===  A m ireach aig 02:00             locale:gl:calendar day  744.4   tomorrow at the same time      javascript // Expected ma    s 2:00 // Actual   ma    s 3:00  ma    s 3:00  ===  ma    s 2:00             locale:he:calendar day  763.4   tomorrow at the same time      javascript // Expected       02:00 // Actual         03:00        03:00  ===        02:00             locale:hi:calendar day  782.4   tomorrow at the same time      javascript // Expected         :       // Actual           :                :        ===          :                   locale:hr:calendar day  802.4   tomorrow at the same time      javascript // Expected sutra u 2:00 // Actual   sutra u 3:00  sutra u 3:00  ===  sutra u 2:00             locale:hu:calendar day  822.4   tomorrow at the same time      javascript // Expected holnap 2:00 kor // Actual   holnap 3:00 kor  holnap 3:00 kor  ===  holnap 2:00 kor             locale:hy am:calendar day  846.4   tomorrow at the same time      javascript // Expected      02:00 // Actual        03:00       03:00  ===       02:00             locale:id:calendar day  864.4   tomorrow at the same time      javascript // Expected Besok pukul 02.00 // Actual   Besok pukul 03.00  Besok pukul 03.00  ===  Besok pukul 02.00             locale:is:calendar day  883.4   tomorrow at the same time      javascript // Expected   morgun kl. 2:00 // Actual     morgun kl. 3:00    morgun kl. 3:00  ===    morgun kl. 2:00             locale:it:calendar day  901.4   tomorrow at the same time      javascript // Expected Domani alle 02:00 // Actual   Domani alle 03:00  Domani alle 03:00  ===  Domani alle 02:00             locale:ja:calendar day  919.4   tomorrow at the same time      javascript // Expected      2 0  // Actual        3 0        3 0   ===       2 0              locale:jv:calendar day  937.4   tomorrow at the same time      javascript // Expected Mbenjang pukul 02.00 // Actual   Mbenjang pukul 03.00  Mbenjang pukul 03.00  ===  Mbenjang pukul 02.00             locale:ka:calendar day  956.4                        javascript // Expected      2:00 AM    // Actual        3:00 AM          3:00 AM     ===       2:00 AM                locale:kk:calendar day  975.4   tomorrow at the same time      javascript // Expected             02:00 // Actual               03:00              03:00  ===              02:00             locale:km:calendar day  994.4   tomorrow at the same time      javascript // Expected            02:00 // Actual              03:00             03:00  ===             02:00             locale:ko:calendar day  1014.4   tomorrow at the same time      javascript // Expected       2  0  // Actual         3  0         3  0   ===        2  0              locale:lo:calendar day  1046.4   tomorrow at the same time      javascript // Expected             02:00 // Actual               03:00              03:00  ===              02:00             locale:lt:calendar day  1066.4   tomorrow at the same time      javascript // Expected Rytoj 02:00 // Actual   Rytoj 03:00  Rytoj 03:00  ===  Rytoj 02:00             locale:lv:calendar day  1085.4   tomorrow at the same time      javascript // Expected R t pulksten 02:00 // Actual   R t pulksten 03:00  R t pulksten 03:00  ===  R t pulksten 02:00             locale:me:calendar day  1104.4   tomorrow at the same time      javascript // Expected sjutra u 2:00 // Actual   sjutra u 3:00  sjutra u 3:00  ===  sjutra u 2:00             locale:mk:calendar day  1123.4   tomorrow at the same time      javascript // Expected         2:00 // Actual           3:00          3:00  ===          2:00             locale:ml:calendar day  1142.4   tomorrow at the same time      javascript // Expected             2:00     // Actual               3:00                  3:00      ===              2:00                 locale:mr:calendar day  1162.4   tomorrow at the same time      javascript // Expected               :         // Actual                 :                        :          ===                :                     locale:ms my:calendar day  1182.4   esok pada waktu yang sama      javascript // Expected Esok pukul 02.00 // Actual   Esok pukul 03.00  Esok pukul 03.00  ===  Esok pukul 02.00             locale:ms:calendar day  1201.4   esok pada waktu yang sama      javascript // Expected Esok pukul 02.00 // Actual   Esok pukul 03.00  Esok pukul 03.00  ===  Esok pukul 02.00             locale:my:calendar day  1220.4                          javascript // Expected            :       // Actual              :                   :        ===             :                   locale:nb:calendar day  1239.4   tomorrow at the same time      javascript // Expected i morgen kl. 02:00 // Actual   i morgen kl. 03:00  i morgen kl. 03:00  ===  i morgen kl. 02:00             locale:ne:calendar day  1258.4   tomorrow at the same time      javascript // Expected              :       // Actual                 :                      :        ===               :                   locale:nl:calendar day  1278.4   tomorrow at the same time      javascript // Expected morgen om 02:00 // Actual   morgen om 03:00  morgen om 03:00  ===  morgen om 02:00             locale:nn:calendar day  1298.4   tomorrow at the same time      javascript // Expected I morgon klokka 02:00 // Actual   I morgon klokka 03:00  I morgon klokka 03:00  ===  I morgon klokka 02:00             locale:pa in:calendar day  1317.4   tomorrow at the same time      javascript // Expected         :       // Actual           :                :        ===          :                   locale:pl:calendar day  1349.4   tomorrow at the same time      javascript // Expected Jutro o 02:00 // Actual   Jutro o 03:00  Jutro o 03:00  ===  Jutro o 02:00             locale:pt br:calendar day  1367.4   tomorrow at the same time      javascript // Expected Amanh   s 02:00 // Actual   Amanh   s 03:00  Amanh   s 03:00  ===  Amanh   s 02:00             locale:pt:calendar day  1385.4   tomorrow at the same time      javascript // Expected Amanh   s 02:00 // Actual   Amanh   s 03:00  Amanh   s 03:00  ===  Amanh   s 02:00             locale:ro:calendar day  1404.4   tomorrow at the same time      javascript // Expected m ine la 2:00 // Actual   m ine la 3:00  m ine la 3:00  ===  m ine la 2:00             locale:ru:calendar day  1428.4   tomorrow at the same time      javascript // Expected          02:00 // Actual            03:00           03:00  ===           02:00             locale:se:calendar day  1447.4   Tomorrow at the same time      javascript // Expected ihttin ti 02:00 // Actual   ihttin ti 03:00  ihttin ti 03:00  ===  ihttin ti 02:00             locale:si:calendar day  1466.4   tomorrow at the same time      javascript // Expected       . . 2:00  // Actual         . . 3:00         . . 3:00   ===        . . 2:00              locale:sk:calendar day  1485.4   tomorrow at the same time      javascript // Expected zajtra o 2:00 // Actual   zajtra o 3:00  zajtra o 3:00  ===  zajtra o 2:00             locale:sl:calendar day  1505.4   tomorrow at the same time      javascript // Expected jutri ob 2:00 // Actual   jutri ob 3:00  jutri ob 3:00  ===  jutri ob 2:00             locale:sq:calendar day  1525.4   tomorrow at the same time      javascript // Expected Nes r n  02:00 // Actual   Nes r n  03:00  Nes r n  03:00  ===  Nes r n  02:00             locale:sr cyrl:calendar day  1544.4   tomorrow at the same time      javascript // Expected         2:00 // Actual           3:00          3:00  ===          2:00             locale:sr:calendar day  1563.4   tomorrow at the same time      javascript // Expected sutra u 2:00 // Actual   sutra u 3:00  sutra u 3:00  ===  sutra u 2:00             locale:sv:calendar day  1582.4   tomorrow at the same time      javascript // Expected Imorgon 02:00 // Actual   Imorgon 03:00  Imorgon 03:00  ===  Imorgon 02:00             locale:sw:calendar day  1601.4   tomorrow at the same time      javascript // Expected kesho saa 02:00 // Actual   kesho saa 03:00  kesho saa 03:00  ===  kesho saa 02:00             locale:ta:calendar day  1620.4         02:00      javascript // Expected        :   // Actual          :           :    ===         :               locale:te:calendar day  1639.4   tomorrow at the same time      javascript // Expected             2:00 // Actual               3:00              3:00  ===              2:00             locale:th:calendar day  1658.4   tomorrow at the same time      javascript // Expected               2        0      // Actual                 3        0                     3        0       ===                2        0                  locale:tl ph:same day  1676.4   tomorrow at the same time      javascript // Expected Bukas sa 02:00 // Actual   Bukas sa 03:00  Bukas sa 03:00  ===  Bukas sa 02:00             locale:tlh:calendar day  1694.4   tomorrow at the same time      javascript // Expected wa leS 02:00 // Actual   wa leS 03:00  wa leS 03:00  ===  wa leS 02:00             locale:tr:calendar day  1713.4   tomorrow at the same time      javascript // Expected yar n saat 02:00 // Actual   yar n saat 03:00  yar n saat 03:00  ===  yar n saat 02:00             locale:tzl:calendar day  1732.4   tomorrow at the same time      javascript // Expected dem    02.00 // Actual   dem    03.00  dem    03.00  ===  dem    02.00             locale:tzm latn:calendar day  1751.4   tomorrow at the same time      javascript // Expected aska g 02:00 // Actual   aska g 03:00  aska g 03:00  ===  aska g 02:00             locale:tzm:calendar day  1770.4   tomorrow at the same time      javascript // Expected        02:00 // Actual          03:00         03:00  ===         02:00             locale:uk:calendar day  1790.4   tomorrow at the same time      javascript // Expected          02:00 // Actual            03:00           03:00  ===           02:00             locale:uz:calendar day  1809.4   tomorrow at the same time      javascript // Expected        02:00    // Actual          03:00            03:00     ===         02:00                locale:vi:calendar day  1828.4   tomorrow at the same time      javascript // Expected Ng y mai l c 02:00 // Actual   Ng y mai l c 03:00  Ng y mai l c 03:00  ===  Ng y mai l c 02:00             locale:zh cn:calendar day  1846.4   tomorrow at the same time      javascript // Expected     2   // Actual       3        3    ===      2               locale:zh cn:calendar next week  1848.1   Today   7 days beginning of day      javascript // Expected      12   // Actual        12         12    ===       12               locale:zh tw:calendar day  1866.4   tomorrow at the same time      javascript // Expected     2 00  // Actual       3 00       3 00   ===      2 00              preparse and postformat:calendar day  2230.4   tomorrow at the same time      javascript // Expected Tomorrow at @:   AM // Actual   Tomorrow at  :   AM  Tomorrow at  :   AM  ===  Tomorrow at @:   AM             utc offset:utc to local  keepLocalTime = true  2309.1   utc to local failed to keep local time      javascript // Expected 2016 13 03 03:50:10 // Actual   2016 13 03 04:50:10  2016 13 03 04:50:10  ===  2016 13 03 03:50:10             utc offset:zone to local  keepLocalTime = true  2311.12   utcOffset  1:00  to local failed to keep local time      javascript // Expected 2016 13 03 02:50:10 // Actual   2016 13 03 03:50:10  2016 13 03 03:50:10  ===  2016 13 03 02:50:10             utc offset:zone to local  keepLocalTime = true  2311.13   utcOffset 0:00  to local failed to keep local time      javascript // Expected 2016 13 03 03:50:10 // Actual   2016 13 03 04:50:10  2016 13 03 04:50:10  ===  2016 13 03 03:50:10             utc offset:zone to local  keepLocalTime = true  2311.14   utcOffset 1:00  to local failed to keep local time      javascript // Expected 2016 13 03 04:50:10 // Actual   2016 13 03 05:50:10  2016 13 03 05:50:10  ===  2016 13 03 04:50:10             utc offset:zone to local  keepLocalTime = true  2311.15   utcOffset 2:00  to local failed to keep local time      javascript // Expected 2016 13 03 05:50:10 // Actual   2016 13 03 06:50:10  2016 13 03 06:50:10  ===  2016 13 03 05:50:10             utc offset:zone to local  keepLocalTime = true  2311.16   utcOffset 3:00  to local failed to keep local time      javascript // Expected 2016 13 03 06:50:10 // Actual   2016 13 03 07:50:10  2016 13 03 07:50:10  ===  2016 13 03 06:50:10             utc offset:zone to local  keepLocalTime = true  2311.17   utcOffset 4:00  to local failed to keep local time      javascript // Expected 2016 13 03 07:50:10 // Actual   2016 13 03 08:50:10  2016 13 03 08:50:10  ===  2016 13 03 07:50:10             utc offset:zone to local  keepLocalTime = true  2311.18   utcOffset 5:00  to local failed to keep local time      javascript // Expected 2016 13 03 08:50:10 // Actual   2016 13 03 09:50:10  2016 13 03 09:50:10  ===  2016 13 03 08:50:10             zone switching:utc to local  keepLocalTime = true  2360.1   utc to local failed to keep local time      javascript // Expected 2016 13 03 03:50:10 // Actual   2016 13 03 04:50:10  2016 13 03 04:50:10  ===  2016 13 03 03:50:10             zone switching:zone to local  keepLocalTime = true  2362.8   zone  5:00  to local failed to keep local time      javascript // Expected 2016 13 03 08:50:10 // Actual   2016 13 03 09:50:10  2016 13 03 09:50:10  ===  2016 13 03 08:50:10             zone switching:zone to local  keepLocalTime = true  2362.9   zone  4:00  to local failed to keep local time      javascript // Expected 2016 13 03 07:50:10 // Actual   2016 13 03 08:50:10  2016 13 03 08:50:10  ===  2016 13 03 07:50:10             zone switching:zone to local  keepLocalTime = true  2362.10   zone  3:00  to local failed to keep local time      javascript // Expected 2016 13 03 06:50:10 // Actual   2016 13 03 07:50:10  2016 13 03 07:50:10  ===  2016 13 03 06:50:10             zone switching:zone to local  keepLocalTime = true  2362.11   zone  2:00  to local failed to keep local time      javascript // Expected 2016 13 03 05:50:10 // Actual   2016 13 03 06:50:10  2016 13 03 06:50:10  ===  2016 13 03 05:50:10             zone switching:zone to local  keepLocalTime = true  2362.12   zone  1:00  to local failed to keep local time      javascript // Expected 2016 13 03 04:50:10 // Actual   2016 13 03 05:50:10  2016 13 03 05:50:10  ===  2016 13 03 04:50:10             zone switching:zone to local  keepLocalTime = true  2362.13   zone 0:00  to local failed to keep local time      javascript // Expected 2016 13 03 03:50:10 // Actual   2016 13 03 04:50:10  2016 13 03 04:50:10  ===  2016 13 03 03:50:10             zone switching:zone to local  keepLocalTime = true  2362.14   zone 1:00  to local failed to keep local time      javascript // Expected 2016 13 03 02:50:10 // Actual   2016 13 03 03:50:10  2016 13 03 03:50:10  ===  2016 13 03 02:50:10      ,Zbee,closed,1,2016-03-13 03:53:37,2016-03-13 03:59:19,,Unit Test Failed,,,0,1
11214,moment/moment,3036,Year setter should keep time when DST changes,Consider:      javascript moment.tz  2016 03 28T00:00:00   Europe/London  .year 2015 .format    //   2015 03 27T23:00:00 00:00       It should have been   2015 03 28T00:00:00 00:00    While this only manifests when using moment timezone  the problem is in moment itself.  The  keepTime  flag of the year unit should be set to  true   as it is for months  days  and hours.  Fixed this  added some unit tests  and added similar tests around other units and related scenarios. ,mj1856,closed,4,2016-03-13 05:52:33,2016-04-16 06:51:38,,Bug-fix,,2.13.0,1,1
11213,moment/moment,3037,Modify parse flags to include parsed date parts,The whole Klingon date replace chrome extension leads me to an interesting issue.  I have a regex looking for dates that will match a whole bunch of formats: Mar 1 2016 Mar 2016 1 Mar 2016 1 Mar Mar 1 March 1 2016 March 2016 1 March 2016 1 March March 1  By using the heck out of multiple format parsing  I can mostly get these to parse. I end up with an issue when I want to format them back out though. I don t have a good way of knowing which date parts were actually matched by the parser. I can of course access internal variables like _f or _pf to get some of this info  but that s wrong to do and I won t do it :  . It would be super convenient to be able to do something like  .format  LL   true    with the bool being an indicator to purposely drop out unmatched date parts.  The result would be something like:      js moment  Mar 7 2012    MMMMDDY  .format  MMMM DD YYYY   true   March 07 2012   moment  Mar 7    MMMMDDY  .format  MMMM DD YYYY   true   March 07  //currently this would result in  March 07 2016       I feel like there are actually a lot of reasonable use cases for this.  I d be happy to play with making this work  but I m looking for comments on whether people like the idea before I do it. ,maggiepint,closed,9,2016-03-13 17:14:35,2016-03-16 04:43:31,,New Feature,,,0,1
11212,moment/moment,3038,More DST fixes in unit tests,This fixes a few more test failure that occurred on the day of the spring forward transition.  Specifically:    meridiem invariant  test  ran on every locale  was using a local time unnecessarily  so used UTC instead.     one locale had a dup of this common test  so I removed it    passing a function  test on the  calendar  object had a local time.  Moved it from 02:00 to 13:00. ,mj1856,closed,1,2016-03-13 19:23:43,2016-03-24 10:54:57,,Bug-fix,Unit Tests Only,,2.13.0,1,1
11211,moment/moment,3039,Duration does not appear to accept milliseconds,When setting a custom format duration  I seem to be losing my milliseconds      > bob = moment.duration  0012:34:12.34    HHHH:mm:ss.SS     [Number: 45252000]   _milliseconds: 45252000    _days: 0    _months: 0    _data:      milliseconds: 0       seconds: 12       minutes: 34       hours: 12       days: 0       months: 0       years: 0      _locale:    Locale        _ordinalParse: / d 1 2  th st nd rd /       ordinal: [Function]       _abbr:  en        _config:         ordinalParse: / d 1 2  th st nd rd /          ordinal: [Function]          abbr:  en          _ordinalParseLenient: / d 1 2  th st nd rd   d 1 2 /          Note the  milliseconds: 0  I m fairly sure I m setting correctly in line with: http://momentjs.com/docs/ /displaying/format/ ,JonForest,closed,1,2016-03-14 03:22:46,2016-03-14 10:07:44,,,,0,1
11210,moment/moment,3040,Locale  zh HK  is missing,    > moment.locale   <  en  //OK > moment.locale  zh CN   <  zh cn  //OK > moment.locale  zh HK   <  zh cn  //expected  zh HK       This issue relates https://github.com/moment/moment/pull/2776  which hasn t been merged. ,nihau,closed,1,2016-03-14 08:47:39,2016-03-15 06:03:11,,,,0,1
11209,moment/moment,3041,Problem with leap year  2016 ,var cal = moment  ;  cal.dayOfYear 100 ; cal.year 2015 ; var millis = cal.valueOf  ;  The millis will be one whole day before the actual millis for that specific day of year  but only if moment   is initialized in a leap year and if the dayOfYear > Feb 29 ,chrimas1,closed,1,2016-03-15 07:40:32,2016-03-15 12:47:36,,,,0,1
11208,moment/moment,3042,get end of month April 2016,Hello There   many thanks for the awesome things here    also i have some problem when i get the end of month in April 2016   it gives me 5 1 2016 instated of 4 29 2016 :   new Date moment  04/04/2016  .endOf  month   ;  Thanks in advance. ,HDaghash,closed,1,2016-03-15 20:40:51,2016-03-15 22:27:05,,,,0,1
11207,moment/moment,3043,deprecation warning when setting locale options,I m including moment as follows:      var moment = require  moment  ; moment.locale  en         week:           dow: 1 // Monday is the first day of the week.         ;      As soon as I run this code in Node I get:      Deprecation warning: use moment.updateLocale localeName  config  to change an existing locale. moment.defineLocale localeName  config  should only be used for creating a new locale      I m using node  but you can also see here: https://jsfiddle.net/6gtctkhj/  It could be that I m setting the configuration incorrectly  but it seems correct according to [http://momentjs.com/docs/ /customization/] http://momentjs.com/docs/ /customization/ .  It looks like the problem might be in the following method:      function locale_locales__getSetGlobalLocale  key  values            var data;         if  key                if  isUndefined values                     data = locale_locales__getLocale key ;                           else                   data = defineLocale key  values ;                          ...                    return globalLocale._abbr;            This method calls defineLocale  but may need to be updated to call updateLocale? ,streets-ahead,closed,5,2016-03-15 20:42:12,2016-03-16 01:11:04,,Documentation,,,0,1
11206,moment/moment,3044, Year  marker character is missing for Chinese/Japanese/etc,In the Japanese language   moment  .format  YYYY MMM    should return something like  2016  3    but it returns  2016 3    It seems like examples on the site have this problem as well:    moment  .format  MMMM Do YYYY  h:mm:ss a  ;  //    15  2016  4:56:42    moment  .format  MMM Do YY  ;               // 3  15  16   This issue is very similar to https://github.com/moment/moment/issues/2807. ,hokei,closed,5,2016-03-15 21:02:44,2016-03-17 22:08:07,,Language,,,0,1
11205,moment/moment,3045,Expose parsed date parts. Invalid date if  a  token parsed but no date parts parsed.,PR resolves  3037 and  2986   The date parts parsed are exposed in parsingFlags  .parsedDateParts array. Array only has date parts at indexes parsed.  Because actual date parts parsed is being tracked now  it is possible to modify isValid to evaluate as false if no date parts are being parsed  but meridiem indicator was parsed. This resolves a current behavior where junk data can parse valid if it has the letters  a  or  p  in it  or whatever indicates meridiem in the specific locale . Current behavior:      js moment  asdfgh    hh:mm a  .isValid   true     ,maggiepint,closed,6,2016-03-16 04:42:28,2016-04-16 05:49:57,,Enhancement,,2.13.0,1,1
11204,moment/moment,3046,Update ar.js,,turkialawlqy,closed,6,2016-03-16 07:52:46,2016-08-27 21:44:29,Menelion,Language,,,1,1
11203,moment/moment,3047,Invalid date for format  YYYYMMDDHHMMSS ,I m trying something like this    moment date_from_db  YYYYMMDDHHMMSS  .format  YYYY MM DD  ;  where  date_from_db  is  20160307133625  it fails with Invalid date error  if date from db is like  20160307073625  then I do not have any issue  seems like there is problem with HH? ,vaske,closed,2,2016-03-16 09:28:56,2016-03-16 14:04:28,,,,0,1
11202,moment/moment,3048,2.10.0 has breaking changes to isBefore and isAfter with empty dates,After upgrading from 2.8.2 to 2.12.0  I noticed breaking changes to  isBefore  and  isAfter  in 2.10.0 and one ore more versions between 2.10.0 and 2.12.0  Test case on Firefox 44.0.2:      var emptyDateIsBeforeDateInThePast = moment      DD MM YYYY  .isBefore moment  2016 01 01   ; var emptyDateIsBeforeToday = moment      DD MM YYYY  .isBefore moment  2016 03 16   ; var emptyDateIsBeforeDateInTheFuture = moment      DD MM YYYY  .isBefore moment  2016 12 31   ; var emptyDateIsAfterDateInThePast = moment      DD MM YYYY  .isAfter moment  2016 01 01   ; var emptyDateIsAfterToday = moment      DD MM YYYY  .isAfter moment  2016 03 16   ; var emptyDateIsAfterDateInTheFuture = moment      DD MM YYYY  .isAfter moment  2016 12 31   ;  console.log  emptyDateIsBeforeDateInThePast   emptyDateIsBeforeDateInThePast ; console.log  emptyDateIsBeforeToday   emptyDateIsBeforeToday ; console.log  emptyDateIsBeforeDateInTheFuture   emptyDateIsBeforeDateInTheFuture ; console.log  emptyDateIsAfterDateInThePast   emptyDateIsAfterDateInThePast ; console.log  emptyDateIsAfterToday   emptyDateIsAfterToday ; console.log  emptyDateIsAfterDateInTheFuture   emptyDateIsAfterDateInTheFuture ;      Output on 2.8.2:  > emptyDateIsBeforeDateInThePast true > emptyDateIsBeforeToday true > emptyDateIsBeforeDateInTheFuture true > emptyDateIsAfterDateInThePast false > emptyDateIsAfterToday false > emptyDateIsAfterDateInTheFuture false  Output on 2.9.0:  > emptyDateIsBeforeDateInThePast true > emptyDateIsBeforeToday true > emptyDateIsBeforeDateInTheFuture true > emptyDateIsAfterDateInThePast false > emptyDateIsAfterToday false > emptyDateIsAfterDateInTheFuture false  Output on 2.10.0  > emptyDateIsBeforeDateInThePast false > emptyDateIsBeforeToday false > emptyDateIsBeforeDateInTheFuture true > emptyDateIsAfterDateInThePast true > emptyDateIsAfterToday false > emptyDateIsAfterDateInTheFuture false  Output on 2.12.0  > emptyDateIsBeforeDateInThePast false > emptyDateIsBeforeToday false > emptyDateIsBeforeDateInTheFuture false > emptyDateIsAfterDateInThePast false > emptyDateIsAfterToday false > emptyDateIsAfterDateInTheFuture false  2.10.0 immediately follows 2.9.0  and this is the changelog for 2.10.0:  > Ported code to es6 modules  It s a little late to do anything about this now  and I ll adapt the broken code to work properly with the latest version. However  I do not understand how there can be any functional change at all in 2.10.0  I think a warning in the changelog would be useful  to indicate that even though it s supposed to be refactoring only  there are an unknown number of breaking changes. ,stijnherreman,closed,1,2016-03-16 11:41:34,2016-03-16 20:11:20,,,,0,1
11201,moment/moment,3049,fromNow short hand,Is there a really simple suggestion where I can override all the relative past times to short hand?  I would think this is really useful for mobile.  I don t need a string a mile long for a mobile screen.  Hoping to change these to short hand  like 1m or 1d or 1w   I think some other small time social apps do this already.  I think someone already posted about similar thing n secongs ago should be just now.  This is a similar request.  How can I override this format to short hand using the component  or do I do my own string replace? thanks        _relativeTime :               future :  in  s               past :   s ago               s :  a few seconds               m :  a minute               mm :   d minutes               h :  an hour               hh :   d hours               d :  a day               dd :   d days               M :  a month               MM :   d months               y :  a year               yy :   d years              using   angular.module  app     .filter  fromNow   function         return function date          return moment date .fromNow  ;           ;     ,MartyBolton,closed,6,2016-03-17 02:36:43,2016-03-17 22:26:26,,,,0,1
11200,moment/moment,3050,18 month diff returning 17 months,  Diff errors when subtracting months  When subtracting 18 months from the current day and then doing a diff  17 months is given inconsistently.  <a href= http://codepen.io/JacobReynolds/pen/PNWePj?editors=1010 >Example codepen</a>      Example output  <img src= http://s11.postimg.org/b0sy9oztf/momentjsexample.png />  If example is not reproducing error  try refreshing page. ,JacobReynolds,closed,1,2016-03-17 21:31:22,2016-03-17 22:25:26,,Troubleshooting,,,0,1
11199,moment/moment,3051,Dates without time parse incorrectly for early dates in Windows vs Linux,We use Windows to run our local machines  but our build server and environments are Linux. As such  we have one very particular unit test that is failing  but only on Linux. I ve already validated that the times are the same  same UTC offset  etc. on both local and build server.      javascript describe  getDateWithoutTimeSinceEpoch      =>       it  Returns a date value from YYYY DD MM in 2015      =>         expect moment  2015 12 15    YYYY MM DD  .valueOf   .to.equal 1450159200000 ;       ;      it  Returns a date value from YYYY DD MM in 1985      =>         expect moment  1985 04 09    YYYY MM DD  .valueOf   .to.equal 481870800000 ;       ;     ;      In both Windows and Linux  the top unit test passes. However  the bottom one passes in Windows  but not in Linux. Linux is trying to set it to 481874400000  one hour in the future . I already tried appending the T00:00:00 to mimic the ISO_8601 format  but that did the same thing.   I m sure I m just doing something dumb  but I don t see it  so I kinda think this is a bug. ,321ckatz123,closed,6,2016-03-17 23:04:49,2016-03-17 23:11:21,,,,0,1
11198,moment/moment,3052,moment  .calendar returning odd results,Am I doing something wrong here?  Expected Results:      javascript moment  .calendar moment  .add  1    days          sameDay:  [Today]       nextDay:  [Tomorrow]       nextWeek:  dddd       lastDay:  [Yesterday]       lastWeek:  [Last] dddd       sameElse:  DD/MM/YYYY    ;  Tomorrow       Actual Results:      javascript moment  .calendar moment  .add  1    days          sameDay:  [Today]       nextDay:  [Tomorrow]       nextWeek:  dddd       lastDay:  [Yesterday]       lastWeek:  [Last] dddd       sameElse:  DD/MM/YYYY    ;  Yesterday      ,tielur,closed,1,2016-03-18 05:00:30,2016-03-18 05:19:52,,,,0,1
11197,moment/moment,3053,Make Documentation link more obvious on npmjs,It s a minor feedback  but when you look at the readme on https://www.npmjs.com/package/moment   it s really not obvious that  Documentation  was a link  because it s a title . maybe it s a bug to raise at npmjs itself  but this PR would fix it. ,gre,closed,2,2016-03-18 10:59:02,2016-03-24 10:46:43,,,2.13.0,1,1
11196,moment/moment,3054,Rename Filipino locale,Technically Tagalog Philippines and Filipino are pretty much the same language.  Now that locale inheritance is possible  it would be good to create a Filipino locale that inherited from the Tagalog Philippines locale  effectively creating an alias. I think ideally these would be built together.  PR  2824 includes further details. ,maggiepint,open,1,2016-03-21 01:14:34,0000-00-00 00:00:00,,Language,,,0,1
11195,moment/moment,3055,locales script,This is the initial version of a script that will help with summoning all locale authors when we need to :    [ ]  check  authors that replied   [ ] incorporate into building next release to update a team that can be referenced more easily ,ichernev,closed,2,2016-03-21 01:46:57,2016-08-31 18:23:50,,,2.15.0,1,1
11194,moment/moment,3056,Wrong week number for December 30th when using localized week  ,See attached fiddle:  http://jsfiddle.net/ppfzjw41/ ,uriklar,closed,1,2016-03-21 16:19:28,2016-03-23 06:43:09,,Troubleshooting,,,0,1
11193,moment/moment,3057,1 test failed. week year:week numbers 2012/2013  2446.7  ,    Client info      Date String   : Tue Mar 22 2016 10:26:35 GMT 0800          Locale String : 2016/3/22   10:26:35 Offset        :  480 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/46.0.2490.80 Safari/537.36            week year:week numbers 2012/2013  2446.7       javascript // Expected 53 // Actual   52 52 === 53     ,zjjay,closed,3,2016-03-22 02:27:18,2016-03-23 05:47:31,,Unit Test Failed,,,0,1
11192,moment/moment,3058,Tue Mar 22 2016 10:26:35 GMT 0800,    Client info      Date String   : Tue Mar 22 2016 10:26:35 GMT 0800          Locale String : 2016/3/22   10:26:35 Offset        :  480 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/46.0.2490.80 Safari/537.36            week year:week numbers 2012/2013  2446.7       javascript // Expected 53 // Actual   52 52 === 53     ,zjjay,closed,1,2016-03-22 02:27:42,2016-03-23 05:47:49,,Unit Test Failed,,,0,1
11191,moment/moment,3059,fix bug where diff returns  0 in month related diffs,Fixes  2908.  I wish there were simpler code for this  but as far as I am aware the only way to get rid of the negative zero is to explicitly check for it and replace it with zero.  Fun fact   this bug created a stack overflow question with a ton of upvotes: http://stackoverflow.com/questions/31599665/javascript detecting the difference between positive zero and negative zero  Edit: Tim made my code good. Lesson learned. ,maggiepint,closed,2,2016-03-22 04:18:39,2016-04-16 06:52:45,,Bug-fix,,2.13.0,1,1
11190,moment/moment,3060,Add pseudo locale  x pseudo ,@mik01aj @Oire @ichernev       Proposed adding a pseudo locale.  If this is something you would incorporate I ll go ahead and add unit tests.   cc @paulpdaniels @anottestad @scottrice10 @kirkhoff  ,andrewhood125,closed,14,2016-03-22 20:21:32,2016-04-16 06:48:58,,Language,,2.13.0,1,1
11189,moment/moment,3061,Documentation typo for string formatting?,On the [docs for string formatting] http://momentjs.com/docs/ /parsing/string format/   the format for  e  lists the output as  1..7   though when using it comes out as 0..6 ,avoliva,closed,1,2016-03-23 21:25:20,2016-03-23 22:55:46,,,,0,1
11188,moment/moment,3062,Unit test failing when using moment.js,I have the following code in one of my controllers:                controller.date =                 startDate: moment  .subtract 1   days  .hour 0 .minute 0 .second 0                 endDate: moment              ;      It works great until I try to unit test this controller. I m including moment.js in my karma.conf.js file. I know it s being picked up properly because moment   is defined  but it fails when it hits the .subtract part of the chain.  If I remove everything after moment    all tests pass.   TypeError:  undefined  is not a function  evaluating  moment  .subtract 1  days      Any ideas why I m getting this error? Do I need to include a separate dependency for the subtract   method? ,ellenchristine,closed,1,2016-03-23 21:52:08,2016-04-12 06:50:17,,Troubleshooting,,,0,1
11187,moment/moment,3063,Add info on becoming a team member,To keep the team growing healthy we need a more formal initiation procedure. ,ichernev,closed,1,2016-03-24 10:29:50,2016-07-02 18:20:00,,,2.14.0,1,1
11186,moment/moment,3064,Why is string splitting used to create arrays in the locale files?,I wanted to create a new locale  and while looking at existing locales I noticed string splitting is done to create arrays:       January_February_March_April_May_June_July_August_September_October_November_December .split  _        This pattern was introduced in https://github.com/moment/moment/commit/ae5916e56c58c3568961816914b25440d600fde1 but the commit message does not explain _why_ this was done.  What purpose does it serve? Must I follow the same style when creating a new locale? ,stijnherreman,closed,1,2016-03-24 13:05:08,2016-03-24 15:02:44,,,,0,1
11185,moment/moment,3065,No deprecations in tests,Instead of printing random warnings when running tests  now   check what deprecations is the tested code supposed to throw  and only raise an exception if there is a mismatch.  Fixes  2719 Obsoletes:  3012  ,ichernev,closed,1,2016-03-24 14:32:46,2016-03-31 06:46:40,,,,1,1
11184,moment/moment,3066,locale issue,Any idea when this will be fixed? Or any workarounds currently available?  ,pablougas,closed,4,2016-03-24 15:42:21,2016-03-24 16:50:22,,Troubleshooting,,,0,1
11183,moment/moment,3067,Parse object bug,I have trouble with following code:  moment  years:1998  months:1  date:1  hours:1  minutes:1  seconds:3  milliseconds:123  .unix    Result is: 886291263  moment.unix 886291263 .toString  ;  Result is:  Sun Feb 01 1998 01:01:03 GMT 0100  ,ljanecek,closed,2,2016-03-24 16:31:42,2016-03-24 16:44:13,,,,0,1
11182,moment/moment,3068,Is Buddha Calendar support ?,I use bootstrap.datetimepicker and I dont know how to set calendar to Buddah format . anyone can teach me how to do. Thanks you so much ,yuucharawae,closed,1,2016-03-26 10:12:43,2016-03-29 12:44:33,,,,0,1
11181,moment/moment,3069,Remove spm,Spm  Static package manager  has been removed and so should be removed from the moment s website and other relevant places. ,puranjayjain,closed,2,2016-03-26 16:43:36,2016-03-27 02:37:36,,,,0,1
11180,moment/moment,3070,Kyrgyz_kg locale support,Added Kyrgyz language support ,Chyngyz,closed,5,2016-03-28 11:15:54,2016-04-16 08:06:40,Menelion,Language,,2.13.0,1,1
11179,moment/moment,3071,.add NaN   ms   returns moment with valid: true,Not sure if this is the intended behavior  but I would certainly expect/want for adding NaN of anything to make the moment invalid.   [screen shot 2016 03 28 at 10 14 52 am] https://cloud.githubusercontent.com/assets/1448194/14081023/06cff714 f4ce 11e5 8b8c 8dd7bd26ed22.png  ,jedwards1211,open,6,2016-03-28 15:16:28,0000-00-00 00:00:00,,Breaking change,Enhancement,,,0,1
11178,moment/moment,3072,Days from months other than current one display as  NaN  when using moment with locales.js,When using moment with locales.js  days of months other than the one currently in focus display as  NaN :   [screen shot 2016 03 28 at 2 58 34 pm] https://cloud.githubusercontent.com/assets/509658/14091515/925b4f78 f4f5 11e5 89cc 0e052ca0cbca.png   This was tried with version 2.12.0.  ,lreis,closed,2,2016-03-28 22:00:50,2016-04-01 18:38:11,,Troubleshooting,,,0,1
11177,moment/moment,3073,add   method not working after BST change,Using the add   method with dates pre and   post BST change   is inconsistent.  moment  2016 01 01  .add 1   months  .subtract 1   days  .toDate  .toISOString     2016 01 31T00:00:00.000Z  gives the correct outcome  whereas...   moment  2016 09 01  .add 1   months  .subtract 1   days  .toDate  .toISOString     2016 09 29T23:00:00.000Z   ...does not. ,mauricezuhlke,closed,2,2016-03-29 14:34:39,2016-03-29 17:16:05,,,,0,1
11176,moment/moment,3074,how to calculate time,Like this      js var time = moment  2016 04 30 02:10     moment  ;      I want make it to  hh:mm:ss  How could i do this ? thank you ,mqliutie,closed,6,2016-03-30 07:54:09,2016-03-31 21:53:51,,,,0,1
11175,moment/moment,3075,Chris/improve zh tw,@ben lin  ,hehachris,closed,3,2016-03-30 08:11:43,2016-04-18 06:49:03,,,,1,1
11174,moment/moment,3076,moment.defineLocale deprecation warning triggered by locale definition,Using Moment 2.12.0 I get the following deprecation warning when including any locale:      Deprecation warning: use moment.updateLocale localeName  config  to change an existing locale. moment.defineLocale localeName  config  should only be used for creating a new locale      While this deprecation warning might be true in general  I get these from the locale files  e.g. the call at https://github.com/moment/moment/blob/develop/locale/ja.js L13 and there it is actually used for creating a new locale ;   Not sure how to deal with this and how to detect the intention of the caller  but maybe there is some way to only show the warnings while  defineLocale  is used outside of locale definitions. ,phw,closed,1,2016-03-30 14:02:33,2016-03-30 14:22:36,,,,0,1
11173,moment/moment,3077,Display ISO8601 date only ,Calling  moment  2016 03 30  .format  ;  will return both date and time although only the date was initially specified. We have to specify the ISO8601 date format ourselves in order to display only the date  e.g.  moment  2016 03 30  .format  YYYY MM DD  ;   How about having something like  toISODateString     similar to  toISOString   that only displays the date part?  IMHO this is related to  2450  support ISO8601    3019  formatting ISO8601  and maybe  3020  again formatting ISO8601 . ,sebhoss,closed,7,2016-03-30 14:22:22,2016-04-01 18:36:28,,,,0,1
11172,moment/moment,3078,Fix parsing for months/weekdays with weird characters,This is a better implementation for  2782  fixing  2801 . It is a continuation of  2869  which had to be shipped faster  without all the intended improvements .   [x] implement for weekdays   [x] add tests for weekdays ,ichernev,closed,6,2016-03-31 10:06:42,2016-04-16 05:46:30,,,2.13.0,1,1
11171,moment/moment,3079,Add siSwati  ss  locale,Add locale for siSwati  Swaziland  southern Africa .  The translation was done in collaboration with 3 native speakers. ,Nicolaidavies,closed,0,2016-03-31 12:14:43,2016-03-31 16:20:13,,Language,,,1,1
11170,moment/moment,3080,Formatting a moment object breaks equality comparisons,When a moment object is formatted  the equality of the object with a clone of the unformatted object becomes false. This is unexpected  as formatting operations should be nullipotent  not change the underlying object .  Small example:      foo = moment  ; bar = foo.clone  ; _.isEqual foo  bar ; //true angular.equals foo  bar ; //true foo.format  ; _.isEqual foo  bar ; //false angular.equals foo  bar ; //false      See https://jsfiddle.net/x4hr9qmq/1/for fiddle  Note that  ===  will always fail  but this is expected as  moment.clone    should return a different object  but equality comparitors like lodash s  _.isEqual  and angular  angular.equals  should return true as they compare properties not object identity. ,zakhenry,open,9,2016-03-31 14:09:52,0000-00-00 00:00:00,,Enhancement,,3.0,0,1
11169,moment/moment,3081,Add siSwati  ss  locale,Add a locale for siSwati  Swaziland  southern Africa  ,Nicolaidavies,closed,3,2016-03-31 16:38:31,2016-04-16 08:05:23,Menelion,Language,,2.13.0,1,1
11168,moment/moment,3082,Use relative AMD moment dependency,Use a relative AMD dependency so that it s not required to have the  main  defined for the  moment  package. ,dasa,closed,9,2016-03-31 19:45:03,2016-06-20 08:13:15,,Loading,,2.14.0,1,1
11167,moment/moment,3083,parseZone without timezone returning unexpected result,If you provide a timestamp with no timezone offset to  parseZone  it seems to parse it in your browser s timezone  but then sets the  _offset  to 0 and  _isUTC  to true. This seems unexpected.      > moment.parseZone  2016 02 01T00:00:00  .format    2016 02 01T08:00:00 00:00       I would expect either  2016 02 01T00:00:00 00:00  or  2016 01 31T16:00:00 08:00   assuming my browser s offset is  08:00 . I think  moment.utc s .utcOffset s   basically provides the former. ,tlrobinson,closed,5,2016-03-31 22:09:30,2016-09-03 06:15:12,,Bug,,,0,1
11166,moment/moment,3084,Creating a date for February of non leap years gives incorrect date.,If you try to create a date passing the month first for non leap years  e.g.  moment.month 1 .year 2015    it will return an incorrect date. This only happens when creating February on non leap years. The expected date is the last day of February  instead we got the first day of March.  BUUT  it works just fine if you pass the year first.  e.g.  moment.year 2015 .month 1   .  Js Fiddle example: https://jsfiddle.net/41h64bor/2/ ,cam31007,closed,1,2016-03-31 23:43:23,2016-03-31 23:57:52,,,,0,1
11165,moment/moment,3085,April 2016 isSame as empty object,https://jsfiddle.net/u71dx24a/1/  When comparing dates  if you compare Apr 2016 to an empty moment object  the isSame method returns true. This is not the case with March 2016  or April 2015. ,dzx11,closed,7,2016-04-01 15:37:16,2016-04-19 15:37:09,,Enhancement,Up-For-Grabs,,,0,1
11164,moment/moment,3086,startOf  day   is giving me yesterday,Running the following code in Chrome Version 49.0.2623.110 m  [image] https://cloud.githubusercontent.com/assets/4746537/14231426/621b884c f98b 11e5 83a9 31739ffc74c9.png  Maybe related to  2982 ? ,M-Zuber,closed,3,2016-04-03 08:02:33,2016-04-03 11:53:26,,,,0,1
11163,moment/moment,3087,2 tests failed. diff:diff across DST  1965.17  diff:diff across DST  1965.19  ,    Client info      Date String   : Sun Apr 03 2016 12:17:44 GMT 0300  Jerusalem Daylight Time  Locale String : 3/4/2016 12:17:44 Offset        :  120 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/49.0.2623.110 Safari/537.36            diff:diff across DST  1965.17   month diff across DST  lower bound      javascript // Expected true // Actual   false false === true            diff:diff across DST  1965.19   year diff across DST  lower bound      javascript // Expected true // Actual   false false === true     ,ouaks,closed,1,2016-04-03 09:18:26,2016-04-03 13:24:17,,,,0,1
11162,moment/moment,3088,Issue with strictly parsing a formatted date,I m running into an issue where a formatted date outputted by moment cannot be strictly parsed when passed back into moment.  Specifically  I m using the format  ll   which appears to work with the  en  locale but doesn t work when the locale is  fr .   Not sure if this affects all locales  but a unit test in one of my projects shows it s an issue with at least  de  as well.   Fiddle: https://jsfiddle.net/pph91sz1/ ,rafeememon,closed,2,2016-04-03 09:45:06,2016-04-03 12:03:40,,,,0,1
11161,moment/moment,3089,Update norwegian locale,The  for  is not needed for the sentence to make sense in Norwegian  and this will give the developer the chance to omit the  for  if wanted. This is also more consistent compared to the other locales in this repository. ,flugger,closed,7,2016-04-04 13:49:37,2016-04-16 07:47:27,Menelion,Language,,2.13.0,1,1
11160,moment/moment,3090,Switch transpiler to babel and rollup,:exclamation: Not ready for merging :exclamation:   This is the start of replacing esperanto with babel and rollup. This transpiles the entire  src  directory into  build/cjs  in a commonjs module format  and uses that to run unit tests. It also builds some umd artifacts currently  though I am missing quite a few still.  TODO:   [ ] Create  locales.js    [ ] Create  moment locales.js    [ ] Custom locales builder.   [ ] Unit tests for browser   [ ] Retain comment headers in built files  A potentially breaking change is that the locale files no longer  export default . I m not sure anyone was using them as  var es = require  moment/locale/es    anywhere. I changed this so that rollup wouldn t complain about not declaring a module name for each of those files  I m not sure if there is another way around this. ,timrwood,closed,4,2016-04-05 02:04:28,2016-11-01 02:42:02,,es6 rework,,,1,1
11159,moment/moment,3091,npm install broken by new grunt,v1 dropped today. Ya ll are tracking grunt with  latest . Now everything asplodes :smile:  I m going to see about upgrading for ya ll ,MylesBorins,closed,1,2016-04-05 07:03:05,2016-04-06 22:46:18,,,,0,1
11158,moment/moment,3092,deps: peg grunt to  0.4,Dev deps cannot pass with grunt > 0.4  1.0 will fail without deps themselves updating. PEgging the grunt dep ensures that npm install will work without error  fixes  3091 ,MylesBorins,closed,7,2016-04-05 07:31:30,2016-04-06 22:46:18,,,,1,1
11157,moment/moment,3093,Remove old unused grunt tasks,This removes the following grunt tasks.      grunt size grunt history grunt embedLocales grunt zones      These are all out of date and no longer used. ,timrwood,closed,1,2016-04-05 15:44:38,2016-04-16 05:57:32,,,2.13.0,1,1
11156,moment/moment,3094,Parsing of invalid string changed to valid from 2.9.0 to 2.12.0,Hi Guys  Not sure if this is an issue or an enhancement made during the course of things  somehow we were stuck on 2.9 and updated to 2.12 recently  earlier 2.9  we would parse things like  moment  2016 04 06Tnull  .isValid   // gives false  but now 2.12  this kind of parsing returns true with the time set to  00:00:00   Mostly just sharing my experience after the upgrade.  Great work by all of you   ,Aukhan,closed,2,2016-04-06 17:26:35,2016-04-06 20:17:42,,,,0,1
11155,moment/moment,3095,JSPM and MomentJS,Hi   We are experiencing problems with Moment and SystemJS when creating bundles.  The problems are caused by the project s package.json. Namely:  1  Setting the main     main :  ./moment.js     From JSPM s documentation: This is the module name of the main entry point of the package. It isn t necessary to include the .js extension  or start the name with relative syntax  ./   although this will still work. [JSPM Documentation] https://github.com/jspm/registry/wiki/Configuring Packages for jspm main   https://github.com/moment/moment/blob/develop/package.json L25  2  Mapping moment to the current folder  Map configuration will rewrite internal requires to point to different local or external modules. Why is it being used in moment s package.json?       map :                moment :  ./moment                 https://github.com/moment/moment/blob/develop/package.json L76  Would you accept a PR to fix the package.json or are there any reasons for having it as is?  Thanks in advance  ,carlosagsmendes,closed,2,2016-04-06 17:30:35,2016-06-06 09:23:08,,Build/Release,Loading,,,0,1
11154,moment/moment,3096,Identify if I am now in US zone UK zone,Hi   Please help me find out a better way to recognize which zone is the current date in.   moment.tz myDate .format  z    gives me GMT  EST etc.. But How can I exactly differentiate if it is US or UK or else  as I have read that abbreviations alone doesn t determine the nation.  I really need to do this. :   Please help  ,anusreemn,closed,1,2016-04-07 07:21:40,2016-04-07 08:35:13,,,,0,1
11153,moment/moment,3097,13 03 2016 is behaving strangely on addition and substractions,[ <img width= 589  alt= screen shot 2016 04 07 at 6 46 08 pm  src= https://cloud.githubusercontent.com/assets/8620274/14352269/478c16b8 fcf1 11e5 9a5d 3fe4f7926cae.png > ] url   <img width= 466  alt= screen shot 2016 04 07 at 6 48 56 pm  src= https://cloud.githubusercontent.com/assets/8620274/14352296/6e75ec4a fcf1 11e5 97fb 7a9127f5ad3c.png >  <img width= 641  alt= screen shot 2016 04 07 at 6 50 00 pm  src= https://cloud.githubusercontent.com/assets/8620274/14352334/9bf16c4e fcf1 11e5 8c52 ffa85abcba5d.png > ,Abhivendra,closed,1,2016-04-07 13:16:55,2016-04-07 13:49:44,,,,0,1
11152,moment/moment,3098,Using Z suffix when in UTC mode   3020 ,As described in issue  3020  a moment in UTC mode should be formatted  by default  with the letter Z as a suffix instead of the time zone   00:00. ,lcarva,closed,11,2016-04-08 01:02:05,2016-04-16 07:45:53,,,2.13.0,1,1
11151,moment/moment,3099,No least specific fallback of locale  zh ,When setting a moment locale to  zh hk  or  zh mo   the least specific locale of  zh  should be used. Since  zh cn  and  zh tw  are the only two locales included that start with  zh   there is no fallback to just a  zh  locale. Google translate for example falls back to  zh  as an alias to  zh cn . This seems to be the only language in the locale folder that does not have a root fallback. I think a simple fix would be to rename  zh cn  to just  zh . ,CTOJoe,open,14,2016-04-08 03:29:09,0000-00-00 00:00:00,,Language,,,0,1
11150,moment/moment,3100,About doc   updatelocale?, [image] https://cloud.githubusercontent.com/assets/6321099/14375588/fadadb8e fd94 11e5 8384 14c2550118aa.png  ,luweiymy,closed,2,2016-04-08 06:21:46,2016-04-17 22:40:28,maggiepint,,,0,1
11149,moment/moment,3101,Loading moment as module and add to window,I m using SystemJS to load moment as a dependency. However I also require another library which depends on moment being defined as window.moment. Is there a way to achieve this without this type of hack?      System.import  moment  .then function  moment        window.moment = moment;     System.import  ./app  ;   ;     ,olee,closed,9,2016-04-08 10:27:05,2016-06-06 02:01:50,,Loading,,,0,1
11148,moment/moment,3102,Add k and kk formatting tokens,This fixes issue  2762.  The consensus from that issue seemed to be that the presence of the  kk  token should not modify the value of other tokens  so that is the behavior that is implemented here.  It should be noted that this decision introduces a bit of an inconsistency  given that the parsing behavior introduced [here] /moment/moment/pull/1965  does change the day when an hour of 24 is present.  In other words       js moment  2016 04 09T24:00:00   // yields a moment representing midnight at the start of April 10th  introduced in  1965  moment  2016 04 09T24:00:00  .format  YYYY MM DD[T]kk:mm:ss   //  2016 04 10T24:00:00   different from the original format string that was parsed            I m not extremely familiar with the internal codebase  so please let me know if there s anything that I did incorrectly or that I should add. ,not-an-aardvark,closed,2,2016-04-10 03:55:40,2016-04-16 05:58:46,,,2.13.0,1,1
11147,moment/moment,3103,Locale aware moment.weekdays issue  2927,fix issue  2927   moment.weekdays true  to sort list by the first day of week according to locale data moment.weekdays true  NUMBER  to get the  NUMBER day in sorted weekdayList ,Changron,closed,2,2016-04-10 08:43:04,2016-04-12 11:43:00,,,,1,1
11146,moment/moment,3104,Add jsnext:main in package.json,Using Rollup.js in my project I am currently using directly the ES6 source files in moment. The problem I have is that I need to manually create an alias for moment because of the  main  in  package.json  :       js rollup     ...   plugins: [     alias          moment/src :  /node_modules/moment/src         moment:  /node_modules/moment/src/moment.js             ]    ...    .then    =>     ...   ;          js import moment from  moment ; let date = moment  ;      But Rollup.js can use a  jsnext:main  in  the package.json  in order to use ES6 code instead of ES5  see https://github.com/rollup/rollup/wiki/jsnext:main . Would it be possible to add these field to the  package.json  file ? ,ulrik59,open,6,2016-04-11 09:57:13,0000-00-00 00:00:00,,Loading,,,0,1
11145,moment/moment,3105,Add localeSorted argument to weekday listers,Fixes  2927  redo  3103 ,ichernev,closed,4,2016-04-12 11:35:59,2016-04-16 05:52:17,,,2.13.0,1,1
11144,moment/moment,3106,Business days  work days  would be a helpful unit for date manipulation,Business days  work days  would be a helpful unit for date manipulation   new moment  .add 14   work days    ,chevalierc,closed,1,2016-04-12 14:07:32,2016-04-13 02:50:31,,,,0,1
11143,moment/moment,3107,moment object is not clonable,https://jsfiddle.net/oo5w4s71/  var d1 = moment  .hour 12 .minute 0 ; var d2 = _.clone d1 .add 1   hour  ; alert d1.format  HH:mm         d2.format  HH:mm   ; //13:00   13:00 WTF?    ,toporchillo,closed,1,2016-04-12 14:29:02,2016-04-13 02:48:05,,,,0,1
11142,moment/moment,3108,Incorrect parsing glued hours/minutes ,The docs state:  > From version 2.10.7 parsing hmm  Hmm  hmmss and Hmmss is supported: >  >  moment  123    hmm  .format  HH:mm   ===  01:23   >  moment  1234    hmm  .format  HH:mm   ===  12:34    However  in testing the above statements I get:      moment  123    hmm  .format  HH:mm   ===  12:03  moment  1234    hmm  .format  HH:mm   ===  12:34       and:      moment  130    hmm  .format  HH:mm   ===  13:00       Using  moment@2.11.0 . ,brettdewoody,closed,3,2016-04-13 04:26:38,2016-04-13 05:11:25,,,,0,1
11141,moment/moment,3109,Fix  1756 Resolved thread safe issue on server side.,As mentioned in  1756  there is a thread safe issue when we use Moment on the server side of the multi threaded model  e.g. [Rhino] https://developer.mozilla.org/en US/docs/Mozilla/Projects/Rhino  .  I noticed the scope of  variable  i   in  makeFormatFunction  function is too wide. The variable is shared in multiple threads. It causes unpredictable behavior. ,wadahiro,closed,2,2016-04-13 16:46:40,2016-04-16 07:44:12,,,2.13.0,1,1
11140,moment/moment,3110,isValid allows invalid dates,    javascript moment  1.1.2001    YYYY MM DD  .isValid   true moment  1.13.2001    YYYY MM DD  .isValid   false moment  13.1.2001    YYYY MM DD  .isValid   true moment  1.13.2001    YYYY MM DD  .isValid   false moment  1.13.2001    YYYY DD DD  .isValid   true moment  1.13.2001    YYYY DD MM  .isValid   false      At the moment moment.js is doing his best to give us true. I think   it shouldn t round parts of date    this is my guess  like: 2001 to 20 and 13 month to 0. ,3amprogrammer,closed,2,2016-04-14 11:58:13,2016-04-14 12:08:42,,,,0,1
11139,moment/moment,3111, 3085 Remove unexpected behavior when calling moment with an empty object,As mentioned in  3085  calling  moment      or  moment []   resulted in different behavior than calling  moment     which we agreed was unexpected behavior. By setting the input to the same as it would be as if no empty array or object was passed in  the behavior is more consistent. ,ottoliar,closed,12,2016-04-15 04:08:25,2016-06-14 08:50:38,,Bug-fix,rewrite,,,1,1
11138,moment/moment,3112,optimize configFromStringAndFormat,You might consider optimizing configFromStringAndFormat function by changing the order of tests in if statement in line 68. I ran all unit tests and found that the second check  config._a[HOUR] <= 12  is more often false comparing to the others  so by putting it in the first place the computation time in other tests can be saved most of the time.  So I found real performance benefit for two unit tests on V8 4.4  I ran them with Benchmark.js library since jsperf is down . Both improvements are statistically significant.  [selection_014] https://cloud.githubusercontent.com/assets/7926726/14566859/96b99526 0331 11e6 9d8e 8c0217bc3287.png   If you want to try tests  just download them from https://s3.eu central 1.amazonaws.com/momenttests/testsMoment.zip  To run the tests  call:  > node run.js  Even though this is a simple change  it seems to improve performance without affecting the readability of the code. ,marijaselakovic,closed,2,2016-04-15 15:46:40,2016-06-14 08:52:06,,,2.14.0,1,1
11137,moment/moment,3113,Moment returns 18 hours when the value passed is 0  instead of 0,When passed in 0 instead of returning a 0 value  the moment library returns 18 hours.  I could be incorrect  my knowledge of this kind of math isn t the best  but it definitely seems like this is a situation where the user would expect to get a 0 back.  If I am wrong I d love to know why this returns 18 :  thanks    [image] https://cloud.githubusercontent.com/assets/2047962/14575743/6ec5b34a 0329 11e6 9ae4 25f259797973.png  ,thethp,closed,2,2016-04-15 21:46:33,2016-04-15 22:20:57,,,,0,1
11136,moment/moment,3114,got the same fromNow  ,var ws=1459619605812; var wd=1459583299182; document.getElementById  cc  .innerHTML=moment ws .fromNow    ===  moment wd .fromNow  ;  we got 14 days ago===14 days ago why?  ,myserver368,closed,2,2016-04-16 08:37:55,2016-05-03 20:08:42,,Troubleshooting,,,0,1
11135,moment/moment,3115,Link changes,Change deprecation warning links to direct to website in order to improve clarity. ,maggiepint,closed,3,2016-04-17 13:08:08,2016-06-14 08:56:52,,,2.14.0,1,1
11134,moment/moment,3116,Overflow with 12h format.,Not sure if it s allowed to ask for some help in the github issues this way. If not  feel free to close this issue immediately.  Moment.js is being used in the MagicMirror project. Some users report an issue with the formatting of the time when using a 12 hour format. It gives an overflow issue  printing out a long string of numbers.  It only happens in with the 12 hour format:  .format  hh:mm    and only when running on a Raspberry Pi.   See this example:  [example] https://cloud.githubusercontent.com/assets/18503539/14582992/e3a85904 03da 11e6 8940 b74ce75b6ddc.png   The full issue is described here: https://github.com/MichMich/MagicMirror/issues/181  Any help  or pointers would be welcome  Thanks in advance  ,MichMich,closed,24,2016-04-17 15:22:35,2017-10-16 12:18:23,,Bug,,,0,1
11133,moment/moment,3117,Z and ZZ tokens should return Z when UTC mode,Pull request  3098 modified the default format function to return  Z  as the offset when in UTC mode  pursuant to the ISO8601 specification.  This only occurs when using the default format. As discussed in the pull request itself  it probably makes sense to either change the behavior of the  Z  and  ZZ  tokens to work this way as well  or to make a new token that does. ,maggiepint,open,2,2016-04-17 21:50:27,0000-00-00 00:00:00,,Bug,Enhancement,Timezones,,,0,1
11132,moment/moment,3118,object is not extensible error,We ve been recently getting this error on both of these particular lines:   moment: 2.12.0 moment.js 2677 this._weekdaysParse = [];  moment.js 2694 this._weekdaysParse[i] = new RegExp regex.replace  .         i  ;  Both complain w/ the following:  Uncaught TypeError: Can t add property _weekdaysParse  object is not extensible  called like so:  moment.utc  Sat Apr 18 2015 04:10:07 GMT 0000    ddd MMM DD YYYY hh:mm:ss ZZ  .format  YYYY MM DD    What s really strange about this particular bug is that in our SPA  this error doesn t occur if we initially go to the page that this error is occurring  but if we start from a different page and then navigate to here the error always occurs.  Somehow the object is being frozen and it s not extensible from some point forward that I m not sure about.    However  if I take out the second param to moment.utc function  the ddd MMM DD YYYY hh:mm:ss ZZ  we do not get the error  just the warning of deprecation .    Anyone run into any error like this before?   ,fricke,closed,1,2016-04-18 04:18:02,2016-04-19 11:00:53,,,,0,1
11131,moment/moment,3119,Chris/zh tw improvement,@ben lin @ichernev  To replace  3075  ,hehachris,closed,4,2016-04-18 06:48:49,2016-06-14 09:01:09,Menelion,Language,,2.14.0,1,1
11130,moment/moment,3120,Confusion over moment.utz with MySQL DateTime,I ve written a small test here: https://jsfiddle.net/vrdhcuey/1/  When we request from the database we get a DATETIME from the MySQL database back  initially set to default UTC timezone but also tested with it set as Europe/Dublin as timezone  of  2016 04 22T16:00:00.000Z    that is to say the end datetime of our object is Friday 22nd April  at 4pm.  This is in reality timezoneless as all we are saying is that the event can end at 4pm on a given date  but that date could fall in GMT or BST.  In the test provided  we want to get the duration between now and that datetime. However it is always an hour off.  The only way around it is to remove the  .000Z  from the end of the datetime string.  I ve also tried to use moment.tz but have the same result  i.e. in this test leftTime4 is the correct behavior we re expecting . I would have however expected leftTime2 to work as is.  Can anyone please clear up this confusion  or am I hitting a bug here? ,tanepiper,closed,3,2016-04-18 11:37:31,2016-04-19 02:51:00,,,,0,1
11129,moment/moment,3121,dddd always returns  dow  after using  updateLocale ,Hey   There s something pretty weird with  updateLocale  and setting  week:   dow: 6   .      javascript moment.updateLocale  en     week:   dow: 6     ; moment.locale  en  ; moment  Sunday    dddd  .weekday  ; // 6 moment  Friday    dddd  .weekday  ; // 6 moment  Monday    dddd  .weekday  ; // 6     ,mdibaiee,closed,5,2016-04-18 13:37:11,2016-06-13 09:15:19,,Bug,,,0,1
11128,moment/moment,3122,Improve  diff  argument name  TS definition ,From discussion in https://github.com/moment/moment/pull/2916/files/f2e45889e5d7522d7a5e8ffd607b783be320cb3c r60102231 ,blakeembrey,closed,2,2016-04-18 18:10:35,2016-06-14 09:02:22,,,2.14.0,1,1
11127,moment/moment,3123,Cannot update momentjs:moment meteor package,When performing meteor update I get the following message:      => Errors while upgrading packages:             While checking for momentjs:moment@2.13.0: error: No compatible binary build found for this package. Contact the package author and ask them to publish it for your platform.      I am on OS X 10.11.4 ,admeister,closed,4,2016-04-18 18:51:04,2016-04-19 11:51:52,,,,0,1
11126,moment/moment,3124,Uncaught TypeError: Array.prototype.some called on null or undefined, getParsingFlags  is returning undefined  parsedDatePart  property.   [image] https://cloud.githubusercontent.com/assets/6665100/14615811/5b3fdd98 055c 11e6 8c19 7c7555da7ccc.png    [image] https://cloud.githubusercontent.com/assets/6665100/14615817/65ef3806 055c 11e6 9e0e 4993a4b98bce.png  ,gregegan,closed,21,2016-04-18 18:55:51,2016-06-21 22:26:14,,Troubleshooting,,,0,1
11125,moment/moment,3125,2 tests failed. diff:diff across DST  2246.17  diff:diff across DST  2246.19  ,    Client info      Date String   : Mon Apr 18 2016 10:25:03 GMT 0300  Jerusalem Daylight Time  Locale String : 4/18/2016  10:25:03 AM Offset        :  120 User Agent    : Mozilla/5.0  Windows NT 10.0; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/48.0.2564.116 Safari/537.36            diff:diff across DST  2246.17   month diff across DST  lower bound      javascript // Expected true // Actual   false false === true            diff:diff across DST  2246.19   year diff across DST  lower bound      javascript // Expected true // Actual   false false === true     ,igorPae,closed,1,2016-04-18 19:24:16,2016-04-19 13:32:30,,,,0,1
11124,moment/moment,3126,isValid   doesn t recognize abbreviated French month strings for format  MMM  when locale ==  fr .,moment  Jan    MMM    en   true .isValid   will return true as expected.  After setting moment.locale  fr    moment  .format   MMM    returns [ jan.    f v.   ...] instead of [ Jan     Feb   ...].  moment  Jan    MMM    fr   true .isValid   and moment  jan    MMM   true .isValid   returns false  which is expected.  But moment  jan.    MMM    fr   true .isValid   will also return false.  jan.  is the same string used by format    so why was it not accepted as valid?  There doesn t seem to be a way to validate abbreviated month for  fr  locale.  From Developer Console:  > moment.locale  en  ; > <   en  > moment Date.parse  2016 01 05   .format  MMM  ; > <   Jan  > moment  Jan    MMM    en   true .isValid  ; > <  true > moment.locale  fr  ; > <   fr  > moment Date.parse  2016 01 05   .format  MMM  ; > <     janv.    > moment  Jan    MMM    fr   true .isValid  ; > <  false > moment    janv.      MMM    fr   true .isValid  ; > <  false ,hrimhari,closed,6,2016-04-18 19:51:20,2016-11-07 05:06:36,,Troubleshooting,,,0,1
11123,moment/moment,3127,Fix russian locale regexps,Many bugs including: 1. typos in regexp between   .  and  .  2. correct parsing of  for example on February                      .  and      .  3. fix order of moths in regexp  and eliminate duplicates  Since there is no docs that describes when  monthsShortStrictRegex  will be used  fix minor bugs. Still not sure if correct  if full  ,socketpair,closed,12,2016-04-18 20:05:36,2016-06-14 09:03:01,Menelion,Language,,2.14.0,1,1
11122,moment/moment,3128,Error trying to upgrade Meteor to 1.3.2.2 with Moment package,Hi  I am trying to run  meteor update  on an existing 1.3.1 project and I get the following error:       updated to Meteor 1.3.2.2.             => Errors while upgrading packages:             While checking for momentjs:moment@2.13.0: error: No compatible binary build found for this package. Contact the package author and ask them to publish it for your platform.      ,adamgins,closed,1,2016-04-18 20:42:21,2016-04-18 20:43:19,,,,0,1
11121,moment/moment,3129,isDate  isMoment  isDuration as guard methods,A feature in Typescript  that lets you define a method as a TypeGuard  the when you use the method in context  the type system can use the guard to resolve the underlying type.      typescript const m: any; if  moment.isMoment m       // typeof m is now  Moment        ,david-driscoll,closed,2,2016-04-18 20:56:46,2016-06-14 09:03:50,,TypeScript,,2.14.0,1,1
11120,moment/moment,3130,[Meteor package] Problem updating to latest 2.13.0 version in windows,I get this when trying to update the package in a windows 10 machine with Meteor 1.3.2.2       => Errors while upgrading packages:  While checking for momentjs:moment@2.13.0: error: No compatible binary build found for this package. Contact the package author and ask them to publish it for your platform.     ,tcastelli,closed,15,2016-04-18 21:16:56,2016-04-19 19:21:05,,,,0,1
11119,moment/moment,3131,Thank you for moment.  So awesome.,The damn thing just works and works well.  Time is deep pain but moment makes it fun. ,dukedougal,closed,1,2016-04-20 04:52:17,2016-04-20 16:15:36,,,,0,1
11118,moment/moment,3132,endOf  day   fails on days that don t start at midnight,Consider:      javascript moment  2016 10 16  .endOf  day  .format  YYYY MM DD HH:mm:ss        In most time zones  this will return   2016 10 16 23:59:59  .   However  in Brazil  this will return   2016 10 17 00:59:59  .  This is incorrect  because only the hour from 00:00 to 00:59 on 2016 10 16 is missing.  The end of 2016 10 16 is still 23:59:59 on the same date.  This is also reproducible with moment timezone:      javascript moment.tz  2016 10 16   America/Sao_Paulo  .endOf  day  .format  YYYY MM DD HH:mm:ss        The problem is in the  endOf  method.  To compute the end of the day  we take the _start_ of the day  add one day  then subtract one millisecond.  That logic is flawed when the day doesn t start at midnight.  Instead of adding one day  we need to add the exact duration length of the particular day. ,mj1856,open,15,2016-04-20 16:25:11,0000-00-00 00:00:00,,Bug,DST,,,0,1
11117,moment/moment,3133,Drop non LTS node releases from testing,Per: https://github.com/nodejs/LTS ,avindra,closed,2,2016-04-21 00:45:20,2016-06-14 09:05:59,,,,1,1
11116,moment/moment,3134,Implement timezone interface,This is the initial pass at implementing https://github.com/moment/moment rfcs/pull/1  This introduces an interface for a TimeZone in moment core. Moment would provide 2 classes that implement the TimeZone interface   LocalTimeZone  and  FixedOffsetTimeZone . Libraries like  moment timezone  could provide their own  TZDBTimeZone  class that implements the TimeZone interface.  Each moment created now has a mandatory time zone. Calls to  moment    would have a  LocalTimeZone  instance  calls to  moment.utc    would have a  FixedOffsetTimeZone  instance  and calls to  moment.tz    would have a  TZDBTimeZone  instance.  To support this  we will no longer be using the local timezone  Date.prototype  getters and setters. All calls to the underlying date object use the  setUTC   and  getUTC   methods  and parsing is done with  Date.UTC   . We will continue to store the  _offset  property on a moment to determine what the offset is.     Public API Additions   moment.withTimeZone timeZone    This is the public api for moment timezone and other libraries to construct a moment in a timezone. It returns a function that can be used just like  moment    or  moment.utc   .      js var create = moment.withTimeZone chicagoTimeZone ; var nowInChicago = create  ; var decemberInChicago = create  2016 d cembre    YYYY MMMM    fr  ;         Private API Removals   moment.updateOffset  hook.  This was build as an undocumented api for use by moment timezone. We are moving the code for manually adjusting the offset into moment  so there is no need for an external library to handle this logic.   moment _useUTC   This is used by the parser to determine whether to use  new Date y  m  d...   or  Date.UTC y  m  d   when constructing the  Date . We are always using  Date.UTC y  m  d    so this is no longer needed.   moment _isUTC   This was used to switch between calls to  Date getMonth  and  Date getUTCMonth   but we are always using  Date getUTCMonth   so this is unneeded.   moment.momentProperties   This added for moment timezone to copy the  _z  property when cloning a moment  but now that timezones are a core concept for moment  a moment timezone moment will behave the same as all other moments.     Public API Deprecations   moment isLocal    moment isUtc    moment isUtcOffset   These methods don t really match the semantics of the new timezone interface. They were added because we had internal flags that toggled between different modes. A better interface would be something like  moment timezone   ===  local  .     Open Questions      This adds  moment.withTimeZone  as partial application for the timezone  should we expand that to format  locale  and strict parsing?      js var create = moment.withDefaults     zone: chicagoTimeZone    locale:  fr     format:  YYYY MMMM     strict: true   ; var novemberInChicago = create  2016 novembre  ; var decemberInChicago = create  2016 d cembre  ;          Should we add a getter/setter for timezones? Should it publicly reference timezones with strings instead of objects?      js moment  .timezone  local  ; moment  .timezone  UTC 1  ; moment  .timezone  America/Los_Angeles  ; moment  .timezone  ; //  local  moment.withTimeZone  America/Los_Angeles  .timezone  ; //  America/Los_Angeles  moment.utc  .timezone  ; //  UTC       To support this  we could provide an api to register callbacks to be used to resolve the timezone string.      js moment.defineTimezone function  input      if  input ===  local         return new LocalTimeZone  ;       ; moment.defineTimezone function  input      if  matchesFixedOffsetFormat input         return new FixedOffsetTimeZone input ;       ; // moment timezone moment.defineTimezone function  input      if  zones[input]        return zones[input];       ;      The timezone resolver would just loop through all the callbacks  returning the first timezone that matched. ,timrwood,closed,3,2016-04-22 14:13:22,2017-03-05 03:56:47,mj1856,New Feature,Timezones,,3.0,1,1
11115,moment/moment,3135,Adding updateLocale and defineLocale to typescript definition.,As the title says  adding definitions for the pretty new functions defineLocale and updateLocale for the moment interface. ,tomvlk,closed,3,2016-04-22 14:36:56,2016-06-14 09:07:14,,TypeScript,,2.14.0,1,1
11114,moment/moment,3136,.format displays improper data when given a negative duration less than its maximum.,Sorry if the title is vague. In specific when calling moment.duration any argument given like this  moment.duration argument1  argument2 .format argument3   Where argument 1 is a negative duration of lesser length than arguemnt 3 knows how to format such as  moment.duration  0.77   h  .format  h[h] m[m] s[s]  ;  returns the positive duration and loses the negative sign. I have confirmed that the same happens for minutes and second like this as well  moment.duration  0.0077   h  .format  m[m] s[s]  ;   My boss suggested I report this despite the fact that we may be on an outdated release.  If this has already been fixed in a newer version I d be happy to know that and will happily look at upgrading when we next have time between releases. ,abascueomni,closed,2,2016-04-22 19:46:43,2016-04-25 14:02:12,,,,0,1
11113,moment/moment,3137,Using  updateLocale  with  relativeTime  doesn t merge default local.,For example  I just want to adjust a single  relativeTime  handler  like so:       js moment.updateLocale  en       relativeTime :       dd:  only  d days        ;      But this gives a  Cannot read property  replace  of undefined  exception.   My guess is that this isn t overriding just the  dd  object but instead it overrides the entire  relativeTime  object.  You can get around this by providing all of the default locales  like so:       js moment.updateLocale  en       relativeTime :       future:  in  s       past:     s ago       s:       a few seconds       m:       a minute       mm:       d minutes       h:       an hour       hh:       d hours       d:       a day       dd:      only  d days       M:       a month       MM:       d months       y:       a year       yy:       d years        ;      I can see from  2774 that there was an intention to use the default locale values and just update what you provide but I m not sure if it made it as deep as the individual objects of  relativeTime .   Any feedback on this would be great. I d be happy to write up a PR if this is of interest to anybody as well.  Thanks   Josh ,joshuapinter,closed,7,2016-04-24 00:49:02,2016-06-20 08:24:57,,Bug,,,0,1
11112,moment/moment,3138,Do not load moment twice,This should fix the loading of moment if it was previously loaded.  I am not sure how to test this with the original jsbin  http://jsbin.com/xemidereza/edit?html console  but this should just work.  Fixes  2736  ,TimvdLippe,closed,2,2016-04-24 11:37:33,2016-04-30 06:33:34,,,,1,1
11111,moment/moment,3139,Very specific bug when formatting a dutch date,Take a look at [this codepen] http://codepen.io/Zjaaspoer/pen/EKpBvW   open the console to see the result   I expect to see  31 mrt   but I m seeing  31 mrt.   When I input an other date I do see the expected result  tried only a few other dates   Very specific  :  ,Zjaaspoer,closed,5,2016-04-24 17:16:43,2016-04-24 20:56:37,,Bug,,,0,1
11110,moment/moment,3140,support angular,this creates out of the box support as an angular module ,deltreey,closed,8,2016-04-24 20:47:51,2016-04-26 16:53:45,,,,1,1
11109,moment/moment,3141,Not understanding how this is converting,https://i.imgur.com/uATTJYc.png  I have my code above in a picture so that you can see the values of the moment object.  I am giving it one day and it is converting it to a day earlier when I do the output.  I honestly don t know what is going on so I don t even know where to start or what to ask. ,seraphx2,closed,2,2016-04-25 05:13:57,2016-05-02 20:29:20,,,,0,1
11108,moment/moment,3142,startOf  particular date  ????, moment.utc  .startOf  day  .toDate    gives today s date with start and end time. Likewise i wanna get particular date with start and end time  say for  Sun Apr 24 2016 15:18:54 GMT 0530  IST    is this possible??? pls reply me as soon as possible. ,nasr18,closed,2,2016-04-25 10:09:35,2016-04-25 19:25:21,,,,0,1
11107,moment/moment,3143,How to show seconds in dropDownList, [image] https://cloud.githubusercontent.com/assets/18155748/14781077/e790e998 0b12 11e6 8dbc c2a43482f3cf.png  ,Maplesog,closed,2,2016-04-25 10:24:30,2016-04-25 11:55:07,,,,0,1
11106,moment/moment,3144,Time zone incorrect for Asia/Baku,Hello  I have noticed that the time sone map for moment regarding Asia/Baku is incorrect.  According to Google the time zone for Asia/Baku is GMT 4  but using moment code below gives GMT 5 which is incorrect. Am I doing something wrong? Where do you get your time zone map from?   moment  .tz  Asia/Baku  ._offset /60   I have not tested with all time zones  will do a test later today and attach my findings.  Kind regards  Darrel K ,Darrelk,closed,5,2016-04-25 12:48:29,2016-04-25 13:42:16,,,,0,1
11105,moment/moment,3145,toISOString ignores UTC offset, moment toISOString    ignores any UTC offset applied to the moment. This differs from the behaviour of  moment format   .      javascript moment  .utcOffset 0 .format   >  2016 04 25T19:10:01Z  moment  .utcOffset  420 .format   >  2016 04 25T12:10:03 07:00  moment  .utcOffset 0 .toISOString   >  2016 04 25T19:10:13.495Z  moment  .utcOffset  420 .toISOString   >  2016 04 25T19:10:16.639Z       [JSFiddle] https://jsfiddle.net/89jctagx/  ,joebandenburg,closed,1,2016-04-25 19:22:05,2016-04-25 19:57:58,,,,0,1
11104,moment/moment,3146,Fix locale set,I have a locale config worked fine in v2.10.6. But when I updated moment to v2.13  I got a issue on it.  There are my code snippets:      moment.locale  zh         ...     week:         dow: 1 // Monday is the first day of the week.          ...   ; moment.locale  zh        It would got an NaN when I called  moment  .format  wo     And I found moment lost some default config when get a Locale config. ,Brooooooklyn,closed,0,2016-04-26 07:44:05,2016-04-26 08:00:05,,,,1,1
11103,moment/moment,3147,Call calendar format function with moment context,What: the code:      moment  .days  1000 .calendar null       sameElse: function            return  [hoy a la      this.hours    == 1  ?  s  :        ] LT ;        ;      Where: on http://momentjs.com/docs/ /displaying/calendar time/ in the Chrome console. What I got: It raises  Uncaught TypeError: this.hours is not a function   I expected use callback like in the example on http://momentjs.com/docs/ /customization/calendar/ .  This PR makes the compatible call with https://github.com/moment/moment/blob/develop/src/lib/locale/calendar.js L14 ,generalov,closed,2,2016-04-26 14:49:59,2016-06-14 09:08:01,,,2.14.0,1,1
11102,moment/moment,3148,IE11 validating invalid dates.,moment new Date  45/45/4545   .format  MM/DD/YYYY   in chrome or firefox throws  Invalid Date   while IE11 parses this as a valid date. It turns it into 10/15/4548. ,harish2rock,closed,2,2016-04-26 19:07:24,2016-04-26 19:11:02,,,,0,1
11101,moment/moment,3149,Moment API isValid seems only support format  L  for local is  en ,Moment API isValid seems only support format  L  for local is  en :  locale set to  en :      moment new Date   .locale  en  .format  L                // 04/27/2016  moment  04/27/2016    L   true .isValid                  //true      local set to  zh cn :      moment new Date   .locale  zh cn  .format  L             // 2016 04 27  moment  2016 04 27    L   true .isValid                  //false  why here is false?      As i don t want to hard code  MM DD YYYY  for  zh cn  here  is there any other good way?  I have also put this question into SO:  http://stackoverflow.com/questions/36885943/why moment isvalid api does not support format l for non en local  Does it really not support this ? or it could be support in the later version? ,ramseyfeng,closed,2,2016-04-27 09:41:37,2016-04-27 21:08:50,,,,0,1
11100,moment/moment,3150,What is the .format   pattern standard?,Whilst building a react native module  I am getting date formats  patterns  from ios and android. ios uses the UTS 35  http://www.unicode.org/reports/tr35/tr35 19.html Date_Format_Patterns   and android is in ISO 8601.   I want to take these two formats and convert them to the format used by momentjs. However  the docs don t state what standard they follow  if they do? . It looks like ISO  but a confirmation is needed.  As a side topic  anyone know of an existing format conversion? ,ashleydw,closed,2,2016-04-27 13:52:27,2016-05-03 18:36:27,,,,0,1
11099,moment/moment,3151,Yesterday s date labeled as tomorrow,When using the calendar method:      javascript     var date = moment  .calendar value            sameDay:  [Today]           nextDay:  [Tomorrow]           nextWeek:  dddd           lastDay:  [Yesterday]           lastWeek:  [Last] dddd           sameElse:  DD/MM/YYYY        ; // here u modify data        Any date that I insert that is before the current date gets labeled as  Tomorrow ;  So if I put in a value of: 2016 04 27 14:22:26   my current time when writing this    it will come out saying  Today...  which is good  but once I put in: 2016 04 26 14:22:26   the day before today   it comes out saying  Tomorrow... .   Any idea as of what could be causing this? ,ayyobro,closed,2,2016-04-27 15:05:48,2016-04-30 01:50:49,,,,0,1
11098,moment/moment,3152,Fixed short thai months,I found that momentjs is using invalid short month abbreviation for thai language. Reference from the following source :    [http://www.thai language.com/ref/months] http://www.thai language.com/ref/months    [https://th.wikipedia.org/wiki/] https://th.wikipedia.org/wiki/ E0 B9 81 E0 B8 A1 E0 B9 88 E0 B9 81 E0 B8 9A E0 B8 9A: E0 B8 8A E0 B8 B7 E0 B9 88 E0 B8 AD E0 B8 A2 E0 B9 88 E0 B8 AD E0 B9 80 E0 B8 94 E0 B8 B7 E0 B8 AD E0 B8 99   Please review my pull request :  ,aijo,closed,6,2016-04-28 09:21:14,2016-06-14 09:09:57,Menelion,Bug-fix,Language,,2.14.0,1,1
11097,moment/moment,3153,Update ar.js,the arabian monthes are dublicated which make the ui of the bootstrap datepicker messy ,amera7md,closed,3,2016-04-28 10:28:19,2016-05-25 22:11:22,Menelion,Language,,,1,1
11096,moment/moment,3154,Strict parsing,Hi   I would like to enforce string parsing for date. This is what i tried  it is giving wrong results. Even though passed date is wrong  it is saying it is valid. It is assuming missing information. I wouldn t want to have that behavior. pls advice how i would go about it?   > var d1 = moment  20161a    YYYYMMDD  ; > undefined > d.isValid  ; > true > d.toString  ; >  Tue Nov 01 2016 00:00:00 GMT 0530  ,raja-i4,closed,4,2016-04-28 12:34:10,2016-04-28 16:14:47,,,,0,1
11095,moment/moment,3155,Fixed Latvian locale    After 211 years ,,Knagis,closed,5,2016-04-28 13:06:01,2016-06-14 09:13:58,Menelion,Language,,2.14.0,1,1
11094,moment/moment,3156,Clone function over invalid date returns unequal object,A clone of an invalid moment results in non equivalent object.   Sample code [in fiddle] http://jsfiddle.net/42qq23so/2/ :      js var something = moment  0000 00 00   // incorrect date console.log _.isEqual something  something.clone           Expected result: true   Actual result: false  It matters to us  because we are using it inside a datastructure that is supposed to be immutable.  ,jurcovicova,closed,4,2016-04-28 13:30:31,2016-05-02 01:24:17,,,,0,1
11093,moment/moment,3157,Add Dominican Republic Spanish  es do ,It s basically the same as the es locale except for 12 hour clock rather than 24 hour clock. ,Pephers,closed,3,2016-04-28 19:09:30,2016-06-14 09:17:10,Menelion,Language,,2.14.0,1,1
11092,moment/moment,3158,Setting a default timezone breaks Unix timestamp parsing.,Found with:   moment.js: 2.13.0   moment timezone: 0.5.3  Steps to reproduce:      javascript // 1. Try parsing a Unix timestamp console.log moment  1461906597    X  .isValid   ; // true // 2. Set the default timezone moment.tz.setDefault  America/Chicago  ; // 3. Try parsing the same Unix timestamp console.log moment  1461906597    X  .isValid   ; // false      The expected result for step 3 is  true .  See this in action: [Plunker] https://plnkr.co/edit/PfucT48BJqQm78LcUxDv  ,westy92,closed,2,2016-04-29 05:26:10,2016-04-30 01:38:33,,,,0,1
11091,moment/moment,3159,Version/Author comment on top of moment with locales.js missing,In the most recent version  the moment with locales.js file does not have a version/author comment. This makes it hard to see which version of moment.js is included in a project. Could you please add the same header comment as for moment.js? ,XitasoChris,closed,5,2016-04-29 11:36:31,2016-06-12 08:54:49,,Bug,Build/Release,Up-For-Grabs,,,0,1
11090,moment/moment,3160,deprecate isDSTShifted,Not sure if the group will agree on this one  but I think we should just deprecate isDSTShifted.  It doesn t work for moments that have been mutated   2942   it doesn t work with moments using moment timezone  moment/moment timezone 131   because it relies on browser behavior  it can t be  unit tested  and it s confusing: http://stackoverflow.com/questions/36939900/moment timezone utc offset difference  IIRC @mj1856  and I have both looked at this function and tried to come up with a way to fix it. I think we both concluded that due to issues with overflow  it wasn t really feasible. Or maybe Matt looked at something else related to DST   I m not sure.  It s possible there s a way to fix it  I m open to suggestion. But if nobody is going to fix it  and it doesn t work  it doesn t make sense to keep it.  I know I added a link to a webpage that doesn t exist in that deprecation warning. If we decide to merge this I ll update docs. ,maggiepint,closed,5,2016-04-30 04:16:20,2016-06-14 09:22:48,,Deprecate,,2.14.0,1,1
11089,moment/moment,3161,Library uses code from stackoverflow.com,This library uses code snippets from StackOverflow.com.  As per StackOverflow  all code shared on the site comes under CreativeCommons license. Does this means that this library also has to distribute code under CreativeCommons license?  Source: http://blog.stackoverflow.com/2008/05/now licensed under creative commons/ http://creativecommons.org/licenses/by sa/3.0/ ,Karankang007,closed,4,2016-05-04 21:14:42,2016-05-07 00:12:54,,,,0,1
11088,moment/moment,3162,show countdown,I need to show a countdown in my project like  30 minutes remaining    29 minutes remaining   and so on for everty 1 minute. How do i achieve this via momentjs?? ,nasr18,closed,4,2016-05-05 06:36:44,2016-05-06 04:23:55,,,,0,1
11087,moment/moment,3163,add sorting of dates,,fehergeri13,closed,6,2016-05-05 13:00:36,2016-05-10 05:34:31,,,,0,1
11086,moment/moment,3164,Moment Not Defined When Using With Angular,I am trying to use Moment in my MEAN stack app  actually need it to get the [Angular Bootstrap Calendar] https://github.com/mattlewis92/angular bootstrap calendar installation  to work   My angular app declaration is as follows:    var app = angular.module  MyApp  [ ngRoute    ngResource   colorpicker.module    mwl.calendar ] ;   Below I define a controller that will be responsible for doing the calendar related things:      app.controller  Calendar   function moment        var vm = this;      vm.calendarView =  month ;      console.log typeof moment  ;      vm.viewDate = moment.startOf  month  .toDate  ;     vm.isCellOpen = true;      ;      When I go to the route corresponding to the Calendar  I get the following error:  > TypeError: Cannot read property  startOf  of undefined  Is there something simple that I am missing? Or is there a know issue when trying to use Moment with AngularJS?  ,artforlife,closed,3,2016-05-06 02:13:19,2016-05-06 03:16:22,,,,0,1
11085,moment/moment,3165,Problem typescript   momentjs   redux dev tools,    javascript function valid__isValid m            if  m._isValid == null                var flags = getParsingFlags m ;             var parsedParts = some.call flags.parsedDateParts  function  i                    return i  = null;               ;             m._isValid =                  m._d  = null                       isNaN m._d.getTime                  ...      Without bold text  i wrote it   i had error when open chrome redux dev tools window  ERROR: cannot call getTime of undefined. I think error happened when redux dev tools tries to call moment toJSON method. ,dimangulov,closed,12,2016-05-06 13:10:02,2016-05-14 12:44:28,,Troubleshooting,TypeScript,,,0,1
11084,moment/moment,3166,Issue converting date to string in IOS,I have this code that works ok in all the browsers and andriod devices but its failing on IOS devices returning invalidad date message  > moment    year    month    day   .format  MM/DD/YYYY  ;  is there any fix for this or workaround that i can do to make this work on IOS. Thanks ,ne0guille,closed,1,2016-05-06 17:36:51,2016-05-06 18:50:46,,,,0,1
11083,moment/moment,3167,Inconsistent result when parsing YYYY MM string,When you parse a string only with year and month information  YYYY MM   it s considering that the string is UTC time. But when the string has year  month and day information it s considering local time  as expected .   [image] https://cloud.githubusercontent.com/assets/159076/15083953/b84f7752 13a6 11e6 92c4 b35a75905b0a.png   EDIT: the same happens with year only strings  YYYY .    [image] https://cloud.githubusercontent.com/assets/159076/15083975/e3636d36 13a6 11e6 9840 e53f34e0a89c.png    And it doesn t happen if I provide the string format parameter:    [image] https://cloud.githubusercontent.com/assets/159076/15084054/65c970ae 13a7 11e6 8b7c c991f30b846a.png  ,douglascamata,closed,1,2016-05-06 19:22:30,2016-05-06 19:55:21,,,,0,1
11082,moment/moment,3168,Date parsing is slow with many strict dates,This code:      js console.time  parse moment  ; let result = moment ast.value  dateTimeFormats   en   true ; console.timeEnd  parse moment  ;      Is reporting times of 20 50ms with 618 date formats  or 0.10ms with 1 date format. Is there any way this can be sped up?  I can use fewer date formats without  strict  enabled  but it s produced a few weird results already  so I d rather not.  If you re wondering  here s the full list of date formats I want to use:      function       // moment.ISO_8601 X YYYY/MM/DD  a t HH:mm:ss.SSSZ YYYY/MM/DD  a t HH:mm:ss.SSS Z YYYY/MM/DD  a t HH:mm:ss.SSS YYYY/MM/DD  a t HH:mm:ssZ YYYY/MM/DD  a t HH:mm:ss Z YYYY/MM/DD  a t HH:mm:ss YYYY/MM/DD  a t HH:mmZ YYYY/MM/DD  a t HH:mm Z YYYY/MM/DD  a t HH:mm YYYY/MM/DD  a t h:mm:ss a Z YYYY/MM/DD  a t h:mm:ss a YYYY/MM/DD  a t h:mm a Z YYYY/MM/DD  a t h:mm a YYYY/MM/DD  a t h:mma Z YYYY/MM/DD  a t h:mma YYYY/MM/DD  a t h a Z YYYY/MM/DD  a t h a YYYY/MM/DD  a t ha Z YYYY/MM/DD  a t ha YYYY/MM/DD @ HH:mm:ss.SSSZ YYYY/MM/DD @ HH:mm:ss.SSS Z YYYY/MM/DD @ HH:mm:ss.SSS YYYY/MM/DD @ HH:mm:ssZ YYYY/MM/DD @ HH:mm:ss Z YYYY/MM/DD @ HH:mm:ss YYYY/MM/DD @ HH:mmZ YYYY/MM/DD @ HH:mm Z YYYY/MM/DD @ HH:mm YYYY/MM/DD @ h:mm:ss a Z YYYY/MM/DD @ h:mm:ss a YYYY/MM/DD @ h:mm a Z YYYY/MM/DD @ h:mm a YYYY/MM/DD @ h:mma Z YYYY/MM/DD @ h:mma YYYY/MM/DD @ h a Z YYYY/MM/DD @ h a YYYY/MM/DD @ ha Z YYYY/MM/DD @ ha YYYY/MM/DD  HH:mm:ss.SSSZ YYYY/MM/DD  HH:mm:ss.SSS Z YYYY/MM/DD  HH:mm:ss.SSS YYYY/MM/DD  HH:mm:ssZ YYYY/MM/DD  HH:mm:ss Z YYYY/MM/DD  HH:mm:ss YYYY/MM/DD  HH:mmZ YYYY/MM/DD  HH:mm Z YYYY/MM/DD  HH:mm YYYY/MM/DD  h:mm:ss a Z YYYY/MM/DD  h:mm:ss a YYYY/MM/DD  h:mm a Z YYYY/MM/DD  h:mm a YYYY/MM/DD  h:mma Z YYYY/MM/DD  h:mma YYYY/MM/DD  h a Z YYYY/MM/DD  h a YYYY/MM/DD  ha Z YYYY/MM/DD  ha YYYY/MM/DD HH:mm:ss.SSSZ YYYY/MM/DD HH:mm:ss.SSS Z YYYY/MM/DD HH:mm:ss.SSS YYYY/MM/DD HH:mm:ssZ YYYY/MM/DD HH:mm:ss Z YYYY/MM/DD HH:mm:ss YYYY/MM/DD HH:mmZ YYYY/MM/DD HH:mm Z YYYY/MM/DD HH:mm YYYY/MM/DD h:mm:ss a Z YYYY/MM/DD h:mm:ss a YYYY/MM/DD h:mm a Z YYYY/MM/DD h:mm a YYYY/MM/DD h:mma Z YYYY/MM/DD h:mma YYYY/MM/DD h a Z YYYY/MM/DD h a YYYY/MM/DD ha Z YYYY/MM/DD ha YYYY/MM/DD YYYY MM DD  a t HH:mm:ss.SSSZ YYYY MM DD  a t HH:mm:ss.SSS Z YYYY MM DD  a t HH:mm:ss.SSS YYYY MM DD  a t HH:mm:ssZ YYYY MM DD  a t HH:mm:ss Z YYYY MM DD  a t HH:mm:ss YYYY MM DD  a t HH:mmZ YYYY MM DD  a t HH:mm Z YYYY MM DD  a t HH:mm YYYY MM DD  a t h:mm:ss a Z YYYY MM DD  a t h:mm:ss a YYYY MM DD  a t h:mm a Z YYYY MM DD  a t h:mm a YYYY MM DD  a t h:mma Z YYYY MM DD  a t h:mma YYYY MM DD  a t h a Z YYYY MM DD  a t h a YYYY MM DD  a t ha Z YYYY MM DD  a t ha YYYY MM DD @ HH:mm:ss.SSSZ YYYY MM DD @ HH:mm:ss.SSS Z YYYY MM DD @ HH:mm:ss.SSS YYYY MM DD @ HH:mm:ssZ YYYY MM DD @ HH:mm:ss Z YYYY MM DD @ HH:mm:ss YYYY MM DD @ HH:mmZ YYYY MM DD @ HH:mm Z YYYY MM DD @ HH:mm YYYY MM DD @ h:mm:ss a Z YYYY MM DD @ h:mm:ss a YYYY MM DD @ h:mm a Z YYYY MM DD @ h:mm a YYYY MM DD @ h:mma Z YYYY MM DD @ h:mma YYYY MM DD @ h a Z YYYY MM DD @ h a YYYY MM DD @ ha Z YYYY MM DD @ ha YYYY MM DD  HH:mm:ss.SSSZ YYYY MM DD  HH:mm:ss.SSS Z YYYY MM DD  HH:mm:ss.SSS YYYY MM DD  HH:mm:ssZ YYYY MM DD  HH:mm:ss Z YYYY MM DD  HH:mm:ss YYYY MM DD  HH:mmZ YYYY MM DD  HH:mm Z YYYY MM DD  HH:mm YYYY MM DD  h:mm:ss a Z YYYY MM DD  h:mm:ss a YYYY MM DD  h:mm a Z YYYY MM DD  h:mm a YYYY MM DD  h:mma Z YYYY MM DD  h:mma YYYY MM DD  h a Z YYYY MM DD  h a YYYY MM DD  ha Z YYYY MM DD  ha YYYY MM DD HH:mm:ss.SSSZ YYYY MM DD HH:mm:ss.SSS Z YYYY MM DD HH:mm:ss.SSS YYYY MM DD HH:mm:ssZ YYYY MM DD HH:mm:ss Z YYYY MM DD HH:mm:ss YYYY MM DD HH:mmZ YYYY MM DD HH:mm Z YYYY MM DD HH:mm YYYY MM DD h:mm:ss a Z YYYY MM DD h:mm:ss a YYYY MM DD h:mm a Z YYYY MM DD h:mm a YYYY MM DD h:mma Z YYYY MM DD h:mma YYYY MM DD h a Z YYYY MM DD h a YYYY MM DD ha Z YYYY MM DD ha YYYY MM DD D MMM YYYY  a t HH:mm:ss.SSSZ D MMM YYYY  a t HH:mm:ss.SSS Z D MMM YYYY  a t HH:mm:ss.SSS D MMM YYYY  a t HH:mm:ssZ D MMM YYYY  a t HH:mm:ss Z D MMM YYYY  a t HH:mm:ss D MMM YYYY  a t HH:mmZ D MMM YYYY  a t HH:mm Z D MMM YYYY  a t HH:mm D MMM YYYY  a t h:mm:ss a Z D MMM YYYY  a t h:mm:ss a D MMM YYYY  a t h:mm a Z D MMM YYYY  a t h:mm a D MMM YYYY  a t h:mma Z D MMM YYYY  a t h:mma D MMM YYYY  a t h a Z D MMM YYYY  a t h a D MMM YYYY  a t ha Z D MMM YYYY  a t ha D MMM YYYY @ HH:mm:ss.SSSZ D MMM YYYY @ HH:mm:ss.SSS Z D MMM YYYY @ HH:mm:ss.SSS D MMM YYYY @ HH:mm:ssZ D MMM YYYY @ HH:mm:ss Z D MMM YYYY @ HH:mm:ss D MMM YYYY @ HH:mmZ D MMM YYYY @ HH:mm Z D MMM YYYY @ HH:mm D MMM YYYY @ h:mm:ss a Z D MMM YYYY @ h:mm:ss a D MMM YYYY @ h:mm a Z D MMM YYYY @ h:mm a D MMM YYYY @ h:mma Z D MMM YYYY @ h:mma D MMM YYYY @ h a Z D MMM YYYY @ h a D MMM YYYY @ ha Z D MMM YYYY @ ha D MMM YYYY  HH:mm:ss.SSSZ D MMM YYYY  HH:mm:ss.SSS Z D MMM YYYY  HH:mm:ss.SSS D MMM YYYY  HH:mm:ssZ D MMM YYYY  HH:mm:ss Z D MMM YYYY  HH:mm:ss D MMM YYYY  HH:mmZ D MMM YYYY  HH:mm Z D MMM YYYY  HH:mm D MMM YYYY  h:mm:ss a Z D MMM YYYY  h:mm:ss a D MMM YYYY  h:mm a Z D MMM YYYY  h:mm a D MMM YYYY  h:mma Z D MMM YYYY  h:mma D MMM YYYY  h a Z D MMM YYYY  h a D MMM YYYY  ha Z D MMM YYYY  ha D MMM YYYY HH:mm:ss.SSSZ D MMM YYYY HH:mm:ss.SSS Z D MMM YYYY HH:mm:ss.SSS D MMM YYYY HH:mm:ssZ D MMM YYYY HH:mm:ss Z D MMM YYYY HH:mm:ss D MMM YYYY HH:mmZ D MMM YYYY HH:mm Z D MMM YYYY HH:mm D MMM YYYY h:mm:ss a Z D MMM YYYY h:mm:ss a D MMM YYYY h:mm a Z D MMM YYYY h:mm a D MMM YYYY h:mma Z D MMM YYYY h:mma D MMM YYYY h a Z D MMM YYYY h a D MMM YYYY ha Z D MMM YYYY ha D MMM YYYY D/MMM/YYYY  a t HH:mm:ss.SSSZ D/MMM/YYYY  a t HH:mm:ss.SSS Z D/MMM/YYYY  a t HH:mm:ss.SSS D/MMM/YYYY  a t HH:mm:ssZ D/MMM/YYYY  a t HH:mm:ss Z D/MMM/YYYY  a t HH:mm:ss D/MMM/YYYY  a t HH:mmZ D/MMM/YYYY  a t HH:mm Z D/MMM/YYYY  a t HH:mm D/MMM/YYYY  a t h:mm:ss a Z D/MMM/YYYY  a t h:mm:ss a D/MMM/YYYY  a t h:mm a Z D/MMM/YYYY  a t h:mm a D/MMM/YYYY  a t h:mma Z D/MMM/YYYY  a t h:mma D/MMM/YYYY  a t h a Z D/MMM/YYYY  a t h a D/MMM/YYYY  a t ha Z D/MMM/YYYY  a t ha D/MMM/YYYY @ HH:mm:ss.SSSZ D/MMM/YYYY @ HH:mm:ss.SSS Z D/MMM/YYYY @ HH:mm:ss.SSS D/MMM/YYYY @ HH:mm:ssZ D/MMM/YYYY @ HH:mm:ss Z D/MMM/YYYY @ HH:mm:ss D/MMM/YYYY @ HH:mmZ D/MMM/YYYY @ HH:mm Z D/MMM/YYYY @ HH:mm D/MMM/YYYY @ h:mm:ss a Z D/MMM/YYYY @ h:mm:ss a D/MMM/YYYY @ h:mm a Z D/MMM/YYYY @ h:mm a D/MMM/YYYY @ h:mma Z D/MMM/YYYY @ h:mma D/MMM/YYYY @ h a Z D/MMM/YYYY @ h a D/MMM/YYYY @ ha Z D/MMM/YYYY @ ha D/MMM/YYYY  HH:mm:ss.SSSZ D/MMM/YYYY  HH:mm:ss.SSS Z D/MMM/YYYY  HH:mm:ss.SSS D/MMM/YYYY  HH:mm:ssZ D/MMM/YYYY  HH:mm:ss Z D/MMM/YYYY  HH:mm:ss D/MMM/YYYY  HH:mmZ D/MMM/YYYY  HH:mm Z D/MMM/YYYY  HH:mm D/MMM/YYYY  h:mm:ss a Z D/MMM/YYYY  h:mm:ss a D/MMM/YYYY  h:mm a Z D/MMM/YYYY  h:mm a D/MMM/YYYY  h:mma Z D/MMM/YYYY  h:mma D/MMM/YYYY  h a Z D/MMM/YYYY  h a D/MMM/YYYY  ha Z D/MMM/YYYY  ha D/MMM/YYYY HH:mm:ss.SSSZ D/MMM/YYYY HH:mm:ss.SSS Z D/MMM/YYYY HH:mm:ss.SSS D/MMM/YYYY HH:mm:ssZ D/MMM/YYYY HH:mm:ss Z D/MMM/YYYY HH:mm:ss D/MMM/YYYY HH:mmZ D/MMM/YYYY HH:mm Z D/MMM/YYYY HH:mm D/MMM/YYYY h:mm:ss a Z D/MMM/YYYY h:mm:ss a D/MMM/YYYY h:mm a Z D/MMM/YYYY h:mm a D/MMM/YYYY h:mma Z D/MMM/YYYY h:mma D/MMM/YYYY h a Z D/MMM/YYYY h a D/MMM/YYYY ha Z D/MMM/YYYY ha D/MMM/YYYY MMMM D  YYYY  a t HH:mm:ss.SSSZ MMMM D  YYYY  a t HH:mm:ss.SSS Z MMMM D  YYYY  a t HH:mm:ss.SSS MMMM D  YYYY  a t HH:mm:ssZ MMMM D  YYYY  a t HH:mm:ss Z MMMM D  YYYY  a t HH:mm:ss MMMM D  YYYY  a t HH:mmZ MMMM D  YYYY  a t HH:mm Z MMMM D  YYYY  a t HH:mm MMMM D  YYYY  a t h:mm:ss a Z MMMM D  YYYY  a t h:mm:ss a MMMM D  YYYY  a t h:mm a Z MMMM D  YYYY  a t h:mm a MMMM D  YYYY  a t h:mma Z MMMM D  YYYY  a t h:mma MMMM D  YYYY  a t h a Z MMMM D  YYYY  a t h a MMMM D  YYYY  a t ha Z MMMM D  YYYY  a t ha MMMM D  YYYY @ HH:mm:ss.SSSZ MMMM D  YYYY @ HH:mm:ss.SSS Z MMMM D  YYYY @ HH:mm:ss.SSS MMMM D  YYYY @ HH:mm:ssZ MMMM D  YYYY @ HH:mm:ss Z MMMM D  YYYY @ HH:mm:ss MMMM D  YYYY @ HH:mmZ MMMM D  YYYY @ HH:mm Z MMMM D  YYYY @ HH:mm MMMM D  YYYY @ h:mm:ss a Z MMMM D  YYYY @ h:mm:ss a MMMM D  YYYY @ h:mm a Z MMMM D  YYYY @ h:mm a MMMM D  YYYY @ h:mma Z MMMM D  YYYY @ h:mma MMMM D  YYYY @ h a Z MMMM D  YYYY @ h a MMMM D  YYYY @ ha Z MMMM D  YYYY @ ha MMMM D  YYYY  HH:mm:ss.SSSZ MMMM D  YYYY  HH:mm:ss.SSS Z MMMM D  YYYY  HH:mm:ss.SSS MMMM D  YYYY  HH:mm:ssZ MMMM D  YYYY  HH:mm:ss Z MMMM D  YYYY  HH:mm:ss MMMM D  YYYY  HH:mmZ MMMM D  YYYY  HH:mm Z MMMM D  YYYY  HH:mm MMMM D  YYYY  h:mm:ss a Z MMMM D  YYYY  h:mm:ss a MMMM D  YYYY  h:mm a Z MMMM D  YYYY  h:mm a MMMM D  YYYY  h:mma Z MMMM D  YYYY  h:mma MMMM D  YYYY  h a Z MMMM D  YYYY  h a MMMM D  YYYY  ha Z MMMM D  YYYY  ha MMMM D  YYYY HH:mm:ss.SSSZ MMMM D  YYYY HH:mm:ss.SSS Z MMMM D  YYYY HH:mm:ss.SSS MMMM D  YYYY HH:mm:ssZ MMMM D  YYYY HH:mm:ss Z MMMM D  YYYY HH:mm:ss MMMM D  YYYY HH:mmZ MMMM D  YYYY HH:mm Z MMMM D  YYYY HH:mm MMMM D  YYYY h:mm:ss a Z MMMM D  YYYY h:mm:ss a MMMM D  YYYY h:mm a Z MMMM D  YYYY h:mm a MMMM D  YYYY h:mma Z MMMM D  YYYY h:mma MMMM D  YYYY h a Z MMMM D  YYYY h a MMMM D  YYYY ha Z MMMM D  YYYY ha MMMM D  YYYY MMMM Do  YYYY  a t HH:mm:ss.SSSZ MMMM Do  YYYY  a t HH:mm:ss.SSS Z MMMM Do  YYYY  a t HH:mm:ss.SSS MMMM Do  YYYY  a t HH:mm:ssZ MMMM Do  YYYY  a t HH:mm:ss Z MMMM Do  YYYY  a t HH:mm:ss MMMM Do  YYYY  a t HH:mmZ MMMM Do  YYYY  a t HH:mm Z MMMM Do  YYYY  a t HH:mm MMMM Do  YYYY  a t h:mm:ss a Z MMMM Do  YYYY  a t h:mm:ss a MMMM Do  YYYY  a t h:mm a Z MMMM Do  YYYY  a t h:mm a MMMM Do  YYYY  a t h:mma Z MMMM Do  YYYY  a t h:mma MMMM Do  YYYY  a t h a Z MMMM Do  YYYY  a t h a MMMM Do  YYYY  a t ha Z MMMM Do  YYYY  a t ha MMMM Do  YYYY @ HH:mm:ss.SSSZ MMMM Do  YYYY @ HH:mm:ss.SSS Z MMMM Do  YYYY @ HH:mm:ss.SSS MMMM Do  YYYY @ HH:mm:ssZ MMMM Do  YYYY @ HH:mm:ss Z MMMM Do  YYYY @ HH:mm:ss MMMM Do  YYYY @ HH:mmZ MMMM Do  YYYY @ HH:mm Z MMMM Do  YYYY @ HH:mm MMMM Do  YYYY @ h:mm:ss a Z MMMM Do  YYYY @ h:mm:ss a MMMM Do  YYYY @ h:mm a Z MMMM Do  YYYY @ h:mm a MMMM Do  YYYY @ h:mma Z MMMM Do  YYYY @ h:mma MMMM Do  YYYY @ h a Z MMMM Do  YYYY @ h a MMMM Do  YYYY @ ha Z MMMM Do  YYYY @ ha MMMM Do  YYYY  HH:mm:ss.SSSZ MMMM Do  YYYY  HH:mm:ss.SSS Z MMMM Do  YYYY  HH:mm:ss.SSS MMMM Do  YYYY  HH:mm:ssZ MMMM Do  YYYY  HH:mm:ss Z MMMM Do  YYYY  HH:mm:ss MMMM Do  YYYY  HH:mmZ MMMM Do  YYYY  HH:mm Z MMMM Do  YYYY  HH:mm MMMM Do  YYYY  h:mm:ss a Z MMMM Do  YYYY  h:mm:ss a MMMM Do  YYYY  h:mm a Z MMMM Do  YYYY  h:mm a MMMM Do  YYYY  h:mma Z MMMM Do  YYYY  h:mma MMMM Do  YYYY  h a Z MMMM Do  YYYY  h a MMMM Do  YYYY  ha Z MMMM Do  YYYY  ha MMMM Do  YYYY HH:mm:ss.SSSZ MMMM Do  YYYY HH:mm:ss.SSS Z MMMM Do  YYYY HH:mm:ss.SSS MMMM Do  YYYY HH:mm:ssZ MMMM Do  YYYY HH:mm:ss Z MMMM Do  YYYY HH:mm:ss MMMM Do  YYYY HH:mmZ MMMM Do  YYYY HH:mm Z MMMM Do  YYYY HH:mm MMMM Do  YYYY h:mm:ss a Z MMMM Do  YYYY h:mm:ss a MMMM Do  YYYY h:mm a Z MMMM Do  YYYY h:mm a MMMM Do  YYYY h:mma Z MMMM Do  YYYY h:mma MMMM Do  YYYY h a Z MMMM Do  YYYY h a MMMM Do  YYYY ha Z MMMM Do  YYYY ha MMMM Do  YYYY MMM D  YYYY  a t HH:mm:ss.SSSZ MMM D  YYYY  a t HH:mm:ss.SSS Z MMM D  YYYY  a t HH:mm:ss.SSS MMM D  YYYY  a t HH:mm:ssZ MMM D  YYYY  a t HH:mm:ss Z MMM D  YYYY  a t HH:mm:ss MMM D  YYYY  a t HH:mmZ MMM D  YYYY  a t HH:mm Z MMM D  YYYY  a t HH:mm MMM D  YYYY  a t h:mm:ss a Z MMM D  YYYY  a t h:mm:ss a MMM D  YYYY  a t h:mm a Z MMM D  YYYY  a t h:mm a MMM D  YYYY  a t h:mma Z MMM D  YYYY  a t h:mma MMM D  YYYY  a t h a Z MMM D  YYYY  a t h a MMM D  YYYY  a t ha Z MMM D  YYYY  a t ha MMM D  YYYY @ HH:mm:ss.SSSZ MMM D  YYYY @ HH:mm:ss.SSS Z MMM D  YYYY @ HH:mm:ss.SSS MMM D  YYYY @ HH:mm:ssZ MMM D  YYYY @ HH:mm:ss Z MMM D  YYYY @ HH:mm:ss MMM D  YYYY @ HH:mmZ MMM D  YYYY @ HH:mm Z MMM D  YYYY @ HH:mm MMM D  YYYY @ h:mm:ss a Z MMM D  YYYY @ h:mm:ss a MMM D  YYYY @ h:mm a Z MMM D  YYYY @ h:mm a MMM D  YYYY @ h:mma Z MMM D  YYYY @ h:mma MMM D  YYYY @ h a Z MMM D  YYYY @ h a MMM D  YYYY @ ha Z MMM D  YYYY @ ha MMM D  YYYY  HH:mm:ss.SSSZ MMM D  YYYY  HH:mm:ss.SSS Z MMM D  YYYY  HH:mm:ss.SSS MMM D  YYYY  HH:mm:ssZ MMM D  YYYY  HH:mm:ss Z MMM D  YYYY  HH:mm:ss MMM D  YYYY  HH:mmZ MMM D  YYYY  HH:mm Z MMM D  YYYY  HH:mm MMM D  YYYY  h:mm:ss a Z MMM D  YYYY  h:mm:ss a MMM D  YYYY  h:mm a Z MMM D  YYYY  h:mm a MMM D  YYYY  h:mma Z MMM D  YYYY  h:mma MMM D  YYYY  h a Z MMM D  YYYY  h a MMM D  YYYY  ha Z MMM D  YYYY  ha MMM D  YYYY HH:mm:ss.SSSZ MMM D  YYYY HH:mm:ss.SSS Z MMM D  YYYY HH:mm:ss.SSS MMM D  YYYY HH:mm:ssZ MMM D  YYYY HH:mm:ss Z MMM D  YYYY HH:mm:ss MMM D  YYYY HH:mmZ MMM D  YYYY HH:mm Z MMM D  YYYY HH:mm MMM D  YYYY h:mm:ss a Z MMM D  YYYY h:mm:ss a MMM D  YYYY h:mm a Z MMM D  YYYY h:mm a MMM D  YYYY h:mma Z MMM D  YYYY h:mma MMM D  YYYY h a Z MMM D  YYYY h a MMM D  YYYY ha Z MMM D  YYYY ha MMM D  YYYY MMM Do  YYYY  a t HH:mm:ss.SSSZ MMM Do  YYYY  a t HH:mm:ss.SSS Z MMM Do  YYYY  a t HH:mm:ss.SSS MMM Do  YYYY  a t HH:mm:ssZ MMM Do  YYYY  a t HH:mm:ss Z MMM Do  YYYY  a t HH:mm:ss MMM Do  YYYY  a t HH:mmZ MMM Do  YYYY  a t HH:mm Z MMM Do  YYYY  a t HH:mm MMM Do  YYYY  a t h:mm:ss a Z MMM Do  YYYY  a t h:mm:ss a MMM Do  YYYY  a t h:mm a Z MMM Do  YYYY  a t h:mm a MMM Do  YYYY  a t h:mma Z MMM Do  YYYY  a t h:mma MMM Do  YYYY  a t h a Z MMM Do  YYYY  a t h a MMM Do  YYYY  a t ha Z MMM Do  YYYY  a t ha MMM Do  YYYY @ HH:mm:ss.SSSZ MMM Do  YYYY @ HH:mm:ss.SSS Z MMM Do  YYYY @ HH:mm:ss.SSS MMM Do  YYYY @ HH:mm:ssZ MMM Do  YYYY @ HH:mm:ss Z MMM Do  YYYY @ HH:mm:ss MMM Do  YYYY @ HH:mmZ MMM Do  YYYY @ HH:mm Z MMM Do  YYYY @ HH:mm MMM Do  YYYY @ h:mm:ss a Z MMM Do  YYYY @ h:mm:ss a MMM Do  YYYY @ h:mm a Z MMM Do  YYYY @ h:mm a MMM Do  YYYY @ h:mma Z MMM Do  YYYY @ h:mma MMM Do  YYYY @ h a Z MMM Do  YYYY @ h a MMM Do  YYYY @ ha Z MMM Do  YYYY @ ha MMM Do  YYYY  HH:mm:ss.SSSZ MMM Do  YYYY  HH:mm:ss.SSS Z MMM Do  YYYY  HH:mm:ss.SSS MMM Do  YYYY  HH:mm:ssZ MMM Do  YYYY  HH:mm:ss Z MMM Do  YYYY  HH:mm:ss MMM Do  YYYY  HH:mmZ MMM Do  YYYY  HH:mm Z MMM Do  YYYY  HH:mm MMM Do  YYYY  h:mm:ss a Z MMM Do  YYYY  h:mm:ss a MMM Do  YYYY  h:mm a Z MMM Do  YYYY  h:mm a MMM Do  YYYY  h:mma Z MMM Do  YYYY  h:mma MMM Do  YYYY  h a Z MMM Do  YYYY  h a MMM Do  YYYY  ha Z MMM Do  YYYY  ha MMM Do  YYYY HH:mm:ss.SSSZ MMM Do  YYYY HH:mm:ss.SSS Z MMM Do  YYYY HH:mm:ss.SSS MMM Do  YYYY HH:mm:ssZ MMM Do  YYYY HH:mm:ss Z MMM Do  YYYY HH:mm:ss MMM Do  YYYY HH:mmZ MMM Do  YYYY HH:mm Z MMM Do  YYYY HH:mm MMM Do  YYYY h:mm:ss a Z MMM Do  YYYY h:mm:ss a MMM Do  YYYY h:mm a Z MMM Do  YYYY h:mm a MMM Do  YYYY h:mma Z MMM Do  YYYY h:mma MMM Do  YYYY h a Z MMM Do  YYYY h a MMM Do  YYYY ha Z MMM Do  YYYY ha MMM Do  YYYY     ,mnpenner,closed,6,2016-05-06 22:18:33,2016-08-05 05:47:00,,Troubleshooting,,,0,1
11081,moment/moment,3169,Wrong datetime comparison,    javascript var moment = require  moment   var now = moment   var after = moment  .add 1  hour  .format  YYYY MM DD hh:mm:ss   if now.isAfter moment after      console.log now.format  YYYY MM DD hh:mm:ss       isAfter     moment after .format  YYYY MM DD hh:mm:ss      console.log now.utc  .format  YYYY MM DD hh:mm:ss       isAfter     moment after .utc  .format  YYYY MM DD hh:mm:ss         prints      me@me: /tst  node   version v5.11.0 me@me: /tst  node momentjstest.js 2016 05 07 06:39:22 isAfter 2016 05 07 07:39:22 2016 05 07 03:39:22 isAfter 2016 05 07 04:39:22      jsfiddle prints the same https://jsfiddle.net/tkvm2Lrf/2/ ,aa6,closed,3,2016-05-07 15:52:19,2016-05-08 00:41:02,,,,0,1
11080,moment/moment,3170,Isomorphic loading,    javascript node_modules/moment/src/moment.js:7 import   hooks as moment  setHookCallback   from  ./lib/utils/hooks ; ^^^^^^ SyntaxError: Unexpected token import     at exports.runInThisContext  vm.js:53:16      at Module._compile  module.js:511:25      at Module._extensions..js  module.js:550:10      at Object.require.extensions. anonymous function  [as .js]      ,anaibol,closed,0,2016-05-08 22:24:21,2016-05-08 22:26:47,,,,0,1
11079,moment/moment,3171,moment  0 0 0    is valid ? ?, moment  0 0 0   .isValid     is  true   and return    Sat Jan 01 2000 00:00:00 GMT 0800  PST    it s not even a number  how comes it is considered a valid date?  ,streamnsight,closed,10,2016-05-08 22:49:56,2016-05-09 03:46:58,,,,0,1
11078,moment/moment,3172,undefined  this ,Hello there  I use  fullcalendar 2.7.1 moment.js 2.13   the one which comes with fullcalendar  jQuery 2.2.2  and  Chrome  50.0.2661.94 m  This is the order of my javascript files         https://ajax.googleapis.com/ajax/libs/jquery/2.2.2/jquery.min.js     bootstrap3.js     jquery.dataTables.min.js     jquery.dataTables.responsive.js         moment.js         fullcalendar.min.js        ... other js  when i use drop  i get the error  Cannot read property  _calendar  of undefined      moment.js:1111  the undefined object is  this    I added a  console.dir this   after  use strict ;  in moment.js  and i get undefined  What am I doing wrong? thank you ,kostaspapas,closed,3,2016-05-09 09:28:30,2016-05-14 05:10:28,,Troubleshooting,,,0,1
11077,moment/moment,3173,Moment get  day   is not correct. , [image] https://cloud.githubusercontent.com/assets/15804484/15146768/281f4878 168b 11e6 996d 130695e00af1.png   calling .get  day   on this date returns 2 not 10.  ,kentonbmax,closed,4,2016-05-10 12:45:03,2016-05-10 13:30:25,,,,0,1
11076,moment/moment,3174,startOf  week   jumps 1 day too far back in leap year for week  9,moment  2016 3 1  .startOf  week  .calendar    >  02/28/2016   The correct start of week  9 is 02/29/2016. ,alpengeist,closed,6,2016-05-10 16:23:23,2016-05-11 23:52:48,,,,0,1
11075,moment/moment,3175,make moment calendar extensible with ad hoc options,There have been numerous requests to be able to add more options to moment  .calendar  . Going through and adding this to the locale files in the way that  2996 implements it causes breaking changes for people using updateLocale  and is on the whole not the cleanest thing. What if you don t want those other options? Now you have them and you re stuck with them.  Instead  I added a function called calendarFormat that can be used to define what calendar option should be used. This function defaults to what already exists  but can be overridden. For instance  the following function adds this month and next month options:      js     moment.calendarFormat = function  myMoment  now            var diff = myMoment.diff now   days   true ;         var nextMonth = now.clone  .add 1   month  ;          var retVal =  diff <  6 ?  sameElse  :             diff <  1 ?  lastWeek  :             diff < 0 ?  lastDay  :             diff < 1 ?  sameDay  :             diff < 2 ?  nextDay  :             diff < 7 ?  nextWeek  :              myMoment.month   === now.month      myMoment.year   === now.year    ?  thisMonth  :              nextMonth.month   === myMoment.month      nextMonth.year   === myMoment.year    ?  nextMonth  :  sameElse ;         return retVal;      ;      Then  use update locale to add the corresponding values to the locale:      js     moment.updateLocale  en             calendar :                   sameDay :  [Today at] LT                   nextDay :  [Tomorrow at] LT                   nextWeek :  dddd [at] LT                   lastDay :  [Yesterday at] LT                   lastWeek :  [Last] dddd [at] LT                   thisMonth :  [This month on the] Do                   nextMonth :  [Next month on the] Do                   sameElse :  L                      ;      If the locale doesn t have the values specified  it will fall back to  sameElse .  I think this is a cleaner way to go about this task.  It may need more unit tests but I m tired. ,maggiepint,closed,4,2016-05-11 04:27:46,2016-06-14 09:24:21,,,2.14.0,1,1
11074,moment/moment,3176,typescript: moment.defaultFormat leads to  cannot be a constant or a read only property ,When using typescript I want to be able to set default format      import   as moment from  moment ; moment.locale  sv SE  ; moment.defaultFormat =  YYYY MM DD ;      defaultFormat is defined as      export var defaultFormat: string;      But because of how es6 modules work  it will convert all  var  and  let  variables to read only. See https://github.com/Microsoft/TypeScript/issues/6751  Which means that I cannot set the defaultFormat with typescript. It says:      error TS2450: Left hand side of assignment expression cannot be a constant or a read only property.      Maybe we should add a function to set the property       export function setDefaultFormat format: string          or use setters and getters      set defaultFormat format: string : void     ,leon,open,2,2016-05-11 06:39:06,0000-00-00 00:00:00,,Enhancement,,,0,1
11073,moment/moment,3177,Bug Fix  2704   isoWeekday String  inconsistent with isoWeekday Number ,Bug fix for issue  2704 as requested by @mj1856  ,nvdh,closed,2,2016-05-11 07:19:06,2016-06-14 09:47:18,,,2.14.0,1,1
11072,moment/moment,3178,Problem setting hours to 2?,This sounds very weird  but it just happened to me I am parsing a long CSV which contains a timestamp. Surprisingly ti seems like I cannot set the hour to  2   try to run this code with NodeJS      var moment = require  moment  ; l = [  2892      2016      3      27      2      0       6.20      110  ]; var time = moment    l[1].trim      l[2].trim      l[3].trim       YYYY MM DD  ; time.hour l[4].trim   ; console.log time.hours    l[4] ; // outputs 3    2   ???? l[4] =   3  ; time.hour l[4].trim   ; console.log time.hours    l[4] ; // outputs correctly 3.   3    time.hour 2 ; console.log time.hours    2 ; // again  hour set to 3        ,leorossi,closed,1,2016-05-11 14:35:47,2016-05-11 15:16:29,,,,0,1
11071,moment/moment,3179,moment.duration seconds to month gives incorrect value,Moment.duration isn t handling conversion between seconds  days and months correctly.  Example:      > moment.duration 1   months  .asSeconds   2592000 > moment.duration 1   months  .asDays   30 > moment.duration 30   days  .asSeconds   2592000 > moment.duration 2592000   seconds  .asMonths   0.9856465225158627 > moment.duration 2592000   seconds  .asDays   30      If a month is going to be 30 days then 30 days as seconds should be 1 month.  Using moment@2.13.0  If I test 31 days to seconds it gives 2678400 which then gives me 1.0185014065997249 months ,grimurd,closed,2,2016-05-11 14:48:42,2016-06-12 08:30:55,,Bug,,,0,1
11070,moment/moment,3180,moment undefined  returns the current date  i.e. equivalent to moment   ,Is this really expected behavior? This makes it difficult to determine that an undefined variable is the source of an invalid date rather than an incorrect signal coming from an API on the server for example. ,matthew-rister,closed,7,2016-05-11 19:35:46,2016-05-14 09:14:58,,Enhancement,,,0,1
11069,moment/moment,3181,wrong abbreviation fix for month Maart,,jmaleonard,closed,5,2016-05-12 13:09:36,2016-07-02 18:11:53,,,,1,1
11068,moment/moment,3182,Different result of day 0  and day 1 ,moment.locale  en     week :   dow : 0     ; var  week;  week = moment  05 08 2016    MM DD YYYY  .day 0 .format  WW  ; // 18   week = moment  05 08 2016    MM DD YYYY  .day 1 .format  WW  ; // 19  ,majaode,closed,1,2016-05-13 08:01:40,2016-05-14 05:01:51,,,,0,1
11067,moment/moment,3183,Added missing functions to moment.d.ts,Added missing isSameOrAfter and isSameOrBefore functions to typings ,sokolovstas,closed,3,2016-05-13 14:18:53,2016-06-14 09:48:44,,,2.14.0,1,1
11066,moment/moment,3184,incorrect offset,I am using moment  .format  Z  ; to get current offset. When I change my system s timezone  it s working for some of the timezone while for some others its giving me incorrect figure. In fact its adding  1 for some timezone while  1 for some others. For example :  9  8  7  6  5  3.30  2 1 2 7 9 for these offset its not working correctly. ,manojwtb,closed,2,2016-05-13 14:32:44,2016-05-16 19:15:37,,Troubleshooting,,,0,1
11065,moment/moment,3185,Date.prototype.getYear,You are using Date.prototype.getYear which is obsolete and not supported by standar js engines  in my particular case https://github.com/cesanta/v7/. Please use Date.prototype.getFullYear as suggested in https://developer.mozilla.org/en US/docs/Web/JavaScript/Reference/Global_Objects/Date/getYear ,cancerberoSgx,closed,7,2016-05-13 23:49:13,2016-05-19 17:46:15,,Troubleshooting,,,0,1
11064,moment/moment,3186,moment issue template,The following is a stab at a default issue template. Feedback welcome.    Description of the Issue:      Expected result:      Actual result:      Steps and Code to Reproduce the Issue:    _Please include the values of all variables used._    Moment.JS Version:      Environment:    _Examples: Chrome 49 on OSX  Internet Explorer 10 on Windows 7  Node.JS 4.4.4 on Ubuntu 16.0.4_  _Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application._    Other information that may be helpful:     The time zone setting of the machine the code is running on   The time and date at which the code was run   Other libraries in use  TypeScript  Immutable.js  etc   _If you need troubleshooting help  you will probably get a faster response on Stack Overflow_ ,maggiepint,closed,7,2016-05-14 18:53:36,2016-08-27 21:48:55,,,,1,1
11063,moment/moment,3187,Moment methods using/returning the wrong date,Parsing  2016 05 17T15:20:00.000  with       moment.tz  2016 05 17T15:20:00.000    America/New_York    returns a Moment       _a:Array[7]     _d:Tue May 17 2016 11:20:00 GMT 0400  Eastern Daylight Time      _f: YYYY MM DDTHH:mm:ss.SSSSZ      _i: 2016 05 17T15:20:00.000 04:00      _isAMomentObject:true     _isUTC:true     _offset:240     _tzm:240        The _d is correct but all the methods  toDate  format    diff    return or use 15:20 rather than the 11:20 time.  I have tried  moment  2016 05 17T15:20:00.000  .tz  America/New_York    with the same results.  My main need is to do a diff with  now   moment      however the diff method is using the 15:20 time.  for example time now Tue May 17 2016 12:10 EDT:  moment.tz  2016 05 17T15:20:00.000    America/New_York  .diff moment     minute   // returns 190  should be 50  ,djorgji,closed,4,2016-05-17 16:31:24,2016-05-17 18:56:16,,,,0,1
11062,moment/moment,3188,Getting  invalid Date  if the date field is blank,I have a form where I have a date field.When I enter the date it will show correct date but when i left the field blank its giving  Invalid Date . ,devolper102,closed,3,2016-05-18 08:07:58,2016-05-22 18:35:46,,Troubleshooting,,,0,1
11061,moment/moment,3189,Random guid parses as a valid date,moment  E5CC4D0A 20BC 4E12 A41F 0CC82CA0B371    MM/D/YYYY hh:mm:ss A  .isValid   returns true.   Is this a bug? ,AvionNasserMuhammad,closed,1,2016-05-19 05:08:41,2016-05-19 11:27:50,,,,0,1
11060,moment/moment,3190,Wrong parsing of date,Hello guys   my code is following:      html <input type= text  name= battery_ir[measured_at]  value= 2016 05 10  class= form control  id= battery_ir_measured_at >  <script type= text/javascript >     battery_ir_measured_at  .val moment     battery_ir_measured_at  .val    [ YYYY MM DD    DD.MM.YYYY ] .format  L   ;      battery_ir_measured_at  .datetimepicker       locale:  de       format:  L       useCurrent: false      calendarWeeks: true      showTodayButton: true   ; </script>      moment seems to parse the date   2016 05 10    YYYY MM DD  wrong and outputs   05.10.2016  .  If I change the parsing format from   YYYY MM DD    DD.MM.YYYY   to   YYYY DD MM    MM.DD.YYYY   it works as expected.  In a previous version  the parsing worked fine. At the moment I m using version 2.13.0  Any suggestions to fix that? ,19Gerhard85,closed,1,2016-05-19 06:50:23,2016-05-19 17:36:34,,,,0,1
11059,moment/moment,3191,toDate returns a copy of the internal date object,moment toDate currently returns the internal date object  which can lead to strange behaviour if the moment object is then modified. See [this fiddle for an example] https://jsfiddle.net/67uaf0zu/ . ,jonathathan,closed,6,2016-05-19 18:50:43,2016-06-14 09:49:42,,,2.14.0,1,1
11058,moment/moment,3192,Adding support for rollup import.,Rollup uses  jsnext:main  property in package.json for ES6 modules. ,nickmessing,closed,2,2016-05-22 11:06:47,2016-06-14 09:57:12,,,2.14.0,1,1
11057,moment/moment,3193,difference between two dates string . help,I need to find difference between two dates say for example   fromDate= 2016/05/01   and  toDate= 2016/05/10   should return  totalDays = 10 . How can i achieve this using moment? ,nasr18,closed,2,2016-05-22 15:47:59,2016-05-22 18:35:20,,,,0,1
11056,moment/moment,3194,1 test failed. week year:week numbers 2012/2013  2446.7  ,    Client info      Date String   : Mon May 23 2016 12:18:41 GMT 0800          Locale String : 2016/5/23   12:18:41 Offset        :  480 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/49.0.2623.112 Safari/537.36            week year:week numbers 2012/2013  2446.7       javascript // Expected 53 // Actual   52 52 === 53     ,jiangshanmeta,closed,1,2016-05-23 04:25:17,2016-06-07 16:48:52,,Unit Test Failed,,,0,1
11055,moment/moment,3195,Incorrect display of localized date,In lithuanian language when the month is used standalone  or with year  it s name is used in nominative case. When there is a day of month nearby  the case of the month name is used in genitive case. Current locale file has both   nominative in  standalone  property and genitive in  format  property. But  when using moment  .format  LL   it returns incorrect case:   2016 m. gegu   24 d.    The correct value should be:   2016 m. gegu  s 24 d.   ,easyest,closed,9,2016-05-24 14:37:31,2016-06-15 09:19:20,,Bug,Language,Up-For-Grabs,,,0,1
11054,moment/moment,3196,Support microseconds,It would be great is moment also supported microseconds as that is commonly needed in our applications. ,bpalmer187,closed,1,2016-05-25 15:10:20,2016-05-25 19:40:54,,,,0,1
11053,moment/moment,3197,Moment not reading JS variable,Hi guys   I m stuck with a problem inside my jade template when using moment. I have a json value which I can read with mustache  and I simply can t use it with moment.  Example  inside my jade template :   var teste =    myDate   ;    myDate       teste      moment  2016 05 24T17:39:28.000Z    YYYY MM DD HH:mm  .format  DD[/]MM[/]YYYY HH:mm        moment teste.toString     YYYY MM DD HH:mm  .format  DD[/]MM[/]YYYY HH:mm        moment teste   YYYY MM DD HH:mm  .format  DD[/]MM[/]YYYY HH:mm     This returns me: 2016 05 24T17:39:28.000Z   2016 05 24T17:39:28.000Z   24/05/2016 17:39   Invalid date   Invalid date  Can anyone help?  Cheers ,mcpenchel,closed,6,2016-05-25 21:41:21,2016-06-02 22:01:34,,Troubleshooting,,,0,1
11052,moment/moment,3198,Display time range  start and end date/time ,I would like to use Moment.js for displaying time ranges.  For example calling calendar   should show something like  Tomorrow from 9:00 PM till 10:00 PM .  Is it possible to implement something like that? ,Programie,closed,4,2016-05-26 19:15:21,2016-05-27 16:57:28,,,,0,1
11051,moment/moment,3199,Why is there no way to set an existing Moment object in the same manner as when you create one?,I would expect this to work:      var selectedDate = moment  ; ... selectedDate.set  01/01/1999    MM/DD/YYYY  ;      But it doesn t. It doesn t even display an error or anything.  Using  set    the intended way is fine if you just want set 1 aspect of the date  e.g.:  selectedDate.set  year   1999 ;   But if you want to set the whole thing to a different date with  set    it gets verbose. So I do it this way:  selectedDate = moment  01/01/1999    MM/DD/YYYY  ;   But then you are creating a whole new moment object. Is this inefficient? In my case I m sure that it doesn t impact performance  but I reckon in some cases it might... or am I overthinking it?  Either way  I m just curious why it s designed this way. ,kenmorechalfant,closed,2,2016-05-26 20:37:24,2016-05-27 16:55:31,,,,0,1
11050,moment/moment,3200,Handling no time zone use case,Hello  We ran into a prob with our use of moment  I m wondering if theres a better solution than to what we did and if its something we could help with a PR.  We have a web app that doesnt need the automagic time zone stuff that moment has. I.e. a user in PST picks 8AM  it should show up as 8AM for everyone no matter what TZ they are in. Our current hacky solution is:      export const localTime = t => //1p   moment t .utc  .add moment.parseZone t .utcOffset    m        My questions are:   is there a better way to do this   if there isnt  could we submit a PR for a convenience method to do this?  Thanks  ,sdebaun,closed,2,2016-05-27 19:17:47,2016-06-07 01:31:29,,Troubleshooting,,,0,1
11049,moment/moment,3201,NodeJS: Setting locale does not work,I have installed Moment by using the  npm install moment   save  command. Next I  require    Moment inside my gulp file and set the locale:      javascript window.moment = require  moment  ;  moment.locale  nl  ;      When I want to try it out with  human readable  time   moment  2016 05 18 13:03:08  .fromNow    it still says     days ago  in English. I want it to be Dutch  nl . But for some reason it does not change.  I did import the  moment with locales.js  file inside my HTML file  is there an option to do this within a JS file?  ,matthijs110,closed,8,2016-05-29 12:47:00,2016-06-07 01:28:24,,Troubleshooting,,,0,1
11048,moment/moment,3202,why moment give me a error relative time?,i have a start time and want get a  relative time just like   2 months ago .  but it s wrong the current time is  2016 05 31  the start time is  2016 04 10   i think the result of relative time is  a mouths ago   but it s not.      js code: moment  2016 04 10  .startOf  day  .fromNow   result:  2 months ago       why the relative time is  2 mouths ago   it shouldn t be  a mouths ago ? ,wendaosanshou,closed,0,2016-05-31 04:26:03,2016-06-01 01:57:42,,,,0,1
11047,moment/moment,3203,Different behave in Chrome and Mozilla, Fri Apr 22 09:38:20  0000 2016Z  is valid in Google Chrome 50 and not valid in Mozilla Firefox 46   moment  Fri Apr 22 09:38:20  0000 2016Z  .toString  ;   Thanks  ,kirylandruski,closed,1,2016-05-31 08:17:10,2016-05-31 11:12:17,,,,0,1
11046,moment/moment,3204,Performance problem in comparing strings as dates,Hi  I need to sort strings as dates.  I wrote the following comparator:      js export function stringDatesComparator dateFormat  a  b      const dateA = moment a  dateFormat ;   const dateB = moment b  dateFormat ;    if  dateA.isBefore dateB   return  1;   if  dateA.isAfter dateB   return 1;   return 0;        The problem is that there is a method which takes a lot of time: configFromStringAndFormat  . Maybe Moment is invoking it everytime you pass a dateFormat? Is there a way to avoid it? ,gabrielenosso,closed,2,2016-05-31 14:14:50,2016-06-07 01:19:47,,,,0,1
11045,moment/moment,3205,Cannot read property  moxie  of undefined ?,there are a error message when i introduced the file  plupload.full.min.js .      Cannot read property  moxie  of undefined ?      why would report this error message ? ,wendaosanshou,closed,1,2016-06-01 02:15:21,2016-06-01 02:17:36,,,,0,1
11044,moment/moment,3206,AM PM doesnt work,Following code doesn t  work      javascript console.log moment  11 Oct 2012 12:00 AM   DD MMM YYYY hh:mm A    en  .toISOString   ;      However  if I remove AM part and A it works.      javascript console.log moment  11 Oct 2012 12:00   DD MMM YYYY hh:mm    en  .toISOString   ;      EDIT: My mistake. ,tosbaha,closed,0,2016-06-01 11:29:30,2016-06-01 11:35:41,,,,0,1
11043,moment/moment,3207,can i use HH mm ss format for isBetween clause ,i want to use this type of condition   moment  08:00:00  .isBetween  12:00:00    14:00:00   null   [   ;  ,osamabari,closed,1,2016-06-02 07:53:58,2016-06-02 10:46:59,,,,0,1
11042,moment/moment,3208,Case control in format string,Would it be worthwhile to allow case formatting to be specified in the format string? I need the month to be in uppercase and whilst it s simple enough for me to uppercase the result in my own code I would have benefitted from something like:  ^ for uppercase _ for lowercase  Where:   DD ^MMM^  would return 02 JUN    DD _MMM_  would return 02 jun   Not thought about the solution in great deal and I know capitalisation has been mentioned in other issues but just after some feedback?  Does this seem like asking moment to do too much? ,AntonRand,closed,1,2016-06-02 10:11:58,2016-06-21 02:31:39,,Enhancement,,,0,1
11041,moment/moment,3209,Duration of 1 year converted to milliseconds becomes 11 month 30 days,It seems good:      moment.duration moment.duration 1  y  .asMilliseconds   .asDays   365 moment.duration 1  y  .asDays   365      But:      var d_new = moment.duration moment.duration 1  y  .asMilliseconds   ; dnew.months   11 d_new.days   30      At first I thought that s because the current year is leap. But the same thing for months:      moment.duration  moment.duration 1  M  .asMilliseconds    .asMonths   0.9856465225158627     ,evil-shrike,closed,7,2016-06-03 13:10:40,2018-03-05 23:25:55,,Bug,Duplicate,,,0,1
11040,moment/moment,3210,bugs in mac browsers,in my all broewers of mac  osx 10.11.3   the special day parse not correct:  on firefox  other brower has the save bug  but the  hours  is diffrent :  moment  1987 04 12  .toDate    result to  Date  Sat Apr 11 1987 23:00:00 GMT 0800  CST      but the correct day is :   moment  1987 04 13  .toDate    result to  Date  Mon Apr 13 1987 00:00:00 GMT 0900  CDT       it seems that  new Date    has the same bug   ,ccqgithub,closed,1,2016-06-05 13:28:38,2016-06-06 23:25:28,,,,0,1
11039,moment/moment,3211,Ability to change rounding used in humanize,I m running into the same issue as https://github.com/moment/moment/issues/1620  The current implementation of humanize is  _about_ x units ago   It would be great if humanize has a callback for rounding  so that we can implement Math.floor for  _more than_ x units ago   i.e. age calculation   and Math.ceil for  in _less than_ x units   i.e. countdown to an event  ,huan086,closed,3,2016-06-06 08:43:38,2016-06-22 04:28:21,,Enhancement,,,0,1
11038,moment/moment,3212,Incorrect Week returned,Performing the  YYYY WW  format on the following dates returns the incorrect week of the year.  Examples: moment 1483243200000 .format  YYYY WW   =  2017/52  moment  2017 01 01  .format  YYYY WW   =  2017/52  moment  2017 01 01   [ YYYY MM DD ] .format  YYYY WW   =  2017/52   They should be 2017/01 or 2016/53 depending on whatever the start date is.  Here is a fiddle: https://jsfiddle.net/17xcpvgx/ ,stephanbochet,closed,1,2016-06-06 15:03:50,2016-06-07 01:15:01,,,,0,1
11037,moment/moment,3213,Added  type UnitOfTime ,Added a type to strongly type  UnitOfTime  entry points. ,david-driscoll,closed,2,2016-06-06 19:25:37,2016-06-14 10:06:11,,,2.14.0,1,1
11036,moment/moment,3214,Wrong short locale date  month  parsing,Example  wrong :  > moment.utc  2016 01        YYYY DD MMM    ru  .toISOString   // july >  2016   01   01T00:00:00.000Z  > or > moment.utc  2016 01        YYYY DD MMM    ru  .toISOString   // june >  2016   01   01T00:00:00.000Z   But  right :  > moment.localeData  ru  .monthsParse        >   5   > and > moment.localeData  ru  .monthsParse        >   6   ,Climenty,closed,13,2016-06-07 06:14:55,2017-03-19 14:47:51,ichernev,Bug,Language,,,0,1
11035,moment/moment,3215,backward compatibility broken in move from 2.12 to 2.13,once I got 2.13.0 all my date related tests started breaking the following way:           AssertionError: expected  2015 01 13T00:00:00Z  to be  2015 01 13T00:00:00 00:00         expected   actual         2015 01 13T00:00:00 00:00         2015 01 13T00:00:00Z        As you can see  it s the format suffix that broke the deal. All tests were passing in 2.12.0  Can you please help me isolate the relevant change and adjust my part accordingly? ,osher,closed,1,2016-06-07 09:33:50,2016-06-07 16:40:27,,,,0,1
11034,moment/moment,3216,Fix errors reported by jscs,This pull request fixes the code style errors reported by  jscs:all  grunt task. ,monoblaine,closed,4,2016-06-07 12:16:45,2016-06-07 14:31:17,,,,1,1
11033,moment/moment,3217,Temporarily fix jscs,JSCS dropped a major release three days ago that causes the build to break.  When I change the configuration that is breaking the build on my local machine  the build continues  but I get about a zillion code style errors. There must have been other breaking changes as well.  This fixes it temporarily by using the old package.  Based on what I m seeing on the JSCS website  we should convert to ESLint  as it has been deprecated in favor of that anyways. See medium post: https://medium.com/@markelog/jscs end of the line bc9bf0b3fdb2 .u8qquoisi  For now though  someone needs to merge this so the build works. ,maggiepint,closed,5,2016-06-07 12:28:12,2016-06-07 23:08:53,,,,1,1
11032,moment/moment,3218,Fix jscs 3.0 errors,This PR will make dev builds compatible with jscs 3.0  latest version  ,monoblaine,closed,2,2016-06-07 19:51:11,2016-06-12 04:32:44,,,2.14.0,1,1
11031,moment/moment,3219,Document add time  key =  milliseconds  ,The  .add  function is documented as follows.      moment  .add Number  String ; moment  .add Duration ; moment  .add Object ;      Regarding  .add Number  String    if you omit the second parameter it defaults to   milliseconds  . This is a great default  but it is not documented.  Would you mind a pull request with additional tests and documentation that cover this so I can safely use it. ,Moeriki,closed,3,2016-06-08 09:07:37,2016-06-14 18:59:37,,Enhancement,,,0,1
11030,moment/moment,3220,UglifyJS warnings,Hi  there are some warnings in your code:      Condition always true [./ /moment/moment.js:8 0] Condition always true [./ /moment/locale/af.js:6 0] Condition always true [./ /moment/locale/ar.js:8 0] Condition always true [./ /moment/locale/ar ma.js:7 0] Condition always true [./ /moment/locale/ar sa.js:6 0] Condition always true [./ /moment/locale/ar tn.js:5 0] Condition always true [./ /moment/locale/az.js:6 0] Condition always true [./ /moment/locale/be.js:8 0] Condition always true [./ /moment/locale/bg.js:6 0] Condition always true [./ /moment/locale/bn.js:6 0] Condition always true [./ /moment/locale/bo.js:6 0] Condition always true [./ /moment/locale/br.js:6 0] Condition always true [./ /moment/locale/bs.js:7 0] Condition always true [./ /moment/locale/ca.js:6 0] Condition always true [./ /moment/locale/cs.js:6 0] Dropping unreachable code [./ /moment/locale/cs.js:31 0] Dropping unreachable code [./ /moment/locale/cs.js:40 0] Dropping unreachable code [./ /moment/locale/cs.js:49 0] Dropping unreachable code [./ /moment/locale/cs.js:58 0] Dropping unreachable code [./ /moment/locale/cs.js:67 0] Condition always true [./ /moment/locale/cv.js:6 0] Condition always true [./ /moment/locale/cy.js:6 0] Condition always true [./ /moment/locale/da.js:6 0] Condition always true [./ /moment/locale/de.js:8 0] Condition always true [./ /moment/locale/de at.js:9 0] Condition always true [./ /moment/locale/dv.js:6 0] Condition always true [./ /moment/locale/el.js:6 0] Condition always true [./ /moment/locale/en au.js:5 0] Condition always true [./ /moment/locale/en ca.js:6 0] Condition always true [./ /moment/locale/en gb.js:6 0] Condition always true [./ /moment/locale/en ie.js:6 0] Condition always true [./ /moment/locale/en nz.js:5 0] Condition always true [./ /moment/locale/eo.js:8 0] Condition always true [./ /moment/locale/es.js:6 0] Condition always true [./ /moment/locale/et.js:7 0] Condition always true [./ /moment/locale/eu.js:6 0] Condition always true [./ /moment/locale/fa.js:6 0] Condition always true [./ /moment/locale/fi.js:6 0] Condition always true [./ /moment/locale/fo.js:6 0] Condition always true [./ /moment/locale/fr.js:6 0] Condition always true [./ /moment/locale/fr ca.js:6 0] Condition always true [./ /moment/locale/fr ch.js:6 0] Condition always true [./ /moment/locale/fy.js:6 0] Condition always true [./ /moment/locale/gd.js:6 0] Condition always true [./ /moment/locale/gl.js:6 0] Condition always true [./ /moment/locale/he.js:8 0] Condition always true [./ /moment/locale/hi.js:6 0] Condition always true [./ /moment/locale/hr.js:6 0] Condition always true [./ /moment/locale/hu.js:6 0] Dropping unused variable suffix [./ /moment/locale/hu.js:16 0] Condition always true [./ /moment/locale/hy am.js:6 0] Condition always true [./ /moment/locale/id.js:7 0] Condition always true [./ /moment/locale/is.js:6 0] Condition always true [./ /moment/locale/it.js:7 0] Condition always true [./ /moment/locale/ja.js:6 0] Condition always true [./ /moment/locale/jv.js:7 0] Condition always true [./ /moment/locale/ka.js:6 0] Condition always true [./ /moment/locale/kk.js:6 0] Condition always true [./ /moment/locale/km.js:6 0] Condition always true [./ /moment/locale/ko.js:10 0] Condition always true [./ /moment/locale/ky.js:6 0] Condition always true [./ /moment/locale/lb.js:6 0] Condition always true [./ /moment/locale/lo.js:6 0] Condition always true [./ /moment/locale/lt.js:6 0] Condition always true [./ /moment/locale/lv.js:7 0] Condition always true [./ /moment/locale/me.js:6 0] Condition always true [./ /moment/locale/mk.js:6 0] Condition always true [./ /moment/locale/ml.js:6 0] Condition always true [./ /moment/locale/mr.js:7 0] Condition always true [./ /moment/locale/ms.js:6 0] Condition always true [./ /moment/locale/ms my.js:6 0] Condition always true [./ /moment/locale/my.js:6 0] Condition always true [./ /moment/locale/nb.js:7 0] Condition always true [./ /moment/locale/ne.js:6 0] Condition always true [./ /moment/locale/nl.js:6 0] Condition always true [./ /moment/locale/nn.js:6 0] Condition always true [./ /moment/locale/pa in.js:6 0] Condition always true [./ /moment/locale/pl.js:6 0] Condition always true [./ /moment/locale/pt.js:6 0] Condition always true [./ /moment/locale/pt br.js:6 0] Condition always true [./ /moment/locale/ro.js:7 0] Condition always true [./ /moment/locale/ru.js:8 0] Condition always true [./ /moment/locale/se.js:6 0] Condition always true [./ /moment/locale/si.js:6 0] Condition always true [./ /moment/locale/sk.js:7 0] Dropping unreachable code [./ /moment/locale/sk.js:32 0] Dropping unreachable code [./ /moment/locale/sk.js:41 0] Dropping unreachable code [./ /moment/locale/sk.js:50 0] Dropping unreachable code [./ /moment/locale/sk.js:59 0] Dropping unreachable code [./ /moment/locale/sk.js:68 0] Condition always true [./ /moment/locale/sl.js:6 0] Condition always true [./ /moment/locale/sq.js:8 0] Condition always true [./ /moment/locale/sr.js:6 0] Condition always true [./ /moment/locale/sr cyrl.js:6 0] Condition always true [./ /moment/locale/ss.js:6 0] Condition always true [./ /moment/locale/sv.js:6 0] Condition always true [./ /moment/locale/sw.js:6 0] Condition always true [./ /moment/locale/ta.js:6 0] Condition always true [./ /moment/locale/te.js:6 0] Condition always true [./ /moment/locale/th.js:6 0] Condition always true [./ /moment/locale/tl ph.js:6 0] Condition always true [./ /moment/locale/tlh.js:6 0] Condition always true [./ /moment/locale/tr.js:7 0] Condition always true [./ /moment/locale/tzl.js:6 0] Condition always true [./ /moment/locale/tzm.js:6 0] Condition always true [./ /moment/locale/tzm latn.js:6 0] Condition always true [./ /moment/locale/uk.js:7 0] Condition always true [./ /moment/locale/uz.js:6 0] Condition always true [./ /moment/locale/vi.js:6 0] Condition always true [./ /moment/locale/x pseudo.js:6 0] Condition always true [./ /moment/locale/zh cn.js:7 0] Condition always true [./ /moment/locale/zh tw.js:6 0]     ,ayozebarrera,closed,1,2016-06-08 09:29:59,2016-06-17 05:35:09,,,,0,1
11029,moment/moment,3221,Missing files when installing with JSPM 0.17.0 beta.14,When installing Moment.js via JSPM v0.17.0 beta.14 by  jspm install moment  I miss the following files in the downloaded package:      moment.d.ts package.json      and the  min  folder s empty.  I suggest to add these files to  package.json :         jspm :        buildConfig :          uglify : true             files : [        package.json          moment.js          moment.d.ts          locale          min      ]       map :          moment :  ./moment                  Thanks   P.S.: PR? ,k7sleeper,closed,10,2016-06-08 14:58:57,2018-03-05 08:17:16,,Build/Release,,,0,1
11028,moment/moment,3222,Korean format longDateFormat  L  is  YYYY MM DD ,Korean longDateFormat  L  is not  YYYY.MM.DD  but  YYYY MM DD . ,imappak,closed,7,2016-06-09 02:54:10,2016-08-05 05:08:16,,Language,,,0,1
11027,moment/moment,3223,I want to add Lao Language  lo.js ,How to add lo.js to your project locale ?  // This is lo.js file //  moment.js locale configuration //  locale : lao  lo  //  author : Thin Siphachanh : https://github.com/teenking   function  global  factory       typeof exports ===  object     typeof module  ==  undefined  ? factory require  ../moment    :    typeof define ===  function     define.amd ? define [ moment ]  factory  :    factory global.moment    this  function  moment     use strict ;      var lo = moment.defineLocale  lo         months :        _     _    _    _       _      _       _     _     _    _     _      .split  _        monthsShort :        _     _    _    _       _      _       _     _     _    _     _      .split  _        weekdays :       _   _      _   _     _   _     .split  _        weekdaysShort :       _   _      _   _     _   _     .split  _    // yes  three characters difference     weekdaysMin :    ._ ._  ._ ._  ._  ._ . .split  _        longDateFormat :           LT :  H     m                LTS :  H     m      s                  L :  YYYY/MM/DD           LL :  D MMMM YYYY           LLL :  D MMMM YYYY      H     m                LLLL :     dddd   D MMMM YYYY      H     m                  meridiemParse: /                 /      isPM: function  input            return input ===           ;            meridiem : function  hour  minute  isLower            if  hour < 12                return           ;           else               return           ;                      calendar :           sameDay :  [           ] LT           nextDay :  [            ] LT           nextWeek :  dddd[        ] LT           lastDay :  [              ] LT           lastWeek :  [   ]dddd[           ] LT           sameElse :  L             relativeTime :           future :       s           past :   s                 s :                               m :  1                mm :   d                h :  1                   hh :   d                   d :  1               dd :   d               M :  1                 MM :   d                 y :  1              yy :   d             ;  return lo;         ; ,teenking,closed,2,2016-06-09 05:13:00,2016-06-14 17:46:08,,Language,,,0,1
11026,moment/moment,3224,Add function declarations,Add below function signature to definition file.   isSameOrBefore   isSameOrAfter ,not-for-me,closed,2,2016-06-09 09:19:35,2016-06-14 10:10:10,,,,1,1
11025,moment/moment,3225,moment.duration NaN .humanize   returns  a few seconds ,Expected result: Some indication that the value is invalid.  Might this be related to  3071? ,pkovac,closed,3,2016-06-09 15:53:33,2017-03-18 18:34:12,,Enhancement,,,0,1
11024,moment/moment,3226,endOf  month   not returning the expected value,Code:   moment  2016 06 09  .endOf  month  .unix  ;   I would expect this to return  1467331199   June 30th  but it instead returns  1467349199   July 1st . ,djdavisdt,closed,1,2016-06-09 18:01:57,2016-06-09 19:05:28,,,,0,1
11023,moment/moment,3227,diff function returns negative zero   0  ,in theoretical math you can have negative zero while representing movement around zero. In computer science you can also have negative zeros when negative quantity [underflows to zero] http://www.johndcook.com/blog/2010/06/15/why computers have signed zero/   Should diff function return integer w/o negative zero?  code:          let days_left = moment this.props.task.get  due_date   .diff moment     days  ;     console.log  days_left:    this.props.task.get  due_date    days_left  moment  .toDate  .toISOString   ;      console output:      days_left:  2016 06 08T21:00:00.000Z  1 2016 06 10T08:12:06.820Z days_left:  2016 06 09T21:00:00.000Z  0 2016 06 10T08:12:06.845Z days_left:  2016 06 10T21:00:00.000Z 0 2016 06 10T08:12:06.869Z      to have better visual  screenshot of console:  [image] https://cloud.githubusercontent.com/assets/2733862/15958118/488fcffe 2efc 11e6 8461 6b05ad27dd2a.png  ,liesislukas,closed,2,2016-06-10 08:17:30,2016-06-12 15:44:11,ichernev,Bug,,,0,1
11022,moment/moment,3228,Don t coerce to a string when date is passed with format,The following code will coerce date as a string and then attempt to parse it with a format:      moment new Date     YYYY MM DD        This is wrong. The date should be used as is and the format ignored. ,maggiepint,closed,1,2016-06-10 16:26:04,2016-06-12 04:17:36,,Bug,,,0,1
11021,moment/moment,3229,Custom inspect   method for NodeJS?,Apologies if this is a dupe  I searched but couldn t find anything.  Would you be open to providing an [ inspect   ] https://nodejs.org/dist/latest v4.x/docs/api/util.html util_custom_inspect_function_on_objects  method on moment objects which returns a human readable representation of the moment? This would be useful for debugging and testing purposes.  As well as being used in Node core  a bunch of other inspect libraries out there will detect this method and use it.  I had a bit of a play around in the repl  this seems to be a decent first cut:      js // Current moment     [Number: 1465642464921]   _isAMomentObject: true    _isUTC: false    _pf:      empty: false       unusedTokens: []       unusedInput: []       overflow:  2       charsLeftOver: 0       nullInput: false       invalidMonth: null       invalidFormat: false       userInvalidated: false       iso: false       parsedDateParts: []       meridiem: null      _locale:    Locale        _ordinalParse: / d 1 2  th st nd rd /       ordinal: [Function]       _abbr:  en        _config:         ordinalParse: / d 1 2  th st nd rd /          ordinal: [Function]          abbr:  en          _ordinalParseLenient: / d 1 2  th st nd rd   d 1 2 /      _d: 2016 06 11T10:54:24.921Z    // define an inspect   function moment.prototype.inspect = function       return this.format  [moment]  YYYY MM DD HH:mm:ss.SSSZ       [Function]  // Easier to read output > moment   moment  2016 06 11 11:55:05.192 01:00    // And it seems to be reverisble > moment  2016 06 11 11:55:05.192 01:00   moment  2016 06 11 11:55:05.192 01:00        I m happy to submit a PR and tests if this is palatable. ,glenjamin,closed,3,2016-06-11 10:58:57,2016-06-12 04:16:41,,Enhancement,,,0,1
11020,moment/moment,3230,fix passing date with format string to ignore format string,Fix moment/moment 3228 where passing a date object with a format string would cause the date to be coerced to string and the interpreted by the string format. Now just uses the date and ignores the format. ,maggiepint,closed,2,2016-06-11 14:50:16,2016-06-14 10:09:11,,,2.14.0,1,1
11019,moment/moment,3231,[misc] Add moment.inspect   for friendly console output,This gets used automatically by node s util.inspect function and a number of similar libraries. This also means that it will be used by the NodeJS REPL.  As discussed in  3229.  Please be as brutal as you like with code review   .  Couldn t think of a better way to test the round trippable nature of this format than  eval   so I ve kept it constrained to that small helper function.  Is there any other property of a moment that s important to include in the representation? ,glenjamin,closed,18,2016-06-11 17:44:27,2016-11-06 10:12:48,,Enhancement,,2.16.0,1,1
11018,moment/moment,3232,Fix negative 0 in certain diff cases,Fixes  3227 ,ichernev,closed,5,2016-06-12 04:53:08,2016-06-14 10:11:38,,,2.14.0,1,1
11017,moment/moment,3233,Introduce month.isFormat for format/standalone discovery,Fixes  3195  @mmozuras can you please verify the tests are now OK. They should be more accurate after this change  but I m not a native speaker  nor any other kind :  . ,ichernev,closed,2,2016-06-12 08:21:00,2016-06-15 09:19:20,,,2.14.0,1,1
11016,moment/moment,3234,Add comment on top of moment with locales.js,Fixes  3159 ,ichernev,closed,1,2016-06-12 08:54:29,2016-06-15 09:21:15,,,2.14.0,1,1
11015,moment/moment,3235,Use proper locale inheritance for the base locale,Previously english locale was defined mostly in Locale.prototype. Now it s moved in locale config  similar to all other locales  that is merged the same way locales are patched  updated .  Fixes  3137   NOTE: changes in  src/test/helpers/common locale.js  are because common tests for weekdays were plain wrong    they weren t iterating all weekdays. It should go in a separate PR  if I m not lazy.       Now the real story: we were depending in a few places that some stuff is just a given  in the prototype .   monthsParse  weekdaysParse    assumes that if you have an own property then you define it  otherwise you want the default  esp for strict parsing . Now that it doesn t have prototype the check needs to be revised  I do === DEFAULT   but that is not ideal   longDateFormat    we add lowercase values to the dict  which might change the default dictionary  because even if its in prototype it is still modifyable   but now we also merge it in  so locales inherit autodefined properties of other locales ... yuk. Its currently fixed by presenting an empty longDateFormat in all locales  if one doesn t exist  so we never modify the base  but it feels fragile   ordinalParse    this is the last problematic one  but I took a decision that you can  fallback to default  in updateLocale by specifying null for some properties. Well  now that there is no fallback this null causes trouble. To fix it I disabled the tests. Not really the end of the world  but something more elegant can come along. ,ichernev,closed,2,2016-06-12 10:50:24,2016-06-20 08:24:57,,,2.14.0,1,1
11014,moment/moment,3236,add   defaults string specifier to milliseconds,Fix for  3219. ,Moeriki,closed,1,2016-06-13 07:55:03,2016-06-15 03:41:23,,,2.14.0,1,1
11013,moment/moment,3237,Redo  2997  fix  2016,Redo  2997  fix  2016 ,ichernev,closed,1,2016-06-14 08:24:30,2016-06-14 08:25:38,,,2.14.0,1,1
11012,moment/moment,3238,Handle empty object and empty array for creation as now,Redo  3111  fix  3085 ,ichernev,closed,1,2016-06-14 08:49:24,2016-06-15 03:40:43,,,2.14.0,1,1
11011,moment/moment,3239,durations of less than 1 second e.g. 500ms get humanized as  a few seconds  rather than  less than a second ,This is probably related to other duration / humanize issues regarding rounding but it would be nice if the default implementation handled fractions of a second rather better. ,CZEMacLeod,closed,2,2016-06-14 14:37:29,2016-06-21 02:29:39,,,,0,1
11010,moment/moment,3240,Use null instead   moment.js,Hi there   I executed an analisys static with sonarQube on  moment.js   and i found a best practice call  Use null instead  on this block of code:    if  typeof format ===  number                     index = format;                 format = undefined;    <<<<<          Use null instead  SonarQube says: undefined is the value you get for variables and properties which have not yet been created. Use the same value to reset an existing variable and you lose the ability to distinguish between a variable that exists but has no value and a variable that does not yet exist. Instead  null should be used  allowing you to tell the difference between a property that has been reset and one that was never created.    Noncompliant Code Example  var myObject =   ;  // ... myObject.fname = undefined;  // Noncompliant // ...  if  myObject.lname == undefined      // property not yet created   if  myObject.fname == undefined      // no real way of knowing the true state of myObject.fname      Compliant Solution  var myObject =   ;  // ... myObject.fname = null; // ...  if  myObject.lname == undefined      // property not yet created   if  myObject.fname == undefined      // no real way of knowing the true state of myObject.fname    Best regards   Oscar Lama S. ,olama,closed,2,2016-06-14 16:05:04,2016-06-14 17:44:08,,,,0,1
11009,moment/moment,3241,Escape all 24 mixed pieces  not only first 12 in computeMonthsParse,,middagj,closed,2,2016-06-15 08:36:06,2016-06-15 09:24:51,,,2.14.0,1,1
11008,moment/moment,3242,Dutch parsing of abbreviated month name with dash does not work,Dutch locale removes the dot from the abbreviated if it is used in a dashed notation:  DD MMM YYYY . However  it doesn t work the other way around  which I think should be possible.  See https://jsfiddle.net/ztroj5zv/ for an example  I was trying to create custom regular expressions in the locale for the month  but this doesn t work because the remapping is always done using the normal month name:      javascript for  i = 0; i < 12;   i        mom = createUTC [2000  i] ;     this._shortMonthsParse[i] = this.monthsShort mom     .toLocaleLowerCase  ;     this._longMonthsParse[i] = this.months mom     .toLocaleLowerCase  ;        If you have any thought what would be a good general approach to fix this. My first idea was to pass the context of the token  thus   MMM    to  handleStrictParse  such that it can be passed again to  monthsShort  again. I am happy to help implementing.  @mention jjupiter A side node is probably that both ways of writing the abbreviated month names are accepted  even if not surrounded by dashes . See also: http://taaladvies.net/taal/advies/vraag/1727/afkortingen_van_de_namen_van_de_maanden/ I am used to never write it with a dot. If it is possible to pass configuration options when setting the locale  we can also choose that approach  and don t have to rewrite the parsing logic. ,middagj,closed,2,2016-06-15 09:06:07,2016-06-22 13:24:42,,Bug,Language,,,0,1
11007,moment/moment,3243,require.js support for locale bootstrapping,i ve been trying for a long while to make requirejs load in moment js properly. I had it working but i wanted to add that whenever moment.js is loaded in the locale is set properly  based on language setting of the website .  since my website will have plugins from third parties i want  require [ moment ]..  to directly export the moment with the right locale set.   First i made a wrapper js file. but this didnt work since momentjs needs to be required with the alias  moment .  I tried the init function but this one is not called since momentjs uses require.js s define.amd  For now i made the hack  that one of the first scripts sets the moment locale appropriately. but it could still mean  since everything is loaded async  that this will fire later than another script using moment.js.  Can you not give us require.js developers some slack providing a better way to boostrap the right locale onto momentjs?  I also don t want to expose moment js with alias  moment  because this might lead to miss use by third party developers.  The scenarios i described i tested on v 2.10.6 of momentjs ,joelharkes,closed,3,2016-06-15 12:18:40,2016-06-16 12:08:26,,Troubleshooting,,,0,1
11006,moment/moment,3244,Updated moment.d.ts,The current version  released version  is missing a definition for  updateLocale  in the moment namespace  the dev branch version also has an issue fixed in this pr. ,jvanoostveen,closed,3,2016-06-15 13:40:13,2016-06-20 08:14:22,,,2.14.0,1,1
11005,moment/moment,3245,Locale aware format without time,Hi   I would like to use the  LLLL  format  without the time being displayed. I can t seem to find an appropriate format in docs.  Is this possible to do?  Currently I m using a hacky way:  moment date .format  LLLL  .replace moment date .format  LT          Thanks  ,Padam87,closed,1,2016-06-15 15:25:44,2016-06-17 03:23:09,,,,0,1
11004,moment/moment,3246,moment fromNow returns  2 days ago  even though it s only been 36 48 hours,Why does it round up so much? It should be 2 days ago once it s been 48 hours since. I have it show relative and calendar time and it sometimes says  2 days ago yesterday at 1:00am  from certain times between 36 48 hours. ,jimmaay,closed,5,2016-06-16 06:15:18,2016-06-17 03:20:19,,,,0,1
11003,moment/moment,3247,question changing language,hollo i use this link https://cdn.jsdelivr.net/momentjs/2.10.6/moment.min.js in my project  how can i change language from English to French?  could you explain me in detail what should i exactly add or change? ,jjjan,closed,1,2016-06-16 06:54:23,2016-06-17 03:13:40,,,,0,1
11002,moment/moment,3248,Implement .format moment.ISO_8601  to be an alias for .toISOString  ,Fixes  3019 ,ichernev,closed,4,2016-06-16 07:11:45,2016-08-12 06:39:05,,,,1,1
11001,moment/moment,3249,Retrieve just the oridinal,I am using this on a site where I need to format the date in html to be  21<sup>st</sup> December 2016  but I can t seem to find a way of getting just the ordinal from moment.  ,carbontwelve,closed,1,2016-06-17 11:13:01,2016-06-20 04:10:50,,,,0,1
11000,moment/moment,3250,Moment is not defined   version 2.13.0,Just trying out moment  so downloaded latest min version 2.13.0. Running in Chrome browser  so add this in  as per the docs. Seems simple:      <script src= <path to js dir>/moment.min.js ></script> <script>   moment  .format  ; </script>      Doesn t work  just keep getting the error  moment is not defined . ,professorDante,closed,4,2016-06-17 15:53:55,2016-06-17 16:39:45,,,,0,1
10999,moment/moment,3251,Duration typing out of date,missing weeks   and asWeeks   methods ,patrickjenkins213,closed,7,2016-06-17 19:39:30,2016-06-20 14:58:13,,Enhancement,TypeScript,,,0,1
10998,moment/moment,3252,Add weeks to Duration interface,Weeks are part of the spec here: http://momentjs.com/docs/ /durations/weeks/ ,jasperSpeicher,closed,1,2016-06-19 23:16:30,2016-06-20 08:16:21,,,2.14.0,1,1
10997,moment/moment,3253,Persian Locale problem,When using Persian locale dates are not converted by Jalali Calendar and only the captions are translated. ,MehdyKarimpour,closed,1,2016-06-20 11:31:51,2016-06-21 02:29:03,,,,0,1
10996,moment/moment,3254,Fixed capitalisation of weekdays and ordinal,,GoncaloCdM,closed,3,2016-06-21 15:49:41,2016-07-30 14:44:48,,,,1,1
10995,moment/moment,3255,add maori  mi nz ,,johnideal,closed,5,2016-06-21 17:42:02,2016-09-01 09:37:59,,Language,,2.15.0,1,1
10994,moment/moment,3256,Support for decimal milliseconds, ver 2.13.0  The ISO standard allows for any number of decimal seconds before the  Z  in a dateTime string. The .net platform seems to use 7 decimal places   while the moment.js library is only parsing out the first 3 decimal places.  I have monkey patched the formatter  toISOString    to pull the full 7 digits from the creation object   but this is a terrible hack. Patching the parser would be much better   but is beyond my current understanding.  Perhaps there is another work around? ,benhathaway,closed,2,2016-06-22 10:55:35,2016-06-22 12:23:04,,,,0,1
10993,moment/moment,3257,date formating for different locales return name of months and days in small instead of camel case,The formatting for the names of days and months are in small alphabet instead of camel strings  as it is in English language.   moment.locale  sv   moment  .format  MMMM   // returns juni moment  .format  dddd   // return onsdag  moment.locale  en   moment  .format  MMMM   // returns June moment  .format  dddd   // return Wednesday  It should be consistent in my opinion.   /Sanjay ,sanjaybhagia,closed,2,2016-06-22 12:20:51,2016-06-22 12:27:08,,,,0,1
10992,moment/moment,3258,Allow  polite  deprecation warnings to be turned off for unit tests,Currently  moment tracks whether a particular deprecation message has been displayed  and only warns about it once.  This can have unintended consequences if using the jasmine spyOn feature to observe whether warnings have or have not been issued for a block of code.  Consider:      var moment = require  moment  ;  describe  moment   function        use strict ;    beforeEach function         spyOn console   warn  .and.callThrough  ;     ;    it  should accept a full date string   function         // Triggers deprecation warning     var mmt = moment  Saturday  June 22  1996  ;      expect mmt.isValid   .toBe true ;     expect mmt._d.getFullYear   .toBe 1996 ;     expect mmt._d.getMonth   .toBe 5 ;     expect mmt._d.getDate   .toBe 22 ;     ;    it  should not warn when format is specified   function          var mmt = moment  5/1/2001  ;      // bug: didn t pass a format  even though I said I would  but test passes     expect console.warn .not.toHaveBeenCalled  ;     ;    it  should warn when date is not ISO   function         var mmt = moment  1/24/1998  ;      // bug: code would issue a deprecation warning  but was not actually written to console.warn so test fails     expect console.warn .toHaveBeenCalled  ;      ;   ;      Is there an obvious way that I m missing to test deprecation warnings? I noted that the moment.js unit tests don t seem to assert anything about them  possibly for the same reason?  If I changed the order of my tests to move the last one above the first one  it will pass  but the other one will still pass when it should have failed. And if I move _it_ first so that it correctly fails  then the other one will stop passing again. ,kmillerdevx3,closed,1,2016-06-22 13:21:39,2016-06-22 17:17:48,,,,0,1
10991,moment/moment,3259,Parse Dutch abbreviated month name without dot,Issue  3242  Dutch locale removes the dot from the abbreviated if it is used in a dashed notation: DD MMM YYYY. However  it doesn t work the other way around  which I think should be possible.  See https://jsfiddle.net/ztroj5zv/ for an example.  This fixes the parsing logic and allow abbreviated months without dots  which is quite common in Dutch. See http://taaladvies.net/taal/advies/vraag/1727/afkortingen_van_de_namen_van_de_maanden/  @jorisroling ,middagj,closed,6,2016-06-22 13:24:03,2016-09-01 09:40:20,,Language,,2.15.0,1,1
10990,moment/moment,3260,moment.isValid: inconsistent behaviour,https://jsfiddle.net/9vodk57t/ ,gkubisa,open,3,2016-06-22 16:26:28,0000-00-00 00:00:00,,Bug,,,0,1
10989,moment/moment,3261,Update ar sa.js,The first day in Saudi Arabia currently is Sunday. it should be edited here. Friday   Saturday are weekend  Thanks. ,iOsama,closed,5,2016-06-24 23:47:51,2016-10-29 01:57:50,,Language,Needs Revision,,,1,1
10988,moment/moment,3262,Add BE Year  BB  BBBB ,Add support for Buddhist Era  BE  year  parsing and formatting  BE is 543 years before CE  2559  BE  is equal to 2016  CE  and 2016  CE  is equal to 2559  BE  ,saknarak,closed,2,2016-06-25 00:52:57,2016-07-31 01:03:05,,,,1,1
10987,moment/moment,3263,moment isValid   issue with 12 hour format and AM/PM,Is there a particular reason as to why this time is valid?      var moment = require  moment  ; var x = moment  13:00 PM    h:mm A  ; console.log x.isValid   ; console.log x.hours   ; console.log x.minutes   ; console.log x.format  HH:mm   ;      I get the following output:      truehouldn t this time be considered invalid? If it supposed to be valid  shouldn t the 13:00 PM loop back around to 1:00 AM?  ,jadesym,open,10,2016-06-25 16:21:20,0000-00-00 00:00:00,,Enhancement,Up-For-Grabs,,,0,1
10986,moment/moment,3264,Belgian Dutch locale  nl be ,As also mentioned by @dietergeerts in  1803  a Belgian Dutch locale is missing. The only difference with the dutch locale  as far as I know   is the fact that the separator used in Belgium is  /  rather than    .  Example: 26  /  06  /  2016  The Belgian Dutch locale could be a nearly exact copy of the Dutch locale  which was made by @jorisroling. ,ThomasVandenbon,closed,1,2016-06-25 22:14:59,2016-06-29 12:42:16,,,,0,1
10985,moment/moment,3265, 3264   Added Belgian Dutch locale  nl be ,Based on the nl locale  but with a modified date separator   /  instead of     . ,ThomasVandenbon,closed,5,2016-06-25 22:25:13,2016-08-01 07:58:00,,,,1,1
10984,moment/moment,3266,.NET TimeSpan format does not work for milliseconds when precision is less than 3,    javascript > time = moment.duration  00:00:15.72     [Number: 15000]   _milliseconds: 15000    _days: 0    _months: 0    _data:       milliseconds: 0       seconds: 15       minutes: 0       hours: 0       days: 0       months: 0       years: 0      _locale:     Locale        _ordinalParse: / d 1 2  th st nd rd /       ordinal: [Function]       _abbr:  en        _config:          ordinalParse: / d 1 2  th st nd rd /          ordinal: [Function]          abbr:  en          _ordinalParseLenient: / d 1 2  th st nd rd   d 1 2 /          only results in  15000   not the correct  15720   however      javascript > time = moment.duration  00:00:15.720     [Number: 15720]   _milliseconds: 15720    _days: 0    _months: 0    _data:       milliseconds: 0       seconds: 15       minutes: 0       hours: 0       days: 0       months: 0       years: 0      _locale:     Locale        _ordinalParse: / d 1 2  th st nd rd /       ordinal: [Function]       _abbr:  en        _config:          ordinalParse: / d 1 2  th st nd rd /          ordinal: [Function]          abbr:  en          _ordinalParseLenient: / d 1 2  th st nd rd   d 1 2 /         ,FallingSnow,closed,4,2016-06-26 21:31:49,2016-07-05 10:59:28,,Bug,,,0,1
10983,moment/moment,3267,[new locale] ar ly: Arabic  Lybia  locale,,kikoanis,closed,7,2016-06-26 21:40:12,2016-09-01 09:54:33,,Language,,2.15.0,1,1
10982,moment/moment,3268,moment.isValid ignoring extra characters,Extra characters added anywhere in the date string are ignored  most alarmingly ignoring numerals beyond the expected number of digits. All of the following return true:   moment  1234567890/1234567890    MM/DD/YYYY  .isValid     moment  1234567890 1234567890 12345678900 1234567890    MM DD YYYY  .isValid     moment  ///1234567890///invalid////12345678900///1234567890///    MM/DD/YYYY  .isValid    ,mikeresult,closed,1,2016-06-28 22:55:45,2016-06-28 23:34:23,,,,0,1
10981,moment/moment,3269,Interpret time with just 3 digits,When attempting to convert a 3 digit string into a valid time string  moment throws an  Invalid date  error. Here is an example of what I m seeing:      Input  > Return Value 1200  > 12:00 0845  > 08:45 845  > Invalid date      Wouldn t it be accurate or safe to assume that  if the input consists of 3 digits with no leading  0   the output should be an appropriately formatted time  as long as that value is valid within the range of 00:00 23:59 ? That way  845 would come out as 08:45.  FYI  I m on version 2.10.6 of the library. ,CarlosGarcell,closed,5,2016-06-29 16:53:53,2016-06-29 16:58:39,,,,0,1
10980,moment/moment,3270,moment s .parseZone   not documented,It took me quite some time and digging in issues to discover that parseZone  without any arguments can be used in the same manner as  local    and  utc   .  Documentation will be improved if you include this use case.  I just want one timestamp that I want to display in the original and local time. A formatter would have been nice  but now at least I can do ts.parseZone  .format   and ts.local  .format    ,tiljanssen,closed,2,2016-06-30 17:27:56,2016-07-04 13:25:26,,Documentation,,,0,1
10979,moment/moment,3271,Korean long date fix,@jeeeyul   @kyungw00k  @maggiepint   @kyungw00k   please review this pull request when you can.  its to resolve the korean long date formatting issue.  I used to live in Busan  Korea  speak Korean a little bit and felt compelled to pitch in here.  Here is the issue:  3222  ,bigtone1284,closed,9,2016-07-02 05:34:31,2016-08-05 07:31:11,,Language,,,1,1
10978,moment/moment,3272,Fix Afrikaans March abbr,This is redo of  3181  ,ichernev,closed,1,2016-07-02 18:11:37,2016-07-02 18:12:49,,,2.14.0,1,1
10977,moment/moment,3273,[pkg] jspm: Include moment.d.ts file in package,Similar to aea2a8961bc4dbff0471d0615af1f4fb98fc81d7 and required for use with https://github.com/frankwallis/plugin typescript. ,tamird,closed,5,2016-07-02 21:00:55,2016-09-04 07:49:51,,TypeScript,,2.15.0,1,1
10976,moment/moment,3274,Duration of any October in weeks is 0,    Issue details  moment version: 2.13.0 node: 6.2.0  6.2.2      javascript const getTotalWeeksInMonth = date =>       const endOf = moment date .endOf  month  ;     const startOf = moment date .startOf  month  ;     const duration = moment.duration endOf   startOf ;      return duration.weeks     1;        Here is a function I use for detecting amount of weeks in a month. It looks OK  until we need to deal with October.  For some reason the duration object looks really weird if we pass any year s October:      Duration     _data: Object         days: 0         hours: 0         milliseconds: 999         minutes: 59         months: 1         seconds: 59         years: 0      Whereas any other month looks OK:      Duration     _data: Object         days: 29         hours: 23         milliseconds: 999         minutes: 59         months: 0         seconds: 59         years: 0      [Here is an isolated and runnable code] https://tonicdev.com/577837db9e5cf213007762e2/577837db9e5cf213007762e3   I ve just started looking into moment s sources  will try to make a test for that. If anybody knows how to workaround that   would like to know.  I ll try to fix this  but if anybody wants to do this instead   go for it. ,kuzzmi,closed,6,2016-07-02 22:24:31,2016-07-04 00:50:38,,Troubleshooting,,,0,1
10975,moment/moment,3275,Update typescript definitions with 2.14.0 changes,,ichernev,closed,1,2016-07-04 03:20:41,2016-07-04 03:23:36,,TypeScript,,2.14.0,1,1
10974,moment/moment,3276,[bugfix] duration: parser: Support ms durations in .NET syntax,Fixes  3266     Note: The rounding behavior described in https://github.com/moment/moment/issues/3266 issuecomment 229423853 is not currently included in this PR  because it would break a number of existing tests. For example  with the proposed rounding behavior  the duration parsed in [this test] https://github.com/moment/moment/blob/9c04c825ca7d3435c56badb1dc62d844d7ac1c32/src/test/moment/duration.js L181  would have  seconds = 5  and  milliseconds = 0 .      I can add the rounding behavior and change those tests if desired  but that might be considered a breaking change  so I thought it was worth bringing up the issue first. At the moment  extra millisecond digits are simply truncated rather than being rounded.    _edit_: The rounding behavior has been added to this PR. ,not-an-aardvark,closed,6,2016-07-04 04:12:40,2016-09-01 10:00:38,,,2.15.0,1,1
10973,moment/moment,3277,isAfter Validation,Hi        var test = moment  04 05 2016    DD MM YYYY   true .isAfter  04 07 2016  ;  var test = moment  04/05/2016    DD/MM/YYYY   true .isAfter  04/07/2016  ;      test return TRUE    with  YYYY MM DD  works.   Please can someone tell me what the issue    Thanks ,medelasri,closed,1,2016-07-04 04:32:10,2016-07-04 04:40:43,,,,0,1
10972,moment/moment,3278,moment.d.ts 2.14.0   issues  perhaps noImplicitAny related ,There appear to be some issues with  moment.d.ts  that ships with 2.14.0.  I started noticing errors like this in my build:      ERROR in C: projects proverb angular node_modules moment moment.d.ts  526 58 : error TS1144:     or  ;  expected. ERROR in C: projects proverb angular node_modules moment moment.d.ts  526 19 : error TS7010:  calendarFormat   which lacks return type annotation  implicitly has an  any  return type. ERROR in C: projects proverb angular node_modules moment moment.d.ts  526 61 : error TS2304: Cannot find name  string .      I m reverting back to 2.13.0 for now  no problem with that version that I can tell  ,johnnyreilly,closed,2,2016-07-04 06:04:10,2016-07-04 06:35:00,,,,0,1
10971,moment/moment,3279,2.14.0: No compatible binary build found for this package.,Hi   When I try to update Moment.js to the newest version I get the following error:       meteor update     This project is already at Meteor 1.3.4.1  the latest release.     => Errors while upgrading packages:                 While checking for momentjs:moment@2.14.0: error: No compatible binary build found for this package. Contact the package author and ask them to publish it for your platform.      Not sure whether this is a problem of atmospherejs.com or a problem mit the momentjs package  but someone should definitely look into it. For the moment I ll just stick with the 2.13.1 release instead.  PS: Not sure if that matters  but I m using Meteor and momentjs on a 64 bit Linux machine  Debian 8.5 . ,hg-stolle,closed,8,2016-07-04 06:20:37,2016-07-18 13:39:33,,,,0,1
10970,moment/moment,3280,Fix Typings,The TypeScript typings in 2.14.0 are incorrect and breaking our builds. This should fix the issue.  Thanks for all the hard work     ,todd,closed,18,2016-07-04 06:21:49,2016-07-04 06:37:21,,TypeScript,,2.14.1,1,1
10969,moment/moment,3281,Cannot use different clocks.,Hello   I am trying to use the clock that shows on the homepage of momentjs.com to show twice with different timezones. But my code is not working since it only shows one timezone.  Can somebody please show how to fix this.  Here is my code :       html <span class= pull left >     <div class= hero circle >         <div class= hero face >             <div id= hour  class= hero hour ></div>             <div id= minute  class= hero minute ></div>             <div id= second  class= hero second ></div>         </div>     </div>                                     </span>  <span class= pull right >     <div class= hero circle >         <div class= hero face >             <div id= hour2  class= hero hour ></div>             <div id= minute2  class= hero minute ></div>             <div id= second2  class= hero second ></div>         </div>     </div> </span>          javascript var currentLang =  en       snippets = [];  function updateSnippets          var i;      moment.locale currentLang ;      for  i = 0; i < snippets.length; i              snippets[i].render  ;          function updateClock timezone =  Europe/Amsterdam   selector =          var now = moment            second = now.seconds     6          minute = now.minutes     6   second / 60          hour =   now.hours     12  / 12    360   90   minute / 12;     now.tz timezone ;          hour  selector .css  transform    rotate     hour    deg   ;         minute  selector .css  transform    rotate     minute    deg   ;         second  selector .css  transform    rotate     second    deg   ;    function spaces  length        var out =   ;     while  out.length < length            out  =    ;           return out;    function Snippet  el        var longest = 0          i          text  = this.text  = el.text  .split   n            html  = this.html  = el.html  .split   n            evals = this.evals = [];      this.el = el;      for  i = 0; i < text.length; i              longest = Math.max text[i].length  longest ;         evals[i] = new Function  return     text[i] ;            for  i = 0; i < text.length; i              html[i]  = spaces longest   text[i].length ;          Snippet.prototype.render = function          var output = []          i;      for  i = 0; i < this.html.length; i              output[i] = this.html[i];         output[i]  =  <span class= comment > //  ;         output[i]  = this.evals[i]  ;         output[i]  =  </span> ;            this.el.html output.join   n   ;  ;   function timedUpdate          updateClock  ;     updateClock  America/Curacao    2  ;     updateSnippets  ;     setTimeout timedUpdate  1000 ;       .page moment index code  .each function          snippets.push new Snippet   this   ;   ;  timedUpdate  ;    document .on  click    [data locale]   function        var dom =   this ;     currentLang = dom.data  locale  ;        [data locale]  .removeClass  active  ;     dom.addClass  active  ;     updateSnippets  ;   ;     ,concept-core,closed,4,2016-07-04 06:24:51,2016-07-05 06:10:32,,,,0,1
10968,moment/moment,3282,[misc] typescript: Ensure moment.d.ts is tested for syntax,as discussed in https://github.com/moment/moment/pull/3280 with @ichernev  These tests are triggered after the grunt test task. The basis of the tests were the DefinitelyTyped moment tests found [here] https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/moment .  Plugging this in revealed a few missing elements of the  moment.d.ts  Typing file.  I have added these in based on the definition in DT.  Hope this helps. ,johnnyreilly,closed,20,2016-07-04 10:21:29,2016-09-07 07:25:28,,TypeScript,todo,,2.15.0,1,1
10967,moment/moment,3283,moment.min.js download contains comments,The download from http://momentjs.com/downloads/moment.min.js does not have the comments removed while the previous versions had. ,Knagis,closed,5,2016-07-04 14:03:08,2017-03-20 02:20:53,,Bug,,,0,1
10966,moment/moment,3284,Weekdays   is not localised and does not return days in the ISO week day order,It seems like these are probably two separate but related issues.  moment.weekdays   is not localised even though the docs imply it should be. See this section: http://momentjs.com/docs/ /i18n/locale data/  I tried moment.locale  en gb  .weekdays   and got  weekdays is not a function .  Also moment.weekdays   does not return the days in the ISO week day order. Even if it is localised I d have though it makes more sense that by default the order should follow the ISO week day order. ,curiosity101,closed,7,2016-07-04 15:10:49,2016-08-12 06:29:52,,Bug,,,0,1
10965,moment/moment,3285,Moment.js.2.14.1.nupkg File contains corrupted data,Hi   After installing the new release yesterday  I can no longer install/update any other package. I get this error in the package manager console.  Unable to read package from path  Moment.js.2.14.1 Moment.js.2.14.1.nupkg . File contains corrupted data.  I am using VS2015  nuget 3.5.0.1448  Regards ,vascofernandes,closed,19,2016-07-05 07:05:18,2016-07-08 04:50:22,,,,0,1
10964,moment/moment,3286,Locale formatting not working.,Hi  I m getting a weird error from moment.js during  moment .. .format  dd DD. MMM YYYY   . Sometimes it seems to work fine but in other cases it throws a  TypeError   see below .  I tried to track down the underlying problem with no success  as far as I can see it s related to locales. Hence I used the  with locales  version  previously I included only the necessary locales .  I am using the latest   2.14.1    min/moment with locales.js  from bower. Older versions such as  2.11  also didn t work properly.      angular.js:13708 TypeError: this.localeData ... .weekdaysMin is not a function     at Moment.<anonymous>  moment with locales.js:1230      at Object.dd DD. MMM YYYY  moment with locales.js:612      at formatMoment  moment with locales.js:627      at Moment.moment_format__format [as format]  moment with locales.js:3057       Which is thrown here:      addFormatToken  dd   0  0  function  format            return this.localeData  .weekdaysMin this  format ; // <    TypeError   ;      Due to  this._locale._weekdaysMin = [ So    Mo    Di    Mi    Do    Fr    Sa ]  being an array.  This is the moment object I m trying to format: https://gist.github.com/trichner/f2d3ff0a7e6c2b3d668ded52cf69f245 file gistfile1 txt  Is there anything I missed? Or could it be a library bug? ,trichner,closed,2,2016-07-05 15:07:08,2016-07-11 15:26:31,,,,0,1
10963,moment/moment,3287,window.moment   not available on momentjs.com,,jcready,closed,2,2016-07-05 20:50:57,2016-07-06 21:26:18,,,,0,1
10962,moment/moment,3288,Drop IE 8 Support,For 3.0 we should drop support for IE 8. There are several shims in the code that can be removed at this time. Notably  several things in the utils folder can go. This will be helpful for reducing library size. ,maggiepint,open,0,2016-07-05 23:31:37,0000-00-00 00:00:00,,Breaking change,,3.0,0,1
10961,moment/moment,3289,Showing Invalid Date in Firefox..,console.log moment  30 Jun 2016  .format  DD MM YYYY         In Chrome it is showing correctly but coming to Firefox it is showing invalid date....  ,VenkatRamNDD,closed,3,2016-07-06 05:47:06,2016-07-06 20:52:00,,,,0,1
10960,moment/moment,3290,1 test failed. relative time:custom rounding  2561.6  ,    Client info      Date String   : Wed Jul 06 2016 09:18:08 GMT 0400  Eastern Daylight Time  Locale String : 7/6/2016  9:18:08 AM Offset        : 240 User Agent    : Mozilla/5.0  Windows NT 6.3; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/51.0.2704.103 Safari/537.36 Moment Version: 2.14.1            relative time:custom rounding  2561.6   Round down towards the nearest year      javascript // Expected in 1.625 days // Actual   in 1.6250000115740741 days  in 1.6250000115740741 days  ===  in 1.625 days      ,rkrueger11,closed,1,2016-07-06 13:19:38,2016-07-20 02:43:35,,,,0,1
10959,moment/moment,3291,Incorrect date conversion of ASP.NET JSON dates,I seem to notice a slight difference in the date when converting a ASP.NET JSON date. As per the docs the JSON conversion would return date as follows.  > moment  /Date 1198908717056 0700 /  ; // 2007 12 28T23:11:57.056 07:00  When i run the same on my local  it return as shown in the screenshot below.  [image] https://cloud.githubusercontent.com/assets/6510724/16625300/66a13f74 4369 11e6 9ce4 97c735723d1c.png   [JSFiddle] https://jsfiddle.net/6jcwrqh8/  ,gvar369,closed,1,2016-07-06 16:07:00,2016-07-06 21:23:25,,,,0,1
10958,moment/moment,3292,Support for reduced accuracy?,Is there a way to identify the accuracy of a parsed moment?  ISO 8601 allows reduced accuracy  and moment will happily parse said dates  but it creates a moment for the precise start of the specified time  in a seemingly random timezone.  For example:      moment  1999 12  .toString    >  Wed Dec 01 1999 00:00:00 GMT 0600  moment  1999 12  .toISOString    >  1999 12 01T06:00:00.000Z  moment  1999 12  .day    > 3      So  the month of December was a Wednesday in 1999. ...   Is there a good way to determine the accuracy/precision of a parsed moment? Alternately  is there a good way to reformat the moment to the appropriate precision?  As a hacky workaround  specifically for month accuracy  I found I can use:      m.creationData  .format ===  YYYY MM  ? m.format  MM YYYY   : m.format  MM DD YYYY        However  that does not appear to work for YYYY. ,aij,closed,3,2016-07-06 20:15:12,2016-07-07 19:14:55,,,,0,1
10957,moment/moment,3293,Split localization,Is there a reason why the core module includes all the localization features? Would it make sense to split it out the same way timezones are handled? We use moment in multiple projects  open and closed  and the cost of upgrading to newer versions is high because I need to perform a security review on every change and 95  are localization changes. I don t really mind the module size as my work is largely server side.  If this was discussed in the past and voted against  would love to see a link to that discussion.  Thanks  ,hueniverse,closed,9,2016-07-08 17:24:05,2016-07-13 09:30:40,,,,0,1
10956,moment/moment,3294,moment.locale Name  does not change week localization in formatting of the day of week in moment.format,Currently    moment.weekdays   is actually localized  but switching locales does not change formatting fo the day of week in   moment.forma  t using week format specifier   dddd  :  moment.locale  ru  ; date.format  dddd DD.MM.YYYY  ; moment.locale  fr  ; date.format  dddd DD.MM.YYYY  ;  Temp workaround:  moment.weekdays parseInt date.format  E             date.format  DD.MM.YYYY  ; ,github-polymer-user,closed,2,2016-07-08 18:13:44,2016-07-09 03:44:23,,,,0,1
10955,moment/moment,3295,moment string  default year 2001,I am getting 2001 as a default year if i don t specify it in the input. ,levdavid,closed,4,2016-07-08 19:38:13,2016-07-09 03:13:14,,,,0,1
10954,moment/moment,3296,Number 0 converted to space while doing .toUTCString  , moment.utc  Mon  01 Jan 0001 00:00:00 GMT    ddd  DD MMM YYYY HH:mm:ss  .toDate  .toUTCString    results in  Mon  01 Jan    1 00:00:00 GMT . notice the 4 spaces after Jan and before 1. The second third and the fourth space are for 3 zeros. This was working well with 4.x version of node.js. However with 6.3 version of node.js 0  zero  is converted to empty space during serialization. This breaks our tests. It works well with 4.x version of node.js ,amarzavery,closed,2,2016-07-09 02:02:50,2016-07-09 03:34:29,,,,0,1
10953,moment/moment,3297,Using moment to find the next time / event,Does moment.js have a function to determine the next time / date out of an array of times.  Example:   Current Time:   10/07/2016 15:19    Array:   1:  10/07/2016 10:20   2:    10/07/2016 15:21     3:  10/07/2016 15:40   4:  11/07/2016 11:40      Output:   The next time is 10/07/2016 15:21 and begins in x  120  seconds.  I am willing to write a plugin to do this if there is no way of achieving this in moment. ,mscreenie,closed,3,2016-07-10 00:04:44,2016-07-10 05:33:02,,,,0,1
10952,moment/moment,3298,conflicting two moment.js on the same page,Hi   We are using moment.js globally  in compiled form  and some of our client also using moment.js on the same page as globally. We have updated our js file recently and replaced locale    with updateLocale    to avoid depreciation warning  while client s moment seems to be old and doesn t contains  updateLocale    that s why its throwing following error: TypeError: moment.updateLocale is not a function.   is there any option in moment.js jquery i.e.  var jQ = jQuery.noConflict  ; or what should I do to remove this confliction? Please advice. ,manojwtb,closed,1,2016-07-11 07:22:09,2016-07-11 22:07:35,,,,0,1
10951,moment/moment,3299,[pkg] npm: Do not include .npmignore in npm package,,jorrit,closed,2,2016-07-12 13:28:22,2016-09-01 10:03:33,,,2.15.0,1,1
10950,moment/moment,3300,Calling add/subtract mutates the original instance of moment,Hey moment team   Thanks for the library  I love it. Ran into this bug and it took me 3 hours to realize what was happening. Sorry for the poor title.  var a = moment  Tue Jul 12 2016 23:02:04 GMT 0700  PDT    var b = a.add 120   m    a.format  hh:mm   //  01:02  b.format  hh:mm   //  01:02   momentStart should be the original GMT time put in as a string. Instead  it is equal to the value of adding 120 mins  only momentEnd should hold the result of that operation .  I am proposing that the original instance should not be modified when calling the add method.   Thoughts? ,brianmmorton,closed,1,2016-07-13 06:03:41,2016-07-13 12:56:32,,,,0,1
10949,moment/moment,3301,Timezone converting to UTC is wrong,By creating a date object using  hour:20  in timezone  Africa/C asablanca  I expect the UTC  hour to be  19   but it s showing  20 .  Demo: https://jsfiddle.net/pojt2r99/      js moment.tz.add  Africa/Casablanca LMT WET WEST CET u.k 0  10  10 0121212121212121213121212121212121212121212121212121212121212121212121212121212121212121212121212121  2gMnt.E 130Lt.E rb0 Dd0 dVb0 b6p0 TX0 EoB0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4mn0 SyN0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 Rc0 11A0 e00 e00 U00 11A0 8o0 e00 11A0 11A0 5A0 e00 17c0 1fA0 1a00 1a00 1fA0 17c0 1io0 14o0 1lc0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1lc0 14o0 1fA0 32e5  ;       alert moment.tz   year: 2016  month: 6  date: 13  hour: 20     Africa/Casablanca  ._d.toUTCString   ;     ,HamzaLJ,closed,3,2016-07-13 19:01:49,2016-07-13 20:12:10,,,,0,1
10948,moment/moment,3302,1 test failed. week year:week numbers 2012/2013  2446.7  ,    Client info      Date String   : Thu Jul 14 2016 09:41:34 GMT 0800                      Locale String : 2016/7/14   9:41:34 Offset        :  480 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/49.0.2623.110 Safari/537.36            week year:week numbers 2012/2013  2446.7       javascript // Expected 53 // Actual   52 52 === 53     ,gmobi-lixing,closed,4,2016-07-14 01:42:03,2016-07-21 02:03:34,,,,0,1
10947,moment/moment,3303,[misc] typescript: Add  date  to UnitOfTime,Apparently this got lost when  UnitOfTime  was created.  Day  in dates only refers to the day of the week  while  Date  refers to the day of the month.  This pull request adds  date  back as an allowed unit. ,poke,closed,2,2016-07-14 14:31:05,2016-09-07 08:30:18,,TypeScript,,2.15.0,1,1
10946,moment/moment,3304,Meteor / Atmospherejs 2.14.3,While checking for momentjs:moment@2.14.3: error: No compatible binary build found for this package. Contact the package author and ask them to publish it for your platform. ,flean,closed,3,2016-07-14 23:23:14,2016-07-14 23:40:13,,,,0,1
10945,moment/moment,3305,Detect changes to system clock,If you have a moment and have rendered it to screen in a local format  then the user changes their timezone  they could remote into a machine after traveling internationally  app running over DST change  etc  the rendered date needs to be re formatted.   Currently I can t see any way for moments to notify of the change  is it intended that the user of the moment would detect underlying timezone/clock changes  potentially on interval compare a stored and current date ?  Thanks ,robmcm,closed,2,2016-07-15 14:21:56,2016-07-17 01:11:48,,,,0,1
10944,moment/moment,3306,Calendar call produces gibberish,I m trying to format a date and moment produces gibberish. [Here] https://jsfiddle.net/yxhonbov/  is a jsfiddle reproducing the issue.      javascript const calendar =     sameDay:  [Today]     nextDay:  [Tomorrow]     nextWeek:  dddd     lastDay:  Yesterday     lastWeek:  dddd     sameElse: moment.ISO_8601     const m = moment  2016 07 14T18:33:07  ; console.log m.calendar null  calendar  ; // prints 201647t4r4pmy     ,eatonphil,closed,3,2016-07-15 20:44:14,2016-07-17 19:26:52,,Troubleshooting,,,0,1
10943,moment/moment,3307,Can t compare current time to two time intervals, I am trying to compare the current time   timeNow   and check if it falls between a time range opening and closing  but I can t do so especially if the current time and closing time is above midnight.  I tried also to convert all the time formats to minutes  but also it didn t worked          var timeFormat2 =  HH:mm:ss ;     var timeNow =  23:12:00 ; // 11:12:00 pm      var opening =  08:00:00 ; // 08:00:00 am  morning time     var closing =  00:12:00 ; //midnight time  i.e 12:12:00 am       var isAvailable = moment timeNow  timeFormat2 .isBetween moment opening  timeFormat2   moment closing  timeFormat2  ;      console.log  will show false >>>>    isAvailable ; //it shows  false       var closing1 =  23:45:00 ;     var isAvailable1 = moment  23:12:00   timeFormat2 .isBetween moment opening  timeFormat2   moment closing1  timeFormat2  ;      console.log  Should show true >>>>    isAvailable1 ;       > Here is a JSfiddle: https://jsfiddle.net/1wuf0rzg/8/ ,HamzaLJ,closed,1,2016-07-15 23:55:41,2016-07-17 00:59:47,,,,0,1
10942,moment/moment,3308,Merge moment duration format plugin,See  1048.  A quick pass at converting @jsmreese s plugin into the Moment module system and stripping out the obviously duplicated code vis a vis Moment s existing helper functions  etc.  I also arbitrarily yanked out the  precision  config option  because I didn t want to keep the  padZero  function that was mostly a duplicate of Moment s  zeroFill   and I didn t care to rework that bit of code right now.  This currently adds 4.8KB to the minified build  which is about  8  of the existing codebase.  That seems a little heavy given our concerns about file size.  On the other hand  there are a number of comments in the code  so this stat may be overstating the actual impact on file size.  I still need to port the tests before we merge this  but I probably won t bother to do so until we decide if the file size impact is prohibitive. ,butterflyhug,closed,10,2016-07-17 03:45:37,2016-10-09 00:29:27,,,,1,1
10941,moment/moment,3309,Not updating moment locale on same page,Hello  I am trying to display time in abbreviated and not abbreviated on same page usin moment.js. But not getting success.   Is there any solution so that I could reset the moment object and update it on same page? ,kamalmlk,closed,4,2016-07-18 07:18:52,2016-07-26 18:11:22,,Troubleshooting,,,0,1
10940,moment/moment,3310,[locale] bn: Better month and weekday names,@kaushikgandhi See if everything s okay? ,shakib609,closed,17,2016-07-18 17:54:05,2016-09-01 10:05:29,,,2.15.0,1,1
10939,moment/moment,3311,How often is the  isDST    function tweaked/reworked?,We are currently only using moment.js with other plugins  just to try and accurately guess as much as possible if the timezone in the US is in DST or just Standard Time.  Based on those in the know  even though best practice are always we should keep the library up to date at all times  if that is the only function we are utilizing  how often is that function being tweaked?  Should we be updating the library with every release or since DST change only occurs here in the US twice a year  would we be fine updating the library once or twice a year?  Thanks guys  ,danbartoninc,closed,1,2016-07-18 18:35:32,2016-07-18 21:39:09,,,,0,1
10938,moment/moment,3312,[bugfix] locales: Enable locale data getters without moment  fixes  3284 ,This possibly fixes the issue  3284. Can you please verify it @icambron ?  In the absence of a moment parameter  it returns a locale specific list. ,theawesomenayak,closed,4,2016-07-19 08:03:47,2016-09-01 10:08:45,,Bug-fix,,2.15.0,1,1
10937,moment/moment,3313,Documentation locale as array,The documentation point out that [ moment.locale ] http://momentjs.com/docs/ /i18n/changing locale/  may receive an array. However  other functions taking a local value are not documented as being able to receive an array. Although it works well: [jsfiddle] https://jsfiddle.net/t22krgLw/ .  Therefore  I wonder if you are not missing the following definitions in your documentation and typescript declaration.  For [changing locales locally] http://momentjs.com/docs/ /i18n/instance locale/   add      moment  .locale String[] ;      For [string format] http://momentjs.com/docs/ /parsing/string format/   add      moment String  String  String[]  [Boolean] ; moment String  String[]  String[]  [Boolean] ;      For [utc] http://momentjs.com/docs/ /parsing/utc/   add      moment.utc String  String  String[] ;     ,denisname,closed,2,2016-07-19 10:58:21,2016-07-20 02:38:50,,Documentation,,,0,1
10936,moment/moment,3314,Moment.min not working correctly with requirejs,I ve found a problem with _moment.min.js_ where it didn t work like the unminified version should do.  Using   moment.min.js   I can t use the loaded locale:      requirejs.config     packages: [      name:  moment       location:  /node_modules/moment       main:  min/moment.min      ]    deps: [      moment/locale/es        app     ]    ;  ......  // == App.js ==  moment.locale  es  ; console.log moment.locales   ; // Shows [ en ] console.log moment.locale   ; // Shows en      But using the unminified version I can use the loaded locale without any problem:      requirejs.config     packages: [      name:  moment       location:  /node_modules/moment       main:  moment      ]    deps: [      moment/locale/es        app     ]    ;  ......  // == App.js ==  moment.locale  es  ; console.log moment.locales   ; // Shows [ en    es ] console.log moment.locale   ; // Shows es      In both cases the locale file loads after momentjs  so is not a loading problem.  PD: I tried to do it in   jsfiddle   but I don t know how to replicate the same example without using _node_modules_. ,JJBocanegra,closed,4,2016-07-20 11:50:11,2017-03-28 04:10:13,,Help Wanted,Loading,Troubleshooting,,,0,1
10935,moment/moment,3315,add typedefiniton to jspm files,otherwise jspm will not install the typedefinitions ,dartzki,closed,1,2016-07-21 15:21:58,2016-07-21 15:31:50,,,,1,1
10934,moment/moment,3316,[misc] typescript: Add moment  .creationData   declaration,The  creationData   function is documented but it is missing in the Typings.  I couldn t find the structure of the  locale  property in the documentation  so I omitted it in this first attempt. If anyone gives me a hint  I will add it. ,nknapp,closed,2,2016-07-22 06:59:30,2016-09-07 08:33:26,,TypeScript,,2.15.0,1,1
10933,moment/moment,3317,[locale] ss: Fix siSwati locale name in comment,During the cleanup of the comments  the name was changed from siSwati to Swazi.   A Swazi is a person and siSwati is the language. ,Nicolaidavies,closed,4,2016-07-22 08:39:56,2016-09-03 05:46:43,,Language,,2.15.0,1,1
10932,moment/moment,3318,local to UTC to local date time conversion giving wrong time,Hi  I am trying to convert the local time to UTC for saving in DB and again to getting the same UTC saved string and converting it to local time but its giving the wrong time.  Please find the jsfiddle for same [https://jsfiddle.net/t50kqmLs/] https://jsfiddle.net/t50kqmLs/   Code:      var localDate =  07/22/2016 03:00 pm ; var utcFormat = moment localDate .utc  .format  YYYY MM DD HH:MM:SS  ; var localFormat = moment.utc utcFormat   YYYY MM DD HH:MM:SS  .local  .format  MM/DD/YYYY hh:mm a  ; console.log  LocalDate:    localDate ; console.log  utcFormat:    utcFormat ; console.log  localFormat:    localFormat ;  var localDate2 =  07/22/2016 03:30 pm ; var utcFormat2 = moment localDate2 .utc  .format  YYYY MM DD HH:MM:SS  ; var localFormat2 = moment.utc utcFormat2   YYYY MM DD HH:MM:SS  .local  .format  MM/DD/YYYY hh:mm a  ; console.log  LocalDate:    localDate2 ; console.log  utcFormat:    utcFormat2 ; console.log  localFormat:    localFormat2 ;      Thanks. ,ovarunendra,closed,3,2016-07-22 11:00:18,2016-07-22 18:33:46,,,,0,1
10931,moment/moment,3319,Add missing isoWeek to UnitOfTime type definition,Add missing definition for isoWeek to UnitOfTime type definition. ,ptMuta,closed,11,2016-07-22 12:29:11,2016-10-20 08:30:36,,TypeScript,,,1,1
10930,moment/moment,3320,option to set default output for  .format   , .format    will output timezone relative WITHOUT milliseconds EG:       > moment 1469141760123 .format    2016 07 21T15:56:00 07:00        .toISOString    will output UTC WITH milliseconds      > moment 1469141760123 .toISOString    2016 07 21T22:56:00.123Z        .format  YYYY MM DDTHH:mm:ss.SSSZ    will output timezone relative WITH milliseconds      > moment 1469141760123 .format  YYYY MM DDTHH:mm:ss.SSSZ    2016 07 21T15:56:00.123 07:00       I find the default timezone relative without milliseconds pretty useless  but don t think I should need to write out the full format every time just to include it.  It would be nice to be able to set the default format output:      // set the default moment.setDefaultFormat  YYYY MM DDTHH:mm:ss.SSSZ  ;  // or moment.format.setDefault  YYYY MM DDTHH:mm:ss.SSSZ  ;  moment 1469141760123 .format  ; //  2016 07 21T15:56:00.123 07:00      ,ilovett,closed,1,2016-07-22 18:05:29,2016-07-23 19:06:53,,,,0,1
10929,moment/moment,3321,Local time doesn t work,.NET webservice returns the following date:  /Date 1469271646000 /   I save the date as UTC date in MySQL database.   When I pass the date to moment.utc value.Planet.when  or moment value.Planet.when  I get the same time on both. It shows me the time 14:00 when it has to be 17:00 to where I live.  Why the conversion doesn t work. The time in the database appear at the correct UTC time  but whatever I do in moment on the client side doesn t reflect the  3GMT time different and show 17:00 as the correct hour?  I use the latest version of moment. ,idansh,closed,2,2016-07-23 14:10:09,2016-07-28 04:28:15,,Troubleshooting,,,0,1
10928,moment/moment,3322,[misc] Updated Changelog to add release dates,Added Release dates in the changelog for help in [ 2330] https://github.com/moment/moment/issues/2330  ,pranjalk,closed,2,2016-07-24 07:26:50,2016-09-03 05:48:23,,Documentation,,2.15.0,1,1
10927,moment/moment,3323,[misc] typescript: refactor constructor and ISO format hack,This commit was adapted from 1ec036686e70ad0d837ed2443684d54bca13af01 in DefinitelyTyped. See https://github.com/DefinitelyTyped/DefinitelyTyped/pull/8765 for context. The original body of the commit message follows.  These changes do two things. 1. Replace very lax typings like  any[]  with stricter  more correct versions. In particular     the  ISO_8601  constant  while _technically_ a void function  is actually an opaque sentinel    that a consumer should not know anything about it. The function type was replaced with a    sentinel type using the principle of  brands  that can be seen in the Typescript compiler:    https://github.com/Microsoft/TypeScript/blob/413d9a639f933df7539070b236c1677de8302a93/src/compiler/types.ts L9 2. Replace the many overloads of the parsing methods with a smaller representative set that    uses union types instead. Aside from succinctness  this allows callers to provide a union    type as the argument  as long as it matches  which was not possible before  Typescript does    not explode the union type to see if overloads cover all the possibilities . ,seansfkelley,closed,6,2016-07-24 09:48:23,2016-09-07 08:39:13,,TypeScript,,2.15.0,1,1
10926,moment/moment,3324,3 tests failed. diff:diff across DST  2270.17  diff:diff across DST  2270.19  diff:year diffs  2277.9  ,    Client info      Date String   : Mon Jul 25 2016 10:57:33 GMT 0100  Maroc  heure d  t    Locale String : 25/07/2016   10:57:33 Offset        :  60 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/51.0.2704.103 Safari/537.36 Moment Version: 2.14.1            diff:diff across DST  2270.17   month diff across DST  lower bound      javascript // Expected true // Actual   false false === true            diff:diff across DST  2270.19   year diff across DST  lower bound      javascript // Expected true // Actual   false false === true            diff:year diffs  2277.9     1.5013458950201883 ===  1.5013440860215055  Jan 1 2012 to Jul 1 2013 noon should be 1.5  0.5 / 31  / 12 years      javascript // Expected true // Actual   false false === true     ,JalalSordo,closed,1,2016-07-25 09:57:45,2016-08-05 04:23:37,,Unit Test Failed,,,0,1
10925,moment/moment,3325,Error: Log data,Error: i is null t.getMonthData   [schermafbeelding 2016 07 25 om 18 00 34] https://cloud.githubusercontent.com/assets/5844859/17107991/e0efecb2 5291 11e6 983c 320c99119701.jpg  ,RS-de-Jong,closed,2,2016-07-25 15:59:37,2016-08-05 05:12:43,,Troubleshooting,,,0,1
10924,moment/moment,3326,[locale] jv: Fix full locale name    Japanese to JaVanese,There was a typo in the Javanese localization  JaPanese instead of JaVanese   which percolated all the way to the momentjs.com site source  causing  Japanese  to appear twice in the list. ,lunardog,closed,4,2016-07-27 04:58:49,2016-09-03 05:50:46,,Language,,2.15.0,1,1
10923,moment/moment,3327,fixing sequence of Arabic days,the sequence of days doesn t match the real day of the week. so it needs to be updated as the same locale file of Tunisia moment/locale/ar tn.js ,kifcaliph,closed,2,2016-07-27 10:05:42,2016-08-05 10:15:50,,,,1,1
10922,moment/moment,3328,No way to get following day of the week,I m trying to get the next occurrence of a day of the week. With this I mean that if today is   Wednesday   and I pass Thursday I should get this week s Thursday  but if I pass Monday I should get next week s Monday.  I understand that  day    modifies the date within the current week  so I have no straightforward way to always get the closest next date with the specified day of the week.   Assuming this:      moment  ._d Wed Jul 27 2016 12:57:43 GMT 0200  CEST        moment  .day 1   will give me a Monday that is in the past.      moment  .day 1 ._d Mon Jul 25 2016 12:59:55 GMT 0200  CEST        moment  .day 7   1   will give me the correct Monday.      moment  .day 7   1 ._d Mon Aug 01 2016 13:00:32 GMT 0200  CEST       But always passing  7    is not the solution either.  moment  .day 7   4   will give me not the day after today  but the Thursday of the next week.      moment  .day 7   4 ._d Thu Aug 04 2016 13:01:17 GMT 0200  CEST       I can of course do something like this but I was expecting a less obscure way.      js     function nextDay day            var now = moment  ;         var day = day < now.day ? 7   day : day         return now.day day ;            Am I missing something? ,OmeGak,closed,1,2016-07-27 11:10:10,2016-07-28 04:04:53,,,,0,1
10921,moment/moment,3329,Format date for SR  BS and HR,Long data format: Replace L :  DD. MM. YYYY  with L :  DD.MM.YYYY . Spaces between dot and next digit are unnecessary   we never write it. ,topguss,closed,6,2016-07-27 13:02:52,2016-12-31 19:30:26,,Language,Up-For-Grabs,,,0,1
10920,moment/moment,3330,Invalid Date on Firefox,moment is giving  Invalid Date  in firefox when using a string like  2016 07 26T17:00:00.000z  .  When converted to uppercase  2016 07 26T17:00:00.000Z  the date is recognized correctly.  Could this be considered a valid utc value?   If not the bug is in .Net framework that generates json date as this  :S    Regards Andre   [error] https://cloud.githubusercontent.com/assets/477538/17180041/82c6e670 53f1 11e6 9bb7 16358a26e78a.png  ,lelis718,closed,3,2016-07-27 14:59:09,2016-07-30 14:52:43,,Troubleshooting,,,0,1
10919,moment/moment,3331,Add Quarter is not using the last day of the month for resulting date,The last day of Quarter 4 should be 12/31.  But moment.js using using 12/30 as the Quarter 4 date.  Same problem for 3/30  should be 3/31   Here is my plunker:  https://embed.plnkr.co/fkGneTsz2OGWjMvrGzLI/   [adding quarter with moment js] https://cloud.githubusercontent.com/assets/2231799/17184688/7200902a 53e2 11e6 8b06 bd16beb52da5.png  ,dereklin,closed,5,2016-07-27 17:11:26,2016-07-28 04:20:40,,,,0,1
10918,moment/moment,3332,moment  2/31/2016  .isValid   returns true,It also returns true for the other months with less than 31 days.   February   April   June   November   moment  2/32/2016  .isValid   returns false.  ,sandbochs,closed,2,2016-07-28 19:00:08,2016-07-28 22:51:42,,,,0,1
10917,moment/moment,3333,[new locale] zh hk: Chinese  Hong Kong  locale,Adds  zh hk  support by copying  zh tw  definition and tests.  I m aware of [parentLocale] https://github.com/moment/moment/pull/2774  option. But combination of  parentLocale  option and  localeModule  test helper is buggy for me. Will try to report the issue in separate pull request as a test case. ,skfd,closed,2,2016-07-28 20:57:35,2016-09-03 05:54:26,,Language,,2.15.0,1,1
10916,moment/moment,3334,Duration get  hours   is inconsistent w/ Duration as  hours  ,    moment.version  2.14.1   moment.duration  55:43   hours  .as  hours   55.71666666666667  moment.duration  55:43   hours  .as  days   2.321527777777778  moment.duration  55:43   hours  .get  days   2  moment.duration  55:43   hours  .get  hours   7 <  this should be 55      tested in  linux / ubuntu 14.04 :   Chrome 52.0.2743.82  64 bit     Firefox 47  BTW thanks for this awesome library    ,Inkata,closed,2,2016-07-28 22:16:52,2016-07-28 22:39:34,,,,0,1
10915,moment/moment,3335,moment  .format   creates invalid date, moment  .format    creates a date that is not valid according to  moment  .isValid     Here is the example:      > moment.version  2.14.1  > moment.locale    fr  > moment  .format  ll    29 juill. 2016  > moment  29 juill. 2016    ll   true .isValid   false      However if I remove the period in the month it works:      > moment  29 juill 2016    ll   true .isValid   true      Or if I disable strict parsing  remove the 3rd parameter  it works:      > moment  29 juill. 2016    ll  .isValid   true      Why is this? Why doesn t  moment  .format  ll    create a date that is valid with strict parsing? ,saravanaj,closed,0,2016-07-29 06:42:28,2016-07-29 08:55:57,,,,0,1
10914,moment/moment,3336,Bug:  parentLocale  option crashes if parent has not been loaded yet,Here s a test case that crashes with  Unexpected deprecation thrown name=parentLocaleUndefined msg=specified parentLocale is not defined yet.   That breaks the real life scenario where localisation  zh hk  depends on  zh tw . But child localisation definition goes before parent in the minimised file. ,skfd,closed,7,2016-07-29 15:53:44,2016-10-29 14:12:56,,Bug,,,1,1
10913,moment/moment,3337,[misc] Remove comments in minified code,Fixes bug  3283: moment.min.js download contains comments . ,skfd,closed,6,2016-07-29 16:31:00,2017-03-02 08:32:07,,Bug-fix,Pending Next Release,,2.18.0,1,1
10912,moment/moment,3338,Beef up formatting tests to communicate    moment undefined  <your favorite format> .toISOString      won t work,Slightly related to  3180. On one hand...      code var k = moment undefined ; k.toISOString    /// This returns ok.      On the other hand...      code var k = moment undefined   YYYY MM DD  ; k.toISOString    /// This returns  invalid date .      It s unintuitive that  moment undefined   behaves as  moment     but  moment undefined  <your favorite format>   is really trying to format undefined and is failing. To help with this  let s add a test to make sure people understand this behavior. ,jfarid27,closed,2,2016-07-29 19:09:41,2016-08-12 05:52:35,,Bug,,,0,1
10911,moment/moment,3339,[tests] Test creation of moment with format and undefined input,Adds tests to cover the creation of a moment with a format when the input is undefined.  fixes  3338 ,jfarid27,closed,2,2016-07-29 19:12:40,2016-09-03 05:57:34,,Bug-fix,Unit Tests Only,,2.15.0,1,1
10910,moment/moment,3340,Update pl.js,fixed typos https://pl.wikipedia.org/wiki/Sobota https://pl.wikipedia.org/wiki/Niedziela ,eximius313,closed,5,2016-08-01 17:44:36,2016-11-01 13:03:33,,,,1,1
10909,moment/moment,3341,Is there any way to locale with month and days only,I looked at the locale source files  and could not find a format to display month and day only without year info. One example from locale/zh cn.js file      longDateFormat :       LT :  Ah mm        LTS :  Ah m s        L :  YYYY MM DD       LL :  YYYY MMMD        LLL :  YYYY MMMD Ah mm        LLLL :  YYYY MMMD ddddAh mm        l :  YYYY MM DD       ll :  YYYY MMMD        lll :  YYYY MMMD Ah mm        llll :  YYYY MMMD ddddAh mm           The list formats all have year. Can you support some format like LM or lm:   MMMD  ?   Please advise. ,lucozhao,open,13,2016-08-01 19:07:43,0000-00-00 00:00:00,,Enhancement,,,0,1
10908,moment/moment,3342,[new locale] tet: Tetun Dili  East Timor  locale,Credit to @marobo for initial release ,joshbrooks,closed,6,2016-08-02 02:57:10,2016-11-07 00:39:44,,Language,,2.16.0,1,1
10907,moment/moment,3343,Use duck typing for testing input format,I am having an issue with my app when I upgraded to latest moment library. It is not a bug in moment  but something I would be very glad if it could be considered:  In our application we are using Proxies for templating/reactive programming. One of the issues with proxies is that Date type is not transparently proxied  so we have to create a small wrapper to make it work seamlessly.  https://github.com/eface2face/object observable/blob/master/index.js  The proxied object is exactly the same as the Date object  except of the prototype name  which is  [object Object]  instead of  [object Date]  .  That is causing that when managing it via moment  the input date is emptied:      javascript  function createLocalOrUTC  input  format  locale  strict  isUTC            var c =   ;          if  typeof locale  ===  boolean                 strict = locale;             locale = undefined;                    if   isObject input     isObjectEmpty input                       isArray input     input.length === 0                 input = undefined; //<      HERE                Not sure how prone you  would be for performing some kind of duck typing on the input object instead of checking the prototype  via  getTime for example .  Note that in our case new Date proxy  works perfectly . ,murillo128,open,4,2016-08-02 10:00:59,0000-00-00 00:00:00,,Enhancement,,,0,1
10906,moment/moment,3344,[pkg] exports: use module.require for nodejs,incase some web package tools inconvenience.  http://stackoverflow.com/questions/25384360/how to prevent moment js from loading locales with webpack/25426019 25426019  https://github.com/webpack/webpack/issues/198  https://nodejs.org/dist/latest v4.x/docs/api/modules.html modules_module_require_id  @ichernev ,yiminghe,closed,19,2016-08-02 10:54:55,2016-09-03 06:00:58,,,2.15.0,1,1
10905,moment/moment,3345,[misc] typescript: Add isoWeekdays str   locales  defaultFormatUtc,I was looking into upgrading the declaration file on DefinitelyTyped so it matched version 2.14.  After I had done most of that  I noticed that you have a more up to date version of the declaration file here.   You had implemented most of the changes that I found  but there was still 3 small things missing from the declaration file here.   Added locales  new since 2.12 Added a new overload of isoWeekday  which is possible since the input is passed through  parseIsoWeekday  since 2.14 Added defaultFormatUtc  new since 2.13. ,webbiesdk,closed,2,2016-08-02 12:22:26,2016-09-07 08:40:53,,TypeScript,,2.15.0,1,1
10904,moment/moment,3346,Arbitrary time offset  client server time synchronization ,Im facing the issue of desynchronized client machine time with server machine time. I can calculate time delta between them but  un? fortunately I m using  moment  everywhere to get time on client.  I m wondering if I ve to replace every call to  moment  to custom function or if there s some non invasive way to adjust receiving of current time from  moment  by my time delta? ,Machiaweliczny,closed,2,2016-08-02 13:04:27,2016-08-02 14:25:16,,,,0,1
10903,moment/moment,3347,2 tests failed. diff:diff across DST  2270.17  diff:diff across DST  2270.19  ,    Client info      Date String   : Wed Aug 03 2016 14:12:11 GMT 0300  Jerusalem Daylight Time  Locale String : 8/3/2016  2:12:11 PM Offset        :  180 User Agent    : Mozilla/5.0  Windows NT 10.0; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/51.0.2704.103 Safari/537.36 Moment Version: 2.14.1            diff:diff across DST  2270.17   month diff across DST  lower bound      javascript // Expected true // Actual   false false === true            diff:diff across DST  2270.19   year diff across DST  lower bound      javascript // Expected true // Actual   false false === true     ,buzzdan,closed,1,2016-08-03 11:15:13,2016-08-05 04:08:24,,Unit Test Failed,,,0,1
10902,moment/moment,3348,toISOString   creates two different times,When I have 2 dates:  2015 01 06T00:00:00  and  2014 06 06T00:00:00       moment  2015 01 06T00:00:00  .toISOString  :  2015 01 06T03:00:00.000Z  moment  2014 06 06T00:00:00  .toISOString  :  2014 06 06T04:00:00.000Z       What I don t understand is  why moment uses different time for each date?  T03 vs T04  This is the output of the same console in the same computer in the same regional configuration. ,blogcraft,closed,7,2016-08-03 22:24:26,2016-08-04 00:12:37,,,,0,1
10901,moment/moment,3349,Allow non strict parsing to specify minimally allowed precision,Issue  3168 demonstrates how specifying multiple input formats while in strict mode can get out of hand and lead to performance problems.  It would be good if there was some way to stay in non strict mode  while retaining control of the required precision of input.  For example:      moment  2016 foo    YYYY MM DD HH:mm:ss  .isValid   // true  though probably undesired moment  2016 08 04    YYYY MM DD HH:mm:ss  .isValid   // true  and probably ok      Not sure what the API would look like.  Perhaps pass a string of required tokens like   YMD   as another parameter?  Or perhaps just indicate the required portion inline with some chosen characters  as in:      moment  2016 08 04     YYYY MM DD  HH:mm:ss       ,mj1856,open,0,2016-08-05 05:46:42,0000-00-00 00:00:00,,Enhancement,,,0,1
10900,moment/moment,3350,fixed korean long date format,fixed korean long date format.   ,bigtone1284,closed,7,2016-08-05 07:30:40,2016-11-27 22:58:23,,,,1,1
10899,moment/moment,3351,[locale] ko: Change  m  date translation      to  1  ,  Usually korean writes  one minute  as  1   not      ,colus001,closed,7,2016-08-05 08:11:18,2017-03-02 08:35:26,,Pending Next Release,,2.18.0,1,1
10898,moment/moment,3352,fixing day sequence to match the real day,changed from src we need to fix the day sequence to match the real day and not just visually. the problem is the calendar appears to be like  August 2016 Fr    Sa    Su    Mo    Tu    We    Th 31    1     2       3      4      5      6  Friday is supposed to be the 5th of the month ,kifcaliph,closed,7,2016-08-05 10:12:33,2016-11-01 13:12:11,,,,1,1
10897,moment/moment,3353,Inconsistency in start of week definition between calendar s  lastWeek  and startOf  week  ,startOf  week   gives the start of the previous Sunday  however calendar will place the previous Saturday in  lastWeek :      javascript var prevSunday    = moment  .startOf  week  ;                    // Previous Sunday var prevSaturday  = moment  .startOf  week  .subtract 1   day  ; // Previous Saturday var prevFriday    = moment  .startOf  week  .subtract 2   day  ; // Previous Friday  console.log prevSunday.calendar   ;   //  lastWeek  console.log prevSaturday.calendar   ; //  lastWeek should be sameElse for consistency with startOf  week    console.log prevFriday.calendar   ;   //  sameElse      ,thodic,closed,2,2016-08-05 11:53:05,2016-10-20 00:12:09,,Troubleshooting,,,0,1
10896,moment/moment,3354,Converting  Jul 31 2016  Date object gives  July 0 ,Date Object:  Sun Jul 31 2016 16:43:45 GMT 1000  AEST   Formatted with  moment stats.mtime .format  MMM d  YYYY    Outputs  Jul 0  2016   Version  2.14.1  Node  6.3.0  ,kurisubrooks,closed,2,2016-08-05 12:31:37,2016-08-05 12:55:56,,,,0,1
10895,moment/moment,3355,Allow Decimals to bubble down in setters.,Example of desirable behaviour:  moment  .hour 3.5 .minute   === 30   moment  .set  second   2.5 .millisecond == 500  Similar to the duration setter:  moment.duration 2.5   hours  .minutes   === 30  ,xMrWhite,closed,6,2016-08-06 02:22:23,2016-08-12 11:04:40,,Enhancement,,,0,1
10894,moment/moment,3356,[locale] bs hr me sl sr sr cyrl: Change  DD. MM. YYYY  to  DD.MM.YYYY  in L,First time making a PR for moment and I tried to follow the contributing guidelines as much as possible. Since  3329 changed format  the PR failed those tests. Is there a need to rewrite those tests so that the new convention is followed? Thanks  Signed off by: shaishavgandhi05 shaishgandhi@gmail.com ,shaishavgandhi05,closed,8,2016-08-06 04:25:16,2016-09-03 06:07:00,,Language,,2.15.0,1,1
10893,moment/moment,3357,moment  .startOf  day   returns yesterday,Hi  I m trying to use  moment  .startOf  day    but it gives me the date of yesterday :       js const moment = require  moment timezone  ;  moment.tz.setDefault  Europe/Paris  ;  const     TODAY           = moment  .startOf  day        TOMORROW = moment  .add 1   day  .startOf  day  ;  console.log  now   moment  .format   ; // now 2016 08 07T02:01:00 02:00 console.log  today   TODAY.format   ; // today 2016 08 06T00:00:00 02:00 <   why ? console.log  tomorrow   TOMORROW.format   ; // tomorrow 2016 08 07T00:00:00 02:00 <   why ?      My server is in UTC and runs this code at 00:01  UTC  / 02:01  Europe/Paris  every day. If I run this locally by hand now at 07:28  Europle/Paris   I see no error. What could be the reason ?  Thanks    ,guillaumewuip,closed,3,2016-08-07 05:29:16,2016-08-09 05:39:40,,Bug,,,0,1
10892,moment/moment,3358,Feb 29 0000 is invalid,Hello   Consider this:      javascript      moment  year:0  month:1  date:29  .isValid  ; //false     //vs         moment  year:0  month:1  date:28  .add 1   d  .isValid  ; //true      :/  Is this expected behavior? Seems inconsistent. ,metasansana,closed,10,2016-08-07 19:09:57,2017-08-06 23:32:59,mj1856,Bug,,,0,1
10891,moment/moment,3359,Single digit month/day parsing giving false negative,This problem occurs if I use the pattern  MDYY :      javascript moment  .format  MDYY  ; //  8816  moment  8816    MDYY  .isValid  ; // false and it should be true      You can find the conflicting function  getParseRegexForToken  [here] https://github.com/moment/moment/blob/b135bf1a6d58ff94287f0a21455bfa6a1ddc7226/src/lib/parse/regex.js L37 .      javascript getParseRegexForToken  M   === / d d/;      The  M  token is gobbling up both  8  s at the beginning of our string  when it should only grab one. Maybe a better approach is to create a more specific regex  / 1[0 2] [1 9] /  for months and  / 3[0 1] [1 2] d [1 9] /  for days.  A stronger approach may even be to construct an entire regex for the entire string. For example  MDYY would create the regex:  / 1[0 2] [1 9]  3[0 1] [1 2] d [1 9]   d d /   which could be used with  string.match regex   to immediately parse out the important pieces of the pattern. ,YourDeveloperFriend,closed,1,2016-08-09 00:14:41,2016-08-09 00:48:33,,,,0,1
10890,moment/moment,3360,Formatting: format  x   and format  X   return  x  /  X ,Hi  First of all  thanks for your amazing effort   That s a pretty convenient lib :D        I m actually issuing a small bug  I suppose that  actually not sure . When I m trying to get the unix timestamp from a moment object  I just get back the string format. For instance  if I m passing   x   as  format  argument  I m getting back the   x  .    Configuration :   OS: Linux debian jessie   nodejs: v6.3.1   momentjs: 1.1.14    installation command  To install moment  I m using the following command:  npm install   save momentjs     Issue description  The format output is an  x  for  moment  .format  x    and an  X  for  moment  .format  X   .    How to reproduce 1. install momentjs with the command presented above 2. launch a terminal then enter in a node shell 3. enter the following code      javascript var now = moment    ts = now.format  x  ; console.log ts ; // it will output  x      ,ollie314,closed,3,2016-08-09 18:09:41,2016-08-09 18:25:58,,,,0,1
10889,moment/moment,3361,Drop ie8 yay 3288,This is a first crack at fixing  3288.  Thoughts or feedback appreciated :  ,ducks,closed,5,2016-08-10 22:30:27,2016-08-10 23:46:30,,,,1,1
10888,moment/moment,3362,1 test failed. week year:week numbers 2012/2013  2446.7  ,    Client info      Date String   : Thu Aug 11 2016 16:37:03 GMT 0800          Locale String : 2016/8/11   4:37:03 Offset        :  480 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/51.0.2704.106 Safari/537.36            week year:week numbers 2012/2013  2446.7       javascript // Expected 53 // Actual   52 52 === 53     ,acerlawson,closed,1,2016-08-11 08:37:47,2016-08-12 03:06:55,,Unit Test Failed,,,0,1
10887,moment/moment,3363,Update pt br.js,Fix weekdaysMin to default brazilian use   See windows 7 pt br example:  https://cdn.img42.com/9c121c8c9de9cff1fc499ae3d4736308.jpeg ,alexishida,closed,2,2016-08-11 15:39:46,2016-08-12 03:26:24,,,,1,1
10886,moment/moment,3364,moment.duration.days returns radically different result than asDays,There s something I m not getting. Either that or it s a bug. Tested with latest  2.14.1  version in Chrome 51.0.2704.103 on iOS 10.11.5.      var now = moment          later = moment  20161023    YYYYMMDD          diff_ms = later.diff now         dur = moment.duration diff_ms   ms  ;  console.log dur.days   ;    // 11 console.log dur.asDays   ;  // 72.06...     ,gamecubate,closed,1,2016-08-12 02:28:19,2016-08-12 03:02:24,,,,0,1
10885,moment/moment,3365,Update pl.js,fixed typos ,eximius313,closed,1,2016-08-12 09:15:52,2016-11-27 23:34:15,,,,1,1
10884,moment/moment,3366,[locale] pl: Update weekday short strings,fixed typos ,eximius313,closed,7,2016-08-12 09:17:59,2016-11-07 00:55:02,,Language,,2.16.0,1,1
10883,moment/moment,3367,Incorrect week addition calculations over year boundary,There seems to be some discrepancy as to how week addition  e.g.  moment  .add 1   week     works when it occurs over a year boundary.  On some occasions it overflows correctly to the next year  and on others it revert back to the same year as the original date.  Examples in this [jsFiddle] http://jsfiddle.net/tnqeba5q/   Note: some years have 53 weeks. This is expected. ,bluematt,closed,1,2016-08-12 11:33:29,2016-08-12 16:42:54,,,,0,1
10882,moment/moment,3368,Constants for Time,It would be useful to have constants that I can use in various calculations that moment does not supply.  Constants would be things like   HOURS_PER_DAY   MINUTES_PER_HOUR   HOURS_IN_MINUTES   MILLIS_PER_SECOND   SECOND_IN_MILLIS ,merlinpatt,closed,6,2016-08-12 20:05:25,2017-04-21 16:19:01,,,,0,1
10881,moment/moment,3369,Adding locale for Algeria,,nlouahedj,closed,6,2016-08-12 22:35:44,2016-08-25 07:31:19,,Language,Needs Revision,,,1,1
10880,moment/moment,3370,1 test failed. locale:br:month parsing correctness  223.289  ,    Client info      Date String   : Sat Aug 13 2016 20:32:52 GMT 0700  Pacific Daylight Time  Mexico   Locale String : 8/13/2016  7:32:52 PM Offset        : 420 User Agent    : Mozilla/5.0  Windows NT 6.3; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/52.0.2743.116 Safari/537.36 Moment Version: 2.14.1            locale:br:month parsing correctness  223.289   Script error.      javascript // Expected undefined // Actual   null null === undefined     ,eddbs,closed,1,2016-08-14 03:33:57,2017-03-19 01:50:44,,Unit Test Failed,,,0,1
10879,moment/moment,3371,fix bug when used in typescript and browser side,code example:      ts /// <reference types= moment /> moment  ;      the error message is  can not find moment  so I compare it with some similar library s typings  eg  socket.io client https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/socket.io client/socket.io client.d.ts  it declares a module  socket.io client    so I tried to do something similar  it did fix the error.  and it doesn t affect: nodejs side       ts import   as moment from  moment ; moment  ;     ,plantain-00,closed,9,2016-08-15 11:25:47,2016-08-30 00:34:34,,TypeScript,,,1,1
10878,moment/moment,3372,[misc] benchmarks: Add add  subtract  endOf  query benchmarks,I had a specific need to test and understand the relative cost of several operations in moment for one of the applications I am working on. I felt it would make sense to offer some of these benchmarks back upstream.  ,joineral32,closed,2,2016-08-15 21:32:57,2016-09-03 06:09:10,,,2.15.0,1,1
10877,moment/moment,3373,Highlighting Arabic text causes Safari to crash,Observed on momentjs homepage. Selecting Arabic  ar  as localization  then highlighting more than a single word in the Arabic examples causes Safari to crash and need to reload the page. This does not occur for other Arabic text on Safari ,JacksonKearl,closed,8,2016-08-16 06:19:02,2016-08-25 03:04:04,,Troubleshooting,,,0,1
10876,moment/moment,3374,Add missing types to unitOfTime union, moment  .set  date    1   yields the first day of the month as documented at http://momentjs.com/docs/ /get set/set/ I tried the  dates  and  D  alternatives in moment@2.14.1 and they have the same behavior. ,aluanhaddad,closed,4,2016-08-16 16:37:22,2016-08-17 22:11:53,,TypeScript,,2.15.0,1,1
10875,moment/moment,3375,Issue with Canadian French ordinal ,Hi   i know only small portion of people would use French Canadian  such as Quebec  but found a bug in ordinal.  in fr.js      ordinal : function  number         return number    number === 1 ?  er  :    ;        but in fr ca.js       ordinal : function  number          return number    number === 1 ?  er  :  e  ;        Ordinal should be same as French  which is  er  only after number 1.  Thanks ,smilehyun,open,6,2016-08-16 17:17:01,0000-00-00 00:00:00,,Language,,,0,1
10874,moment/moment,3376,NPM package size of moment.js is bothersome,I checked the file size of my  ./node_modules  folder and it seems that moment.js is the heaviest non C library.   2.1MB   is quite a lot. A quick look in the folder size shows:   [https://gyazo.com/60cb5b6e69c76767c6d001669ff25a2d] https://i.gyazo.com/60cb5b6e69c76767c6d001669ff25a2d.png   Most of the weight comes from publishing compressed versions of moment.js with  npm  as well as double publish all the locales. But the locales alone are quite heavy by themselves.  As such I thought it might be good for moment.js and the community to reduce this amount?    [ ] Would it be possible to omit the  ./src  folder from being published to  npm ?   [ ] Would it be possible to omit the  ./min  folder from being published to  npm ?   [ ] Would it be possible to move the  ./locales  folder into a separate  npm  package to reduce moment to the minimum? ,martinheidegger,closed,11,2016-08-16 22:31:42,2016-10-31 02:50:31,,Build/Release,,,0,1
10873,moment/moment,3377,Mongolian locale for momentJS,,Zorig,closed,1,2016-08-17 03:45:52,2016-08-18 08:26:16,,,,1,1
10872,moment/moment,3378,jv language code is for Javanese.,Hopefully this patch will fix the home page too  it currently has 2 entries called  Japanese  . ,gmarty,closed,1,2016-08-17 14:29:40,2016-08-22 17:32:03,,,,1,1
10871,moment/moment,3379,UnitOfTime type definition is incomplete,Hi   first of all: I m very happy that moment comes with type definitions for typescript  Good job   But I noticed that the definition of  UnitOfTime  doesn t seem to be complete. It is missing  isoWeek . ,eXaminator,closed,1,2016-08-17 18:49:04,2016-08-17 22:07:32,,TypeScript,,,0,1
10870,moment/moment,3380,Incorrect week setters with non english locales,Something strange is happening with non english locales when setting weeks:      js moment  year: 2023  .week 1 .format   //  2023 01 01T00:00:00 01:00  moment.locale  nl   // which locale doesn t seem to matter moment  year: 2023  .week 1 .format   //  2022 01 09T00:00:00 01:00       Obviously I expect both of them to give the same result. ,ntkoopman,closed,4,2016-08-18 15:09:05,2016-08-21 03:35:39,,Troubleshooting,,,0,1
10869,moment/moment,3381,[bugfix] parsing: Fix parseZone without timezone in string  fixes  3083,Calling parseZone without a timezone had unexpected results. Followed guidelines from  3083 for correcting the issue.  Fixes:  3083 ,schempy,closed,2,2016-08-19 03:24:14,2016-09-03 06:15:11,,,2.15.0,1,1
10868,moment/moment,3382,Mongolian locale for momentJS,,Zorig,closed,4,2016-08-19 03:24:18,2017-01-08 04:21:48,,Language,Needs Revision,Needs tests,,,1,1
10867,moment/moment,3383,[bugfix] toJSON: Fix isValid so that toJSON works after a moment is frozen,A small fix so that moments can be serialized with  JSON.stringify  after  Object.freeze  has been used on it. ,ben-ng,closed,5,2016-08-19 14:37:12,2016-09-03 06:32:10,,Bug-fix,,2.15.0,1,1
10866,moment/moment,3384,Invalid Date,Hello   since the last update i get an error with this code:  moment 20160811 .format  YYYY MM DD  ;  Regards ,anagas,closed,1,2016-08-19 16:34:21,2016-08-19 20:50:05,,,,0,1
10865,moment/moment,3385,Mocking utc with sinon and GMT,This seems somehow related to  2871: using [sinon] http://sinonjs.org/  and  moment  .utc    do not seems to correctly handle the current day if there is some GMT   2:00 on my machine .      javascript var expect = require  chai  .expect; var sinon = require  sinon  ;  var moment = require  moment  ;  describe  moment   function         it  should handle utc with sinon   function             var startOfTime = moment  2016 08 01  .valueOf  ;         sinon.useFakeTimers startOfTime ;          var startOf = moment  .startOf  day  ;         var utc = moment  .utc  ;          // those are the same instant in time         expect startOf.valueOf   .equal utc.valueOf   ;          // but they re not showing the same day         expect startOf.day   .equal 1 ;         expect utc.day   .equal 1 ; // fails  returns 0 instead of 1         expect moment utc.toDate   .day   .equal 1 ; // succeed  but seems weird       ;   ;      The test can be fixed the following way  but should not need that trick  IMO. But  maybe I miss something ;  .      javascript var expect = require  chai  .expect; var sinon = require  sinon  ;  var moment = require  moment  ;  describe  moment   function         it  should not need offsetting to handle utc with sinon   function             var offset = moment  .utcOffset  ;         var startOfTime = moment  2016 08 01  .minutes offset .valueOf  ;         sinon.useFakeTimers startOfTime ;          var startOf = moment  .startOf  day  ;         var utc = moment  .utc  ;          // those are not the same instant in time anymore         expect moment  .startOf  day  .minutes offset .valueOf   .equal utc.valueOf   ;          expect startOf.day   .equal 1 ;         expect utc.day   .equal 1 ; // succeed       ;   ;      Thanks for your help. ,yamsellem,closed,2,2016-08-20 10:33:27,2016-08-21 22:00:07,,,,0,1
10864,moment/moment,3386,With no argument  or an empty list argument  both .min   and .max   return  now ,I have found the following behaviour of both  .min    and  .max    to be surprising  and potentially unintended.  All of the calls below return a valid  now  Moment object  just as if simply invoking  moment   :    moment.min       moment       moment.max       moment       moment.min []      moment       moment.max []      moment     I wouldn t expect that looking for the min/max value of an empty set would result in a brand new and valid object being returned.  For this edge case  wouldn t it be better to return a value that is easier to process  such as  undefined ? Or maybe  if these functions are expected to stay close to their  Math  counterpart  an  Infinity ?  For reference:    Math.min        Infinity    Math.min []      0     Math.max       Infinity    Math.max []      0    Underscore:  min      min []       Infinity    max      max []      Infinity    Lodash:  _.min      _.max      _.min []     _.max []      undefined   Apologies if this has been discussed and decided before  I couldn t find any evidence of this in the issues that I have searched  and this particular edge case seems [untested] https://github.com/moment/moment/blob/develop/src/test/moment/min_max.js  . ,coox,open,3,2016-08-21 22:35:05,0000-00-00 00:00:00,,Enhancement,,,0,1
10863,moment/moment,3387,Inconsistent TZ when parsing string without TZ specified,Hey  I m seeing some very strange behaviour with string parsing  look at timezones moment resolves   moment  2.14.1  tested in node v6.3.1 chromium Version 52.0.2743.82  64 bit       > moment  2016 11 01 00:00:00  .format    2016 11 01T00:00:00 01:00  > moment  2016 10 01 00:00:00  .format    2016 10 01T00:00:00 02:00       am I missing something or is this a bug? Thanks  ,leshy,closed,1,2016-08-22 08:20:51,2016-08-22 09:01:55,,,,0,1
10862,moment/moment,3388,[misc] ISO deprecation clarification and better deprecation trace,This PR is based on an issue I originally report for moment recur. https://github.com/c trimm/moment recur/issues/42 issuecomment 241264909  The warning message is updated to provide more detail and clarity. The deprecation message function expands one level of detail for any argument that is an object. ,DDSmileyIII,closed,2,2016-08-22 16:20:25,2016-09-03 06:33:54,,Enhancement,,2.15.0,1,1
10861,moment/moment,3389,Error in deprecation warning when calling moment  .min,When calling moment  .min there s a warning saying you should use moment.max instead. That s probably an error  see console output at http://jsfiddle.net/a8L0wmab/ .      Deprecation warning: moment  .min is deprecated  use moment.max instead. http://momentjs.com/guides/ /warnings/min max/ Arguments: Tue Aug 23 2016 15:55:15 GMT 0500 Error     at Moment.min  http://momentjs.com/downloads/moment.js:285:105      at window.onload  http://fiddle.jshell.net/_display/:50:22      ,nidu,closed,3,2016-08-23 10:59:54,2016-08-24 17:13:20,,Bug,,,0,1
10860,moment/moment,3390,Month names not correct in fa locale,In https://github.com/moment/moment/blob/develop/locale/fa.js month names are being cited as  months :        _     _    _     _  _    _     _   _       _     _      _       .split  _     although they are Persian form of Gregorian month names differ in Jalali calendar.  For example January is equal to        instead of       .  I can correct month names and send you a pr. Or we can discuss here further. Thanks. ,mehrdaad,closed,2,2016-08-24 13:36:50,2016-08-24 16:23:43,,,,0,1
10859,moment/moment,3391,Meteor with moment and heroku won t build,Hi there    When I use this package with heroku and meteor  the build always fails. When I remove the package  everything works. I m not sure why this is happening.  Has anyone else experienced this issue?  Cheers  Clement ,clemnz,closed,2,2016-08-24 16:04:26,2016-08-24 17:13:57,,Troubleshooting,,,0,1
10858,moment/moment,3392,Create ur.js,Please add Urdu language translation which i have commited.  ,yethrosh,closed,7,2016-08-25 02:30:39,2017-01-08 04:26:54,,Language,Needs Revision,,,1,1
10857,moment/moment,3393,[new locale] ar dz: Arabic  Algeria  locale,,nlouahedj,closed,5,2016-08-25 07:35:22,2016-11-06 10:10:46,,Language,,2.16.0,1,1
10856,moment/moment,3394,Ignores minified files  adds grunt command to include them on release,Looks like release files are a constant pain for newcomers. This PR proposes a  way to make development smoother.  Most developers will have minified files ignored by default. Release person will be able to run  grunt exec:git include minified  to be able to push them.  TODO: I m not sure if it should be ran on  grunt release  too. Also read.me would have to be changed by English speaking person.  What do you think? ,skfd,closed,6,2016-08-25 08:40:19,2017-02-04 08:00:34,,Pending Next Release,,2.18.0,1,1
10855,moment/moment,3395,Moments.js not formatting date for following format.,moment  Monday  01 August  2016 12:00 PM   dddd  dd MMMM  YYYY h:mm  A  .format  MM/DD/YYYY hh:mm:ss a    Output is   01/01/0000 12:00:00 am  Invalid Date. ,manishgobade,closed,1,2016-08-25 11:32:41,2016-08-25 12:14:29,,,,0,1
10854,moment/moment,3396,[locale] gl: Improve month  weekday names  datetime formats  doy,Includes the following corrections to the Galician locale  @juanghurtado :   Months and days of week changed to lowercase  references below     en     un   contraction for future times has been generalized   Corrected first week of the year  ISO 8601   Both source and test code have been updated.  References for lowercase months and days:   Real Academia Galega:   http://academia.gal/dicionario searchNoun.do?nounTitle=mes   http://academia.gal/dicionario searchNoun.do?nounTitle=semana   Manual de estilo Diario Oficial de Galicia: http://wikidog.xunta.es/index.php/Mai C3 BAscula_e_min C3 BAscula_en_inicial_de_palabra Divisi.C3.B3ns_temporais.2C_etapas.2C_acontecementos_hist.C3.B3ricos.2C_festividades_conmemorativas_e_relixiosas ,fidelpita,closed,2,2016-08-26 06:44:03,2016-09-03 06:47:53,,Language,,2.15.0,1,1
10853,moment/moment,3397,add isPM   to typescript type definition,,otelnov,closed,1,2016-08-26 10:01:22,2016-09-07 13:41:40,,TypeScript,,,1,1
10852,moment/moment,3398,[locale] th: Shorten LT and LTS formats,The translation team I m working with is interested in shortening the time format in Thai to H:mm as opposed to written out with  hours  and  minutes .   @sirn Let us know if this is an acceptable change. ,JohnMacAslan,closed,5,2016-08-26 13:07:40,2016-09-03 07:12:09,,,2.15.0,1,1
10851,moment/moment,3399,Localized date with day of week without time,Is there plans or ability to add a localized date with the day of the week that does not include the time?  Thanks  ,dustinsmith1024,open,3,2016-08-26 17:04:27,0000-00-00 00:00:00,,Enhancement,Language,,,0,1
10850,moment/moment,3400,In Portuguese first day of the week should be Sunday  not Monday,In moment with locales.min.js for locale pt br  the first day of the week is specified as Monday. It should be Sunday. This dow override is not present in the unminified moment with locales.js.   kg.defineLocale  pt br   ...  dow:1 // Monday is the first day of the week. doy:4      ,vdewinter,closed,3,2016-08-26 17:12:31,2016-08-31 14:08:29,,Enhancement,Language,Up-For-Grabs,,,0,1
10849,moment/moment,3401,There are no locales included in the official Meteor package,See issue title. Using this on the client and server side of Meteor with the official package  momentjs:moment .  In version  2.14.4    moment.locale  en nz    returns  en    and this isn t just a display problem  as  moment moment  .week     w ww .format  Do    returns a Sunday  https://github.com/moment/moment/blob/develop/locale/en nz.js says it should be a Monday .    Environment:   Chrome 52 OSX      js console.log   new Date   .toString    => Mon Aug 29 2016 13:22:41 GMT 1200  NZST  console.log  new Date   .toLocaleString    => 8/29/2016  1:22:41 PM console.log   new Date   .getTimezoneOffset    =>  720 console.log  navigator.userAgent  => Mozilla/5.0  Macintosh; Intel Mac OS X 10_11_6  AppleWebKit/537.36  KHTML  like Gecko  Chrome/52.0.2743.116 Safari/537.36 console.log moment.version  => 2.14.4     ,Bandit,closed,2,2016-08-29 01:26:05,2016-08-29 01:56:16,,,,0,1
10848,moment/moment,3402,Fix typings for startOf  endOf to support  isoweek ,  Issue:    Since 2.2.0  moment startOf  isoWeek   support has been added. However  this no longer works in 2.14.1  since type has been changed to  startOf unitOfTime: UnitOfTime : Moment  and  isoweek  is not listed as a supported value for UnitOfTime.  Breaking change: https://github.com/moment/moment/commit/171ce25542ffbbb6bb8f905093b4fae39e1c7b50    Environment:    _Moment 2.14.1  Nodejs 4.50  npm 3.10.6_ ,annael,closed,2,2016-08-29 10:36:04,2017-03-29 06:01:27,,TypeScript,,,0,1
10847,moment/moment,3403,Unix timestamps .fromNow  ,Hello   I have a problem with parsing Unix timestamps from the Hacker News API.  When I do  moment unix .fromNow    where  unix  is  1472435880  is will return  47 years ago  with every value.  I m probably doing something wrong  but can;t find the problem.  Thanks in advance.  Theo  ,theobouwman,closed,2,2016-08-29 11:13:26,2016-08-29 13:20:28,,,,0,1
10846,moment/moment,3404,add license to bower.json,,anotheredward,closed,2,2016-08-29 22:48:00,2016-09-14 16:55:33,,,,1,1
10845,moment/moment,3405,moment unix_timestamp .format  YYYY MM DD   bug?,    js    for  let i = 0; i <= 1000; i                  let a = moment 1472551404 .format  YYYY MM DD  ;             console.log i ;                in Chrome console :   [moment_bug] https://cloud.githubusercontent.com/assets/6243826/18085204/bf56415c 6edc 11e6 8e18 a7e9f878289d.png   when loop 392 it stop to continue. bug or I use in a wrong way  ,pingfengafei,closed,1,2016-08-30 10:10:13,2016-08-31 16:53:50,,,,0,1
10844,moment/moment,3406,Default to current week.,Default to current week when parsing without a month  day or year.  The following will default to the Thursday of the current week:      js var d = moment  Thursday 8:30pm   [ dddd h:mm a ]   en  ;      Fixes:  2300 ,schempy,closed,2,2016-08-31 03:26:24,2016-10-20 16:16:35,,Bug-fix,,,1,1
10843,moment/moment,3407,Change time format for fr locale,  Change LT time format from 12:30 to 12 h 30   Change LTS time format from 12:30:15 to 12 h 30 min 15 s   Updated tests accordingly  @jfroffice   can you please review?  Thank you  ,amandine-perichon,closed,2,2016-08-31 04:14:53,2016-09-14 16:38:05,,Language,,,1,1
10842,moment/moment,3408,set Sunday as the first day of the week for  pt br  locale,  add  week  object to  pt br  locale with property  dow  as 0.   add test for it  fixes [ 3400] https://github.com/moment/moment/issues/3400  ,Salasar,closed,1,2016-08-31 09:47:21,2016-08-31 18:01:30,,,,1,1
10841,moment/moment,3409,Strict parsing   moment dateString  format    is failing,    js moment  moldovka2    YYYY MM DDTHH:mm:ss.SSSZ  .toDate   // Tue Jan 01    2 00:00:00 GMT 0200  EET  moment  moldovka2    YYYY MM DDTHH:mm:ss.SSSZ  .isValid   // true      How to reproduce: 1. Go to http://momentjs.com/  Chrome Version 52.0.2743.116  64 bit  in Ubuntu 16.04  2. Open dev console 3. Enter code from example above   Time and date when this was run is  Wed Aug 31 2016 14:48:48 GMT 0300  EEST         console.log   new Date   .toString    console.log  new Date   .toLocaleString    console.log   new Date   .getTimezoneOffset    console.log  navigator.userAgent  console.log moment.version  VM83:1 Wed Aug 31 2016 14:49:18 GMT 0300  EEST  VM83:2 8/31/2016  2:49:18 PM VM83:3  180 VM83:4 Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/52.0.2743.116 Safari/537.36 VM83:5 2.14.1     ,titarenko,closed,2,2016-08-31 11:50:03,2016-08-31 16:55:00,,,,0,1
10840,moment/moment,3410,The Dutch internationalization is different for The Netherlands  nl nl  than for Belgium  nl be ,  Description of the Issue and Steps to Reproduce:    Using the localization for Belgium is wrong. In Belgium the separator symbol is  /  and in The Netherlands is    .  The current localization  nl  should be  nl nl  and it is needed another one  nl be  with the following change:      longDateFormat :               LT :  HH:mm               LTS :  HH:mm:ss               L :  DD/MM/YYYY               LL :  D MMMM YYYY               LLL :  D MMMM YYYY HH:mm               LLLL :  dddd D MMMM YYYY HH:mm                 Best regards. ,deidigitalis,closed,2,2016-08-31 13:01:39,2016-11-25 08:44:54,,Language,,,0,1
10839,moment/moment,3411,utcOffset method missing in 2.14.1 ,  Description of the Issue and Steps to Reproduce:        javascript moment  .utcOffset  3 ; moment.utcOffset  3 ;  let date_from = moment cart.deliveries[0].calendar.date_from ; date_from.format  DD [de] MMMM [de] YYYY [entre las] HH:mm  .utcOffset  3       The examples above won t work.  Error: utcOffset is not a function  Alerted in the server .  _Please include the values of all variables used._    Environment:   Chrome Latest on OSX el capitan. Node V6.4.0. Moment.js 2.14.1 installed via npm. ,guillermosnipegb,closed,2,2016-08-31 14:47:14,2016-08-31 16:52:00,,,,0,1
10838,moment/moment,3412,DST offset is invalid when date is created on winter dst change,  Description of the Issue and Steps to Reproduce:        javascript x=moment.tz  2016 12 06T00:00:00   YYYY MM DDTHH:mm:ss   America/Chicago   x.format   Result:  2016 12 06T00:00:00 06:00  Expected:  2016 12 06T00:00:00 05:00       _Please include the values of all variables used._    Environment:   chrome on osx  _Examples: Chrome 49 on OSX  Internet Explorer 10 on Windows 7  Node.JS 4.4.4 on Ubuntu 16.0.4_  _Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application._    Other information that may be helpful:     The time zone setting of the machine the code is running on   Asia/Karachi   The time and date at which the code was run   Sep1 12:53am local time   Other libraries in use  TypeScript  Immutable.js  etc   If you are reporting an issue  please run the following code in the environment you are using and include the output:      js console.log   new Date   .toString    console.log  new Date   .toLocaleString    console.log   new Date   .getTimezoneOffset    console.log  navigator.userAgent  console.log moment.version       console.log   new Date   .toString    Thu Sep 01 2016 00:54:21 GMT 0500  PKT   console.log  new Date   .toLocaleString    9/1/2016  12:55:01 AM  console.log   new Date   .getTimezoneOffset     300  console.log  navigator.userAgent  Mozilla/5.0  Macintosh; Intel Mac OS X 10_11_6  AppleWebKit/537.36  KHTML  like Gecko  Chrome/52.0.2743.116 Safari/537.36  console.log moment.version  2.14.1  _Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer._ ,chaudhryjunaid,closed,1,2016-08-31 19:58:00,2016-08-31 20:00:32,,,,0,1
10837,moment/moment,3413,Add Days daylight savings time issue,One would expect that   adding 200 days to utc 0 should yield the 200th day of 1970 at midnight UTC      moment 0 .add 200   day  .toISOString    1970 07 20T00:00:00.000Z       however the following yields the 199th day at the 23rd hour.       moment 0 .add 200   day  .toISOString    1970 07 19T23:00:00.000Z       I believe adding 200 days to moment 0  is not equivalent to adding 24 200 hours since daylight savings has an effect on the command. ,KamalAman,closed,2,2016-09-01 04:51:53,2016-09-01 16:37:48,,Troubleshooting,,,0,1
10836,moment/moment,3414,Is it a bug when I use moment.updateLocal,I can not use moment.updateLocale method.  There is a exception Uncaught TypeError: key.toLowerCase is not a function  By the way : Is there another way to set locale and  the first day of the week?       Chrome 52 on Windows 10      javascript    .datepicker  .datetimepicker           locale: moment.updateLocale  en                 week:   dow: 1                       format:  YYYY MM DD           ignoreReadonly: true          //daysOfWeekDisabled: [0  1  2  3  4  5  6]          useCurrent: false       ;       [image] https://cloud.githubusercontent.com/assets/12929041/18158133/ea3d6bca 7053 11e6 863b ff5104f50212.png  ,carldai0106,closed,0,2016-09-01 06:56:45,2016-09-01 07:28:22,,,,0,1
10835,moment/moment,3415,Why  moment null   works different from  moment    or  moment undefined  ,I m writing some utils codes in my project  then I find that  moment null   works different from  moment    or  moment undefined  .  I m wondering why they are different or is there a global option to treat them alike? ,JounQin,closed,1,2016-09-01 22:57:57,2016-09-01 23:08:25,,,,0,1
10834,moment/moment,3416,[new locale] nl be: Dutch  Belgium  locale,These changes address issue https://github.com/moment/moment/issues/3410:   Renames nl locale to   nl nl   for Dutch    Netherlands    locale   Creates   nl be   for Dutch    Belgium    locale  _  References for nl be locale:  _   Locale Planet reference: http://www.localeplanet.com/java/nl BE/   IBM Documentation of nl be: http://www.ibm.com/support/knowledgecenter/SSS28S_3.0.0/com.ibm.help.forms.doc/locale_spec/i_xfdl_r_formats_nl_BE.html  _  References for nl nl locale:  _   Locale Planet nl nl reference: http://www.localeplanet.com/java/nl NL/   IBM Documentation of nl nl: http://www.ibm.com/support/knowledgecenter/SSS28S_3.0.0/com.ibm.help.forms.doc/locale_spec/i_xfdl_r_formats_nl_NL.html  How does this look to you @jorisroling  @middagj? ,kevinzwhuang,closed,11,2016-09-02 08:05:19,2016-11-06 10:09:00,,Language,,2.16.0,1,1
10833,moment/moment,3417,Date Exclusion Array issue,  Description of the Issue and Steps to Reproduce:    Whenever I use the date calculations in a loop  if  or another type of method  the array that I use for exclusions seems to always lose its values unless I initialize the array again within that same loop  if  or whatever method that is being used. I have noticed that when I remove the moment   function from within the loop  if  or other method  then the inclusion array still remembers its values. When I add the moment   function back  it forgets the values unless I re initialize them within that loop  if  or other method being used.    WITHOUT moment  :         var date_calculation__working_day_array = [1 2 3 4 5]; var date_calculation__date_exclusion_array = [ 2013 01 01                2013 05 27                2013 07 04                2013 07 05                2013 09 02 ]; var date_calculation__date_inclusion_array = [];      submit  .on  click   function       console.log date_calculation__working_day_array  ;    console.log date_calculation__date_exclusion_array  ;   ;      Output:      [1  2  3  4  5] [ 2013 01 01    2013 05 27    2013 07 04    2013 07 05    2013 09 02 ]      AS EXPECTED.         WITH moment  :         var date_calculation__working_day_array = [1 2 3 4 5]; var date_calculation__date_exclusion_array = [ 2013 01 01                2013 05 27                2013 07 04                2013 07 05                2013 09 02 ]; var date_calculation__date_inclusion_array = [];      submit  .on  click   function       console.log date_calculation__working_day_array  ;    console.log date_calculation__date_exclusion_array  ;     var driven_to_date = moment date .addWeekdaysFromSet                     workdays : current_tid__days_from_driver_date  //required  it is also possible to use  days  alias                    weekdays : date_calculation__working_day_array  //optional                    exclusions : date_calculation__date_exclusion_array  //optional                    inclusions : date_calculation__date_inclusion_array //optional                 .format  YYYY MM DD  ;   ;      Output:      [1  2  3  4  5] undefined      exclusion array is undefined    Environment:   Chrome on Windows 7  If you are reporting an issue  please run the following code in the environment you are using and include the output:      js console.log   new Date   .toString    console.log  new Date   .toLocaleString    console.log   new Date   .getTimezoneOffset    console.log  navigator.userAgent  console.log moment.version           Fri Sep 02 2016 15:54:29 GMT 0700  Pacific Daylight Time  9/2/2016  3:54:29 PM 420 Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/52.0.2743.116 Safari/537.36 2.13.0     ,jsh562,closed,1,2016-09-02 23:09:31,2016-09-06 01:38:04,,,,0,1
10832,moment/moment,3418,Update moment.d.ts: calendar format function takes  now ,When using a custom format function for the [calendar] http://momentjs.com/docs/ /displaying/calendar time/  method  the format function will be passed  now   which is expected to be a Moment. ,devrelm,closed,1,2016-09-06 17:42:55,2016-10-20 08:16:23,,TypeScript,,,1,1
10831,moment/moment,3419,typescript issues,Given the large number of  fix this small typescript definition issue  I want to create a large  fix all typescript issues  and get over with it. People that have some typescript experience are encouraged to help with patches  comments  PRs.  The META Issue list:   [x] moment global functions   [x] moment prototype   [x] duration prototype   [x] locale prototype   [ ] any other prototype?   Issues from moment global functions   [ ] moment.fn is marked as Moment   > isn t object more accurate  people will be mostly adding stuff here  not using existing functions IMHO    [ ] moment.min/max marked as taking Moment[]   > it takes all things that the constructor takes  in array    [ ]  moment.now     > returns time in ms  missing    [ ]  moment.utc      > make sure its the same as moment    also can we define the signature and reuse it?   [ ]  moment.createInvalid Object?: flags : Moment   maybe use parsing flags definition  this can be a subset   missing    [ ]  moment.duration      UnitOfTime can only be from the regular units  ones in MomentInput     so maybe another UnitOfTime?     there is no object option   > it can be  from?: AnyMomentInput  to?: AnyMomentInput   at least one should be present      it can be string     it can be Duration     it can be null  undefined  same as not there    [ ]  moment.isMoment  and  moment.isDuration  can NOT take no args    only possibly  null / undefined    [ ]  moment.parseZone AnyMomentInput      > can take many args also   [ ]  moment.localeData      can take nothing     string     string array   [ ]  moment.defineLocale    moment.updateLocale  are in the wrong scope  also locale could be null  also its  MomentLanguageData  not  MomentLanguage    [ ]  moment.locales  in the wrong scope   [ ]  moment.normalizeUnits  takes  UnitOfTime   by definition  not string   moment prototype functions   [ ] moment.fn.add moment.fn.subtract     take all args that moment duration takes  up to 2      including string instead of number as first argument   [ ] moment.fn.calendar     also all arguments can be marked as optional  ?      MomentCalendar can have additional properties  not sure if there is a way to specify that   [ ] moment.fn.diff     2nd 3rd argument optional   [ ] moment.fn.format     optional first argument   [ ] moment.fn.from moment.fn.to     first arg is any single thing that is acceptable in moment constructor        we need an interface/type for that?   [ ] moment.fn.isAfter isBefore isBetween isSame isSameOrAfter isSameOrBefore     can we define a lambda and just declare these as being that lambda?     use moment constructible   UnitOfTime   [ ] moment.fn.lang   accepts 0 or 1 argument  string  and returns LocaleData or Moment     the string can also be a moment obj   [ ] moment.fn.locale   doesn t accept the boolean flag   [ ] moment.fn.localeData    doesn t accept arguments   its different than the moment.localeData one   [ ] moment.fn.min max    take exactly same args as constructor   [ ] moment.fn.set get    the UnitOfTime are all the defined functions on moment.fn     the MomentInput takes also all defined functions  possibly more than the actual MomentInput has   [ ] moment.fn.startOf    recheck UnitOfTime   [ ] moment.fn.toString    missing  should it be defined or its  inherited    [ ] moment.fn.creationData    the MomentCreationData should not have  ?    [ ] moment.fn.quarters get/set is missing   [ ] moment.fn.days get/set is missing   [ ] moment.fn.utcOffset is missing the optional second boolean arg keepLocalTime   [ ] moment.fn.utc is missing the first optional boolean arg keepLocalTime   [ ] moment.fn.local is missing first optional boolean arg keepLocalTime   [ ] moment.fn.parseZone is missing  no args    [ ] moment.fn.hasAlignedHourOffset is missing  optional single arg moment constructible    [ ] moment.fn.isLocal is missing  no args    [ ] moment.fn.isUtc  isUTC  isUtcOffset are missing  no args  return boolean    [ ] moment.fn.zoneAbbr and zoneName are missing  no args  return string    [ ] dates monts years zone isDSTShifted are deprecated and missing but zone is declared   Duration prototype   [ ] duration.fn.abs is missing  no arg  returns Duration    [ ] duration.fn.add subtract accept 2 arg duration constructible  missing are  str    null/undef     from to     obj    that goes through normalizeObjectUnits     [ ] duration.fn.as    takes units that go thru normalizeUnits  but only day week month year   ms s m h   [ ] duration.fn.valueOf is missing  no arg  returns number    [ ] duration.fn.get is missing  takes normalizeUnits  but also one accepted by as/full name getter    [ ] duration.fn.locale and localeData are missing  same iface as moment.fn.locale ... even same functions : D    [ ] duration.fn.lang and toIsoString are deprecated and missing   Locale   [ ] all typescript types about locales are wrong    there are only 2 things LocaleSpec and Locale. LocaleSpec is used to create a locale  updateLocale  defineLocale  and Locale is returned in localeData   for example. The current situation  in the d.ts  is a complete disaster and needs to be redone    misc   [ ] wtf moment.fn.weekday doesn t support string input  but isoWeekday  day  days does   [ ] refactor setOffsetToParsedOffset in units/offset.js   [ ] moment.fn.hasAlignedHourOffset is missing from docs. Without args it checks if the current offset is aligned to the hour  no 30 minute zones   with argument it checks if the 2 moments are aligned with respect to each other  so unless the local time is moving by 30 minutes I can t see this returning false    [ ] wtf is duration.fn._bubble and why is it there ,ichernev,open,0,2016-09-07 09:47:50,0000-00-00 00:00:00,,Enhancement,TypeScript,,,0,1
10830,moment/moment,3420,Update moment.d.ts: add MomentLanguageData methods.,,dmitryuck,closed,1,2016-09-07 13:43:25,2016-10-20 08:16:01,,TypeScript,,,1,1
10829,moment/moment,3421,Adding new functions to d.ts,Where these functions must be located?  locale  : string;     locale loc: string : string;     locale loc: string[] : string;     locale loc: string  obj: any : string;      // Deprecated in 2.8.1 lang  : string; lang str: string : string; lang str: string[] : string; lang str: string  obj: any : string;  // months  : string[]; // months moment: Moment : string; // monthsShort  : string[]; // monthsShort moment: Moment : string; // monthsShort format: string : string[]; // monthsShort format: string  index: number : string; monthsParse longOrShortMonthString: string : number;  // weekdays  : string[]; // weekdays moment: Moment : string; // weekdays index: number : string; // weekdays arabic: boolean  index: number : string; // weekdaysShort  : string[]; // weekdaysShort moment: Moment : string; // weekdaysMin  : string; // weekdaysMin moment: Moment : string; weekdaysParse minShortOrLongWeekdayString: string : number;  longDateFormat dateFormat:string : string;  isPM amPmString: string : boolean;  // meridiem hours: number  minutes: number  isLower: boolean : string; // calendar key: MomentCalendar  moment: Moment : string; // relativeTime numb: number  withoutSuffix: boolean  key: string  isFuture: boolean : string; pastFuture diff: string  relTime: string : string; preparse str: string : string; postformat str: string : string; weeks  : number; invalidDate  : string; firstDayOfWeek  : number; firstDayOfYear  : number;  // week moment: Moment : number; // ordinal numb: number : string;     ,dmitryuck,closed,3,2016-09-07 14:11:03,2016-09-09 07:41:40,,Troubleshooting,,,0,1
10828,moment/moment,3422,updating locale doesn t work like expected,  Description of the Issue and Steps to Reproduce:     import last  moment with locales.js   v 2.14.1    execute some code      javascript function test locale      console.group locale ;   console.log  updating locale to    locale     moment.updateLocale locale  ;   console.log  moment.locale     moment.locale   ;   console.log  moment  .fromNow     moment  .fromNow   ;   console.groupEnd  ;    [ es   fr   de ].forEach test ;       result will be KO      text es updating locale to  es  => undefined moment.locale   => en moment  .fromNow   => a few seconds ago fr updating locale to  fr  => undefined moment.locale   => en moment  .fromNow   => a few seconds ago de updating locale to  de  => undefined moment.locale   => en moment  .fromNow   => a few seconds ago        Environment:    tested on Windows 7 64bit [KO] Chrome Version 53.0.2785.101 m  64 bit  [KO] Firefox Version 48.0.2    Other information that may be helpful:     The time zone:   UTC   1     The time and date at which the code was run:   now     Other libraries:   none    If you are reporting an issue  please run the following code in the environment you are using and include the output:      js console.log   new Date   .toString    console.log  new Date   .toLocaleString    console.log   new Date   .getTimezoneOffset    console.log  navigator.userAgent  console.log moment.version           text Thu Sep 08 2016 13:39:30 GMT 0200  Romance Daylight Time  08/09/2016   13:39:30  120 Mozilla/5.0  Windows NT 6.1; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/53.0.2785.101 Safari/537.36 2.14.1      _Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer._ It is [codepen] http://codepen.io/Thorien/pen/EgjRdq?editors=1010  to test it ,thorinisme,closed,3,2016-09-08 11:43:01,2016-09-08 17:39:14,,,,0,1
10827,moment/moment,3423,Support for ordinal indicators in English?,Ordinal numbers  but not ordinal indicators  seem to not be supported  they are not supported in the native Date.parse   either . I came here looking for a library that would support those  wondering if it would be in scope of the project to add it?   Example:      > var d = moment  May 1st  2010  ; // date with ordinal indicator > d.toString  ;  Invalid date  > var d = moment  May first  2010  ; // date with ordinal number > d.toString  ;  Sat May 01 2010 00:00:00 GMT 0100      ,mvolz,closed,3,2016-09-08 15:20:18,2016-09-08 17:33:06,,,,0,1
10826,moment/moment,3424,add locale for Yoruba  Nigeria,,realbisoye,closed,4,2016-09-08 19:06:37,2016-09-14 12:42:27,,Language,,,1,1
10825,moment/moment,3425,Using moment in a React application with Webpack  ES6,I am trying to use moment in a React application with Webpack  ES6:      import   as moment from  moment ;  this.startTime = moment  ;      However  when I run the app I get this error:      TypeError: Object is not a constructor  evaluating  moment          What am I doing wrong? ,nareshbhatia,closed,1,2016-09-09 16:10:14,2016-09-10 00:02:22,,,,0,1
10824,moment/moment,3426,you can t copy and paste from your homepage  __ ,try and copy a sample date format: you can t. Your page is constantly updating  which is cool i guess  but it prevents users from being able to copy/paste any of the text on your page which is.. inelegant.   http://momentjs.com/ ,samslate2,closed,1,2016-09-10 22:00:30,2016-09-11 17:56:03,,,,0,1
10823,moment/moment,3427,[misc] ie8: Fix IE8,Another set of patches to make IE8 work. Apparently it was broken for 2.14.x release because of the locale inheritance refactor. ,ichernev,closed,1,2016-09-12 06:55:21,2016-09-12 07:10:59,,,,1,1
10822,moment/moment,3428, Locale seems not work on PhantomJS with Karma,Hi  Our team CI is broken after 2.15.0 which uses Karma with PhantomJS. From investigating  moment new Date   .locale  ko   does not change its locale and seems only happens on this environment  Karma and PhantomJS. NodeJS is just fine.  Here is the source code we are using now:      js let formatter = moment date ; if  locale      formatter = formatter.locale locale ;   // Check if locale is one of Korean locales. if  formatter.locale   ===  ko       return formatter.format  YYYY  MMM Do a h:mm  ;   return formatter.format  LLL  ;      And the result of the following code      js console.log  new Date   .toString   ; console.log  new Date   .toLocaleString   ; console.log  new Date   .getTimezoneOffset   ; console.log navigator.userAgent ; console.log moment.version ;      is      LOG:  Mon Sep 12 2016 19:51:41 GMT 0900  KST   LOG:  September 12  2016 at 7:51:41 PM GMT 9  LOG:  540 LOG:  Mozilla/5.0  Macintosh; Intel Mac OS X  AppleWebKit/538.1  KHTML  like Gecko  PhantomJS/2.1.1 Safari/538.1       Thanks  ,w4-steve,closed,8,2016-09-12 10:32:44,2016-09-22 10:42:18,,Troubleshooting,,,0,1
10821,moment/moment,3429,[locale] hu: Change week year start to ISO,Change the first day of the year and related tests to match the right Hungarian week of the year calculation. ,judikdavid,closed,7,2016-09-12 12:04:25,2016-11-06 10:06:21,,Language,,2.16.0,1,1
10820,moment/moment,3430,Invalid moments shouldn t return valid Date objects,  Description of the Issue and Steps to Reproduce:    Subtract does not seem to work when I create a date with an  overflow . See the output from the console below:      js > moment [2015 12] .toDate  ; < Fri Jan 01 2016 00:00:00 GMT 1100  AUS Eastern Daylight Time  > moment [2015 12] .subtract 1  days  .toDate  ; < Fri Jan 01 2016 00:00:00 GMT 1100  AUS Eastern Daylight Time  > moment [2015 12] .subtract 1  day  .toDate  ; < Fri Jan 01 2016 00:00:00 GMT 1100  AUS Eastern Daylight Time  > moment [2015 12] .subtract 2  day  .toDate  ; < Fri Jan 01 2016 00:00:00 GMT 1100  AUS Eastern Daylight Time  > moment [2015 11] .subtract 1  day  .toDate  ; < Mon Nov 30 2015 00:00:00 GMT 1100  AUS Eastern Daylight Time  > moment [2016 0] .subtract 1  day  .toDate  ; < Thu Dec 31 2015 00:00:00 GMT 1100  AUS Eastern Daylight Time         Environment:    Chrome Version 53.0.2785.101 m on Windows 7  Moment version 2.11.0 Also using DateRangePicker which works on top of jQuery UI but I get the same output irrespective of whether I include these libraries or not.  If you are reporting an issue  please run the following code in the environment you are using and include the output:      js console.log   new Date   .toString    console.log  new Date   .toLocaleString    console.log   new Date   .getTimezoneOffset    console.log  navigator.userAgent  console.log moment.version   daterangepicker.html:10 Tue Sep 13 2016 11:46:14 GMT 1000  AUS Eastern Standard Time  daterangepicker.html:11 13/09/2016  11:46:14 daterangepicker.html:12  600 daterangepicker.html:13 Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/53.0.2785.101 Safari/537.36 daterangepicker.html:14 2.11.0     ,adrianrfreedman,closed,5,2016-09-13 01:47:23,2016-10-19 14:29:44,,Bug,Up-For-Grabs,,,0,1
10819,moment/moment,3431,v2.15.0 has a breaking change.,  Description of the Issue and Steps to Reproduce:    git clone https://github.com/airbnb/react dates    npm install    npm install moment@2.15    and  npm run tests karma . Tests fail.  npm install moment@2.14 . Tests pass.  This constitutes a breaking change in a minor version. I ll try to narrow down the reproduction steps. ,ljharb,closed,13,2016-09-13 05:32:19,2016-09-21 05:30:24,,Troubleshooting,,,0,1
10818,moment/moment,3432,Global locale setter not working?,Open the momentjs.com homepage and run these from the console:      js > moment  .locale  es  .format  LLLL    martes  13 de septiembre de 2016 4:16  //ok  locales are available > moment.locale    en  //yup  just default global moment.locale  es    es  //cool moment.locale    en  //what?      I tested this with Chrome 53 on OSX. I think this a likely cause of  3431 and possibly  3428. ,icambron,closed,3,2016-09-13 08:21:42,2016-09-13 09:47:45,,,,0,1
10817,moment/moment,3433,Feature request: moment.utcOffset,Sorry to trouble you  this is not an issue  but a feature request.  Now  we can set locale globally:      js moment.locale  zh cn  ;      But  it seems that we cannot set UTC offset globally. I had found moment timezone  but it is too large to use in browser.  So  could moment provide something like  moment.utcOffset  to set UTC offset globally? What s more  most of programs just need one timezone... ,benjycui,closed,9,2016-09-13 10:49:27,2016-09-21 16:44:08,,New Feature,,,0,1
10816,moment/moment,3434,Fallback to second language not  always  working,  Description of the Issue and Steps to Reproduce:     Set two locales with english as fallback   use moment  .format     expect proper month name      //Set locale to croation with english fallback: moment.locale [ hr    en ] ;  moment  .format  MMMM GGGG  ; //output:  undefined 2016         Environment:    Reproducible in Chromium 55 on OS X 10.11.6  and other browsers       js console.log   new Date   .toString    console.log  new Date   .toLocaleString    console.log   new Date   .getTimezoneOffset    console.log  navigator.userAgent  console.log moment.version  Tue Sep 13 2016 19:00:23 GMT 0200  CEST  9/13/2016  7:00:23 PM  120 Mozilla/5.0  Macintosh; Intel Mac OS X 10_11_6  AppleWebKit/537.36  KHTML  like Gecko  Chrome/55.0.2850.0 Safari/537.36 2.10.3     ,georgehrke,closed,1,2016-09-13 17:04:46,2016-09-13 17:46:38,,,,0,1
10815,moment/moment,3435,[new locale] yo: Yoruba  Nigeria  locale,,realbisoye,closed,8,2016-09-14 12:53:21,2016-11-12 06:39:39,,Language,,2.17.0,1,1
10814,moment/moment,3436,properly validate date  including when instance = Date but is Invalid ,  Date  Fixes bug reported by @dagstuan  IDK what you people are doing for tests  it s very complicated to figure out where to put a test. meteor test  typescript test  grunt file test task  qtest  karma w/ qunit... meanwhile no test directory  no test folder anywhere? No spec files?   But if you could just add a test like   expect isDate new Date  asdf   .to.be.false   This will prove this code is working.  Cheers ,netpoetica,closed,7,2016-09-14 13:51:58,2016-09-14 15:11:36,,,,1,1
10813,moment/moment,3437,moment.utc   returning local date,Maybe I m crazy but this is returning a local date  so when I compare against another UTC date from the past  I get crazy differences because of the  6 hour difference from my timezone and UTC.  recreation here http://codepen.io/steezeburger/pen/PGNprg  If I call  format   I do get the proper timestamp. So to get this to work like I want  I m doing  moment moment.utc  .format  YYYY MM DD HH:mm:ss     but obviously that is not clean.  Any ideas what s going on or what simple thing I m missing? ,steezeburger,closed,1,2016-09-14 20:27:35,2016-09-14 20:36:53,,,,0,1
10812,moment/moment,3438,[bugfix] Fix locale autoload  revert  3344,This is a redo of  3344 that doesn t  hopefully  break karma   phantomjs     3431. @ljharb @yiminghe let me know if that works for both of you. ,ichernev,closed,14,2016-09-15 07:18:31,2016-09-21 03:07:54,,Bug-fix,,2.15.1,1,1
10811,moment/moment,3439,moment.locale does not work after 2.15.0, moment.locale  ru    does not set right locale.  Reproduce:      javascript import moment from  moment ; console.log moment   ; moment.locale  ru  ; console.log moment   ;      In both console.logs I see  _locale._abbr ===  en  .  I debugged a little and noticed that [here] https://github.com/moment/moment/commit/c587bf0063c18214238ca83f3f9c6170daf25bed diff e5443d712ed6c7ad75397f60b06a1d84R1794  I have no  module.require . And  locales[name]  few lines after obviously returns _undefined_. ,vansosnin,closed,2,2016-09-15 10:34:23,2016-09-15 21:28:33,,,,0,1
10810,moment/moment,3440,moment object to duration is deprecated/broken,  Description of the Issue and Steps to Reproduce:    Converting a moment object to a duration used to work properly.   moment.duration moment      Currently it gives this warning:   Deprecation warning: value provided is not in a recognized ISO format. moment construction falls back to js Date    which is not reliable across all browsers and versions. Non ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/ /warnings/js date/ for more info. Arguments:  [0] _isAMomentObject: true  _isUTC: false  _useUTC: false  _l: undefined  _i: function from time  withoutSuffix            if  this.isValid                        isMoment time     time.isValid                        local__createLocal time .isValid                   return create__createDuration  to: this  from: time  .locale this.locale   .humanize  withoutSuffix ;           else               return this.localeData  .invalidDate  ;                  _f: undefined  _strict: undefined  _locale: [object Object] Error     at Function.createFromInputFallback  http://momentjs.com/static/js/global.js:309:98      at configFromInput  http://momentjs.com/static/js/global.js:2420:32      at prepareConfig  http://momentjs.com/static/js/global.js:2391:13      at createFromConfig  http://momentjs.com/static/js/global.js:2358:44      at createLocalOrUTC  http://momentjs.com/static/js/global.js:2445:16      at local__createLocal  http://momentjs.com/static/js/global.js:2449:16      at Function.create__createDuration [as duration]  http://momentjs.com/static/js/global.js:2825:41      at <anonymous>:1:8   And the output is a duration that is set to 0  so it is broken.  I found the point where it changed  between 2.11.1 and 2.11.2 JSFiddle  broken  moment v2.15.0: https://jsfiddle.net/StevenRKM/p10aups2/   broken  moment v2.11.2: https://jsfiddle.net/StevenRKM/8xkupx40/1/  working  moment v.2.11.1: https://jsfiddle.net/StevenRKM/2evm9o8c/    Environment:    Checked in latest Chrome with latest and previous moment versions. Working on Windows 7. ,StevenRKM,closed,6,2016-09-15 12:05:04,2016-09-21 05:35:52,,Troubleshooting,,,0,1
10809,moment/moment,3441,Get date and time from n milliseconds from now,I m looking for a way to get a date and time that is n milliseconds in the future. For example  5 days in milliseconds is 432 000 000. Say the date and time now is   2013 02 08 20:00:00.000  . When I add   432 000 000 milliseconds   to that  I should get something like:   2013 02 08 20:00:00.000  . What is the best approach to this? ,dibenso,closed,2,2016-09-15 13:04:50,2016-09-15 21:40:20,,,,0,1
10808,moment/moment,3442,typings: Added default localized formats available for values in format  ,This is a small change to add the default localized formats as signature methods for  format .    This is mainly just a convenience change to make it apparent to TypeScript users  that there are some default formats available without having to drop back to the docs.   Which are amazing by the way    The other small change was to make  moment.utc    match the definition for  moment   .  Also... thanks for making this wonderful library  anytime I have to do more than 3 things with a Date in JavaScript I just grab  moment .       ,david-driscoll,closed,1,2016-09-15 15:01:29,2016-10-20 08:16:44,,,,1,1
10807,moment/moment,3443,The first week of the year  always contains 4 January.,https://en.wikipedia.org/wiki/ISO_week_date ,lgabster,closed,4,2016-09-15 15:19:33,2016-11-01 13:24:17,,Language,,,1,1
10806,moment/moment,3444,Unexpected behavior in NodeJS: moment.utc  .unix   == moment  .unix  ,NodeJS  on CET:      js > const moment = require  moment  ; > moment  .unix   == moment.utc  .unix   true > moment  .unix   == moment  .tz  utc  .unix   true > moment  .format   == moment.utc  .format   // obvious  I know false      Returned unix value is not UTC  checked using a more reliable source. valueOf is also broken in the same way.  I know MDN and standard says Date.getTime   should return always UTC time  and NodeJS does not complies this standard  so it should be NodeJS s fault  but as nobody complies this standard  it s also violated by most browsers  its correctness shouldn t be assumed. ,ergoithz,closed,2,2016-09-15 15:52:33,2016-09-17 01:07:37,,Troubleshooting,,,0,1
10805,moment/moment,3445,typings: Expanded on units of time to ensure all supported units avai ,This change renames the  UnitOfTime  to two different types   DurationUnit  and  MomentUnit .   Let me know if there is a better / different name to use  I don t care about   shedding.  With this change we can now call  moment.get  dayOfYear    with type safety.  It also clarifies what a unit is for  most methods on a moment  only support duration units  since they use those under the covers  but  get / set  support the extended unit set. ,david-driscoll,closed,1,2016-09-15 16:00:01,2016-10-20 08:08:06,,,,1,1
10804,moment/moment,3446,Improve Catalan localization,Fixes common mistake described in http://esadir.cat/entrades/fitxa/id/1496  Also added new newline character at the end of file. ,pereorga,closed,9,2016-09-15 18:58:54,2016-11-03 19:46:33,,Language,,,1,1
10803,moment/moment,3447,Add missing isoWeek to UnitOfTime type definition, 3319  Update moment.d.ts ,jesussobrino,closed,1,2016-09-16 11:21:02,2016-10-20 08:09:24,,,,1,1
10802,moment/moment,3448,[misc] Add ISSUE_TEMPLATE.md and typing tests to bower ignores,As they are not needed in production  so they will not appear in installed package  ,tomalec,closed,3,2016-09-16 17:02:12,2016-11-06 10:04:50,,Build/Release,,2.16.0,1,1
10801,moment/moment,3449,parsingFlags   is missing typings,The TypeScript definitions are missing  parsingFlags     http://momentjs.com/docs/ /utilities/invalid/ ,felixfbecker,closed,1,2016-09-16 18:44:52,2016-09-16 18:52:07,,,,0,1
10800,moment/moment,3450,website bug.,Moment s website has two times  Japanese  as selection on the landing page at the bottom. ,mesqueeb,closed,3,2016-09-17 08:41:42,2016-09-21 16:42:07,,,,0,1
10799,moment/moment,3451,locale is not set using moment.locale  ja  ,This used to work earlier  recently it is not working on debugging it seems the  locales  array in loadlocale method consist only for english i.e.  en .  for  moment :  ^2.14.1   ,Aanal,closed,2,2016-09-17 10:23:08,2016-09-17 20:49:05,,,,0,1
10798,moment/moment,3452,moment  .add   doesn t work on 2.15.0.,Node.js v4.4.6 on Raspbian  using Moment 2.15.0:      javascript var moment = require  moment  ; var a = moment  ; var b = a.add 9   hours  ; console.log a.format    b.format   ;      Simply  It doesn t work. ,roccomuso,closed,1,2016-09-17 16:58:41,2016-09-17 17:19:50,,,,0,1
10797,moment/moment,3453,moment is not defined,I found probably bug with using momentjs with fullcalendar.io. Fullcalendar need to access to moment as window property  for example as jquery   but this is missing in code. On bottom of file   moment.js   is need to add:      js   var _moment = utils_hooks__hooks;      window.moment = _moment;      return _moment;      after this  everything works fine. ,petrck,closed,1,2016-09-17 21:00:20,2016-09-18 15:17:48,,,,0,1
10796,moment/moment,3454,Add typings config file,This will make using the moment package with typings a whole lot easier. ,alexjusti,closed,3,2016-09-18 04:27:27,2016-11-04 22:54:20,,,,1,1
10795,moment/moment,3455,How to represent dates  without time  and times  without date ?,A Moment.js object  like its underlying Date object  always represents an exact point in time.  Sometimes  however  I just want to store a _date_  say 2016 09 19 . This is _not_ a point in time  but a calendar day. Depending on my time zone  this calendar day may represent different intervals in time. Representing it using a Moment.js object  say   moment  2016 09 19T00:00 00:00     is a hack at best.  A related concept is that of a _time of day_  say  9:30 AM . A time of day has no date or time zone attached to it. So storing a time of day as something like  moment  0001 01 01T09:30 00:00    again seems rather hackish to me.  So I wonder: _What is the idiomatic way of representing dates and times in JavaScript code that uses Moment.js?_ Ideally  this approach should allow combining a date  a time  and a time zone back into a Moment.js object. ,DanielSWolf,closed,4,2016-09-19 07:50:03,2016-09-19 16:30:29,,,,0,1
10794,moment/moment,3456,Fix defineLocale   updateLocale declarations,Related to  3419   Move out  defineLocale    and   updateLocale     to outer scope;   Change  defineLocale    and  updateLocale    return type to  MomentLanguageData ;   Add  MomentLanguageDefinition   extended from  MomentLanguage   interface with  parentLocale  property specifically for  defineLocale   ;   Make  updateLocale    second argument  locale  optional. ,dzonatan,closed,1,2016-09-19 10:05:20,2016-10-20 08:06:13,,,,1,1
10793,moment/moment,3457,[BUG]moment check format bug,newValue =  2016 08 21 01:48P ; moment newValue   YYYY MM DD hh:mmA   true .isValid  ;  This should return false  but it returns ture  see: http://jsfiddle.net/b6549hzw/ ,TianyiXia,closed,3,2016-09-19 21:15:37,2016-09-25 05:37:50,,Troubleshooting,,,0,1
10792,moment/moment,3458,isSameOrBefore Error,  moment  .isSameOrBefore  2016 09 20     _On September 20 2016 I tried the call above and got false while I was expecting true. Note that passing the same date as a string to moment does return true_    NodeJS 6.3.1 on Mac OS and Ubuntu      Other information that may be helpful:     Time zone: West African Time   11 AM on September 20 2016   Other libraries in use none  Below is the output of the date testing code Tue Sep 20 2016 12:03:00 GMT 0200  WAST  9/20/2016  12:03:00 PM  120 2.13.0 ,joques,closed,1,2016-09-20 10:09:39,2016-09-21 05:30:21,,,,0,1
10791,moment/moment,3459,Proposal: Convert source to TypeScript? ,I m curious what the maintainer thoughts on this are. TypeScript offers a lot of great static analysis that works well for projects at this size.  ,JoshuaKGoldberg,closed,1,2016-09-21 00:23:39,2016-09-21 16:40:19,,,,0,1
10790,moment/moment,3460,Fix null check,I had missed  isNaN   but I noticed it here https://github.com/moment/moment/commit/6d2ef540937c230d9ded54493c85c4bea55970d9 ,sideris,closed,1,2016-09-22 05:24:55,2016-09-22 05:42:09,,,,1,1
10789,moment/moment,3461,Minify JavaScript  remove comments ,PageSpeed Insights states that the size of moment.min.js  from CDN  can be reduced by 23 ... If I look at the code it s uglified and minimized but a lot of  all?  comments are still included.  Thanks Rob ,r0b-,closed,6,2016-09-22 12:34:00,2017-03-12 20:03:45,,,,0,1
10788,moment/moment,3462,Moment  .utcOffset    utcOffset    always considers it hours.,Seems like the value passed into the utcOffset function is always taken as hours  even though in the docs it says it should be taken as minutes if above 16 or below  16.      const utcTime = new moment.utc  ; const currentTimeZone = utcTime.clone  ; currentTimeZone.utcOffset   60  ; console.log currentTimeZone.format   ;      What s logged:  2016 09 23T08:25:00 60:00  ,shawngong,closed,1,2016-09-22 18:11:49,2016-09-22 20:05:25,,,,0,1
10787,moment/moment,3463,parseZone   not parsing UTC correctly,On latest version  2.15.1   parseZone   seems not working correctly when offset is utc.  moment.parseZone  2016 05 04T00:00:00Z  .format   =>  2016 05 04T08:00:00Z  bad  moment.parseZone  2016 05 04T00:00:00 08:00  .format   =>  2016 05 04T00:00:00 08:00  good  The method was good on 2.14.1  I recently updated moment.js to 2.15.1 and the new version failed my test case. ,tian-ma,closed,6,2016-09-23 08:21:09,2016-11-08 05:19:26,,Bug,,,0,1
10786,moment/moment,3464,Missing signatures for utcOffset in typescript definition file,When using momentjs in a TypeScript project  we can not call for the  Moment  interface the  utcOffset  method with the  keepLocalTime  argument because in the typescript definition file there is no signatures with two arguments.  Call examples :      moment  .utcOffset 0 ;          // OK moment  .utcOffset 0  true ;    // compile time error     ,fredgate,closed,1,2016-09-23 09:00:40,2017-03-20 02:05:42,,TypeScript,,,0,1
10785,moment/moment,3465,Add missing signatures for Moment.utcOffset method in TypeScript definition file,To fix issue  3464  ,fredgate,closed,1,2016-09-23 09:30:45,2016-10-20 08:05:41,,,,1,1
10784,moment/moment,3466,[misc] Fix typo of Javanese,Jawa language is Javanese not Japanese.  Related: https://github.com/moment/momentjs.com/pull/361 ,tgfjt,closed,2,2016-09-25 11:25:44,2016-10-24 06:35:08,,Bug-fix,Language,,2.15.2,1,1
10783,moment/moment,3467,Deprecation warning: moment construction falls back to js Date  despite me using ISO strings,I am using the following function to get the get the timezone offset. I tried passing in ISO string as well as date with strict format moment  2016 9 26    YYYY MM DD    but still kept getting the deprecation warning.   Please help      function setDateWithTimeZone date  timeZoneName        //date argument passed is in this format:  2016 9 26      var moment = require  cloud/moment/moment timezone with data 2010 2020.js  ;     //convert date to the correct format to resolve moment s deprecation warning     var formatedDate = new Date String date  .toISOString  ;      //get timezone offset      var offSet = moment formatedDate .tz timeZoneName .format  Z  ;     var standardDate = moment formatedDate .tz timeZoneName .toDate  ;     //get new date object from date   timezone offset     return moment standardDate   offSet .toDate  ;        // moment timezone.js //  version : 0.3.1 ,nonlogos,closed,1,2016-09-26 21:57:02,2016-09-30 13:50:58,,,,0,1
10782,moment/moment,3468,Adding 1 day on 2011 12 29 while in Pacific/Apia yields the same day,  Description of the Issue and Steps to Reproduce:    On 2011 12 29 23:59:59  [Samoa changed its time zone from UTC 11 to UTC 13  thus completely skipping 2011 12 30] http://www.timeanddate.com/news/time/samoa dateline.html .  However  when executing the following  [relevant JSFiddle] https://jsfiddle.net/hpuwtfos/  :      js var t = moment.tz  2011 12 29 00:00:00    YYYY MM DD HH:mm:ss   true   Pacific/Apia  ;  console.log t.format   ; console.log t.clone  .add 1   day  .format   ; console.log t.clone  .add 2   days  .format   ;      The following is outputted on the console:      2011 12 29T00:00:00 10:00 2011 12 29T00:00:00 10:00 2011 12 31T00:00:00 14:00        Environment:    Reproduced on Firefox 49 and Chromium 52 on Ubuntu 14.04  although it s highly unlikely this issue is browser specific . ,octurion,closed,1,2016-09-27 12:09:03,2016-09-30 13:49:59,,,,0,1
10781,moment/moment,3469,1 test failed. week year:week numbers 2012/2013  2446.7  ,    Client info      Date String   : Tue Sep 27 2016 21:18:23 GMT 0800                      Locale String : 2016/9/27   9:18:23 Offset        :  480 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/49.0.2623.110 Safari/537.36            week year:week numbers 2012/2013  2446.7       javascript // Expected 53 // Actual   52 52 === 53     ,YuScott,closed,1,2016-09-27 13:31:12,2016-09-30 16:18:29,,Unit Test Failed,,,0,1
10780,moment/moment,3470,Empty exception cath,Hi in this library there is an empty catch  and my security team is marking me this as a concern  do you have any plans to handle any exception on this code  or just let it bubble up ?  File name: moment with locales.js  function loadLocale name            var oldLocale = null;         // TODO: Find a better way to register and load all the locales in Node         if   locales[name]     typeof module  ==  undefined                      module    module.exports                try                   oldLocale = globalLocale._abbr;                 require  ./locale/    name ;                 // because defineLocale currently also sets the global locale  we                 // want to undo that for lazy loaded locales                 locale_locales__getSetGlobalLocale oldLocale ; <b>              catch  e     </b>                   return locales[name];       ,rafaelsotelomeza,closed,1,2016-09-27 15:33:24,2016-09-30 13:46:02,,,,0,1
10779,moment/moment,3471,Build failing due to moment.js,Hi    I am getting following error while crating my build using babel    Error transforming  /picker.js/node_modules/moment/src/lib/locale/locales.js with  babel  plugin: /picker.js/node_modules/moment/src/lib/locale/locales.js:  import  and  export  may only appear at the top level  4:0   I am not sure what is the issue  I had checked all possible things which might create problem. NPM version is fine  mode version is fine  all required plugins are included.     Environment:   Ubuntu 16.04 Node v6.6.0 npm v3.10 3 moment.js 2.15.1 ,GeekAb,closed,1,2016-09-28 09:46:07,2016-10-20 00:17:07,,Troubleshooting,,,0,1
10778,moment/moment,3472,Localized MM/DD/YY  2158,Hi  I ve seen issues for noobies. At first I didn t understand why this future is so needed  but now I do: if you want to show shorter dates  with 2 digits for year  in some places you have to use format and directly check the locale. I saw some pull requests for it early but they were writed only for few locales and without reading of contribute guide. I hope it s complex solution. ,zymnytskiy,closed,2,2016-09-29 09:10:00,2016-10-11 00:32:12,,Enhancement,Language,,,1,1
10777,moment/moment,3473,Date conversion to format DD.MM.YYYY produces different result,  Description of the Issue and Steps to Reproduce:    I m using moment.js to handle my date time values in my web application. I m using follow format: DD.MM.YYYY for example 29.09.2016. Now I have some input fields  where I can type in the day of birth of a person. When I type a short year between 62 and 99  it converts it like this for example: input = 29.09.82 it converts it after pressing tab to 29.09.2082  puts 20 before the 82 . When I write a short year between 00 and 62 in converts it like this example: input = 29.09.55 would be converted to 29.09.1955  puts 19 before the 55 . So the first range will be converted to a year in the 21th century and the second range would be converted to a year in the 20th century  this seems to be default  I don t know why .   moment  29/09/55    DD.MM.YY  .format  DD.MM.YYYY    prints   29/09/2055     moment  29/09/82    DD.MM.YY  .format  DD.MM.YYYY    prints   29.09.1982      Environment:   Thu Sep 29 2016 17:31:48 GMT 0530  India Standard Time  VM401:2 9/29/2016  5:31:48 PM VM401:3  330 VM401:4 Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/53.0.2785.116 Safari/537.36 ,jaganathanb,closed,1,2016-09-29 12:02:50,2016-09-30 13:42:14,,,,0,1
10776,moment/moment,3474,Date conversion to format DD.MM.YYYY produces different result,  Description of the Issue and Steps to Reproduce:    I m using moment.js to handle my date time values in my web application. I m using follow format: DD.MM.YYYY for example 29.09.2016. Now I have some input fields  where I can type in the day of birth of a person. When I type a short year between 62 and 99  it converts it like this for example: input = 29.09.82 it converts it after pressing tab to 29.09.2082  puts 20 before the 82 . When I write a short year between 00 and 62 in converts it like this example: input = 29.09.55 would be converted to 29.09.1955  puts 19 before the 55 . So the first range will be converted to a year in the 21th century and the second range would be converted to a year in the 20th century  this seems to be default  I don t know why .   moment  29/09/55    DD.MM.YY  .format  DD.MM.YYYY    prints   29/09/2055     moment  29/09/82    DD.MM.YY  .format  DD.MM.YYYY    prints   29.09.1982      Environment:   Thu Sep 29 2016 17:31:48 GMT 0530  India Standard Time  VM401:2 9/29/2016  5:31:48 PM VM401:3  330 VM401:4 Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/53.0.2785.116 Safari/537.36 ,jaganathanb,closed,1,2016-09-29 12:12:51,2016-09-30 13:41:34,,,,0,1
10775,moment/moment,3475,format   not working within for loop,Hi    I m receiving an error within a for loop. The following works correctly  as I hope:       var theDate =    .schedule  .children  .theDate  .text  ; var when = moment theDate .format  ddd h:mm A  ;     .schedule  .find  .day  .html when ;      However  I would like to iterate this through a loop  as such :       var numberEvents =    .schedule  .length;  for  var i = 0; i < numberEvents; i        var  event =    .event     i ;   var theDate =  event.children  .theDate  .text  ;   var when = moment theDate .format  ddd h:mm A  ;    event.find  .day  .html when ;         The error I m getting in the console is:    jquery.min.js?ver=3.1.0:2 Uncaught TypeError: Cannot read property  format  of null   I have tried completely simplifying the loop  and even if I put the working code within the loop I get the same error. Thank you   ,donnellyrankin,closed,2,2016-09-29 16:52:15,2016-09-30 13:31:01,,Troubleshooting,,,0,1
10774,moment/moment,3476,Problem injecting moment as dependency in angular 1 and TypeScript,moment 2.13.0 angular 1.5.8 typescript 2.0.3  Since the latest version of moment that contains type definitions  there is an issue when injecting moment as dependency for an angular 1 component.  Earlier the moment object could be referenced using moment.MomentStatic but with the new definitions  MomentStatic no longer exists.  Importing moment like this:      import   as moment from  moment   class MyComponent      constructor myAngularMomentVar: moment             causes the typescript compiler to complain that it cannot find the type moment. ,mortenamby,open,6,2016-09-30 06:26:23,0000-00-00 00:00:00,,TypeScript,,,0,1
10773,moment/moment,3477,API breaking change between 2.10.6 and 2.11.0 not mentionned in the changelog,  isBefore with a invalid date output is not the same for v2.10.6 and v2.11.0    When running the following code:      js var moment = require  moment    var invalidDate = moment [2000  1  30  0  1] ; var dateBefore = moment [2000  1  15  0  1] ; console.log dateBefore.isBefore invalidDate  ;      The output with v2.10.6 is true but it is false when updating to v2.11.0. I see two issues with this change in the API:   this is currently not specified in the [CHANGELOG.md] https://gist.github.com/ichernev/6594bc29719dde6b2f66    In my opinion a API change like that would have deserved a major version increment believing the semantic versioning specification but maybe this was a bugfix and the documentation was already specifying the result should be false  I could not check that  :       Major version X  X.y.z   X > 0  MUST be incremented if any backwards incompatible changes are introduced to the public API. It MAY include minor and patch level changes. Patch and minor version MUST be reset to 0 when major version is incremented.        Environment:    I have tested this difference using node v6.5.0 on Ubuntu 16.04 and as requested the following code:       js console.log   new Date   .toString    console.log  new Date   .toLocaleString    console.log   new Date   .getTimezoneOffset    console.log  navigator.userAgent  console.log moment.version       result in:      Fri Sep 30 2016 11:12:45 GMT 0400  EDT  9/30/2016  11:12:45 AM 240 2.11.0     ,strokyl,closed,1,2016-09-30 15:36:03,2016-09-30 15:43:00,,,,0,1
10772,moment/moment,3478,Bug in function from  ,Wrong year number in the result of function   from          var birthdate = moment  26/11/1983    DD/MM/YYYY  ; var today = moment  30/09/2016    DD/MM/YYYY  ; // expected: 32 years var age = birthdate.from today ; // produces: 33 years        Environment:   Chrome 53  Windows 10  Moment.js 2.15.1 UTC  3  S o Paulo   Brazil  ,cesguerra,closed,1,2016-09-30 19:32:25,2016-10-02 07:29:53,,,,0,1
10771,moment/moment,3479,moment  .isSame produce unexpected result,  Description of the Issue and Steps to Reproduce:   When comparing 2 different times  eg. 16:00 and 16:05  the result is false. When 2 times are equal  the result is also false. I do the comparison in Chrome inspector   moment  16:00  .isSame  16:05   //false   Please take a look and let me know if I made a mistake. Thank you.  Mon Oct 03 2016 17:37:32 GMT 0800  HKT  10/3/2016  5:37:32 PM  480 Mozilla/5.0  Macintosh; Intel Mac OS X 10_11_1  AppleWebKit/537.36  KHTML  like Gecko  Chrome/52.0.2743.116 Safari/537.36 2.9.0 ,jeffrey008,closed,1,2016-10-03 09:39:40,2016-10-03 16:22:40,,,,0,1
10770,moment/moment,3480,Parsing AM/PM Broken,  Description of the Issue and Steps to Reproduce:        moment  12/30/1975 12:59 PM   MM/dd/YYYY hh:mm A  .toString   // Invalid Date      _Please include the values of all variables used._    Environment:    Chrome 53  Windows 10 Pro      > moment.version  2.15.1  > moment  12/30/1975 12:59   MM/dd/YYYY HH:mm  .toString    Mon Dec 01 1975 12:59:00 GMT 0700  > moment  12/30/1975 12:59 PM   MM/dd/YYYY hh:mm A  .toString    Invalid date      ,tracker1,closed,1,2016-10-03 10:49:17,2016-10-03 16:18:59,,,,0,1
10769,moment/moment,3481,Invalid Date s are Still Reported as isValid   = true,  Description of the Issue and Steps to Reproduce:   As reported on Gitter  the issue is:      moment  .year  asdf  .isValid   => true moment  .year  asdf  .toString   =>  Invalid date       Usually  in JS when we re checking for valid dates  a date is only  valid  if it also is actually not an Invalid Date.      var d = new Date  asdf   > undefined d > Invalid Date d instanceof Date > true Object.prototype.toString.call d  >  [object Date]       @mj1856 claimed in associated PR:  > It s an input validation bug with the year function. It has nothing to do with isValid.  But I m not sure how so.     Environment:    All    Other information that may be helpful:        js  new Date   .toString   >  Mon Oct 03 2016 13:36:52 GMT 0400  EDT    new Date   .toLocaleString   >  10/3/2016  1:37:00 PM   new Date   .getTimezoneOffset   > 240 navigator.userAgent >  Mozilla/5.0  iPhone; CPU iPhone OS 9_1 like Mac OS X  AppleWebKit/601.1.46  KHTML  like Gecko  Version/9.0 Mobile/13B143 Safari/601.1      ,netpoetica,closed,6,2016-10-03 17:38:10,2016-10-03 23:03:24,,,,0,1
10768,moment/moment,3482,Duration typing not accepting string,    typescript const period =  week ; const date = moment  .startOf period ;       Argument of type  string  is not assignable to parameter of type  year     years     Y     quarter  ....   How to bypass this limitation?  const date = moment  .startOf  week  ;  doesn t bark. ,adamreisnz,closed,8,2016-10-03 19:28:19,2016-10-03 22:08:04,,Troubleshooting,TypeScript,,,0,1
10767,moment/moment,3483,Setter functions should handle garbage input better,As discussed in  3436  the setter functions like  year  don t handle garbage input well.      javascript var m = moment  .year  foo  ; m.isValid   // true m.format    //   0NaN  NaN  NaNT NaN: NaN: NaN 00:00       Same goes for many of the other setters  such as  date  and  hour .  They should all be checked.  Since many other functions  including  add  will fail silently on garbage input  these probably should also.  The alternative would be to throw an error  which would be inconsistent with the rest of the library. ,mj1856,closed,16,2016-10-03 23:02:45,2017-01-08 04:25:10,,Bug,Up-For-Grabs,,,0,1
10766,moment/moment,3484,moment diff and subtract in one equation is giving unpredictable results.,  Description of the Issue and Steps to Reproduce:   We have the below line of code to calculate 31  as of today : Math.ceil moment  .diff moment  .subtract 2   months     days   / 2  It gives 30 sometimes and 31 sometimes. Absolutely unpredictable. I could see consistency with below code. moment   Math.ceil moment  .diff moment  .subtract 2   months     days   / 2  So calling moment   once  just before problematic code  kind of resolved my issue so there is some unpredictable nature. Please look into it.  _Please include the values of all variables used._    Environment:   OS: Ubuntu 16.04 LTS  Chrome: 52.0.2743.116  64 bit   Node: 6.3.1    Other information that may be helpful:     The time zone setting of the machine the code is running on   Los Angeles Timezone   The time and date at which the code was run   Run the code between Oct/4/2016  11:30    Oct/4/2016  13:00   Other libraries in use  TypeScript  Immutable.js  etc    Mocha  If you are reporting an issue  please run the following code in the environment you are using and include the output:      js console.log   new Date   .toString    Tue Oct 04 2016 13:09:57 GMT 0700  PDT   console.log  new Date   .toLocaleString    10/4/2016  1:09:57 PM  console.log   new Date   .getTimezoneOffset    420   console.log  navigator.userAgent   console.log moment.version  2.14.1       _Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer._ I do believe that issue is within moment library. ,tvsudhir3,closed,3,2016-10-04 20:17:33,2016-10-05 00:12:12,,,,0,1
10765,moment/moment,3485,fix in arabic calendar text,I am a native Arabic speaker. The calendar text in Arabic has been corrected to the way people actually use it and understand it. ,HassanAlgoz,closed,2,2016-10-05 11:59:22,2016-10-11 06:07:28,,Language,Needs tests,,,1,1
10764,moment/moment,3486,Garbage input to setter fix,  Work in Progress    Hi @mj1856 @maggiepint   This PR is in reference to  3483   Please review the current changes and let me know if this hack seems to be doing the trick. Also  let me know of any other steps I need to take to make this PR ready for a merge. Thanks :  ,mbad0la,closed,10,2016-10-06 19:10:12,2017-01-08 04:22:49,,Needs Revision,,,1,1
10763,moment/moment,3487,Strict parsing on valid strings in  ar  and  ar ly  locales results in an invalid date,  Description of the Issue and Steps to Reproduce:    When I try to parse a valid string using  utc  with strict parsing and an  ar  or  ar ly  locale  the resulting  moment  is invalid.  I created a [jsfiddle] https://jsfiddle.net/wLuq5eg2/1/  which shows it working with various locales like  en  and  ar sa  but not working with  ar  or  ar ly . I ve also included a small code snippet.  My thought is that these locales include [Right to Left marks] https://en.wikipedia.org/wiki/Right to left_mark  which could be throwing off the parsing.      js const m = moment  .locale  ar  ; const formattedDate = m.format  l  ; console.log moment.utc formattedDate   l    ar   false .toISOString   ; // Valid date console.log moment.utc formattedDate   l    ar   true .toISOString   ;  // Invalid date        Environment:     Chrome 53.0.2785.143  64 bit  on OSX   Firefox 49.0 on OSX    Other information that may be helpful:        js console.log  new Date   .toString    // Fri Oct 07 2016 11:17:44 GMT 0400  EDT  console.log  new Date   .toLocaleString    // 10/7/2016  11:17:44 AM console.log  new Date   .getTimezoneOffset    // 240 console.log navigator.userAgent  // Mozilla/5.0  Macintosh; Intel Mac OS X 10_11_6  AppleWebKit/537.36  KHTML  like Gecko  Chrome/53.0.2785.143 Safari/537.36 console.log moment.version  // 2.15.1     ,FrankManns,closed,2,2016-10-07 15:40:27,2017-08-06 23:37:13,,Bug,,,0,1
10762,moment/moment,3488,Momemtjs date converting error raise.,  Description of the Issue and Steps to Reproduce:   console.log  >>>>>>.   moment value .format  MM DD YYYY   moment value .format  YYYY MM DD   ;  I am not sure where this error generated  unable to track. I had added warning message.    Environment:   Ubuntu  chrome browser.  GETTING BELOW ISSUE  Deprecation warning: value provided is not in a recognized ISO format. moment construction falls back to js Date    which is not reliable across all browsers and versions. Non ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/ /warnings/js date/ for more info. Arguments:  [0] _isAMomentObject: true  _isUTC: false  _useUTC: false  _l: undefined  _i: 27/04/2016  _f: undefined  _strict: undefined  _locale: [object Object] Error ,tejastank,closed,11,2016-10-08 11:57:50,2016-10-09 00:14:36,,,,0,1
10761,moment/moment,3489,Proposal: Human durations,  Description of the Issue and Steps to Reproduce:    That will be great if we could parse human sentences to represent a positive or negative Duration object.  By example :  1 year 2 days   2 years 5 weeks 1 day less   1 hour 30 minutes more   10 days 5 hours less  ....  I suggest : moment.duration.human  ...      Please include the values of all variables used.   N/A    Environment:   All    Other information that may be helpful:   Should be localized    The time zone setting of the machine the code is running on   N/A    The time and date at which the code was run   N/A    Other libraries in use  TypeScript  Immutable.js  etc    N/A  EDIT: Changed  after  and  before  to  more  and  less  ,doodadjs,closed,2,2016-10-09 03:30:25,2016-10-10 19:31:09,,,,0,1
10760,moment/moment,3490,[misc] typescript: Fix all outstanding TypeScript issues,Fixes  3419.  To my understanding  this fixes ALL typescript issues for the current version.  Open for comments.  I have a few open questions:   for somebody actually using typescript  with ide and the like   is the moment constructor defined in a usable fashion? The more indirect types are used  the more the user doesn t know what is actually a possible value for an argument.      ts function a: number : void; function a: string : void;  // vs  type X = number   string; function a: X ;       is there a good way to declare what has been deprecated in comments   can you pull things out of a namespace  like using std::sort in C   to pull out sort out of std and make it usable with namespace prefix .  @blakeembrey @gdi2290 @Guria ,ichernev,closed,13,2016-10-09 09:55:03,2016-11-06 10:02:32,,TypeScript,,2.16.0,1,1
10759,moment/moment,3491,Unimplemented weeks   method on localeData   object,  Description of the Issue:   I was looking at the object returned by  localeData    method  described here http://momentjs.com/docs/ /i18n/locale data/ and seems there is inconsistency in description. On top there seems to be a method  weeks     but in more detailed description below  there is a method  localeData.week aMoment ;  // returns week of year of aMoment   but no   weeks  . ,jeserkin,closed,4,2016-10-09 13:12:38,2016-10-11 22:18:26,,,,0,1
10758,moment/moment,3492,Kannada locale,,rajeevnaikte,closed,8,2016-10-09 18:19:10,2017-02-05 07:00:03,,Language,Needs Revision,Pending Next Release,,2.18.0,1,1
10757,moment/moment,3493,Unclear how to use custom data from extended locales,  Description of the Issue:   Took a peek at the [Customization] http://momentjs.com/docs/ /customization/  section. As far as I understand first part  it allows to set own locale properties to the existing ones  but it is unclear how to use them. Doesn t seems to be reachable through  moment.localeData   . Thank you. ,jeserkin,closed,2,2016-10-10 08:31:09,2016-10-20 16:55:30,,,,0,1
10756,moment/moment,3494,Update global moment object with custom date,Is there a way to update the moment object globally with custom time?  FYI  we pass the server time object to client when initiating the websocket connection. ,jaipradeesh,closed,7,2016-10-12 07:35:48,2016-10-19 08:13:48,,,,0,1
10755,moment/moment,3495,Using moment.tz date_string  timezone  constructor changes timezone,  Description of the Issue and Steps to Reproduce:   While parsing two date strings with same timezone specification  one of dates switches timezone. We have two date strings:  2016 10 12T12:00:00  and   2016 07 14T12:00:00   which are representing time in   Pacific/Apia     14 .  I need to create two momentjs objects with those dates and a timezone:      js const timezone =  Pacific/Apia ; let startDate = moment.tz  2016 07 14T12:00:00   timezone ; let endDate = moment.tz  2016 10 12T12:00:00   timezone ;      After parsing  result of format as well as value of  _offset  property  I m getting following results:      js startDate.format  ; //  2016 07 14T12:00:00 13:00  endDate.format  ; //  2016 10 12T12:00:00 14:00   startDate._offset; // 780 endDate._offset; // 840      As you can see  offset and a timezone in formatted string differs by one hour  which is totally blowing my mind. I ve tried checking DST dates  it seems not to fall into those dates range.  Why this is happening and how to keep both values in same timezone?    Environment:    Chrome 53.0.2785.143  64 bit   momentjs website s dev console.  Console.logs output:      js Wed Oct 12 2016 13:05:03 GMT 0300  EEST  10/12/2016  1:05:03 PM  180 Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_0  AppleWebKit/537.36  KHTML  like Gecko  Chrome/53.0.2785.143 Safari/537.36 2.10.6     ,Kamilius,closed,3,2016-10-12 10:06:57,2016-10-12 21:08:33,,,,0,1
10754,moment/moment,3496,1 test failed. week year:week numbers 2012/2013  2446.7  ,    Client info      Date String   : Thu Oct 13 2016 14:56:52 GMT 0800          Locale String : 2016/10/13   2:56:52 Offset        :  480 User Agent    : Mozilla/5.0  Windows NT 10.0; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/54.0.2840.59 Safari/537.36            week year:week numbers 2012/2013  2446.7       javascript // Expected 53 // Actual   52 52 === 53     ,nuintun,closed,1,2016-10-13 06:58:49,2016-10-13 19:05:23,,Duplicate,Unit Test Failed,,,0,1
10753,moment/moment,3497,Incorrect rounding when adding durations,  Issue:   Adding a duration of 10 and 15 minutes results in a duration of 24.999999999999996 minutes.    Steps to reproduce:        var minutesTen = moment.duration 10   minutes  .asHours  ; var minutesFifteen = moment.duration 15   minutes  .asHours  ; moment.duration minutesTen   minutesFifteen   h  .asMinutes  ; // Expecting 25 // Actual result 24.999999999999996        Environment:    Chrome 53 on Windows 10      js console.log   new Date   .toString    console.log  new Date   .toLocaleString    console.log   new Date   .getTimezoneOffset    console.log  navigator.userAgent  console.log moment.version        >      Thu Oct 13 2016 10:40:04 GMT 0200  W. Europe Daylight Time   120 Mozilla/5.0  iPhone; CPU iPhone OS 9_1 like Mac OS X  AppleWebKit/601.1.46  KHTML  like Gecko  Version/9.0 Mobile/13B143 Safari/601.1 2.15.1        Notes   Suspecting that the issue is caused by:      0.25   0.16666666666666666 // expected: 0.41666666666666666 // actual: 0.41666666666666663      And then:      moment.duration 0.41666666666666663   h  .asMinutes   // result: 24.999999999999996 moment.duration 0.41666666666666666   h  .asMinutes   // result: 25      This heavily screws up the _duration formatter_ plugin:      moment.duration minutesTen   minutesFifteen   h  .format  hh:mm    trim: false  ; // expected:  00:25  // actual:  00:24      ,jimothyhalpert7,closed,3,2016-10-13 08:53:34,2017-02-09 03:08:25,,Troubleshooting,,,0,1
10752,moment/moment,3498,[locale] tl ph: Update calendar strings,Changed the sentence construction for calendar time translation  @hagmandan please verify  Thanks ,RIanDeLaCruz,closed,4,2016-10-13 09:50:18,2016-11-06 09:41:16,,Language,,2.16.0,1,1
10751,moment/moment,3499,Implement toLocaleTimeString from Date  ,This is extremly useful when you don t want to manage winter/summer time and also you don t want to show the locla time of the user       js var date = new Date Date.UTC 2012  11  20  3  0  0  ;  // formats below assume the local time zone of the locale; // America/Los_Angeles for the US  // US English uses 12 hour time with AM/PM console.log date.toLocaleTimeString  en US   ; //    7:00:00 PM   // British English uses 24 hour time without AM/PM console.log date.toLocaleTimeString  en GB   ; //    03:00:00   // Korean uses 12 hour time with AM/PM console.log date.toLocaleTimeString  ko KR   ; //       12:00:00   // Arabic in most Arabic speaking countries uses real Arabic digits console.log date.toLocaleTimeString  ar EG   ; //     :  :       // when requesting a language that may not be supported  such as // Balinese  include a fallback language  in this case Indonesian console.log date.toLocaleTimeString [ ban    id ]  ; //    11.00.00       https://developer.mozilla.org/en US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString ,basiclines,closed,2,2016-10-13 11:05:20,2016-10-13 18:56:37,,,,0,1
10750,moment/moment,3500,moment fails to parse  1999 12 4   when new Date   can parse it correctly.,  Description of the Issue and Steps to Reproduce:    moment parses  1999 12 4  as  1999 12 1 . From reading the Moment docs  this string is not in ISO 8601 format  so it would be passed to  new Date   . However  manually passing the string to  new Date    produces the correct parsing  as seen below.  I looked through other existing issues could not find that this case had already been reported.  Reproduction in the Node.js console:      > moment  1999 12 4  .toString  ;  Wed Dec 01 1999 00:00:00 GMT 0500  > new Date  1999 12 4  ; Sat Dec 04 1999 00:00:00 GMT 0500  EST       _Please include the values of all variables used._    Environment:    Moment 2.15.1  Node 4.4.4  Ubuntu 16.04      Thu Oct 13 2016 13:31:06 GMT 0400  EDT  10/13/2016  1:31:06 PM 240 2.15.1     ,markstos,closed,6,2016-10-13 17:34:52,2016-11-06 09:39:10,,Bug,,,0,1
10749,moment/moment,3501,export defineLocale for god sake,because we just simply need it in typescript. tnx don t enforce MomentLanguage cause it makes lots of error on your existing locale. that is why I did put any as a type for locale property. ,hasangilak,closed,1,2016-10-13 20:26:54,2016-10-20 07:56:19,,,,1,1
10748,moment/moment,3502,[bugfix] Fix  3500: ISO 8601 parsing should match the full string  not the beginning of the string.,Before the fix  date strings which started with a valid ISO pattern but ended with non conforming data would pass as valid ISO dates and not trigger the deprecation warning  causing garbage in/garbage out bugs and silent failure.  Example of a garbage date which was considered Valid ISO before:       2016 01 Just a bunch of junk      Example of silent failure cases:      2016 12 4 would be match the  YYYY MM  ISO pattern  so would silently become  2016 12 1 .  2000 01 01T11:00:00 PM would match the    2000 01 01T11:00:00  ISO pattern  silently turning 11 PM into 11 AM.       Non of the above cases trigger the  non ISO deprecation warning   either.   Because of the nature of how the related tests are put together  the newly added test _passes_ even before the fix is applied.  This happens because the  non ISO  tests are tested against the same ISO regex which is being fixed.  Because the broken regex is also used in the test  it allowed the non ISO date to be validated before the fix.       This fix exposed another problem with non ISO dates in the test suite  so it causes 3 other test failures  which are now fixed  too. The other test failures are in:    test/moment/is_same_or_before.js   test/moment/is_same_or_after.js  All concern dates which look like this:     2013 02 01T 05:00  From what I can tell  it is not valid IS0 8601 to include a timezone offset without a time. The references I checked included:   The moment test suite  which has an extensive set of ISO 8601 cases to test   IS0 8601 wikipedia page   Attempt an IS0 8601 ABNF grammar http://www.egenconsulting.com/ietfcns.nsf/0bd281b2cc02b86a852564060002ca3d/cfcc618830db7cc5852563fb00584230?OpenDocument  These tests were updated to avoid this invalid date format after @icambron agreed the dates were not ISO format but should be.  ,markstos,closed,13,2016-10-13 21:16:45,2016-11-06 09:39:07,,Bug-fix,,2.16.0,1,1
10747,moment/moment,3503,TypeScript: Added firstDayOfWeek   method to BaseMomentLanguage interface declaration,,tobias-kuendig,closed,1,2016-10-14 06:42:00,2016-10-20 07:50:16,,,,1,1
10746,moment/moment,3504,[tests] Fixes  3463  parseZone not handling Z correctly  tests only ,This fix assumed that the flow control was failing to correctly handle  0  offsets and was interpreting them as falsey when we didnt it want it to ^^ ,wi-ski,closed,17,2016-10-14 15:41:52,2016-11-12 06:34:39,,Bug-fix,,2.17.0,1,1
10745,moment/moment,3505,Fix typo in jv.js,,rinopo,closed,1,2016-10-17 02:37:25,2016-10-17 02:39:25,,,,1,1
10744,moment/moment,3506,[bugfix] Fix invalid moments returning valid dates to method calls,   toDate    valueOf   and  unix  methods now return invalid when called on invalid moments   Addresses  3430  ,samuelfullerthomas,closed,11,2016-10-17 04:57:45,2016-11-12 06:28:08,,Bug-fix,,2.17.0,1,1
10743,moment/moment,3507,Problem with  subtract  method,  Description of the Issue and Steps to Reproduce:   When it is used a combination of subtract 1   days  and startOf  day   methods  the given variable has a inconsistent value.  It will have one more hour . Subtracting 2 days gives a correct value.  _Please include the values of all variables used._ var today = moment  .startOf  day ; //Mon Oct 17 2016 00:00:00 GMT 0200 today.subtract 1   days  .toDate  ; //Mon Oct 16 2016 01:00:00 GMT 0200 today.subtract 2   days  .toDate  ; //Mon Oct 15 2016 00:00:00 GMT 0200    Environment:    Chrome 53   Windows 10    Other information that may be helpful:   Timezone   GMT  0200  Brazilian Summer Time  Angular.JS is being used ,leonardo031195,closed,1,2016-10-17 13:13:48,2016-10-17 17:31:36,,,,0,1
10742,moment/moment,3508,Adds two new methods to get the next or previous day,Discussed in  2522  these two new methods   next    and  previous     should help those who want to calculate  last Wednesday  or  Sunday in two weeks . It s similar to  day    in usage  but isn t confined to the current week. So on Saturday  every day you request using  next    will be in the next week  assuming Sunday as 0 . In addition  it takes a second parameter which determines the offset in weeks.    Next and previous methods   These methods take two parameters  day  string or number  and offset in weeks  number . It defaults to the current day  exactly one week from now. The optional offset in weeks shifts the result by 7 days forward or backward.      javascript moment  .next day  offset  moment  .previous day  offset         Examples   Given today s date  2016 10 17  we can do the following:      javascript moment  .next   // Monday 24th moment  .next  Wednesday   // Wednesday 19th moment  .next 0  1  // Sunday 30th moment  .previous   // Monday 10th moment  .previous 4  2  // September 29th     ,mslooten,closed,4,2016-10-17 21:54:57,2016-10-20 07:53:05,,,,1,1
10741,moment/moment,3509,isValid function is not working for 01/02/0000,moment  01/02/0000    DD/MM/YYYY   true .isValid   return true ,nikhilvc,closed,1,2016-10-18 09:48:20,2016-10-18 15:22:33,,,,0,1
10740,moment/moment,3510,Create es cl.js,locale for Chile es cl  Date separator is      instead of  /  used in Standard Spanish. Hour format is 24 hour. ,blogcraft,closed,4,2016-10-18 16:55:07,2017-01-08 04:26:04,,Language,Needs tests,,,1,1
10739,moment/moment,3511,utcOffset is not a function in karma/jasmine tests,  Description of the Issue and Steps to Reproduce:     Write simple function      js  use strict ; function foobar      console.log moment.parseZone  2013 01 01T00:00:00 13:00  .utcOffset ;         Write test calling this function in jasmine/karma      js  use strict ; describe  foobar   function         it  should log a function   function             foobar  ;       ;   ;       Run test   Test returns log  undefined   For some reason in karma/jasmine utcOffset function is not set. Is anyone can explain me why? In web browser everything works fine. ,jankoprowski,closed,2,2016-10-19 09:09:30,2016-10-20 15:07:10,,Troubleshooting,,,0,1
10738,moment/moment,3512,isDST   not working for years after 2038,  Description of the Issue and Steps to Reproduce:   When we try to perform the following tests:       var date_no_dst = moment  2039 01 01  .tz  Europe/Berlin  ; undefined date_no_dst.isDST  ; false var date_dst = moment  2039 06 01  .tz  Europe/Berlin  ; undefined date_dst.isDST  ; false var date_dst_2036 = moment  2036 06 01  .tz  Europe/Berlin  ; undefined var date_no_dst_2036 = moment  2036 01 01  .tz  Europe/Berlin  ; undefined date_dst_2036.isDST  ; true date_no_dst_2036.isDST  ; false      we get inconsistent results. In our application we are relying on the isDST function to localize timeslices and provide the correct values to our users. When one of our users is accessing data with a timeslice grater than 2038  our localization fails.  Other tests: expected value s : 01.10.2186 06:00   01.10.2187 06:00  actual result s : 01.10.2186 04:00   01.10.2187 04:00  the method _isDST  _ returns false even if October is still DST in Germany     Environment:   Test System Chrome Version 53.0.2785.143 m  64 bit   Windows 7 64 bit    Other information that may be helpful:     The time zone setting of the machine the code is running on:   UTC 01:00 Brussels  Copenhagen  Madrid  Paris   The time and date at which the code was run:   19/10/2016 @12:55   Other libraries in use  TypeScript  Immutable.js  etc   If you are reporting an issue  please run the following code in the environment you are using and include the output:      js console.log   new Date   .toString    Wed Oct 19 2016 12:55:58 GMT 0200  Central Europe Daylight Time  undefined  console.log  new Date   .toLocaleString    19.10.2016  12:56:22 undefined  console.log   new Date   .getTimezoneOffset     120 undefined  console.log  navigator.userAgent  Mozilla/5.0  Windows NT 6.1; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/53.0.2785.143 Safari/537.36 undefined  console.log moment.version  2.9.0 undefined      _Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer._ ,HiMyNameIsIlNano,closed,3,2016-10-19 11:01:29,2016-10-19 22:48:07,,,,0,1
10737,moment/moment,3513,RFC2822 parsing implementation,Issue  2530 initial development supplied for feedback. ,TracyGJG,closed,7,2016-10-19 19:21:16,2016-11-07 19:18:07,,,,1,1
10736,moment/moment,3514,Find locale filename by language codes,In our build process we re trying to only load the locale we need for the current language to decrease file size. I managed to do that but  in order to load the correct locale  I need it s name/filename by languagecode.  Currently  I just replace  _  with      put all to lowercase and if country and language are equal  delete the country part.  Examples:    en_GB   >  en gb     de_DE   >  de     de_AT   >  de at       en_US   >  en us     > error  And there s the problem.  en us.js  is not a filename in locale in moment.js.  So my question is: what is a recommended  reliable way to get the moment.js locale filename by language code  without using moment.js? ,codeofsumit,closed,6,2016-10-20 06:18:39,2016-10-21 03:00:40,,,,0,1
10735,moment/moment,3515,[feature] Fix  2300: Default to current week.,This is an alternative to Pull Request  3406 which adds one improvement:  It updates Brian Schemp s patch calculates the current week once instead of twice for a small performance boost. ,markstos,closed,9,2016-10-20 14:08:31,2016-11-06 09:37:16,,Bug-fix,,2.16.0,1,1
10734,moment/moment,3516,Uncaught SyntaxError: Invalid regular expression,  Description of the Issue and Steps to Reproduce:    I ve just downloaded moment with locales.js from the site  and already got this error. Also  i can t initialize the script:   Uncaught ReferenceError: moment is not defined        Environment:    Chrome 54 on Ubuntu 16.04.1    Other information that may be helpful:    jQuery 3.1.1 ,JamesJGoodwin,closed,2,2016-10-20 21:20:02,2016-11-07 05:04:48,,Troubleshooting,,,0,1
10733,moment/moment,3517,Convert to Babel  Do Not Merge  ,Start of Babel convert. Individual files work fine  but the combined files are having problems with declarations of globals.  Will take help. ,maggiepint,closed,1,2016-10-22 02:25:33,2016-10-22 02:30:56,,,,1,1
10732,moment/moment,3518,Start of babel conversion,,maggiepint,closed,0,2016-10-22 02:32:08,2016-10-22 02:32:40,,,,1,1
10731,moment/moment,3519,Babel start of conversion  do not merge ,Community help welcome.  Start of conversion from Esparanto to Babel. Works for individual files  but combined files  moment with locales etc  are not working. ,maggiepint,closed,1,2016-10-22 02:34:09,2016-11-05 05:19:46,,,,1,1
10730,moment/moment,3520,parseZone s  differs from moment s .utcOffset s ;,  Description of the Issue and Steps to Reproduce:   moment.parseZone does not produce same results as mentioned in  [parseZone   Docs] http://momentjs.com/docs/ /parsing/parse zone/ .  The docs state that moment.parseZone is equivalent to parsing the string and using moment utcOffset.  This fails with  / 00:00.  Example below:      js var test =  2016 10 20T03:00:00 00:00 ; moment test .utcOffset test .format   // Good: 2016 10 20T03:00:00Z moment.parseZone test .format         // Bad:  2016 10 19T22:00:00Z  Expected: 2016 10 20T03:00:00Z        Environment:   Node 6.6.0 on OSX    Other information        js console.log   new Date   .toString     // Sat Oct 22 2016 09:06:24 GMT 0500  CDT  console.log  new Date   .toLocaleString     // 10/22/2016  9:06:24 AM console.log   new Date   .getTimezoneOffset     // 300 console.log moment.version   // 2.15.1     ,bkapicka,closed,4,2016-10-22 14:16:03,2016-12-05 05:19:12,,Bug,,,0,1
10729,moment/moment,3521,moment    > _isUTC is false for offset returning  0,  Description of the Issue and Steps to Reproduce:   On bootstraping the node application  when the timezone is set to UTC using the env variable as follows:  process.env.TZ =  UTC ;   The timezone is updated. MomentJS returns the date object in UTC Time. But inspecting the moment date object closely shows that the flag   _isUTC   is set to false. On further inspection with the JS date object       var d = new Date  ; d.getTimezoneOffset  ;        //Returns 0  moment  .utcOffset  ;          //Returns  0      Further checking it  if timezone is updated to   0   for moment object  everything works fine  but when it is    0    it does not.    Environment:   1. MomentJS   2.14.1 2. Node   6.2.2 3. Ubuntu   16.04    Code to run before reporting        js console.log   new Date   .toString    console.log  new Date   .toLocaleString    console.log   new Date   .getTimezoneOffset    console.log  navigator.userAgent  console.log moment.version       _Output:_ 1.  Sat Oct 22 2016 15:18:09 GMT 0000  UTC   2.  10/22/2016  3:18:25 PM  3. 0 4. NA   Node.JS 5.2.14.1 ,mdemblani,closed,2,2016-10-22 15:21:45,2016-11-06 17:54:33,,Bug,,,0,1
10728,moment/moment,3522,Not parsing Brazilian Dates Correctly,I m basing myself on the issue [ 308] https://github.com/moment/moment/issues/308   I began to notice that all dates whose day is greater than 12 is considered invalid. That is  the moment is considering the format  MM / DD / YYYY  even if I established the locale as  pt br . And it s the same result if I inform the format of the string I m passing. Please check the [fiddle] http://fiddle.jshell.net/m9jznzm4/ .  What am I doing wrong? And what should I do?  The output  as requested:      console.log   new Date   .toString    console.log  new Date   .toLocaleString    console.log   new Date   .getTimezoneOffset    console.log  navigator.userAgent  console.log moment.version           Sat Oct 22 2016 15:13:00 GMT 0200  BRST  2016 10 22 15:13:00.218  index :77 22/10/2016 15:13:00 2016 10 22 15:13:00.218  index :78 120 2016 10 22 15:13:00.219  index :79 Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/53.0.2785.143 Safari/537.36 2016 10 22 15:13:00.219  index :80 2.15.1     ,ThCC,closed,1,2016-10-22 17:14:30,2016-10-22 17:57:53,,,,0,1
10727,moment/moment,3523,[bugfix] parseZone should handle UTC,Fix for  3520 and  3521  where  parseZone  doesn t handle UTC correctly. Specifically  we need to treat parsing  0  out of the string differently from failing to parse it at all. ,icambron,closed,5,2016-10-23 05:17:11,2016-11-06 09:34:03,,Bug-fix,,2.16.0,1,1
10726,moment/moment,3524,Fix typos, attent a montly meeting  >  attend a monthly meeting  ,marciopuga,closed,0,2016-10-24 00:14:22,2016-10-28 23:03:51,,,,1,1
10725,moment/moment,3525,Speedup month standalone/format regexes,Reduce    s     in RegExp to    s    to speed them up. ,ichernev,closed,1,2016-10-24 06:20:44,2016-10-24 06:33:27,,performance,,2.15.2,1,1
10724,moment/moment,3526,Fix diff and localeData definitions,1. Add definitions  [source] https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/moment/moment.d.ts   and tests  own  for  moment.localeData    2. Fix definition for  moment  .diff    to allow other input types besides  Moment   own . 3. Add intermediate type  MomentComparable  for re use  [source] https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/moment/moment.d.ts  .  Note: I haven t looked into all the differences between this definition file and the one on DefinitelyTypes. It would be great to have them converged. ,Manduro,closed,1,2016-10-24 09:44:48,2016-11-05 04:58:28,,,,1,1
10723,moment/moment,3527,Issue with only passing in time...,So i am trying to take a time only  and then format it out.  I know I can use string split... but i want to keep it moment.   I see that there is a weird bug where if the time is after 10 this will work but anything before it will not...  Picture shown below shows this odd behavior:  [image] https://cloud.githubusercontent.com/assets/12544363/19649159/c0830c38 99d2 11e6 9116 56b5329c4534.png   Am i doing something wrong or is this not intended to do this and only works for strange use cases? ,giantsrg1,closed,7,2016-10-24 14:15:42,2016-11-06 17:54:03,,Bug,,,0,1
10722,moment/moment,3528,Show number of minutes after the hour,I m using the amTimeAgo Pipe. it s lovely  but in my case I need to get the format with the number of minutes after the hours. For example:  1 Hour and 42 minutes. 2 Hours and 13 minutes. 3 Hours and 15 minutes  In my app I have alot of 1 5 hours timings  so I need to show specific minutes after the hours. Is it possible to achieve such output with the moment? ,theunreal,closed,0,2016-10-24 19:07:57,2016-10-24 19:09:42,,,,0,1
10721,moment/moment,3529,Calling moment [Date]  returns different results than moment [Date]  [ MM/DD/YYYY ]  false ,If you pass a Date to the moment constructor  but also pass a format string  the resulting moment instance does not represent the correct date.   Using v 2.15.2: var d= new Date  2/1/2016  ; var m = moment d ; console.log m.format   ; // 2016 02 01T00:00:00 08:00 var m = moment d  [ MM/DD/YYYY ]  false ; console.log m.format   ; // 2016 01 20T00:00:00 08:00  I traced the issue to the prepareConfig function:   function prepareConfig  config           ...           else if  isArray format                 configFromStringAndArray config ;           else if  isDate input                 config._d = input; ...    It seems to me that the isDate   check should precede the isArray format  check.  ,opusrocks,closed,2,2016-10-25 23:37:09,2016-10-26 16:23:03,,,,0,1
10720,moment/moment,3530,[feature] Check whether input is date before checking if format is array,Fixes the issue as demonstrated here: https://jsfiddle.net/r6wpn9un/ ,johncrisostomo,closed,7,2016-10-26 07:35:36,2016-11-06 09:32:23,,Bug-fix,,2.16.0,1,1
10719,moment/moment,3531,Issue with Meteor 1.4.2 and Moment 2.15.2,After reading the blog post about the current recommended version of Meteor  I upgraded yesterday to 1.4.2.  When doing this  I used the flag   all packages to ensure everything was up to date.  However  the whole process kept failing with a large logging output.  I traced it back and figured out it was moment trying to update to 2.15.2 that was causing the issue.  To fix  I uninstalled moment from my meteor app  then ran the update  which worked perfectly  and then finally tried to add moment back in.  However it failed with the error at the bottom here.  I was able to successfully add moment version 2.15.1  so I am OK for now  but figured you would want to know about this issue.  I am on Windows 10  64 bit.  If you need any more information from me  please let me know        => Errors while adding packages:                                                   While loading package momentjs:moment@2.15.2:                                      error: Command failed:                                                             C: Users Duffey AppData Local .meteor packages meteor tool 1.4.2 mt os.windows.x86 _32 dev_bundle bin npm.cmd                                                         rebuild   update binary                                                            node pre gyp ERR  Tried to download:                                               https://fsevents binaries.s3 us west 2.amazonaws.com/v1.0.14/fse v1.0.14 node v46  win32 ia32.tar.gz                                                                  node pre gyp ERR  Pre built binaries not found for fsevents@1.0.14 and             node@4.6.1  node v46 ABI   falling back to source compile with node gyp            Traceback  most recent call last :                                                 File                                                                                C: Users Duffey AppData Local .meteor packages meteor tool 1.4.2 mt os.windows.x8 6_32 dev_bundle lib node_modules node gyp gyp gyp_main.py                          line 16  in <module>                                                               sys.exit gyp.script_main                                                           File                                                                                C: Users Duffey AppData Local .meteor packages meteor tool 1.4.2 mt os.windows.x8 6_32 dev_bundle lib node_modules node gyp gyp pylib gyp __init__.py                line 545  in script_main                                                           return main sys.argv[1:]                                                           File                                                                                C: Users Duffey AppData Local .meteor packages meteor tool 1.4.2 mt os.windows.x8 6_32 dev_bundle lib node_modules node gyp gyp pylib gyp __init__.py                line 538  in main                                                                  return gyp_main args                                                               File                                                                                C: Users Duffey AppData Local .meteor packages meteor tool 1.4.2 mt os.windows.x8 6_32 dev_bundle lib node_modules node gyp gyp pylib gyp __init__.py                line 523  in gyp_main                                                              generator.GenerateOutput flat_list  targets  data  params                          File                                                                                C: Users Duffey AppData Local .meteor packages meteor tool 1.4.2 mt os.windows.x8 6_32 dev_bundle lib node_modules node gyp gyp pylib gyp generator msvs.py          line 2003  in GenerateOutput                                                       sln_projects  project_objects  flat=msvs_version.FlatSolution                      File                                                                                C: Users Duffey AppData Local .meteor packages meteor tool 1.4.2 mt os.windows.x8 6_32 dev_bundle lib node_modules node gyp gyp pylib gyp generator msvs.py          line 1762  in _GatherSolutionFolders                                               return _DictsToFolders     root  flat                                              File                                                                                C: Users Duffey AppData Local .meteor packages meteor tool 1.4.2 mt os.windows.x8 6_32 dev_bundle lib node_modules node gyp gyp pylib gyp generator msvs.py          line 1715  in _DictsToFolders                                                      for folder  contents in bucket.iteritems  :                                        AttributeError:  MSVSProject  object has no attribute  iteritems                   gyp ERR  configure error                                                           gyp ERR  stack Error:  gyp  failed with exit code: 1                               gyp ERR  stack     at ChildProcess.onCpExit                                         C: Users Duffey AppData Local .meteor packages meteor tool 1.4.2 mt os.windows.x8 6_32 dev_bundle lib node_modules node gyp lib configure.js:305:16                  gyp ERR  stack     at emitTwo  events.js:87:13                                     gyp ERR  stack     at ChildProcess.emit  events.js:172:7                           gyp ERR  stack     at Process.ChildProcess._handle.onexit                           internal/child_process.js:200:12                                                  gyp ERR  System Windows_NT 10.0.14393                                              gyp ERR  command                                                                    C:  Users  Duffey  AppData  Local  .meteor  packages  meteor tool  1.4.2  mt os.w indows.x86_32  dev_bundle  bin  node.exe                                            C:  Users  Duffey  AppData  Local  .meteor  packages  meteor tool  1.4.2  mt os.w indows.x86_32  dev_bundle  lib  node_modules  node gyp  bin  node gyp.js            configure     fallback to build                                                      module=C:  Users  Duffey  AppData  Local  .meteor  packages  momentjs_moment  2 .15.2  npm  node_modules  .temp 96t8ze  node_modules  fsevents  lib  binding  Rele ase  node v46 win32 ia32  fse.node                                                    module_name=fse                                                                    module_path=C:  Users  Duffey  AppData  Local  .meteor  packages  momentjs_mome nt  2.15.2  npm  node_modules  .temp 96t8ze  node_modules  fsevents  lib  binding   Release  node v46 win32 ia32                                                      gyp ERR  cwd                                                                       C: Users Duffey AppData Local .meteor packages momentjs_moment 2.15.2 npm node_mod ules .temp 96t8ze node_modules fsevents                                            gyp ERR  node  v v4.6.1                                                            gyp ERR  node gyp  v v3.4.0                                                        gyp ERR  not ok                                                                    node pre gyp ERR  build error                                                      node pre gyp ERR  stack Error: Failed to execute                                    C: Users Duffey AppData Local .meteor packages meteor tool 1.4.2 mt os.windows.x8 6_32 dev_bundle bin node.exe                                                       C: Users Duffey AppData Local .meteor packages meteor tool 1.4.2 mt os.windows.x86 _32 dev_bundle lib node_modules node gyp bin node gyp.js                           configure   fallback to build                                                        module=C: Users Duffey AppData Local .meteor packages momentjs_moment 2.15.2 npm  node_modules .temp 96t8ze node_modules fsevents lib binding Release node v46 win3 2 ia32 fse.node                                                                      module_name=fse                                                                    module_path=C: Users Duffey AppData Local .meteor packages momentjs_moment 2.15. 2 npm node_modules .temp 96t8ze node_modules fsevents lib binding Release node v46  win32 ia32                                                                         1                                                                                 node pre gyp ERR  stack     at ChildProcess.<anonymous>                             C: Users Duffey AppData Local .meteor packages meteor tool 1.4.2 mt os.windows.x8 6_32 dev_bundle lib node_modules node pre gyp lib util compile.js:83:29            node pre gyp ERR  stack     at emitTwo  events.js:87:13                            node pre gyp ERR  stack     at ChildProcess.emit  events.js:172:7                  node pre gyp ERR  stack     at maybeClose  internal/child_process.js:829:16        node pre gyp ERR  stack     at Process.ChildProcess._handle.onexit                  internal/child_process.js:211:5                                                   node pre gyp ERR  System Windows_NT 10.0.14393                                     node pre gyp ERR  command                                                           C:  Users  Duffey  AppData  Local  .meteor  packages  meteor tool  1.4.2  mt os.w indows.x86_32  dev_bundle  bin  node.exe                                            C:  Users  Duffey  AppData  Local  .meteor  packages  meteor tool  1.4.2  mt os.w indows.x86_32  dev_bundle  lib  node_modules  node pre gyp  bin  node pre gyp       install     fallback to build                                                     node pre gyp ERR  cwd                                                              C: Users Duffey AppData Local .meteor packages momentjs_moment 2.15.2 npm node_mod ules .temp 96t8ze node_modules fsevents                                            node pre gyp ERR  node  v v4.6.1                                                   node pre gyp ERR  node pre gyp  v v0.6.30                                          node pre gyp ERR  not ok                                                            npm ERR  Windows_NT 10.0.14393                                                     npm ERR  argv                                                                       C:  Users  Duffey  AppData  Local  .meteor  packages  meteor tool  1.4.2  mt os.w indows.x86_32  dev_bundle  bin  node.exe                                            C:  Users  Duffey  AppData  Local  .meteor  packages  meteor tool  1.4.2  mt os.w indows.x86_32  dev_bundle  lib  node_modules  npm  bin  npm cli.js                  rebuild     update binary                                                         npm ERR  node v4.6.1                                                               npm ERR  npm  v3.10.9                                                              npm ERR  code ELIFECYCLE                                                           npm ERR  fsevents@1.0.14 install:  node pre gyp install   fallback to build        npm ERR  Exit status 1                                                             npm ERR                                                                            npm ERR  Failed at the fsevents@1.0.14 install script  node pre gyp install          fallback to build .                                                              npm ERR  Make sure you have the latest version of node.js and npm installed.       npm ERR  If you do  this is most likely a problem with the fsevents package        npm ERR  not with npm itself.                                                      npm ERR  Tell the author that this fails on your system:                           npm ERR      node pre gyp install   fallback to build                              npm ERR  You can get information on how to open an issue for this project          with:                                                                              npm ERR      npm bugs fsevents                                                     npm ERR  Or if that isn t available  you can get their info via:                   npm ERR      npm owner ls fsevents                                                 npm ERR  There is likely additional logging output above.                           npm ERR  Please include the following file with any support request:               npm ERR                                                                            C: Users Duffey AppData Local .meteor packages momentjs_moment 2.15.2 npm node_mod ules .temp 96t8ze npm debug.log                                                    node pre gyp ERR  Tried to download:                                               https://fsevents binaries.s3 us west 2.amazonaws.com/v1.0.14/fse v1.0.14 node v46  win32 ia32.tar.gz                                                                  node pre gyp ERR  Pre built binaries not found for fsevents@1.0.14 and             node@4.6.1  node v46 ABI   falling back to source compile with node gyp            Traceback  most recent call last :                                                 File                                                                                C: Users Duffey AppData Local .meteor packages meteor tool 1.4.2 mt os.windows.x8 6_32 dev_bundle lib node_modules node gyp gyp gyp_main.py                          line 16  in <module>                                                               sys.exit gyp.script_main                                                           File                                                                                C: Users Duffey AppData Local .meteor packages meteor tool 1.4.2 mt os.windows.x8 6_32 dev_bundle lib node_modules node gyp gyp pylib gyp __init__.py                line 545  in script_main                                                           return main sys.argv[1:]                                                           File                                                                                C: Users Duffey AppData Local .meteor packages meteor tool 1.4.2 mt os.windows.x8 6_32 dev_bundle lib node_modules node gyp gyp pylib gyp __init__.py                line 538  in main                                                                  return gyp_main args                                                               File                                                                                C: Users Duffey AppData Local .meteor packages meteor tool 1.4.2 mt os.windows.x8 6_32 dev_bundle lib node_modules node gyp gyp pylib gyp __init__.py                line 523  in gyp_main                                                              generator.GenerateOutput flat_list  targets  data  params                          File                                                                                C: Users Duffey AppData Local .meteor packages meteor tool 1.4.2 mt os.windows.x8 6_32 dev_bundle lib node_modules node gyp gyp pylib gyp generator msvs.py          line 2003  in GenerateOutput                                                       sln_projects  project_objects  flat=msvs_version.FlatSolution                      File                                                                                C: Users Duffey AppData Local .meteor packages meteor tool 1.4.2 mt os.windows.x8 6_32 dev_bundle lib node_modules node gyp gyp pylib gyp generator msvs.py          line 1762  in _GatherSolutionFolders                                               return _DictsToFolders     root  flat                                              File                                                                                C: Users Duffey AppData Local .meteor packages meteor tool 1.4.2 mt os.windows.x8 6_32 dev_bundle lib node_modules node gyp gyp pylib gyp generator msvs.py          line 1715  in _DictsToFolders                                                      for folder  contents in bucket.iteritems  :                                        AttributeError:  MSVSProject  object has no attribute  iteritems                   gyp ERR  configure error                                                           gyp ERR  stack Error:  gyp  failed with exit code: 1                               gyp ERR  stack     at ChildProcess.onCpExit                                         C: Users Duffey AppData Local .meteor packages meteor tool 1.4.2 mt os.windows.x8 6_32 dev_bundle lib node_modules node gyp lib configure.js:305:16                  gyp ERR  stack     at emitTwo  events.js:87:13                                     gyp ERR  stack     at ChildProcess.emit  events.js:172:7                           gyp ERR  stack     at Process.ChildProcess._handle.onexit                           internal/child_process.js:200:12                                                  gyp ERR  System Windows_NT 10.0.14393                                              gyp ERR  command                                                                    C:  Users  Duffey  AppData  Local  .meteor  packages  meteor tool  1.4.2  mt os.w indows.x86_32  dev_bundle  bin  node.exe                                            C:  Users  Duffey  AppData  Local  .meteor  packages  meteor tool  1.4.2  mt os.w indows.x86_32  dev_bundle  lib  node_modules  node gyp  bin  node gyp.js            configure     fallback to build                                                      module=C:  Users  Duffey  AppData  Local  .meteor  packages  momentjs_moment  2 .15.2  npm  node_modules  .temp 96t8ze  node_modules  fsevents  lib  binding  Rele ase  node v46 win32 ia32  fse.node                                                    module_name=fse                                                                    module_path=C:  Users  Duffey  AppData  Local  .meteor  packages  momentjs_mome nt  2.15.2  npm  node_modules  .temp 96t8ze  node_modules  fsevents  lib  binding   Release  node v46 win32 ia32                                                      gyp ERR  cwd                                                                       C: Users Duffey AppData Local .meteor packages momentjs_moment 2.15.2 npm node_mod ules .temp 96t8ze node_modules fsevents                                            gyp ERR  node  v v4.6.1                                                            gyp ERR  node gyp  v v3.4.0                                                        gyp ERR  not ok                                                                    node pre gyp ERR  build error                                                      node pre gyp ERR  stack Error: Failed to execute                                    C: Users Duffey AppData Local .meteor packages meteor tool 1.4.2 mt os.windows.x8 6_32 dev_bundle bin node.exe                                                       C: Users Duffey AppData Local .meteor packages meteor tool 1.4.2 mt os.windows.x86 _32 dev_bundle lib node_modules node gyp bin node gyp.js                           configure   fallback to build                                                        module=C: Users Duffey AppData Local .meteor packages momentjs_moment 2.15.2 npm  node_modules .temp 96t8ze node_modules fsevents lib binding Release node v46 win3 2 ia32 fse.node                                                                      module_name=fse                                                                    module_path=C: Users Duffey AppData Local .meteor packages momentjs_moment 2.15. 2 npm node_modules .temp 96t8ze node_modules fsevents lib binding Release node v46  win32 ia32                                                                         1                                                                                 node pre gyp ERR  stack     at ChildProcess.<anonymous>                             C: Users Duffey AppData Local .meteor packages meteor tool 1.4.2 mt os.windows.x8 6_32 dev_bundle lib node_modules node pre gyp lib util compile.js:83:29            node pre gyp ERR  stack     at emitTwo  events.js:87:13                            node pre gyp ERR  stack     at ChildProcess.emit  events.js:172:7                  node pre gyp ERR  stack     at maybeClose  internal/child_process.js:829:16        node pre gyp ERR  stack     at Process.ChildProcess._handle.onexit                  internal/child_process.js:211:5                                                   node pre gyp ERR  System Windows_NT 10.0.14393                                     node pre gyp ERR  command                                                           C:  Users  Duffey  AppData  Local  .meteor  packages  meteor tool  1.4.2  mt os.w indows.x86_32  dev_bundle  bin  node.exe                                            C:  Users  Duffey  AppData  Local  .meteor  packages  meteor tool  1.4.2  mt os.w indows.x86_32  dev_bundle  lib  node_modules  node pre gyp  bin  node pre gyp       install     fallback to build                                                     node pre gyp ERR  cwd                                                              C: Users Duffey AppData Local .meteor packages momentjs_moment 2.15.2 npm node_mod ules .temp 96t8ze node_modules fsevents                                            node pre gyp ERR  node  v v4.6.1                                                   node pre gyp ERR  node pre gyp  v v0.6.30                                          node pre gyp ERR  not ok                                                            npm ERR  Windows_NT 10.0.14393                                                     npm ERR  argv                                                                       C:  Users  Duffey  AppData  Local  .meteor  packages  meteor tool  1.4.2  mt os.w indows.x86_32  dev_bundle  bin  node.exe                                            C:  Users  Duffey  AppData  Local  .meteor  packages  meteor tool  1.4.2  mt os.w indows.x86_32  dev_bundle  lib  node_modules  npm  bin  npm cli.js                  rebuild     update binary                                                         npm ERR  node v4.6.1                                                               npm ERR  npm  v3.10.9                                                              npm ERR  code ELIFECYCLE                                                           npm ERR  fsevents@1.0.14 install:  node pre gyp install   fallback to build        npm ERR  Exit status 1                                                             npm ERR                                                                            npm ERR  Failed at the fsevents@1.0.14 install script  node pre gyp install          fallback to build .                                                              npm ERR  Make sure you have the latest version of node.js and npm installed.       npm ERR  If you do  this is most likely a problem with the fsevents package        npm ERR  not with npm itself.                                                      npm ERR  Tell the author that this fails on your system:                           npm ERR      node pre gyp install   fallback to build                              npm ERR  You can get information on how to open an issue for this project          with:                                                                              npm ERR      npm bugs fsevents                                                     npm ERR  Or if that isn t available  you can get their info via:                   npm ERR      npm owner ls fsevents                                                 npm ERR  There is likely additional logging output above.                           npm ERR  Please include the following file with any support request:               npm ERR                                                                            C: Users Duffey AppData Local .meteor packages momentjs_moment 2.15.2 npm node_mod ules .temp 96t8ze npm debug.log                                                        ,bduff9,closed,12,2016-10-26 17:28:28,2016-11-06 09:15:45,,,,0,1
10718,moment/moment,3532,Working on:   3225,moment.duration NaN .humanize   returns  a few seconds      wrote test     have not yet resolved. ,bengio777,closed,2,2016-10-26 17:56:43,2016-11-27 23:35:14,,,,1,1
10717,moment/moment,3533,moment.duration NaN  now throws an error  issue 3225    3071 ,,zenvercoder,closed,7,2016-10-27 00:01:05,2017-01-08 04:27:45,,,,1,1
10716,moment/moment,3534,Add back missing units in UnitOfTime,,tngan,closed,4,2016-10-27 06:24:08,2016-11-05 04:42:50,,,,1,1
10715,moment/moment,3535,Multiple locales always end up in last imported one,Hey   I m using the last version of moment  2.15.2  with Ionic 2 RC.1  When I import many locales  like following:      import moment from  moment ; import  moment/src/locale/fr ; import  moment/src/locale/de ; import  moment/src/locale/it ;      Settings the locales to moment will actually have no effect  I will always end up using the last imported locales. For example if I set french like following:      moment  .locale  fr  ;      => I will still have the locales set in italian.  like for pattern  MMMM YYYY  my app will display  OTTOBRE 2016  instead of  OCTOBRE 2016    I my example  if I remove the italian import  I will end up in german  etc.  Do I do something wrong or is that a bug?  Thx in advance for your feedback. ,peterpeterparker,closed,16,2016-10-27 13:27:25,2016-10-28 11:22:03,,,,0,1
10714,moment/moment,3536,moment won t parse some month in french,  Description of the Issue and Steps to Reproduce:   moment won t parse some month in french  _Please include the values of all variables used._ Paste the code in runkit      javascript var moment = require  moment   moment.locale  fr     // Working parsing var janvier = moment  12 janvier   var mars = moment  12 mars   var septembre = moment  12 septembre   var octobre = moment  12 octobre   var novembre = moment  12 novembre    console.log janvier._d  console.log mars._d  console.log septembre._d  console.log octobre._d  console.log novembre._d    // Not working parsing var avril = moment  12 avril   var mai = moment  12 mai   var juin = moment  12 juin   var juillet = moment  12 juillet     var d cembre = moment  12 d cembre  ; var decembre = moment  12 decembre  ;  var ao t = moment  12 ao t  ; var aout = moment  12 aout  ;  var f vrier = moment  12 f vrier  ; var fevrier = moment  12 fevrier  ;  console.log avril._d  console.log mai._d  console.log juin._d  console.log juillet._d   console.log d cembre._d  console.log decembre._d  console.log ao t._d  console.log aout._d  console.log f vrier._d  console.log fevrier._d          Environment:   In chrome/chromium/canari on windows 7 and Debian8. In runkit also => https://runkit.com/npm/moment ,l1br3,closed,2,2016-10-27 16:56:53,2016-10-27 17:33:32,,,,0,1
10713,moment/moment,3537,Can t find a difference between two dates,Hi. I m trying to find a difference between two dates. First off all  i m parsing a unix timestamp date  then converting it to normal date and try to compare today s date and parsed date with  .diff    function  but console says that diff   is not a function. I almost break my mind with this function. Why it doesn t working?         function unixToDays         var today = moment  .format  YYYY  MM  DD  ;        .card.offer  .each function i            var unixDate =   this .find  span days count  .text  ;         var time = moment.unix unixDate .format  YYYY  MM  DD  ;         var difference = time.diff today   days  ;         console.log difference ;         //  this .find   days count  .text dateString ;       ;   ;     ,JamesJGoodwin,closed,1,2016-10-27 19:07:57,2016-10-27 19:18:15,,,,0,1
10712,moment/moment,3538,[pkg] Publish Meteor package from meteor directory to fix  3531,Fixes issue  3531.  Instead of copying  meteor/package.js  into the root directory and publishing from there  the Grunt script should run  meteor publish  from the  meteor/  directory. This commit implements the changes necessary to make that work.  The most important benefit of this change is that the nearly 200MB of  node_modules  in the root  moment  directory will not accidentally be published along with the Meteor package. This behavior is new in 1.4.2  and was an intentional change  but unfortunately it means  momentjs:moment@2.15.2  is very large  and even unusable for some developers.  I work for Meteor Development Group  and this is a popular package in our developer community  so I hope you ll consider merging this pull request quickly.  If you want to test these changes  in particular the reduction in package size   I ve published an identical package called  benjamn:moment   which you can add to any Meteor app:      sh meteor create test app cd test app meteor add benjamn:moment du  chs   which meteor /../packages/benjamn_moment meteor run     ,benjamn,closed,13,2016-10-27 19:11:47,2016-11-06 09:15:43,,Build/Release,,2.16.0,1,1
10711,moment/moment,3539,Moment timez changes once output to server in another location.,I ve been working on a travel form for a few months now and I ve had this issue regarding times being sent correctly.  I m using a Angular DateTimePicker which sends all times through JSON and into our CRM   Which is in different states . The dates come back correct  however  the time values are about 4 hours off.  Now originally  I used add   but if I want users from other parts of the country to be able to add their time without the server messing with the value  how can I configure the value to post the date without changing it due to whatever timezone it s in.  I m currently using require   Angular   moment  moment timezones      angular.forEach stopData  function value  index                    var departDate = moment.parseZone stopData[index][ depart_date ]   MM/DD/YYYY hh:mmaZ  .utcOffset tzone .format  ;                 var arriveDate = moment.parseZone stopData[index][ arrive_date ]   MM/DD/YYYY hh:mmaZ  .utcOffset tzone .format  ;                  stopData[index][ depart_date ] = departDate;                 stopData[index][ arrive_date ] = arriveDate;               ;     ,Markj89,closed,8,2016-10-27 19:46:36,2016-11-28 00:33:35,,Troubleshooting,,,0,1
10710,moment/moment,3540,bug isBefore   function with same timestamp in version 2.15.2,the now date is 2016 10 28   a = moment  .hours 0 .minutes 0 .seconds 0 ; b = moment  2016 10 28   YYYY MM DD  ;  console.log a.isBefore b   console.log b.isBefore a     the first output is correct and the second output true which should be false ,jadeHuang,closed,2,2016-10-28 04:03:43,2016-10-28 06:37:39,,,,0,1
10709,moment/moment,3541,Fails to parse date with short time,I ve got error on parsing moment  2016 10 28 5:33:38   in IE10 with 2.8.3 version. So I ve tried new version in jsfiddle and result is incorrect.  moment  2016 10 28 5:33:38     Fri Oct 28 2016 00:00:00 GMT 0300  Russia Standard Time  moment  2016 10 28 05:33:38     Fri Oct 28 2016 05:33:38 GMT 0300  Russia Standard Time   https://jsfiddle.net/dimalu85/etzwaet9/ Windows 10  IE10  Chrome 53.0.2785.143  log output:  Fri Oct 28 2016 13:17:14 GMT 0300  Russia Standard Time  VM345:53 28.10.2016  13:17:14  index :54  180  index :55 Mozilla/5.0  Windows NT 10.0; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/53.0.2785.143 Safari/537.36  index :56 2.15.2  2016 10 28 5:33:38   Fri Oct 28 2016 00:00:00 GMT 0300                   2016 10 28 05:33:38   Fri Oct 28 2016 05:33:38 GMT 0300                   Fri Oct 28 2016 13:18:32 GMT 0300                    28 . 10 . 2016   13 : 18 : 32  180 Mozilla/5.0  Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; InfoPath.3; ASU2JS; rv:11.0  like Gecko 2.15.2 ,dimalu85,closed,3,2016-10-28 10:20:14,2016-10-28 22:08:11,,,,0,1
10708,moment/moment,3542,Diff error when creating date with format,When creating a date using a non ISO format  the diff function returns weird results  it seems like it is ignoring the minutes of the date .   26/10/2016 14:19:46   26/10/2016 14:19:37 = 9 seconds   26/10/2016 14:08:50   26/10/2016 14:08:39 = 11 seconds   26/10/2016 14:07:00   26/10/2016 14:06:49 =  49 seconds   26/10/2016 13:48:07   26/10/2016 13:47:43 =  36 seconds   26/10/2016 13:58:07   26/10/2016 13:47:43 =  36 seconds  Here is a [jsFiddle ] https://jsfiddle.net/tikoflano/8m7dgny3/2/ where you can check the issue:      var dates = [      start:  26/10/2016 14:19:37   end:  26/10/2016 14:19:46         start:  26/10/2016 14:08:39   end:  26/10/2016 14:08:50         start:  26/10/2016 14:06:49   end:  26/10/2016 14:07:00         start:  26/10/2016 13:47:43   end:  26/10/2016 13:48:07         start:  26/10/2016 13:47:43   end:  26/10/2016 13:58:07   ];  for let i = 0  len = dates.length; i < len; i         let start = moment dates[i].start   DD/MM/YYYY H:i:s  ;   let end = moment dates[i].end   DD/MM/YYYY H:i:s  ;   let diff = end.diff start   seconds  ;    document.body.innerHTML  =  <div>  end._i       start._i   =   diff   seconds </div><br> ;    document.body.innerHTML  =  <hr> ;  dates = [      start:  2016 10 25 14:19:37   end:  2016 10 25 14:19:46         start:  2016 10 25 14:08:39   end:  2016 10 25 14:08:50         start:  2016 10 25 14:06:49   end:  2016 10 25 14:07:00         start:  2016 10 25 13:47:43   end:  2016 10 25 13:48:07         start:  2016 10 25 13:47:43   end:  2016 10 25 13:58:07   ];  for let i = 0  len = dates.length; i < len; i         let start = moment dates[i].start ;   let end = moment dates[i].end ;   let diff = end.diff start   seconds  ;    document.body.innerHTML  =  <div>  end._i       start._i   =   diff   seconds </div><br> ;        I m using Chrome 54 on Widnows 10   Next is the output of:      console.log   new Date   .toString    console.log  new Date   .toLocaleString    console.log   new Date   .getTimezoneOffset    console.log  navigator.userAgent  console.log moment.version        Fri Oct 28 2016 11:02:55 GMT 0300  Hora verano Sudam rica Pac fico    28/10/2016 11:02:55   180   Mozilla/5.0  Windows NT 10.0; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/54.0.2840.71 Safari/537.36   2.15.2 ,tikoflano,closed,1,2016-10-28 14:05:56,2016-10-28 23:27:28,,,,0,1
10707,moment/moment,3543,[locale] ar sa: Change start of week from Saturday to Sunday,Redo  3261 ,ichernev,closed,4,2016-10-29 01:57:30,2016-11-06 09:02:14,,Language,,2.16.0,1,1
10706,moment/moment,3544,Intermixing time zones,  Description of the Issue and Steps to Reproduce:   This should ve been a fairly simple operation  but with intermixing time zones everything got blown up. The issue arises when having multiple time zones  those could come from localized calendar components or external services.  When I am only interested in the date  according to the timestamp   I want to neutralize the time  set it to 00:00  in a way that corresponds to the server where I store the data  let s say GMT  and the server stores nothing but the date  like many date database types does   just to intercept the argument with having time zones should solve it  because if there is no time zone only the date is left. So my approach was to do something along the lines of:      var fixTimeZoneOffset = function date        var correctedDate = moment date ; // Overcome the nasty mutability... btw.  what? A mutable date component  really?     correctedDate.hours 0 .minutes 0 ;      var timezoneOffset = moment.parseZone correctedDate .utcOffset  ;     correctedDate.add timezoneOffset   minutes  ;      return correctedDate;  ;      If the date object is in the same time zone as the browser  this works fine:  fixTimeZoneOffset moment  2016 01 13T13:37:00      sweet.  But what happens when I get a date that does not correspond? Let s say the browser is set to GMT 02  either through timezone or just being the settings the browser is run with   and we pass the following:  fixTimeZoneOffset moment  2016 01 13T13:37:00 03:00      then I would expect the hours 0 .minutes 0  part to act relative to GMT 03  not GMT 02  however the resulting time after that step will be:  2016 01 12T19:00:00 03:00  or  2016 01 12T22:00:00Z . When correcting for the offset now the result will end up in  2016 01 12T22:00:00Z  in stead of the expected  2016 01 12T00:00:00Z .  For the love of sanity  could you please change hours  minutes etc. to operate of the time zone of the actual object? It is highly unexpected to have something defined with moment  [...] XX:XX   operate in timezone   YY:YY .    Environment:   Browsers  combined with external data. Tested with Firefox on Ubuntu  Chrome on Ubuntu  Edge Windows 10 and Internet Explorer Windows 10  behavior is identical          ,rohdef,closed,4,2016-10-29 13:30:36,2016-10-29 15:38:35,,,,0,1
10705,moment/moment,3545,[build] Use rollup and babel instead of esperanto for transpiling,This gets rid of the annoying deprecation warning. It also makes the build slower ... I think its a conspiracy with computer vendors ;    The transpiling is done slightly cleaner now. Unfortunately we still need to hack the headers for a lack of customizability on rollup s part. ,ichernev,closed,5,2016-10-29 14:06:23,2016-11-06 09:50:35,,Build/Release,,2.16.0,1,1
10704,moment/moment,3546,[bugfix] Implement lazy loading of child locales with missing prents,This is a minimalistic redo of  3336 without the crazy test scaffolding.  @skfd what do you think.  I d wait and see if users are happy  there are a few ways to improve it  but if that works I m happy to leave it. ,ichernev,closed,2,2016-10-29 14:10:19,2016-11-06 09:57:19,,Bug-fix,,2.16.0,1,1
10703,moment/moment,3547,Is this a bug? dateTime.month  ?,When I try  dateTime.month    that should give me 10  it gives me 9 instead. So I don t know if I miss something or don t understand something clearly. Thank you in advance.  Code:   [image] https://cloud.githubusercontent.com/assets/1377991/19832191/226428a6 9e47 11e6 8aff fe6e79639d04.png  Result:   [image] https://cloud.githubusercontent.com/assets/1377991/19832192/30fe0b20 9e47 11e6 984b c19a02602ce9.png  ,spksoft,closed,2,2016-10-29 19:19:06,2016-10-29 19:20:00,,,,0,1
10702,moment/moment,3548,Immutable API,This is an implementation of moment/moment rfcs 2  which was written to address  1754.  This is obviously a breaking API change that would require a new major version number  e.g.  3.0  .  The only major change from the RFC draft s discussion is that  moment.updateOffset    and  moment.duration  ._bubble    will now return moment and duration objects  respectively.  Otherwise it s pretty much impossible for external code to customize the behavior of these hooks.  Feedback welcome   :smiley: ,butterflyhug,open,23,2016-10-30 02:22:06,0000-00-00 00:00:00,,Breaking change,Discussion,,,1,1
10701,moment/moment,3549,2 tests failed. zone switching:zone to local  keepLocalTime = true  2748.1  zone switching:zone to local  keepLocalTime = true  2748.2  ,    Client info      Date String   : Sun Oct 30 2016 20:58:00 GMT 0200  FLE Standard Time  Locale String : 30/10/2016   20:58:00 Offset        :  120 User Agent    : Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/54.0.2840.71 Safari/537.36 Moment Version: 2.15.2            zone switching:zone to local  keepLocalTime = true  2748.1   afterEach failed on zone to local  keepLocalTime = true: Expected deprecation warnings did not happen: moment  .zone      javascript // Expected undefined // Actual   null null === undefined            zone switching:zone to local  keepLocalTime = true  2748.2   Expected 0 assertions  but 1 were run      javascript // Expected undefined // Actual   null null === undefined     ,christophetd,closed,0,2016-10-30 18:58:53,2016-12-19 08:56:32,,Unit Test Failed,,,0,1
10700,moment/moment,3550,Parsing time w/o error when the format is not matching,   js  moment  17:52:08    hh:mm A  .isValid    true       Isn t it supposed to fail?,afanasy,closed,1,2016-10-31 10:06:06,2016-10-31 10:13:35,,,,0,1
10699,moment/moment,3551,Builds of Webpack ::: as a feature request,  Please if possible create webpack build option,Peripona,closed,4,2016-10-31 10:38:13,2016-11-19 10:19:10,,,,0,1
10698,moment/moment,3552,Add 1 week to 52 resets back to week 1,When adding a week to the last week  of the year. e.g.  moment  2013 52    YYYY WW  .add 1   week  .format  YYYY WW  ;  it should be returning  the next year at week 1:  2014 01  but instead returns the same year at week 1  2013 01 .    Subtracts seem to work fine. e.g.   moment  2013 01    YYYY WW  .subtract 1   week  .format  YYYY WW  ;  returns  2012 52     Tested this in Chrome on OS X with 2.14.1 version of moment.,iamdriz,closed,1,2016-10-31 13:50:02,2016-10-31 13:59:48,,,,0,1
10697,moment/moment,3553,How to convert Gregorian year to the Japanese calendar year ?,such as    2016  >   27 ,shikelong,closed,1,2016-11-01 06:06:53,2016-11-01 14:21:55,,,,0,1
10696,moment/moment,3554,Day validation with  DD  format,  moment  31    DD   true .isValid   returns false if current month has only 30 days      If I execute  moment  31    DD   true .isValid    it returns  false  if current month has only 30 days. Is it expected behaviour?       Environment:       All   ,jonasnas,closed,2,2016-11-01 10:50:36,2016-11-06 17:29:24,,,,0,1
10695,moment/moment,3555,3 tests failed. diff:diff across DST  2336.17  diff:diff across DST  2336.19  relative time:custom rounding  2630.3  ,    Client info       Date String   : Tue Nov 01 2016 13:58:48 GMT 0600  CST   Locale String : 11/1/2016  1:58:48 PM  Offset        : 360  User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_0  AppleWebKit/537.36  KHTML  like Gecko  Chrome/54.0.2840.71 Safari/537.36  Moment Version: 2.15.2         ====        diff:diff across DST  2336.17      month diff across DST  lower bound       javascript  // Expected true  // Actual   false  false === true         ====        diff:diff across DST  2336.19      year diff across DST  lower bound       javascript  // Expected true  // Actual   false  false === true         ====        relative time:custom rounding  2630.3      Round down towards the nearest day       javascript  // Expected in 30 days  // Actual   in a month   in a month  ===  in 30 days      ,mokingguy,closed,2,2016-11-01 20:00:42,2016-11-02 20:21:40,,Unit Test Failed,,,0,1
10694,moment/moment,3556,Added  isoweek  for UnitOfTime in moment.d.ts,It d be great if it could be merged or added,davidxiao,closed,1,2016-11-02 08:13:51,2016-11-03 02:40:25,,,,1,1
10693,moment/moment,3557,Slightly strangeness on moment ,I don t fully understand why this is happening I m not even sure it s an issue but I figured I d post it here anyway.    We just changed the clocks back in England  which meant we had a day that was 25 hours long. The next day  we had a day appearing twice in the calendar on our site.    Basically:       js  moment.duration  moment  2016 10 30  .diff  2016 10 31   .asDays  ;  //  > 1.041666    moment  2016 10 31  .diff  2016 10 30    days  ;  //  > 1         We were originally using the former  but switched to the latter to fix the issue. The former remains recommended in many places across the internet.    Is this expected / known?  also  does this happen with leap seconds too? ,callumacrae,closed,2,2016-11-02 10:32:03,2016-11-02 17:31:19,,,,0,1
10692,moment/moment,3558,ua locale add,Hello. We need Ukrainian localization  so we translate it from ru.,vasiliyBurlaka,closed,2,2016-11-02 13:01:03,2016-11-02 20:30:52,,,,1,1
10691,moment/moment,3559,[misc] Clean up usage of  typeof , typeof  is an operator not a function. Removing the unneeded parenthesis  makes this clear. Additionally  using  typeof  to check for undefined  values rather than checking equality to  undefined  is safer. Comparing  to  undefined  can be broken if someone assigns to  window.undefined .,captbaritone,closed,8,2016-11-02 19:37:20,2017-03-02 08:38:28,,Pending Next Release,,,1,1
10690,moment/moment,3560,Bugfix/fix module reference,Found that it was impossible to pull in the moment declaration into Typescript application reliably  and it didn t appear to have the module declaration.  This adds the declaration along with fixing the test script.  Tested under Typescript 1.8 and 2.0.,jedimonkey,closed,10,2016-11-03 02:00:50,2016-11-05 04:27:58,,,,1,1
10689,moment/moment,3561,Added  isoweek  for UnitOfTime in moment.d.ts,It d be great if it could be merged or added from your side,davidxiao,closed,1,2016-11-03 02:40:11,2016-11-03 06:06:11,,,,1,1
10688,moment/moment,3562,Updated typings to allow for isoWeeks,TypeScript does not allow for the  isoWeek  unit of time and causes an error when trying to compile    [StartOf Documentation] http://momentjs.com/docs/ /manipulating/start of/     Before this change simply trying to use      let date = moment  .year 2016 .dayOfYear 271 .startOf  isoWeek  .toDate         Would cause TypeScript to throw this error      Argument of type   isoWeek   is not assignable to parameter of type   s     year     years     y     quarter     quarters     Q     month     months     M     week   ... . ,jgo4th,closed,2,2016-11-03 15:50:40,2016-11-03 19:00:33,,,,1,1
10687,moment/moment,3563,[locale] ca: Change future relative time,Fixes common mistake described in http://esadir.cat/entrades/fitxa/id/1496    Original PR was  3446 ,pereorga,closed,3,2016-11-03 19:45:50,2016-11-12 06:11:38,,Language,,2.17.0,1,1
10686,moment/moment,3564,Moment date object not binding in input type time in angualrjs,  We are using moment 2.14.2 version in the angularjs. Here  I m not getting an updated value in the ng model when I change the input type time. Here is the scenario to reproduce the issue.        Convert time from string to moment date object     js  angular.module  timeExample   []      .controller  DateController   [  scope   function  scope           scope.startTime = moment  10:20    HH:mm  .toDate  ;       //working snippet       // scope.startTime = new Date 1970  0  1  10  20  0 ;      ] ;  <div ng controller= DateController >  <input type= time  placeholder= HH:mm  min= 00:00  max= 23:59  ng model= startTime  />  <tt>value =   startTime   date:  HH:mm:ss   </tt><br/>  </div>        This model value is undefined and doesn t get update when I change the time  but if I use javascript date object It is updating the model.     Is anyone faced this kind of issue? help me to solve or do I want to create new component/directive to watch the changes and update the model value? any idea why model value doesn t get update?,go2shibu,closed,1,2016-11-04 07:16:29,2016-11-09 19:56:47,,Troubleshooting,,,0,1
10685,moment/moment,3565,RFC2822 parsing implementation,Work in Progress   Do Not Merge  Advice requested   Why is my RFC2822 test failing?,TracyGJG,closed,5,2016-11-04 22:32:26,2016-11-07 19:18:35,,,,1,1
10684,moment/moment,3566,1 test failed. week year:week numbers 2012/2013  2446.7  ,    Client info       Date String   : Sat Nov 05 2016 09:39:24 GMT 0800           Locale String : 2016/11/5   9:39:24  Offset        :  480  User Agent    : Mozilla/5.0  Windows NT 10.0; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/54.0.2840.71 Safari/537.36         ====        week year:week numbers 2012/2013  2446.7             javascript  // Expected 53  // Actual   52  52 === 53     ,maple3142,closed,0,2016-11-05 01:40:04,2017-09-16 16:06:36,,Unit Test Failed,,,0,1
10683,moment/moment,3567,[build] Drop 0.10 environment from .travis.yml,https://github.com/moment/moment/pull/3545 issuecomment 258198233    Node 0.10 is dead. Long live Node ,ichernev,closed,1,2016-11-05 04:36:48,2016-11-06 09:46:00,,Build/Release,,2.16.0,1,1
10682,moment/moment,3568,Only want to compare TIME values MomentJS,After looking through other MomentJS questions I m still stumped as to how one would use moment to simply compare   two different times         I need  want  the day/date to be ignored.       Use case:      I m reading a schedule w/ start   end times from a config file.  This is done using Node.js  > Start time = 6:30 PM    > End time = 3:30 AM        var currentTime= moment  ;    // e.g. 11:00 pm      var startTime = moment  06:30 pm    HH:mm a  ;      var endTime = moment  03:30 am    HH:mm a  ;            amIBetween = currentTime.isBetween startTime   endTime ;      console.log amIBetween ;   //  returns false.  if date ignored I expect TRUE    My scenario is technically   spanning two days   and I understand why it s false.    I need  expect  moment to return TRUE   i.e. that currentTime isBeteen startTime and endTime and falls in that range.     I thought I had it solved by checking if endTime hour is > 12 then add a day to make moment understand it s the following day.  e.g.         if  startTime.hour   >=12    endTime.hour   <=12          endTime.add 1   days  ;       // handle spanning days         var isBetween = currentTime.isBetween startTime  endTime ;   // TRUE           But if currentTime is also after midnight then it breaks   e.g.    01:30am will not be considered between 06:30pm and 03:30am    also because of different days    Any other suggestions for accomplishing this and simply ignoring the day/date?    I m finding it hard to believe that it s this complex  but maybe it is :           Here s further clarification that issue arises with spanning days  even when trying to be more explicit:        var currentTime= moment  11:00p    HH:mm a  ;      var startTime = moment  06:00p    HH:mm a  ;      var endTime = moment  03:30a    HH:mm a  ;        currentTime.toString  ; // Fri Oct 28 2016 23:00:00 GMT 0400       startTime.toString  ;   //  Fri Oct 28 2016 18:00:00 GMT 0400       endTime.toString  ;    //  Fri Oct 28 2016 03:30:00 GMT 0400         currentTime.isBetween startTime  endTime ;  // false      currentTime.isAfter endTime     currentTime.isBefore startTime ; //false      currentTime.isAfter startTime     currentTime.isBefore endTime ; //false    Seems kind of obvious that they d be false since the  day/date  is considered by moment.  This is what I m trying to get around.    The following would work:        endTime.add 1   days  ;      currentTime.isBetween startTime  endTime ;  // TRUE    This would mean however  that I d need to check if the START TIME was before 12AM    the ENDTIME as after 12AM then add 1 day to ENDTIME. ,rfossella,closed,1,2016-11-05 06:21:44,2016-11-06 17:23:19,,,,0,1
10681,moment/moment,3569,no en us locale?,I installed moment@2.15.2 and was looking through the locales available. I assumed there was an  en us  locale  but when I tried to load it  it failed. Upon further inspection  I only saw these  en  locales:      en au    en ca    en gb    en ie    en nz    Am I missing something? I feel like  en us  would be its own locale as well based on what I have dealt with in the past. Am I missing something here? Can someone point me in the right direction? ,hellatan,closed,3,2016-11-05 16:47:48,2016-11-05 20:16:39,,,,0,1
10680,moment/moment,3570,[misc] Avoid boolean type check,In  3559 @ichernev stated that he would prefer two strict comparisons   to  true  and  false   over checking the type.    This pull request actualizes that preference.,captbaritone,closed,2,2016-11-06 03:34:16,2016-11-07 09:57:46,,Enhancement,,2.16.0,1,1
10679,moment/moment,3571,[misc] Introduce isNumber function,In  3559 @ichernev stated that he would prefer using an  isNumber   utility function over a naive type check.    This pull request actualizes that preference.    Our new  isNumber  function is slightly more robust than a simple type  check. For example  it will also correctly identify wrapped number  primitives.    https://javascriptweblog.wordpress.com/2010/09/27/the secret life of javascript primitives/,captbaritone,closed,5,2016-11-06 04:15:09,2016-11-07 09:59:35,,Enhancement,,2.16.0,1,1
10678,moment/moment,3572,when subtracting a date from another  why does it gives 1000  more seconds than it should ?, var nowMoment = moment  ;      var c = nowMoment;    var d = moment  .subtract 1  d  ;     console.log    C =    c ;   console.log    d =    d ;       console.log              RAW diff cd            c d ;   //  8640 0000,jpca999,closed,1,2016-11-06 05:12:42,2016-11-06 13:06:18,,,,0,1
10677,moment/moment,3573,[build] Remove babel from rollup babel combo to speed up build,And we re not using it anyway.    With esprima: 8.2s  With rollup only: 13.3s  With rollup babel: 40s,ichernev,closed,1,2016-11-06 09:28:24,2016-11-06 09:30:23,,Build/Release,,2.16.0,1,1
10676,moment/moment,3574,how to subtract a date from another when it has  some format ?,  var nowMoment = moment  ;    var c = nowMoment.format  YYYY M D  ;    var d = moment  .subtract 14   day  .format  YYYY M D  ;    console.log    C =    c ;     console.log    d =    d ;     console.log              diff cd            c.diff d   days   ;     How to subtract  c d to get back 1 day ?,jpca999,closed,1,2016-11-06 20:51:13,2016-11-06 22:31:51,,,,0,1
10675,moment/moment,3575,how to deformat the formatted date to original raw object ?,  var nowMoment = moment  ;    var c = nowMoment.format  YYYY M D  ;  this gives use 2 16 11 6     How do i get back to :      q  _isAMomentObject: true  _isUTC: false  _pf: Object  _locale: B  _d: Sun Nov 06 2016 15:49:21 GMT 0400  EDT   ,jpca999,closed,2,2016-11-06 20:51:39,2016-11-07 05:04:23,,,,0,1
10674,moment/moment,3576,help me how to save the date in the mongo db so that i can utilize moment.js ,so heres the workflow.     I ve the excel sheet that has bunch of data   which has a column that has dates in it      then i convert this excel data to json objects and then feed it to mongodb.     then on the front end I call the objects to display it on the UI.     But now I need to manipulate the date i.e add / subtract it by few days...     How do i save the date  in such a way it can easily manipulate then in the angular controllers ... ?  ,jpca999,closed,1,2016-11-06 21:24:42,2016-11-06 22:29:21,,,,0,1
10673,moment/moment,3577,Typescript definition for moment.min and moment.max are incomplete,  Description of the Issue and Steps to Reproduce:      Moment.js Typescript definition of moment.max  and moment.min are incorrect  if the examples in the docs are correct . According to the examples in the docs  the definition of each function should take an expanded array or just an array       export function min ...moments: Moment[] : Moment;      export function min moments: Moment[] :Moment;      export function max ...moments: Moment[] : Moment;      export function max moments:Moment[] :Moment;     The[ Definitely Typed definitions] https://github.com/DefinitelyTyped/DefinitelyTyped/blob/637e7d6df755e785387d5269cb9287cdc51b8cb7/moment/moment.d.ts L663  include these.  ,veliancreate,closed,3,2016-11-07 13:52:53,2016-11-09 19:54:51,,TypeScript,,,0,1
10672,moment/moment,3578,Additional formats,We need two formats that moment doesn t support yet.    1.   QA    abbreviated  _e.g. en: Q1  Q2  Q3 and Q4  fr: T1  T2  T3 and T4 ..._  2.   MMDD   _e.g. en: 04/19  MM/DD   de: 19.04  DD.MM  ...._    Both formats for every language can be found in the CLDR project here: https://github.com/unicode cldr/cldr dates full/tree/master/main    For example:    1.   QA   => [en/ca gregorian.json] https://github.com/unicode cldr/cldr dates full/blob/master/main/en/ca gregorian.json    main.en.dates.calendars.gregorian.quarters.format.abbreviated  2.   MMDD   => [en/ca gregorian.json] https://github.com/unicode cldr/cldr dates full/blob/master/main/en/ca gregorian.json    main.en.dates.calendars.gregorian.dateTimeFormats. Md     I m not a licence expert and don t know if the CLDR data could just be copied  http://unicode.org/copyright.html License ?    If the Licence is no problem  we even would be willing to do the work of copying both formats for every of the 104 language files you support and create a pull request.    We really need both formats and don t want to program a workaround.  ,Spenhouet,closed,1,2016-11-07 18:45:22,2016-11-09 19:52:05,,Enhancement,,,0,1
10671,moment/moment,3579,RFC2822 Parsing implementation   Near candidate solution,  Work in Progress   DO NOT MERGE      Remaining issues:  1. I am still unable to get the tsc task to complete and have to force the release. I have tried various environment paths and even tried installing typescript as a global module without joy.  2. For RFC2822 to be valid and given day of week has to be consistent with the day by date. I have a negative test case and appropriate code  both disabled  but the latter depends on instantiating a moment object that I am unable to do.     Any advice on the above would be gratefully received. ,TracyGJG,closed,4,2016-11-07 19:25:10,2017-01-08 04:39:17,,,,1,1
10670,moment/moment,3580,moment  .startOf   fails during extra daylight savings hour,  Description of the Issue and Steps to Reproduce:      Calling  moment  .startOf  hour    during the hour that s repeated when clocks are rolled back from daylight savings time yields the next hour  not the previous one.    For example   moment [2016 10 6] .add 1   hour  .toDate    correctly yields  Sun Nov 06 2016 01:00:00 GMT 0700  PDT    where my local timezone is US/Pacific   whereas  moment [2016 10 6] .add 1   hour  .startOf  hour  .toDate    yields  Sun Nov 06 2016 01:00:00 GMT 0800  PST  . This leads to some very odd behavior  like  moment [2016 10 6] .add 1   hour  .startOf  hour   <= moment [2016 10 6] .add 1   hour    yielding  false . The same problem occurs for  startOf  minute    and  startOf  second   .    Strangely  this does not seem to be a problem when setting the timezone explicitly using  moment.tz [2016 10 6]   US/Pacific   .      Environment:      This is running moment version 2.15.2 directly off of the momentjs homepage in my browser s console. I m running Safari 10.0.1 on macOS 10.12.1. I get the same problem on Firefox 49.0.2  but not on Chrome 54.0.2840.71.    _If you are reporting an issue  please run the following code in the environment you are using and include the output:_     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version               [Log] Mon Nov 07 2016 13:25:46 GMT 0800  PST   [Log] 11/7/2016  1:25:46 PM  [Log] 480  [Log] Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_1  AppleWebKit/602.2.14  KHTML  like Gecko  Version/10.0.1 Safari/602.2.14  [Log] 2.15.2       ,clwainwright,open,5,2016-11-07 21:30:43,0000-00-00 00:00:00,,Bug,DST,,,0,1
10669,moment/moment,3581,[bugfix] Fix parseZone  redo  3504  fix  3463,We can update the tests in the next version  but I want the fix in.    Fixes  3463,ichernev,closed,1,2016-11-08 05:10:27,2016-11-08 05:19:24,,Bug-fix,,2.16.0,1,1
10668,moment/moment,3582,Add half year as format,It would be nice to have a format that shows the half year.    For example:    Format:    hj    => 1  2    Additionaly a localized format    hhj    => H1  H2 would be nice.,Spenhouet,closed,6,2016-11-08 17:52:49,2016-11-17 22:11:27,,Enhancement,,,0,1
10667,moment/moment,3583,Add localized week format,At the moment there is only    w    => 1 ... 53 and    ww    => 01 ... 53.  It would be nice to have a localized    www    => en: W1 ... W53 de: KW1 ... KW53 fr: S1 ... S53,Spenhouet,closed,1,2016-11-08 17:56:52,2016-11-09 19:53:01,,Enhancement,,,0,1
10666,moment/moment,3584,method format   have a bug,when i use moment  .format   in nodejs   the result of moment  2016 11 9  .format  YYYY MM DD   is  2016 11 01 .is there anything wrong?,macurial,closed,5,2016-11-09 05:12:13,2016-11-09 19:42:26,,,,0,1
10665,moment/moment,3585,German locale support for AM/PM,Recently I  have started using moment.js to address DST issues  but came to know that there is no support for  AM/PM in German locale. Please let me know whether this is known issue if not please let me know how to handle it as there is no translation for AM/PM in the locale file.  ,raijitendra,closed,3,2016-11-09 12:27:21,2016-11-09 19:22:59,,,,0,1
10664,moment/moment,3586,.isValid   incorrect for leap year dates in the new millenium ,  Description of the Issue and Steps to Reproduce:       Called  .isValid    on the date 29/02/2016 and was returned  true       js  moment  29/02/2016    DD/MM/YYYY  .isValid  ; // true  moment  29/02/2014    DD/MM/YYYY  .isValid  ; // false  moment [2016] .isLeapYear  ; // true  moment [2014] .isLeapYear  ; // false           Environment:       Chrome 55.0.2883.35 beta  64 bit  on OSX El Capitan       Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  Wed Nov 09 2016 14:34:09 GMT 0000  GMT   VM3376:2 11/9/2016  2:34:09 PM  VM3376:3 0  VM3376:4 Mozilla/5.0  Macintosh; Intel Mac OS X 10_11_6  AppleWebKit/537.36  KHTML  like Gecko  Chrome/55.0.2883.35 Safari/537.36  VM3376:5 2.15.2          Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,lesansley,closed,1,2016-11-09 14:35:13,2016-11-09 17:20:22,,,,0,1
10663,moment/moment,3587, Moment Timezone has no data for America/Mexico_City. See http://momentjs.com/timezone/docs/ /data loading/. ,  Description of the Issue and Steps to Reproduce:    I am using  dashing  to create a dashboard with a widget with 3 clocks with 3 different timezones.  But it only shows me the current timezone on all 3 clocks.    Whats also strange is that if i open moment timezone.js and put in js alerts to debug  i find that normalizename changes the slash to a underscore. Why?     js  function getZone  name  caller                     alert  test1:    name ; //   > test1:America/Mexico_City    name = normalizeName name ;                  alert  test2:    name ; //   > test2:america_mexico_city       I am not sure why it removes the slash? is that the way it is supposed to work?  In the file moment timezone data.js  the string is like in test1.        Software:    moment.js   version 2.15.2  moment timezone.js   version 0.5.9  moment timezone data.js   http://momentjs.com/downloads/moment timezone.js      Environment:    Server: Ubuntu 14.04.4 LTS  Client: Windows 7   Firefox 49.0.2        Other information that may be helpful:      The time zone setting of the machine the code is running on     CET  Europe   Norway        The time and date at which the code was run     09.11.2016   15:33       Other libraries in use  TypeScript  Immutable.js  etc      Dashing   > https://github.com/Shopify/dashing       If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString      > Wed Nov 09 2016 15:35:06 GMT 0100  W. Europe Standard Time   console.log  new Date   .toLocaleString      > 9.11.2016  15.35.06  console.log   new Date   .getTimezoneOffset      >  60  console.log  navigator.userAgent    > Mozilla/5.0  Windows NT 6.1; WOW64; rv:49.0  Gecko/20100101 Firefox/49.0  console.log moment.version    > 2.15.2           HTML:       html  Nor  <p data bind= no_today_date ></p>  <h2 data bind= no_today_time ></h2>    SG  <p data bind= sg_today_date ></p>  <h2 data bind= sg_today_time ></h2>    US  <p data bind= us_today_date ></p>  <h2 data bind= us_today_time ></h2>             Coffeescript:       coffeescript  class Dashing.Clock extends Dashing.Widget      ready:  >      setInterval @startTime  500       startTime: =>        us_today = moment new Date   .tz  America/Mexico_City        @set  us_today_time   us_today.format  HH:mm         @set  us_today_date   us_today.format  MMM Do           no_today = moment new Date   .tz  Europe/Stockholm        @set  no_today_time   no_today.format  HH:mm         @set  no_today_date   no_today.format  MMM Do           sg_today = moment new Date   .tz  Asia/Singapore        @set  sg_today_time   sg_today.format  HH:mm         @set  sg_today_date   sg_today.format  MMM Do                Error message when loading the page:            Moment Timezone has no data for America/Mexico_City. See http://momentjs.com/timezone/docs/ /data loading/.    Moment Timezone has no data for Europe/Stockholm. See http://momentjs.com/timezone/docs/ /data loading/.    Moment Timezone has no data for Asia/Singapore. See http://momentjs.com/timezone/docs/ /data loading/.   ....etc over and over         Thanks in advance ,patchie,closed,3,2016-11-09 14:51:21,2016-11-09 18:42:26,,,,0,1
10662,moment/moment,3588,Incorrect date time returned from moment unixtime .format  YYYY MM DD HH:MM:SS  ,  Description of the Issue and Steps to Reproduce:    moment 1473708712743 .format  YYYY MM DD HH:MM:SS    Returns: 2016 09 12 15:09:74    Clearly we can t have 74 as the seconds value.      Environment:    node: v4.4.7  moment: 2.14.1      Other information that may be helpful:         js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log moment.version               Wed Nov 09 2016 15:25:16 GMT 0500  EST   11/9/2016  3:25:16 PM  300  2.14.1     ,davidchappelle,closed,1,2016-11-09 20:26:02,2016-11-09 20:26:55,,,,0,1
10661,moment/moment,3589,typing errors after upgrading from 2.15.2 to 2.16.0,  Description of the Issue and Steps to Reproduce:      Try to import  2.16.0  and compile moment from inside an TypeScript project.      Environment:      Mac  TypeScript 2.0.6    tsconfig:       json        compilerOptions :         target :  es6         moduleResolution :  node         experimentalDecorators : true        allowSyntheticDefaultImports : true        strictNullChecks : true           exclude : [       node_modules         examples     ]              Other information that may be helpful:       2.15.2  compiles without errors.  2.16.0  throws with the following error:         ERROR in [default] ./node_modules/moment/moment.d.ts:63:4  Property  sameDay  of type  string     m?: Moment   undefined  now?: Moment   undefined  => string    undefined  is not assignable to string index type  CalendarSpecVal .    ERROR in [default] ./node_modules/moment/moment.d.ts:64:4  Property  nextDay  of type  string     m?: Moment   undefined  now?: Moment   undefined  => string    undefined  is not assignable to string index type  CalendarSpecVal .    ERROR in [default] ./node_modules/moment/moment.d.ts:65:4  Property  lastDay  of type  string     m?: Moment   undefined  now?: Moment   undefined  => string    undefined  is not assignable to string index type  CalendarSpecVal .    ERROR in [default] ./node_modules/moment/moment.d.ts:66:4  Property  nextWeek  of type  string     m?: Moment   undefined  now?: Moment   undefined  => string    undefined  is not assignable to string index type  CalendarSpecVal .    ERROR in [default] ./node_modules/moment/moment.d.ts:67:4  Property  lastWeek  of type  string     m?: Moment   undefined  now?: Moment   undefined  => string    undefined  is not assignable to string index type  CalendarSpecVal .    ERROR in [default] ./node_modules/moment/moment.d.ts:68:4  Property  sameElse  of type  string     m?: Moment   undefined  now?: Moment   undefined  => string    undefined  is not assignable to string index type  CalendarSpecVal .     ,donaldpipowitch,closed,7,2016-11-10 11:56:52,2017-02-09 03:10:52,,TypeScript,,,0,1
10660,moment/moment,3590,add func to tell if current locale supports meridien,  Description of the Issue and Steps to Reproduce:    Would be great if locale config could tell if the current locale uses meridien to display the time.    Currently  calling  moment  .localeData  .meridiem 1  1  true ;  for a language like  fr  will return am/pm  which somehow is incorrect  but more importantly  it can t help to tell if the current locale uses meridien.    This is an useful information to display UI adequately.      Environment:         sh  npm ls moment  md date time picker@2.2.0 /home/mh cbon/projects/md date time picker      moment@2.16.0        ,mh-cbon,closed,4,2016-11-10 12:31:20,2016-11-14 03:40:58,,Enhancement,,,0,1
10659,moment/moment,3591,[misc] typescript: update typescript to 2.0.8  add strictNullChecks=true, rSpec type  3589,tiagoefmoraes,closed,19,2016-11-10 14:08:03,2016-11-22 13:26:36,,TypeScript,,2.17.0,1,1
10658,moment/moment,3592,Fixed  Argument of type ... is not assignable to string index type  error.,Typescript v2.1.1 compiler is giving me following errors:    > /src/browser/node_modules/moment/moment.d.ts 63 5 : error TS2411: Property  sameDay  of type  string     m?: Moment   undefined  now?: Moment   undefined  => string    undefined  is not assignable to string index type  CalendarSpecVal .  > /src/browser/node_modules/moment/moment.d.ts 64 5 : error TS2411: Property  nextDay  of type  string     m?: Moment   undefined  now?: Moment   undefined  => string    undefined  is not assignable to string index type  CalendarSpecVal .  > /src/browser/node_modules/moment/moment.d.ts 65 5 : error TS2411: Property  lastDay  of type  string     m?: Moment   undefined  now?: Moment   undefined  => string    undefined  is not assignable to string index type  CalendarSpecVal .  > /src/browser/node_modules/moment/moment.d.ts 66 5 : error TS2411: Property  nextWeek  of type  string     m?: Moment   undefined  now?: Moment   undefined  => string    undefined  is not assignable to string index type  CalendarSpecVal .  > /src/browser/node_modules/moment/moment.d.ts 67 5 : error TS2411: Property  lastWeek  of type  string     m?: Moment   undefined  now?: Moment   undefined  => string    undefined  is not assignable to string index type  CalendarSpecVal .  > /src/browser/node_modules/moment/moment.d.ts 68 5 : error TS2411: Property  sameElse  of type  string     m?: Moment   undefined  now?: Moment   undefined  => string    undefined  is not assignable to string index type  CalendarSpecVal .    That s because  sameDay  and other properties have  CalendarSpecVal   undefined  type but string index type is  CalendarSpecVal .,mxl,closed,2,2016-11-10 15:51:56,2016-11-10 15:55:06,,,,1,1
10657,moment/moment,3593,Error formatting  startOf  week  Spanish   24H ,On Spanish locale  format the  startOf  week returns an incorrect hour  24H     Example:      English. Correct:        js  moment.locale  en  ;  moment  .add  1 week  .startOf  week  .tz  Europe/Madrid  .format  dddd D MMM kk:mm  ;          >  Sunday 6 Nov 24:00          Spanish. Error:        js  moment.locale  es  ;  moment  .add  1 week  .startOf  week  .tz  Europe/Madrid  .format  dddd D MMM kk:mm  ;          >  lunes 7 nov. 24:00        I thin it should be    Domingo 6 nov. 24:00   or better    lunes 7 nov. 00:00         Environment:      Mozilla/5.0  Macintosh; Intel Mac OS X 10_11_4  AppleWebKit/537.36  KHTML  like Gecko  Chrome/54.0.2840.71 Safari/537.36      Other information that may be helpful:      The time zone setting of the machine the code is running on: Europe/Madrid    The time and date at which the code was run: Nov. 10 2016 17:56    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version             > Thu Nov 10 2016 17:57:09 GMT 0100  CET   > 2016 11 10 17:57:09.870 VM19278:2 10/11/2016 17:57:09  > 2016 11 10 17:57:09.870 VM19278:3  60  > 2016 11 10 17:57:09.870 VM19278:4 Mozilla/5.0  Macintosh; Intel Mac OS X 10_11_4  AppleWebKit/537.36  KHTML  like Gecko  Chrome/54.0.2840.71 Safari/537.36     ,aabilio,closed,4,2016-11-10 17:03:22,2016-11-13 23:20:52,,,,0,1
10656,moment/moment,3594,Moment not parsing dates using the current system timezone,I m experiencing an extremely strange issue using Moment to parse a simple MMMM YYYY date.    It generates an object with the correct month  day  and year    but the timezone is the wrong one. Therefore if this date is passed to other external systems where the timezone is sync ed correctly  such as when using NTP  then the date is read an hour behind.    For example: if I parse  November 2016  using the pattern  MMMM YYYY   then I get a Moment object for  November 1  2016 12:00 AM PDT . When passed to another application  there is a risk of it being stored as  October 31  2016 11:00 PM PDT     In the sample program below  I have reproduced this with both  moment  and  moment timzeone   and no matter what I do  I cannot even force the UTC offset to match the system.      Environment:      OSX 10.11.6  Node 6.9.1  Current Date and Time on System: Thu Nov 10 13:06:26 PST 2016      Sample Program:       js   use strict ;  let Moment = require  moment  ;  let MomentTz = require  moment timezone  ;    function printDateWithOffset label  date         console.log    label :   date   > UTC Offset =   date.getTimezoneOffset     ;       let jsDate = new Date  ;  let momentParsed = Moment  November 2016    MMMM YYYY  ;  let momentParsedWithOffset = Moment  November 2016    MMMM YYYY  .utcOffset 480 ;  let momentTzParsed = MomentTz.tz  November 2016    MMMM YYYY    America/Los_Angeles  ;    printDateWithOffset  Std. JS Date   jsDate ;  printDateWithOffset  Moment  parsed    momentParsed.toDate   ;  printDateWithOffset  Moment  parsed w/ offset    momentParsedWithOffset.toDate   ;  printDateWithOffset  Moment TZ  parsed    momentTzParsed.toDate   ;           Sample Output:         Std. JS Date: Thu Nov 10 2016 13:11:06 GMT 0800  PST   > UTC Offset = 480  Moment  parsed : Tue Nov 01 2016 00:00:00 GMT 0700  PDT   > UTC Offset = 420  Moment  parsed w/ offset : Tue Nov 01 2016 00:00:00 GMT 0700  PDT   > UTC Offset = 420  Moment TZ  parsed : Tue Nov 01 2016 00:00:00 GMT 0700  PDT   > UTC Offset = 420     ,mrapczynski,closed,2,2016-11-10 21:12:32,2016-11-10 21:20:32,,,,0,1
10655,moment/moment,3595,Fix accidental reference to global  value  variable,Hi     We just encountered a bug today where moment was incorrectly parsing year and month fields. The bug was introduced while upgrading to moment v2.16.0.    We eventually tracked it down to another library  modular scale  which was setting a global variable called  value  to a number. The isNumber function in moment is then mistakenly referencing this global value instead of the input value it gets passed. This pull request fixes the problem.    All the best   David,davidxmoody,closed,7,2016-11-11 10:54:19,2016-11-12 06:08:08,,Bug-fix,,2.17.0,1,1
10654,moment/moment,3596,Linting is not checking commits effectively,Commit 38e3e52dc92958d3e7dae399693c3153c3e947c8 introduced a subtle bug which would be easily caught if this project were to include some basic linting checks.    Things such as referencing undeclared variables are simple to catch with linting  and a project as important  due to its widespread use  as this one must have basic checks such as this.    I m prepared to help with this if it s more of a job than  oh  whoops  we forgot to lint the utils folder  or whatever.,tomhicks-bsf,closed,1,2016-11-11 11:20:52,2016-11-11 17:01:38,,,,0,1
10653,moment/moment,3597,[misc] Fixed capitalization in nuget spec,,vanillajonathan,closed,2,2016-11-11 13:04:36,2016-11-22 13:29:12,,,2.17.0,1,1
10652,moment/moment,3598,Undefined var is being convert to actual datetime,I am passing a scoped data to moment  scope.dateStart  and moment  scope.dateFinal  by inputs. I want to set it undefined if the scoped data is undefined but I m getting the actual datetime. I want it this way because you may just want to introduce  dateStart so will work like a filter until infinite future. Is there anything to keep it undefined if  scope.dateFinal is undefined? I don t want to make moment   function when moment undefined       Environment:       Ionic  Angular     ,alexcarrasco93,closed,4,2016-11-11 14:09:27,2016-11-13 23:49:44,,Troubleshooting,,,0,1
10651,moment/moment,3599,Bug in moment.d.ts with strictNullChecks in tsconfig.json,  Description of the Issue and Steps to Reproduce:      With typescript setting  strictNullChecks : true in tsconfig  moment.d.ts fails to compile.    The problem is in the interface CalendarSpec.       ts  type CalendarSpecVal = string     m?: Moment  now?: Moment  => string ;    interface CalendarSpec        sameDay?: CalendarSpecVal;      nextDay?: CalendarSpecVal;      lastDay?: CalendarSpecVal;      nextWeek?: CalendarSpecVal;      lastWeek?: CalendarSpecVal;      sameElse?: CalendarSpecVal;      // any additonal properties might be used with moment.calendarFormat      [x: string]: CalendarSpecVal;              Solving the issue is easy  just change the declaration of [x: string] accessor as being possibly undefined in this way:       ts  [x: string]: CalendarSpecVal   undefined;        line 71     The fix is very easy and straightforward.     Setting in tsconfig.json.      strictNullChecks : true in tsconfig.json      Environment:      TypeScript 2.0.9    Compilation output:       63     sameDay?: CalendarSpecVal;                                       node_modules/moment/moment.d.ts 63 5 : error TS2411: Property  sameDay  of type  string     m?: Moment   undefined  now?: Moment   undefined  => string    undefined  is not assignable to string index type  CalendarSpecVal .      64     nextDay?: CalendarSpecVal;                                       node_modules/moment/moment.d.ts 64 5 : error TS2411: Property  nextDay  of type  string     m?: Moment   undefined  now?: Moment   undefined  => string    undefined  is not assignable to string index type  CalendarSpecVal .      65     lastDay?: CalendarSpecVal;                                       node_modules/moment/moment.d.ts 65 5 : error TS2411: Property  lastDay  of type  string     m?: Moment   undefined  now?: Moment   undefined  => string    undefined  is not assignable to string index type  CalendarSpecVal .      66     nextWeek?: CalendarSpecVal;                                        node_modules/moment/moment.d.ts 66 5 : error TS2411: Property  nextWeek  of type  string     m?: Moment   undefined  now?: Moment   undefined  => string    undefined  is not assignable to string index type  CalendarSpecVal .      67     lastWeek?: CalendarSpecVal;                                        node_modules/moment/moment.d.ts 67 5 : error TS2411: Property  lastWeek  of type  string     m?: Moment   undefined  now?: Moment   undefined  => string    undefined  is not assignable to string index type  CalendarSpecVal .      68     sameElse?: CalendarSpecVal;                                        node_modules/moment/moment.d.ts 68 5 : error TS2411: Property  sameElse  of type  string     m?: Moment   undefined  now?: Moment   undefined  => string    undefined  is not assignable to string index type  CalendarSpecVal .     ,SalvatorePreviti,closed,6,2016-11-11 15:04:04,2017-02-09 03:11:23,,TypeScript,,,0,1
10650,moment/moment,3600,Deprecation warning : defineLocale from french locale file,Hello     I got a warning  console  while using french locale fr.js file  since version 1.15.x and with 1.16.0  :     moment.updateLocale localeName  config  to change an existing locale. moment.defineLocale localeName  config  should only be used for creating a new locale See http://momentjs.com/guides/ /warnings/define locale/ for more info.    Am i supposed to do something to avoid this ? If i can help on the french file  it would be pleasure.    In all case : thanks you for this amazing lib which works flawlessly with fullcalendar.    Best regards     Vincent,vincent-guesnard,closed,4,2016-11-12 10:17:21,2016-11-12 15:05:21,,,,0,1
10649,moment/moment,3601,time starting from 5s 4s 3s 2s 1s and 2s 3s 4s.........,i facing an issue with  moment.lang  en     relativeTime :   future:  in  s   past:   s   s:   ds   m:  1m   mm:   dm   h:  1h   hh:   dh   d:  1d   dd:   dd   M:  30d   MM: function  number    return number   30    d ;    y:  365d   yy: function  number    return number   365    d ;       ;        when i post   time starting from 5s 4s 3s 2s 1s  then it s displaying 2s 3s 4s 5s 6s.........  it should start from 1s 2s 3s.....go on      ,ajayreddy56,closed,3,2016-11-12 12:10:09,2016-11-19 01:37:56,,Troubleshooting,,,0,1
10648,moment/moment,3602,Fix TypeScript definition export,This patch fixes TypeScript definition import when not using the module system  i.e. when using /// <reference path= ...  /> .    Signed off by: RandomBK <david@david li.com>,randombk,closed,4,2016-11-14 06:57:52,2017-01-08 04:37:45,,,,1,1
10647,moment/moment,3603,Fix typescript compile error with strictNullChecks enabled,Fixes error compile error with  strictNullChecks  enabled in typescript by declaring the  [x: string]  accessor as being possibly undefined  see  3599 .     ,torryt,closed,2,2016-11-14 08:44:49,2016-11-14 08:46:57,,,,1,1
10646,moment/moment,3604,Documentation is lacking duration ... .toISOString,The duration part of the documentation is lacking documentation for the  toISOString  method.  ,michaelkrone,closed,1,2016-11-14 15:25:50,2016-11-18 10:59:43,,,,0,1
10645,moment/moment,3605,Changed weekdaysShort in Norwegian Bokm l,,michaelkaaring,closed,3,2016-11-15 10:12:21,2017-01-08 04:41:04,,,,1,1
10644,moment/moment,3606,Moment format   2016 11 15T23:59:59Z  .format  DD/MM/YYYY   adds 1 day,Moment format   2016 11 15T23:59:59Z  .format  DD/MM/YYYY   returns wrong date.  it s returns the Date with advanced day e.g  16/11/2016 .  am i doing something wrong?,eliavmaman,closed,1,2016-11-15 10:42:10,2016-11-15 17:04:38,,,,0,1
10643,moment/moment,3607,When using calendar   with inline day options  nextDay and lastDay are incorect,  Description of the Issue and Steps to Reproduce:    When using calendar   with inline options  the nextDay key and the lastDay key are flipped. I have to set to nextDay to [Yesterday] and lastDay to [Tomorrow] for it to be correct. Using the options globally does not have this problem.      Environment:    OSX Chrome evergreen     Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.   I m using ember moment  but this feature is just off the moment lib    Input that should show yesterday  2016 11 14 00:00:00  says Tomorrow    Input that should show tomorrow  2016 11 16 00:00:00  says Yesterday         row.calendarDay = moment  .calendar new Date row.pickupDate       sameDay:  [Today]     nextDay:  [Tomorrow]    // USED FOR YESTERDAY S DATE   nextWeek:  dddd     lastDay:  [Yesterday]    // USED FOR TOMORROW S DATE   lastWeek:  [Last] dddd     sameElse:  DD/MM/YYYY     ;            js  Tue Nov 15 2016 10:24:34 GMT 0500  EST   controller.js:32 11/15/2016  10:24:34 AM  controller.js:33 300  controller.js:34 Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_1  AppleWebKit/537.36  KHTML  like Gecko  Chrome/54.0.2840.98 Safari/537.36  controller.js:35 2.14.1     ,optikalefx,closed,2,2016-11-15 15:26:08,2016-11-15 22:42:44,,,,0,1
10642,moment/moment,3608,[locale] ja  zh    ko: Standardize CJK time formats,Time formats like  16:00  are predominant on China  Taiwan  Hong Kong  and Japan websites and apps. Time format like     4:00  is predominant on Korea websites and apps. The current moment.js formats  following pattern of  4[    ] 0[  ]   are infrequently used for displaying times on CJK websites and apps. In particular  a time with zero minutes like  4  0     4 0    or  4 0   is exceedingly awkward.    This change also removes an inconsistency in  calendar  between zh cn and the two other zh locales  zh hk and zh tw . Now  calendar  will refer to days in the current week in the same way across these three locales. I am roughly familiar with written Chinese as used in CN  TW  and HK  and am not aware of a systematic difference how one refers to calendar days in the current week. Let me know if I m missing something :     This change also makes the l  ll  lll  llll formats set explicitly to match the L  LL  LLL  LLLL in CJK. This is to avoid incorrect day of week abbreviations like  2010 2 14   3 25          is inappropriate as a standalone word  or  2010  2  14       3  25        is inappropriate as a standalone word .    @baryon  ja   @kyungw00k @jeeeyul  ko   @suupic @zenozeng  zh cn   @ben lin @hehachris  zh tw and zh hk   Could you help review? Thank you :     Below I have collected some evidence that the formats in this PR are appropriate  from various popular websites and apps.        ja    Facebook uses  16:00  format.  <img width= 269  alt= screenshot 2016 11 15 01 32 42  src= https://cloud.githubusercontent.com/assets/1148925/20298484/6d8e6f9c aad3 11e6 8a49 a8c239b89d19.png >    GMail uses  16:00  format.  <img width= 123  alt= screenshot 2016 11 15 23 20 38  src= https://cloud.githubusercontent.com/assets/1148925/20336799/2faa79de ab8a 11e6 8c2f c79a5beca1ec.png >  <img width= 207  alt= screenshot 2016 11 15 23 20 44  src= https://cloud.githubusercontent.com/assets/1148925/20336803/3245b974 ab8a 11e6 9e4a 511e09019424.png >    Wikipedia talk pages use  16:00  format.  <img width= 502  alt= screenshot 2016 11 15 22 54 10  src= https://cloud.githubusercontent.com/assets/1148925/20336317/77c75ac4 ab86 11e6 958b 2e6e2312ddb5.png >    Line on Japanese language phone uses  16:00  format.   [15129010_10101031834192808_8544315342583548960_o] https://cloud.githubusercontent.com/assets/1148925/20336508/e0aad47a ab87 11e6 8452 23d06aa2bd95.jpg     KakaoTalk on Japanese language phone uses  16:00  format.   [15025430_10101031836458268_223990604552638952_o] https://cloud.githubusercontent.com/assets/1148925/20336567/60c408de ab88 11e6 9c7a 6193e0c3d477.jpg         ko    Facebook uses     4:00  format.  <img width= 278  alt= screenshot 2016 11 15 01 49 35  src= https://cloud.githubusercontent.com/assets/1148925/20298945/cc31d758 aad5 11e6 987b a5fb1c63d8b8.png >    Twitter uses     4:00  format.  <img width= 282  alt= screenshot 2016 11 15 23 30 39  src= https://cloud.githubusercontent.com/assets/1148925/20337005/8fce0c30 ab8b 11e6 9ba8 32d037fcfc7b.png >    GMail uses     4:00  in some places and  16:00  format in other places      <img width= 222  alt= screenshot 2016 11 15 23 17 53  src= https://cloud.githubusercontent.com/assets/1148925/20336742/c8adda28 ab89 11e6 826a 6b7e1f4aa525.png >  <img width= 230  alt= screenshot 2016 11 15 23 18 36  src= https://cloud.githubusercontent.com/assets/1148925/20336755/e711ffb2 ab89 11e6 9452 9c5982d07351.png >    Naver News uses  16:00  format.  <img width= 239  alt= screenshot 2016 11 15 23 12 29  src= https://cloud.githubusercontent.com/assets/1148925/20336637/0e25ff14 ab89 11e6 8c7b d99baec76667.png >    Line on Korean language phone uses  16:00  format.   [15110938_10101031839746678_5586062181360908786_o] https://cloud.githubusercontent.com/assets/1148925/20336665/45509814 ab89 11e6 8ba8 7cf75421c48c.jpg     KakaoTalk on Korean language phone uses  16:00  format.   [15068957_10101031840110948_6324736872530080588_o] https://cloud.githubusercontent.com/assets/1148925/20336681/6976ac88 ab89 11e6 8e61 266157048eec.jpg     Wikipedia talk pages use  16:00  format.  <img width= 381  alt= screenshot 2016 11 15 23 22 40  src= https://cloud.githubusercontent.com/assets/1148925/20336832/78adb6aa ab8a 11e6 9d0d 1b1ebb28cc3e.png >        zh cn    Chinese language websites  in Simplified and in Traditional  seem to be split about whether they use 12 or 24 hour formats. So it s a judgment call about which to use in moment.js. I recommend using 24 hour format in moment for succinctness.    People s Daily uses 24 hr format.  <img width= 292  alt= screenshot 2016 11 15 02 01 27  src= https://cloud.githubusercontent.com/assets/1148925/20336109/fa7fbaa8 ab84 11e6 9341 08b66e66d8c5.png >    Taobao tracking status uses 24 hr format.   [screenshot 2016 11 15 17 02 15] https://cloud.githubusercontent.com/assets/1148925/20336174/60821dc8 ab85 11e6 9989 fc7a5500aae7.png           Baidu delivery  uses 24 hr format.   [default] https://cloud.githubusercontent.com/assets/1148925/20336227/b34f1664 ab85 11e6 95e0 2d5ab05b625e.png     Wikipedia talk pages use 24 hr format.  <img width= 408  alt= screenshot 2016 11 15 22 51 13  src= https://cloud.githubusercontent.com/assets/1148925/20336267/15fe949c ab86 11e6 9a82 c838a86e77ef.png >    GMail uses 24 hr format some places and 12 hr format other places      <img width= 121  alt= screenshot 2016 11 15 23 24 17  src= https://cloud.githubusercontent.com/assets/1148925/20336864/b16643ae ab8a 11e6 96d2 abd41940a93f.png >  <img width= 189  alt= screenshot 2016 11 15 23 24 51  src= https://cloud.githubusercontent.com/assets/1148925/20336880/c13bc63c ab8a 11e6 908d 96908f4d46ae.png >    Facebook uses 12 hour format.  <img width= 302  alt= screenshot 2016 11 15 01 52 19  src= https://cloud.githubusercontent.com/assets/1148925/20299015/2a070d12 aad6 11e6 9c4c 4b8c08ea9790.png >    Twitter uses 12 hour format.  <img width= 294  alt= screenshot 2016 11 15 23 32 05  src= https://cloud.githubusercontent.com/assets/1148925/20337038/caf285de ab8b 11e6 844b c53bfca5ddeb.png >    Alipay uses 12 hour format.   [slack for ios upload] https://cloud.githubusercontent.com/assets/1148925/20336237/d1b024cc ab85 11e6 9496 e55751453c57.png           zh tw and zh hk    Facebook uses  16:00  format.  <img width= 288  alt= screenshot 2016 11 15 01 52 50  src= https://cloud.githubusercontent.com/assets/1148925/20299029/3c72ee9e aad6 11e6 922e 27bda7579f12.png >    Pixnet.net  seems to be a popular TW site  uses  16:00  format  at least in this promotion and blog timestamps.  <img width= 467  alt= screenshot 2016 11 15 23 37 07  src= https://cloud.githubusercontent.com/assets/1148925/20337156/7b0de008 ab8c 11e6 91b3 0de966c55398.png >  <img width= 399  alt= screenshot 2016 11 15 23 38 03  src= https://cloud.githubusercontent.com/assets/1148925/20337165/92594ee6 ab8c 11e6 9d11 ca03e374b93b.png >    hkgolden.com  seems to be a popular HK site  uses  16:00  format  at least in its forum timestamps and footer.  <img width= 303  alt= screenshot 2016 11 15 23 39 06  src= https://cloud.githubusercontent.com/assets/1148925/20337190/c0d1c5f0 ab8c 11e6 92b9 0e41715dc83e.png >  <img width= 182  alt= screenshot 2016 11 15 23 39 55  src= https://cloud.githubusercontent.com/assets/1148925/20337206/d5bd3cce ab8c 11e6 9efb cd1fe171035d.png >    GMail uses 24 hr format some places and 12 hr format other places.  <img width= 128  alt= screenshot 2016 11 15 23 26 06  src= https://cloud.githubusercontent.com/assets/1148925/20336922/028cbfa6 ab8b 11e6 9eef 3529e3b437a0.png >  <img width= 234  alt= screenshot 2016 11 15 23 26 14  src= https://cloud.githubusercontent.com/assets/1148925/20336923/05047e72 ab8b 11e6 80c6 37012b747796.png >    Twitter uses 12 hr format.  <img width= 294  alt= screenshot 2016 11 15 23 32 05  src= https://cloud.githubusercontent.com/assets/1148925/20337078/03bf5ff4 ab8c 11e6 9c45 b46383939ddb.png >,jasonkb,closed,18,2016-11-16 06:42:07,2017-03-02 08:42:31,,Pending Next Release,,2.18.0,1,1
10641,moment/moment,3609,match moment s hebrew/israel locale  he IL  to java s alternate locale code  iw IL ,When I pass the locale which i get from our back end java web service to our client side app  which uses moment   the locale  iw IL  doesn t get mapped to hebrew but chinese instead in moment.js.  So for example when i use something like this:  moment   25/12/1960    DD/MM/YYYY   .locale   iw IL  .format   LL   ;  I get back chinese formatting  when it should have the same result as hebrew Israeli formatting:  moment   25/12/1960    DD/MM/YYYY   .locale   he IL  .format   LL   ;    Can we also support iw  and ji and in  to support java s backwards compatible locales?   I can put custom code in my app that passes  he  instead to my moment formatting calls like above  but thought we could just handle from moment s supported locales .    Applicable info:  https://docs.oracle.com/javase/8/docs/api/java/util/Locale.html   Locale s constructor has always converted three language codes to their earlier  obsoleted forms: he maps to iw  yi maps to ji  and id maps to in. This continues to be the case  in order to not break backwards compatibility. ,armyofda12mnkeys,closed,4,2016-11-18 19:23:57,2016-11-19 10:15:35,,,,0,1
10640,moment/moment,3610,moment  11    YYYY MM DD  .isValid   ?,Opened the console in the momentjs documentation site and typed:        moment  11    YYYY MM DD  .isValid        >> true    I would hope that anything that does not conform to the format given is invalid. Isn t this a bug?    Environment:        Fri Nov 18 2016 19:28:01 GMT 0800  PST       11/18/2016  7:28:01 PM      480      Mozilla/5.0  Macintosh; Intel Mac OS X 10_11_6  AppleWebKit/537.36  KHTML  like Gecko  Chrome/54.0.2840.71 Safari/537.36      2.16.0  ,niyazpk,closed,1,2016-11-19 03:29:52,2016-11-19 10:02:21,,Forgiving parsing,,,0,1
10639,moment/moment,3611,[feature] Durations gain validity,This was hoping to resolve  3225       Creates an  _isValid  property for durations  and an accessor  isValid       If not valid  create a duration of time  0  and set  ._isValid  to  false      .humanize    will return the translated version of  Invalid Date  if not valid     duration null     duration undefined     duration    will all be valid     duration NaN   is invalid    ,marwahaha,closed,18,2016-11-19 07:32:34,2017-03-02 08:47:57,,Pending Next Release,,2.18.0,1,1
10638,moment/moment,3612,Add context for longDateFormat and omit   when minutes === 0 in longDateFormat of zh CN,Just as @jasonkb said in  3608:    > I am especially concerned about the YYYY MMMD Ah mm  format when there are 0 minutes    the relatively common case of a timestamp that is on the hour. This comes out as e.g.  2016 11 17   4 0   which is quite awkward    one would not write it that way  and certainly not speak it that way  the 0  would be elided .     This pull request adds context for longDateFormat so that we could return different format based on context. This pull request also omit   when minutes === 0 in longDateFormat of zh CN.    The context object contains 2 fields: context.moment and context.input.  context.moment is the moment instance when we format and context.input is the string input when we parse. ,zenozeng,closed,7,2016-11-19 13:44:22,2017-02-04 08:56:14,,,,1,1
10637,moment/moment,3613,Creating 10/31/1987 actually creates 10/01/1987,     > moment  .date 31 .month 9 .year 1987 .unix     1000;  560099594000  > moment  .date 30 .month 9 .year 1987 .unix     1000;  562608799000           Environment:    Node v6.0.0  moment@2.15.1    OSX 10.11.6      Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version          Output:       > console.log   new Date   .toString     Sat Nov 19 2016 11:20:05 GMT 0500  EST   undefined  > console.log  new Date   .toLocaleString     11/19/2016  11:20:05 AM  undefined  > console.log   new Date   .getTimezoneOffset     300  undefined  > console.log  navigator.userAgent   ReferenceError: navigator is not defined      at repl:1:14      at REPLServer.defaultEval  repl.js:272:27       at bound  domain.js:280:14       at REPLServer.runBound [as eval]  domain.js:293:12       at REPLServer.<anonymous>  repl.js:441:10       at emitOne  events.js:101:20       at REPLServer.emit  events.js:188:7       at REPLServer.Interface._onLine  readline.js:219:10       at REPLServer.Interface._line  readline.js:561:8       at REPLServer.Interface._ttyWrite  readline.js:838:14   > console.log moment.version   2.15.1  undefined          Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,radicalray,closed,5,2016-11-19 16:20:59,2016-11-20 01:56:53,,,,0,1
10636,moment/moment,3614,Fixing compilation of moment.d.ts under strict null checks,There is currently a compilation error when compiling moment.d.ts in TypeScript 2 with strict null checks.     In the CalendarSpec interface  the 6 properties have type  CalendarSpecVal   undefined   the undefined comes from them being optional prperties .   In TypeScript  if there is a string index type  every property in the same interface must be assignable to the string index type.   And  CalendarSpecVal   undefined  is not assignable to  CalendarSpecVal .     This fixes that.,webbiesdk,closed,2,2016-11-19 16:34:57,2016-11-26 10:59:07,,,,1,1
10635,moment/moment,3615,[feature] duration format in core moment,I hope to address  1048 by porting @jsmreese  s plugin into moment core. Since  3308 closed  I tried to pick up where @butterflyhug left off.    Features           moment.duration.format [template] [  precision] [  settings]    for comparison  see https://github.com/jsmreese/moment duration format      [  REMOVED  ] If no template or other arguments are provided  the default template function will generate a template string based on the duration s value.       moment.duration 123   seconds  .format  ;  //  0:02:03     moment.duration 123   months  .format  ;  //  10y 3m             template   string function  is the string used to create the formatted output  or a function that returns the string to be used as the format template.       moment.duration 123   minutes  .format  h:mm  ;  //  2:03        The template string is parsed for moment token characters  which are replaced with the duration s value for each unit type. The default tokens are:       years:   Y or y  months:  M  weeks:   W or w  days:    D or d  hours:   H or h  minutes: m  seconds: s  ms:      S           precision   number  defines the number of digits to display for the final value.    The default precison value is 0.       moment.duration 123   minutes  .format  h [hrs]  ;  //  2 hrs        Positive precision defines the number of digits to display to the right of the decimal point.       moment.duration 123   minutes  .format  h [hrs]   2 ;  //  2.04 hrs        Negative precision will truncate the value to the left of the decimal point.       moment.duration 123   minutes  .format  m [min]    1 ;  //  120 min            settings  is an object that can override any of the default moment duration format options.    Both the  template  and  precision  arguments may be specified as properties of a single settings object argument  or they may be passed separately along with an optional settings object.       moment.duration 123   minutes  .format   template:  h [hrs]   precision: 2   ;  //  2.04 hrs             Settings     trim   not implemented : Leading tokens are automatically trimmed when they have no value.     forceLength   not implemented : Force the first moment token with a value to render at full length  even when the template is trimmed and the first moment token has a length of 1. Sounds more complicated than it is.        trunc   REMOVED : Truncates final token value  default is false  does rounding instead       decimalSeparator   implemented :  string or a function  default detects environment s decimalSeparator from http://stackoverflow.com/questions/1074660/with a browser how do i know which decimal separator does the client use      Escape Token  implemented : Define something other than square brackets as escape characters.      y/m/d/h/m/s/ms tokens  implemented : Define something other than defaults for tokens.     general default token  implemented : By default  it s  /. ?/ . One can change it in the plugin  but we may not want to allow changes.    [REMOVED]  types  of tokens that are searched  implemented : By default  we are searching for   escape years months weeks days hours minutes seconds milliseconds general  .     You can change the tokens with something like        moment.duration.fn.format.defaults.weeks = /custom /;       or like        moment.duration 1234   days  .format  custom weeks     weeks: /custom /              Notes:              The format tokens are not default moment tokens. I need to fix this as per CR  but I m not sure how  since the format tokens all refer to durations.       completed  I ve taken out all references to  trim   and  forceLength  and  trunc  . We can add that into core moment later. The behavior is now slightly different than in the plugin.      completed  I ve added internationalization using  this.localeData  .postformat   similar to other core moment formatting. This should work ok even with the  decimalSeparator  setting.         for your information  This adds about 2.3K to  moment.min.js   I think this is  4.5  . If you need it thinner  let me know.       ok d by @jsmreese  Conversions to months are handled a bit differently  I suppose @jsmreese used 30 days to a month  but it s now something more like 365/12 . So  I adjusted some of the tests to make it pass.    Architecturally  this started a bit different than core moment  and this may need more work and discussion. I m happy to code  but I want to hear from all of you.  ,marwahaha,open,13,2016-11-19 20:17:59,0000-00-00 00:00:00,,Discussion,,,1,1
10634,moment/moment,3616,typings for jsnext,Currently moment with typescript is only usable with the non es6 version of moment  which preferably we can use the es6 version instead. Another great benefit is also to be able to get it working with rollup.    I was experimenting to try and get them working together within the same package  Typings for es6 and non es6  however I didn t manage. Would you accept a PR if i make the typings for es6 and change the default to be the es6 version instead?     Usage would be as       ts  import moment    Moment   from  moment ;  const date: Moment = moment  ;    // instead of   import   as moment from  moment ;  const date: moment.Moment = moment  ;       Its also much cleaner and the way imports should be used. What do you think?  ,stephenlautier,open,1,2016-11-19 21:49:01,0000-00-00 00:00:00,,Breaking change,TypeScript,,,0,1
10633,moment/moment,3617,Breaking changes in moment.d.ts type definition,Updating the typings from 1.8 to 2.0 syntax ended up breaking my TypeScript 1.8 project.    I ve reverted to 2.16.0 for now  but 2.17.0 will break any TypeScript < 2 projects.,nebez,open,19,2016-11-22 15:31:09,0000-00-00 00:00:00,,TypeScript,,,0,1
10632,moment/moment,3618,Moment.d.ts file compilation error,moment.d.ts file in version 2.17.0 is  not good  Its giving TS compilation error .     interface MomentParsingFlags        empty: boolean;      unusedTokens: string[];      unusedInput: string[];      overflow: number;      charsLeftOver: number;      nullInput: boolean;      invalidMonth: string   null;      invalidFormat: boolean;      userInvalidated: boolean;      iso: boolean;      parsedDateParts: any[];      meridiem: string   null;         null causing the compile error. it works fine in 2.15.2 version. please check this out.    TypeScript error: /Users/pas9150/Main/NypHealth/node_modules/moment/moment.d.ts 251 28 : Error TS1110: Type expected.  TypeScript error: /Users/pas9150/Main/NypHealth/node_modules/moment/moment.d.ts 256 24 : Error TS1110: Type expected.  TypeScript error: /Users/pas9150/Main/NypHealth/node_modules/moment/moment.d.ts 392 98 : Error TS1110: Type expected.  TypeScript error: /Users/pas9150/Main/NypHealth/node_modules/moment/moment.d.ts 393 88 : Error TS1110: Type expected.  TypeScript error: /Users/pas9150/Main/NypHealth/node_modules/moment/moment.d.ts 635 80 : Error TS1110: Type expected.  TypeScript error: /Users/pas9150/Main/NypHealth/node_modules/moment/moment.d.ts 687 84 : Error TS1110: Type expected.  TypeScript error: /Users/pas9150/Main/NypHealth/node_modules/moment/moment.d.ts 688 84 : Error TS1110: Type expected.,yesparthasarathy,closed,6,2016-11-23 02:32:30,2017-03-29 07:06:17,,TypeScript,,,0,1
10631,moment/moment,3619,Leverage setHours to have a more efficient implementation of start end of,  Description of the Issue and Steps to Reproduce:           let d = new Date    d.setHours 0  0  0  0        is way more efficient than :        let d = new Date    d.setHours 0   d.setMinutes 0   d.setSeconds 0   d.setMilliseconds 0         about   400   times faster     When calling  startOf unit    where  unit  is one of   hour      day      week      month      year    moment should use the first method rather than the second one.      Environment:      I m running a ReactNative app on an iOS Simulator  running iOS 10.1.      Other information that may be helpful:      The time zone setting of the machine the code is running on : UTC   01:00  Paris  France     The time and date at which the code was run : 2016 11 23T10:56:19 01:00    Other libraries in use  TypeScript  Immutable.js  etc  : ReactNative       js  console.log   new Date   .toString     // [Log] Wed Nov 23 2016 10:58:47 GMT 0100  CET   index.ios.bundle  line 788   console.log  new Date   .toLocaleString     // [Log] 11/23/2016  10:58:47 AM  index.ios.bundle  line 788   console.log   new Date   .getTimezoneOffset     // [Log]  60  index.ios.bundle  line 788   console.log  navigator.userAgent   // [Log] undefined  index.ios.bundle  line 788   console.log moment.version   // [Log] 2.14.1  index.ios.bundle  line 788      ,aymericbouzy,closed,2,2016-11-23 10:01:55,2016-11-28 00:32:53,,performance,,,0,1
10630,moment/moment,3620,create setTime function,This increases the performance of startOf / endOf by a factor of about 90 for   day  .    NB : This is my first PR  i m not sure what I should do  especially regarding proving my call about this performance gain. I see there is a benchmark folder  but I don t know what to do about it. I have run grunt tests successfully on my computer.,aymericbouzy,open,7,2016-11-23 14:33:44,0000-00-00 00:00:00,,Discussion,Needs Revision,,,1,1
10629,moment/moment,3621,isValid   is not correct for moment object created with array,  Description of the Issue and Steps to Reproduce:      isValid   for moment defined using array always returns true for invalid date. For example  for date 30 February 2010.       js  console.log moment [2010 2 30] .isValid   ; //true          Please include the values of all variables used.       Environment:       Ubuntu 14.0.4      Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.       Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version        Thu Nov 24 2016 09:28:29 GMT 0800  WITA   24/11/2016 09.28.29   480  Mozilla/5.0  X11; Ubuntu; Linux x86_64; rv:49.0  Gecko/20100101 Firefox/49.0  2.12.0     Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,zamronypj,closed,1,2016-11-24 01:33:53,2016-11-24 02:57:00,,,,0,1
10628,moment/moment,3622,validating positively for a missing timezone,Came by this in a discussion  we opened a bug report. Probably a isse.         Description of the Issue and Steps to Reproduce:      1. Validating a ISO 8601 formatted date without timezone declaration in non strict mode always results as true even when the timezone is missing. Validating in strict mode is not an alternative because then the entire date must be mapped  which can t be done in case the exact formatting of the remainder of the date isn t known at programming time.       js  import   module  test   from  ../qunit ;  import moment from  ../../moment ;    module  bugreport  ;    test  validating positively for a missing timezone   function  assert         var validated = moment  2097 07 16T19:20:30.45    Z  .isValid  ;      assert.notOk validated   We expect a date without a expressively mentioned timezone as invalid  ;    ;            Please include the values of all variables used.       Environment:        unit test suite     Examples: Chrome 49 on OSX  Internet Explorer 10 on Windows 7  Node.JS 4.4.4 on Ubuntu 16.0.4      Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.       Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset       Thu Nov 24 2016 11:03:09 GMT 0100  CET   2016 11 24 11:03:09   60         node.js / moment   latest development master        Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,sebs,closed,2,2016-11-24 10:04:48,2016-11-28 00:30:35,,,,0,1
10627,moment/moment,3623,locale bundling problem,I implement locales as es6 modules in my application. Each locale module imports locale information from any 3rd party libraries used along with message translations etc. Activating a locale is done by importing the locale module  using systemjs  at runtime.    An example locale module  fr.ts :       import  IntlLocaleData  from  ../services/intl service ; // my locale data interface  import ng2IntlData from  ng2 intl/locale data/fr ; // locale data for ng2 intl library  import  moment/locale/fr ; // moment s locale data  fr   import messages from  ../../../src/i18n/fr.json ; // my application messages  fr     export default <IntlLocaleData>       // data for ng2 intl      ng2Intl:            locale:  fr FR            data: ng2IntlData              // moment locale name  data is auto defined by importing the moment locale       moment:            locale:  fr               // my messages      messages: messages   ;       The problem I have is with the moment locale automatically calling moment.defineLocale when loaded. When I bundle my locale  using rollup  I make moment an external  I don t want to bundle an instance of moment with each locale  but then the call to defineLocale is problematic. I have worked around this by using rollup s ability to inject code into the generated bundle and creating a fake moment but it s pretty messy.    A big ask I know  but I wonder whether you would consider shipping an alternative version of the locale data which doesn t import moment and just returns the data? Something like this  eg locale data/fr.js :       export default locale moment         return   // same object as is passed to defineLocale          months :  janvier_f vrier_mars_avril_mai_juin_juillet_ao t_septembre_octobre_novembre_d cembre .split  _             monthsShort :  janv._f vr._mars_avr._mai_juin_juil._ao t_sept._oct._nov._d c. .split  _             // etc...       ;   ;         Files like these could be shipped next in a separate folder  eg locale data  next to the current locale folder. To use you would do something like this:       import moment from  moment ;  import localeData from  moment/locale data/fr ;    moment.defineLocale  fr   localeData moment  ;       moment is passed in as a parameter to the locale function to allow access to moment.  The zh cn locale uses moment in calendar.nextWeek/lastWeek.     As I say  it s not a blocker for me  but I think there s merit to the approach?,timbell,open,1,2016-11-24 12:02:14,0000-00-00 00:00:00,,Enhancement,Loading,,,0,1
10626,moment/moment,3624,en  en US locales,Just a question:    Why are there no  en    en US  locales?  I understand they have been taken as the  default  value  and so  if that s what you want  you don t need to use locale to start with.  But  imagine you have the typical combo where the user can choose the locale.  And you are calling moment.locale   with the current value of that.  With the current situation  you have to special case the en/en US case  which seems like a bit awkward to me.    Thx for your great work. Keep on pushing ,elmart,closed,16,2016-11-24 18:23:07,2016-11-25 08:40:51,,,,0,1
10625,moment/moment,3625,Precision for humanize    toNow    fromNow   and to   for months is wrong,  moment.duration 11   months  .humanize  ; // returns  a year  instead of 11 months      I am aware of the issue here https://github.com/moment/moment/issues/2542 but the whole discussion there is around minutes and seconds.    I believe that when talking about larger durations of time  like 11 months  it is expected that rounding is less precise  but there still is no reason to skip the 11 months step  and it is contrary to the docs. There  http://momentjs.com/docs/ /displaying/tonow/  it is stated that for   45 to 345 days   toNow   should return   in 2 months ... in 11 months  . But the tests never expect that  https://github.com/moment/moment/blob/develop/src/test/moment/duration.js L388   actually the contrary is expected: that 344 days duration returns  a year .     assert.equal moment.duration  days: 344  .humanize        a year           344 days = a year  ;      So either the docs should reflect the reality at least  or momentjs should be able to return   11 months   for durations.,tgelu,closed,3,2016-11-25 10:02:19,2016-11-28 00:50:33,,Documentation,,,0,1
10624,moment/moment,3626,updateLocale does not keep the correct predefined locale but overwrites with default  en ,  Description of the Issue and Steps to Reproduce:      I wanted to update the  monthShort  of the german Locale with the follwoging code:     js  var moment = require  moment  ;    moment.updateLocale  de    monthsShort: [ JAN    FEB    M R    APR    MAI    JUN    JUL    AUG    SEP    OKT    NOV    DEZ ]  ;    var date = moment  2011 02 02  ;    date.locale  de  ;    console.log date.format  YYYY MMM MMMM   ;          Expected would be an output of  2011 FEB Februar   instead the output is  2011 FEB February .  When updateing the  monthsShort  key in the locale definition the resulting locale is not based on the german definition anymore but on the english Definition  hence  Febraury  instead of  Februar .      Environment:      Node 6.3.1 on LInux      Other information that may be helpful:      If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     //console.log  navigator.userAgent   console.log moment.version        Mon Nov 28 2016 11:23:45 GMT 0100  STD   2016 11 28 11:23:45   60  //omitted the  navigator  potion  2.17.0,seriousManual,closed,4,2016-11-28 10:24:19,2017-11-11 19:41:42,,Bug,,,0,1
10623,moment/moment,3627,how to get diffrence hour between end time 11.30pm and start time 9.40 pm   results: 1,,dongon89,closed,0,2016-11-29 12:06:10,2016-12-04 17:14:55,,,,0,1
10622,moment/moment,3628,Adds  sign CLA  link to  CONTRIBUTING.md .,Adds a link to sign CLA  in case contributor wants to sign it immediately.,skfd,closed,0,2016-11-29 12:45:00,2016-11-30 03:29:50,,,2.17.1,1,1
10621,moment/moment,3629,Locale short month: dots should not be required for parsing  error in monthsShort function call ,  Description of the Issue and Steps to Reproduce:    In the Spanish locale  the  if  / MMM /.test format      test for  D MMM YYYY  format is   not   working for parsing  and therefore dates like  8 Dic 2016  result in  Invalid date .  The format should be accepted.   8 Dic. 2016  is parsed correctly  but is not the proper way of expressing a date in this format and the dot should not be required.    I ve lived in Nicaragua for 16 years and the format  8 Dic 2016  is clearly the most common way of writing a shorthand date.  It s also highly preferred to use this type of format because in a mixed national/expat community using numbers only dates is too confusing.    It appears that the problem is related to the fact that in line 19 of   es.js    the test  if  / MMM /.test format      always comes up with an empty value for  format  when parsing.  Therefore  the use of  monthsShortDot  is always used and  monthsShort  is never used.  This is what is breaking the algorithm.  If format was passed correctly  it would select  monthsShort  and work properly.      Environment:    Chrome 54 on Windows 10    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version     Console Log Output:  Tue Nov 29 2016 10:35:21 GMT 0600  Central America Standard Time   11/29/2016  10:35:21 AM  360  Mozilla/5.0  Windows NT 10.0; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/54.0.2840.99 Safari/537.36  2.15.1       ,lstarky,closed,5,2016-11-29 16:38:40,2017-08-06 23:43:40,,Language,Up-For-Grabs,,,0,1
10620,moment/moment,3630,2 tests failed. zones:global failure  2872.1  zones:global failure  2872.2  ,    Client info       Date String   : Wed Nov 30 2016 16:21:42 GMT 0700  Local Standard Time   Locale String : 30.11.2016  16:21:42  Offset        :  420  User Agent    : Mozilla/5.0  Windows NT 10.0; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/54.0.2840.99 Safari/537.36  Moment Version: 2.17.0         ====        zones:global failure  2872.1      Script error.       javascript  // Expected undefined  // Actual   null  null === undefined         ====        zones:global failure  2872.2      afterEach failed on global failure: Expected deprecation warnings did not happen: moment  .zone       javascript  // Expected undefined  // Actual   null  null === undefined     ,DaFri-Nochiterov,open,0,2016-11-30 09:22:31,0000-00-00 00:00:00,,Unit Test Failed,,,0,1
10619,moment/moment,3631,Grunt transpile with locales fails   missing parent locale,  Description of the Issue and Steps to Reproduce:    1.    git clone https://github.com/moment/moment.git     2.    git checkout tags/2.17.0     3.    npm install     4.    grunt transpile:en gb fi       Expected:    It to build moment with locales.custom.js with English and Finnish locales    Actual:       >> error transpiling custom Error: You probably specified locales requiring parent locale  but didn t specify parent  >>     at /home/tanel/workspace/moment/tasks/transpile.js:284:23  >>     at process._tickCallback  internal/process/next_tick.js:103:7            Environment:    NodeJS 4.6.2  also tried 6.9.1  on Debian 8.6      Other information that may be helpful:      I actually needed a feature from moment v2.13.0 and that version transpiled just fine    It seems to fail in the    tasks/transpile.js    at this check:       if  moment.locales  .length  == localeFiles.length        I logged the arrays from moment.locales   and localeFiles before the IF statement  the result was:       moment.locales  : [  en    en gb    fi  ]          localeFiles: [  locale/en gb.js    locale/fi.js  ]       So it seems like it s expecting a file    locale/en.js    to be listed under localeFiles  but that kind of file doesn t exist in the    locale/    directory.,taneltm,closed,1,2016-11-30 13:23:06,2017-03-18 19:37:11,,Bug,,,0,1
10618,moment/moment,3632,toISOString shouldn t return  Invalid Date  when called on a invalid moment,Because ISO dates are typically not used for direct human consumption and rather as a data interchange format  returning the string  Invalid Date  isn t very useful.  Throwing a RangeError  which the native JS date object does  or returning null or would be more useful.      Description of the Issue and Steps to Reproduce:    create an invalid moment object  e.g. moment null  or moment  0000 00 00     call toISOString on the invalid moment  see the string  Invalid Date  is returned      Environment:      Chrome on Fedora  ,andjd,closed,2,2016-11-30 17:11:35,2017-01-09 04:52:49,,Enhancement,,,0,1
10617,moment/moment,3633,duration.asMonths   returns a different month result than the sum of months obtained from duration.get  year   and duration.get  month   for boundary durations,  Description of the Issue and Steps to Reproduce:       moment.duration.asMonths    returns a different month result than than the sum of months obtained from  moment.duration.get  year    and  moment.duration.get  month    for boundary durations. The same issue applies to  moment.duration.asYears    and  moment.duration.get  year   .        js  var duration = moment.duration moment.utc  2016 12 01T08:30:46     moment.utc  2014 12 31T08:31:46   ;    console.log duration.as  M   ;    // 23.0312509268956  console.log duration.asMonths   ; // 23.0312509268956    console.log duration.get  y   ;   // 1 year which is 12 months  console.log duration.get  M   ;   // 10    var durationUsingDiff = moment.duration moment.utc  2016 12 01T08:30:46  .diff moment.utc  2014 12 31T08:31:46    ;    console.log durationUsingDiff.as  M   ;    // 23.0312509268956  console.log durationUsingDiff.asMonths   ; // 23.0312509268956    console.log durationUsingDiff.get  y   ;   // 1 year which is 12 months  console.log durationUsingDiff.get  M   ;   // 10           Environment:      Chrome 54 on OSX      Other information that may be helpful:         js  console.log   new Date   .toString   ; //  Thu Dec 01 2016 13:36:32 GMT 1300  NZDT    console.log  new Date   .toLocaleString   ; //  12/1/2016  1:36:32 PM   console.log   new Date   .getTimezoneOffset   ; //  780  console.log  navigator.userAgent ; //  Mozilla/5.0  Macintosh; Intel Mac OS X 10_11_6  AppleWebKit/537.36  KHTML  like Gecko  Chrome/54.0.2840.98 Safari/537.36   console.log moment.version ; //  2.17.0      ,byronh99,closed,1,2016-12-01 00:40:58,2016-12-04 17:13:01,,,,0,1
10616,moment/moment,3634,endof returns wrong number of days in case of 94   1994 ,  Description of the Issue and Steps to Reproduce:       month =  april     year =  1994     year =  94        Environment:       Examples: Node.JS 6.3.2 on Ubuntu 16.0.4   This example will print all the wrong date;       js      const moment = require  moment  ;  let month =  april ;    for let i =  20000 ; 20000 > i ; i          let year =    i  ;      var rest = moment    month    year    MMMM YYYY  .endOf  month  .get  D          if rest == 1          console.log rest year                    Other information that may be helpful:       js  moment  1993 04 01T00:00:00.000    moment  1994 04 01T01:00:00.000   gets extra hour.           If you are reporting an issue  please run the following code in the environment you are using and include the output:       Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,codeRoSU,closed,3,2016-12-01 13:15:58,2016-12-12 22:22:18,,Troubleshooting,,,0,1
10615,moment/moment,3635,Handling of  touchmove  input event was delayed for 111 ms due to main thread being busy. Consider marking event handler as  passive  to make the page more responsive.,  Description of the Issue and Steps to Reproduce:         Handling of  touchmove  input event was delayed for 111 ms due to main thread being busy. Consider marking event handler as  passive  to make the page more responsive. moment.min.js:7       It s random when this is triggered. Sometime I can go through the entire form  the webapp  without it showing up  but some times it does.   When it does  the app doesn t responde properly and you have to keep tapping stuff until it does responde.      Environment:    AppleWebKit/537.36  KHTML  like Gecko  Version/4.0 Chrome/54.0.2840.85 Safari/537.36  On a Samsung Tab 4 10  device  page running in WebView through an app called  Android Kiosk   https://www.android kiosk.com/       Other information that may be helpful:      Other libraries in use  TypeScript  Immutable.js  etc   Typescript  Angular JS  Angular Material    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version   2016 12 02 15:16:48.741 Fri Dec 02 2016 15:16:48 GMT 0100  CET  VM306:1  2016 12 02 15:16:48.809 02/12/2016  15:16:48 VM306:2   2016 12 02 15:16:48.813  60 VM306:3  2016 12 02 15:16:48.816 Mozilla/5.0  Linux; Android 5.0.2; SM T530 Build/LRX22G; wv  AppleWebKit/537.36  KHTML  like Gecko  Version/4.0 Chrome/54.0.2840.85 Safari/537.36 VM306:4  2016 12 02 15:16:48.818 2.12.0 VM306:5  undefined         Not sure if this is a moment issue  but the Chrome console mentions moment.min.js on line 7.,ruant,closed,1,2016-12-02 14:33:01,2016-12-04 16:58:18,,,,0,1
10614,moment/moment,3636,TS2503: Cannot find namespace  moment ,  Description of the Issue and Steps to Reproduce:    I m just trying to use moment within a  d.ts  file:         interface SomethingWithMoment        moment  : moment.Moment;             While compiling I get a  TS2503: Cannot find namespace  moment  .    I am not sure if it is a moment problem or a typescript one.      Environment:    moment 2.17.0  typescript 2.0.10      Other information that may be helpful:    Example project: https://github.com/valotas/ts moment  ,valotas,closed,1,2016-12-03 09:23:27,2017-01-09 05:09:31,,Troubleshooting,TypeScript,,,0,1
10613,moment/moment,3637,moment.duration  .asDays   return a Float,  Description of the Issue and Steps to Reproduce:      duration calculation between a diff of two dates return a Float       js  var start = moment  2017 03 12  ;  var end = moment  2017 03 28  ;  moment.duration end.diff start  .asDays  ; // 15.958333333333334;         Environment:      Firefox 50.0 Ubuntu 16.04           Sat Dec 03 2016 18:15:07 GMT 0100  CET    03/12/2016   18:15:07    60   Mozilla/5.0  X11; Ubuntu; Linux x86_64; rv:50.0  Gecko/20100101 Firefox/50.0   2.17.0  ,dievardump,closed,1,2016-12-03 17:17:14,2016-12-04 16:46:19,,,,0,1
10612,moment/moment,3638,[misc] TS: Make typescript definitions work with 1.x,This fixes the definitions file from breaking changes introduced in  3490. Now the file is somewhat compatible with 2.0 with the use of  void  instead of  undefined   but unfortunately  null  arguments are not supported with 2.x and  strictNullChecks   because  null  keyword is not available in 1.x.    The typescript definitions will be updated for 2.0  proper  null  support  with the release of moment 3.x.   NOTE   Any requests to fix the definitions before that will be denied.      NOTE2  : For the eager 2.0 ts users    the definition file includes in comments whether the  void  corresponds to null  undefined  or both. So one can simply write a script to generate a proper 2.0 definition. The scope of this generator is  not  part of the moment team s efforts  so PRs won t be accepted.,ichernev,closed,1,2016-12-04 02:18:48,2016-12-04 05:09:31,,TypeScript,,2.17.1,1,1
10611,moment/moment,3639,Moment does not get correct time when local time is wrong,When the computer have wrong time  not synchronized with standard internet time   momentjs is also return this wrong time. I used moment   and moment.utc   function  but all of them is same result. How can I get global time independently with local time?,vutaviva,closed,2,2016-12-04 05:04:10,2016-12-04 16:37:29,,,,0,1
10610,moment/moment,3640,[misc] Fix locale issues,   bg x  locale was accidentally commited.     yo  locale didn t have the right comment syntax  and wasn t inserted on the moment website.,ichernev,closed,1,2016-12-04 05:22:34,2016-12-04 05:32:41,,Language,,2.17.1,1,1
10609,moment/moment,3641,[new locale] ur: Urdu locale,Translations in Urdu and passing unit tests are added.                                                                       Files   Tests   Assertions   Failed   Passed   Runtime                                                                  1       2892    119091       0        119091   9282                                                                   Done  without errors.     ,ibnesayeed,closed,11,2016-12-04 17:53:55,2017-03-02 08:52:18,,Pending Next Release,,,1,1
10608,moment/moment,3642,Missing Static Definition,The definition file is missing the definition of the moment function. Take a look at https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/moment/moment.d.ts L580. The below code complains that  moment  is not of Function type.         import Moment from  moment/moment.d ;  declare const moment: Moment.Moment;  let minDate = moment  .add 9   days  .toDate  ;     ,patrickhousley,closed,5,2016-12-04 20:02:19,2016-12-05 15:28:24,,TypeScript,,,0,1
10607,moment/moment,3643,[bugfix] Fixes  3520  parseZone incorrectly handled minutes under 16,Fixes issue in  3520 where explicitly parsed offset in minutes less than abs 16  is converted to hours.,maggiepint,closed,5,2016-12-05 05:18:57,2017-03-02 08:56:50,,Pending Next Release,,2.18.0,1,1
10606,moment/moment,3644,changed toISOString invalid date to null,issue  3632  changed function and tests,flakolefluk,closed,2,2016-12-05 15:09:42,2017-01-09 04:55:25,,,,1,1
10605,moment/moment,3645,1 test failed. week year:week numbers 2012/2013  2446.7  ,moment  20110609   YYYYMMDD  ,15762600336,open,1,2016-12-06 09:26:37,0000-00-00 00:00:00,,Unit Test Failed,,,0,1
10604,moment/moment,3646,TypeError: undefined is not an object  evaluating  m.month    ,  Description of the Issue and Steps to Reproduce:      Moment.js used with full calendar in an rails app.     TypeError: undefined is not an object  evaluating  m.month     occurs in function localeMonthsShort since Version Update from 2.11.1 to current.     Happens with     //= require moment  //= require moment/de at.js  //= require moment/de.js  //= require moment/es.js  //= require moment/en gb.js    from momentsjs rails gem and also from moment with lang directly from here.      Please include the values of all variables used.       Environment:      OSX Sierra  Safari and Chrome.         Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     Using jquery rails 4.2.1  Using jquery ui rails 6.0.1  Using jquery timepicker rails 1.11.4    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString      Tue Dec 06 2016 15:32:10 GMT 0100  CET    console.log  new Date   .toLocaleString      6.12.2016  15:31:59   console.log   new Date   .getTimezoneOffset      60  console.log  navigator.userAgent    Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_1  AppleWebKit/537.36  KHTML  like Gecko  Chrome/55.0.2883.75 Safari/537.36   console.log moment.version   2.17.1          Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,42he,closed,3,2016-12-06 14:32:44,2017-03-03 09:04:03,,Troubleshooting,,,0,1
10603,moment/moment,3647,No way of getting original time,Moment provides two switches  .local    and  .utc    which changes the way how current moment object shows time.    Problem: if original input date was presented with a timezone different from UTC and local  I have no way to retrieve original time  format it .       js  var date = moment  2016 12 06T15:00:00 02:00  ;  console.log date.format  LTS   ; //returns 19:00:00 if my timezone is  2  i.e. returns local time       sample code is at [https://jsfiddle.net/rz421ccj/4/] https://jsfiddle.net/rz421ccj/4/     So  actually since moment object is created it is in  local  mode and can t be switched back to  original .,yrtimiD,closed,2,2016-12-06 16:46:50,2016-12-06 17:39:19,,,,0,1
10602,moment/moment,3648,Problem getting exact date using year week day_of_week format,I am facing issue in fetching exact date when i specify the format  YYYY WW d  format.  it always resets to first day of the week which i have specified.    I have configured  Monday  to be the first day of the week.    Examples:  moment   year:2016  week:49  day:4  .toISOString  ;   2016 01 05T18:30:00.000Z      But ideally i need it to be 2016 01 08T18:30:00.000Z                                                                                                         Environment and version:    console.log   new Date   .toString    :Wed Dec 07 2016 06:55:35 GMT 0530  India Standard Time   console.log  new Date   .toLocaleString    :12/7/2016  6:55:35 AM  console.log moment.version  :2.10.6    Mozilla/5.0  Windows NT 6.1; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/54.0.2840.99 Safari/537.36  ,jayanthrajpramuk,closed,1,2016-12-07 01:33:53,2016-12-07 12:33:08,,,,0,1
10601,moment/moment,3649,Can not select anything on the home page  for copying  ,  Description of the Issue and Steps to Reproduce:    it s very difficult to select code examples on home page   http://momentjs.com/  . Before you even finish selecting something the selection is gone.    That s because the page is constantly refreshing itself to show actual current seconds in one of the examples. A gimmick that serves no real purpose and is counter productive.       Environment:    Chrome 54 on OSX  ,Starojitski,closed,1,2016-12-07 12:26:55,2016-12-07 12:34:02,,,,0,1
10600,moment/moment,3650,Import with Typescript and Babel VS import with just Typescript,I m using Moment 2.17.1 with TypeScript 2.1.1  OS X  10.11.6  and Node 6.3.0. I m having trouble importing moment consistently.    In our dev and prod environments  we use Babel to compile. In that scenario  this import statement works:         import moment from  moment ;         This works in the browser but causes  TypeError: moment_1.default is not a function  in my mocha tests.    Our test code is built without babel  just  tsc  to an output directory and we run from there. In that case  we have to use this statement:         import   as moment from  moment ;         This makes node happy but brings back the dreaded  moment is not a function     error when that code is hit in the browser.    Naturally  I need to find one import to rule them all if I want to test any code that uses moment.    I have enabled  allowSyntheticDefaultImports  in both environments  tsconfigs. My guess is that the presence of Babel is complicating things but I don t know what the solution is. Would love some advice. Thank you ,subvertallchris,open,12,2016-12-07 16:57:03,0000-00-00 00:00:00,,Discussion,TypeScript,,,0,1
10599,moment/moment,3651,The difference dates,Hi  guys. I came across a problem:      Description of the Issue and Steps to Reproduce:       js  console.log moment.duration moment  12/23/2016  .diff moment  11/23/2016    .days         // 30  console.log moment.duration moment  01/23/2017  .diff moment  12/23/2016    .days        // 0     ,Myhaylyak,closed,1,2016-12-08 09:24:37,2016-12-12 01:15:10,,,,0,1
10598,moment/moment,3652,Norwegian months double dots,I have something in the line of this:     moment this.state.returnTime .format  DD. MMM. HH:mm        in norwegian the date is then compiled as such:      09. des.. 17:00      So I guess there is a hardcoded  des.  in moment files for norwegian.      Can you guys advice me on how to remove this issue???,kdichev,closed,4,2016-12-09 10:03:21,2016-12-23 20:45:13,,Language,Troubleshooting,,,0,1
10597,moment/moment,3653,The length of a duration in months is not 30 days.,  Description of the Issue and Steps to Reproduce:    Length of a duration in months is not 30 days like the docs state  same goes for years  365 days . [link to docs] http://momentjs.com/docs/ /durations/months/      js  > moment.version   2.17.0   > moment.duration  days: 30  .asMonths    0.9856465225158627 // should be 1  > moment.duration  days: 365  .asYears    0.9993360575508053 // should be 1           Environment:    Node.JS v7.2.1 on Arch Linux,connection-reset,closed,6,2016-12-09 10:17:22,2018-03-05 23:22:12,,Documentation,,,0,1
10596,moment/moment,3654,[locale] da: Improvements in calendar and date formats,I ve lowercased  I s that shouldn t be capitalized in this context. Also  I fixed a few other idiomatic problems. @mrbase Do you approve?    Also  month and weekday abbreviations in Danish should be followed by a period  e.g.  s n.   like in the German and French locale files. I haven t figured out how to make the tests run successfully when implementing that change  so I ve skipped that change for now so that the tests run successfully.,codenhagen,closed,2,2016-12-09 14:43:34,2017-03-02 09:01:17,,Pending Next Release,,,1,1
10595,moment/moment,3655,[misc] Fix typo in CONTRIBUTING.md,,connection-reset,closed,4,2016-12-09 16:18:46,2017-03-02 09:09:09,,Pending Next Release,,2.18.0,1,1
10594,moment/moment,3656,npm package size vs. moment.min.js size,I m looking at 60kb for the minified moment file  but when I included it via npm package my bundle increased by hundreds of kb. Does that sound right? Just curious.  Thanks  moment is great  ,seanpascoe,closed,3,2016-12-09 22:27:12,2016-12-12 22:21:55,,,,0,1
10593,moment/moment,3657,Add MomentStatic Definition,  Added the MomentStatic TypeScript definition. This interface should describe the static  moment  variable as it is either imported or as it is attached to the window.      This allows developers that wish to use moment but not actually bundle it with their application  i.e. they are using Webpack but moment is already included on the window by their deployment environment  to import only the declaration file and declare a moment variable of type Moment.MomentStatic.    Copied the typings tests with modification to import only the declarations file and use it with a constant declared of type Moment.MomentStatic.    Added ignore for IntelliJ project directory.,patrickhousley,closed,5,2016-12-13 03:02:24,2017-01-09 05:08:49,,,,1,1
10592,moment/moment,3658,Implement type checking to allow calendar to specify config first,Currently the API of   moment  .calendar     is specified as   moment  .calendar moment like  formats   .    As pointed out in urish/angular2 moment 64  changing the formats is actually a much more common operation than changing the reference time.    It should be possible to use type checking to implement   moment  .calendar formats    as an overload of this.    To accomplish this  ensure that exactly one parameter is specified  and that that one parameter has a type of object  and is NOT a   moment  . If that is done  it should be reasonable to assume it is a format specifier.,maggiepint,closed,3,2016-12-13 04:54:47,2016-12-30 19:56:33,,Enhancement,Up-For-Grabs,,,0,1
10591,moment/moment,3659,[new locale] sd: Sindhi locale,Hi  I have added support for [Sindhi] https://en.wikipedia.org/wiki/Sindhi_language  language translation  It is very basic module and For most cases  I think these changes should suffice.    Unit tests are included as well.    Thanks for the great library        Cheers          Global summary:                                                                Files   Tests   Assertions   Failed   Passed   Runtime                                                                  1       2892    119091       0        119091   10429                                                                    Running  exec:typescript test   exec  task    Done  without errors.     ,narainsagar,closed,5,2016-12-13 23:25:29,2017-03-02 09:12:14,,Language,Pending Next Release,,2.18.0,1,1
10590,moment/moment,3660,moment tests.js error when publish project MVC,Error  Copying file Content moment develop typing tests moment tests.js to obj Release AspnetCompileMerge Source Content moment develop typing tests moment tests.js failed. Could not find file  Content moment develop typing tests moment tests.js .         Environment:    Chrome OS windows 10 Pro  Visual Studio 2015  SQL Server 2014  Moment Js ver 2.16.0  ,AdwardNguyen,closed,2,2016-12-14 04:40:53,2016-12-15 22:12:47,,,,0,1
10589,moment/moment,3661,Invalid relative path to locale files when using jsnext:main,The relative path to locale files is invalid when imported with  jsnext:main . The following line at https://github.com/moment/moment/blob/develop/src/lib/locale/locales.js L55 attempts to load a locale file from  /src/lib/locale/...   which doesn t exist. It should reference the  /locale  folder  at the project root .        js  // /src/lib/locale/locales.js line 55  require  ./locale/    name ;         I m creating this issue for better visibility even though the problem has been brought up before by @farwayer as a comment buried in another issue:  https://github.com/moment/moment/issues/3104 issuecomment 259411592    I m not sure how to best solve this so that the  jsnext:main  module works without breaking  /moment.js    /min/moment.min.js   and the other bundled modules. I m willing to work on a PR if one of the maintainers would give some advice on a solution that would be acceptable.  ,tauren,open,0,2016-12-14 19:43:47,0000-00-00 00:00:00,,Loading,,,0,1
10588,moment/moment,3662,Short months and days in current locale without trailing period, moment.monthsShort    returns an array of the months in short. But when the locale is for example Dutch  it will return an array of months in short   with a trailing period  .    How do I use  moment.monthsShort    to get a list of the months in the current locale without any trailing dot  or any other character ?    The same goes for the days of the week.   moment.weekdaysShort    returns the days of the week in short in the current locale with a trailing period when the current local is Dutch.    The documentation said something about:   moment.monthsShort   MMM       moment.weekdaysShort   DD        But this isn t working...    Any idea? Hope you guys can help me out.    Regards   TK  ,Tklaversma,closed,2,2016-12-15 14:46:51,2017-02-08 05:01:13,,Language,,,0,1
10587,moment/moment,3663,moment.d.ts is not compatible with  none  module compiler option,I have web application that doesn t use any kind of modules  tsconfig.json  >  compilerOptions    module :  none    . I tried to use declaration file from package with it  but always get  error TS2304: Cannot find name  moment  .      Steps to reproduce:      create application folder   add typescript config and set  compilerOptions    module :  none     in  tsconfig.json  add moment package via npm  add  main.ts  with some  moment  code  example:  console.log moment.version      try build with tsc   error TS2304 occurred    copy moment.d.ts to application folder  try build with tsc   error TS2304 occurred    add  ///<reference path= ./moment.d.ts />   try build with tsc   error TS2304 occurred      Environment:    npm: 3.10.9  typescript: 2.1.4  moment: 2.17.1      Notes:    Declaration file from the typings works well  and moment it s the only package why I m still using typings in my project. I checked what the difference is and difference is how they export moment. Instead of  export moment  they use  declare module  moment    export moment;     ,zVolodymyr,closed,7,2016-12-15 15:15:26,2017-03-29 07:00:17,,TypeScript,,,0,1
10586,moment/moment,3664,[locale] pt  pt br: all weekdays min values with 2 characters.,@jalex79   @caio ribeiro pereira ,prodis,closed,4,2016-12-15 15:31:38,2017-03-02 09:15:33,,Pending Next Release,,,1,1
10585,moment/moment,3665,Wrong year when we get the fomat with week and the year of a date at the end of year and this date is week 1.,  Description of the Issue and Steps to Reproduce:    Wrong year when we get the fomat with week and the year of a date at the end of year and this date is week 1.    When the week and the year is called  Moment should be increment the year when the week is transformed to 53 to 1.     Please include the values of all variables used.   new Date  259200000  // returns Mon Dec 29 1969 01:00:00 GMT 0100  CET   moment  259200000 .format  W YYYY  ; //return 1 1969    It should return 1 1970        Environment:    all environnement      Fri Dec 16 2016 10:12:01 GMT 0100  CET   VM376:3 16/12/2016   10:12:01  VM376:4  60  VM376:5 Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/54.0.2840.100 Safari/537.36  VM376:6 2.17.1  ,jare-talend,closed,1,2016-12-16 09:16:56,2016-12-17 13:57:21,,,,0,1
10584,moment/moment,3666,[feature] Calendar function handles formats only arg,Found the issue ticket  3658  thought it looked like a nice place to start for my first PR on GitHub.  Made the recommended changes to overload the calendar function and added a unit test to the suite to cover my use case.,josephjaniga,open,7,2016-12-17 00:48:41,0000-00-00 00:00:00,,Needs Revision,Needs docs,Needs tests,,2.18.0,1,1
10583,moment/moment,3667,Is it possible to create class that will extend momentjs  typescript ,I m writing in Typescript and I want to create some class that will extend functionality of moment for my specific needs.    Here is my approach:         import   as moment from  moment ;  class TDate extends moment      //            However I m getting error:  Type  typeof moment  is not a constructor function type .    Is something like this possible?    My dream solution is  tdate  class extending moment that could be used like:         // extending sugar.js human input date parsing https://sugarjs.com/dates/  tdate  2 weeks from now  .isAfter  1 week from now  ; // true         https://sugarjs.com/dates/ ,pie6k,open,0,2016-12-17 16:21:25,0000-00-00 00:00:00,,TypeScript,,,0,1
10582,moment/moment,3668,Working with Julian Dates,I have implemented 3 new methods to deal with Julian Dates  =Julian Day   Time . Any Moment.js object can now be converted to Julian Dates using the  .toJD    method.    Alternatively   moment.convertToJD  any_moment_date_obj    and  moment.convertFromJD  any_Julian_Date    can also be used to convert between Julian Dates and Gregorian Dates. The argument for  moment.convertToJD  must be a Moment.js object  whereas  moment.convertFromJD  can accept any positive number.      All the methods implemented on this commit should work fine for all positive Julian Days  i.e.  all dates after BCE 4713 Jan 1st 12:00:00 UTC.  ,mairanteodoro,closed,3,2016-12-19 17:12:34,2016-12-19 17:22:48,,,,1,1
10581,moment/moment,3669,Moment creates invalid dates when using locale formatted string,[JSFiddle] https://jsfiddle.net/1s6ump7j/     Formatting a moment based on its locale and creating a moment object from the formatted one results in an invalid moment.  I would have expected locale formats to be taken into account when creating the moment. Is my assumption wrong?    Similar  perhaps related  to  3487?         console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version        Outputs    > Mon Dec 19 2016 22:26:20 GMT 0000  GMT Standard Time   > 19/12/2016  22:26:20  > 0  > Mozilla/5.0  Windows NT 10.0; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/55.0.2883.87 Safari/537.36  > 2.17.1,roxanabalag,closed,4,2016-12-19 22:37:40,2016-12-20 17:42:16,,,,0,1
10580,moment/moment,3670,Wrong week number.,  Description of the Issue and Steps to Reproduce:       js  console.log moment  2017 01 01  .startOf  week  .format  W/YYYY   ;         The expected output is either  1/2017  or  52/2016 .  The actual output is  52/2017   which is a combination of both.    Maybe the start of week is different when setting it and when calculating the week number?    I m running moment.js with TypeScript in an Angular 2 application  but I ve reproduced this issue without TypeScript too. Using Windows 10 x64 and Chrome.     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     Tue Dec 20 2016 18:38:30 GMT 0100  Mitteleurop ische Zeit   console.log  new Date   .toLocaleString     12/20/2016  6:38:30 PM  console.log   new Date   .getTimezoneOffset      60  console.log  navigator.userAgent   Mozilla/5.0  Windows NT 10.0; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/55.0.2883.87 Safari/537.36  console.log moment.version   2.17.1       ,luisaceituno,closed,2,2016-12-20 17:49:27,2016-12-21 12:50:51,,,,0,1
10579,moment/moment,3671,[locale] ca: Improved months and datetime formats,  Changed months abbreviations to the recommended ones     https://www.upf.edu/leupf/12ap1/111_3.htm .    Added articles and  de  to long form dates.    Added commas to short form dates.    Pinging previous Catalan committers @pereorga and @juanghurtado.,marcoil,closed,6,2016-12-21 14:00:13,2017-03-12 00:10:45,,Pending Next Release,,2.18.0,1,1
10578,moment/moment,3672,Firefox not handling the same moment  2016 11 06 01   that the other browser,Firefox: moment  2016 11 06 01   .format   ==  2016 11 06T01:00:00 05:00   Chrome: moment  2016 11 06 01   .format   ==   2016 11 06T01:00:00 04:00     Tested on Windows 7  with OS configured with Eastern TimeZone.,sebtardif-iso-ne,closed,4,2016-12-21 17:29:35,2016-12-21 19:36:11,,,,0,1
10577,moment/moment,3673,duration locale exists but not documented,With moment@2.17.1   duration locale  exists  [demo] https://runkit.com/585075bc6eea770014d02340/585ae9ef6966c40014536d45    but it doesn t seem to be documented. It would be useful  and I ve seen it in the wild. If it s intended to be part of the public API  can you please document it? If not  can you please say why? I need locale aware humanization of a duration  e.g. I have a value in seconds  and would like to do:       js  moment.duration duration   seconds  .locale locale .humanize true          But since it s not documented as public API I m currently faking it by generating 2 fictitious dates and using  moment from .,jmm,closed,11,2016-12-21 21:39:27,2017-12-11 06:18:49,,Documentation,Up-For-Grabs,,,0,1
10576,moment/moment,3674,import locale file too large,I use webpack bundle my project  vendor file size increase to 300KB  just by adding one line:         import  moment/locale/zh cn          but there is no other dependencies in zh cn.js.  Not only zh cn  but also other locale file lead to this problem  why?,yeluoqiuzhi,closed,6,2016-12-22 02:31:04,2017-01-09 04:01:05,,Loading,,,0,1
10575,moment/moment,3675,I want to use  moment moment xxx .format  lll   .format  ll     what should I do?,   js  moment.locale  navigator.language    navigator.browserLanguage .toLowerCase   ;  aTime = moment xxx .format  lll    moment aTime .format  ll         but not work...What should I do?,cxgreat2014,closed,2,2016-12-22 04:50:20,2016-12-31 20:06:31,,,,0,1
10574,moment/moment,3676,[misc] Style changes in ping all authors script,,Dok11,closed,2,2016-12-23 15:47:47,2017-03-02 09:20:55,,Pending Next Release,,2.18.0,1,1
10573,moment/moment,3677,[new locale] oc: Occitan language,In its lengadocian dialecte,Quent-in,open,6,2016-12-23 19:15:20,0000-00-00 00:00:00,,Needs Revision,Needs tests,,,1,1
10572,moment/moment,3678,Displayed time,The time shown on the screen is 1 hour late. I m located in Madrid  Spain. Thanks to @dnorthrupva  I corrected the error by adding   scope.date = new moment  .add 1   hour  ;  on  controller.js  but it is probably a fix. Any ideas why is this happening? ,incubik,closed,1,2016-12-23 20:48:00,2017-01-06 00:15:12,,Troubleshooting,,,0,1
10571,moment/moment,3679,Not a year but shows  a year ago ,     >_ moment  2016 02 24  .fromNow     10 months ago   >_ moment  2016 01 24  .fromNow     a year ago        ???  now is 1016/12/24   2016 01 24  from now is 11 month  why show a year ago?,cxgreat2014,closed,2,2016-12-24 02:31:40,2016-12-28 20:40:55,,,,0,1
10570,moment/moment,3680,typescript 2.1 and moment.d.ts,I m still having problems with importing moment in a project with es6 modules in typescript.    It is common that node_modules is listed in the exclude compiler options  so moment.d.ts can not be found with this configuration.    I ve found that I can get it working  when I copy moment.d.ts to @types/moment/moment.d.ts  @types is not ignored by typescript  and when I replace      export = moment;     with   declare module  moment      export = moment;        My tsconfig.json is              compileOnSave : true          compilerOptions :             noImplicitAny : true            noEmitOnError : true            removeComments : false            sourceMap : true            module :  es6             target :  es5                 exclude : [           node_modules       ]      Maybe you could consider following the latest guidelines for typescript declaration files and publish the type declarations to the npm repository @types  or definitelytyped  as they are picked up by @types   and changing the declare statement  which is in line with the way other libraries do it  e.g. jQuery ,rekna1,closed,8,2016-12-26 13:42:31,2017-01-12 14:56:53,,TypeScript,,,0,1
10569,moment/moment,3681,Issue when get timestamp from date,I founded a issue when get timestamp from date.    When pick up a date from input text  it is subtracted 1 day from the date.    I try this:    moment  17/01/1981    DD/MM/YYYY  .format  x      In chrome  v55.0.2883.95 64 bit   I got 348548400000  In Safari  v 10.0.2   I got 348544800000.  Wrong .      ,renatobezerra,closed,2,2016-12-26 21:27:38,2017-01-06 00:15:51,,Troubleshooting,,,0,1
10568,moment/moment,3682,Compressing unix Timestamp,Hey    I was wondering if there is a way to compress UNIX timestamps to  Human Readable characters.  For eg: compressing 14 000 000 000 to 14B.   So I am basically designing a timeline which displays dates from the start of the universe to the time you re reading this. Since date datatype cannot display dates at the start of the universe I am using Unix timestamps to display astronomical dates. here is a screenshot.  <img width= 1436  alt= screen shot 2016 12 26 at 6 20 07 pm  src= https://cloud.githubusercontent.com/assets/11655317/21488079/fb0297ba cb97 11e6 98d5 e996cfd4f7aa.png >  In the screenshot  as you can see  the numbers are huge and I would like to compress them. like 14 000 000 would be 14M and 13 800 000 000 would be 13.8B.  All I need to know if there is a way to customize the timestamp or an event handler in the library that d let me handle the times before displaying. By  handle   I mean that the event handler would provide me the timestamp and I could parse it as needed and then return the String which would take place of the original timestamp without disrupting the sequence of numbers.    Environment:    browser: chrome for dev   and OS: Linux based server.,aakashrathore,closed,4,2016-12-27 01:26:08,2017-01-03 03:39:11,,Troubleshooting,,,0,1
10567,moment/moment,3683,Parse Bug,moment  2010 10 201          YYYY MM DD  .isValid    return true?,liu2510865,closed,1,2016-12-27 08:56:11,2016-12-31 19:42:38,,Forgiving parsing,,,0,1
10566,moment/moment,3684,Contribution Opportunity ,Hey guys    I was looking through the issue but could not find any   beginner   or   first time contributor   labels to get started with contributing here. Could someone point me to some of those issues? I know there is a   Up for grabs   label  but wasn t sure if that is good for someone new to the repo.,tarang9211,closed,1,2016-12-27 12:10:53,2016-12-30 21:08:20,,,,0,1
10565,moment/moment,3685,convert Arabic numbers to Latin numbers  how can I do that?,I used to convert Arabic numbers to Latin numbers by doing the following        typescript        moment.updateLocale  ar   <MomentLanguage>           preparse:  str  =>                return str.replace / u200f/g     ;                      postformat:  str  =>                return str;                     ;         but now  MomentLanguage is not a module in moment  what should I do?  PS: I m using version 2.15.2,IbraheemAlSaady,closed,3,2016-12-27 15:08:30,2017-01-12 06:18:55,,,,0,1
10564,moment/moment,3686,Fixed spacing.,Silly PR  I know.,SeanSanker,closed,2,2016-12-27 16:09:04,2017-01-09 04:07:45,,,,1,1
10563,moment/moment,3687, isUtc    does not seem to be working,Please find the steps to reproduce below       javascript  var utcDate =  2016 12 28T06:40:28Z ;  moment utcDate .isUtc  ;   // returns false         Even it is not recognizing  moment  generated UTC dates as UTC  see       javascript  var utcDate = moment.utc  .format  ;  moment utcDate .isUtc  ;    // returns false         What am I missing here?,kamranahmedse,closed,1,2016-12-28 06:51:24,2016-12-28 23:07:20,,,,0,1
10562,moment/moment,3688,Add a UMD global declaration to  moment.d.ts .,This is a TS 2.0 specific construct that allows TypeScript users to consume moment as a global.    It looks like the current  .d.ts  file avoids 2.0  features  but just throwing this out there because I found [this Stack Overflow question] http://stackoverflow.com/questions/41336330/typescript how can i make an existing namespace global .    CC @RyanCavanaugh.,DanielRosenwasser,open,13,2016-12-28 07:41:50,0000-00-00 00:00:00,,Breaking change,,,1,1
10561,moment/moment,3689,How to get dates of a day within the date range,Hi all    I have following date range from 22.03.17   05.06.17 and I want to know all dates from a day for example  Wednesday .      How can I configure it out with moment.js?    Thanks    ,ghost,closed,1,2016-12-28 10:59:35,2016-12-31 19:40:35,,,,0,1
10560,moment/moment,3690,Moment included twice in webpack bundle,  Description of the Issue and Steps to Reproduce:    I m using moment and want only import one locale. I m doing this with the webpack IgnorePlugin.     new webpack.IgnorePlugin /^ . /locale /  /moment /      In my typescript file I import moment and the locales like this.       import   as moment from  moment ;  import  moment/locale/de ;       This works fine except that webpack includes moment twice due to my import of moment and a second import in the locale file. So there are two require that look like this:     require  moment      my import   require  ../moment      the import in the locale file    Webpack doesn t seem to see that it s the same module and includes it twice which is a problem since the  de  locale will only be added to the module imported in the locale file. So the moment module used everywhere else doesn t have the new locale.    I even tried to use the  new webpack.optimize.DedupePlugin    which removes the duplicate but still creates two instances of the same module. Which again creates the same problem.      Environment:    webpack 1.4.15  moment 2.17.1  typescript 2.1.4,astrebel,closed,2,2016-12-29 06:55:52,2017-02-09 02:59:59,,Loading,Troubleshooting,,,0,1
10559,moment/moment,3691,8 tests failed. create:parsing week and weekday information  2397.1  create:parsing week and weekday information  2397.2  create:parsing week and weekday information  2397.3  create:parsing week and weekday information  2397.4  create:parsing week and weekday information  2397.5  create:parsing week and weekday information  2397.6  create:parsing week and weekday information  2397.7  create:parsing week and weekday information  2397.8  ,    Client info       Date String   : Thu Dec 29 2016 10:59:17 GMT 0300  Hora oficial do Brasil   Locale String : 29/12/2016 10:59:17  Offset        : 180  User Agent    : Mozilla/5.0  Windows NT 6.1; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/56.0.2924.28 Safari/537.36  Moment Version: 2.17.1         ====        create:parsing week and weekday information  2397.1      compare: week year two digits       javascript  // Expected 2012 12 30  // Actual   Invalid date   Invalid date  ===  2012 12 30          ====        create:parsing week and weekday information  2397.2      round trip: week year two digits       javascript  // Expected 12  // Actual   Invalid date   Invalid date  ===  12          ====        create:parsing week and weekday information  2397.3      compare: week year four digits       javascript  // Expected 2012 12 30  // Actual   Invalid date   Invalid date  ===  2012 12 30          ====        create:parsing week and weekday information  2397.4      round trip: week year four digits       javascript  // Expected 2012  // Actual   Invalid date   Invalid date  ===  2012          ====        create:parsing week and weekday information  2397.5      compare: week year two digits previous year       javascript  // Expected 1999 12 26  // Actual   Invalid date   Invalid date  ===  1999 12 26          ====        create:parsing week and weekday information  2397.6      round trip: week year two digits previous year       javascript  // Expected 99  // Actual   Invalid date   Invalid date  ===  99          ====        create:parsing week and weekday information  2397.7      compare: week year four digits previous year       javascript  // Expected 1999 12 26  // Actual   Invalid date   Invalid date  ===  1999 12 26          ====        create:parsing week and weekday information  2397.8      round trip: week year four digits previous year       javascript  // Expected 1999  // Actual   Invalid date   Invalid date  ===  1999      ,joaxazevedo,closed,4,2016-12-29 13:59:54,2017-12-11 06:20:06,,Unit Test Failed,,,0,1
10558,moment/moment,3692,Thai  L  format,The Thai  L  format is currently  YYYY/MM/DD   but my l10n team is saying it should be  DD/MM/YYYY . Wikipedia[1] and unicode.org[2][3] seem to support that day month year is the de facto standard.    Happy to submit a PR  if it d be accepted  @sirn ?    [1] https://en.wikipedia.org/wiki/Date_and_time_notation_in_Thailand Date  [2] http://www.unicode.org/cldr/charts/30/verify/dates/th.html  [3] http://st.unicode.org/cldr apps/v /th/Gregorian/4af189b39e4e8ddf,nwhittaker,closed,2,2016-12-30 20:16:27,2017-01-09 06:13:03,,,,0,1
10557,moment/moment,3693,use  isFunction  insteadof  instanceof Function  ,why not use  isFunction  insteadof  instanceof Function   in https://github.com/moment/moment/blob/develop/moment.js L647 ?   I meet some problem when instanceof Function return false.  isFuntion:https://github.com/moment/moment/blob/develop/moment.js L340    thank you       ,zhaoyihong,closed,2,2016-12-31 05:56:56,2017-01-17 22:22:17,,,,0,1
10556,moment/moment,3694,Setting year and week at the same time may lead to incorrect year,  Description of the Issue and Steps to Reproduce:    This is something I noticed  which only happens on the last day of the year 2016  I pass new Date  .getTime    to the constructor to reproduce:    moment 1483173987487 .set  year:2017 week:3  .toDate    > Sun Jan 14 2018 09:46:27 GMT 0100  CET     Is this the expected result? I think it should be the 3rd week of 2017 not 2018.    The same thing happens when you do moment .. .year 2017 .week 3        Environment:    Chrome Fedora24 55.0.2883.87  64 bit         Other information that may be helpful:      The time zone setting of the machine the code is running on  GMT 1    The time and date at which the code was run  31/12/2016 9:50      console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version     Sat Dec 31 2016 09:51:32 GMT 0100  CET   VM3134:2 31.12.2016  09:51:32  VM3134:3  60  VM3134:4 Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/55.0.2883.87 Safari/537.36  VM3134:5 2.17.1         ,fkaempfer,closed,2,2016-12-31 08:52:46,2016-12-31 19:38:03,,,,0,1
10555,moment/moment,3695,[locale] th: Adjust  L  format,Adjust Thai localized short date format to read day/month/year  moment/moment 3692 .    @sirn    or  ?,nwhittaker,closed,6,2016-12-31 19:42:33,2017-03-02 09:36:25,,Language,Pending Next Release,,,1,1
10554,moment/moment,3696,Impossible to get the first day of any 2016 week with other locale than english,  Description of the Issue and Steps to Reproduce:         console.log  2016   20 ===    moment  .locale  fr  .year 2016 .week 20 .startOf  week  .format  dddd Do MMMM YYYY   ; // 2016   20 ===  lundi 11 mai 2015  console.log  2016   20 ===    moment  .locale  en  .year 2016 .week 20 .startOf  week  .format  dddd Do MMMM YYYY   ; // 2016   20 ===  Sunday 8th May 2016  console.log  2015   20 ===    moment  .locale  fr  .year 2015 .week 20 .startOf  week  .format  dddd Do MMMM YYYY   ; // 2016   20 ===  lundi 11 mai 2015         I m expecting the first line to give a date in 2016  like the second one   not 2015.  I don t know if I am using the library the wrong way or if it is a bug  but I have the same issue with every week  it looks like the 2016 year does not exist.    I also reproduced the issue with other locales like  it  or  de .      Environment:      Chrome 55 on Ubuntu 16.0.4 64 bits. I run my tests using the javascript console on my browser on https://momentjs.com    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  Mon Jan 02 2017 16:34:31 GMT 0100  CET   02/01/2017   16:34:31   60  Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/55.0.2883.87 Safari/537.36  2.17.1       ,Nicofuma,closed,12,2017-01-02 15:41:30,2017-01-04 21:59:54,,,,0,1
10553,moment/moment,3697,Correctly setting weeks when year have changed,More discussion in this issue:  https://github.com/moment/moment/issues/3696,ar2rsawseen,closed,2,2017-01-03 14:07:46,2017-01-03 14:29:16,,,,1,1
10552,moment/moment,3698,Is it possible to modify moment constructor?,I d like to modify moment constructor so it ll use [https://sugarjs.com/dates/] url  to be able to perform advanced parsing of human readable dates.    It would make possible to do something like:   moment  next friday  .isBefore  next saturday  ; // true     Parsing of input string is done like:       import SugarDate from  sugar/date ;  SugarDate.create  next friday  ; // native date object         Some  filter hook  that would be able to perform some operations on input would do the job too. eg:         moment.on  beforeCreate    input  =>      if  typeof input ===  string   return SugarDate.create input ;    return input;    ;     ,pie6k,closed,1,2017-01-03 17:11:48,2017-01-04 04:40:10,,,,0,1
10551,moment/moment,3699,Unable to Update NuGet Package,I have a web project in Visual Studio 2015 that has the Moment.js package installed. The .NET framework target is 4.5.1. When I try to update from Moment 2.3.1 to 2.17.1  I receive this error in the Package Manager Console:    > update package : Could not install package  Moment.js 2.17.1 . You are trying to install this package into a project that targets  .NETFramework Version=v4.5.1   but the package does not contain any assembly references or content files that are compatible with that framework. For   > more information  contact the package author.  > At line:1 char:1  >   update package  >                   >       CategoryInfo          : NotSpecified:  :  [Update Package]  Exception  >       FullyQualifiedErrorId : NuGetCmdletUnhandledException NuGet.PackageManagement.PowerShellCmdlets.UpdatePackageCommand      I thought maybe it was because of the .NET framework  so I switched the projects over to 4.6.1 in an attempt to get around the error temporarily  and I received the same error as above  but with Version=v.4.6.1 in the message.    I picked up Moment.js as a dependency to the bootstrap sortable NuGet package.,jdtemple,closed,17,2017-01-04 22:09:01,2017-05-13 15:58:41,,,,0,1
10550,moment/moment,3700,Fix incorrect french weekday lists,List is incorrect vs week.dow  French weeks start on Monday   Lundi   but days list was starting on Sunday   Dimanche  ,gabchang,closed,4,2017-01-05 11:30:49,2017-01-08 20:02:09,,Language,,,1,1
10549,moment/moment,3701,[misc] typescript: Add boolean to LocaleSelector variants,According to the docs  http://momentjs.com/docs/ /i18n/instance locale/  calling  .locale false   would reset the instance s locale to the global one  but the existing typings don t allow passing  false  to this function. This PR fixes this issue.,gregpabian,closed,3,2017-01-05 15:53:20,2017-03-02 09:27:33,,Pending Next Release,TypeScript,,2.18.0,1,1
10548,moment/moment,3702,Missing  weeks  option,  Description of the Issue and Steps to Reproduce:      In the moment.d.ts typings file  either the  MomentInputObject  or the   DurationInputObject  interface  I don t know which one it should be  is missing the weeks options. I.e.        interface MomentInputObject   // or DurationInputObject        ...        weeks?: number;        week?: number;        w?: number;           I would be happy to submit a pull request if someone could tell me which interface it belongs in.,battmanz,closed,1,2017-01-05 22:16:03,2017-03-11 23:31:24,,TypeScript,,,0,1
10547,moment/moment,3703,Bug .. in moment.add   function ,this image explains it     http://i.imgur.com/pBWzdBZ.png,a-eid,closed,1,2017-01-06 00:57:45,2017-01-07 19:03:15,,,,0,1
10546,moment/moment,3704,Better checks for garbage input for setters,Added a helper for checking whether an argument is numeric.  I feel as though its rather garish in implementation and would love some critiques if anyone feels this could/should be improved.    ,wi-ski,closed,23,2017-01-06 05:17:00,2017-02-19 21:25:20,,,,1,1
10545,moment/moment,3705,Long date format without meridiem  hour  minute,  Description of the Issue and Steps to Reproduce:    Is there any way to have long date format without time?     Please include the values of all variables used.   I d like to get output like the follow one s except last part  meridiem  hour  minute      js  moment  .format  LLLL  ;         For example    locale=zh hk: YYYY MMMD dddd  locale=en au: dddd  D MMMM YYYY    I can use this for Western locales  but it does not look good for Eastern locales.     js  moment  .format  dddd  LL  ;            Environment:    Any environment  ,pzheng64,closed,2,2017-01-06 14:31:47,2017-01-09 06:12:07,,,,0,1
10544,moment/moment,3706,.startOf  hour   expected result across some dst boundaries?,  Description of the Issue and Steps to Reproduce:      Just wondering if this is actually an issue that might be related to  1990 :     js  m = moment.tz  2017 04 02T01:30:00 10:30    Australia/Lord_Howe    m.format    >  2017 04 02T01:30:00 10:30   m.startOf  hour  .format         Actual       >  2017 04 02T01:30:00 11:00        Expected:        >  2017 04 02T01:00:00 11:00        Note  because of the time shift  the times progress like this in 30 minute intervals:    0100 11:00  0130 11:00  0130 10:30  0200 10:30  ...    It occurs to me that 01:30 11:00 may indeed be the start of the hour  because 01:30 10:30 is halfway between 0130 11:00 and 0200 10:30. However  this is contrary to the documentation which states that  startOf  sets all lesser units to 0.     What is expected here?      Environment:    Chrome 53.0.2785.113  64 bit  on Ubuntu 14.04      Other information that may be helpful:      The time zone setting of the machine the code is running on  MST      The time and date at which the code was run  Fri Jan 6 14:00      Other libraries in use  TypeScript  Immutable.js  etc           <script language= javascript  type= text/javascript  src= jquery.js ></script>   <script language= javascript  type= text/javascript  src= jquery.flot.js ></script>   <script language= javascript  type= text/javascript  src= ../../../projects/flot/jquery.flot.temporal.js ></script>   <script language= javascript  type= text/javascript  src= ../../../projects/git/flot/jquery.flot.temporal.js ></script>   <script language= javascript  type= text/javascript  src= jquery.flot.navigate.js ></script>   <script language= javascript  type= text/javascript  src= jquery.flot.time.js ></script>   <script language= javascript  type= text/javascript  src= jquery.flot.navigationControl.js ></script>   <script language= javascript  type= text/javascript  src= moment.js ></script>   <script language= javascript  type= text/javascript  src= moment timezone with data.js ></script>       If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version     Fri Jan 06 2017 15:03:48 GMT 0700  MST   VM1792:2 1/6/2017  3:03:48 PM  VM1792:3 420  VM1792:4 Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/53.0.2785.113 Safari/537.36  VM1792:5 2.17.1     ,colinhunt,open,1,2017-01-06 22:06:10,0000-00-00 00:00:00,,Bug,DST,,,0,1
10543,moment/moment,3707,[locale] eo: Fix grammatical errors,The Esperanto locale has various different issues regarding use of the accusative  technically n fina o  but this has no English equivalent   capitalization and use of hyphens in dates. The original author [mentions this in a comment  as well] https://github.com/moment/moment/blob/4b3fc58ddc777ec7d65fd3a85bd0ae64632e3dfe/src/locale/eo.js L4 . This PR fixes that.    @colindean Can you please verify these changes? Otherwise I can get another speaker to do so.,miestasmia,closed,2,2017-01-07 14:25:52,2017-03-02 09:31:25,,Language,Pending Next Release,,,1,1
10542,moment/moment,3708,[feature] RFC2822 parsing,I have corrected the issue with the failing test but I still have a test I am unable to perform with out some advice. The test case  RFC2822 datetime with mismatching Day  week v date   confirms the day is consistent when given as both a day of week and day of month. This is a stipulation of the RFC so needs to be correct but I cannot achieve this without using a JS Date object  unless the core team have an alternative solution.      Work in Progress   Do not Merge  Advice required. Issue  2530  ,TracyGJG,closed,7,2017-01-08 08:19:08,2017-03-12 00:14:49,,,2.18.0,1,1
10541,moment/moment,3709,Suggestion: add .middleOf,There are already .startOf and .endOf  .middleOf would be a nice addition:     JavaScript  var noon = moment  .middleOf  day  ; // Equivalent to .hour 12 .minute 0 .second 0 ;         It makes sense for .middleOf  day   and few others:       JavaScript  moment  .middleOf  year  ;    // set to July 2  non leap year  or 1  leap year   moment  .middleOf  month  ;   // => hard to compute  does it worth it?  moment  .middleOf  quarter  ;  // => not worth it  moment  .middleOf  week  ;    // wednesday  moment  .middleOf  isoWeek  ;    // wednesday  moment  .middleOf  day  ;    // 12:00:00  moment  .middleOf  date  ;     // same as  day   moment  .middleOf  hour  ;    // set to now  but with 30 mins  0 secs  and 0 ms  moment  .middleOf  minute  ;  // set to now  but with 30 seconds and 0 milliseconds  moment  .middleOf  second  ;  // impossible         This has been more or less suggested here:  1066,tkrotoff,closed,2,2017-01-09 00:52:13,2017-01-09 05:37:28,,,,0,1
10540,moment/moment,3710,[bugfix] Fixes  3632  toISOString returns null for invalid date,This pull request solves  3632 and replaces  3644 with a less invasive solution.    Basically   .toISOString    now returns null if called on an invalid date.    There was also some mad cyclomatic complexity in there that I cleaned up.,maggiepint,closed,3,2017-01-09 04:52:30,2017-03-02 09:35:14,,Enhancement,Pending Next Release,,2.18.0,1,1
10539,moment/moment,3711,Year incorrect when formatting as weeks,If I have:  moment  2016 01 01    YYYY MM DD  .format  YYYY WW  ;     I should be getting  2015 53  but get  2016 53     Likewise if I do:  moment  .startOf  month  .format  YYYY WW  ;   time of question  10 Jan 2017     I should be getting  2016 52  but get  2017 52     So the week numbers are correct  but the year is coming back incremented by 1...    Update: I ve just realised I asked a similar question here: https://github.com/moment/moment/issues/3552 where changing  YYYY  to  GGGG  solves it.,iamdriz,closed,1,2017-01-10 13:45:34,2017-01-10 15:05:30,,,,0,1
10538,moment/moment,3712,[misc] Use isFunction instead of instanceof Function,Fixes  3693     Passes tests,marwahaha,closed,2,2017-01-10 15:50:28,2017-03-02 09:39:50,,Pending Next Release,,2.18.0,1,1
10537,moment/moment,3713,Allow .diff   with limited precision,  Description of the Issue and Steps to Reproduce:      Currently  if for instance we want to diff on days level   a.diff b   days     the diff checks for 24h period.  While in and of itself it is of course a valid behavior i found it confusing  since i expected that diffing on  days level  will basically check for the date only  regardless of actual time passed.    This behavior is illustrated by this code:         console.log  no hours set  ;  var a = moment [2007  0  29] ;  var b = moment [2007  0  28] ;  console.log a.diff b   days   ; // 1    console.log  same hours set  ;  a = moment [2007  0  29  12] ;  b = moment [2007  0  28  12] ;  console.log a.diff b   days   ; // 1    console.log  more than 24h apart  ;  a = moment [2007  0  29  12] ;  b = moment [2007  0  28  10] ;  console.log a.diff b   days   ; // 1    console.log  almost 48h apart  ;  a = moment [2007  0  29  23] ;  b = moment [2007  0  28  1] ;  console.log a.diff b   days   ; // 1    console.log  less than 24h apart  ;  a = moment [2007  0  29  12] ;  b = moment [2007  0  28  14] ;  console.log a.diff b   days   ; // 0 say whaaaat ?             So all works as expected  except when there is less than 24h between compared dates it treats it as if there wasn t any days of difference  even if between two dates midnight passed.  So it isn t all that useful  since if you just want to know if something happened yesterday you still need to write some chain of methods such as:         var now = moment  ;  var orderDate = moment date ;  var daysDiff = now.startOf  day  .diff orderDate   hours  ;           Conclusion    I d like to know if that would be considered as legitimate issue and in such case i d be willing to make PR solving that   provided someone would guide me a little  since i never made any PRs to moment.js  or anything for that matter .    Cheers.,4rlekin,closed,2,2017-01-12 12:09:43,2017-01-13 23:10:20,,,,0,1
10536,moment/moment,3714,Fixed 1 month localization,,sidgoyal,closed,3,2017-01-12 21:49:50,2017-02-25 00:27:56,,,,1,1
10535,moment/moment,3715,[Enhancement] combination of format localized,It would be nice to have the possibility to combine localized format    http://momentjs.com/docs/ localized formats    for example:  be able to do something like:    moment  .format  L LT  ,Jerome2606,closed,1,2017-01-13 02:47:41,2017-01-17 02:04:13,,,,0,1
10534,moment/moment,3716,Doing a first aim at getting midnight after adding 1 day. If that tim , e is not midnight  doing a second aim at midnight.    Worked on this with @kevPo.,keithwillcode,closed,6,2017-01-13 21:35:07,2017-03-06 22:25:35,,,,1,1
10533,moment/moment,3717,Parsing a number with 7 characters using moment.ISO_8601 is returning true,Hi there     Quite simple to reproduce  parsing a number with 7 characters using moment.ISO_8601 is returning true.    Examples:     js  moment 7000000  moment.ISO_8601  true .isValid  ; // true  moment  7000000   moment.ISO_8601  true .isValid  ; // true  moment 7000000  moment.ISO_8601  false .isValid  ; // true       I run directly on the moment.js website    Version  Chrome Version 55.0.2883.95  64 bit  on OSX  ,ValterSantosMatos,closed,5,2017-01-17 11:07:02,2017-02-28 01:32:10,,Bug,,,0,1
10532,moment/moment,3718,Make code samples on momentjs.com selectable,  Description of the Issue and Steps to Reproduce:      On the website  momentjs.com  there are handy little code samples like  moment  .format  LT    that I like to select one of them quickly to paste it in my code.     But when I select it  the javascript running on the page that updates the time every second  makes you lose the selection.     [moment] https://cloud.githubusercontent.com/assets/2523987/22054742/322ca0ea dd7d 11e6 93ba 6d9479d95a3d.gif     ,laggingreflex,closed,1,2017-01-18 07:25:26,2017-01-18 11:54:35,,,,0,1
10531,moment/moment,3719,TypeScript definition file misses weekDays  localeSorted: boolean  function overloads,The current version s  moment.d.ts  file misses the above mentioned function overloads.,cervengoc,closed,6,2017-01-18 14:08:28,2017-08-16 09:17:52,,TypeScript,,,0,1
10530,moment/moment,3720,unexpected isValid   == true for date,  Description of the Issue and Steps to Reproduce:         js  var moment = require  moment  ;  var date = moment  .set   year : year   month : month   date : day   ;  date.isValid   // true          Please include the values of all variables used.       Environment:    moment@2.17.1      node  v  v6.5.0    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  > var moment = require  moment  ;  > console.log   new Date   .toString     Wed Jan 18 2017 16:01:31 GMT 0100  CET   > console.log  new Date   .toLocaleString     1/18/2017  4:01:31 PM  > console.log   new Date   .getTimezoneOffset      60  > console.log  navigator.userAgent   ReferenceError: navigator is not defined  > console.log moment.version   2.17.1          Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer.            node  e  console.log require  moment    .set   year : year   month : month   date : day   .isValid   ;   true       ,aikomastboom,closed,1,2017-01-18 15:05:26,2017-01-31 01:24:28,,,,0,1
10529,moment/moment,3721,Issue with .add x   days  ,I have a strange behavior when adding days to a moment.    Please see the code in [this Plunker] https://plnkr.co/edit/e1idiUSbDlj94gmJPHSZ   it simply adds one more day per cycle to a moment.  You can see in the console that everything goes fine until  Tue Jan 17 2017 01:00:00 GMT 0100  CET    but just after  adding one more day  the moment return to the date of  Sun Dec 04 2016 01:00:00 GMT 0100  CET  .      Environment:      Node.js 6.9.1  also seen with Chromium 55 on Ubuntu 16.04 when running the attached plunker.      Other information that may be helpful:      The time zone setting of the machine the code is running on:   Europe/Paris      The time and date at which the code was run:   2017 01 19 17:39:19  UTC 0100       Here s the environment info:     js  console.log   new Date   .toString     // Wed Jan 18 2017 17:40:54 GMT 0100  CET   console.log  new Date   .toLocaleString     // 2017 01 18 17:40:54  console.log   new Date   .getTimezoneOffset     //  60  console.log  navigator.userAgent   // ReferenceError: navigator is not defined  console.log moment.version   // 2.16.0     ,sylvainbx,closed,1,2017-01-18 16:43:12,2017-01-31 01:17:05,,,,0,1
10528,moment/moment,3722,When will strict mode become default for parsing?, Apologies if this is a duplicate issue; I searched but didn t find a similar one.       Description of the Issue and Steps to Reproduce:      The [moment js documentation] http://momentjs.com/docs/  repeatedly sings the praises of using strict mode to parse dates:    > Strict parsing is frequently the best parsing option. [Source] http://momentjs.com/docs/ /parsing/string format/     > Strict mode is the recommended mode for parsing dates. You should always use strict mode if your code base will allow it. More than half of the parser issues seen on GitHub and Stack Overflow can be fixed by strict mode. [Source] http://momentjs.com/guides/ /parsing/strict mode/     > While strict mode works better in most situations  forgiving mode can be very useful when the format of the string being passed to moment may vary. [Source] http://momentjs.com/guides/ /parsing/forgiving mode/     > When choosing between strict and forgiving mode  it is important to consider whether it is more important that dates be accurate  or that dates never display as  Invalid Date . [Source] http://momentjs.com/guides/ /parsing/forgiving mode/     The documentation also mentions that   In a later release  the parser will default to using strict mode.  [Source] http://momentjs.com/guides/ /parsing/strict mode/     I wonder whether that change in behavior is still planned  and when it might be planned for. I think it would make this library significantly easier  and less risky  to use.    The documentation does explain what the code does by default   I get that   but I use moment often and just today realized the strict parsing argument existed. Shame on me for not reading all of the docs  and shame on me for assuming that moment would not consider junk dates valid by default. But I do think the library would be more accessible if the API preferred strict parsing. The documentation makes its preference clear.    I did not expect this kind of behavior:     js  var moment = require  moment    moment  2 12231903 234905 1    MM/DD/YYYY  .isValid    => true         Is strict mode as default still a planned change? If so  and if there s something I can help out with to move moment toward this change  please let me know. I m sure it will be a fairly significant undertaking.,kevinschaul,closed,1,2017-01-18 22:38:22,2017-01-31 01:10:19,,,,0,1
10527,moment/moment,3723,Allow for escaping parsing tokens,It doesn t seem to be possible to escape the parsing tokens at http://momentjs.com/docs/ /parsing/string format/. If you have a date that is like  January 19 DD 2017   where  DD  are the literal characters  and you use the format  MMMM DD DD YYYY   it will fail  because it tries to parse the second  DD  as a day of month. It should be possible to escape it  like   D D  maybe.,rightaway,closed,0,2017-01-19 18:32:36,2017-01-19 18:33:42,,,,0,1
10526,moment/moment,3724,[locale] ru: Change first week of year to ISO,In Russia 1st week of the year is a week that contains first thursday of the year,zhkuskov,closed,17,2017-01-19 18:39:47,2017-08-06 23:10:02,,Pending Next Release,rewrite,,,1,1
10525,moment/moment,3725,Several locales are broken in locales.min.js,See lines 94 95:    https://github.com/moment/moment/blob/develop/min/locales.min.js L94 L95    Line 94 referres to  ru  locale  but it is not finished  on line 95 it continues with words from probably  sk  locale.,SDKiller,closed,3,2017-01-21 06:50:20,2017-02-20 09:41:32,,Troubleshooting,,,0,1
10524,moment/moment,3726,[locale] fa: Improve relative time for seconds,add .idea  intellijIdea workspace settings  folder to .gitignore   fix context in Farsi locale,nasserghiasi,closed,5,2017-01-22 09:57:16,2017-03-11 21:53:08,,Pending Next Release,todo,,2.18.0,1,1
10523,moment/moment,3727,Add MomentStatic type [workaround],This is useful when you want to pass around the imported moment module.    In my case I needed to add this workaround to assign  moment   required with browserify from node_modules  to the window object,Zorgatone,closed,4,2017-01-23 08:47:39,2017-02-28 01:28:14,,,,1,1
10522,moment/moment,3728,First Monday on January 1 2017 is wrong,  Description of the Issue and Steps to Reproduce:    The first Monday if the date is the first day of the month and is Sunday get the next day and not the previous Monday     js  var firstOfMonth = moment  2017 01 01  ;//the same with 2016 05 01  var firstMonday = firstOfMonth.clone  .day 1 ;//get 2017/01/02  console.log firstMonday.toDate   ;           Environment:    Chrome 55  IE 11 on Windows 8.1 64bit     Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.       Other information that may be helpful:    Timezone machine  UTC 01:00  Amsterdam  Berlino  Berna  Roma  Stoccolma  Vienna  Timezone moment  UTC 01:00  Europe/Rome  ,mpalese,closed,1,2017-01-23 09:03:24,2017-01-31 00:41:50,,,,0,1
10521,moment/moment,3729,defineLocale superseeds new properties,When attempting to create a new locale like this:            moment.defineLocale  en uk m                  parentLocale:  en                week :                    dow: 6 // Saturday is the first day of the week.                              monthsShort:  jfmamjjasond .split                ;          let date = moment  2011 02 02  ;          date.locale  en uk m  ;          console.log date.format  YYYY MMM MMMM   ;    Saturday is correctly defined as the first day of the week and the output of that console log is  2011 f February  as expected.    However  when doing this  please note: the new parentLocale is  en gb  :            moment.defineLocale  en uk m                  parentLocale:  en gb                week :                    dow: 6 // Saturday is the first day of the week.                              monthsShort:  jfmamjjasond .split                ;          let date = moment  2011 02 02  ;          date.locale  en uk m  ;          console.log date.format  YYYY MMM MMMM   ;    The first day of the week is Sunday and the console output is  2011 Feb February .      Environment:      Chrome 55 and Firefox 50 on OSX.    Machine running on GMT time zone. Using MomentJS with  React Datepicker .    I believe this issue is connected to issue  3626. That one is about  updateLocale   but this one is about  defineLocale . Perhaps it can be considered the same bug? I don t know.    Cheers   ,sentient06,closed,3,2017-01-24 11:29:34,2017-02-20 09:41:15,,Troubleshooting,,,0,1
10520,moment/moment,3730,.diff with undefined values,When using  diff  and  undefined  moment returns 0.  My assumption was it would function like  null  and return  NaN .  Is this the expected behavior?         moment  .diff null                 // => NaN  moment  .diff undefined            // => 0         This is in Chrome 55 on OSX inside of an Ember.js app  2.10 .    Environment info:       Tue Jan 24 2017 12:39:41 GMT 0800  PST   1/24/2017  12:39:41 PM  480  Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_2  AppleWebKit/537.36  KHTML  like Gecko  Chrome/55.0.2883.95 Safari/537.36  2.17.1         Thanks ,thec0keman,closed,2,2017-01-24 20:44:47,2017-01-26 18:46:06,,,,0,1
10519,moment/moment,3731,2 tests failed. diff:diff across DST  2423.17  diff:diff across DST  2423.19  ,    Client info.       Date String   : Wed Jan 25 2017 16:26:02 GMT 0600  Hora est ndar central  M xico    Locale String : 25/1/2017 16:26:02  Offset        : 360  User Agent    : Mozilla/5.0  Windows NT 6.1; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/55.0.2883.87 Safari/537.36  Moment Version: 2.17.1         ====        diff:diff across DST  2423.17      month diff across DST  lower bound       javascript  // Expected true  // Actual   false  false === true         ====        diff:diff across DST  2423.19      year diff across DST  lower bound       javascript  // Expected true  // Actual   false  false === true     ,Angelox2312,closed,1,2017-01-25 22:27:05,2017-01-31 00:37:21,,Unit Test Failed,,,0,1
10518,moment/moment,3732,duration humanize unexpected result  PT3H30M  to  4 hours ,this code     js  moment.duration  PT3H30M  .humanize  ;       outputs  4 hours  but I expect  3 hours 30 minutes .    It is a valid behavior?      some browser data       js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version               Fri Jan 27 2017 18:08:59 GMT 0200  EET   27/01/2017  18:08:59   120  Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_2  AppleWebKit/537.36  KHTML  like Gecko  Chrome/55.0.2883.95 Safari/537.36  2.17.1       ,JiLiZART,closed,1,2017-01-27 16:12:04,2017-01-31 01:07:35,,,,0,1
10517,moment/moment,3733,Consistency in locale names,This is a suggestion.     Right now locales are defined as  en    en ie    en au  ... etc..    I think it would add benefit to have consistent naming conventions on locales so that it is always structured as   en us    en ie    fr fr   fr ca  and so on. Always specifying the language country.    Thanks,slucas-nwx,closed,2,2017-01-27 17:16:02,2017-01-31 00:36:02,,,,0,1
10516,moment/moment,3734,Difference in isoWeek,Hi     Because  moment  2017/01/01  .isoWeek    returns 52 and  moment  2017/01/02  .isoWeek    returns 1  I was expected that  moment  2017/01/01  .diff moment  2017/01/02     isoWeek   will return 1 as well.    But it returns value in milliseconds.    May the difference of isoWeek can be added to the  diff  method?  This could be very handy.    Iso dates have this great advantage to start on Mondays ;        Environment:   Chrome 49 on OSX,yamsellem,closed,1,2017-01-28 09:21:44,2017-01-31 00:29:38,,,,0,1
10515,moment/moment,3735,[feature] Ignore NaN values in setters,I have issues with this approach   would like to discuss.  Primary issue is that I could not get the previous tests passing with this implementation.  Meaning  this implementation is intentionally gimped. ,wi-ski,closed,5,2017-01-29 09:02:14,2017-08-03 01:29:39,,Pending Next Release,,2.18.0,1,1
10514,moment/moment,3736,moment  .to    outputs number for seconds?,Hello  I was wondering it was possible to use  moment  .to    to return the seconds number?,ErraticFox,closed,3,2017-01-30 02:00:29,2017-02-08 03:50:20,,Troubleshooting,,,0,1
10513,moment/moment,3737,[misc] Fix formatting of changelog,,hupfis,closed,2,2017-01-30 12:39:54,2017-03-05 21:40:04,,,,1,1
10512,moment/moment,3738,[feature] Enable relative time for multiple seconds  request  2558,This PR adds an optional threshold   ss   for  a few seconds  to   d seconds . It is built so that it will never display   d seconds  UNLESS the user manually sets the  ss  threshold. Setting the  ss  threshold once will separate the default value  which is the value in the  s  threshold minus 1 .    As mentioned in  2558  there is no translation for:   d seconds . I could add this for each locale using the  seconds  word that is already present in each locale for the  s  threshold  e.g.  a few   seconds      but I don t know if this would work for all locales. So then this would require a review from a native speaker for each locale. Probably not gonna happen.     2182: I hope by not actively using this  ss  threshold by default  afaik this is backwards compatible   this PR still has a chance.    Let me know what you think : ,pndewit,closed,5,2017-01-31 11:16:51,2017-03-11 22:04:08,,Pending Next Release,todo,,2.18.0,1,1
10511,moment/moment,3739,moment inputValue .parseZone   can t get hour with offset added,Hi everybody    i need help about using the parseZone method of moment.js.  As you can see in the title  i have _moment inputValue .parseZone  _   where inputValue is something like /Date 1485974700000 0100 /.  In this case  the Hour in inputValue is 19:45  but i need to return 20:45  so i apply parseZone  : that s fine until i try to get this  updated  Hour value  because the method format  HH:mm   returns always the original hour  19:45   instead of 20:45.   How can i do to fix this and get Hour with the offset incorporated?   Thanks for helping  ,MooUser,closed,1,2017-01-31 12:12:59,2017-02-08 04:32:47,,,,0,1
10510,moment/moment,3740,Regex for YYYY using strict mode allows 1 4 chars and pads with leading zeros causing invalid date comparisons,Regex for date formats using YYYY using strict mode allows 1 4 chars and pads with leading zeros causing invalid date comparisons.     javascript  var notValid = moment  27 01 17   DD MM YYYY  true ;  notValid.isValid  ;  true         Code that causes this:  Line 47     javascript   parseTokenFourDigits = / d 1 4 /  // 0   9999            javascript  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version   Tue Jan 31 2017 09:20:27 GMT 0500  Eastern Standard Time   1/31/2017  9:20:27 AM  300  Mozilla/5.0  Windows NT 10.0; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/55.0.2883.87 Safari/537.36  2.4.0         Fix:     javascript  parseTokenFourDigits = / d 4 /        ,rickschott,closed,1,2017-01-31 14:27:26,2017-02-08 05:06:21,,,,0,1
10509,moment/moment,3741,On add one quarter or month lossing one hour,  Description of the Issue and Steps to Reproduce:    If you add 1 quarter or 1 month to your time  then you lose 1 hour.      Environment:    Mac OS   node v6.3.1  moment v2.17.1      Example:       js  var moment = require  moment  ;  console.log moment new Date  2017 03 01   .add 1   Q  .toDate   ;  console.log moment new Date  2017 03 01   .add 1   M  .toDate   ;              2017 05 31T23:00:00.000Z  2017 03 31T23:00:00.000Z         But if you use utc time then it add correctly.       js  var moment = require  moment  ;  console.log moment.utc new Date  2017 03 01   .add 1   Q  .toDate   ;  console.log moment.utc new Date  2017 03 01   .add 1   M  .toDate   ;            2017 06 01T00:00:00.000Z  2017 04 01T00:00:00.000Z         With other keys y w d it works correctly too:     js  console.log moment new Date  2017 03 01   .add 1   w  .toDate   ;  console.log moment new Date  2017 03 01   .add 1   d  .toDate   ;  console.log moment new Date  2017 03 01   .add 1   y  .toDate   ;    console.log moment.utc new Date  2017 03 01   .add 1   w  .toDate   ;  console.log moment.utc new Date  2017 03 01   .add 1   d  .toDate   ;  console.log moment.utc new Date  2017 03 01   .add 1   y  .toDate   ;            2017 03 08T00:00:00.000Z  2017 03 02T00:00:00.000Z  2018 03 01T00:00:00.000Z  2017 03 08T00:00:00.000Z  2017 03 02T00:00:00.000Z  2018 03 01T00:00:00.000Z     ,xelaz,closed,1,2017-01-31 21:44:39,2017-02-07 06:21:06,,,,0,1
10508,moment/moment,3742,Weird behavior for the hour setter at a specific date,The returned moment isn t consistent when using the hour setter at a specific date  2017 03 12 . It s impossible to set hours to  2:00 .         moment  2017 03 12  .hour 2 .toString     Sun Mar 12 2017 03:00:00 GMT 0400  // should be  Sun Mar 12 2017 02:00:00 GMT 0400   moment  2017 03 12  .hour 4 .toString     Sun Mar 12 2017 04:00:00 GMT 0400   moment  2017 03 13  .hour 2 .toString     Mon Mar 13 2017 02:00:00 GMT 0400          Environment:       Chrome 55 on Windows 10     Output:    Wed Feb 01 2017 00:24:45 GMT 0500  Est   VM5610:2 2/1/2017  12:24:45 AM  VM5610:3 300  VM5610:4 Mozilla/5.0  Windows NT 10.0; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/55.0.2883.87 Safari/537.36  VM5610:5 2.17.1,m0xx,closed,0,2017-02-01 05:26:39,2017-02-01 14:54:15,,,,0,1
10507,moment/moment,3743,utcOffset string  true  doesn t work with negative timezone offsets,The problem:       js  // Create and print a moment  works fine    new Moment  2017 01 01T00:00:00.000Z   .toISOString   //  2017 01 01T00:00:00.000Z     // Force 8 hour change  works fine    new Moment  2017 01 01T00:00:00.000Z   .utcOffset   08:00   true .toISOString   //  2016 12 31T08:00:00.000Z     // Force change the other way  broken    new Moment  2017 01 01T00:00:00.000Z   .utcOffset   08:00   true .toISOString   //  2017 01 01T00:00:00.000Z          Environment: node 7.2.1 moment@2.17.1 on Debian 8.6       js  console.log   new Date   .toString    // Wed Feb 01 2017 02:06:17 GMT 0800  PST   console.log  new Date   .toLocaleString    // 2/1/2017  2:06:17 AM  console.log   new Date   .getTimezoneOffset    // 480         ,c0d3runn3r,closed,4,2017-02-01 10:07:45,2017-02-08 04:41:53,,,,0,1
10506,moment/moment,3744,The  mometn.format  makes the incorrect date.,  Description of the Issue and Steps to Reproduce:         js   use strict ;    const moment = require  moment timezone  ;  moment.tz.setDefault  UTC  ;  moment.defaultFormat =  YYYY MM DD HH:mm:ss.SSS ;  console.log moment.tz  Etc/GMT 0  .format   ;       Result:  2017 02 01T10:38:18Z     i see this trouble also with Etc/GMT  Etc/GMT 0  but Etc/GMT 1... is working.      Environment:      Nodejs 6.9.1x64  windows 10 x 64  tz: Europe/Moscow   moment.js 2.17.1  moment timezone 0.5.11      Other information that may be helpful:         js  console.log   new Date   .toString   ; // Wed Feb 01 2017 13:50:10 GMT 0300  RTZ 2          console.log  new Date   .toLocaleString   ; // 2017 02 01 13:50:10  console.log   new Date   .getTimezoneOffset   ; //  180         ,Claud,closed,1,2017-02-01 10:55:24,2017-02-08 04:46:46,,,,0,1
10505,moment/moment,3745,Incorrecr compare date,  Description of the Issue and Steps to Reproduce:    moment  01.04.2017    YYYY MM DD  .isAfter moment  01.05.2017    YYYY MM DD     result: false  explain: 1 april 2017 year isAfter 1 may 2017 year  but  moment  10.04.2017    YYYY MM DD  .isAfter moment  01.05.2017    YYYY MM DD     result: true  explain: 10 april 2017 year isAfter 1 may 2017 year      Environment:       Chrome 56 on Windows 10       Other information that may be helpful:      The time zone setting of the machine the code is running on Ukraine    The time and date at which the code was run february 2017    Other libraries in use  TypeScript  Immutable.js  etc  no,onekosha,closed,2,2017-02-02 13:54:35,2017-02-07 05:36:57,,,,0,1
10504,moment/moment,3746,Make a CDN,Please make a CDN.  CDNJs is seems good  and there are others as well.      ,bsienn,closed,2,2017-02-03 05:51:47,2017-02-03 06:21:29,,,,0,1
10503,moment/moment,3747,[locale] it: Weekdays are now lowercase,See http://www.treccani.it/enciclopedia/uso delle maiuscole_ La grammatica italiana     > I nomi dei giorni della settimana e dei mesi vanno scritti con l iniziale minuscola  > maggio  luned   marzo  sabato.,mperrando,closed,4,2017-02-03 10:23:14,2017-03-11 22:07:16,,Pending Next Release,,2.18.0,1,1
10502,moment/moment,3748,Angular2 with Typescript AOT Rollup Error,Dear friend  I am having trouble in importing momentjs    momentjs import statement in component  import   as moment from  moment ;    and used like   formatDate date:Date  format: string       return moment date .format format ;       it works fine in Angular2 JIT Compilation while in development mode  but when I try to compile using Angular2 AOT it gives error  Cannot call a namespace   moment       please help need solution in urgent    Thanks,piyushxh,closed,6,2017-02-03 13:08:56,2017-02-09 02:57:10,,,,0,1
10501,moment/moment,3749,Question: how to disable the rounding for humanize?,    javascript  var retainValue = function  value         return value;   ;  moment.relativeTimeRounding retainValue ; // something else?    console.log moment.duration 22   hours  .humanize   ;   // got  a day   want  22 hours   console.log moment.duration 3600e3 22   milliseconds  .humanize   ;   // got  a day   want  22 hours   console.log moment.duration 3600e3 21   milliseconds  .humanize   ;   // got  21 hours   want  21 hours          More details. I show to user the difference between the dates. Result may be days  minutes or months. Should be without rounding.        javascript  moment.duration  new Date  02/01/2012 11:00       new Date  02/02/2012 9:00      milliseconds  .humanize  ;  // got  a day   want  22 hours      ,gebv,closed,1,2017-02-04 03:22:09,2017-02-07 05:40:28,,,,0,1
10500,moment/moment,3750,[new locale] kn: Kannada locale,,rajeevnaikte,closed,1,2017-02-05 07:45:33,2017-03-02 09:45:24,,Pending Next Release,,2.18.0,1,1
10499,moment/moment,3751,sBetween   is not returning true when the date is on the boundary of the inclusivity parameter,  Description of the Issue and Steps to Reproduce:      isBetween   is not returning true when the date is on the boundary of the inclusivity parameter.  For example  the example below shows that the date 02/07/2017  at midnight  should be between 02/07/2017  at midnight  and 02/08/2017  at midnight  when the inclusion parameter is  [    but isBetween   returns false.  But  if you add 1 millisecond to the date  isBetween   returns true.        js      var date = moment  02/07/2017    MM/DD/YYYY  .startOf  day  ;      var today = moment  02/06/2017    MM/DD/YYYY  .startOf  day  ;      var tomorrow = moment  02/06/2017    MM/DD/YYYY  .startOf  day  .add 1   d  ;      var dayAfterTomorrow = moment  02/06/2017    MM/DD/YYYY  .startOf  day  .add 2   d  ;            if date.isBetween tomorrow  dayAfterTomorrow   [                console.log date.format  MM/DD/YYYY HH:mm:ss:SSS       IS between      tomorrow.format  MM/DD/YYYY HH:mm:ss:SSS       and     dayAfterTomorrow.format  MM/DD/YYYY HH:mm:ss   ;        else            console.log date.format  MM/DD/YYYY HH:mm:ss:SSS       IS NOT between      tomorrow.format  MM/DD/YYYY HH:mm:ss:SSS       and     dayAfterTomorrow.format  MM/DD/YYYY HH:mm:ss:SSS   ;               date = moment  02/07/2017    MM/DD/YYYY  .startOf  day  .add 1   ms  ;        if date.isBetween tomorrow  dayAfterTomorrow   [                console.log date.format  MM/DD/YYYY HH:mm:ss:SSS       IS between      tomorrow.format  MM/DD/YYYY HH:mm:ss:SSS       and     dayAfterTomorrow.format  MM/DD/YYYY HH:mm:ss:SSS   ;        else            console.log date.format  MM/DD/YYYY HH:mm:ss:SSS       IS NOT between      tomorrow.format  MM/DD/YYYY HH:mm:ss:SSS       and     dayAfterTomorrow.format  MM/DD/YYYY HH:mm:ss:SSS   ;               // Output:      //     02/07/2017 00:00:00:000 IS NOT between 02/07/2017 00:00:00:000 and 02/08/2017 00:00:00:000      //     02/07/2017 00:00:00:001 IS between 02/07/2017 00:00:00:000 and 02/08/2017 00:00:00:000        Please include the values of all variables used.       Environment:          Chrome 55.0.2883.95  64 bit  on OSX      Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version             Mon Feb 06 2017 08:56:34 GMT 0700  MST   2/6/2017  8:56:34 AM  420  Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_3  AppleWebKit/537.36  KHTML  like Gecko  Chrome/55.0.2883.95 Safari/537.36  2.17.1          Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,jlubean,closed,1,2017-02-06 16:00:31,2017-02-07 05:31:52,,,,0,1
10498,moment/moment,3752,added uzbek latin locale,Please add this new locale  uz latn ,Rasulbeeek,closed,1,2017-02-07 12:50:51,2017-02-07 14:02:22,,,,1,1
10497,moment/moment,3753,[new locale] uz latn: Uzbek latin locale,,Rasulbeeek,closed,4,2017-02-07 14:22:48,2017-03-02 09:52:40,,Pending Next Release,,2.18.0,1,1
10496,moment/moment,3754,moment.tz.setDefault   is global and shared by all modules.,Default timezone is shared between all modules:    server.js       var moment = require  moment timezone  ;  console.log  sets timezone to Europe/Stockholm and locale to sv  ;  moment.tz.setDefault  Europe/Stockholm  ;  moment.locale  sv  ;    var moduleA = require  ./moduleA  ;  var moduleB = require  ./moduleB  ;       moduleA.js       var moment = require  moment timezone  ;    setInterval function         console.log  Moment in moduleA   moment  .format  MMMM Do YYYY  h:mm:ss a   ;     100          moduleB.js       var moment = require  moment timezone  ;    setInterval function         console.log  Moment in moduleB   moment  .format  MMMM Do YYYY  h:mm:ss a   ;     100     setInterval function         console.log  Changing timezone in moduleB  America/New_York locale en  ;    moment.tz.setDefault  America/New_York  ;    moment.locale  en  ;     3000 ;         Output after 3 seconds:          Moment in moduleA februari 8e 2017  9:09:19 am  Moment in moduleB februari 8e 2017  9:09:19 am  Moment in moduleA februari 8e 2017  9:09:19 am  Moment in moduleB februari 8e 2017  9:09:19 am  Changing timezone in moduleB  America/New_York locale en  Moment in moduleA February 8th 2017  3:09:19 am  Moment in moduleB February 8th 2017  3:09:19 am  Moment in moduleA February 8th 2017  3:09:19 am        ,jontelm,open,5,2017-02-07 17:47:32,0000-00-00 00:00:00,,Loading,,,0,1
10495,moment/moment,3755,Cannot invoke an expression whose type lacks a call signature. Type  typeof  moment   has no compatible call signatures.,i use normal  but i dont know why error    [1f15b1fb e1e4 4215 8ca5 9ef2def6e017] https://cloud.githubusercontent.com/assets/12048313/22729751/10f7b0b0 ee1f 11e6 92b3 be77b0b32a7e.png   ,lansefengxinzi,closed,3,2017-02-08 08:53:19,2017-02-09 02:55:28,,,,0,1
10494,moment/moment,3756,Probably incorrect zone parsing/display behavior,  Description of the Issue and Steps to Reproduce:      1. Set timezone to America/Los_Angeles  2. Run  moment  1938 05 28T16:00:00.000 08:00  .format     3. Incorrectly it seems  returns  1938 05 28T17:00:00 07:00       Environment:      Existing project  brand new node project  jsbin  etc.    I would expect it to return the same ISO8601 string since I m on that timezone.  The only way to fix this appears to be adding  moment timezone   which is a dep I don t need for anything else atm   and works like this:     moment  1938 05 28T16:00:00.000 08:00  .tz moment.tz.guess   .format     correctly returns:   1938 05 28T16:00:00 08:00      Why is this happening?,blackxored,closed,7,2017-02-09 21:33:16,2017-02-09 23:10:27,,,,0,1
10493,moment/moment,3757,Invalid typing export,can t use moment typings from bower or with some exotic configs because of  export = moment; .  It is usable only with  nodejs  and  require .  need to export moment typings like in [DefinitelyTyped/DefinitelyTyped/moment/moment.d.ts] https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/637e7d6df755e785387d5269cb9287cdc51b8cb7/moment/moment.d.ts     ,alexmironof,closed,1,2017-02-13 16:25:15,2017-02-14 09:42:06,,,,0,1
10492,moment/moment,3758,change moment typing declaration,fixes  3757,alexmironof,closed,1,2017-02-13 16:54:33,2017-02-14 09:39:48,,,,1,1
10491,moment/moment,3759,Duration not returning accurate number of days,I find that if I take the Difference between two dates and turn it into a Duration  it returns the correct number of years  months  hours  minutes  and seconds    but not days. For example:         var now = moment  ;  var future = moment  2017 4 17 23:18:30  ; // a future  var diff = future.diff now ;  var duration = moment.duration diff ;    var dateA = moment now .add duration._data ;  var dateB = moment now .add duration ;       In this example   dateA  returns  2 fewer days than  dateB .    > Mozilla/5.0  Macintosh; Intel Mac OS X 10.12; rv:51.0  Gecko/20100101 Firefox/51.0  > 2.17.1,hipwebdesign,closed,6,2017-02-13 19:21:08,2017-02-14 23:31:47,,Troubleshooting,,,0,1
10490,moment/moment,3760,Feature request: allow parsing 12 noon / 12 midnight and formatting 12 noon / 12 midnight,It would be really helpful to be able to have strings for midnight and noon  as people are easily confused by 12 am / pm    For reference  this time picker pedantic mode:    http://www.material ui.com/ /components/time picker      Description of the Issue and Steps to Reproduce:       let date = moment  12 noon    H:mm aa   // date set to 12 noon     let formatted = moment date .format  H:mm aa   // 12 noon           let date = moment  12 midnight    H:mm aa   // date set to 12 midnight     let formatted = moment date .format  H:mm aa   // 12 midnight      Environment:      any  ,bushmango,closed,4,2017-02-13 20:36:21,2017-05-13 16:03:14,,Enhancement,,,0,1
10489,moment/moment,3761,Option to express difference as multiple units.,Adds the option for diff to return an object containing the result over multiple units. For example:     javascript  moment [2015 8 8 5 5 5 550] .diff [2000 6 10]  all  ;  //returns  years: 15  months: 1  days: 29  hours: 5  minutes: 5  seconds: 5  milliseconds: 550        Currently using  all  as the key. Not sure if there d be a better term. ,GaleOnGitHub,closed,3,2017-02-14 08:11:26,2017-02-22 17:16:36,,,,1,1
10488,moment/moment,3762,Calling moment undefined  should not return a valid moment date,  Description of the Issue and Steps to Reproduce:      Calling moment with a single argument that is undefined returns a valid moment object with the current time. I would expect it to not silently ignore the argument passed as  undefined . For example  new Date  does return an  Invalid Date . I would expect that moment behaves similar. For example calling moment with  null  returns an  NaN  date:           node  > var moment = require  moment    > moment undefined   moment  2017 02 14T11:22:57.411    > new Date undefined   Invalid Date  > moment null   moment.invalid /  NaN  /          My particular scenario that took me quite some time to figure out looked basically like this:         node  > var moment = require  moment    > var obj =  timestamp:  2017 02 14T11:11:48.088  ;  > moment obj.timsetamp ; // Note the mistyped field name  moment  2017 02 14T11:13:48.015   // Note the that the timestamp of the moment object is set to the current time and therefore differs to the timestamp of  obj .           Environment:             node  v  v6.9.2    uname  a  Linux vagrant.development 3.2.0 121 virtual  164 Ubuntu SMP Wed Jan 11 15:43:33 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux    node  > var moment = require  moment    > console.log   new Date   .toString     Tue Feb 14 2017 11:28:12 GMT 0000  UTC   > console.log  new Date   .toLocaleString     2/14/2017  11:28:12 AM  > console.log   new Date   .getTimezoneOffset     0  > console.log  navigator.userAgent   ReferenceError: navigator is not defined     > console.log moment.version   2.17.1     ,hvoecking,closed,6,2017-02-14 11:49:18,2017-02-14 18:58:38,,,,0,1
10487,moment/moment,3763,[TypeScript]  error TS2304: Cannot find name  moment   when used with  module : none ,Typescript seems to not be able to resolve the global  moment    function when used in a non module context.    tsc version: 2.1.6  moment version: 2.17.1    Repro  assuming  tsc  is on your   PATH  :        bash    mkdir repro    cd repro    npm i moment    echo  const now = moment  ;  > test.ts    tsc   module none test.ts  test.ts 1 13 : error TS2304: Cannot find name  moment .         However  using a module type works as expected:      bash    echo  import   as moment from  moment ; const now = moment  ;  > test2.ts    tsc   module commonjs test2.js         Unfortunately  my project does not use a bundler or module system  so I m stuck with   module :  none   for now.     Is my only alternative to use something like  typings install   save   global dt moment  ?,rossipedia,open,28,2017-02-14 19:16:55,0000-00-00 00:00:00,,TypeScript,Up-For-Grabs,,,0,1
10486,moment/moment,3764, Feature request  Option to display  1 minute ago  instead of  a minute ago  ,My feature request is  when using e g  [ moment  .fromNow  ; ] https://momentjs.com/docs/ /displaying/fromnow/    instead of    a minute ago. an hour ago  a day ago  a month ago  a year ago   to show:   1 minute ago  1 hour ago  1 day ago  1 month ago  1 year ago .    I m using moment.js [in this userscript] https://greasyfork.org/en/scripts/13846 thepiratebay helper   using GreaseMonkey in Firefox   in order  among other things  to convert the torrent timestamps in HTML tables to relative format.  So  I d like to avoid having e.g. this:   [] https://cloud.githubusercontent.com/assets/723651/22947768/f1e5db80 f304 11e6 9f8d 60e03ec6ea09.jpg     I d prefer having  1 minute  and  1 hour ago .    ,darkred,closed,2,2017-02-14 20:24:57,2017-02-15 06:28:30,,,,0,1
10485,moment/moment,3765,Error in function toISOString   when 0 year,  Description of the Issue and Steps to Reproduce:      In the [Standard ECMA 262] http://www.ecma international.org/ecma 262/5.1/ sec 15.9.1.15.1  we can find condition for extended year format  before 0 or after 9999 . But in  moment.js  [realization] https://github.com/moment/moment/blob/b8a297c1f99b3918f44dd9e3d7bd59379a876ba6/moment.js L3126   condition is  0 < m.year      m.year   <= 9999 .    I think  the right condition is  0 <= m.year      m.year   <= 9999        js  var date = moment  0000 01 01T21:00:00.000Z    date.toISOString   // returns   000000 01 01T21:00:00.000Z   date.toDate  .toISOString   // returns  0000 01 01T21:00:00.000Z            ,vagsa2,closed,2,2017-02-15 10:55:46,2017-03-08 19:59:48,,Bug,,,0,1
10484,moment/moment,3766,[feature] Add support for k and kk format parsing,k and kk parsing support behaves the same as H and HH  except for the value 24 that is treated as the 0 value for the HOUR field.  I had a concern about how to treat the 25 value  since   moment  24:00    HH:mm     is valid but   moment  24:50    HH:mm     is not;   moment  25:00    kk:mm     could be valid  setting the hour field to 1   but in the end that seemed counterintuitive.    Any thoughts are welcomed.  Hope this helps.,EzequielB,closed,7,2017-02-16 01:05:26,2017-03-11 22:13:08,,Pending Next Release,,2.18.0,1,1
10483,moment/moment,3767,mogodb in not  convert  user define date  to ISO ,i am  give date and time in  var date = new Date  ;  than  store mongodb in date does not convert date iso   this problem only server site host  local server in work fine      code     date = formData.date                       //ex 2017 02 16          time = formData[ time value ]; //ex : 11:12 am          var date = new Date date         time ;       local mongo database in store  fine   date :  ISODate  2017 02 13T05:55:39.789Z      but i am host server mongo database in store not correct output  date : ISODate  2017 02 13T11:12:00.000Z      does not convert     meteor with mongo     please reply    ,anupkmourya,closed,1,2017-02-16 05:57:44,2017-02-20 09:28:30,,,,0,1
10482,moment/moment,3768,Moment.js v2.17.1 not compatible with ContentSecurityPolicy,I was using the fullcalendar plugin with momentjs in Salesforce lightning and everything was working fine. But recently Salesforce has implemented a service called LokerService which is restricting the use of  unsafe eval  and has implemented the Content Security Policy. Due to this momentjs is not working as it is not compatible with the ContentSecurityPolicy. However i was able to find that v1.7.1 is free from ContentSecurityPolicy but we cannot use Moment Timezone with that.    What is happening that when i try to get back the value from momentjs it is returning the String like     function         return zeroFill func.apply this  arguments   padded[1]  padded[2] ;    /function         return zeroFill func.apply this  arguments   padded[1]  padded[2] ;    /function         return zeroFill func.apply this  arguments   padded[1]  padded[2] ;       .    So please help me out in this.  Thank you.,akshaydhiman09,closed,1,2017-02-16 11:02:21,2017-03-02 21:17:32,,Troubleshooting,,,0,1
10481,moment/moment,3769,Can t parse 2016W53 into a date,Parsing 2015W53 works fine.  Parsing 2016W53 gives a null object.    Fiddle: http://jsfiddle.net/wajzudo8/1/    ,marcelpanse,closed,2,2017-02-17 10:50:25,2017-02-18 01:29:00,,,,0,1
10480,moment/moment,3770,Fix deprecation warning for min and max,,maciej-ka,closed,2,2017-02-17 22:27:22,2017-02-17 22:30:31,,,,1,1
10479,moment/moment,3771,Typescript   Can t use Duration as value,I feel like i m missing something very simple here  but  im trying to use  Duration  as a value  like so:         param.Type = Duration;  if  param.Type === Duration       // Do something with param            Is there a way to use Duration this way? ,aequasi,open,5,2017-02-18 00:05:47,0000-00-00 00:00:00,,TypeScript,,,0,1
10478,moment/moment,3772,Fixed a couple of typos in CONTRIBUTING.md,,JoshuaKGoldberg,closed,1,2017-02-18 07:47:44,2017-02-19 21:54:43,,,,1,1
10477,moment/moment,3773,[misc] Move travis install commands to install phase,                                 Having install commands in other phases violates the semantics of the  .travis.yml  configuration. So we have refactored them into the  install  phase.                                     Note:   This pull request was generated by an automated tool developed by [The Software REBELs] http://rebels.ece.mcgill.ca/   a.k.a.  the Software Repository Excavation and Build Engineering Labs  of McGill University  Canada. It is part of a research project by [Keheliya Gallaba] http://keheliya.github.io/  under the supervision of [Dr.Shane McIntosh] http://shanemcintosh.org . If you have any questions or feedback about this tool  please feel free to contact the author  keheliya.gallaba@mail.mcgill.ca .,keheliya,closed,3,2017-02-18 16:55:37,2017-03-11 22:15:23,,Pending Next Release,,2.18.0,1,1
10476,moment/moment,3774,diff   doesn t take days rounding into account,Hi     I found this weird behavior. I try to truncate time and use dates only to calculate difference. It looks like    startOf  day      is not properly taken into account when calculating date difference.     EDIT: I would like to calculate date difference in UTC  it looks like it translates to local time.  I m sitting in  10 timezone which makes below calculations valid in local time.    Expected behavior would be to completely ignore time when rounding is being requested.    Example and repro steps:       javascript  console.log  ======== BEGIN ===========      var date1 =  2016 11 10T16:12:17.933Z   var date2 =  2016 11 13T11:17:13.933Z     var m1 = moment date1 ;  var m2 = moment date2 ;    var diff = m2.diff m1 ;  var diffDays = moment.duration diff .asDays  ;    console.log diff   console.log diffDays     console.log  That s fine  > we take hours into account  diff is less than 3 days      m1 = moment date1 .startOf  day  ;  m2 = moment date2 .startOf  day  ;    diff = m2.diff m1 ;   diffDays = moment.duration diff .asDays  ;    console.log diff   console.log diffDays   console.log  That should be rounded to 3 days difference without hours into account  but ok...      // Let s change hours   since we round to days it should be irrelevant  date1 =  2016 11 10T10:12:17.933Z   date2 =  2016 11 13T11:17:13.933Z     m1 = moment date1 .startOf  day  ;  m2 = moment date2 .startOf  day  ;    diff = m2.diff m1 ;   diffDays = moment.duration diff .days  ;    console.log diff   console.log diffDays   console.log  Wait  what? That should be same as above as we calculate date difference only  right?      console.log  ========= END ===========       ,random82,closed,4,2017-02-19 02:34:48,2017-03-28 04:07:47,,Troubleshooting,,,0,1
10475,moment/moment,3775,v3 changes,To be:    [ ] immutability    [ ] strict parsing by default    [ ] improve silent failures  moments and durations     3704 and  3611    [ ] remove all deprecations  except maybe Date parse failover?     [ ] typescript 2.0    [ ] remove ordinalParse Lenient  in favor of dayOfMonthOrdinalParse Lenient     To discuss:    [ ] pluggable everything  format tokens/functions  parse regex/token/functions/preprocs     so different calendar systems can be implemented as a plugin    [ ] locales in a different repo    [ ] docs in same repo   docs versioning    [ ] new zone interface,ichernev,open,2,2017-02-19 21:29:37,0000-00-00 00:00:00,,,,0,1
10474,moment/moment,3776,[misc] Prefer HTTPS links when they exist,,fbonzon,closed,1,2017-02-20 01:22:08,2017-03-11 22:23:01,,Pending Next Release,,2.18.0,1,1
10473,moment/moment,3777,Add locale for Konkani  Latin script ,Create a new locale for Konkani in the Latin script  gom latn ,WikiDiscoverer,closed,2,2017-02-20 13:43:31,2017-02-20 16:19:33,,,,1,1
10472,moment/moment,3778,[new locale] gom latn: Konkani latin locale,Add a new locale for Konkani in the Latin script  gom latn ,WikiDiscoverer,closed,4,2017-02-20 18:50:37,2017-03-11 22:30:58,,Pending Next Release,todo,,2.18.0,1,1
10471,moment/moment,3779,new intro,,johnnyworker1012,closed,1,2017-02-21 05:48:00,2017-02-21 05:48:25,,,,1,1
10470,moment/moment,3780,[bugfix] Fixes  3765: Ensure year 0 is formatted with YYYY,fixes  3765 ,marwahaha,closed,2,2017-02-21 07:34:24,2017-03-11 22:40:58,,Pending Next Release,,2.18.0,1,1
10469,moment/moment,3781,isSameOrAfter gives random output when comparing moment   to moment  ,  Description    So  me and a colleague found a bug in our code which turned out to be caused by us using an undefined variable  basically  moment undefined   and then trying to compare that to a new moment instance   moment     with the method  isSameOrAfter .    So what we basically used  was this:     javascript  let isSame = moment undefined .isSameOrAfter moment   ;       Running that code once or twice is gonna return  true   but not always. Once in a while it returns  false   I guess it s because creating two instances of moment  after each other  with no time defined might create them with a few microseconds difference.    Here s a test I ran in both Node v7.1.0 on Windows 10 and in Chrome/56.0.2924.87 with Moment.js 2.17.1.     javascript  const moment = require  moment  ;    function isSameOrAfter       console.log  isSameOrAfter     for  let i = 0; i < 1000; i         let output = moment  .isSameOrAfter moment   ;    if   output        console.log output  i ;                function isSame       console.log  isSame     for  let i = 0; i < 1000; i         let output = moment  .isSame moment   ;    if   output        console.log output  i ;                function sameExactVariable       console.log  Another test comparing the same exact variable     for  let i = 0; i < 1000; i         const now = moment  ;    let output = now.isSame now ;    if   output        console.log output  i ;                isSameOrAfter  ;  isSame  ;  sameExactVariable  ;       The first two function will log  false  a few times out of 1000  and the third function won t. It only logs when it comes upon an exception.      Environment:    Tue Feb 21 2017 14:36:06 GMT 0100  W. Europe Standard Time   2017 02 21 14:36:06   60  Mozilla/5.0  Windows NT 10.0; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/56.0.2924.87 Safari/537.36  2.17.1  ,ErikMartensson,closed,4,2017-02-21 13:49:13,2017-02-22 07:20:07,,,,0,1
10468,moment/moment,3782,Dates before the institution of daylight saving time,  Description of the Issue and Steps to Reproduce:      Issue when using dates before the institution of daylight saving time.    When I set a date after 1980  for example:   moment  [1980 6 1]       ...I get the right value in my time zone  CET :    >  Tue Jul 01 1980 00:00:00 GMT 0200     But when I set a date before 1980:   moment  [1975 6 1]       ...I get the value:    >  Tue Jul 01 1975 00:00:00 GMT 0200     ...but I expected:    >  Tue Jul 01 1975 00:00:00 GMT 0100     Am I wrong?      Environment:       Chrome 56 and Firefox 51 on Windows 7 64 bit       Other information that may be helpful:      Wed Feb 22 2017 15:01:50 GMT 0100  Central Europe Standard Time   22/02/2017   15:01:50   60  Mozilla/5.0  Windows NT 6.1; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/56.0.2924.87 Safari/537.36  2.17.1  ,noopole,closed,1,2017-02-22 14:04:00,2017-02-22 14:17:45,,,,0,1
10467,moment/moment,3783,Kabyle locale,Hi   I d like to add the kabyle locale in moment. some addons for kab apps are using it.    Please  i like guidance. Is tehre any translation tool for that?    Thanks for support.,belkacem77,closed,2,2017-02-23 08:32:02,2017-03-05 05:45:40,,,,0,1
10466,moment/moment,3784,[new locale] kab: Kabyle language,Manage months and days names  long and short format  time format.... for the Kabyle locale.,belkacem77,open,3,2017-02-23 08:46:45,0000-00-00 00:00:00,,Needs Revision,,,1,1
10465,moment/moment,3785,moment.format   returning incorrect hours,  Description of the Issue and Steps to Reproduce:    I have found an issue with moment.format   function returning incorrect string as follow:   [pasted image at 2017_02_24 11_22 am] https://cloud.githubusercontent.com/assets/6027014/23282342/99682bf6 fa85 11e6 83c2 f2d297e0c0a5.png     Above test were conducted on https://momentjs.com/ with Chrome console.    Experiencing same issue with our application.  Node 6.2.2       Environment:      Chrome 56.0.2924.87 on OSX  moment 2.15.1     [image] https://cloud.githubusercontent.com/assets/6027014/23282604/d2af3836 fa86 11e6 8169 38aaa9ff9a16.png   ,hcho112,closed,3,2017-02-23 22:48:08,2017-02-23 22:53:33,,,,0,1
10464,moment/moment,3786,[feature] Add  default  locale that detects browser setting,Fixes  2621,maciejmyslinski,open,12,2017-02-24 19:25:42,0000-00-00 00:00:00,,Enhancement,Up-For-Grabs,,2.18.0,1,1
10463,moment/moment,3787,[bugfix] Fixes  3717  ensure day of year is non zero,fixes  3717    @icambron ,marwahaha,closed,5,2017-02-26 03:20:08,2017-03-02 10:02:09,,Pending Next Release,,,1,1
10462,moment/moment,3788,Timezone database error  Europe/Budapest ,  Description of the Issue and Steps to Reproduce:      I think I have just found a timezone database parse ?  error.    moment.tz  1890 01 01 00:00    Europe/Paris  .format    //  1890 01 01T00:00:00 00:09  //   OK      moment.tz  1890 01 01 00:00    Europe/Bucharest  .format    //  1890 01 01T00:00:00 01:44  //   OK      moment.tz  1890 01 01 00:00    Europe/Budapest  .format    //  1890 01 01T00:00:00 01:00   //   WRONG    // It should be  1890 01 01T00:00:00 01:16:20   or at least  01:16       From the tzdb 2016j  :       Zone NAME  GMTOFF RULES FORMAT [UNTIL]  Zone Europe/Budapest 1:16:20   LMT 1890 Oct           Environment:    Chrome 55 on Ubuntu 14.04.5 LTS  System timezone: Europe/Budapest       js  console.log   new Date   .toString    // Sun Feb 26 2017 11:19:46 GMT 0100  CET   console.log  new Date   .toLocaleString    // 2017. 02. 26. 11:19:46  console.log   new Date   .getTimezoneOffset    //  60  console.log  navigator.userAgent  // Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/55.0.2883.87 Safari/537.36  console.log moment.version  // 2.17.1       ,fzoli,closed,2,2017-02-26 10:29:06,2017-02-26 12:36:14,,,,0,1
10461,moment/moment,3789,Adding 28 days or more causes overflow when date is close to February,  Description of the Issue and Steps to Reproduce:      Adding  28 days or more  to a date in a non leap year  or >= 29 in a leap year  is causing the library to calculate remaining time wrong:    E.g.:     js  moment  2017 01 31  .add 26   days  .from moment  2017 01 31    //  in 26 days   moment  2017 01 31  .add 27   days  .from moment  2017 01 31    //  in 27 days   moment  2017 01 31  .add 28   days  .from moment  2017 01 31    //  in 30 days   moment  2017 01 31  .add 29   days  .from moment  2017 01 31    //  in 31 days   moment  2017 01 31  .add 30   days  .from moment  2017 01 31    //  in 32 days   moment  2017 01 30  .add 29   days  .from moment  2017 01 30   ; //  in 30 days           Please include the values of all variables used.       Date from:  2017 01 31       Environment:       Examples: Chrome 49 on OSX  Internet Explorer 10 on Windows 7  Node.JS 4.4.4 on Ubuntu 16.0.4       node.js v6.2.2 on Linux Mint Cinnamon 17.3       js  > moment  2017 01 31  .add 28   days  .from moment  2017 01 31      in a month   > moment.version   2.13.0            Chrome 55.0.2883.87  64 bit  on Linux Mint Cinnamon 17.3       js  > moment  2017 01 31  .add 28   days  .from moment  2017 01 31      in 30 days   > moment.version   2.17.1            Other information that may be helpful:      The time zone setting of the machine the code is running on: GMT 0300  ART     The time and date at which the code was run: Feb 26 2017 13:23:49 GMT 0300  ART     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version             Sun Feb 26 2017 13:24:25 GMT 0300  ART   2/26/2017  1:24:25 PM  180  Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/55.0.2883.87 Safari/537.36  2.17.1     ,mdumrauf,closed,6,2017-02-26 16:29:50,2017-03-22 03:39:13,,Troubleshooting,,,0,1
10460,moment/moment,3790,[locale] fr  : Better ordinal parsing and   in place of  ,Two other minor changes:      French uses curly quote         not straight quote              Align formatting  spacing  of fr ch  fr ca and fr locales code and  test code  so that the diff between them shows only actual differences  between these locales  and ease their comparison.    Ran all tests.,fbonzon,closed,9,2017-02-26 16:41:18,2017-03-12 00:19:16,,Pending Next Release,,2.18.0,1,1
10459,moment/moment,3791,Fixed word error on ko locale.,Change    to    .  There must be a space between number representation and time dependent noun.,LI-NA,closed,4,2017-02-26 23:18:34,2017-03-12 00:33:09,,Pending Next Release,todo,,2.18.0,1,1
10458,moment/moment,3792,[new locale] ar kw: Arabic  Kuwait  locale,Ar Kw Kuwait  Language Package Added .,nusretparlak,closed,4,2017-02-27 06:39:57,2017-03-11 22:58:17,,Pending Next Release,todo,,2.18.0,1,1
10457,moment/moment,3793,[misc] Change ordinalParse to dayOfMonthOrdinalParse in locales, ordinalParse  was poorly named  because  contrary to  ordinal  short which is responsible to display ordinals for many units  the former cares only about day of month parsing.    Ran  grunt .,fbonzon,closed,8,2017-02-27 08:09:11,2017-03-12 00:43:17,,Pending Next Release,todo,,2.18.0,1,1
10456,moment/moment,3794,utcOffset   invalid parsing when no leading sign,The docs for utcOffset says:    > Note that the string is required to start with the   or   character. Passing a string that does not start with   or   will be interpreted as if it were   00:00 .    However  I ve come across a counterexample:    > moment  .utcOffset  0300  .format    >  2017 02 27T09:53:40 01:00   > moment  .utcOffset   03:00  .format    >  2017 02 27T11:53:46 03:00   >     These:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version        Return:    > Mon Feb 27 2017 09:50:21 GMT 0100  Central European Standard Time   > 2/27/2017  9:50:21 AM  >  60  > Mozilla/5.0  Windows NT 10.0; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/56.0.2924.87 Safari/537.36  > 2.17.1,dafco,closed,3,2017-02-27 08:57:27,2017-03-22 03:40:46,,Documentation,,,0,1
10455,moment/moment,3795,Minimal age calculation with boundry birthday values results in unexpected behavior,   Description of the Issue and Steps to Reproduce    I want to check if a person is exaclty or over 18 years old. So I used the  diff    and  duration    functions to calculate the age of person. I wrote some tests with boundry values to test my logic. I wanted to test if I am exactly one day younger than 18 and exactly 18. So I chose two birthdays for testing  today is 27.02.2017 :      exactly 18: 27.02.1999    one day under 18: 28.02.1999        Reproduce       js  // today date is: 27.02.2017    // exactly age 18      var birthday = moment  27.02.1999    DD.MM.YYYY         age = moment.duration moment  .diff birthday  .asYears  ;          console.log age ; // output: 18.00325100985672; expected: == 18    // one day under age 18  var birthday = moment  28.02.1999    DD.MM.YYYY         age = moment.duration moment  .diff birthday  .asYears  ;            console.log age ; // output: 18.00053005036735; expected: < 18         I think the calculation is correct  because of leap years. But in terms of birthday  the person shouldn t be 18 years old. Maybe there s a other way to do it with momentjs and I m doing it wrong. If so  it would be nice to be mentioned in documentation of momentjs.          Production Code       html  <form id= newsletter form  data parsley validate=  >    <input id= birthday  type= text  class= form control  required=   data parsley minage= 18 >    <input type= submit  class= btn btn default  value= subscribe >  </form>    <script type= text/javascript >        function               window.Parsley.addValidator  minage                  validateString: function value  minAge                     var birthday = moment value   DD.MM.YYYY                         age = moment.duration moment  .diff birthday  .asYears  ;                    return  age >= minAge ;                              requirementType:  integer                messages:                    en:  You must be mature.                            ;        ;  </script>  <script type= text/javascript >        function                   newsletter form  .parsley                // field validation              .on  form:submit   function                      return false; // do not submit                ;        ;  </script>            Environment  Chrome Version 56.0.2924.87  64 bit  on Windows 7       Other information that may be helpful    Timezone of machine:   UTC 01:00  Amsterdam  Berlin  Bern  Rom  Stockholm  Wien      The time and date at which the code was run:  Mon Feb 27 2017 13:38:04 GMT 0100     Other libraries in use: jquery 3.1.1  bootstrap 3.3.7   bootstrap datepicker 1.6.4  parselyjs 2.6.2       js  console.log   new Date   .toString    // Mon Feb 27 2017 13:38:04 GMT 0100  Mitteleurop ische Zeit   console.log  new Date   .toLocaleString    // 27.2.2017  13:38:04  console.log   new Date   .getTimezoneOffset    //  60  console.log  navigator.userAgent  // Mozilla/5.0  Windows NT 6.1; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/56.0.2924.87 Safari/537.36  console.log moment.version  // 2.17.1     ,4rg0n,closed,3,2017-02-27 12:56:55,2017-03-03 15:23:45,,,,0,1
10454,moment/moment,3796,[new locale] gu: Added Gujarati Locale,Added Gujarati Locale for Indian language  Gujarati . ,Kaushik1987,open,14,2017-02-27 13:06:18,0000-00-00 00:00:00,,Needs Revision,,,1,1
10453,moment/moment,3797,Kazakh locale  kk  is not loading, moment.locale  kk    is returning   en   and relative texts are in English   e.g. displays  a day ago  instead of  1           .    Steps taken:    1. Made sure  locale/kk.js  is loaded  via browser s  Network  tool . Also  a break point in the file is reachable and stops when page is reloaded.  2. In browser s console   IntlRelativeFormat.__localeData__  looks like this:  Object  en: Object  kk: Object  kk cyrl: Object  kk cyrl kz: Object    3.  IntlRelativeFormat.__localeData__.kk  looks exactly as in the file.  4. all other  40 locales of the application work as expected.  5. Executing  moment.locale  kk   IntlRelativeFormat.__localeData__.kk   returns   kk   as expected  but application still shows English strings.,XAMeLi,closed,4,2017-02-27 13:08:53,2017-03-16 10:36:53,,Troubleshooting,,,0,1
10452,moment/moment,3798,Update ka.js,Hello     I ve corrected a small grammar error.,lashad,closed,3,2017-03-01 10:50:01,2017-03-02 10:09:22,,Needs Revision,,,1,1
10451,moment/moment,3799,[misc] Fix test broken only in March,Even if you set custom rounding threshold for days  > month  because relative  time works on durations  which computes it from two moments  if its over  a month in real terms  1st Feb to 2nd March  it will be shown as a month no  matter the thres. It might be considered a bug  but for now it s a feature.    TL;DR setting custom threshold for days >month above 28 days will be wrong in March  and setting it above 30 will be wrong half the time : ,ichernev,closed,1,2017-03-02 08:24:53,2017-03-02 08:30:05,,Pending Next Release,,2.18.0,1,1
10450,moment/moment,3800,[locale] ka: Improved past relative time,Hello     Small grammar error fix.,lashad,closed,8,2017-03-02 08:38:40,2017-03-12 00:22:41,,Pending Next Release,,2.18.0,1,1
10449,moment/moment,3801,1 test failed. relative time:custom rounding  2721.3  ,    Client info       Date String   : Thu Mar 02 2017 13:27:06 GMT 0100  CET   Locale String : 3/2/2017  1:27:06 PM  Offset        :  60  User Agent    : Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Ubuntu Chromium/55.0.2883.87 Chrome/55.0.2883.87 Safari/537.36  Moment Version: 2.17.1         ====        relative time:custom rounding  2721.3      Round down towards the nearest day       javascript  // Expected in 30 days  // Actual   in a month   in a month  ===  in 30 days      ,Ehrs,open,2,2017-03-02 12:29:08,0000-00-00 00:00:00,,Unit Test Failed,,,0,1
10448,moment/moment,3802,How to calculate user s current time zone in a format like America/Chicago etc depending on where user is located?,My app uses Angular 2 for front end and Node as backend. I need to calculate the current timezone on Angular 2 front end based on user s location  browser/OS etc  and send it as part of HTTP call as part of query string. The calculated timezone should be of the string format:  America/Chicago  but ofcourse depending on user s location. I heard I could use Moment for this. If yes  how can I use moment to calculate timezone for the user s current location in the string format mentioned above? ,singhrasster,closed,2,2017-03-03 01:22:56,2017-03-04 00:58:34,,,,0,1
10447,moment/moment,3803,German short months do not follow CLDR,Looking at https://github.com/moment/moment/blob/develop/locale/de.js it has   monthsShort :  Jan.Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez. .split          Not exactly the same as spec ed in CLDR  CLDR:   <monthWidth type= abbreviated >    <month type= 1 >Jan.</month>    <month type= 2 >Feb.</month>    <month type= 3 >M rz</month>    <month type= 4 >Apr.</month>    <month type= 5 >Mai</month>    <month type= 6 >Juni</month>    <month type= 7 >Juli</month>    <month type= 8 >Aug.</month>    <month type= 9 >Sep.</month>    <month type= 10 >Okt.</month>    <month type= 11 >Nov.</month>    <month type= 12 >Dez.</month>    </monthWidth>   Isn t moment suppose to follow the CLDR?  ,fheidrich,closed,9,2017-03-03 06:12:49,2017-03-16 10:35:03,,Language,,,0,1
10446,moment/moment,3804,1 test failed. relative time:custom rounding  2721.3  ,    Client info       Date String   : Fri Mar 03 2017 10:31:40 GMT 0800  PST   Locale String : 3/3/2017  10:31:40 AM  Offset        : 480  User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_3  AppleWebKit/602.4.8  KHTML  like Gecko  Version/10.0.3 Safari/602.4.8  Moment Version: 2.17.1         ====        relative time:custom rounding  2721.3      Round down towards the nearest day       javascript  // Expected in 30 days  // Actual   in a month   in a month  ===  in 30 days      ,benblue,closed,2,2017-03-03 18:33:57,2017-03-09 01:45:34,,Unit Test Failed,,,0,1
10445,moment/moment,3805,localeData  .months   or weekdays   throws exception or undefined in 14 locales,Previously reported [in this issue] https://github.com/moment/moment/issues/3629 issuecomment 280753639  but they re two separate issues.     localeData  .monthsShort    appears to be broken for:       es      es do      nl       nl be      fy     Both  m  and  format  are undefined when getting the locale data:             monthsShort : function  m  format             if  / MMM /.test format                  return monthsShort[m.month  ];            else                return monthsShortDot[m.month  ];                       ,timfish,closed,1,2017-03-04 15:05:48,2017-03-11 23:20:52,,Bug,,,0,1
10444,moment/moment,3806,[bugfix] Fixes  3805  fix locale month getters for standalone/format cases,Should fix issue  3805    https://runkit.com/581ddb1783dafc001466d8e6/58bac4ef6fc4fc0014cc5b30/branches/master,timfish,closed,8,2017-03-04 15:07:41,2017-03-11 23:20:53,,Pending Next Release,,2.18.0,1,1
10443,moment/moment,3807,Implement timezone interface  redux ,This is a rebased version of  3134. I haven t done anything other than remove conflicts and fix tests.    See https://github.com/moment/moment rfcs/pull/1,icambron,closed,2,2017-03-05 03:52:31,2017-08-03 08:02:30,,,,1,1
10442,moment/moment,3808,moment.d.ts: export as namespace moment;,It would be nice if you included  export as namespace moment;  into  moment.d.ts  to allow for consuming the moment declarations without ES6 modules.,czb,open,6,2017-03-05 11:56:52,0000-00-00 00:00:00,,Breaking change,TypeScript,,,0,1
10441,moment/moment,3809,Cannot parse valid ISO 8601 date with a leap second,  Description of the Issue and Steps to Reproduce:         js  moment  2016 12 31T23:59:60Z    // moment.invalid /  2016 12 31T23:59:60Z  /     moment  2016 12 31T23:59:60Z    YYYY MM DDTHH:mm:ssZ    // moment.invalid /  2016 12 31T23:59:60Z  /          This should be parsed correctly since this is a valid [ISO 8601] https://en.wikipedia.org/wiki/ISO_8601 Times  date with a [leap second] https://en.wikipedia.org/wiki/Leap_second .      Environment:      Node.js v6.10.0  Moment v2.17.1      References:      ISO 8601:2004[E] section 2.2.2 leap second,GeorgeSapkin,closed,3,2017-03-06 12:17:26,2017-03-12 19:24:14,,,,0,1
10440,moment/moment,3810,fromNow reports wrong duration,Running this in electron/chromium:       js  moment  .startOf  day  .add 27   days  .fromNow true  // a month  moment  .startOf  day  .add 26   days  .fromNow true  // 25 days         Really do not understand how s adding 27 days to  March  6  makes it  a month . Less than a month  precisely 27 days from now on.    Something is fishy in there.,pronebird,closed,2,2017-03-06 17:47:56,2017-03-06 18:05:01,,,,0,1
10439,moment/moment,3811,1 January,Hello  when trying to get a date  it returns a different year depending on the format.   [screenshot_1632] https://cloud.githubusercontent.com/assets/14341571/23625237/4af2f3d2 02ca 11e7 9a9e 63e0b1abd554.png   ,alkoval,closed,2,2017-03-06 19:09:51,2017-03-08 19:53:26,,,,0,1
10438,moment/moment,3812,[misc] typescript: Minor fixes,  The first argument in the function in  CalendarSpecVal  should match the first argument in  moment  .calendar ..  .      The MomentCreationData now matches the actual inputs given to the moment function.      Spelling error with upper/lowercase in isUtcOffset. ,webbiesdk,closed,1,2017-03-06 19:57:21,2017-03-11 23:44:49,,Pending Next Release,,2.18.0,1,1
10437,moment/moment,3813,Added de_CH  German Switzerland ,Follows official rules published here: https://www.bk.admin.ch/dokumentation/sprachen/04915/05016/index.html?lang=de ,sschueller,closed,1,2017-03-07 08:03:47,2017-03-09 09:59:36,,,,1,1
10436,moment/moment,3814,[misc] typescript: Moment interface now extends Object to inherit toString  ,Added Object inheritance to moment interface in moment.d.ts file to support native Object functions on the moment object,dimkinv,closed,3,2017-03-07 11:59:39,2017-03-11 23:57:30,,Pending Next Release,,2.18.0,1,1
10435,moment/moment,3815,[misc] typescrpt: Fixes  3702  add week in duration input spec,Fixes  3702     This bug was shadowed by a weird Typing bug:    When you initialize the moment.duration object   DurationInputArg1  could be a  Duration  object. Since the  Duration  object has a  weeks  attribute  more precisely  a method   the type  weeks  is allowed within the constructor. This should not happen  i.e. Duration objects should only be allowed if they are full Duration objects .,marwahaha,closed,1,2017-03-08 08:24:42,2017-03-11 23:31:24,,Pending Next Release,,2.18.0,1,1
10434,moment/moment,3816,1 test failed. relative time:custom rounding  2721.3  ,    Client info       Date String   : Wed Mar 08 2017 09:24:46 GMT 0100  V steuropa  normaltid   Locale String : 2017 03 08 09:24:46  Offset        :  60  User Agent    : Mozilla/5.0  Windows NT 10.0; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/56.0.2924.87 Safari/537.36  Moment Version: 2.17.1         ====        relative time:custom rounding  2721.3      Round down towards the nearest day       javascript  // Expected in 30 days  // Actual   in a month   in a month  ===  in 30 days      ,Rozhna,closed,1,2017-03-08 08:26:06,2017-03-09 01:45:43,,Unit Test Failed,,,0,1
10433,moment/moment,3817,[misc] Don t enumerate momentProperties with  in ,Because of the way many polyfill libraries modify Array.prototype  without Object.defineProperty   enumerating momentProperties with for...in is unsafe.    This is a near zero cost change that makes this enumeration safe.,billschaller,closed,5,2017-03-08 19:04:44,2017-03-11 23:37:18,,Pending Next Release,,2.18.0,1,1
10432,moment/moment,3818,1 test failed. relative time:custom rounding  2721.3  ,    Client info       Date String   : Thu Mar 09 2017 10:49:01 GMT 1300  NZDT   Locale String : 09/03/2017  10:49:01  Offset        :  780  User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_2  AppleWebKit/537.36  KHTML  like Gecko  Chrome/56.0.2924.87 Safari/537.36  Moment Version: 2.17.1         ====        relative time:custom rounding  2721.3      Round down towards the nearest day       javascript  // Expected in 30 days  // Actual   in a month   in a month  ===  in 30 days      ,aaronddickson,closed,1,2017-03-08 21:49:42,2017-03-09 01:45:54,,Unit Test Failed,,,0,1
10431,moment/moment,3819,[new locale] de_ch: German  Switzerland  locale,Should be correct now with test.,sschueller,closed,2,2017-03-09 10:37:44,2017-03-12 00:30:30,,Pending Next Release,,2.18.0,1,1
10430,moment/moment,3820,endOf  day   on a Sunday date changes the timezone?,  Description of the Issue and Steps to Reproduce:     endOf  day    on a Sunday date changes the timezone?         var date = new Date  Sat Mar 25 2017 00:00:00 GMT 0100  CET   ;  moment date .endOf  day  .toDate     > Sat Mar 25 2017 23:59:59 GMT 0100  CET     var date = new Date  Sun Mar 26 2017 00:00:00 GMT 0100  CET   ;  moment date .endOf  day  .toDate     > Sun Mar 26 2017 23:59:59 GMT 0200  CET          GMT 0200 ??  ,swapkids,closed,1,2017-03-10 14:01:09,2017-03-12 13:49:46,,,,0,1
10429,moment/moment,3821,StartOf/EndOf on week leapyear is incorrect,  Description of the Issue and Steps to Reproduce:    I ve been stuck on an issue all day and just now figured out why it reacted this way.  For some reason when .startOf   is called with  week  or  isoWeek  as parameter  it works perfectly fine with non leap years. With leapyears however  it skips the first week and goes right to the second.     What it should be    moment  .week 1 .year 2020 .startOf  isoWeek  .format  DD/MM/YYYY      moment  .week 1 .year 2020 .endOf  isoWeek  .format  DD/MM/YYYY     30/12/2019  05/01/2020     What it results in however   06/01/2020  12/01/2020      The same is true for startOf  week    it doesn t give the corresponding week when it comes to leapyears  even though it counts the correct amount of weeks.    So far this happens on every leapyear I ve tested  2020  2016  2012 etc.   while the non leaps work fine  2019  2021  2018  2017 etc. .      Environment:    I use Google Chrome  beta  on Apricity OS  the same behaviour appears on Firefox with Ubuntu. A JSFiddle does the same  https://jsfiddle.net/pg1uvtw1/ .  I noticed this in a VueJS project  by using the vue moment library. However this is a MomentJS issue  JSFiddle uses version 2.17.1.        Other information that may be helpful:    The time zone I m on is CET Brussels  Belgium     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version        Output:  Fri Mar 10 2017 16:56:58 GMT 0100  CET   10/03/2017  16:56:58   60  Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/57.0.2987.54 Safari/537.36  2.17.1,BramVer,closed,2,2017-03-10 16:04:13,2017-03-12 13:47:25,,,,0,1
10428,moment/moment,3822,moment.toDate documentation outdated,  Description of the Issue and Steps to Reproduce:      Moment documentation currently indicates toDate returns a reference to the wrapped date object  and any changes to underlying date obj will be passed through  https://momentjs.com/docs/ /displaying/as javascript date/    However  in code  toDate now returns a copy of date as per  https://github.com/moment/moment/commit/b4b4efec9622bfb69eae49fd350fe6f19c31f897    Can you clarify which one should be the expected behavior?    Thanks,prndP,closed,3,2017-03-10 19:08:54,2017-03-12 19:10:07,,,,0,1
10427,moment/moment,3823,1 test failed. relative time:custom rounding  2721.3  ,    Client info       Date String   : Fri Mar 10 2017 16:15:34 GMT 0500  Eastern Standard Time   Locale String : 3/10/2017  4:15:34 PM  Offset        : 300  User Agent    : Mozilla/5.0  Windows NT 10.0; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/56.0.2924.87 Safari/537.36  Moment Version: 2.17.1         ====        relative time:custom rounding  2721.3      Round down towards the nearest day       javascript  // Expected in 30 days  // Actual   in a month   in a month  ===  in 30 days      ,jdforsythe,closed,1,2017-03-10 21:15:48,2017-03-12 13:34:44,,,,0,1
10426,moment/moment,3824,React/Redux would throw A state mutation was detected,  Description of the Issue and Steps to Reproduce:      When assigning moment   to a state the second time  first the the stateVariable is undefined   react/redux would complain that     >  Invariant Violation: A state mutation was detected between dispatches  in the path  stateVariable.momentVariable._locale._longDateFormat.l . This may cause incorrect behavior.  http://redux.js.org/docs/Troubleshooting.html never mutate reducer arguments     Where state is something like              stateVariable:            momentVariable:                     I guess this exception is thrown by  develepoment time  redux immutable state invariant.     Please include the values of all variables used.       Environment:    TypeScript 2.2  React 15.4.2  Redux 3.6.0  redux immutable state invariant 1.2.4  Webpack 2.2.1   Windows 10  Chrome 56  moment 2.17.1,MihaMarkic,closed,3,2017-03-11 08:21:32,2017-03-12 13:33:59,,,,0,1
10425,moment/moment,3825,Problem with FireFox,Hi    I Have a problem with firefox   the time that is display in firefox is wrong   but it s correct in other browsers .  code :  var c = moment.tz  1488791859000   Asia/Tehran  .format  HH:mm  ;    I want to display date time in given locale format   asia/tehran  ,raminahmadi1986,closed,1,2017-03-11 08:37:04,2017-03-12 13:19:08,,,,0,1
10424,moment/moment,3826,Contributor Guidance   Setting up development environment,  Issue:    The procedure given in the guidance is either missing a step or prerequisite actions. I followed the instructions precisely but was presented with an incomplete build.     I have tried referencing    node_modules    in my path environment variable but it does not resolve the issue.      Environment:    Windows 10 Pro  Node 7.5  NPM 4.1.2       Output provided:         Deprecation warning: testing deprecation  Arguments:  Error      at C: Users tracy Documents Aptana Studio 3 Workspace moment build umd test moment deprecate.js:346:98      at Object.<anonymous>  C: Users tracy Documents Aptana Studio 3 Workspace moment build umd test moment deprecate.js:375:9       at Test.run  C: Users tracy Documents Aptana Studio 3 Workspace moment node_modules qunitjs qunit qunit.js:136:18       at C: Users tracy Documents Aptana Studio 3 Workspace moment node_modules qunitjs qunit qunit.js:279:10      at process  C: Users tracy Documents Aptana Studio 3 Workspace moment node_modules qunitjs qunit qunit.js:1277:24       at Timeout._onTimeout  C: Users tracy Documents Aptana Studio 3 Workspace moment node_modules qunitjs qunit qunit.js:383:5       at ontimeout  timers.js:365:14       at tryOnTimeout  timers.js:237:5       at Timer.listOnTimeout  timers.js:207:5       Errors:    Module: relative time Test: custom rounding  Round down towards the nearest day      at Object.<anonymous>  C: Users tracy Documents Aptana Studio 3 Workspace moment build umd test moment relative_time.js:438:16       at Test.run  C: Users tracy Documents Aptana Studio 3 Workspace moment node_modules qunitjs qunit qunit.js:136:18       at C: Users tracy Documents Aptana Studio 3 Workspace moment node_modules qunitjs qunit qunit.js:279:10      at process  C: Users tracy Documents Aptana Studio 3 Workspace moment node_modules qunitjs qunit qunit.js:1277:24       at Timeout._onTimeout  C: Users tracy Documents Aptana Studio 3 Workspace moment node_modules qunitjs qunit qunit.js:383:5       at ontimeout  timers.js:365:14       at tryOnTimeout  timers.js:237:5   Actual value:  in a month  Expected value:  in 30 days    Global summary:                                                                Files   Tests   Assertions   Failed   Passed   Runtime                                                                  1       2781    114093       1        114092   18405                                                                  Warning: 1 tests failed Used   force  continuing.    Running  exec:typescript test   exec  task  >>  node_modules  is not recognized as an internal or external command   >> operable program or batch file.  >> Exited with code: 1.  >> Error executing child process: Error: Command failed: node_modules/.bin/tsc   project typing tests  >>  node_modules  is not recognized as an internal or external command   >> operable program or batch file.  Warning: Task  exec:typescript test  failed. Used   force  continuing.     ,TracyGJG,closed,9,2017-03-12 15:14:25,2017-03-16 10:32:22,,,,0,1
10423,moment/moment,3827,How to set dp max= Today s Date/current Date,  Description of the Issue and Steps to Reproduce:    I want to set max date of calendar to current date so   user can t pick any future date,sukheja-varun,closed,1,2017-03-13 00:10:31,2017-03-13 05:13:08,,,,0,1
10422,moment/moment,3828,Simplify Meteor Readme,The Meteor readme needn t be an ad for Meteor.,icambron,closed,0,2017-03-13 07:01:29,2017-03-17 16:14:41,,,,1,1
10421,moment/moment,3829,[locale] de  de at  de ch: Improve month abbreviations  fixes  3803   3838,,Seldaek,closed,14,2017-03-13 16:51:35,2017-08-06 23:14:38,,Pending Next Release,,2.19.0,1,1
10420,moment/moment,3830, M  format accepts  01  as valid month in strict mode,  Issue:      Parsing date string in a   strict mode   accepts two digit months and days  when just  M  or  D  format is specified. Other way around  when  MM  format is specified and one digit month is provided parsing fails  as expected.    Why does  M / D  formats accept  01  as valid moth/day respectively?       Environment:    Tested in Chrome 56  moment.js 2.17.1       js  moment  1/09/2017    MM/D/YYYY   true .isValid    // false  moment  01/09/2017    M/D/YYYY   true .isValid    // true     ,jasomimo,open,8,2017-03-13 20:12:11,0000-00-00 00:00:00,,Documentation,Up-For-Grabs,,,0,1
10419,moment/moment,3831,Parse strict with  ignore  characters?,Is it possible to tell the strict parser to ignore certain characters by specifying an  ignore  placeholder in the format string?    This would allow something like this to work:        moment  Feb 27   Mar 12  2017    MMM D _ _ _ YYYY   true ;    If it is not currently possible  could it be added?,glittle,closed,1,2017-03-13 22:57:20,2017-03-14 02:31:39,,,,0,1
10418,moment/moment,3832,1 test failed. relative time:custom rounding  2721.3  ,    Client info       Date String   : Tue Mar 14 2017 01:23:36 GMT 0400  EDT   Locale String : 3/14/2017  1:23:36 AM  Offset        : 240  User Agent    : Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/58.0.3013.3 Safari/537.36  Moment Version: 2.17.1         ====        relative time:custom rounding  2721.3      Round down towards the nearest day       javascript  // Expected in 30 days  // Actual   in a month   in a month  ===  in 30 days      ,verzil,closed,1,2017-03-14 05:24:22,2017-03-16 01:26:06,,,,0,1
10417,moment/moment,3833,Kannada  localization month abbreviations are not correct,  Description of the Issue and Steps to Reproduce:       Please include the values of all variables used.       Environment:       Examples: Chrome 49 on OSX  Internet Explorer 10 on Windows 7  Node.JS 4.4.4 on Ubuntu 16.0.4      Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.       Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version           Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,mohan-mu,closed,0,2017-03-14 07:43:36,2017-03-14 08:39:27,,,,0,1
10416,moment/moment,3834,[locale] kn: Improve month abbreviations  fixes   3833,,mohan-mu,closed,5,2017-03-14 08:31:12,2017-08-22 17:40:36,,Needs tests,,,1,1
10415,moment/moment,3835,IE9 wrong date from ISO8601,I created a fiddle to show the issue : https://jsfiddle.net/vatvat99/dbj54fjt/6/    I create a moment from an ISO8601 string :  2017 03 16T00:00:00 0100     On chrome  the output is :        Thu Mar 16 2017 00:00:00 GMT 0100         On Internet Explorer 9 :        Wed Mar 15 2017 16:00:00 GMT 0700         As you can see the day is not the same between those two browsers.  Any idea on how to solve this problem ?,Vatvat99,closed,1,2017-03-14 09:38:17,2017-03-14 09:48:53,,,,0,1
10414,moment/moment,3836,Issue with moment datetime in mozilla,I have an issue with moment dates  it happens in Mozilla. I am using chrome and the issue is not getting in Chrome.     var time= 2017 03 01T13:31:00 ;       var hours = moment new Date time    dddd  MMMM Do YYYY  HH:mm:ss a  .get  hour  ;          var minutes = moment new Date time    dddd  MMMM Do YYYY  HH:mm:ss a  .get  minute  ;  alert hours  :  minutes     The alert returns 13:31 in Mozilla and 01:31 in Chrome  I want the Chrome version of the time and when using in Mozilla it will increment the day by 1. So that I get a future date tomorrow .    I am including the JsFiddle.  https://jsfiddle.net/jayachandranr/p7h0wunt/      ,Jaaichandran,closed,1,2017-03-14 11:18:55,2017-03-14 18:46:21,,,,0,1
10413,moment/moment,3837,moment.d.ts: Exporting moment as default export,Default exporting moment as default export instead of export = moment in the typings file.  I don t know the implications for people using older typescript versions. But now as typescript 2.x has been stable for quite a while  I suppose this should be the way to do it.     As requested in  2608   3476   3616 ,dfahlander,open,12,2017-03-15 00:05:42,0000-00-00 00:00:00,,Breaking change,Discussion,,,1,1
10412,moment/moment,3838,Some date/time string are not formatted according to CLDR,  Some date/time string are not formatted according to CLDR http://unicode.org/Public/cldr/30.0.3/       According to German CLDR definition  common/main/de.xml    the date formatting  20. Febr. 2017  is incorrect  the abbreviated text for February in CLDR is  Feb   and applying follow the format    <dateFormatItem id= GyMMMd >d. MMM U</dateFormatItem>    it should be  20. Feb. 2017 .   ,jha-nishant,closed,2,2017-03-15 06:09:10,2017-03-16 10:35:51,,,,0,1
10411,moment/moment,3839,[locale] ko: Update ordinal format,almost copied from zh cn.js,FourwingsY,closed,9,2017-03-15 10:12:17,2017-08-09 12:04:19,,Pending Next Release,,2.19.0,1,1
10410,moment/moment,3840,[misc] Use npm to run typescript tests  fixes  3826,fixes https://github.com/moment/moment/issues/3826    I d love for you to try this  clone this  and see if  grunt  works  @TracyGJG     @icambron thoughts? I dont think it adds much time to the tests. ,marwahaha,closed,3,2017-03-15 23:25:52,2017-03-18 19:34:40,,,,1,1
10409,moment/moment,3841,1 test failed. relative time:custom rounding  2721.3  ,    Client info       Date String   : Thu Mar 16 2017 14:25:06 GMT 0900             Locale String : 2017. 3. 16.    2:25:06  Offset        :  540  User Agent    : Mozilla/5.0  Windows NT 10.0; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/57.0.2987.98 Safari/537.36  Moment Version: 2.17.1         ====        relative time:custom rounding  2721.3      Round down towards the nearest day       javascript  // Expected in 30 days  // Actual   in a month   in a month  ===  in 30 days      ,bbangkwan,closed,1,2017-03-16 05:25:44,2017-03-16 05:30:28,,,,0,1
10408,moment/moment,3842, Y  format returns <4 digits for years in range [ 999 999],  Description of the Issue and Steps to Reproduce:      If the year component of a date is in the range  999 to  999  the  Y  formatting option drops leading zeroes.     This MAY be deliberate  but the documentation of the  Y  token on momen format says:     This complies with the ISO 8601 standard for dates past the year 9999     It does work correctly for years >= 10000  includes mandatory      I guess the standard should be adhered to for year values between  999 and  999. ISO 8601 prescribes a   minimum of   four digits in the year part.    https://en.wikipedia.org/wiki/ISO_8601 Years    Example: expected results of the  Y  token for different year values  value  > formatted value      10000  >  10000   1234  >  1234   999  >    0999     2  >    0002    0  >   0000    123  >   0123    999  >   0999    1234  > 1234  9999  > 9999  10000  >  10000    Those marked bold are not working like this at the moment  no leading zeroes added  to make the year part contain at least four characters.    If  for some reason  this behavior is not desired  then it would be great to add another year token which is fully ISO 8601 compliant.  ,balagge,open,5,2017-03-17 18:52:03,0000-00-00 00:00:00,,Breaking change,,,0,1
10407,moment/moment,3843,Daylight Saving Time DST  problem,Due to DST the hour change in my country  Cuba  from GMT  5  to GMT  4 last saturday  March 11    sunday March 12    https://www.timeanddate.com/time/dst/2017.html      But if I execute in Chrome  Console  the following commads the current week is not end at saturday as I expect it    Previous week  is OK   > moment  .add  1   week  .startOf  week    Moment  _isAMomentObject: true  _isUTC: false  _pf: Object  _locale: Locale  _d: Sun Mar 05 2017 00:00:00 GMT 0500  CST     >moment  .add  1   week  .endOf  week    Moment  _isAMomentObject: true  _isUTC: false  _pf: Object  _locale: Locale  _d: Sat Mar 11 2017 23:59:59 GMT 0500  CST           Current Week    Problem       > moment  .startOf  week    Moment  _isAMomentObject: true  _isUTC: false  _pf: Object  _locale: Locale  _d: Sun Mar 12 2017 01:00:00 GMT 0400  CDT     > moment  .endOf  week    Moment  _isAMomentObject: true  _isUTC: false  _pf: Object  _locale: Locale  _d: Sun Mar 19 2017 00:59:59 GMT 0400  CDT       Next Week  OK   > moment  .add 1   week  .startOf  week    Moment  _isAMomentObject: true  _isUTC: false  _pf: Object  _locale: Locale  _d: Sun Mar 19 2017 00:00:00 GMT 0400  CDT     > moment  .add 1   week  .endOf  week    Moment  _isAMomentObject: true  _isUTC: false  _pf: Object  _locale: Locale  _d: Sat Mar 25 2017 23:59:59 GMT 0400  CDT       the problem is just on this week the DST apply    Other information    >console.log   new Date   .toString     Fri Mar 17 2017 19:35:32 GMT 0400  CDT     > console.log  new Date   .toLocaleString     3/17/2017  7:36:00 PM    > console.log   new Date   .getTimezoneOffset     240    > console.log  navigator.userAgent   Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/56.0.2924.87 Safari/537.36    > console.log moment.version    2.17.1       Regards  Yo.          ,ynoval,closed,1,2017-03-17 23:42:35,2017-03-28 03:54:48,,DST,,,0,1
10406,moment/moment,3844,1 test failed. relative time:custom rounding  2721.3  ,    Client info       Date String   : Sat Mar 18 2017 09:05:26 GMT 0700  SE Asia Standard Time   Locale String : 3/18/2017  9:05:26 AM  Offset        :  420  User Agent    : Mozilla/5.0  Windows NT 10.0; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/56.0.2924.87 Safari/537.36  Moment Version: 2.17.1         ====        relative time:custom rounding  2721.3      Round down towards the nearest day       javascript  // Expected in 30 days  // Actual   in a month   in a month  ===  in 30 days      ,h3ndro,closed,1,2017-03-18 02:05:58,2017-03-18 02:06:30,,,,0,1
10405,moment/moment,3845,diff different day returns 0,  Description of the Issue and Steps to Reproduce:    in the chrome devTool console       new Date 1489529963   1000   Wed Mar 15 2017 06:19:23 GMT 0800  CST     new Date 1489491712   1000   Tue Mar 14 2017 19:41:52 GMT 0800  CST          Obviously  these two are not the same day  but when I use the  diff  method of moment object  it returns  0        moment 1489529963   1000 .diff  moment 1489491712   1000    days   ; // => 0         it should return  1       Environment:    Mac Sierra 10.12 Beta  Chrome DevTool / NodeJs      ScreenShot     [image] https://cloud.githubusercontent.com/assets/1707818/24068793/c46399ea 0bd2 11e7 97dd 9f1fc3fc7440.png   ,Nomia,closed,6,2017-03-18 04:03:12,2017-03-19 06:32:20,,,,0,1
10404,moment/moment,3846,[bugfix] Change  Y  format token to adhere to ISO under 9999  fixes  3842,fixes  3842 ,marwahaha,open,2,2017-03-18 05:57:12,0000-00-00 00:00:00,,Breaking change,,,1,1
10403,moment/moment,3847,[misc] Fix custom locale bundler  fixes  3631,fixes  3631 ,marwahaha,closed,1,2017-03-18 06:21:57,2017-03-18 19:37:10,,,,1,1
10402,moment/moment,3848,[misc] Add coveralls testing to travis build,I think this will just work. Check out my own Travis Builds and Coveralls here:  https://travis ci.org/marwahaha/moment/builds  [ [Coverage Status] https://coveralls.io/repos/github/marwahaha/moment/badge.svg?branch=add coveralls ] https://coveralls.io/github/marwahaha/moment?branch=add coveralls     Builds are significantly longer  takes  4 minutes instead of  3   but the coverage is probably worth it. I sort of prefer long builds to flaky/less useful builds.  This is why I decided to test twice     once with  default  and once with coveralls     this is moment develop s  but it might be out of date  [ [Coverage Status] https://coveralls.io/repos/github/moment/moment/badge.svg?branch=develop ] https://coveralls.io/github/moment/moment?branch=develop       fixes  2509  ,marwahaha,open,10,2017-03-18 20:46:35,0000-00-00 00:00:00,,Pending Next Release,,,1,1
10401,moment/moment,3849,v2.18.0 may have a breaking change,Greenkeeper [warned] https://github.com/airbnb/react dates/issues/381  us of  react dates  breaking when moment is updated to v2.18.0.    When [pinned to v2.17.1] https://travis ci.org/airbnb/react dates/builds/212552663   tests pass.    I don t have time right now to investigate further  but whatever changed in v2.18.0 that caused this breakage  could you please revert and publish? The test failures imply it might be locale related.,ljharb,closed,9,2017-03-19 01:38:21,2017-03-19 05:25:48,,,,0,1
10400,moment/moment,3850,[new locale] es us: Spanish  United States  locale,add the es us locale which is Spanish in US format,bustta,closed,2,2017-03-19 11:54:01,2017-08-06 23:23:57,,Pending Next Release,,,1,1
10399,moment/moment,3851,Difference with months is not calculated correctly ,According the Moment.js documentation moment diff  is optimized to ensure that two months with the same date are always a whole number apart .    But if I compare moment 2017 03 01 with 2016 10 01 diff gives difference 4 months but it should be 5 months:    var FIRST_OF_OCTOBER = moment [2016  9  1] .utc  ;  var FIRST_OF_MARCH = moment [2017  2  1] .utc  ;    var diffBetweenOctoberAndMarch = FIRST_OF_MARCH.diff FIRST_OF_OCTOBER   months  ;    here diffBetweenOctoberAndMarch gets value 4    I have created also JSFiddle for this: https://jsfiddle.net/heikkij/024b82o4/    Tested with Chrome Version 56.0.2924.87  64 bit  on OSX and Firefox 51.0.1  64 bit  on OSX    My laptop is in Eastern Europe Timezone    console.log   new Date   .toString     Mon Mar 20 2017 11:06:08 GMT 0200  EET     console.log  new Date   .toLocaleString     20/03/2017  11:06:08    console.log   new Date   .getTimezoneOffset      120    console.log  navigator.userAgent   Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_3  AppleWebKit/537.36  KHTML  like Gecko  Chrome/56.0.2924.87 Safari/537.36    console.log moment.version   2.17.1     tested also with 2.10.6 and it has same issue   ,heikkijuntunen,closed,1,2017-03-20 09:10:57,2017-03-22 03:33:49,,Troubleshooting,,,0,1
10398,moment/moment,3852,Obsolete Timezones returned from moment.tz.guess  ,moment.tz.guess   detects obsolete timezones.  You can test by using Buenos Aires timezone.  It will detect America/Buenos_Aires  when that is obsolete and needs to be America/Argentina/Buenos_Aires  Another example is   Asia/Calcutta being obsolete and should be Asia/Kolkata  You can test with the vanilla CDN           <script src= //cdnjs.cloudflare.com/ajax/libs/moment.js/2.17.1/moment.min.js ></script>  <script src= //cdnjs.cloudflare.com/ajax/libs/moment timezone/0.5.11/moment timezone with data 2010 2020.min.js ></script>  <script>  document.addEventListener  DOMContentLoaded   function e         var tz = moment.tz.guess  ;    alert tz ;    ;  </script>               The impact is languages like PHP don t recognize the obsolete timezones in DateTimeZone::listIdentifiers  .    References  http://www.timezoneconverter.com/cgi bin/zoneinfo.tzc?s=default tz=America/Buenos_Aires  http://www.timezoneconverter.com/cgi bin/zoneinfo.tzc?s=default tz=Asia/Calcutta,AppliedEllipsis,closed,2,2017-03-21 02:09:31,2017-03-21 18:15:23,,,,0,1
10397,moment/moment,3853,[misc] Fix invalid whitespace character causing inability to parse moment.js,Please see the attached screenshots from Chrome 56.0.2924.87.     It appears there is an invalid whitespace character in the source code in  src/lib/locale/set.js . I removed that character and added a standard space which appears to have fixed the problem. I still ran the tests and confirmed all passed.     This can be reproduced by adding the following index.html file in the repo at the root of the project and loading it in chrome.    I should note that I put the whitespace replacement into the file referenced above  then ran  grunt release  and confirmed that it did indeed fix the issue.           index.html  <html>  <head>    <script src= moment.js ></script>  </head>  <body>  </body>  </html>         <img width= 1440  alt= screen shot 2017 03 20 at 7 52 21 pm  src= https://cloud.githubusercontent.com/assets/1163038/24130593/cdcf228a 0da6 11e7 8fe7 8ea8f33af81d.png >    <img width= 655  alt= screen shot 2017 03 20 at 7 52 41 pm  src= https://cloud.githubusercontent.com/assets/1163038/24130597/d103eb16 0da6 11e7 8b74 861eda436680.png >  ,shmendo,closed,6,2017-03-21 02:55:53,2017-03-21 22:47:48,,,,1,1
10396,moment/moment,3854,Convert long ternary operator to switch for easier readability,I think it s easier to read and understand if we switch this block to switch instead of the chained ternary operator.     Thanks.,kienpham2000,closed,1,2017-03-21 06:05:07,2017-08-03 01:33:02,,Pending Next Release,,,1,1
10395,moment/moment,3855,Strange char in moment.js,Hi    When I download moment 2.18.0 on my Windows 10 PC there are a strange  char in moment.js at line 361 at col 48. It seems to be at  A0  instead of  20     It doesn t seems to be a problem on Unix      ,NielsHolt,closed,3,2017-03-21 11:10:24,2017-03-22 03:06:14,,,,0,1
10394,moment/moment,3856,Short months are not valid,Hi    I found a bug when months with trailing period aren t valid. I have tested this on version 2.17.1. Can you please tell me if you are planning on fixing this error? If so  in which version? Here is [code example] https://jsfiddle.net/99sejg9j/5/ . Probably this issue is duplicate of this one  2186.,mkudelya,closed,1,2017-03-21 13:49:04,2017-03-22 03:10:41,,Language,,,0,1
10393,moment/moment,3857,Regression on electron,  Description of the Issue and Steps to Reproduce:    Version 2.17.1 works fine in [Electron] https://electron.atom.io/   but version 2.18.0 shows error:        Uncaught SyntaxError: Unexpected token this at moment.js:361    After downgrade  moment.js  to 2.17.1  the error disappeared.      Environment:     Electron 1.6.2   ,bresotec-bear,closed,1,2017-03-21 20:20:59,2017-03-22 03:05:48,,,,0,1
10392,moment/moment,3858,toDate   doesn t create copy of date,  Description of the Issue and Steps to Reproduce:    Calling a toDate   on a moment will not create a copy of the date wrapped by the moment  but a pointer to the actual date that is still used by the moment.  Example:     js  var m = new moment  ;  var begin_date = m.startOf  month  .toDate  ;  var end_date = m.endOf  month  .toDate  ;  console.log begin_date ;  console.log end_date ;       returns       Fri Mar 31 2017 23:59:59 GMT 0200  CEST   Fri Mar 31 2017 23:59:59 GMT 0200  CEST        Here I expected the begin_date to be March 1st.      Environment:    Using on server. Meteor 1.4.3.1  node 4.7.3  momentjs 2.13.0    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version        the navigator.userAgent crashed the application  logs of other calls:       Wed Mar 22 2017 10:26:51 GMT 0100  CET   3/22/2017  10:26:51 AM   60  2.13.0     ,Sybe,closed,1,2017-03-22 09:28:39,2017-03-22 17:31:53,,,,0,1
10391,moment/moment,3859,moment  .isSame undefined   day   returns true,Dear moment team   moment  .isSame undefined   day    is returning  true  to me.     Here s a [jsfiddle] https://jsfiddle.net/u7xvzwzo/ .    Am I missing something?,grebenyuksv,closed,1,2017-03-22 16:16:22,2017-03-22 17:31:12,,,,0,1
10390,moment/moment,3860,[locale] ru uk: Improve relative seconds,There is no localization for relative seconds  actually looks like in all languages .  Consider the following example:     javascript  moment.relativeTimeThreshold  ss   0     var t = moment  ; t.subtract  seconds:  1  ; t.toNow    //  1 second         var t = moment  ; t.subtract  seconds:  2  ; t.toNow    //  2 seconds         var t = moment  ; t.subtract  seconds:  3  ; t.toNow    //  5 seconds                with this patch  for  ru  and  uk  languages :     javascript  var t = moment  ; t.subtract  seconds:  1  ; t.toNow    //  1                 var t = moment  ; t.subtract  seconds:  2  ; t.toNow    //  2                 var t = moment  ; t.subtract  seconds:  3  ; t.toNow    //  5                       Also this may be used with future work for duration formats. Without plural seconds locales seems inconsistent anyway.,vgavro,closed,6,2017-03-23 06:22:13,2017-10-24 22:08:53,,Needs tests,,,1,1
10389,moment/moment,3861,React v15 upgrade branch using moment  .format   would fail BDD test on Travis CI,  Description of the Issue and Steps to Reproduce:     I previously reported this issue in the   moment   channel on   Gitter  . Although I ve found a workaround  I still wish to understand the real cause of the issue.     When upgrading ReactJS from v0.14 to v15 in our app  one particular Python BDD browser test had consistently failed on Travis CI  in both Chrome and Firefox   while this very same BDD test passed both locally and directly piped to Sauce Labs.    The assertion was to test a JavaScript functionality by passing a string value in a <input> element and expect it to invoke the onChange event handler. This assertion had no failures on Travis CI prior to the ReactJS v15 upgrade branch.    Eventually I d found that the failing test was related to  moment   well  together with React v15 and Travis CI . The instances of  moment utc_date_string .format  YYYY MMM DD    appeared to be causing JavaScript to fail on Travis CI. Another unique thing about the failing test is that it only happened on pages in which  moment  .format    is used in a loop within the  render    method  similar to the following:       render        return        <div>         items.map item =>            <div> item.status     moment item.timestamp .format  YYYY MMM DD   </div>                 </div>     ;            We ve had the code  similar to the above  in our app all along to display the local time in the UI  and it hasn t been an issue until now with the React v15 upgrade.    Purely for debugging attempts  the following would allow the test to pass on Travis CI:  1. Removed the instances of  moment item.timestamp .format  YYYY MMM DD    in the loop.  2. Added  utc    into  moment item.timestamp .format  YYYY MMM DD     such as  moment item.timestamp .utc  .format  YYYY MMM DD   .  3. Changed  moment item.timestamp .format  YYYY MMM DD    to  JSON.stringify moment item.timestamp   .      The workaround    I found this   stackoverflow   post  http://stackoverflow.com/questions/38251763/moment js to convert date string into date  and had tried passing the date string into the  new Date utc_date_string   first and the passed it to  moment     such as the following:       render        return        <div>         items.map item =>            let date = new Date item.timestamp ;          <div> item.status     moment date .format  YYYY MMM DD   </div>                 </div>     ;            Unfortunately  the above attempt alone still didn t allow the BDD test to pass on Travis CI. So eventually  I took the date parsing and formatting out of the loop in the  render    method and put them into a function which returns a JSON object for the  render    method to consume. With that  the BDD test passed on Travis CI.      Environment:    React 15.4.2  moment 2.18  Node.JS 6.10.1  Python 3.4.2  Chrome 48  Chrome Driver 2.21  Linux 3.13  Ubuntu 12.04      Other information:      Travis CI server runs on UTC.    Example date string to be passed into  moment   :  2015 05 04T08:11:18.000000 00:00 ,jimmyzhen,closed,3,2017-03-23 19:05:47,2017-03-28 03:49:14,,,,0,1
10388,moment/moment,3862,isoWeekday returns wrong day,isoWeekday doesn t reliably return weekday    Steps to reproduce:    Create a function in NodeJS application      javascript  function checkDay              var fdate = moment  .isoWeekday 3 ; // Returns Tuesday          var fdt = fdate.tz  America/Winnipeg  .format  MM DD YYYY  ;          var dtStart = moment fdt     17:00   MM DD YYYY HH:mm  ;           var pastdate = moment  .isoWeekday 6 ; // Returns Friday          var pastdt = pastdate.tz  America/Winnipeg  .format  MM DD YYYY  ;          var dtEnd = moment pastdt     23:59:59   MM DD YYYY HH:mm:ss  ;            console.log logTag    Start Date :    dtStart       End Date :    dtEnd ;          console.log JSON.stringify data  ;            Output on Server:   checkNextdate:Start Date :1490115600000   End Date :1490486399000    start : 03 21 2017 17:00   end : 03 24 2017 23:59        NodeJS:   v7.2.1      OS:   Linux ip 172 31 43 97 4.4.30 32.54.amzn1.x86_64  1 SMP Thu Nov 10 15:52:05 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux      Date executed:   03/24/2017    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString          Sat Mar 25 2017 02:28:28 GMT 0000  UTC    console.log  new Date   .toLocaleString          3/25/2017  2:28:28 AM   console.log   new Date   .getTimezoneOffset          0   console.log  navigator.userAgent       NodeJS app so no value   console.log moment.version      2.18.1        ,nirvana74v,closed,1,2017-03-25 02:39:33,2017-03-28 03:28:01,,,,0,1
10387,moment/moment,3863,moment gives wrong time 8 9 minutes after computer time,  Description of the Issue and Steps to Reproduce:    Moment returns time that is few minutes after time that my computer is showing.    This is how I set the time: var publishdate = moment  .format  YYYY MM DD HH:MM  ;    Here is a video of it:  https://youtu.be/2ctTNhqYR0A    In the video you can see I am using bootstrap datetimepicker which it self uses momentjs  when I initialize the publishdate it s few minutes after what is on my computer  when I click in the datetimepicker and choose a date  correct time is then set.     Why does momentjs intialy give me wrong time and datepicker gives correct?       Please include the values of all variables used.       Environment:    Win 10 Chrome latest version        If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log moment  .format  YYYY MM DD HH:MM     console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version        output       2017 03 25 12:03  create: Sat Mar 25 2017 12:37:19 GMT 0100  Romance Standard Time   create: 3/25/2017  12:37:19 PM  create:  60  create: Mozilla/5.0  Windows NT 10.0; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/57.0.2987.98 Safari/537.36  create: 2.18.1       ,nikocraft,closed,3,2017-03-25 11:38:32,2017-03-28 02:58:11,,,,0,1
10386,moment/moment,3864,Cannot resolve  file  or  directory  ./locale,  Description of the Issue and Steps to Reproduce:       WARNING in ./  /.2.13.0@moment/min/moment.min.js      Module not found: Error: Cannot resolve  file  or  directory  ./locale in /Users/hero/git/kibana 5.2/node_modules/.2.13.0@moment/min       @ ./  /.2.13.0@moment/min/moment.min.js 6:3763 3785      Please include the values of all variables used.       Environment:    mac os  node 6.9.0     Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,unix112,closed,1,2017-03-26 09:34:41,2017-03-28 02:56:39,,,,0,1
10385,moment/moment,3865,Boost performance by using predefined array,       Issue  JSPerf shows that using  .split  to create the month array is   96    slower than using a predefined array of months.    [https://jsperf.com/split versus array for month names] https://jsperf.com/split versus array for month names      [screen shot 2017 03 26 at 22 24 16] https://cloud.githubusercontent.com/assets/7824734/24335372/84f10458 1273 11e7 8be4 d8584e301051.png        Solution    Use predefined month array.,BrianDGLS,closed,6,2017-03-26 21:30:49,2017-04-21 21:52:33,,,,1,1
10384,moment/moment,3866,1 test failed. locale:x pseudo:calendar day  2493.6  ,Hi There   just occasionally ran the testframework and got an error. Yesterday at 02:00AM Germany switched to DST. Therefore there was no 02:00am but instantly 03:00am.    Not sure  if this is a bogus test case which simply fails 2 times a year  if DST is applicable  or should be handled transparently by the library.        Client info       Date String   : Mon Mar 27 2017 09:47:42 GMT 0200  CEST   Locale String : 27.3.2017  09:47:42  Offset        :  120  User Agent    : Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/56.0.2924.87 Safari/537.36 OPR/43.0.2442.1144  Moment Version: 2.18.1         ====        locale:x pseudo:calendar day  2493.6      yesterday at the same time       javascript  // Expected    st  rd     t 02:00  // Actual      st  rd     t 03:00      st  rd     t 03:00  ===     st  rd     t 02:00      ,ghandmann,closed,1,2017-03-27 07:52:20,2017-03-28 03:59:11,,,,0,1
10383,moment/moment,3867,Fix localeData.months call throwing exception on Greek,Bug when calling  months  from locale data on Greek:       js  moment.locale  el  ;  moment.localeData.months moment   ;  Uncaught TypeError: Cannot read property  substring  of undefined      at Locale.months  global.js:6522       at <anonymous>:1:21         Original author @mehiel ,difelice,closed,2,2017-03-27 19:18:38,2017-03-27 19:29:03,,,,1,1
10382,moment/moment,3868,Fix localeData months call on Greek,Bug when calling months from locale data on Greek:     js  moment.locale  el  ;  moment.localeData  .months moment   ;  Uncaught TypeError: Cannot read property  substring  of undefined      at Locale.months  global.js:6522       at <anonymous>:1:21       Original author @mehiel,difelice,closed,4,2017-03-27 19:28:17,2017-08-03 01:34:36,,Pending Next Release,,,1,1
10381,moment/moment,3869,run file is?,  Description of the Issue and Steps to Reproduce:       Please include the values of all variables used.       Environment:       Examples: Chrome 49 on OSX  Internet Explorer 10 on Windows 7  Node.JS 4.4.4 on Ubuntu 16.0.4      Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.       Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version           Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,Augus-boy,closed,5,2017-03-28 03:44:33,2017-03-28 03:50:21,,,,0,1
10380,moment/moment,3870,Moment date parsing is incorrect when using custom format  ddd MMM DD YYYY H:mm:ss GMTZ ,I m using moment and moment parseformat  strict mode  in Node.js environment    steps to reproduce:       var x =  Thu Feb 04 2016 16:14:40 GMT 0700 ;  var format = parseFormat x ;  console.log moment x [format] true .format   ;       executing the following will produce the error:   Invalid date        my environment :       console.log   new Date   .toString     Tue Mar 28 2017 16:32:48 GMT 0700  SE Asia Standard Time   console.log  new Date   .toLocaleString     3/28/2017  4:32:48 PM  console.log   new Date   .getTimezoneOffset      420         Thanks ,idanb11,closed,4,2017-03-28 09:34:21,2017-04-01 15:53:21,,,,0,1
10379,moment/moment,3871,1 test failed. locale:el:calendar last week  555.2  ,    Client info       Date String   : Tue Mar 28 2017 12:26:07 GMT 0100  GMT Summer Time   Locale String : 28/03/2017  12:26:07  Offset        :  60  User Agent    : Mozilla/5.0  Windows NT 10.0; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/56.0.2924.87 Safari/537.36  Moment Version: 2.18.1         ====        locale:el:calendar last week  555.2      Today   2 days one o clock       javascript  // Expected                             2:30     // Actual                                2:30                                   2:30     ===                              2:30         ,JSkimming,closed,1,2017-03-28 11:27:34,2017-04-22 18:32:24,,DST,Unit Test Failed,,,0,1
10378,moment/moment,3872,Cannot resolve  file  or  directory  ./locale,  Description of the Issue and Steps to Reproduce:    Node is unable to load moment s locales using Webpack because it cannot find the directory.     Error        WARNING in ./ /moment/min/moment with locales.js  Module not found: Error: Cannot resolve  file  or  directory  ./locale in [project]/node_modules/moment/min  resolve file  resolve directory    [project]/node_modules/moment/min/locale doesn t exist   @ ./ /moment/min/moment with locales.js 271:16 43          Two temporary fixes that can resolve the issue locally  choose one      1. In [project]/node_modules/moment/min/moment with locales.js in the function  loadLocale   line 271  change       require  ./locale/    name ;       to       require  ../locale/    name ;       2. Add a symbolic link to the directory       user@localhost: /Workspace/[project]/node_modules/moment/min  ln  s ../locale/           Environment:    Moment 2.18.1  Kubuntu 14.04 LTS 64 bit  Node.js 4.8.0 Argon LTS  Webpack 1.12.12,ddjxie,open,13,2017-03-28 19:44:07,0000-00-00 00:00:00,,Loading,Troubleshooting,,,0,1
10377,moment/moment,3873,get/set the meridiem,Is it already possible and I just can t find it  or if not  could an enhancement be made to get and set just the meridiem?  Or maybe there is a good reason not to that I m not thinking of?,erin-doyle,closed,8,2017-03-28 21:02:50,2017-04-01 14:41:08,,,,0,1
10376,moment/moment,3874,Calendar Time callback function format returns corrupted month string,I was trying to use calendar time to format my dates by passing a callback function. However  in the else condition of my callback  the month of the formatted date is incorrect.      Jan  returned as  Jamn    Mar  returned as  3amr    Feb  returned as  F0b     I might be doing this wrong but it seems weird that the month would come back this way without throwing any errors.       Code to reproduce       js  export const dateConversion =  date  =>      // Assuming date comes in  YYYY MM DD  format    date = moment date   YYYY MM DD  ;    return date.calendar null         sameDay:  [Today]        nextDay:  [Tomorrow]        lastDay:  [Yesterday]        nextWeek:  ddd        lastWeek:  MMM D        sameElse: function now           if  this.isSame now   year               return this.format  MMM D  ;          else            // Month is incorrectly parsed here           return this.format  MMM D  YYYY  ;                      ;              Environment    Tue Mar 28 2017 16:52:21 GMT 0400  EDT   3/28/2017  4:52:21 PM  240  Mozilla/5.0  Macintosh; Intel Mac OS X 10_11_6  AppleWebKit/537.36  KHTML  like Gecko  Chrome/56.0.2924.87 Safari/537.36  2.17.1,dbshwang,closed,3,2017-03-28 21:12:16,2017-03-29 03:58:58,,,,0,1
10375,moment/moment,3875,[bugfix] Calculate daysInMonth without Date    fixes  3358,fixes  3358 ,marwahaha,closed,5,2017-03-29 06:36:26,2017-08-06 23:32:54,,,,1,1
10374,moment/moment,3876,1 test failed. locale:el:calendar last week  555.6  ,    Client info       Date String   : Wed Mar 29 2017 08:49:56 GMT 0100  GMT Summer Time   Locale String : 29/03/2017  08:49:56  Offset        :  60  User Agent    : Mozilla/5.0  Windows NT 10.0; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/56.0.2924.87 Safari/537.36  Moment Version: 2.18.1         ====        locale:el:calendar last week  555.6      Today   3 days one o clock       javascript  // Expected                             2:30     // Actual                                2:30                                   2:30     ===                              2:30         ,PrismaticPolygon,open,1,2017-03-29 07:51:24,0000-00-00 00:00:00,,DST,Unit Test Failed,,,0,1
10373,moment/moment,3877,[bugfix] Remove RTL scraping from preparse  fixes  3487,fixes  3487     The preparse line was introduced here  https://github.com/moment/moment/pull/2268/files    But since the tests implemented in  2268 still pass  I think it s safe to remove the line. I don t know of other implications...,marwahaha,closed,2,2017-03-29 08:27:43,2017-08-06 23:37:08,,Pending Next Release,,,1,1
10372,moment/moment,3878,utcOffset parses a phantom zone from an ISO8601 string without an offset, moment  2015 01 01T00:00:00  .utcOffset  2015 01 01T00:00:00  .format       returns:     2014 12 31T12:00:00 01:00     See the jsfiddle:  https://jsfiddle.net/aa25w17t/     01:00 is not my time zone  it s  11:00   it appears to be parsing that from the date.  For example  if I change  2015 01 01  to  2015 01 02   the offset changes to   02:00     Also   moment.parseZone  2015 01 01T00:00:00  .format     which the docs say should be equivalent  returns the expected result   2015 01 01T00:00:00Z  .      Environment:         js  console.log   new Date   .toString     >  Fri Mar 31 2017 15:46:47 GMT 1100  AUS Eastern Daylight Time    console.log  new Date   .toLocaleString     >  3/31/2017  3:46:47 PM   console.log   new Date   .getTimezoneOffset     >   660   console.log  navigator.userAgent   >  Mozilla/5.0  Windows NT 10.0; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/56.0.2924.87 Safari/537.36   console.log moment.version   >  2.18.1        ,kring,open,2,2017-03-31 04:48:57,0000-00-00 00:00:00,,Bug,,,0,1
10371,moment/moment,3879,6 tests failed. diff:diff key after  2685.8  diff:diff key before  2686.8  diff:diff key before singular  2687.8  diff:diff key before abbreviated  2688.8  diff:diff overflow  2691.2  diff:diff between utc and local  2692.5  ,    Client info       Date String   : Fri Mar 31 2017 16:35:57 GMT 0300   03   Locale String : 3/31/2017  4:35:57 PM  Offset        :  180  User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_3  AppleWebKit/602.4.8  KHTML  like Gecko  Version/10.0.3 Safari/602.4.8  Moment Version: 2.18.1         ====        diff:diff key after  2685.8      hour diff       javascript  // Expected  4  // Actual    5   5 ===  4         ====        diff:diff key before  2686.8      hour diff       javascript  // Expected 4  // Actual   5  5 === 4         ====        diff:diff key before singular  2687.8      hour diff singular       javascript  // Expected 4  // Actual   5  5 === 4         ====        diff:diff key before abbreviated  2688.8      hour diff abbreviated       javascript  // Expected 4  // Actual   5  5 === 4         ====        diff:diff overflow  2691.2      hour diff       javascript  // Expected 24  // Actual   25  25 === 24         ====        diff:diff between utc and local  2692.5      hour diff       javascript  // Expected 4  // Actual   5  5 === 4     ,CetinBasoz,open,2,2017-03-31 13:38:56,0000-00-00 00:00:00,,Unit Test Failed,,,0,1
10370,moment/moment,3880,[misc] TS: add export moment as namespace to enable consumption outside ES6,    Fix:  [x] add export as namespace moment; into moment.d.ts to allow for consuming the moment declarations without ES6 modules  ,erdivartanovich,closed,5,2017-04-01 13:48:11,2017-12-22 04:05:13,,Breaking change,,,1,1
10369,moment/moment,3881,object parsing auto adjusting?,the Date support to construct a Date when input is out of range     https://developer.mozilla.org/en US/docs/Web/JavaScript/Reference/Global_Objects/Date  > Parameters  > Note: Where Date is called as a constructor with more than one argument  if values are greater than their logical range  e.g. 13 is provided as the month value or 70 for the minute value   the adjacent value will be adjusted. E.g. new Date 2013  13  1  is equivalent to new Date 2014  1  1   both create a date for 2014 02 01  note that the month is 0 based . Similarly for other values: new Date 2013  2  1  0  70  is equivalent to new Date 2013  2  1  1  10  which both create a date for 2013 03 01T01:10:00.    but momentjs  Object parsing syntax seems not supporting that   moment.utc  minute: 1    gives invalid date  however  I found the set interface support that auto adjusting  so a workaround is to constructor a valid date first  and set with the out of range values       js  > moment.utc  minute: 1  .toDate    Invalid Date  > moment.utc  .set  minute: 1  .toDate    2017 04 03T04:59:37.643Z  > moment.utc  minute:0  .set  minute: 1  .toDate    2017 04 02T23:59:00.000Z  > moment.utc  minute:0  .set  millisecond: 1  .toDate    2017 04 02T23:59:59.999Z  > moment.version   2.18.1          in NodeJS v6.,c0b,closed,1,2017-04-03 05:42:15,2017-04-03 18:20:25,,,,0,1
10368,moment/moment,3882,isSame  day  not working well,Hello  today i noticed one issue with isSame function   so when i try example from official documentation  moment  2010 01 01  .isSame  2010 02 01    day  ;   // false  different month   this works well      moment  2009 01 01  .isSame  2010 01 01    day  ;  // false   when i try same example but with same day and month i still get false  this will only work if year is same  i m wondering is that expected behavior or i should get here true  since month and day are actually same  and only different param is year?       ,SuperMariosYoshi,closed,2,2017-04-03 11:28:58,2017-04-03 18:05:33,,,,0,1
10367,moment/moment,3883,Cannot use a locale defined with parent,  Description of the Issue and Steps to Reproduce:           const moment = require  moment  ;    moment.defineLocale  absoluta        parentLocale :  fr      monthsShort  : [ Jan    Fev    Mar    Avr    Mai    Jui    Jul    Aou    Sep    Oct    Nov    Dec ]    ;    // unset globally set locale  moment.locale false ;    // uncomment to fix  // moment.localeData  fr  ;    console.log moment  08:00:00 01/Avr/17    HH:mm:ss DD/MMM/YY    absoluta   ;         This code is throwing the follwing exception:         TypeError: Cannot read property  preparse  of null      at prepareConfig  .../node_modules/moment/moment.js:2518:43       at createFromConfig  .../node_modules/moment/moment.js:2497:40       at createLocalOrUTC  .../node_modules/moment/moment.js:2584:12       at createLocal  .../node_modules/moment/moment.js:2588:12       at hooks  .../node_modules/moment/moment.js:16:25       at Object.<anonymous>  .../bin/moment test.js:13:1       at Module._compile  module.js:571:32       at Object.Module._extensions..js  module.js:580:10       at Module.load  module.js:488:32       at tryModuleLoad  module.js:447:12          If I uncomment the line  moment.localeData  fr  ;   it seems to be fixed.      Environment:    Moment 2.18.1  NodeJS 7.7.4 on OSX  ,vincent-tr,closed,4,2017-04-04 07:48:51,2018-03-02 18:59:26,,Bug,,,0,1
10366,moment/moment,3884,fix typo,The word  Monday            in arabic is with  Hamzat wasl      not a  hamzat Kaataa      because it s from        == TWO   ,atefBB,closed,3,2017-04-04 10:54:46,2017-10-24 22:28:39,,,,1,1
10365,moment/moment,3885,Any way to guess/detect 12h vs. 24h time format?,With Moment Timezone s  [moment.tz.guess  ;] https://momentjs.com/timezone/docs/ /using timezones/guessing user timezone/  we get timezone detection.    Is there any way to use Moment in the same manner to detect time format convention  i.e. 12h or 24h?,hundsim,closed,1,2017-04-04 12:30:38,2017-04-11 10:26:36,,,,0,1
10364,moment/moment,3886,2 tests failed. create:parsing RFC 2822  2642.7  create:parsing RFC 2822  2642.8  ,    Client info       Date String   : Tue Apr 04 2017 09:41:10 GMT 0300  Hora oficial do Brasil   Locale String : 04/04/2017 09:41:10  Offset        : 180  User Agent    : Mozilla/5.0  Windows NT 10.0; WOW64; rv:38.0  Gecko/20100101 Firefox/38.0  Moment Version: 2.18.1         ====        create:parsing RFC 2822  2642.7      Invalid date       javascript  // Expected true  // Actual   false  false === true         ====        create:parsing RFC 2822  2642.8      NaN   rfc2822 parsingFlag       javascript  // Expected true  // Actual   false  false === true     ,FCGF,open,9,2017-04-04 12:42:58,0000-00-00 00:00:00,,Unit Test Failed,,,0,1
10363,moment/moment,3887,PHP s DateTime parsing,In PHP  there s a [DateTime] https://secure.php.net/manual/en/class.datetime.php  class. When I run the following code:       php  echo json_encode new DateTime   ;         I get a JSON string:    date : 2017 04 04 18:38:42.000000   timezone_type :3  timezone : Europe /Berlin   . Such string may be used for example in an API response  to be read by a JavaScript client application  as a JSON object  that d like to display this date   but it has to parse it first. It s possible to do the following:       typescript  const date = moment theDateFromResponse.date ;         And then somehow set correct timezone. But what do you think about parsing the whole mentioned JSON object by moment? For example:       typescript  let date = moment      // assume the following comes from API response    date:  2017 04 04 18:38:42.000000      timezone_type: 3     timezone:  Europe/Berlin     ;    // print  2017 04 04T18:38   console.log date.format  Y MM DDTHH:mm   ;     ,gscscnd,closed,4,2017-04-04 16:51:52,2017-04-09 17:28:52,,,,0,1
10362,moment/moment,3888,fix typo,The word  Monday            in arabic is with  Hamzat wasl      not a  hamzat Kaataa      because it s from        == TWO   ,atefBB,closed,2,2017-04-04 17:37:32,2017-10-24 22:28:39,,,,1,1
10361,moment/moment,3889,fix typo,The word  Monday            in arabic is with  Hamzat wasl      not a  hamzat Kaataa      because it s from        == TWO   ,atefBB,closed,0,2017-04-04 17:43:56,2017-10-24 22:28:39,,,,1,1
10360,moment/moment,3890,fix typo,The word  Monday            in arabic is with  Hamzat wasl      not a  hamzat Kaataa      because it s from        == TWO   ,atefBB,closed,0,2017-04-04 17:48:02,2017-10-24 22:28:39,,,,1,1
10359,moment/moment,3891,You guys are awesome.,This isn t an issue or a bug report.     I stumbled upon [Tim s post] https://medium.com/@timrwood/moment endof term 522d8965689  from way back last year  where he talks about the relationship between open source and feeling burnt out. I realized that hey  here s a library that I used and loved   _really_ used  and I have no idea who really built it  who maintains it. You have no idea how many times moment and moment timezone have both saved my bacon  when it boiled down to handling date/time algebra  or easy tz conversions.    Tim  Iskren  Matt  Maggie  Isaac  Andre  JD  Lucas   a huge thank you for bringing moment to where it is today   it s not just the best Javascript library to get datetimes done  it s become the blueprint of sorts  when it comes to datetime libraries. Thank you for your work  which can get pretty intense and thankless at times. : ,rudimk,closed,3,2017-04-04 19:19:08,2017-04-05 20:52:40,,,,0,1
10358,moment/moment,3892,Ambiguous two letter months accepted as valid,     moment  5 Ma 2017  .isValid   // True  5 May 2017   moment  5 Ju 2017  .isValid   // True  5 July 2017           Ma  could be either March or May.  Ju  could be either June or July. All two letter moths should be invalid in English.    Moment 2.18.1,CJDennis,closed,1,2017-04-05 04:18:24,2017-04-05 04:22:36,,,,0,1
10357,moment/moment,3893,[bugfix] Make Z and ZZ tokens output Z instead of  00:00  fixes  3117,fixes  3117     Will need a docs update.    It s non obvious if this is the right thing  since I don t know if people use  ZZ  to check timezones  it s only numbers before this.. . Introducing a new token seems odd  though.    Not sure if breaking  since I did update tests. I guess this is changing behavior...    @maggiepint ,marwahaha,open,4,2017-04-05 04:55:39,0000-00-00 00:00:00,,Discussion,Needs docs,,,1,1
10356,moment/moment,3894,[locale] es: Update month parsing to be dot lenient  fixes  3629,Fixed  3629     Quoting the original author of the locale: @julionc     The same changes should be made to the es do locale  since to my understanding they are 90  identical.,kkopanidis,closed,6,2017-04-05 08:09:57,2017-08-06 23:43:35,,Pending Next Release,,,1,1
10355,moment/moment,3895,remove  in  from text in relativeTime object,I am using moment to get the time to an event and am using the  fromNow  functionality      moment value .fromNow  ;     This works well  however. It tells me  in 4 days . The issue is that if it less than a day then it says  in 4 hours . Instead of this I would prefer it would say  today .    I have updated  moment.updateLocale    and thought this should fix it. However  it now says  in today .    Is it possible to change this and remove  in ?         moment.updateLocale  en         relativeTime:      future:  in  s      past:   s ago      s:   today      m:   today      mm:  today      h:   today      hh:  today      d:   1 day      dd:   d days                ;    ,Pau1fitz,closed,1,2017-04-05 15:38:26,2017-04-05 16:12:06,,,,0,1
10354,moment/moment,3896,[new locale] tg: Tajik  Tajikistan  locale,Language: Tajik  cyrillic   ISO 639 1: [tg]  ISO 639 2: [tgk],orif-jr,closed,8,2017-04-05 20:20:50,2018-03-02 18:53:44,,Pending Next Release,,,1,1
10353,moment/moment,3897,fix typo,The word  Monday            in Arabic is with  Hamzat wasl      not a  hamzat Kaataa      because it s from        == TWO .,atefBB,closed,2,2017-04-05 20:36:31,2017-10-24 22:28:39,,,,1,1
10352,moment/moment,3898,Lowercase month names in Portuguese,I believe that the month names in Portuguese should always start with a lowercase letter.      @jalex79   @caio ribeiro pereira ,kaypro4,closed,3,2017-04-06 16:30:15,2017-04-11 16:31:03,,,,1,1
10351,moment/moment,3899,Wrong language code for Serbian language,We use wrong language code for Serbian cyrillic and Serbian latin. SR is by default cyrillic  not latin  Currently:  sr cyrl   >  Serbian cyrillic  sr          >  Serbian latin    Correct codes:  sr   >  Serbian   cyrillic   sh   > Serbo Croatian  latin     Source: [w3schools] https://www.w3schools.com/tags/ref_language_codes.asp     Please can someone confirm or correct.  Thanks,vlada-j,closed,3,2017-04-07 00:36:57,2017-04-12 00:58:56,,,,0,1
10350,moment/moment,3900,isValid behaves unexpectedly,  Description of the Issue and Steps to Reproduce:    When trying to use isValid   moment.js behaves some kind of strange.   Please include the values of all variables used.   Tests:  Captured from the node.js repl:  > moment  10.12.2012   DD.MM.YYYY  .isValid    true  > moment  10.12.2012   DD.MM.YYY  .isValid    true  > moment  10.12.2012   DD.MM.YY  .isValid    true  > moment  10.12.2012   DD.MM  .isValid    true  > moment  10.12.2012   DD.MM.YYYY  .isValid    true  > moment  10.12.201A2   DD.MM.YYYY  .isValid    true  > moment  10.12.AAAA   DD.MM.YYYY  .isValid    true  > moment  10.12.not a year   DD.MM.YYYY  .isValid    true      Environment:    node v7.6.0 on mac os x sierra       Sat Apr 08 2017 00:06:05 GMT 0200  CEST   4/8/2017  12:06:05 AM   120  2.18.1       ,OliverFischer,closed,2,2017-04-07 22:08:54,2017-04-09 17:14:56,,,,0,1
10349,moment/moment,3901,moment  MM/DD/YY   returns different results in Chrome/IE,  Description of the Issue and Steps to Reproduce:    Using  moment  MM/DD/YY    sometimes produces different results in IE/Edge and Chrome/Firefox. Namely  the  moment  created in IE may refer to   MM/DD/19YY   while Chrome produces a  moment  referring to   MM/DD/20YY       Please include the values of all variables used.   The date string I used to produce this inconsistency was   04/29/17    IE/Edge created a moment referring to April 29  1917.  Chrome created a moment referring to April 29  2017.      Environment:    IE11/Windows 7  Edge/Windows 10  Chrome56/Windows 10  Firefox ? /Windows 7      Other information that may be helpful:      Using  moment 2.15.1  with  react 15.3.2     Javascript  new Date  04/29/17    refers to April 29  2017 in all browsers,adamstevencotner,closed,1,2017-04-08 16:14:28,2017-04-09 17:13:44,,,,0,1
10348,moment/moment,3902,[misc] perf: Use Object.keys for empty object check,When using moment together with ChartJS  I found out that there is performance issue with  isObjectEmpty   when rendering large datasets. This function takes around 30  of total time required to render the chart.     When using  Object.keys   it only takes  2  of total time using Chrome 57.      [screenshot 434] https://cloud.githubusercontent.com/assets/25081285/24832686/6ca33f82 1cb5 11e7 9b15 532000621e87.png      [screenshot 431] https://cloud.githubusercontent.com/assets/25081285/24832688/74c23538 1cb5 11e7 8c8c 897f08e2eb94.png     ,sgorsh,closed,5,2017-04-08 21:47:59,2017-08-06 23:47:08,,Pending Next Release,,,1,1
10347,moment/moment,3903,Abbreviation of longDateFormat in actual language,Question:    Is there a possibility to update a locale date format to reflect the actual language set?    Like for  de  locale instead of DD.MM.YYYY for a long format to use TT.MM.JJJJ?    I can use:       js  moment.updateLocale  en gb     longDateFormat:   L:  DD/MM/YYYY      ;  moment.updateLocale  de     longDateFormat:   L:  TT.MM.JJJJ      ;  moment.updateLocale  es     longDateFormat:   L:  DD/MM/AAAA      ;       which works as it should. Is there any function that will do this automatically  as I don t know all abbreviation for a year  month and day .    Also there is a bug in code above. If you use code as:       js  moment.locale  de  ;  moment.updateLocale  en gb     longDateFormat:   L:  DD/MM/YYYY      ;  moment.updateLocale  de     longDateFormat:   L:  TT.MM.JJJJ      ;  moment.updateLocale  es     longDateFormat:   L:  DD/MM/AAAA      ;         moment  ._locale._longDateFormat.L will always return last set format. In example above it will be DD/MM/AAAA even is locale is  de .    If I put moment.locale  de   AFTER last call to updateLocale  everything is fine.      Environment:       Chrome 57.0.29871222 on Windows 10  ,darkgnostic,closed,2,2017-04-10 07:58:30,2017-04-11 11:51:08,,Troubleshooting,,,0,1
10346,moment/moment,3904,jsnext:main  > module,Per rollup   webpack2.    https://github.com/rollup/rollup/wiki/pkg.module  https://webpack.js.org/configuration/resolve/ resolve mainfields,evan-scott-zocdoc,closed,5,2017-04-10 22:27:05,2017-08-03 01:35:21,,Pending Next Release,,,1,1
10345,moment/moment,3905,Correct ES6 export,Currently Moment.js ES6 export is not really an ES6 export  it s just an older ES5 export rewritten with  import s and  export s.  The goal of ES6 is not using different words but rather exporting different parts of the package independently.  This PR shows the right way of doing an ES6 export for a package.  It is meant as an illustration which can be merged if the moment internals allow that.  Otherwise it s 180 KiloBytes which is unacceptable and will eventually have to go.,catamphetamine,closed,4,2017-04-11 11:36:12,2017-04-22 15:41:43,,,,1,1
10344,moment/moment,3906,Lowercase month names in Portuguese,I believe that the month names in Portuguese should always start with a lowercase letter.    @jalex79   @caio ribeiro pereira,kaypro4,closed,1,2017-04-11 16:32:13,2017-04-17 21:16:31,,,,1,1
10343,moment/moment,3907,[misc] jslint: Refactor to avoid unreachable  break  after  return ,Break in switch causes  Unreachable  break  after  return .  warning with JSLint,blogcraft,open,1,2017-04-11 19:30:26,0000-00-00 00:00:00,,Discussion,,,1,1
10342,moment/moment,3908,Update sk.js fix  Unreachable  break  after  return . ,,blogcraft,open,1,2017-04-11 20:20:20,0000-00-00 00:00:00,,Discussion,,,1,1
10341,moment/moment,3909,1 hour difference when using epoch time,I have a very unexpected behaviour today around epoch time where it actually loses an hour  if I do the following:     js  moment 0 .add 1   day  .subtract 1   day  .format         It will return  1970 01 01T10:00:00 11:00     However if I do:     js  moment 0 .format         It will return  1970 01 01T10:00:00 10:00 .    This isn t simply an issue of the timezone information changing  it is actually losing an hour in the process.  The top example still thinks it s 10 am even with  11 timezone       Environment:    Both Chrome 57 and Node 7.4.0 on OSX    toString: Thu Apr 13 2017 11:01:48 GMT 1000  AEST   localeString: 13/04/2017  11:01:48  timezoneOffset:  600  momentVersion: 2.18.1,Doddzy,closed,5,2017-04-13 01:06:03,2017-05-30 15:30:57,mj1856,Troubleshooting,,,0,1
10340,moment/moment,3910,moment  .toObject   returns incorrect month number,     var moment = require  moment timezone    var mDT = moment    console.dir mDT.toObject     console.dir mDT.toJSON     console.dir mDT.toISOString          returns:         years: 2017     months: 3     date: 13     hours: 11     minutes: 1     seconds: 24     milliseconds: 820     2017 04 13T10:01:24.820Z    2017 04 13T10:01:24.820Z        which is wrong because the  months  entry should be 4 right now and not 3.    In other words all the outputs are 1 based except for  months  which is 0 based.    Version installed: moment@2.18.0  Platforms: Linux and Windows    Also note that the toJSON   output also seems wrong or at least it doesn t match the documentation which suggests it should return:           postDate:  2017 04 13T10:01:24.820Z          ,TotallyInformation,closed,2,2017-04-13 10:04:51,2017-04-13 17:09:13,,,,0,1
10339,moment/moment,3911,Wrong week dates for 2017,  Description of the Issue and Steps to Reproduce:      Start of / end of week is wrong for 2017  using custom locale     When using a locale where:    first day of week = 1  monday     first day of year = 1  january 1st     I expect week 1 of 2017 to start on 2016 12 26  monday  and end on 2017 01 01.    In reality  week 1 of 2017 starts on 2017 01 02 and ends on 2017 01 08.      Code to reproduce:           moment.locale  test          parentLocale:  en        week:            dow: 1           doy: 1           ;    moment  .locale  test  .set  week   1 .startOf  week   // should be 2016 12 26  moment  .locale  test  .set  week   1 .endOf  week   // should be 2017 01 01         This is either a bug or the documentation is wrong on how dow / doy works.      Environment:      Chrome 57 on Windows    Firefox 52 on Windows      Other information that may be helpful:        Time Zone: UTC  01:00  DST     Date: 2017 04 13 14:43    If you are reporting an issue  please run the following code in the environment you are using and include the output:       Thu Apr 13 2017 14:44:12 GMT 0200  Romance Standard Time    13/4/2017 14:44:12    120   Mozilla/5.0  Windows NT 6.1; WOW64; rv:52.0  Gecko/20100101 Firefox/52.0   2.18.1     ,BartVanBeurden,open,6,2017-04-13 12:47:14,0000-00-00 00:00:00,,Documentation,,,0,1
10338,moment/moment,3912,[Question] How to get expected humanize duration ,momentjs version is 2.17.1     moment.duration  00:00:45  .humanize    gives  a minute    moment.duration  00:123:00  .humanize    gives  2 hours     Anyway to get  45 seconds  and  123 minutes  for the above respectively?,muhammad-ammar,closed,2,2017-04-14 08:00:51,2017-04-17 16:10:53,,,,0,1
10337,moment/moment,3913,Moment fromNow not working on ios,  Description of the Issue and Steps to Reproduce:      moment date .fromNow  ; returns invalid date.    Same with   moment  .subtract 1   days  .fromNow  ;  moment  .fromNow  ;      Environment:      IOS Cordova  WKWebView IOS 10       Other information that may be helpful:           js  console.log   new Date   .toString    => Mon Apr 17 2017 11:28:41 GMT 0400  EDT   console.log  new Date   .toLocaleString    => 2017 04 17 11:28:41  console.log   new Date   .getTimezoneOffset    => 240  console.log  navigator.userAgent  => Mozilla/5.0  iPhone; CPU iPhone OS 10_2_1 like Mac OS X  AppleWebKit/602.4.6  KHTML  like              Gecko  Mobile/14D27  4301327536   console.log moment.version  => 2.18.1           Thanks  ,theomathieubhvr,closed,9,2017-04-17 15:32:33,2017-04-19 13:48:45,,,,0,1
10336,moment/moment,3914,Lowercase month names in Portuguese,,kaypro4,closed,1,2017-04-17 21:17:47,2017-04-17 21:21:12,,,,1,1
10335,moment/moment,3915,[locale] pt pt br: Lowercase month names,I believe that the month names in Portuguese should always start with a lowercase letter.    @jalex79   @caio ribeiro pereira,kaypro4,closed,4,2017-04-17 21:37:14,2017-08-07 00:03:12,,,,1,1
10334,moment/moment,3916,4 digit year not recognized as valid ISO date,When parsing a date with just a year  there appears a warning in the console  that it is not a valid ISO or RFC format. But just a year should be valid: https://www.w3.org/TR/NOTE datetime    https://jsfiddle.net/yke0c876/3/       js  > moment  2000  ;  Deprecation warning: value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date    which is not reliable across all browsers and versions ...         Environment: Chrome 57 on OSX  ,j0hj0h,closed,1,2017-04-18 13:45:26,2017-04-18 17:59:48,,,,0,1
10333,moment/moment,3917,Minimising bundle size,I m trying to minimise the bundle size of my application with moment in  that is installed via npm and included like  import   as moment from  moment ; import  moment/locale/nl ;  .     I m using [source map explorer] https://www.npmjs.com/package/source map explorer  to see the details:     [screen shot 2017 04 18 at 16 28 38] https://cloud.githubusercontent.com/assets/1526680/25135979/190b706e 2454 11e7 81d1 fc28e1e812ce.png     Looks like it includes all the locales by default. Could I load only needed ones?   ,stevermeister,open,7,2017-04-18 14:31:01,0000-00-00 00:00:00,,,,0,1
10332,moment/moment,3918,Parsing less than complete ISO representations, moment  2017 01    is undocumented in the [supported ISO strings] http://momentjs.com/docs/ /parsing/string/   but is correctly parsed as  2017 01 01  local time without giving a deprecation warning.     moment  201701    is the ISO 8601 basic form of the same representation  but this gives a deprecation warning  falls back to JS Date  and results in the entire number being interpreted as the year.     moment  2017    is also allowed under ISO8601  but we don t support it.    We should either fully support minimal representations less than a full date  or not support them at all  and we should document this either way.  ,mj1856,open,6,2017-04-18 17:58:33,0000-00-00 00:00:00,,Bug,Enhancement,,,0,1
10331,moment/moment,3919,Import moment with locales,Hi   I would like to use moment with locales rather than moment js. But  there is no npm package for moment with locales. I checked moment.js package which does not include moment with locales code base.     Thanks,londondev,closed,0,2017-04-19 11:22:25,2017-04-19 13:47:07,,,,0,1
10330,moment/moment,3920,Parsing   0000  timezones in RFC 2822 strings incorrectly,When parsing a date with a   0000  timezone modifier at the end  RFC format   it parses it incorrectly.          > moment.version       2.18.1        > moment  Mon  02 Jan 2017 06:00:00  0800  .format         2017 01 02T01:00:00 05:00        > moment new Date  Mon  02 Jan 2017 06:00:00  0800   .format         2017 01 02T09:00:00 05:00     I am currently in EST  so the second output is what the actual time should be.       Environment:    Chrome 57 and NodeJS 7.x on Windows 10       js  console.log   new Date   .toString    // Wed Apr 19 2017 19:58:19 GMT 0400  Eastern Daylight Time   console.log  new Date   .toLocaleString    // 4/19/2017  7:58:19 PM  console.log   new Date   .getTimezoneOffset     // 240  console.log  navigator.userAgent  // ReferenceError: navigator is not defined  console.log moment.version  // 2.18.1     ,jgr3go,closed,6,2017-04-19 23:59:48,2017-05-02 04:26:03,,Bug,,,0,1
10329,moment/moment,3921,Parsing Date with lowercase year format d MMM yyyy,Is this an issue if the date format contain lowercase?    e.g. data in UTC  convert to GMT  8:00         value: 1979 03 29T16:00:00Z              moment value .format  d MMM yyyy           output:  29 Mar yyyy    Expected:    30 Mar 1979,brendonco,closed,3,2017-04-21 09:21:43,2017-04-22 15:51:33,,,,0,1
10328,moment/moment,3922,formating the datetime with moment.format is returning an hour short  every time. ,formating the datetime with moment.format is returning an hour short  every time.      var sd = moment event.start .format  DD MM YYYY HH:mm  ;    Thu May 04 2017 07:00:00 GMT 0100  GMT Daylight Time  returns  04 05 2017 06:00      //  moment.js  //  version : 2.13.0  any suggestion?     thanks,rizwanh12,closed,3,2017-04-21 12:49:50,2017-04-22 18:28:55,,Troubleshooting,,,0,1
10327,moment/moment,3923,Moment._pf.meridiem undefined,  Description of the Issue and Steps to Reproduce:      parsing a ISO date and time string like  2014 04 20T07:30:00   in code;  let starttime:moment.Moment = moment  2014 04 20T07:30:00  ;  returns a valid moment but the JSON is invalid because the starttime._pf.meridiem is undefined. This gives issues later in the application.  Setting the locale doest seem to change anything about meridiem. What is going on here?      Environment:    Chrome 57 on OSX      Other libraries in use   dependencies :         @angular mdl/core :   4.0.          @angular/common :   4.0.          @angular/compiler :   4.0.          @angular/core :   4.0.          @angular/forms :   4.0.          @angular/http :   4.0.          @angular/platform browser :   4.0.          @angular/platform browser dynamic :   4.0.          @angular/router :   4.0.          @types/lodash :  ^4.14.41         angular2 moment :  ^1.0.1         angularfire2 :  ^2.0.0 beta.8         chart.js :  ^2.4.0         core js :  ^2.4.1         firebase :  ^3.7.5         lodash :  ^4.17.2         material design icons :  ^3.0.1         material design lite :  ^1.2.1         moment :  ^2.18.1         promise polyfill :  ^6.0.2         rxjs :  ^5.0.1         ts helpers :  ^1.1.1         ts md5 :  ^1.2.0         zone.js :  ^0.8.4            devDependencies :         @angular/cli :   1.0.0         @angular/compiler cli :   4.0.          @types/jasmine :  ^2.2.30         @types/node :  ^6.0.42         codelyzer :  2.1.1         jasmine core :  2.4.1         jasmine spec reporter :  2.5.0         karma :  1.2.0         karma chrome launcher :  ^2.0.0         karma cli :  ^1.0.1         karma jasmine :  ^1.0.2         karma remap istanbul :  ^0.2.1         protractor :  4.0.9         ts node :  1.2.1         tslint :   4.5.0         typescript :   2.2.2         webdriver manager :  10.2.5        If you are reporting an issue  please run the following code in the environment you are using and include the output:   [1] https://cloud.githubusercontent.com/assets/12299090/25290439/5800fdda 26ce 11e7 8e1f b2e30751091a.png   ,iturn,closed,3,2017-04-21 18:10:36,2017-04-22 18:33:43,,Troubleshooting,,,0,1
10326,moment/moment,3924,[misc] Add FOSSA license report and scan status,Followup to @kborchers s email on JSF adopting FOSSA for license scanning.    Congrats on the passing license scan  In the PR is a green badge and report.,xizhao,closed,3,2017-04-22 01:19:50,2017-08-07 00:25:40,,Pending Next Release,,,1,1
10325,moment/moment,3925,The ISO8601 Standard is being updated,[The ISO8601 standard is being updated] https://www.iso.org/news/2017/02/Ref2164.html     What do we need to do to be prepared for these changes? As a representative of TC39  I may get in contact with them to see if they can give me more help on the date standard side. From moment s side  we probably just have to prepare to parse more things.    Step 1: see if we can get a copy of the upcoming standard from somewhere  and an idea of the release timeline.,maggiepint,open,1,2017-04-22 21:18:11,0000-00-00 00:00:00,,,,0,1
10324,moment/moment,3926,formating the datetime with moment.format is returning an hour short every time.,formating the datetime with moment.format is returning an hour short every time.    var sd = moment event.start .format  DD MM YYYY HH:mm  ;    Thu May 04 2017 07:00:00 GMT 0100  GMT Daylight Time  returns  04 05 2017 06:00     //  moment.js   //  version : 2.13.0  window 7  GMT time zone.  All the date and times are displayed fine only when I use format method it subtracts an hour from the time ever time.    any suggestion?    thanks  ,rizwanh12,closed,2,2017-04-24 09:26:31,2017-05-02 04:46:55,,,,0,1
10323,moment/moment,3927,Unreachable code warnings,  Description of the Issue and Steps to Reproduce:      Using moment with locales.js  Visual Studio gives lots  18  of  unreachable code detected  warnings.    Visual Studio 2017   R       [image] https://cloud.githubusercontent.com/assets/271656/25376463/313cf9c6 299c 11e7 990a 43027ed8b29c.png         ,PhilPJL,closed,6,2017-04-25 08:47:36,2018-03-05 08:39:15,,Up-For-Grabs,,,0,1
10322,moment/moment,3928,Moment.js should support HTML5 inputs like datetime local,Moment.js should support out of the box [HTML5 inputs] https://www.w3.org/TR/html/sec forms.html sec states of the type attribute  [datetime local  date  time  week  month] https://developer.mozilla.org/en US/docs/Web/HTML/Element/input/datetime local .  Instead of writing:     JSX  <input type= datetime local  value= start.format  YYYY MM DDTHH:mm    />  <input type= date  value= start.format  YYYY MM DD    />  <input type= time  value= start.format  HH:mm:ss    />       something like:     JSX  <input type= datetime local  value= start.toHtmlInput_datetime_local    />  <input type= date  value= start.toHtmlInput_date    />  <input type= time  value= start.toHtmlInput_time    />  <input type= week  value= start.toHtmlInput_week    />  <input type= month  value= start.toHtmlInput_month    />         => more explicit  less error prone  ss vs SS  local vs UTC  yyyy vs YYYY...      datetime local  expects  yyyy MM ddThh:mm  followed by optional  :ss  or  :ss.SSS  format   date  expects  yyyy MM dd    time  expects  HH:mm    HH:mm:ss  or  HH:mm:ss.SSS    week  expects  yyyy Www    month  expects  yyyy MM    taken from error messages given by Chrome 57. Yes Chrome speaks yyyy and dd instead of YYYY and DD  see  1603   ,tkrotoff,closed,6,2017-04-26 04:12:04,2017-12-17 00:28:22,,New Feature,Up-For-Grabs,,,0,1
10321,moment/moment,3929,Feature request add custom units,As stated in  3582 and  1998  Moment maintainers don t want to support exotic unit of times. That s ok.    I can t help but wonder how someone can extend the current set of known units without forking the whole project.  normalizeUnits  is the method used to achieve that  how can I alter this function behavior safely ? Is there a way to override its default behavior ?,Guibod,open,1,2017-04-26 12:32:02,0000-00-00 00:00:00,,New Feature,,,0,1
10320,moment/moment,3930,[locale] es do: Update month parsing to be dot lenient  fixes  3629,The es and es do locales had the same issue with date parsing of format D MMM YYYY . Both locales had code to test for / MMM /  so i added the fix for es  to es do as well. Also added the appropriate test,kkopanidis,closed,4,2017-04-26 23:02:28,2017-08-09 11:59:59,,,,1,1
10319,moment/moment,3931,Moment does not parse input string  2014 08 27T09:40:36:857 0600  consistently,  Description:    I am trying to parse string  2014 08 27T09:40:36:857 0600  using moment constructor.  In moment version 2.15.2 constructor was returning a valid moment object   isValid  =true  .  In moment version 2.18.1 constructor returns invalid moment object   isValid  =false  .    As it is breaking change and major version of moment is the same  I assume that this can be a bug.    Version 2.15.2 is the last version which returns a valid moment object for input string  2014 08 27T09:40:36:857 0600 .    Here is [fiddle] https://jsfiddle.net/hbabayan/02m7e2c9/  demonstrating the difference. In case fiddle will not be available  here is the shorter code demonstrating issue.       js  requirejs.config        paths:             moment 2 15 2 :  https://unpkg.com/moment@2.15.2/moment             moment 2 18 1 :  https://unpkg.com/moment@2.18.1/moment                requirejs [ moment 2 15 2    moment 2 18 1 ]  function moment1  moment2         var input =  2014 08 27T09:40:36:857 0600         var m1 = moment1 input       console.log  m1.isValid        // true        var m2 = moment2 input       console.log  m2.isValid        // false               Environment:    Chrome 58.0.3029.81  64 bit  on OSX       js  console.log   new Date   .toString      // Output: Thu Apr 27 2017 15:56:52 GMT 0400  AMT     console.log  new Date   .toLocaleString      // Output: 4/27/2017  3:56:52 PM    console.log   new Date   .getTimezoneOffset      // Output:  240    console.log  navigator.userAgent   // Output: Mozilla/5.0  Macintosh; Intel Mac OS X 10_11_6  AppleWebKit/537.36  KHTML  like Gecko  Chrome/58.0.3029.81 Safari/537.36         ,bhovhannes,closed,2,2017-04-27 12:16:52,2017-05-02 04:15:35,,,,0,1
10318,moment/moment,3932,Adapt [ca] locale to Unicode CLDR data,http://cldr.unicode.org/index/downloads    Standard date and time formats  full  long  medium  short  for gregorian calendar for  ca  locale don t use  el  prefix.   Also  I lowercased weekdaysMin: day names  short or not  in Catalan are always lowercase.    It looks weird when formating standalone dates. Moment library doesn t know the context  and so this article can be  el    al    a   ... or many other words.  Imho moment should print standalone dates  unless it fully adapts to ICU standards.    Original author @juanghurtado ,mestremuten,closed,2,2017-04-27 13:26:48,2017-04-28 15:52:22,,,,1,1
10317,moment/moment,3933,[locale] ca: Adapt to Unicode CLDR data,http://cldr.unicode.org/index/downloads    Standard date and time formats  full  long  medium  short  for gregorian calendar for  ca  locale don t use  el  prefix.  Also  I lowercased weekdaysMin: day names  short or not  in Catalan are always lowercase.    It looks weird when formating standalone dates. Moment library doesn t know the context  and so this article can be  el    al    a   ... or many other words.  Imho moment should print standalone dates  unless it fully adapts to ICU standards.    Original author @juanghurtado,mestremuten,closed,1,2017-04-28 15:50:55,2017-08-07 00:30:39,,Pending Next Release,,,1,1
10316,moment/moment,3934,Adjusted short months to de at locale,See http://www.localeplanet.com/java/de AT/ please.    The trailing periods could be considered superfluous as well.,neroux,closed,2,2017-04-30 23:19:45,2017-05-15 23:18:28,,,,1,1
10315,moment/moment,3935,Test case and solution for issue  3920,Addressed issue  3920 and added a new test case to confirm.  Good find @jgr3go and thanks for giving me an opportunity to practice TDD.  @icambron  your hypothesis as to the probable cause appears to be spot on  thanks.,TracyGJG,closed,4,2017-05-01 09:10:35,2017-05-01 17:33:42,,,,1,1
10314,moment/moment,3936,Can you add support for English  India ?  Would like to use moment.js in my companies web applicaiton.  One of our major customers is located in India.  Currently you have support for Hindu  India  but English  India  is widely used and I believe the preference.  Thanks Jim,  Description of the Issue and Steps to Reproduce:       Please include the values of all variables used.       Environment:       Examples: Chrome 49 on OSX  Internet Explorer 10 on Windows 7  Node.JS 4.4.4 on Ubuntu 16.0.4      Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.       Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version           Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,James1128,open,3,2017-05-01 16:52:45,0000-00-00 00:00:00,,Language,,,0,1
10313,moment/moment,3937,The RFC2822 functionality requires a dedicated to string function,Add a toRFC2822String   method to output a string in a fixed RFC2822 format.    See comments in issue  3920,TracyGJG,closed,2,2017-05-01 17:36:20,2017-08-07 20:05:55,,Enhancement,,,0,1
10312,moment/moment,3938,[bugfix] Fix parsing  00:00 in RFC2822  fixes  3920,Separated change   Fix for issue  3920. Includes changes made on  3935.  ,TracyGJG,closed,5,2017-05-01 17:45:39,2017-08-07 20:02:52,,Pending Next Release,todo,,,1,1
10311,moment/moment,3939,Added a toRFC2822String method with test cases,Separated change from  3920 pull request  3935.  New feature as part of the RFC 2822 capability   toRFC2822String method with test cases.,TracyGJG,closed,1,2017-05-01 17:54:48,2017-05-01 18:07:30,,,,1,1
10310,moment/moment,3940,[feature] Add moment  .toRFC2822String   method,Original submission error ed but did not fail.,TracyGJG,closed,8,2017-05-01 18:09:37,2017-08-07 20:04:51,,Pending Next Release,todo,,,1,1
10309,moment/moment,3941,[locale] fi: Remove verbal numbers for relative time,I am still very confused why is the Finnish translation showing verbal numbers instead of the actual number. All of the other languages I looked at are using real numbers so after this change  the translation would be more consistent. As a native speaker  I couldn t think of any reason why in particular there should be an exception for the Finnish language.,lauriii,open,6,2017-05-02 10:18:41,0000-00-00 00:00:00,,locale approval needed,,,1,1
10308,moment/moment,3942,weeksInYear   calculates for the year   instead of the weekYear  ,  Description of the Issue and Steps to Reproduce:      In Germany  the year 2015 has 53 weeks while 2016 has 52 weeks.  The 01/01/2016 lies within the 53rd week of 2015.  year      weekYear    and  week    all return the expected numbers. But  weeksInYear    returns 52  possibly the number of weeks in 2016  instead of 53.       js  import moment from  moment     moment.locale  de      const date = moment  2016 01 01      date.year   // 2016  date.weekYear   // 2015  date.week   // 53  date.weeksInYear   // 52; expected: 53    // Workaround:  date.startOf  week  .weeksInYear   // 53       https://jsfiddle.net/ugy5hmaw/      Environment:      Chrome 57  Firefox 52 and Edge 38 on Windows 10      Other information that may be helpful:           Tue May 02 2017 21:08:56 GMT 0200  Mitteleurop ische Sommerzeit   2.5.2017  21:08:56   120  Mozilla/5.0  Windows NT 10.0; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/57.0.2987.133 Safari/537.36  2.18.1     ,xehpuk,open,3,2017-05-02 19:09:21,0000-00-00 00:00:00,,,,0,1
10307,moment/moment,3943,Fix warnings  3927,Visual Studio added some files   sorry about that ignore them.    I was supposed to remove some unnecessary  break  statements  but also noticed a few other issues highlighted by Resharper.    ,PhilPJL,closed,4,2017-05-02 19:25:24,2017-05-06 10:48:06,,,,1,1
10306,moment/moment,3944,weekYear Number  jumps to the previous day of the week  and wraps around ,  Description of the Issue and Steps to Reproduce:      For the German locale   weekYear Number   does not preserve the day of the week  even if  Number === weekYear   . It always jumps to the previous day and wraps around on Sunday.        js  import moment from  moment     moment.locale  de      const date = moment  2016 01 01      date.weekYear 2015  // 2015 12 31 Th  date.weekYear 2015  // 2015 12 30 We  date.weekYear 2015  // 2015 12 29 Tu  date.weekYear 2015  // 2015 12 28 Mo  date.weekYear 2015  // 2016 01 03 Su  date.weekYear 2015  // 2016 01 02 Sa  date.weekYear 2015  // 2016 01 01 Fr    // Workaround:  const day = date.day   // 5  date.weekYear 2015 .day day  // 2016 01 01 Fr       https://jsfiddle.net/mtvsr738/      Environment:      Chrome 57  Firefox 52 and Edge 38 on Windows 10      Other information that may be helpful:           Tue May 02 2017 21:08:56 GMT 0200  Mitteleurop ische Sommerzeit   2.5.2017  21:08:56   120  Mozilla/5.0  Windows NT 10.0; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/57.0.2987.133 Safari/537.36  2.18.1     ,xehpuk,open,3,2017-05-02 19:45:19,0000-00-00 00:00:00,,Bug,,,0,1
10305,moment/moment,3945, 1428: Updated Danish  L  dateformat to use dots rather than slashes  aligning with article from DSN.,See argumentation at https://github.com/moment/moment/issues/1428 issuecomment 299046240    I kept the zero padding even though DSN says that it s  usually not requried   but it seems to be the way it s done in every other momentjs locale. This way  l  would give the DSN recommended output  while  L  would give one that s close  but has the zero padding. I don t think it would make sense to force those two to be the same. Input welcome if there is a better way to do this.    This is further complicated by the fact that DSN recommends three different formats   D.M.YYYY    D.M.YY  and  YYYY MM DD . I picked the one that is stated to be  traditional  with dots and full year specification.,runemoennike,closed,3,2017-05-04 12:18:31,2017-08-03 02:20:49,,Pending Next Release,,,1,1
10304,moment/moment,3946,Locale loading inconsistency,moment  .locale [ ru custom    fr custom    en    en GB ] .locale    >>  fr     moment  .locale [ ru custom    fr custom    en GB    en ] .locale    >>  en gb     Expected to be either first partial match  or first exact match. ,h15ter,open,10,2017-05-04 12:36:46,0000-00-00 00:00:00,ovangle,Bug,,,0,1
10303,moment/moment,3947,Updating  ss  threshold localization to pt br,Following  3738.,rentalhost,closed,7,2017-05-04 14:03:23,2017-08-09 12:16:28,,Pending Next Release,,,1,1
10302,moment/moment,3948,Feature: RFC 2822 military time zone output format,The RFC 2822 date time format includes the use of military single letter time zones such as: Z  zulu  equivalent to UTC 0000  A  alpha  =  0100  N =  0100  Y =  1200 and M  1200; All the letters of the Latin alphabet are used except J. Ref. [Wikipedia] https://en.wikipedia.org/wiki/List_of_military_time_zones     However  there is no corresponding encoding to include the military time zone letter as part of an output format. I would like to suggest the use of the letter  N  as the output is always a single uppercase letter. The letter  N  does not appear to be used currently and should be used for whole hour zones only. Half hour offsets such as  Charlie Star Time Zone  C  UTC 03:30 should not be included as they are not legal in RFC 2822.,TracyGJG,closed,3,2017-05-04 14:13:20,2017-05-05 07:17:42,,,,0,1
10301,moment/moment,3949,IE11 moment js date formatting for mm/dd/yyyy gives a correct date for invalid input 45/45/1,  Description of the Issue and Steps to Reproduce:    moment  45/45/1    MM/DD/YYYY  .format  MM/DD/YYYY   returns a valid date instead of NAN   Please include the values of all variables used.       Environment:       Examples: Internet Explorer 11 on Windows 7    Please see attached screenshot.   [ie11 date] https://cloud.githubusercontent.com/assets/11211219/26354127/f571dee2 3fe0 11e7 8720 0e384094414c.PNG      45/45/1  result in 10/15/0004 which is valid date.     Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.       Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     Tue May 23 2017 16:34:13 GMT 0530  India Standard Time   console.log  new Date   .toLocaleString      5 / 23 / 2017   4 : 34 : 29   PM  console.log   new Date   .getTimezoneOffset      330  console.log  navigator.userAgent    Mozilla/5.0  Windows NT 6.1; WOW64; Trident/7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; InfoPath.3; rv:11.0  like Gecko  console.log moment.version   2.0.0          Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,kunchamwarp,closed,10,2017-05-08 17:43:27,2017-05-13 16:13:09,,,,0,1
10300,moment/moment,3950,Allow format to receive options compatible with Intl.DateTimeFormat,  Description of the Issue and Steps to Reproduce:      On some hardware and browsers  [ Intl.DateTimeFormat ] https://developer.mozilla.org/en US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat  is not supported  and some component make use of this API and it would be useful if this module would work seamlessly  defaulting to the native implementation if one is present.      Environment:      Any browser  more specifically those not supporting  Intl.DateTimeFormat .      Usage           const locale =  fr ;  const options =   month:  short   weekday:  short   day:  2 digit   ;  const df = moment.DateTimeFormat locale  options ;    df.format new Date   ;  //  lun. 08 mai          Something like this  using [Meterial UI] http://www.material ui.com/ /components/date picker          <DatePicker        hintText= fr locale         DateTimeFormat=  moment.DateTimeFormat          okLabel= OK         cancelLabel= Annuler         locale= fr       />     ,yanickrochon,closed,2,2017-05-08 20:58:23,2017-05-10 13:22:53,,,,0,1
10299,moment/moment,3951,Unreachable code warnings  3927   fix,Removed unnecessary break statements per issue  3927 ,tulls5o7,closed,4,2017-05-09 01:48:55,2018-03-05 08:36:04,,Discussion,,,1,1
10298,moment/moment,3952,[locale] zh cn zh hk zh tw: Change date formats according to CLDR,fixing for locale formats,monkeycon,closed,5,2017-05-09 10:34:05,2017-12-17 00:28:41,,Pending Next Release,,,1,1
10297,moment/moment,3953,America/La_Paz timezone comes back as BOT  Bogota ,Moment  .tz  America/La_Paz  .format  z   =>  BOT     Bogota is  5  while La Paz is  4 GMT.    This happens both in nodeJS as well as in the browser.,roymap,closed,1,2017-05-09 21:46:41,2017-05-11 17:07:24,,,,0,1
10296,moment/moment,3954,Datepicker timeformat conversion,Hi guys   Is it possible momentjs dateformat format is different than datepicker s?  I really would like to provide a constant to my app with a required date format like   mm/dd/yy    This is works by datepicker  but If i get the formatted date from datepicker  and try to parse with moment with same format I got very different and wrong date.    How should I solve this?    Example:     console.log date JS_DATE_FORMAT moment date JS_DATE_FORMAT .format JS_DATE_FORMAT  ;   > 05/10/2017    mm/dd/yy   05/sze/yy,csimpi,closed,1,2017-05-10 18:30:54,2017-05-13 16:39:04,,,,0,1
10295,moment/moment,3955,Duration not updating with ReactJS setState execution,  Description of the Issue and Steps to Reproduce:    Clone down https://github.com/pbarbiero/basic electron react boilerplate  Implement basic stopwatch functionality in App.js parent component     Please include the values of all variables used.     Initial component declaration:     class App extends React.Component              constructor                super              this.state =                  status: timerStates.IDLE                 currentTime: null                 startTime: null                 duration: null             ...     Function to advance stopwatch based on difference between startTime and currentTime:       tick            now = new Moment              this.incrementer = setInterval    =>                  this.setState                      currentTime: now                     duration: Moment.duration now.diff this.state.startTime                                    ipcRenderer.send  synchronous message   this.state.duration                 console.log this.state.duration.seconds                  1000                 Environment:    Electron on MacOS 10.12.3  Chrome 57.0.2987.133  64 bit     My real question: how do I create a ReactJS stopwatch in Electron using MomentJS? Before pausing  I simply need to calculate the difference between my currentTime and startTime. But after pausing  my _new_ currentTime is  currentTime   pausedTime . How does this value persist into the future and represent itself in terms of ReactJS state and props?    NOTE: How do I format my code to include proper whitespace and indentation?,naheller,closed,1,2017-05-11 02:33:18,2017-05-13 16:42:12,,,,0,1
10294,moment/moment,3956,Weeksdaysmin does not take into account locale capitalization.,  Description of the Issue and Steps to Reproduce:      When executing:       JS  moment.weekdaysMin true          The locale weekdays that are returned do not take into account locale settings when it comes to capitalization. For example in dutch the days that are returned are as following:       JS  [ Ma    Di    Wo    Do    Vr    Za    Zo ]         In Dutch however days are written without a capital letter. In german however they are written with a capital so I can not simply do something like  toUpperCase .    I am uncertain if this is a bug or if I am suppose to use something else for this. If you need any more information please let me know.,stephan-v,closed,2,2017-05-11 09:12:31,2017-05-13 16:49:00,,,,0,1
10293,moment/moment,3957,isSame comparison not timezone sensitive,  Description of the Issue and Steps to Reproduce:      I have two dates created with different timezone offsets  however both share the same date/time in their respective timezones. When I do an    isSame    comparison on    day    moment returns    false   .       js  let london = moment  2017 05 08T01:00:00 0100  .tz  Europe/London         singapore = moment  2017 05 08T01:00:00 0800  .tz  Asia/Singapore  ;    london.isSame singapore   day   // false         Both occurred on Monday  8th May 2017.    Existing tests for    isSame    only diff up to a year so are missing this https://github.com/moment/moment/blob/68a68b8730fbb69515ddbfb1d62bcfe34a484ae1/src/test/moment/is_same.js L143    Using    valueOf    in the comparison functions will lose the timezone awareness of the Moment objects converting them back to UTC. https://github.com/moment/moment/blob/497f918515ae6ab900f008f19523b1e4ae5e2450/src/lib/moment/compare.js L38      Environment:      Chrome 58 on Mac OS Sierra,absolutehype,closed,2,2017-05-11 17:07:29,2017-05-13 17:08:58,,,,0,1
10292,moment/moment,3958, Ordinal  for year?,In Chinese  we use      and   as ordinal for day  month and year respectively  actually they are more of units than ordinals in Chinese . For example  the date of this issue reported in Chinese format is 2017 5 12      I can format desired month and day by using ordinal formatting:       moment  .format  Mo   ===  5  ;  moment  .format  Do   ===  12  ;       How can I achieve the same for year?    I know I can get the full date format by using longDateFormat  like  ll   but sometimes I only want the year part.    Now I use updateLocale to override one of the longDateFormat to  YYYY   for such formatting purpose. Can we have a better way to handle this?    Ways I can think of:  1. adding  Yo  for such formatting purpose  2. adding customised format like longDateFormat. ,chochihim,open,0,2017-05-12 03:06:38,0000-00-00 00:00:00,,Enhancement,Language,,,0,1
10291,moment/moment,3959,It is not possible to parse correctly formatted Spanish date in DD MMM YYYY format,  Description of the Issue and Steps to Reproduce:    It is not possible to parse correctly formatted Spanish date in DD MMM YYYY.  The issue was supposed to be fixed in [ 1234] https://github.com/moment/moment/issues/1234  but it seems to work only for formatting values  not for parsing them. The problem is caused by the incorrect expectation of the dot character after the shortened month for MMM pattern.    When parsing is involved the condition on line 21 in [es.js] https://github.com/moment/moment/blob/develop/locale/es.js  that checks for   MMM   occurrence is not triggered because  format  parameter is not forwarded in this case.    You can see the issue in this test case:  [https://jsfiddle.net/0yxe7oev/] https://jsfiddle.net/0yxe7oev/       Environment:    Chrome 58  Windows 10  Latest moment.js      Other information that may be helpful:    Fri May 12 2017 15:40:05 GMT 0200  Central Europe Daylight Time   VM27369:2 5/12/2017  3:40:05 PM  VM27369:3  120  VM27369:4 Mozilla/5.0  Windows NT 10.0; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/58.0.3029.96 Safari/537.36,xMort,closed,2,2017-05-12 13:47:48,2017-12-19 08:45:12,,Language,,,0,1
10290,moment/moment,3960,Invalid ISO string for durations with mixed sign,Creating durations with mixed signs work as expected when used in calculations. However  the string representation is incorrect.    Following example shows two different ways to create such a mixed sign duration  by subtracting and by directly parsing an ISO duration        javascript  var moment = require  moment  ;        // Create duration of 3 months MINUS 2 days:    var a = moment.duration 3   M  ;  var b = moment.duration 2   d  ;  var c = a.subtract b ;    console.log c.toString    c.toISOString   ; // P3M2D P3M2D    ERROR  should be P3M 2D        // Different method: parse an ISO duration directly    var d = moment.duration  P3M 2D  ;    console.log d.toString    d.toISOString   ; // P3M2D P3M2D    ERROR  should be P3M 2D        // however  both work as excpected when used:    console.log moment.utc  2017 01 01  .add c .toISOString    ;  // 2017 03 30T00:00:00.000Z    correct: 3 month minus 2 days added  console.log moment.utc  2017 01 01  .add d .toISOString    ;  // 2017 03 30T00:00:00.000Z    correct: 3 month minus 2 days added        // so the bug is probably in toString   / toISOString   only       ,balagge,closed,21,2017-05-12 15:59:22,2017-10-09 22:48:55,,Bug,Up-For-Grabs,,,0,1
10289,moment/moment,3961,NL and BE locale weekDaysMin should not be capitalized  updated to lowercase.,Authors:    @jorisroling @middagj     I have not included any changes to the unit tests since they were left unaffected. Any dutch grammer book will tell you that days are to be written without a capital letter but for a quick reference to wikipedia:    https://nl.wikipedia.org/wiki/Hoofdletter_in_de_Nederlandse_spelling Perioden    If you want more trusted resources I will try my best to find them.    Google translate:    >   Periods    Time formats like the names of weekdays  months  seasons are written in small letters. Recently  this also applies to historical and geological periods.    Since I have seen more people contributing this as a source  here you go:    http://www.localeplanet.com/java/nl/index.html  http://www.localeplanet.com/java/nl BE/index.html  http://www.localeplanet.com/java/nl NL/index.html    All of these confirm the pull request.,stephan-v,closed,9,2017-05-14 10:23:24,2017-08-03 02:21:26,,Pending Next Release,,,1,1
10288,moment/moment,3962,momentjs.cn resource error,fonts.useso.com has stop the service  you may change to [cdn.baomitu.com] https://cdn.baomitu.com/index/fonts . Or you may can use the fonts directly.,lushijie,closed,1,2017-05-15 07:51:21,2017-05-18 01:37:40,,,,0,1
10287,moment/moment,3963,[bugfix] Ensure integer milliseconds for durations,There is an issue when using some arbitrary milliseconds as a duration and format as an ISO 8601 string.    Take a look at this example:         moment.duration  ms: 157115  .toISOString           or         moment.duration  s: 157.115  .toISOString           will returned  PT2M37.11500000000001S  instead of   PT2M37.115S .    As the original value gives only 3 decimal places in addition to [ISO8601 Times] https://en.wikipedia.org/wiki/ISO_8601 Times  s milliseconds.    PS. I also do an extra work by aligning some misalign export ; ,spywhere,closed,5,2017-05-15 10:36:51,2017-10-25 00:58:44,,rewrite,,,1,1
10286,moment/moment,3964,[locale] ru: Capitalize month names,,armenavetisyan,open,3,2017-05-15 19:25:48,0000-00-00 00:00:00,,Needs Revision,locale approval needed,,,1,1
10285,moment/moment,3965,constructor with  Week of Year  ISO   identifier produces wrong date,  Description of the Issue and Steps to Reproduce:       javascript  var from = moment  2017 01 01T08:00:00    YYYY [W]WWZ  ;  var to = moment  2017 01 09T08:00:00    YYYY [W]WWZ  ;  console.log to.diff from   weeks   ;  // 0       whereas the expected diff would be  1 .    inspecting  from  and  to  also shows:     javascript  from:      _d = Mon Jan 02 2017 02:00:00 GMT 0100  CET   to:      _d = Mon Jan 02 2017 10:00:00 GMT 0100  CET        which seems off.      Environment:    MomentJS 2.18.1  with locales  minified version    macOS 10.12.4 with    Chrome 58.0.3029.110  64 bit      Safari 10.1  12603.1.30.0.34     node 7.7.1     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     Tue May 16 2017 23:09:00 GMT 0200  CEST     console.log  new Date   .toLocaleString     2017 5 16 23:09:00    console.log   new Date   .getTimezoneOffset      120    console.log  navigator.userAgent   Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_4  AppleWebKit/537.36  KHTML  like Gecko  Chrome/58.0.3029.110 Safari/537.36    console.log moment.version   2.18.1     ,vobujs,closed,2,2017-05-16 21:12:32,2017-05-18 18:02:46,,Forgiving parsing,,,0,1
10284,moment/moment,3966,Bug in moment parse date,When reviewing a date and a format  the parse date not validate the input format.       js  //Wrong isValid  moment  16/031/19921122222    DD/MM/YYYY  .isValid   //true    //Correct isValid  moment  16/031/19921122222    DD/MM/YYYY  .isValid   //false         The parse is right?    What function validate for an entry date for the format?,marlonmleite,closed,1,2017-05-17 21:30:55,2017-05-18 17:42:51,,Forgiving parsing,,,0,1
10283,moment/moment,3967,using isBetween to compare only time part,Hi  awesome lib     there is a given time range :   start :  10:00   end: 14:00     and I want to use moment to see whether the current time only time  is inside the given range.  How can I do that ? thanks.,Symous,closed,2,2017-05-19 07:56:42,2017-05-24 18:18:12,,,,0,1
10282,moment/moment,3968,Invalid Date in IE 11,  Description of the Issue and Steps to Reproduce:    Basically  calling  moment    in Internet Explorer 11 gives an  Invalid Date . If I pass  new Date    to  moment new Date      it behaves as expected. My guess is that the constructor passes in  NaN  to  new Date NaN    like so  and this is giving this unexpected behavior.     Please include the values of all variables used.      JS  var now = moment  ;  console.log now ;  // Should dump out  Invalid Date     var now = moment new Date   ;  console.log now ;  // Should dump out whatever the local time is           Environment:    Internet Explorer 11 on Windows 10.    It is worth mentioning that I am using moment.js from a CDN through require.js and do not have any localization libraries loaded.    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log  new Date   .toLocaleString    // Actually returns  Invalid Date   console.log  new Date   .getTimezoneOffset    // 240  console.log moment.version  // 2.18.1        EDIT : I updated the instances of  Moment  to  moment  for clarity.,thegrumpysnail,closed,4,2017-05-21 02:00:34,2017-05-23 19:23:57,,,,0,1
10281,moment/moment,3969,Default to strict parsing  v3 ,This was listed in https://github.com/moment/moment/issues/3775 as v3.    There are a few things to consider:      biggest issue   : a lot of locale tests fail  I m not even sure how much strictness can we expect from them and how much work is required to fix locale definitions and tests for this to fly    meridiem might be missing  should we handle that in strict  297     array of formats has a bunch of logic that does not require strict to work  should we just force strict on it too  or have some leeway     X  also parses  X.S    X.SS  and  X.SSS  so the latter fail in strict mode     str Z   note the space  does not count as ISO  so it won t pass in strict  non strict is going to the Date constructor IMHO   ,ichernev,open,0,2017-05-22 14:31:46,0000-00-00 00:00:00,,Breaking change,Needs docs,,,1,1
10280,moment/moment,3970,Add new function to get Semi annual or Half year number,  Description of the Issue and Steps to Reproduce:    For some business using there is the demand for the semi annual time period  we can add a new   function like following:     js  moment  .semiAnnual  ; // 1  moment  .halfYear  ; // 1           Environment:    Chrome 58  Node.JS >=7.9.0 on macOS Sierra 10.12.4 / Windows 10      Other information that may be helpful:      The time zone setting of the machine the code is running on  UTC 08:00  Asia/Taipei     The time and date at which the code was run  moment  2017 05 23T12:32:22.679  ,mxgit1090,closed,3,2017-05-23 04:37:45,2017-05-23 06:15:51,,,,0,1
10279,moment/moment,3971,Moment gives different utcOffset   answers depending on how object is init d,  Description of the Issue and Steps to Reproduce:      Moment objects created version a UTC string  e.g.  1986 03 25T00:00:00Z   are initialized in the wrong  local  time zone. I m in GMT 7 but the new objects are created as GMT 8. If I create a new Moment object with no string  e.g. moment    it does return the correct GMT 7 offset.     Please include the values of all variables used.     I used moment    .format    and .utcOffset        Environment:       Examples: Chrome 49 on OSX  Internet Explorer 10 on Windows 7  Node.JS 4.4.4 on Ubuntu 16.0.4     Chrome 58 and Firefox 53 on macOS 10.12     Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.       Other information that may be helpful:      The time zone setting of the machine the code is running on  Should be GMT 7  as of 5/22/17     The time and date at which the code was run  May 22  2017 around 10:43 PM GMT 7    Other libraries in use  TypeScript  Immutable.js  etc     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     // Mon May 22 2017 22:43:58 GMT 0700  PDT   console.log  new Date   .toLocaleString     // 5/22/2017  10:43:58 PM  console.log   new Date   .getTimezoneOffset     // 420  console.log  navigator.userAgent   // Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_5  AppleWebKit/537.36  KHTML  like Gecko  Chrome/58.0.3029.110 Safari/537.36  console.log moment.version   // 2.18.1        Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer.     Example:     js  var m = moment  1986 03 25T00:00:00Z  ;  document.write  UTC date automatically in local time zone  should be  7 :    m.format   ;  document.write  <br />  ;    document.write  new object  no parameters  has correct time zone though:  ;  document.write moment  .utcOffset   / 60 ;  document.write  <br />  ;     ,cthielen,closed,1,2017-05-23 05:45:26,2017-05-24 02:06:33,,,,0,1
10278,moment/moment,3972,IE11 moment js date formatting for mm/dd/yyyy gives a correct date for invalid input 45/45/1,  Description of the Issue and Steps to Reproduce:    moment  45/45/1    MM/DD/YYYY  .format  MM/DD/YYYY   returns a valid date instead of NAN     Please include the values of all variables used.       Environment:     Internet Explorer 11 on Windows 7  Please see the screenshot.   [ie11 date] https://cloud.githubusercontent.com/assets/11211219/26350659/9bcd075e 3fd1 11e7 9c56 d1c8b2649950.PNG      45/45/1  result in 10/15/0004 which is valid date.     Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.       Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     Tue May 23 2017 16:34:13 GMT 0530  India Standard Time   console.log  new Date   .toLocaleString      5 / 23 / 2017   4 : 34 : 29   PM  console.log   new Date   .getTimezoneOffset      330  console.log  navigator.userAgent    Mozilla/5.0  Windows NT 6.1; WOW64; Trident/7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; InfoPath.3; rv:11.0  like Gecko  console.log moment.version   2.0.0          Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,kunchamwarp,closed,5,2017-05-23 10:35:38,2017-05-23 19:27:52,,,,0,1
10277,moment/moment,3973,Time format for de ch is weird,The Time format for de ch was taken from a document that describes how the government writes official documents. This document does not necessarily describes how date and time is formatted outside of this.    People in Switzerland primarily use  HH:mm  format and not  HH.mm  format. This is also what computers  linux windows  use by default when set to that locale. In Windows the dot is not even one of the supported choices in the language settings for Switzerland.    I recommend changing the time formats to  HH:mm  and  HH:mm:ss .    Various documents from the government I have  for example tax forms  use a colon instead of a point in their time format. Documents generated by the governments online system also use this way of writing time instead.    People using computers expect  HH:mm  and not  HH.mm . ,AyrA,closed,7,2017-05-23 11:59:35,2017-12-19 08:24:04,,Language,,,0,1
10276,moment/moment,3974,moment  .diff   sometimes returning  0,When using moment  .diff moment new Date     days   sometimes it s returning   0 ,sasikumar25,closed,6,2017-05-23 12:49:16,2017-05-30 15:24:43,,Troubleshooting,,,0,1
10275,moment/moment,3975,calendar sameElse garbled output,  Description of the Issue and Steps to Reproduce:    I would like to use .calendar with .fromNow being returned in the  sameElse .  I keep getting some garbled results.         moment  2017 05 16T18:00:00        .endOf  day        .calendar null             sameDay:  [Today]            nextDay:  [Tomorrow]            nextWeek:  dddd            lastDay:  [Yesterday]            lastWeek:  [Last] dddd            sameElse: function now   return this.fromNow  ;                   Everything works fine except for the  sameElse  section.  The output is gibberish.  If I console.log this  from within sameElse  I do get a valid moment date object that correctly represents the date being passed to it.    Example: the above  sameElse  will output  6 2pmy59 pmgo .  For reference: todays date is 2017 05 23        Environment:    Chrome 57 and Microsoft Edge on Windows 10    If you are reporting an issue  please run the following code in the environment you are using and include the output:       console.log   new Date   .toString    = Tue May 23 2017 08:50:22 GMT 0400  Eastern Daylight Time   console.log  new Date   .toLocaleString    = 5/23/2017  8:50:22 AM  console.log   new Date   .getTimezoneOffset    = 240  console.log  navigator.userAgent  = Mozilla/5.0  Windows NT 10.0; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/58.0.3029.110 Safari/537.36  console.log moment.version  = 2.18.1       ,scrambled2k3,closed,2,2017-05-23 12:56:03,2017-05-23 14:32:47,,,,0,1
10274,moment/moment,3976,how can i validate without this error?,  Description of the Issue and Steps to Reproduce:       text  deprecation warning: value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date    which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/ /warnings/js date/ for more info.  Arguments:        Ciao   How are you?  I just want to validate  but it says i needs RFC? So how can I validate?       javascript   const m = moment scope.model ;       But it shows and error  when I want to validate. How can I get rid of this error  before I validate???  ,p3x-robot,closed,2,2017-05-24 10:56:50,2017-05-24 18:02:44,,,,0,1
10273,moment/moment,3977,French locale is used by default,When I try to create new moment date without setting locale  date has french locale.    Environment  Node.JS v.6.9.1 on Ubuntu 16.0.4    Example of usage:  console.log koa.request.body.startDate ; //return _2017 05 25_  console.log moment koa.request.body.startDate   YYYY MM DD  .locale   ; //return   fr      This bug is replicated locally and on production  which has the same environment  but different timezone.         console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version      Result:  Thu May 25 2017 10:56:52 GMT 0300  MSK   5/25/2017  10:56:52 AM   180  2.10.6    ,nastya-kostyukova,closed,17,2017-05-25 08:04:09,2018-03-05 08:45:31,,Bug,Up-For-Grabs,,,0,1
10272,moment/moment,3978, undefined  in ukrainian locale,When i m set localization to  uk   in drop down menu i got  undefined  instead of month name. Got this bug in datetimepicker  in datepicker all works fine   sorry for my english     Environment: Node.JS v7.8.0 on Ubuntu 16.0.4    console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version     Result:  Thu May 25 2017 17:49:38 GMT 0300  EEST   5/25/2017  5:49:38 PM   180  Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/58.0.3029.81 Safari/537.36  2.10.3,Torondor27,closed,4,2017-05-25 14:48:05,2017-06-14 17:25:52,,Troubleshooting,,,0,1
10271,moment/moment,3979,Support Moment Development / Maintainers,I like to show support for projects that I love  and it doesn t seem like Moment is set up to accept donations.    Are there any plans to get Moment on something like https://opencollective.com so those of us who want to see Moment succeed but are mind boggled by DateTimes can show support?    For something like Open Collective  I think all it requires is a loose concept of  team  and then you can start accepting backers and using funds transparently. If a few backers could help core maintainers go to meetups  speak at conferences  etc.  Moment could do even more great work with wider reach and more community input.     How can I give you my dollars? ,rockerest,closed,3,2017-05-26 04:24:46,2017-05-29 02:49:51,,,,0,1
10270,moment/moment,3980,Incorrect month diff when time involved,Adding some time to last day of month provides incorrect results on months diff        const a = moment [2017 1 28 1] ; // 2017 02 28T01:00  const b = moment [2017 2 29 1] ; // 2017 03 29T01:00  const c = moment [2017 2 31] ;   // 2017 03 31T00:00  // a < b < c    console.log b.diff a   M   ; // b   a === 1  console.log c.diff a   M   ; // c   a === 0   // cant be true  c almost 2 days later than b  // c   a = c   b   b   a = c   b   1 >= 1         Tested with Crome 58 and Node 7.10.0       Fri May 26 2017 19:30:10 GMT 0300  26.05.2017  19:30:10   180  Mozilla/5.0  Linux; Android 6.0; Nexus 5 Build/MRA58N  AppleWebKit/537.36  KHTML  like Gecko  Chrome/58.0.3029.110 Mobile Safari/537.36  2.18.1       ,standy,open,3,2017-05-26 16:53:34,0000-00-00 00:00:00,,Bug,,,0,1
10269,moment/moment,3981,No localization for relative seconds,There is no localization for relative seconds  actually looks like in all languages .  Consider the following example:     javascript  moment.relativeTimeThreshold  ss   0     var t = moment  ; t.subtract  seconds:  1  ; t.toNow    //  1 seconds ago   // NOTE   not  second   but  seconds     moment.locale  ru    var t = moment  ; t.subtract  seconds:  1  ; t.toNow    //  1 seconds         var t = moment  ; t.subtract  seconds:  2  ; t.toNow    //  2 seconds         var t = moment  ; t.subtract  seconds:  3  ; t.toNow    //  5 seconds                with this patch  for  ru  and  uk  languages :     javascript  var t = moment  ; t.subtract  seconds:  1  ; t.toNow    //  1                 var t = moment  ; t.subtract  seconds:  2  ; t.toNow    //  2                 var t = moment  ; t.subtract  seconds:  3  ; t.toNow    //  5                       Also this may be used with future work for duration formats. Without plural seconds locales seems inconsistent anyway.  please consider see this patch for ru/uk  3860,vgavro,closed,0,2017-05-28 22:33:38,2017-12-17 00:29:32,,Enhancement,,,0,1
10268,moment/moment,3982,Locale fr    moment  maintenance    DD MMMM YYYY   gives a valid date,  Description of the Issue and Steps to Reproduce:         js  require  moment  .locale  fr  ;  moment  foobar    DD MMMM YYYY  .isValid  ; // gives false  which is expected  moment  maintenance    DD MMMM YYYY  .isValid  ; // gives true  which is NOT expected.       For the records  I also noticed that        js  moment  maintenant    DD MMMM YYYY  .isValid   //gives true too.   Maintenant  means  now  in french  and it is close to  maintenance      // and   moment  maintenance    DD MMM YYYY  .isValid   // true  // but  moment  maintenance    DD MM YYYY  .isValid   // false       And when I do not use the  fr  locale  I get expected falsy results.  I guess there are some mistakes when using  fr  locale  a string close to  maintenant  and a certain  month  pattern for decoding...    Any idea ?    Thx in advance.    Environment:             node  v  v7.0.0    npm  v  4.5.0         Other information         js  console.log   new Date   .toString    // Mon May 29 2017 09:35:15 GMT 0200  Paris  Madrid  heure d  t     console.log  new Date   .toLocaleString    // 2017 05 29 09:35:15  console.log   new Date   .getTimezoneOffset    //  120  // console.log  navigator.userAgent   console.log moment.version  // 2.18.1       ,msieurtoph,closed,2,2017-05-29 07:48:14,2017-05-29 12:46:52,,Forgiving parsing,,,0,1
10267,moment/moment,3983,Fixed problem when using  module :  none  in tsconfig.json,,alexeysankov,closed,2,2017-05-29 12:38:54,2017-08-03 09:31:55,,,,1,1
10266,moment/moment,3984,import the specific methods that I use,does moment allow us to  isolate imports so we only import the specific methods that you use? The background of asking this question is I m trying to reduce bundle size in my project,ikzjfr0,closed,1,2017-05-30 02:21:34,2017-05-30 02:56:44,,,,0,1
10265,moment/moment,3985, Invalid date  for RFC 2822 date time format  if changing locale,Starting from version 1.18  for some locales  proper RFC 2822 date time format shows like  Invalid date       Steps to Reproduce:         html  <script src= https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment with locales.js ></script>  <script>      var dateRFC2822 =  Mon  06 Mar 2017 21:22:23  0000 ;      var locales = moment.locales  ;      for  var index in locales             var locale = locales[index];          moment.locale locale ;          console.log locale    :     moment dateRFC2822 .fromNow   ;         </script>         JS Bin: http://jsbin.com/wepokowuro/edit?html console output  ,cravler,closed,6,2017-05-30 08:09:59,2017-08-07 01:11:18,,Bug,,,0,1
10264,moment/moment,3986,Dutch locale issues,It seems that the Dutch locale currently doesn t conform to how it should be used. For example  the minimized   dd   day names are capitalized  ie: Ma  Di  Wo  etc. These should be lower cased: ma  di  wo.    Alternatively we could use the ddd format which has lower cased names  however  these have an additional period which we sometimes need but not always. I think this should be controlled through the format string rather than being hard coded.    Basically we re expecting the following:      dd DD MM: di 30 05    ddd DD MM: di. 30 05,jmezach,closed,3,2017-05-30 09:38:39,2017-06-12 18:38:32,,Language,,,0,1
10263,moment/moment,3987,Chinese datetime string broken in 2.18.1 after working in 2.10.6,  Description of the Issue and Steps to Reproduce:     2015 8 3      6 06   is the string in question     H should return 18  but returns 6.  Returns 18 on 2.10.6  Return 6 on 2.18.1     Please include the values of all variables used.      format = [ YYYY    LT    LTS    L    l    LL    ll    LLL    lll    LLLL    llll    D MMM YYYY    H:mm    ddd  YYYY MMM D [] HH:mm:ss Z    ddd  YYYY MMM D [] HH:ss Z    ddd MMM D  YYYY h:mma    ddd MMM D  YYYY ha    MMM D  YYYY h:mma    MMM D  YYYY ha    MMM D [ ] HH:mm    MMM D [ ] HH    dddd  MMMM D    ddd YYYY MMM D    ddd  MMM D    YYYY MMMM D HH:mm    YYYY MMMM D HH    YYYY MMMM D    YYYY MMM D    MMM D HH:mm    MMM D HH    MMM D    YYYY M D    HH:mm    HH    H    dddd    ddd ]        a = moment.apply null  [ 2015 8 3      6 06    format   zh cn ]        Environment:    Chrome 58 on MacOS Sierra    This behavior is seen in app  and in a barebones html file that just pulls in the momentjs library.    If you are reporting an issue  please run the following code in the environment you are using and include the output:       Tue May 30 2017 12:48:49 GMT 0500  CDT   5/30/2017  12:49:15 PM  300  Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_5  AppleWebKit/537.36  KHTML  like Gecko  Chrome/58.0.3029.110 Safari/537.36  2.18.1     ,gareim,open,1,2017-05-30 17:50:18,0000-00-00 00:00:00,,Language,,,0,1
10262,moment/moment,3988,Wrong plural usage for time in PT BR,There is a problem with the following definitions for Brazilian Portuguese:        javascript      longDateFormat :            LT :  HH:mm            LTS :  HH:mm:ss            L :  DD/MM/YYYY            LL :  D [de] MMMM [de] YYYY            LLL :  D [de] MMMM [de] YYYY [ s] HH:mm            LLLL :  dddd  D [de] MMMM [de] YYYY [ s] HH:mm               calendar :            sameDay:  [Hoje  s] LT            nextDay:  [Amanh   s] LT            nextWeek:  dddd [ s] LT            lastDay:  [Ontem  s] LT            lastWeek: function                   return  this.day   === 0    this.day   === 6  ?                   [ ltimo] dddd [ s] LT  : // Saturday   Sunday                   [ ltima] dddd [ s] LT ; // Monday   Friday                      sameElse:  L                   The string   s  should only be used if the hour  in 24 hour format  is at least 2. If H == 0 or H == 1      should be used instead.       I managed to find a solution for the  calendar  part  I only tested this by extending the locale with  updateLocale  :       javascript      calendar:             sameDay: function     return  [Hoje]      this.hours   < 2 ?  [ ]  :  [ s]       LT ;             nextDay: function     return  [Amanh ]      this.hours   < 2 ?  [ ]  :  [ s]       LT ;             nextWeek: function     return  dddd      this.hours   < 2 ?  [ ]  :  [ s]       LT ;             lastDay: function     return  [Ontem]      this.hours   < 2 ?  [ ]  :  [ s]       LT ;             lastWeek: function                   return  this.day   === 0    this.day   === 6  ?                   [ ltimo] dddd      this.hours   < 2 ?  [ ]  :  [ s]       LT : // Saturday   Sunday                   [ ltima] dddd      this.hours   < 2 ?  [ ]  :  [ s]       LT ; // Monday   Friday                      sameElse:  L                 However  I cannot do the same with  longDateFormat   because its values apparently cannot be functions.    Is there a solution for this  by either editing _pt_br.js_ or extending the locale externally ?     Thank you,viniciusbm,open,1,2017-05-31 01:40:39,0000-00-00 00:00:00,,Language,,,0,1
10261,moment/moment,3989,[locale] pt: Fix capital letters in weekdays,In Portuguese  Portugal  weekdays are in lowercase. So its required that working days will be like  Segunda feira  not as the actual value  Segunda Feira     For those on grammar:  Even the first capital letter is only Ok when in a single word or the first word in a sentence. Regular usage  in the middle of a sentence  it would be all in lowercase.  But we can t control here when it will show one way or the other  so the initial capital letter     Reference: https://ciberduvidas.iscte iul.pt/consultorio/perguntas/meses e dias da semana outra vez/3743,horus68,open,8,2017-05-31 14:23:36,0000-00-00 00:00:00,,Discussion,,,1,1
10260,moment/moment,3990,Uncaught TypeError: key.toLowerCase is not a function,  Description of the Issue and Steps to Reproduce:      Error caused by:         function normalizeLocale key         return key ? key.toLowerCase  .replace  _        : key;            trying to do following:       moment.updateLocale  en          week :            dow : 1                No issues using  moment.locale  or  moment.lang .      Environment:    OS X  Chrome latest       js  Wed May 31 2017 17:07:51 GMT 0200  CEST   VM410:2 5/31/2017  5:07:51 PM  VM410:3  120  VM410:4 Mozilla/5.0  Macintosh; Intel Mac OS X 10_10_5  AppleWebKit/537.36  KHTML  like Gecko  Chrome/58.0.3029.110 Safari/537.36  VM410:5 2.18.1         <strike> Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. </strike>  not sure ,Kyslik,closed,3,2017-05-31 15:18:54,2017-06-14 17:24:16,,Troubleshooting,,,0,1
10259,moment/moment,3991,Possible fix for Issue 3132,Trying to fix at least part of the DST problem. The solution is simple  if time is not set to 23:59  which means that an error occurred  set it properly to 23:59:59:999.    To my understanding  since all days end on 23:59 this should be a fix if the error was that the projected time was early  23:58  or late  00:01 .    I added the switch statement  so that more fixes may be implemented if the condition for endOf  day  is not enough.    I hope that i am not missing something here,kkopanidis,closed,1,2017-06-02 21:32:19,2017-08-03 02:04:10,,,,1,1
10258,moment/moment,3992,Doesn t read hour correctly on some days?,Hello All     I am using momentjs to verify date formats on the client side before uploading data to our server where it is then checked again   but we have found some dates will result in an invalid time being read from the string.    One such example is in the JSfiddle bellow:    http://jsfiddle.net/7jz9oa3e/3/    I have not been able to find a solution  so I am posting here in hopes of it being an obscure problem that it can be fixed.,theshadow124,closed,1,2017-06-03 02:47:40,2017-06-05 05:53:43,,,,0,1
10257,moment/moment,3993,moment.subtract giving false results,I witnessed this weird behavior:    This code:  moment new Date   .subtract 1   months    is actually subtracting  days  instead of  months .  While this one:  moment new Date   .subtract 1   days    is doing the opposite  it is subtracting months.    Please try to reproduce it and fix it ASAP. It s a critical  bug.,AnixPasBesoin,closed,1,2017-06-05 23:20:40,2017-06-06 12:33:16,,,,0,1
10256,moment/moment,3994,Uncaught TypeError: key.toUpperCase is not a function,,shyamneosoft111,closed,0,2017-06-06 12:24:06,2017-06-06 12:24:55,,,,0,1
10255,moment/moment,3995,Get a weekend,Hello. I need to get a weekend from the current date to the month. It is to get the dates of the weekend in the array. This can be done?,LusenkoSasha,closed,3,2017-06-06 22:39:11,2017-06-10 19:01:01,,,,0,1
10254,moment/moment,3997,.add   edge case failure,  Description of the Issue and Steps to Reproduce:      Adding something just less than a month produces unexpected results:    var start = moment  2017 03 01  ;  var dur = moment.duration 1   month  .subtract 1   second  ;  start.add dur .toDate  ;  >> Tue Mar 28 2017 23:59:59 GMT 0200  W. Europe Daylight Time     Expected:  >> Fri Mar 31 2017 23:59:59 GMT 0200  W. Europe Daylight Time     Cause: moment apparently subtracts milliseconds first  then presumably uses daysInMonth   on the intermediate object to subtract 28 days for February. Rather  it should use daysInMonth   on the original object.         Reporting system info  probably completely irrelevant :    console.log   new Date   .toString     >> Wed Jun 07 2017 14:16:24 GMT 0200  W. Europe Daylight Time   console.log  new Date   .toLocaleString     >> 6/7/2017  2:16:47 PM  console.log   new Date   .getTimezoneOffset     >>  120  console.log  navigator.userAgent   >> Mozilla/5.0  Windows NT 6.1; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/57.0.2987.98 Safari/537.36  console.log moment.version   >> 2.18.1  ,JohanRonnblom,closed,8,2017-06-07 12:21:55,2017-10-09 22:32:27,,Bug,,,0,1
10253,moment/moment,3998,locale zh cn  longDateFormat problem,moment/locale/zh cn.js       longDateFormat :            LT :  HH:mm            LTS :  HH:mm:ss            L :  YYYY MMMD             LL :  YYYY MMMD             LLL :  YYYY MMMD Ah mm             LLLL :  YYYY MMMD ddddAh mm             l :  YYYY MMMD             ll :  YYYY MMMD             lll :  YYYY MMMD  HH:mm            llll :  YYYY MMMD dddd HH:mm                moment.localeData  .longDateFormat  LL  ;//YYYY MMMD   Date.format  YYYY MMMD    can t parse right the  MMM   suggest use  YYYY MM D   or other format      Environment:    Chrome 58.0.3029.110 and Node.JS 6.9.4 on Windows 10      Other information that may be helpful:    Time Zone:GMT 8  TypeScript:2.3.3  moment.js:2.18.1  daterangepicker.js:2.1.25    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version        Thu Jun 08 2017 09:54:55 GMT 0800           2017 6 8 09:54:55   480  Mozilla/5.0  Linux; Android 6.0; Nexus 5 Build/MRA58N  AppleWebKit/537.36  KHTML  like Gecko  Chrome/58.0.3029.110 Mobile Safari/537.36  2.18.1  ,xxy1991,open,0,2017-06-08 02:00:08,0000-00-00 00:00:00,,Language,,,0,1
10252,moment/moment,3999,Possibility to handle tertiles  4 month periods ,I have the need to handle tertiles  a third of a year  and it would be very handy to be able to e.g. add and subtract such a period like  moment  .add 1   tertiles    without special handling of that case.    But I suppose that such a feature would implicate other changes as well...,marwej,closed,1,2017-06-08 14:42:16,2017-06-10 18:37:09,,,,0,1
10251,moment/moment,4000,Inconsistent behaviour of  endOf  together with utc  ,  Description of the Issue and Steps to Reproduce:      I m trying to get the end/start dates including time for weeks. The time should be handled as UTC. For this I m running the following to get the end date.        var weekNo = 22;      var end;      var pastWeek = moment  .isoWeeks weekNo ;      console.log pastWeek.endOf  day  .utc   ;      end = pastWeek.endOf  W  .utc  ;      console.log end ;    Unfortunately this results in the following output:        moment.utc  2017 06 01T21:59:59.999 00:00        moment.utc  2017 06 04T23:59:59.999 00:00      From my point of view the time for both moments should be equal which is not the case.      Environment:       Node.JS 7.9.0 on Windows 8.1         Other information that may be helpful:      TZ is Berlin    08.06.2017 16:40    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log moment.version          Output:        Thu Jun 08 2017 16:40:55 GMT 0200  Mitteleurop ische Sommerzeit       2017 6 8 16:40:55       120      2.18.1    ,eBerdnA,closed,1,2017-06-08 14:43:14,2017-06-10 18:30:24,,,,0,1
10250,moment/moment,4001,Add Bambara language  bm ,Adding Bambara locale.   ,estellecomment,closed,3,2017-06-08 17:02:28,2017-08-03 02:22:27,,Pending Next Release,,,1,1
10249,moment/moment,4002,Duration method is not correctly parsing string passed with a positive sign,  Description    I am trying to add or subtract a duration from UTC 0000 hours. I am using  duration  method to create a duration and then passing that into the  add  method. The documentation mentions that support of mixed negative and positive sign was added in V 2.13.0. But using a positive sign is returning  0 . The code is available in this fiddle   https://jsfiddle.net/kshitij/9jqvfk3g/     Code Snippet      javascript  const m = moment  .utcOffset 0 ;  m.set  hour:0 minute:0 second:0 millisecond:0    m.utc  .format  HH:mm      let d = moment.duration   03:30  .asHours  ;  console.log  Positive offset:    d ; // Positive offset: 0  console.log  Positive time:    m.add d   H  .format   ; // Positive time: 2017 06 08T00:00:00Z    let b = moment.duration   03:30  .asHours  ;  console.log  Negative offset:    b ; // Negative offset:   3.5  console.log  Negative time:    m.add b   H  .format   ; // Negative time:  2017 06 07T20:30:00Z         I have tested this on my machine as well as jsfiddle. I had created an issue on StackOverflow for this but didn t get a satisfactory answer  so posting it here https://stackoverflow.com/questions/44430239/momentjs duration is not parsing positive sign correctly?noredirect=1 comment75871221_44430239  ,kshitijb,closed,4,2017-06-08 19:59:50,2017-12-02 23:48:26,,Bug,,,0,1
10248,moment/moment,4003,[pkg] bower: Remove tests from package,This file is 3.5 Mb and it s not needed in production.,rubycut,closed,3,2017-06-09 12:12:05,2017-08-07 00:35:50,,Pending Next Release,,,1,1
10247,moment/moment,4004,Added Gujarati locale for moment,Hi there     I have added required files for Gujarati local please let me know if I missed something.  This is my first contribution for any git repository    ,Kaushik1987,closed,5,2017-06-09 12:43:18,2017-08-03 02:23:32,,Pending Next Release,,,1,1
10246,moment/moment,4005,Formatting the return object of parseZone doesn t handle z correctly,I used  parseZone  to parse a DateTime string into moment object. However  the timezone is incorrect in the formatting result.        javascript  console.log moment.parseZone  2017 06 06T19:35:42 0700  .format  l LT z     => 6/6/2017 7:35 PM UTC  console.log moment.parseZone  2017 06 06T19:35:42 0700  .format  l LT Z     => 6/6/2017 7:35 PM  07:00  console.log moment.parseZone  2017 06 06T19:35:42 0700  .tz  America/Los_Angeles  .format  l LT z     => 6/6/2017 7:35 PM PDT  console.log moment.parseZone  2017 06 06T19:35:42 0700  .tz  America/Los_Angeles  .format  l LT Z     => 6/6/2017 7:35 PM  07:00         The timezone of the first statement should be also  PDT  instead of  UTC . Please check the following jsfiddle link:     [https://jsfiddle.net/hengfengli/rgr27mh7/5/] https://jsfiddle.net/hengfengli/rgr27mh7/5/ ,HengfengLi,open,2,2017-06-09 14:14:16,0000-00-00 00:00:00,,Bug,Timezones,Up-For-Grabs,,,0,1
10245,moment/moment,4006,Turkish calendar   works differently than others,  Description of the Issue and Steps to Reproduce:    The following fails:     javascript  const a = moment.utc 1497172800000 .add 3   days  ;  expect a.calendar 1497172800000  .to.equal   ar amba saat 09:20  ;        So the problem is in the    calendar      function in Turkish:  What should it show:     >  ar amba saat 09:20    What does it show:     > haftaya  ar amba saat 09:20  which means  Wednesday next week at 09:20      What does it show in other locales  eg. English :     > Wednesday at 09:20    The reason is that in [TR locale the calendar object] https://github.com/moment/moment/blob/develop/locale/tr.js L52  includes  Next   haftaya  unlike other locales which do not contain it  eg. [English locale] https://github.com/moment/moment/blob/develop/locale/en gb.js L30  .       Environment:    Happens on all environments  including node  chrome  firefox  etc...   since it s just a mistake in Turkish calendar   object definition.    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     Sun Jun 11 2017 12:29:40 GMT 0300  IDT   console.log  new Date   .toLocaleString     6/11/2017  12:29:40 PM  console.log   new Date   .getTimezoneOffset      180  console.log moment.version   2.18.1       ,3LOK,open,4,2017-06-11 09:33:27,0000-00-00 00:00:00,,Language,,,0,1
10244,moment/moment,4007,[bugfix] Support     for duration components when parsing,Updated regex to support positive sign in addition to a negative sign. The  sign  is assigned a value of 1 if the regex finds     in the beginning.,kshitijb,closed,10,2017-06-11 18:27:48,2017-08-07 00:46:15,,Pending Next Release,,,1,1
10243,moment/moment,4008,added format constants that follow HTML5 input types,This is my first contribution to an open source project.  I ve added the requested constants from  3928 ,nimshory,closed,1,2017-06-12 13:03:33,2017-06-12 13:20:48,,,,1,1
10242,moment/moment,4009,[feature] Add format constants that follow HTML5 input types,This is my first open source contribution.  I ve added format constants that follow HTML5 input types based on  3928.,nimshory,closed,3,2017-06-12 13:26:02,2017-12-15 04:36:13,,,,1,1
10241,moment/moment,4010,Future proof parseTwoDigitYear,Makes parseTwoDigitYear dynamically work out date instead of relying on the year being between 1968 and 2068,jjr2000,closed,2,2017-06-12 14:02:09,2017-06-12 18:47:23,,,,1,1
10240,moment/moment,4011,ios format   bug,Hi I use this lib in an angular/cordova app  and I found a bug that if I have 2 time string:  var time1 =   2017 6 13 8:01:01 ;  var time2 =   2017 06 13 08:01:01 ;    if I use moment time1 .format  HH:mm   it will return invalid date in iOS. and moment time2 .format  HH:mm   works well.    Both time1 and time2 format as expected with Android   Web. :    ,Symous,closed,1,2017-06-13 08:00:53,2017-06-13 22:26:13,,,,0,1
10239,moment/moment,4012,Missing locale  en IN ?,I installed moment@2.18.1 and was looking through the locales available. I assumed there was an en in locale. Upon further inspection  I only saw these en locales:    en au  en ca  en gb  en ie  en nz    Am I missing something? Just for an example for  en IN    l  date format should give  dd/MM/yyyy  but it s giving  MM/dd/yyyy   may be the default one. If there was a file for  en in   it would have been there in longDateFormat. Please suggest.    I am using it like this     var formattedDate = moment dateInput .locale locale .tz timezone .format momentFormat ;  e.g. var formattedDate = moment  1497260107000  .locale   en IN   .tz   Asia/Calcutta   .format   l LT   ;    Above expression gives me result in mm/dd/yyyy h:mm AM/PM format where I was expecting in dd/mm/yyyy h:mm AM/PM where it s giving correct result for  en gb  or  en au  because corresponding locale files are available.,debo-personal,closed,3,2017-06-13 12:59:34,2017-06-13 22:19:49,,,,0,1
10238,moment/moment,4013,Using moment with locales  has no locales,  Description of the Issue and Steps to Reproduce:      command to use another locale like moment.locale  it   always returns  en . moment.locales   command returns   en ]. File being used is moment with locales.js     Please include the values of all variables used.       Environment:    moment.version  2.13.0   Chrome 58 on OSX    In the Chrome Dev console... I get this...     moment.locales    [ en ]  moment.locales    [ en ]  moment.locale  it     en   moment.locales    [ en ]    So how does one utilize moment with locales to use the locales?     ,resistorsoftware,closed,2,2017-06-14 16:03:43,2017-06-14 17:26:43,,Troubleshooting,,,0,1
10237,moment/moment,4014,Remove space between number variable and time unit,There should be no space between number variable and time unit. eg.  5    not  5   ;  8     not  8    ...,luoenzhen,open,5,2017-06-15 06:28:34,0000-00-00 00:00:00,,Needs Revision,,,1,1
10236,moment/moment,4015,Remove space between number variable and time unit,There should be no space between number variable and time unit.  eg.  5    not  5   ;  8     not  8    ...,luoenzhen,open,3,2017-06-15 06:34:12,0000-00-00 00:00:00,,Needs Revision,locale approval needed,,,1,1
10235,moment/moment,4016,moment  .isSame not working,When I try to check whether the current date is same as a given one   I use:     js  var givenDate =  2017 06 15 ;  var result = moment  .isSame givenDate ;       it always return false   so I must write like this:     js  var result = moment moment  .format  YYYY MM DD   .isSame givenDate ;       so it seems like that moment   directly is not supported with isSame method.     But isBetween method works well with this format.     js  var result = moment  .isBetween givenDate  2017 06 18  null  []  ;       ,Symous,closed,1,2017-06-15 06:48:27,2017-06-15 06:52:35,,,,0,1
10234,moment/moment,4017,[locale] tr: Improve calendar text for next/prev week,Turkish locale calendar issue https://github.com/moment/moment/issues/4006    Translations changed as below:   [haftaya]   >  [gelecek]    [ge en hafta]   >  [ge en] ,erhangundogan,closed,2,2017-06-15 11:38:58,2017-08-07 00:59:09,,Pending Next Release,,,1,1
10233,moment/moment,4018,123th of January 2015 is a valid date according to moment,  Description of the Issue and Steps to Reproduce:       js  moment  123.1.2015    D.M.Y  .isValid   === true       It should be false.     I typed it in console on momentjs.org on Chrome on Gentoo Linux  no extra settings. Just the code above.        js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version     Thu Jun 15 2017 15:36:03 GMT 0200  CEST   6/15/2017  3:36:03 PM   120  Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/58.0.3029.110 Safari/537.36  2.18.1     ,kub1x,closed,1,2017-06-15 13:40:32,2017-06-15 17:39:23,,Forgiving parsing,,,0,1
10232,moment/moment,4019,Last day of year is in week 1 for some years,  Description of the Issue and Steps to Reproduce:           moment  2017 12 31T00:00:00  .get  week    1  moment  2016 12 31T00:00:00  .get  week    53  moment  2015 12 31T00:00:00  .get  week    1  moment  2014 12 31T00:00:00  .get  week    1  moment  2013 12 31T00:00:00  .get  week    1  moment  2012 12 31T00:00:00  .get  week    1  moment  2011 12 31T00:00:00  .get  week    53          Please include the values of all variables used.       Environment:      Using Chromium 58.0.3029.110  Developer Build  Built on Ubuntu   running on Ubuntu 16.04  64 bit     Just visit https://momentjs.com/docs/ and open your console and use the version of moment that is there. Apologies if this is actually a bug that has been fixed but hasn t been deployed to the website yet     My timezone is America/Los_Angeles or PDT    If you are reporting an issue  please run the following code in the environment you are using and include the output  I pasted it into the same inspector window where I produced the first part of my report :       console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version     VM240:1 Thu Jun 15 2017 12:15:47 GMT 0700  PDT   VM240:2 6/15/2017  12:15:47 PM  VM240:3 420  VM240:4 Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Ubuntu Chromium/58.0.3029.110 Chrome/58.0.3029.110 Safari/537.36  VM240:5 2.18.1     ,hdon,closed,3,2017-06-15 19:18:06,2017-06-17 19:37:40,,,,0,1
10231,moment/moment,4020,Month documentation out of date,http://momentjs.com/docs/ /get set/month/    > Before version 2.1.0  if a moment changed months and the new month did not have enough days to keep the current day of month  it would overflow to the next month.    > As of version 2.1.0  this was changed to be clamped to the end of the target month.    vs    http://momentjs.com/docs/ /get set/date/    > Note: if you chain multiple actions to construct a date  you should start from a year  then a month  then a day etc. Otherwise you may get unexpected results  like when day=31 and current month has only 30 days  the same applies to native JavaScript Date manipulation   the returned date will be 1st of the following month.  ,ir-fuel,open,1,2017-06-15 19:55:06,0000-00-00 00:00:00,,Documentation,Up-For-Grabs,,,0,1
10230,moment/moment,4021,styling hover,  Description of the Issue and Steps to Reproduce:       Please include the values of all variables used.       Environment:       Examples: Chrome 49 on OSX  Internet Explorer 10 on Windows 7  Node.JS 4.4.4 on Ubuntu 16.0.4      Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.       Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version           Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,climbingshag,closed,1,2017-06-16 16:53:02,2017-06-17 19:25:00,,,,0,1
10229,moment/moment,4022,isBefore returns a different outcome when it is referenced through a variable.,When a moment is compared to null through a reference it returns an unexpected outcome.     moment  .isBefore null   > false    which is expected in my opinion.    When moment   is assigned to a variable m for instance  isBefore null  returns true.         var m = moment    m.isBefore null   > true          isSame and isAfter are working correctly       moment  .isSame null    > false  m.isSame null   > false  moment  .isAfter null   > false  m.isAfter null   > false         ,jrdegroot,closed,3,2017-06-19 12:39:42,2017-07-03 23:19:16,,Troubleshooting,,,0,1
10228,moment/moment,4023,Method parseTwoDigitYear missing from typescript definitions,  Description of the Issue and Steps to Reproduce:    parseTwoDigitYear is not present in the published  moment.d.ts  definition.     Please include the values of all variables used.   N/A      Environment:    moment version 2.17.1  ,chrisleck,closed,5,2017-06-19 22:20:03,2018-03-05 08:13:24,,TypeScript,,,0,1
10227,moment/moment,4024,Modifying leap year to non leap year changes Feb 29 to Mar 1,  Description of the Issue and Steps to Reproduce:    Unlike  .month    since 2.1.0 which maintains the month  and selects the last day  using  .year    to change from a leap year s Feb 29th to a non leap year  results in a Mar 1st instead of the expected Feb 28th.       js  // changing to a non leap year  // UNEXPECTED RESULT  moment  2012 02 29  .year 2017 .format  LLLL   // =>  Wednesday  March 1  2017 12:00 AM   // expected  Tuesday  February 28  2017 12:00 AM     // changing to the following February using  .month   // EXPECTED RESULT  moment  2012 02 29  .month 13 .format  LLLL   // =>  Thursday  February 28  2013 12:00 AM     // changing month on from a month with more days than the shifted to month  // EXPECTED RESULT  moment  2012 07 31  .month 5 .format  LLLL   // =>  Saturday  June 30  2012 12:00 AM            Environment:      Chrome  58.0.3029  OSX 10.12.5         // console output  Tue Jun 20 2017 17:02:07 GMT 1000  AEST   2017 6 20 17:02:07   600  Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_5  AppleWebKit/537.36  KHTML  like Gecko  Chrome/58.0.3029.110 Safari/537.36  2.18.1     ,haxxxton,closed,10,2017-06-20 07:04:00,2017-10-09 23:03:08,,Bug,Up-For-Grabs,,,0,1
10226,moment/moment,4025,Webpack bundling causing ALL locales to get included,https://github.com/moment/moment/blob/b8a7fc310eb3625e83fc0c8f1ea2840fa83c7378/src/lib/locale/locales.js L55    This line is effectively causing webpack to load ALL locales  thus making bundle quite big by default.     Webpack would understand if we could make this if a dead path  but as we want to achieve a node detection   dynamic imports I dont know how to tackle this. Any ideas?,Andarist,open,12,2017-06-20 14:07:51,0000-00-00 00:00:00,,,,0,1
10225,moment/moment,4026,moment.duration  .format is not a function,  Description of the Issue and Steps to Reproduce:    moment.duration 123   seconds  .format   it gives me an error  moment.duration  .format is not a function    Please include the values of all variables used.    123    192.343     Environment:       Examples: Chrome 49 on OSX  Internet Explorer 10 on Windows 7  Node.JS 4.4.4 on Ubuntu 16.0.4   Chrome 59 on OSX NodeJS 6.10   Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.       Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version           Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,Zorig,closed,1,2017-06-21 08:54:41,2017-06-23 16:47:25,,,,0,1
10224,moment/moment,4027,Requiring unknown module  ./locale/zh HK ,My index.js for my React native project.       import moment from  moment ;  import  moment/min/locales.min ;  moment.locale  zh hk  ;         When I run on Simulator is work fine  but when I try to run it on my iOS device I got the following error:       2017 06 21 17:10:59.759423 0800 MyApp[1704:520872] [DYMTLInitPlatform] platform initialization successful  2017 06 21 17:11:00.804 [error][tid:com.facebook.react.JavaScript] Requiring unknown module  ./locale/zh HK .  2017 06 21 17:11:00.808916 0800 MyApp[1704:520879] Requiring unknown module  ./locale/zh HK .  2017 06 21 17:11:00.838 [fatal][tid:com.facebook.react.ExceptionsManagerQueue] Unhandled JS Exception: Requiring unknown module  ./locale/zh HK .  2017 06 21 17:11:00.838197 0800 MyApp[1704:520861] Unhandled JS Exception: Requiring unknown module  ./locale/zh HK .  2017 06 21 17:11:00.862866 0800 MyApp[1704:520861]     Terminating app due to uncaught exception  RCTFatalException: Unhandled JS Exception: Requiring unknown module  ./locale/zh HK .   reason:  Unhandled JS Exception: Requiring unknown module  ./locale/zh HK .  stack:  n@2:748  o@2:414  i@2:266  Ke@440:16633  st@440:17737  et@440:16721  <unknown>@377:1942  <unknown>@362:458  value@20:3118  <unknown>@20:1189  value@20:2278  value@20:1159         First throw call stack:   0x187206fe0 0x185c68538 0x187206f28 0x100117820 0x100111f14 0x18720ce80 0x1871022c4 0x187106e9c 0x10011577c 0x10013ab38 0x10013a4e8 0x100eb5a50 0x100eb5a10 0x100ec32e8 0x100eb9634 0x100ec3810 0x100ec5630 0x100ec539c 0x1862c7100 0x1862c6cac   libc  abi.dylib: terminating with uncaught exception of type NSException   lldb           Anyone can help?,calvintmfan,closed,2,2017-06-21 09:32:25,2017-08-01 01:52:38,,Troubleshooting,,,0,1
10223,moment/moment,4028,Feature: Interest in supporting a Rails like distance_of_time_in_words?,Adapted from: https://gist.github.com/sulf/1157909/62a16f4c8204022b8f6d40716b81eef39ded6850  Would be good to translate the [full featured rails version] https://github.com/rails/rails/blob/master/actionview/lib/action_view/helpers/date_helper.rb  as I m sure this version also has mistakes in it that I have not corrected.        export function time_ago_in_words  from_date: Date  include_seconds: boolean = false             return distance_of_time_in_words from_date  new Date     include_seconds  include_tense: true  ;               interface Options            include_seconds: boolean;          include_tense: boolean;               const default_options =            include_seconds: true           include_tense: true        ;        export function distance_of_time_in_words  from_date: Date  to_date: Date  options: Partial<Options> =                  const full_options: Options = Object.assign     default_options  options ;            const from_time = from_date.getTime  ;          const to_time = to_date.getTime  ;            const diff = to_time   from_time;          const distance_in_minutes = Math.round Math.abs diff  / 60000 ;          const distance_in_seconds = Math.round Math.abs diff  / 1000 ;          const tense = full_options.include_tense ?  diff > 0 ?   from now  :   ago   :   ;          if  0 <= distance_in_minutes    distance_in_minutes <= 1                   if   full_options.include_seconds                     if  distance_in_minutes === 0                         return  less than 1 minute    tense;                    else                        return      distance_in_minutes     minute    tense;                                                  if  distance_in_seconds < 5                     return  less than 5 seconds    tense;                else if  distance_in_seconds < 10                     return  less than 10 seconds    tense;                else if  distance_in_seconds < 20                     return  less than 20 seconds    tense;                else if  distance_in_seconds < 40                     return  less than half a minute    tense;                else if  distance_in_seconds <  60                     return  less than 1 minute    tense;                else                    return  1 minute    tense;                             else if  distance_in_minutes < 45                 return      distance_in_minutes     minutes    tense;            else if  distance_in_minutes < 90                 return  about 1 hour    tense;            else if  distance_in_minutes < 1440                 return  about      Math.round distance_in_minutes / 60.0       hours    tense;            else if  distance_in_minutes < 2530                 return  1 day    tense;            else if  distance_in_minutes < 43200                 return       Math.round distance_in_minutes / 1440.0       days    tense;            else if  distance_in_minutes < 86400                 return  about 1 month    tense;            else if  distance_in_minutes < 525600                 return       Math.round distance_in_minutes / 43200.0       months    tense;            else                const distance_in_years = distance_in_minutes / 525600;              const minute_offset_for_leap_year =  distance_in_years / 4    1440;              const remainder =  distance_in_minutes   minute_offset_for_leap_year    525600;              if  remainder < 131400                     return  about      Math.round distance_in_years       years    tense;                else if  remainder < 394200                     return  over      Math.round distance_in_years       years    tense;                else                    return  almost      Math.round distance_in_years   1       years    tense;                                   ,AJamesPhillips,closed,1,2017-06-21 10:09:57,2017-06-23 16:34:55,,,,0,1
10222,moment/moment,4029,[locale] az: Improve relative time for seconds, Saniy   s z nd  orfoqrafik s hv    Orthographic error in translation of th word  second ,javid-yagubali,open,5,2017-06-21 11:13:20,0000-00-00 00:00:00,,Needs Revision,locale approval needed,,,1,1
10221,moment/moment,4030,isSameOrAfter not giving correct result,  Chrome 56 on Cento OS.    When using format  DD/MMM/YYYY  to use isSameOrAfter  it gives wrong result.  Should I must format the date to  YYYY MM DD   to use isSameOrAfter?  I had thought no matter what format you passes to moment  isSameOrAfter will give the same result  but it seems not.      ,larryu,closed,2,2017-06-23 00:05:48,2017-07-03 23:19:35,,Troubleshooting,,,0,1
10220,moment/moment,4031,Issue with es6 module while bundling  Tree shaking ,  Description of the Issue and Steps to Reproduce:    I am using momentjs for react i18next libraryand trying to load es6 module through webpack. I want to achieve tree  shaking through the webpack. For that I gven config is in webpack         plugins: [       new webpack.DefinePlugin           process.env :             NODE_ENV : JSON.stringify  production                       ]     resolve:     mainFields: [ jsnext:main    browser    main ]                Issue     ./locale  path is not resolved  since it is loading through  require       Log:         WARNING in ./ /moment/src/lib/locale/locales.js  Module not found: Error: Can t resolve  ./locale  in  C: view gitdev React react i18next node_modules moment src lib locale    @ ./ /moment/src/lib/locale/locales.js 55:12 39   @ ./ /moment/src/lib/locale/locale.js   @ ./ /moment/src/moment.js   @ ./app/i18n.js   @ ./app/main.js   @ multi ./app/main.js           ,msreddy09,closed,6,2017-06-23 06:37:45,2017-08-07 19:18:45,,Loading,,,0,1
10219,moment/moment,4032,Update locale file da.js,Set uppercase month names.,szhigunov,closed,2,2017-06-23 14:17:28,2017-07-04 14:22:04,,,,1,1
10218,moment/moment,4033,RFC_2822 not in typescript declaration file,  Description of the Issue and Steps to Reproduce:       moment.RFC_2822  constant is not declared in the  moment.d.ts  declarations file and cannot be used in typescript.  ,ovangle,closed,1,2017-06-24 13:22:37,2017-08-09 06:36:22,,TypeScript,,,0,1
10217,moment/moment,4034,[misc] TS: Add specs   tests for moment.RFC_2822,Not much to say  the typescript declaration wasn t added when RFC_2822 parsing was added in 2.18.    Fixes  4033 ,ovangle,closed,3,2017-06-24 14:01:41,2017-08-07 19:22:37,,Pending Next Release,,,1,1
10216,moment/moment,4035,RFC 2822 parser discards offset,These outputs should be identical:   console.log moment  Thu  22 Jun 2017 18:17:45 EDT  .format  MM/DD/YYYY h:mm a   ;    console.log moment  Thu  22 Jun 2017 18:17:45  0400  .format  MM/DD/YYYY h:mm a   ;     Actual outputs:  06/22/2017 6:17 pm  06/22/2017 2:17 pm    An examination of the RFC 2822 parsing code shows that the   9999 time offset is always replaced with the GMT offset:       default: // UT or  / 9999        timezone = timezones[  GMT ];     Pull request forthcoming.  ,jwoyame,closed,2,2017-06-24 15:50:46,2017-07-01 00:31:42,,,,0,1
10215,moment/moment,4036,Handle RFC 2822 offsets  4035,Addresses  4035,jwoyame,closed,3,2017-06-24 15:53:45,2017-07-01 00:31:28,,,,1,1
10214,moment/moment,4037,RFC 2822 parsing accuracy is not tested,Thanks for the great project.    I see there are test cases for RFC 2822 validity   parsing RFC 2822    non RFC 2822 strings   which cover the possible situations well  but they do not check whether the valid date is accurate or not.    See  4035  where the parser was overwriting the numeric time offset component.  ,jwoyame,closed,2,2017-06-24 16:05:33,2017-07-11 14:45:52,,,,0,1
10213,moment/moment,4038,[locale] fr: REORDER weekdays,  Fix the week days order.    While the  dow  was correctly set to Monday  the actual weekdays were still starting on Sunday.      Fix the case of weekdaysMin    In French  the days of the week are all in lowercase. The min version of the weekdays had were starting with an uppercase.,Elhebert,closed,10,2017-06-24 21:59:15,2017-10-25 15:28:44,,,,1,1
10212,moment/moment,4039,Setting locale with an array returns unexpected value,  Description of the Issue and Steps to Reproduce:      Setting array of locales doesn t always return the value expected. I use as inputs locale format of _ab_CD_.    Examples   moment.locale  es_ES  ; // es    moment.locale [ es    en gb ] // es     Based on the examples above  it seems  es_ES  is understood by moment. However  I am not getting the same result as in the second example when I try:   moment.locale [ es_ES    en_GB ] // en gb     The documentation mentions  Finally  Moment will search intelligently through an array of locales and their substrings.  but it is unclear how the search is being done. I d expect the array to work sort of like a priority based list with the  es_ES  being evaluated before getting to  en_GB .    Bug or am I misunderstanding how  moment.locale [locales]  work?      Environment:    Chrome 59 on OSX    Thanks  ,mrkesh,closed,1,2017-06-26 09:16:10,2017-06-27 02:57:14,,,,0,1
10211,moment/moment,4040,Why does fromNow why skip from 25 days to a month?,  > moment  2017 07 21T11:03:57  .fromNow     in 25 days   > moment  2017 07 22T11:03:57  .fromNow     in a month   >     and from 10 months to a year?    moment@2.18.1  ,jcalfee,closed,1,2017-06-26 11:37:18,2017-06-27 02:55:49,,,,0,1
10210,moment/moment,4041,Fix  4031   Missing ES6 module during tree shaking,Fixes a relative import issue. This doesn t address the bigger problems with the function  but at the very least it makes it work correctly when targeting ES6.,ovangle,closed,1,2017-06-27 12:44:32,2017-06-27 12:47:40,,,,1,1
10209,moment/moment,4042,[bugfix] Make auto locale loading for node not mess webpack  fixes  4031   2979   3872,Reopening this PR now that tests are passing.    Cannot import the locale relatively  since the code exists  in a different location in the bundled ES5 module than it  does in ES6.    In order to run tests locally  where the external  moment   library can t be loaded   fall back to using the relative import.,ovangle,closed,6,2017-06-27 13:09:52,2017-08-07 19:18:41,,Pending Next Release,,,1,1
10208,moment/moment,4043,on IE8   indexOf not defined,on IE8   indexOf not defined;    code 782 797 this    if  Array.prototype.indexOf         indexOf = Array.prototype.indexOf;    else        indexOf = function  o             // I know          var i;          for  i = 0; i < this.length;   i                 if  this[i] === o                     return i;                                    return  1;       ;   ,eleven777,closed,4,2017-06-28 03:12:45,2017-07-07 23:50:56,,Troubleshooting,,,0,1
10207,moment/moment,4044,Wrong behaviour with  isoWeek  function,  Description of the Issue and Steps to Reproduce:    Hello  I am using daterangepicker library  which depends on moment.js. I have reported an issue there but I finally noticed that is probably a moment.js bug.    If you type     moment  2014 12 29 00:00:00  .isoWeek        It returns  1     And we are talking about a december day  so it s not possible to be the first week of year.     [image] https://user images.githubusercontent.com/6770083/27636908 02b008ba 5c0e 11e7 8b94 902687524f4a.png       Environment:    I am using chrome Versi n 55.0.2883.87  64 bit  on Ubuntu 16.04         js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version           [image] https://user images.githubusercontent.com/6770083/27637008 629eacae 5c0e 11e7 8083 d732841b0067.png   ,luigonsec,closed,1,2017-06-28 12:31:49,2017-06-28 19:38:26,,,,0,1
10206,moment/moment,4045,[pkg] webpack babel: Make require path cross platform,fixes an issue when compiling with webpack/babel on Windows    issues:  2979   4031   3872 ,soundstripe,closed,4,2017-06-28 15:53:37,2017-10-24 22:18:13,,,,1,1
10205,moment/moment,4046,Behavior of isBetween,Questions about the behavior of isBetween.    I needed to make a comparison like this:     js  moment  21:00   format .isBetween  moment  21:00   format   moment  21:30   format           But moment.js returns me false for that comparison.    I know I can do it like this:     js  moment  21:00   format .isSameOrAfter moment  21:00   format      moment moment  21:00   format  .isSameOrBefore moment  21:30   format           But I find that somewhat verbose  and prone to errors.    Now my doubts:    Is there any other way to make this comparison? I could not find anything in the documentation to help me.    This is actually the expected behavior of isBetween. At least in my opinion  this comparison should return true.  ,doglasbatista,closed,2,2017-06-28 19:44:07,2017-06-28 20:00:45,,,,0,1
10204,moment/moment,4047,Calendar function returns incorrect week.,On June 29th  Thursday   I call moment  2017 06 26T22:16:53.000Z  .calendar    and it returns:  Last Week Tuesday . My timezone is China  UTC 8   so it seems to me it should produce  This Week  or empty string for the week part  rather than  Last Week .    Environment:  Chrome 58.0.3029.110  64 bit  on macOS Sierra 10.12.    console.log   new Date   .toString      Thu Jun 29 2017 12:45:12 GMT 0800  CST    console.log  new Date   .toLocaleString      6/29/2017  12:45:12 PM   console.log   new Date   .getTimezoneOffset       480   console.log  navigator.userAgent    Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_0  AppleWebKit/537.36  KHTML  like Gecko  Chrome/58.0.3029.110 Safari/537.36   console.log moment.version    2.10.5 ,hifall,closed,4,2017-06-29 04:49:33,2017-06-30 14:28:26,,Troubleshooting,,,0,1
10203,moment/moment,4048,Moment does not set format _f when using just the year YYYY with ISO 8061,  Description of the Issue and Steps to Reproduce:      moment.js does not set format  ._f  YYYY  which looks to be fine with ISO 8601.  The object is created fine  and it is valid  but the format is undefined.         var my_year = moment.utc  2017    my_year.isValid    true  my_year._f  undefined <   expected  YYYY               var my_year_month = moment.utc  2017 06    my_year_month .isValid    true  my_year_month ._f   YYYY MM          It [looks like] https://www.cl.cam.ac.uk/ mgk25/iso time.html  this should be an accepted and valid format  and infact the created moment object is valid.      after a rapid inspection  this may be caused by  match = extendedIsoRegex.exec string     basicIsoRegex.exec string    [line 2034] https://github.com/moment/moment/blob/develop/moment.js L2034         Environment:    Windows 10 64bit  Node.js v7.10.0  moment.js v2.18.1      If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     Thu Jun 29 2017 12:09:38 GMT 0200  ora legale Europa occidentale   console.log  new Date   .toLocaleString     2017 6 29 12:09:44  console.log   new Date   .getTimezoneOffset      120  console.log  navigator.userAgent   not available  console.log moment.version   2.18.1     ,honestserpent,closed,1,2017-06-29 10:13:31,2017-06-30 03:58:06,,,,0,1
10202,moment/moment,4049,moment.toString   doesn t round trip, moment moment  .toString     throws a deprecation warning  but probably shouldn t.    We use a hardcoded format in the  toString  function [here] https://github.com/moment/moment/blob/2.18.1/src/lib/moment/format.js L9   but we don t accept that format for input without specifying it explicitly.  IMHO  we probably should.,mj1856,open,0,2017-06-29 22:19:13,0000-00-00 00:00:00,,Enhancement,,,0,1
10201,moment/moment,4050,Add ISO parsing for year only strings,  Description of the Issue and Steps to Reproduce:      Moment does not handle year only Strings eg.  2017  and throws a deprecation warning and says  that s not an ISO string .    I think it would be useful feature to have.    I open this issue on suggestion from @icambron in [issue 4048  closed ] https://github.com/moment/moment/issues/4048 ,honestserpent,closed,1,2017-06-30 06:54:10,2017-12-29 07:11:28,,Enhancement,,,0,1
10200,moment/moment,4051,Add moment.utc.ISO_8601 for formatting  validation,I sometimes import moment this way when I know I m going to use utc across the board:     var moment = require  moment  .utc;     The only problem is  I can t access moment.ISO_8601  so I have to do a separate import like so:     var ISO_8601 = require  moment  .ISO_8601;     It would be nice to be able to access that function like this:     moment.utc.ISO_8601;     Thank you for this incredible library.  ,alanhett,closed,1,2017-07-01 17:38:10,2017-07-03 03:01:57,,,,0,1
10199,moment/moment,4052,Will there be a new release soon?,There are plenty of positive necessary changes that are all pending a new release. This library is huge in the community and there are plenty of people who love using it.     But I am wondering if we will see a new release soon. For a project of this size is bothers me that releases are not more often.     Is there anything that could be done? I would love to help out because in terms of development this project seems barely afloat.,stephan-v,closed,1,2017-07-04 08:27:26,2017-07-05 18:28:29,,,,0,1
10198,moment/moment,4053,Issue for Units like FORTNIGHT  HALFYEAR,  Description of the Issue and Steps to Reproduce:    I m trying to calculate the difference between dates and needs the output for fortnight and halfyear.    Math.ceil moment  2022 07 30  .diff moment     HALFYEARs   / 1 ;    However  it seems moment haven t support these type of units yet.    ,jmanligu,closed,3,2017-07-05 11:29:36,2017-07-05 18:35:27,,,,0,1
10197,moment/moment,4054,moment  02 29    MM DD   is invalid,moment  02 29    MM DD  .isValid   returns false.    see for example the console in https://jsfiddle.net/2kkjLn8f/1/    Tested on Linux/chromium 59  Linux/firefox 54   Examples: Chrome 49 on OSX  Internet Explorer 10 on Windows 7  Node.JS 4.4.4 on Ubuntu 16.0.4     I suspect that s because it s using the current year  2017   but 02 29 is a valid date some years.,mleduque,closed,1,2017-07-06 09:17:25,2017-07-06 22:38:22,,,,0,1
10196,moment/moment,4055,moment.duration  P3D  .seconds   returns 0,Problem:    The  seconds    method of duration returns 0 for a string that is ISO 8601 duration. However  asSeconds    returns value that looks OK  I didn t calculate that to be honest .    Looking at the documentation I d expect both methods to have the same behavior and return the same value.     Please include the values of all variables used.          const moment = require  moment  ; // varsion 2.18.1  const sec1 = moment.duration  P3D  .asSeconds  ;  const sec2 = moment.duration  P3D  .seconds  ;  console.log sec1   sec1   // 259200  console.log sec2   sec2   // 0           Environment:      Node 6.9.2  https://runkit.com/5901f422afa0170012b65117/595e09f5b43324001290dedd  ,adambro,closed,1,2017-07-06 11:19:10,2017-07-06 11:28:24,,,,0,1
10195,moment/moment,4056,How can i get hours in two digits?,Hi     I m using  moment  .format  L LTS  ; .   So i m getting as expected:  07/06/2017 5:35:51 PM      But i d like hours in two digits like:  07/06/2017 05:35:51 PM .    Thanks.,mallikarjuna909,closed,4,2017-07-06 12:14:14,2017-07-08 02:25:05,,,,0,1
10194,moment/moment,4057,moment  .format   always output in local time  utcOffset   odd behaviour ,  Description of the Issue and Steps to Reproduce:       js  // NOT what I expect  moment  2017 07 03T00:00:00 08:00  .format     // =>  2017 07 02T10:00:00 06:00     // What I expect  but a bit clumsy  moment  2017 07 03T00:00:00 08:00  .utcOffset  2017 07 03T00:00:00 08:00  .format    // =>  2017 07 03T00:00:00 08:00          Also moment somehow use local time as utcOffset which cause the following behaviour:     js  // Wrong  gives   360  moment  2017 07 03T00:00:00 08:00  .utcOffset            Can we make moment to use its internal  _tzm  by giving an option into  format    ?  So that      js  moment  2017 07 03T00:00:00 08:00  .format      useTZM: true     // =>  2017 07 03T00:00:00 08:00              Environment:    Chrome 58 on OSX  moment.version  2.14.2       Other information that may be helpful:      The time zone setting of the machine the code is running on 2017 07 07T01:57:48 06:00    ,jeffrey008,closed,1,2017-07-07 08:02:41,2017-07-07 23:49:34,,,,0,1
10193,moment/moment,4058,[locale] pl: Improve calendar for next week,The names of days of next week aren t declended in the Polish translation. This PR adds the declension.    @evoL  could you please provide an opinion on this PR?,waclawjacek,closed,7,2017-07-11 14:02:02,2017-08-07 19:15:11,,Pending Next Release,,,1,1
10192,moment/moment,4059,[pkg] npm: Ignore all non source files,In this PR I m adding some directories and files that are not used by npm package into  .npmignore  file. It reduces size of installed package and size of  tgz  file that is downloaded during moment installation.    Also something related to this PR:  min  directory contains two versions of each files  i.e.  locales.js  and  locales.min.js  . Does it makes sense to do it?  Ignoring  min/locales.js  and  min/moment with locales.js  and publishing only  min/locales.min.js  and  min/moment with locales.min.js  can significantly reduce size of the package.    Another proposal to reduce package size: currently it contains both ES6 and old js versions in one package. It can be splitted to 2 packages  like  lodash  and  lodash es    so developer can choose what they want to use  instead of always downloading both versions.,KELiON,open,4,2017-07-11 14:12:18,0000-00-00 00:00:00,,Discussion,,,1,1
10191,moment/moment,4060,grunt transpile raw task fails: bundle.generate now returns a Promise instead of a   code  map  ,  Description of the Issue and Steps to Reproduce:      I just cloned the repository  checkout  develop    npm install    npm install  g grunt  and executed  grunt .    I got the following output:       Running  jshint:all   jshint  task  >> 399 files lint free.    Running  jscs:all   jscs  task  >> 399 files without code style errors.    Running  transpile  task    Running  clean:build   clean  task  >> 0 paths cleaned.    Running  transpile raw  task  >> error transpiling Error: bundle.generate ...  now returns a Promise instead of a   code  map   object  >>     at Promise.get  /Users/ntag/Projets/moment/node_modules/rollup/src/rollup.js:81:9   >>     at /Users/ntag/Projets/moment/tasks/transpile.js:75:26  >>     at process._tickCallback  internal/process/next_tick.js:103:7   Warning: bundle.generate ...  now returns a Promise instead of a   code  map   object Use   force to continue.    Aborted due to warnings.           Environment:      I use macOS  tried with node v0.12.18  npm v2.15.11   node v6.9.15  npm v3.10.10   and also with node v7.10.0  npm v4.2.0   all failed.     grunt   version  gives  grunt cli v1.2.0 grunt v0.4.5 .      But I see that travis has the same issue  so you might already know about   ,NTag,closed,1,2017-07-11 16:07:31,2017-07-12 05:36:53,,,,0,1
10190,moment/moment,4061,Fix  4060: bundle.generate returns a Promise now,And tests pass again :  ,NTag,closed,2,2017-07-11 16:12:37,2017-07-12 05:36:38,,,,1,1
10189,moment/moment,4062,[bugfix] duration toString with mixed signs  fixes  3960,This should fix  3960 with output along the lines of    P1MT 1H 59S   and   P1MT 1H 59S  .    ,ashsearle,closed,7,2017-07-11 18:31:56,2017-10-09 22:48:48,,Pending Next Release,todo,,,1,1
10188,moment/moment,4063,[bugfix] Add duration fields in month  day  time order  fixes  3997,Fixes  3997 ,ashsearle,closed,4,2017-07-11 18:47:49,2017-10-09 22:32:27,,Pending Next Release,,,1,1
10187,moment/moment,4064,weird result of isValid  ,  Description of the Issue and Steps to Reproduce:    i want to detinmine if the date format is  D/M/YYYY  using moment  1991 10 10T00:00:00    D/M/YYYY  .isValid     but i got wrong result for different year      Environment:    Chrome IE       js  moment  1991 10 10T00:00:00    D/M/YYYY  .isValid     false  moment  2001 10 10T00:00:00    D/M/YYYY  .isValid     true  moment  2000 10 10T00:00:00    D/M/YYYY  .isValid     false        ,chouex,closed,1,2017-07-12 08:32:44,2017-07-18 05:30:05,,Forgiving parsing,,,0,1
10186,moment/moment,4065,Issue  3886: Microsoft 2 digit years prior to 1/1/1970.,Two RFC2822 unit tests failed only in Microsoft browsers  IE11 and Edge  because they regard 2 digit  years prior to 1/1/1970  as invalid. The solution is to translate 2 digit years to 4 digits consistent with the rules defined in the RFC.,TracyGJG,closed,3,2017-07-12 20:42:46,2017-08-07 20:04:10,,,,1,1
10185,moment/moment,4066,Week Days locale problems,  Description of the Issue and Steps to Reproduce:    As in the official document    moment.locale  zh_CN  ;    moment.weekdays true ; // lists weekdays Monday Sunday in Chinese     If true  the weekdays will be returned in locale specific order. But in the case  the moment locale is changed globally.    So if I just want to change the locale locally  I use     moment.localeData  zh_CN  .weekdaysShort       It always lists weekdays from Sunday Saturday in Chinese  NOT in locale specific order . And I could not provide  true  value to the function in this case Causing ERROR .     Please include the values of all variables used.       Environment:       Examples: Chrome 49 on OSX  Internet Explorer 10 on Windows 7  Node.JS 4.4.4 on Ubuntu 16.0.4      Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.       Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version           Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,DanielYKPan,open,4,2017-07-15 05:42:50,0000-00-00 00:00:00,,Bug,Language,Up-For-Grabs,,,0,1
10184,moment/moment,4067,4024 modify leap year to non, 4024 Fix       Breakdowns:    [x] check for month and date for leap year    [x] set date to either 28 or 29 depending on isLeapYear of year value passed.    note: since the issue is caused by Date    the approach I took is to check for the value passed to year   function.,andy-shi88,closed,4,2017-07-15 11:24:00,2017-12-22 03:18:27,,rewrite,,,1,1
10183,moment/moment,4068,3.x [misc] Rewrite ES6 transpilation,This is part of the work I m doing for  4025  but it can  and probably should  be separated out into a separate PR. I m submitting it against 3.x because I did the work against this branch  but it should be possible to merge back.    I m just trying to fix the spaghetti code mess that is the current  tasks/transpile.js  and remove a few of the  weirder  parts of the transpilation process.    There is still some work left to do to make the new output 100  compatible with the old output  but I m submitting the PR early for feeback purposes.    ,ovangle,closed,10,2017-07-15 20:14:27,2017-08-18 15:36:31,,,,1,1
10182,moment/moment,4069,moment.parseZone   Incorrect .isDST   behavior,  Description of the Issue and Steps to Reproduce:    moment.parseZone  2017 01 15T16:31:06.000 08:00  .isDST   false when it should be yes.   Please include the values of all variables used.       Environment:    NodeJS 4.4.4 on OSX   Examples: Chrome 49 on OSX  Internet Explorer 10 on Windows 7  Node.JS 4.4.4 on Ubuntu 16.0.4      Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.       Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     ,al3x-huang,closed,4,2017-07-15 23:56:55,2017-07-18 05:25:32,,,,0,1
10181,moment/moment,4070,Date format issue in Korean language,Korean date format must be e.g. 2017. 07. 17.   But in Moment.js it is implemented as 2017. 07. 17  Basically one dot is missing in the end of the day of the date.,YenalTuran,closed,5,2017-07-17 08:35:15,2018-03-02 19:02:14,,Language,,,0,1
10180,moment/moment,4071,[locale] pt: Improve ordinals  months and weekdays  fixes  4071,Ordinals abbreviations have been fixed  1.   2.   3.  instead of 1   2   3  ; In Portuguese  month names must be lowercase  e.g.  17 de julho de 2017  instead of  17 de Julho de 2017  ; Weekdays names must be lowercase as well    ltima sexta feira     ltimo s bado     ltimo domingo  instead of   ltima Sexta Feira     ltimo S bado     ltimo Domingo  .,GoncaloCdM,open,7,2017-07-17 17:16:18,0000-00-00 00:00:00,,Needs tests,locale approval needed,,,1,1
10179,moment/moment,4072,moment  .isBefore   Crashes in Internet Explorer 8,  Description of the Issue and Steps to Reproduce:    A fatal error   Object doesn t support this property or method   is received when calling  isBefore  with a granularity argument.  i.e.       moment  .isBefore moment     year  ;           Environment:    I ve only been able to recreate this issue on Internet Explorer 8 running on Windows XP.      Other information that may be helpful:    It appears that the offending code is in this  isDurationValid  function at line 2658. The use of Array s  indexOf  method is the problem  as that doesn t exist in IE8. I ve modified my MomentJS library and replaced it with the custom indexOf function that s defined earlier in the file and that solves the issue.,kumaran-nc,closed,3,2017-07-17 21:13:12,2017-07-25 23:03:22,,Up-For-Grabs,,,0,1
10178,moment/moment,4073,Moment typescript library uses  void  type as parameter input,  Description of the Issue and Steps to Reproduce:    The moment constructor parameter   MomentInput  @ https://github.com/moment/moment/blob/develop/moment.d.ts L396  is typed to include  void  as a possible input type but does not include  undefined  or  null .  With  strictNullChecks  enabled  these are not interchangeable.,chrisleck,open,5,2017-07-18 17:12:09,0000-00-00 00:00:00,ovangle,Breaking change,Discussion,TypeScript,,,0,1
10177,moment/moment,4074,Fix  3399: add localized format LLLLWT: date with day of week without time,This PR fixes  3399: it adds two new localized formats:  LLLLWT  and  llllwt . There are copies of  LLLL  and  llll  but without the time. It is useful when you want to display the complete date with the day of the week  but don t want the time .    Examples:     LLLLWT : Tuesday  July 18  2017     llllwt :  Tue  Jul 18  2017    Obviously   LLLLWT  means   LLLL    W  ithout   T  ime . I am totally open to better proposals.,NTag,open,2,2017-07-18 20:01:20,0000-00-00 00:00:00,,Discussion,Needs Revision,Needs docs,,,1,1
10176,moment/moment,4075,Implement options for Vue JS,Hello     can you please tell me where i can find the method to set options for vue js please?    when i try this anywhere in vuejs it crashes:    // core with all locales  define [ moment/min/moment with locales ]  function  moment         moment.locale  de  ;      console.log moment  .format  LLLL   ; //  Freitag  24. Juni 2016 01:42     ;,nicolasvahidzein,closed,3,2017-07-19 03:13:09,2017-07-24 06:22:36,,,,0,1
10175,moment/moment,4076,Locale,  Description of the Issue and Steps to Reproduce:    How to populate the whole list of available locales from moment.js in ReactJS  ,NandiniArjun,closed,1,2017-07-19 13:28:53,2017-07-25 23:05:14,,,,0,1
10174,moment/moment,4077,[bugfix] Handle RFC2822 parsing in non en locales  fixes  3985,,Petrukha,closed,12,2017-07-20 00:05:08,2017-08-07 01:11:15,,Pending Next Release,,,1,1
10173,moment/moment,4078,Add Duration.clone  , Duration  lacks the ability to clone  and even no copy constructor   while the arithmetic methods mutates the object. It should have  clone   .,ishitatsuyuki,closed,1,2017-07-21 09:12:49,2017-07-25 23:05:59,,,,0,1
10172,moment/moment,4079,[bugfix] Use indexOf utility for IE8 compatibility  fixes  4072,,ashsearle,closed,1,2017-07-21 17:12:13,2017-08-07 19:04:53,,Pending Next Release,,,1,1
10171,moment/moment,4080,[feature] Implement a clone method for durations  fixes  4078,,ashsearle,closed,1,2017-07-21 17:30:55,2017-08-07 18:55:10,,Pending Next Release,,,1,1
10170,moment/moment,4081,Invalid output format for YYYY MM DDThh:mm  changes T for A: 2017 07 18A08:00,  Description of the Issue and Steps to Reproduce:      Got a moment object with any date  and apply the format with time separator T.    console.log start.format  YYYY MM DDThh:mm   ;    The result is the T is transformed to A 2017 07 18A08:00    My goal is to use the value from format to set a datetime local input field.       Please include the values of all variables used.       Environment:      MacOs 10.11.6 / Chrome 59  Moment 2.18.1      Other information that may be helpful:      Using it as a dependency for fullcalendar https://fullcalendar.io/    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version               Sat Jul 22 2017 02:07:50 GMT 0300  UYT   7/22/2017  2:07:50 AM  180  Mozilla/5.0  Macintosh; Intel Mac OS X 10_11_6  AppleWebKit/537.36  KHTML  like Gecko  Chrome/59.0.3071.115 Safari/537.36  2.18.1       ,ppazos,closed,6,2017-07-22 05:10:17,2017-11-30 19:28:14,,Troubleshooting,,,0,1
10169,moment/moment,4082,Wrong  Time from now  for RFC 2822 date,Moment.js version 1.18  proper RFC 2822 date time format show wrong value for  moment  .fromNow         Steps to Reproduce:         js  var DATE_RFC2822 =  ddd  DD MMM YYYY HH:mm:ss ZZ ;  var now = moment  .format DATE_RFC2822 ;  console.log now ; // Mon  24 Jul 2017 10:00:47  0300  console.log moment now .fromNow   ; // in 3 hours  console.log moment new Date now  .fromNow   ; // a few seconds ago       both must be  a few seconds ago   ,cravler,closed,1,2017-07-24 09:42:20,2017-07-25 18:11:24,,,,0,1
10168,moment/moment,4083,[bugfix] Handle numeric timezones in RFC2822 parsing  fixes  4082   3920,,ashsearle,closed,7,2017-07-24 18:22:29,2017-10-25 10:30:31,,,,1,1
10167,moment/moment,4084,Pull request,,shubhambatra,closed,2,2017-07-26 12:11:08,2017-07-26 17:42:17,,,,1,1
10166,moment/moment,4085,[misc] Print console warning when setting non existent locales,Right now if the new locale being set is not available then it fails silently and just uses the existing global locale. A console warning would be useful to notify the user of such a failure.,asulaiman,closed,3,2017-07-26 15:43:00,2018-03-02 18:54:41,,Docs written,Pending Next Release,,,1,1
10165,moment/moment,4086,44 to 44 seconds,  Description of the Issue and Steps to Reproduce:      [This documentation] https://github.com/moment/momentjs.com/blob/master/docs/moment/04 displaying/02 fromnow.md  is not clear about the  ss  key: 44 to 44 seconds.    What does it mean? Is it a special case that affects only exactly 44 seconds? Won t 44 seconds be covered by the  s  section?  0 to 44 seconds .      Environment:    Documentation section from momentjs.com,Falci,open,3,2017-07-26 15:51:17,0000-00-00 00:00:00,,Documentation,,,0,1
10164,moment/moment,4087,Unreliable when diffing days to today s date,  Description of the Issue and Steps to Reproduce:       Today s date is 2017/07/26   Go to https://momentjs.com/  Open dev tools  In the console enter  moment  .add 30   days  .diff moment     days     Run multiple times. Sometimes you ll get 29 instead of 30.    <img width= 448  alt= screen shot 2017 07 26 at 10 55 02  src= https://user images.githubusercontent.com/6647355/28635970 76ddbc3e 71f1 11e7 93c8 c19f6dfd852b.png >      Environment:      Chrome 59 on OSX      Take a Look at This:           // THE FOLLOWING CODE IS UNRELIABLE    main = function          thirtyDaysFromToday = moment  .add 30   days        today = moment        differenceInDays = thirtyDaysFromToday.diff today   days          if  differenceInDays  == 30             console.log                thirtyDaysFromToday: thirtyDaysFromToday               today: today               differenceInDays: differenceInDays                            return differenceInDays       count = 0  while  count < 1000         main        count                   // THE FOLLOWING CODE IS RELIABLE    main = function          thirtyDaysFromToday = moment moment  .add 30   days  .format  YYYYMMDD         today = moment moment  .format  YYYYMMDD         differenceInDays = thirtyDaysFromToday.diff today   days          if  differenceInDays  == 30             console.log                thirtyDaysFromToday: thirtyDaysFromToday               today: today               differenceInDays: differenceInDays                            return differenceInDays       count = 0  while  count < 1000         main        count          ,mankittens,closed,2,2017-07-26 18:00:32,2017-08-01 01:14:31,,,,0,1
10163,moment/moment,4088,[misc] Fix typo in comment,  ,keirog,closed,1,2017-07-27 23:40:03,2017-08-09 12:30:27,,Pending Next Release,,,1,1
10162,moment/moment,4089,duration s toISOString   produces incorrect results after  add  operation,After adding or subtracting from a duration  the toIsoString method produces incorrect results.    To reproduce:   moment.duration  P2DT71H30M  .toISOString     >  P2DT71H30M    moment.duration  P2DT71H30M  .add  3   days  .toISOString     >  P1DT71H30M   This returned value is one day less than the original duration  even though we asked to subtract three days.    I reproduced by entering these values into the console on the version of moment running on https://momentjs.com.      Environment:    Chrome 59 on OSX  ,jpuffer,closed,8,2017-07-29 00:57:43,2017-08-01 23:03:12,,Bug,,,0,1
10161,moment/moment,4090,Error to format moment object,  Description of the Issue and Steps to Reproduce:       Got a moment object with date 2017 08 13  and  apply .format  YYYYMMDD    the result is 20170812       Environment:       Examples: Firefox 54.0.1      js  moment  2017 08 13  .format  YYYYMMDD  ; //  20170812            If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString    // Sat Jul 29 2017 01:52:36 GMT 0400  console.log  new Date   .toLocaleString    // 29/7/2017 1:52:22  console.log   new Date   .getTimezoneOffset    // 240  console.log  navigator.userAgent  // Mozilla/5.0  Windows NT 10.0; WOW64; rv:54.0  Gecko/20100101 Firefox/54.0  console.log moment.version  // 2.18.1       ,RogerByte,closed,3,2017-07-29 05:57:41,2017-08-01 16:58:08,,Troubleshooting,,,0,1
10160,moment/moment,4091,[new locale] en in: English  India  locale,India uses the same  English  locale as Great Britain  with the  exception that the week starts on Sunday  instead of Monday.    Fixes  4012,shadowhand,closed,6,2017-07-29 17:38:41,2017-10-25 02:01:45,,rewrite,,,1,1
10159,moment/moment,4092,fromNow   return values are different,  Description of the Issue and Steps to Reproduce:    When I use fromNow   function to calculate day and time difference I have got different results on the same date. I just wonder if this is an bug or this is an expected results.     Please include the values of all variables used.   function used    moment fromDate .fromNow         Case 1: will return 2 days  Date Now: 2017 07 28 01:00:00  fromDate: 2017 07 31 00:00:00  difference is 58 hours so < 2 and half day    Case 2: will return 3 days  Date Now: 2017 07 28 01:00:00  fromDate: 2017 07 31 02:00:00  difference is 60 hours so >= 2 and half day      Environment:    Chrome 59 on OSX  Firefox 53.2.1  Node JS v6.9.5      Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc   Time Zone: Irish Standard Time    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString    // Mon Jul 31 2017 11:45:11 GMT 0100  IST   console.log  new Date   .toLocaleString    // 7/31/2017  11:45:11 AM  console.log   new Date   .getTimezoneOffset    //  60  console.log  navigator.userAgent  // Mozilla/5.0  Macintosh; Intel Mac OS X 10.12; rv:52.0  Gecko/20100101 Firefox/52.0  console.log moment.version  // 2.18.1          Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,linzhaoken,closed,1,2017-07-31 10:47:47,2017-08-01 01:03:52,,,,0,1
10158,moment/moment,4093,[misc] Whitespace changes,,JimiHFord,closed,2,2017-07-31 18:35:30,2017-08-09 12:32:32,,Pending Next Release,,,1,1
10157,moment/moment,4094,isoWeek misbehaving ?,  Description of the Issue and Steps to Reproduce:      I m trying to get isoWeek in a specific year  but I m receiving weird results. If I create moment object only with year  2017   I receive date with year 2016. If I create object with [2017  0]  January 2017   I get same result with year 2016  but if I create an object with [2017  1]  February 2017   I receive result with year 2017.    I tested it in console on momentjs.com website.         Test data:    moment  .isoWeek 31 .format  YYYY MM DD    >  2017 08 01     moment [2017] .isoWeek 31 .format  YYYY MM DD    >  2016 08 07     moment [2017  0] .isoWeek 31 .format  YYYY MM DD    >  2016 08 07     moment [2017  1] .isoWeek 31 .format  YYYY MM DD    >  2017 08 02       Environment:        Chrome 59.0.3071.115 on OSX         Tue Aug 01 2017 17:10:02 GMT 0200  CEST   8/1/2017  5:10:02 PM   120  Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_5  AppleWebKit/537.36  KHTML  like Gecko  Chrome/59.0.3071.115 Safari/537.36  2.18.1       ,turshija,closed,1,2017-08-01 15:19:08,2017-08-01 17:12:55,,,,0,1
10156,moment/moment,4095,Timestamp UTC adding 1 hour randomly,  Description of the Issue and Steps to Reproduce:    Regarding this code :     js  let date = moment.unix 1478003040 .utc  ;  date = moment date .format  YYYY MM 01 00:00:00Z  ;  console.log date ; // Displays 2016 11 01 00:00:00 00:00 => Ok    console.log moment date .unix   ; // Returns 1477958400. Expected 1477962000           Environment:    Node.js 7.6.0  Moment 2.18    Returned moment timestamp is 1477958400  and I expect 1477962000. It seems that an hour is lost .    Is there s a mistake in this code ? Thank you  ,WoodySlum,closed,1,2017-08-02 14:11:05,2017-08-02 16:02:22,,,,0,1
10155,moment/moment,4096, isBefore  returns true and false when passed undefined,  Description of the Issue and Steps to Reproduce:      When performing  isBefore undefined   on a moment instance  it will sometimes return true  and sometimes return false.    See the JS Bin below to reproduce.      Environment:      Tried with:    Node v6.10.1  using moment 2.18.1     Chrome Version 60.0.3112.78 on OSX  using moment 2.14.1       Other information that may be helpful:      See this [JS Bin] http://jsbin.com/payixipucu/edit?js console     Output:        Wed Aug 02 2017 13:06:56 GMT 0600  MDT     8/2/2017  1:06:56 PM   360   Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_5  AppleWebKit/537.36  KHTML  like Gecko  Chrome/60.0.3112.78 Safari/537.36    2.14.1    [19:06:56:444000000] isBefore: false    [19:06:56:444000000] isBefore: false    [19:06:56:445000000] isBefore: false    [19:06:56:445000000] isBefore: false    [19:06:56:445000000] isBefore: false    [19:06:56:445000000] isBefore: false    [19:06:56:445000000] isBefore: true    [19:06:56:446000000] isBefore: false    [19:06:56:446000000] isBefore: false    [19:06:56:446000000] isBefore: false    [19:06:56:446000000] isBefore: false    [19:06:56:446000000] isBefore: false    [19:06:56:447000000] isBefore: false    [19:06:56:447000000] isBefore: false    [19:06:56:447000000] isBefore: false    [19:06:56:447000000] isBefore: false    [19:06:56:447000000] isBefore: false    [19:06:56:448000000] isBefore: false    [19:06:56:448000000] isBefore: false    [19:06:56:448000000] isBefore: false      ,trs,closed,1,2017-08-02 19:08:38,2017-08-03 17:43:52,,,,0,1
10154,moment/moment,4097,Calendar function returns incorrect week with local  zh ,https://github.com/moment/moment/issues/4047 in this issue tell about incorrect week.    In zh local e.g If today is  Thursday  2017 08 03T16:25:11.750   the display is         in fact is this week Tuesday 2017 08 03   but for Chinese  they would thought  it was 2017 07 25.    by the way  I google it:   [image] https://user images.githubusercontent.com/6461520/28912942 e0ac7ed4 7868 11e7 9df9 ca17243e3c5f.png     Thanks for you help  ,tokinonagare,open,1,2017-08-03 08:29:38,0000-00-00 00:00:00,,Language,,,0,1
10153,moment/moment,4098,Setters changing timezone,Code:        import moment from  moment timezone ;      moment.tz.setDefault  Europe/Oslo  ;      console.log moment.parseZone  2017 08 03T15:30:00Z  .format   ;      console.log moment.parseZone  2017 08 03T15:30:00Z  .hour 16 .format   ;      console.log moment.parseZone  2017 08 03T15:30:00Z  .set  hour   17 .format   ;    Output:    2017 08 03T15:30:00Z  2017 08 03T16:30:00 02:00  2017 08 03T17:30:00 02:00    So  all three start as  15:30:00Z   but when I try to change hour  it goes to timezone   02:00   probably from the default set above .    Should not the moment keep its timezone when setting hour like this? And it appears to change timezone before setting hour  as  15:30 Z  changed to hour   16    in the original timezone  would be  18:30  02:00 .    It seems strange to me that setting hour  minute or similar parts of a timestamp would change it to a different timezone...,henit,open,3,2017-08-03 13:46:29,0000-00-00 00:00:00,,Bug,Up-For-Grabs,,,0,1
10152,moment/moment,4099,[locale] ar  ar dz  ar kw  ar ly  ar ma  ar sa: Fix typo in Monday,@ichernev @noureddineme DONE  ,atefBB,open,9,2017-08-03 18:03:08,0000-00-00 00:00:00,,Needs Revision,,,1,1
10151,moment/moment,4100,Moved locale file,,orif-jr,closed,1,2017-08-03 19:17:02,2017-08-03 19:17:18,,,,1,1
10150,moment/moment,4101,[locale] tet: Improvements for month and weekday names,,joshbrooks,closed,4,2017-08-04 05:52:08,2018-03-02 18:55:37,,Pending Next Release,,,1,1
10149,moment/moment,4102,Is it a bug or feature that moment  100 100 100    YYYY MM DD  .isValid   return true?,  Description of the Issue and Steps to Reproduce:     moment  100 100 100    YYYY MM DD  .isValid    return true    is it a bug or feature?    Thanks  Lin ,sunlin7,closed,2,2017-08-04 07:42:00,2017-08-07 08:37:39,,,,0,1
10148,moment/moment,4103,Translation,How do I translate into Portuguese?  ,mvaipa,closed,2,2017-08-04 20:51:42,2017-08-06 18:02:18,,,,0,1
10147,moment/moment,4104,3.x Issue 2697   Implementing null checks for comparison,If the moment object passed in as the first parameter is undefined  as judged by the isUndefined function   then we always return false.    Change made on isBefore  isSame  and isAfter,sebcharrot,closed,5,2017-08-05 13:26:47,2017-08-10 00:18:09,,,,1,1
10146,moment/moment,4105,[fixup] Rename gu IN locale to gu  fixes  4004,Rename newly merged  gu IN  locale to  gu .,ichernev,closed,1,2017-08-06 22:44:11,2017-08-06 22:49:04,,Pending Next Release,,2.19.0,1,1
10145,moment/moment,4106,[fixup] Drop isNumeric utility fn  fixes  3735,PR was merged with an extra function  this drops it.,ichernev,closed,1,2017-08-06 22:56:24,2017-08-06 22:58:05,,,,1,1
10144,moment/moment,4107,moment.unix giving me back incorrect date,I need to obtain a moment object from a timestamp in seconds. I tried:       let value = 1459382400;  let obj = moment.unix value ;       and        let obj = moment.unix value .utc  ;       both of them gives me a wrong date. The 1459382400 corresponds to Thu  31 Mar 2016 00:00:00 GMT  but instead I m getting Wed Mar 30 2016 20:00:00 GMT 0400  CDT   however if I do this:       moment.utc valor   X  .format  YYYY MM DD         it gives me the right date  but in string format... I need it as a moment object. How can I tell moment to ignore the timezone in order to get the right moment???  ,soma83,closed,5,2017-08-07 19:25:36,2017-08-11 21:53:45,,,,0,1
10143,moment/moment,4108,[fixup] Fix RFC2822 rewrite  fixes  4077,So here is why:    tests were completely non satisfactory  the only thing they tested was whether a given string parses or not    the fixed timezones  PST  PDT...  were mostly wrongly defined    UT fixed timezone was not defined in the map  only the regexp      the   big   one  the parsing was completely wrong  the way it relied on  configFromArray . It did make a lot of sense when you read the code  but what is needed is a UTC parse that goes back to non utc  if the constructor was non utc   so I just hardcoded the single line that replaces the whole function call     issue with old code  military timezones are basically deprecated  see https://github.com/moment/moment/pull/3938 issuecomment 320764198 ,ichernev,closed,1,2017-08-07 21:45:00,2017-08-09 11:55:21,,,,1,1
10142,moment/moment,4109,I confuse about format time to show,I have   only time     e.q.  2.00   it mean 9.00 2.00 7 is my local in Thailand   in 24hrs     i try to convert format for output is    9.00   but i can t     What s wrong?   this is my problem [https://jsfiddle.net/zeing/8ddpeyyo/5/] https://jsfiddle.net/zeing/8ddpeyyo/5/      thank you   sorry for my english,zeing,closed,3,2017-08-08 12:35:18,2017-08-09 03:53:39,,,,0,1
10141,moment/moment,4110,Static availability of locales [wip] fixes  4025,This includes the transpilation changes  since they re necessary to make tests work.    The following changes are bundled in to this PR:      Remove deprecated functionality  moment.lang     Ensure locales are statically available  fix  4025 .    Ensure locales are registered predictably.    Rename  baseConfig  to  defaultLocaleConfig     Includes a fix for  3946,ovangle,closed,0,2017-08-09 04:16:32,2017-08-18 15:37:09,,,,1,1
10140,moment/moment,4111,[fix] make loading locales from a candidate array more straightforward.,Changes the implementation of  chooseLocale  as per discussion in  3096. ,ovangle,closed,0,2017-08-09 07:35:36,2017-08-09 07:37:18,,,,1,1
10139,moment/moment,4112,Parsing should fail when day of week is inconsistent with date,The [documentation] https://github.com/moment/momentjs.com/blob/1c94b872d4642ebbd08bf4dbc64998fdad8e2bef/docs/moment/01 parsing/02 string.md L107  on momentjs.com claims:   The parser also confirms that the day of week  when included  is consistent with the date.     Perhaps I m misinterpreting this  but it does not seem to be the case.      Example    Parsing the date  Wed 08 10 2017   which is actually a Thursday . See [JSFiddle] https://jsfiddle.net/17wd8tnm/1/ .      Expected behavior    Moment should fail to parse the date.      Observed behavior    Moment parses the date  ingoring the provided day of the week. Subsequently calling  .toDate    will use the true day of the week.,dtreiter,closed,2,2017-08-09 21:09:09,2017-10-09 22:53:52,,Bug,,,0,1
10138,moment/moment,4113,calendar   shows incorrect hours   4 hours behind.,Application stores date in ISO format  so August 9  5:36 PM will be stored as 2017 08 09T17:36:00.000Z.    Assuming today is August 9  5:36 PM.    However  I am facing issues while displaying this using momentjs s calendar parsing method.    Any idea why it takes back to 4 hours?    See this: https://codepen.io/rupenanjaria/pen/NvjeGR?editors=1111      Environment:      Chrome on Windows 7 64x       js  Wed Aug 09 2017 18:44:00 GMT 0400  Eastern Daylight Time   VM679:2 8/9/2017  6:44:00 PM  VM679:3 240  VM679:4 Mozilla/5.0  Windows NT 6.1; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/57.0.2987.110 Safari/537.36  2.10.0       ,RupenAnjaria,closed,3,2017-08-09 22:46:20,2017-08-11 16:45:50,,,,0,1
10137,moment/moment,4114,Moment s methods unnecessarily clone   when passing null like the docs  and also conflict with moment.d.ts typings .,  Description of the Issue and Steps to Reproduce:      ex. the examples have passing null for optional arguments  things with ? in the moment.d.ts  all over the place.  https://momentjs.com/docs/ /query/is between/       js  moment  2016 10 30  .isBetween  2016 10 30    2016 12 30   null       ; //false         but an optional argument doesn t accept null when strictNullChecks is enabled.    This means we get lots of errors like:     error TS2345: Argument of type  null  is not assignable to parameter of type   day     hour     minute     month     second     year     s     m     h     d     M     y     ye... .     This lead me to look at the code to see if the types or the docs were right...    isBetween calls isAfter:  this.isAfter from  units      isAfter calls  units = normalizeUnits  isUndefined units  ? units :  millisecond  ;     isUndefined is  input === void 0   normalizeUnits is  typeof units ===  string  ? aliases[units]    aliases[units.toLowerCase  ] : undefined;     The examples pass null instead of undefined  so we get  units = normalizeUnits   null === void 0  ? null :  millisecond  ;  and null is not === to void 0  so we get  normalizeUnits null       typeof null ===  string  ? aliases[units]    aliases[units.toLowerCase  ] : undefined;     typeof null is  object   so we return undefined  which inside isAfter means we fail the next check:       js  if  units ===  millisecond        return this.valueOf   > localInput.valueOf  ;            and instead do:       js  return localInput.valueOf   < this.clone  .startOf units .valueOf  ;         and startOf calls normalizeUnits again:  units = normalizeUnits units   which returns undefined  we fall all the way through the switch statements and if blocks and return  this .    So in the end we don t modify the clone at all  so it all collapses down to:       js  return localInput.valueOf   < this.valueOf  ;         which is the   same   as the milliseconds fast path  except we wasted time cloning. So it seems like passing undefined is   better   than passing null like in the examples.    I think moment wants to fix the typings to allow both null and undefined  and I think the code wants to fix the checks to make passing null have the same fast paths as passing undefined. Today they have the same behavior  but passing null like the docs is slower.      Environment:      TypeScript Version 2.4.1  ,esprehn,open,1,2017-08-10 00:56:37,0000-00-00 00:00:00,,Documentation,TypeScript,todo,,,0,1
10136,moment/moment,4115,Getting wrong value from parsing time and date,  Description of the Issue and Steps to Reproduce:         js  var obj =       startDate :  17/12/1       startTime :  12:40      obj.startDateTime = moment obj.startDate     obj.startTime   YY MM DD HH mm  .toISOString  ;  console.log obj.startDateTime ;//  2018 01 08T23:00:00.000Z        The output is totally wrong   I managed to get it to work by changing     to     and in the format string     to    :     js  obj.startDateTime = moment obj.startDate     obj.startTime   YY MM DD HH mm  .toISOString  ;           Environment:    Chrome 59.0.3071.115  Official Build   64 bit  on Ubuntu 16.0.4    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString    //  2018 01 08T23:00:00.000Z   console.log  new Date   .toLocaleString    // 8/10/2017  2:49:34 PM  console.log   new Date   .getTimezoneOffset    //  120  console.log  navigator.userAgent  // Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/59.0.3071.115 Safari/537.36  console.log moment.version  // 2.9.0          Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,Qoutroy,closed,1,2017-08-10 12:52:54,2017-08-11 16:28:39,,Forgiving parsing,,,0,1
10135,moment/moment,4116,Locale returning  zh cn    Chinese  Simplified   as default locale in 2.18.1,  Some Info    I am running karmajs as a testing framework and for some of the specs momentjs is using zh cn as the default locale.    my package.json file contains:    moment :  2.18.1      moment.locale    will return  zh cn .    when running  moment  .format  LL  ;  I get 2017 6 1 .    setting  moment.locale  en  ; fixes the problem. ,Gerras,open,4,2017-08-11 17:54:03,0000-00-00 00:00:00,,Troubleshooting,,,0,1
10134,moment/moment,4117,[locale] te: Fix typo in july,I signed the CLA. Please review/accept the PR. Thank you.,shivakrishna9,open,3,2017-08-13 18:53:54,0000-00-00 00:00:00,,Needs Revision,,,1,1
10133,moment/moment,4118,Split moment.d.ts,moment.d.ts is the typescript file that declares typings for the public API of moment.        Problem      Workflow issues       Locality  Since moment.d.ts attempts to encapsulate the entire public API of moment in one hit  there is no clear direction to a developer working on a file in one of the  src/  directories that it needs to reflect changes in the code        API surface documentation  The declarations file is great documentation for external javascript and typescript developers consuming the moment libraries. However  there is almost no documentation within the moment code. Function docstrings are few and far between and when provided are minimalist at best.        Mixins  Moment defines only a few core types   Moment    Locale    Duration  etc.  and heavily relies on  an informal mixin like API to provide functionality to the core types. This can be leveraged to improve the tree shaking functionality of moment. However  due to a lack of documentation/types  there are numerous small differences between the way mixins are applied    even between mixins applied to the same core type.    By standardising the mixin interface  it will open up the potential of future work supporting tree shakers  minimising the bundle size of moment.        Dated typings  Due to backwards compatability concerns  a lot of typescript features which would be very useful in the public moment API  most notably  keyof  and  Partial   added in 2.1 .        Solution  Converting the entire project to typescript is a large project and requires providing typings for a lot of internal functionality which does not need it. In addition  it would greatly increase the difficulty of merging fixes back into moment 2.x.        Split moment.d.ts       src/lib/core/core.d.ts   typings for moment mixins  core  and defines the core moment interface.     src/lib/core/units.d.ts   defines the basic units of moment     src/lib/create/create.d.ts      typings for moment factory functions     src/lib/duration/duration.d.ts   durations     src/lib/locale/locale.d.ts   locales  locale mixins       src/lib/locale/units.d.ts   locale mixins for the unit types     src/lib/format/serialization.d.ts   parsing and formatting functionality     src/lib/format/units.d.ts   parsing and formatting tokens for the different units     src/lib/moment/moment.d.ts   The calendar  compare  diff  start end     src/lib/timezone/timezone.d.ts   timezones  timezone mixins.     src/lib/moment.d.ts   Re exports functions from lib/  and        Breaking changes  The namespace is _not_ the default factory function. The following code will be invalid after this change       typescript  // Incorrect: 2.x  const moment = require  moment  ;  let m = moment  ;    // Correct  const  moment  = require  moment  ;  let m = moment  ;         Typings  except for the namespace change  will be backwards compatible  but will require a minimum typescript version of 2.3.  I ll create a PR in the next couple of days containing _only_ the typescript changes  no javascript changes.  The typescript changes are available for review in PR  4121. it contains no javascript changes so that new types can be discussed and improved before implementation.    All javascript changes  except for the namespace change  will be internal refactorings and will not affect the public API.        ,ovangle,open,0,2017-08-13 23:54:31,0000-00-00 00:00:00,,TypeScript,todo,,,0,1
10132,moment/moment,4119,Documentation about  xxx ago , [image] https://user images.githubusercontent.com/1157412/29320165 cda9646a 81ef 11e7 8486 ebcc9eea4857.png   ,socketpair,closed,2,2017-08-15 14:27:53,2017-08-15 14:29:55,,,,0,1
10131,moment/moment,4120,duration.add: 24 hours isn t the same as 1 day when adding to negative values,   Description of the Issue and Steps to Reproduce:  Inconsistent behavior of  duration.add . To wit:     javascript  // This works fine  expect duration  2   hours  .add 24   hours  .toJSON   .to.equal duration 22   hours  .toJSON   ;  // This errors  expect duration  2   hours  .add 1   days  .toJSON   .to.equal duration 22   hours  .toJSON   ;  // With output:  //      AssertionError: expected  P1DT2H  to equal  PT22H   //        expected   actual  //  //       P1DT2H  //       PT22H            Environment:  Node 8.1.3 on Ubuntu 17.0.4      Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     // Tue Aug 15 2017 14:57:21 GMT 0500  CDT   console.log  new Date   .toLocaleString     // 2017 8 15 14:57:21  console.log   new Date   .getTimezoneOffset     // 300  console.log  navigator.userAgent   // NA for node  console.log moment.version   // 2.18.1     ,tstirrat15,closed,4,2017-08-15 20:00:37,2017-08-20 23:54:16,,,,0,1
10130,moment/moment,4121,[doc] [typescript] split moment.d.ts,  Split typings in moment.d.ts up across the various packages     improve typings for internal functionality  javascript changes to follow    set minimum supported typescript version to 2.4    provide mixin schema for future modularization work.,ovangle,closed,0,2017-08-16 08:19:19,2017-08-18 15:36:20,,,,1,1
10129,moment/moment,4122,Turkish locale should work differently,Hi     Apologies if I avoided using the issue template.    The below  using Turkish locale:     moment  .format  Do MMMM       Returns:      16 nc  A ustos      This could be considered working as expected  however seems that in Turkey it is not custom to use dates in the above format  but instead should be:      16 A ustos      Would it be possible to emit the above without having to switching formatting string to   D MMM   for Turkish locale only?,michaelgeorgeattard,closed,6,2017-08-16 09:30:21,2018-03-02 19:01:12,,Language,,,0,1
10128,moment/moment,4123,Re enable disabled tests,,chris-erickson,closed,2,2017-08-16 13:25:48,2017-08-16 15:20:46,,,,1,1
10127,moment/moment,4124,warning and error,   description    > I use momentjs in my project. There is some questions. momentjsV2.18.1   moment  .add  day   1 ;     moment  .add 1   day  ;    [_008] https://user images.githubusercontent.com/17895933/29393548 f3ac85b4 8336 11e7 8226 2ed5d376ff03.png   ,XdCareWy,closed,16,2017-08-17 02:30:17,2017-08-21 16:16:57,,TypeScript,,,0,1
10126,moment/moment,4125,week   is not correct for end of year,const date = moment  2015 12 27    console.log date.week    // 1  console.log date.year    // 2015    I suppose date.week   should be 53? if date.week   is 1 then date.year   can t be 2015 coz it would be the same week as  2015 01 01 .    console.log   new Date   .toString    // Thu Aug 17 2017 15:37:12 GMT 1000  AEST   console.log  new Date   .toLocaleString    // 17/08/2017  15:37:12  console.log   new Date   .getTimezoneOffset    //  600  console.log  navigator.userAgent  // Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_6  AppleWebKit/537.36  KHTML  like Gecko  Chrome/59.0.3071.115 Safari/537.36  console.log moment.version  // 2.18.1  ,DavidOnGitHub,closed,4,2017-08-17 05:42:17,2017-08-21 15:56:13,,,,0,1
10125,moment/moment,4126,webpack locale err,  Description of the Issue and Steps to Reproduce:      webpack config add:        js    resolve:        alias:          vue :  vue/dist/vue.esm.js          moment:  moment/src/moment                         vue  <script>  import moment from  moment   moment.locale  zh cn  ; // pack error  </script>          Please include the values of all variables used.       Environment:      OSX Node.js 8.4.0     Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.       Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version               console.log   new Date   .toString     Thu Aug 17 2017 17:09:27 GMT 0800  CST   console.log  new Date   .toLocaleString     2017 8 17 17:09:27  console.log   new Date   .getTimezoneOffset      480  console.log  navigator.userAgent   Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_6  AppleWebKit/537.36  KHTML  like Gecko  Chrome/62.0.3178.0 Safari/537.36  console.log moment.version   2.18.1          Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer.          WARNING in ./node_modules/moment/src/lib/locale/locales.js  Module not found: Error: Can t resolve  ./locale  in  /Users/willin/Documents/w2fs/coding task/node_modules/moment/src/lib/locale    @ ./node_modules/moment/src/lib/locale/locales.js 55:12 39   @ ./node_modules/moment/src/lib/locale/locale.js   @ ./node_modules/moment/src/moment.js   @ ./src/component/moment/index.js   @ ./node_modules/babel loader/lib ./node_modules/vue loader/lib/selector.js?type=script index=0 ./src/router/timeline/tasks.vue   @ ./src/router/timeline/tasks.vue   @ ./node_modules/babel loader/lib ./node_modules/vue loader/lib/selector.js?type=script index=0 ./src/router/timeline/timeline.vue   @ ./src/router/timeline/timeline.vue   @ ./src/router/timeline/index.js   @ ./src/router/index.js   @ ./src/main.js   @ multi  webpack  dev server/client?http://localhost:3993 webpack/hot/dev server ./src/main.js     ,willin,closed,5,2017-08-17 09:10:50,2017-08-17 14:26:53,,Duplicate,Known Issue,,,0,1
10124,moment/moment,4127,from  /to   wrong days calculation around a month,  Description of the Issue and Steps to Reproduce:      Got the same result for the very different dates in to  /from  :     js  const moment = require  moment    var expiredAt = moment  2017 07 16T21:01:54.249Z    var now = moment  2017 08 16T00:02:01.249Z    var tomorrow = moment  2017 08 17T00:02:01.249Z      now.to expiredAt  //  a month ago   expected   tomorrow.to expiredAt  //  a month ago   expected     moment.relativeTimeThreshold  d   180   now.to expiredAt  //  30 days ago   expected   tomorrow.to expiredAt  //  30 days ago   unexpected        Please  no. Maybe there are 30.00000001 and 30.99999999 values in math  let s see:     js  moment.relativeTimeRounding v =>   return v;     now.to expiredAt  //  30.125081018518518 days ago   well  ok   tomorrow.to expiredAt  //  30.125081018518518 days ago        God  please  no. They are the same      js  expiredAt.format  x   //  1500238914249   now.format  x   //  1502841721249   console.log  1502841721249   1500238914249  / 1000 / 60 / 60 / 24  // 30.125081018518518    tomorrow.format  x   //  1502928121249   console.log  1502928121249   1500238914249  / 1000 / 60 / 60 / 24  // 31.125081018518518           Environment:      Debian 8.7  Node.JS v4.4.7  Moment.JS v2.15.2  TZ= America/New_York   Debian 8.8  Node.JS v6.9.2  Moment.JS v2.18.1  TZ= Europe/Berlin   ,pretender,open,4,2017-08-17 09:14:52,0000-00-00 00:00:00,,Bug,Up-For-Grabs,,,0,1
10123,moment/moment,4128,Moment returns  Invalid Date  in latest version,  Description of the Issue and Steps to Reproduce:      below date returns  Invalid Date   moment  2017 08 17T9:19Z  .format  MM/DD/YY [at] hh:mm A      version: 2.18.1,durgeshahire4,closed,5,2017-08-17 13:07:06,2017-08-18 03:58:12,,,,0,1
10122,moment/moment,4129,[locale] es: Update month and week names,Update to capital letter the first letter of months and days.,jsegra,closed,5,2017-08-18 12:30:36,2017-10-25 15:30:21,,,,1,1
10121,moment/moment,4130,Incorrect parse with TZ when date affected by daylight saving,Since 2.16.0  when parsing a date/time string with TZ and daylight saving is supposed to affect it  moment is set 1 hour in the future.    Example strings:   no tz  correct :  2017 07 27 16:57:11.0   > Thu Jul 27 2017 16:57:11 GMT 0400   with tz  wrong :  2017 07 27 16:57:11.0 EST   > Thu Jul 27 2017 17:57:11 GMT 0400    See those two JsFiddles:    Moment 2.15.2  works fine : https://jsfiddle.net/j05qbwun/1/  Moment 2.18.1  broken : https://jsfiddle.net/c4u0dzyx/1/      Environment:      Chrome 60.0.3112.90  Official Build   64 bit  on OSX      Other information that may be helpful:      The time zone setting of the machine the code is running on  EST EDT     The time and date at which the code was run  2017 08 18 15:10    Other libraries in use  TypeScript  Immutable.js  etc   jQuery  JsFiddle    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version        N/A  JsFiddle .     Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,hrimhari,closed,2,2017-08-18 19:17:58,2017-08-21 16:06:46,,,,0,1
10120,moment/moment,4131,[bugfix] Fix day of week validation  fixes  4112,In response to issue  4112  this PR adds in weekday validation for string with format.    I ve also added a test for this  since it was mentioned there wasn t one for this case. I wasn t sure if it should have been grouped with an existing test.    Any feedback is appreciated ,mikeparas,closed,4,2017-08-19 02:05:05,2017-10-09 22:53:46,,,,1,1
10119,moment/moment,4132,Unpredictable behaviour when the input format does not exactly match the input date string due to non alphanumeric characters,  Description of the Issue and Steps to Reproduce:    The documentation says that:    > The parser ignores non alphanumeric characters  so both of the following will return the same thing.  > moment  12 25 1995    MM DD YYYY  ;  > moment  12/25/1995    MM DD YYYY  ;     Yet:     bash  > const moment = require  moment  ;  undefined  > moment  Jul 17  2017    MMM D  YYYY  .format  YYYY MM DD  ;   2017 07 17   > moment  Jul 17  2017    MMM  D  YYYY  .format  YYYY MM DD  ; // additional comma before D   2017 07 20   > moment  Jul  17  2017    MMM  D  YYYY  .format  YYYY MM DD  ; // no issue if date is also of the same format   2017 07 17            Environment:    node v6.9.1  on Linux Mint 18.2.    Output of the code provided:       bash  > const moment = require  moment  ;  undefined  > console.log   new Date   .toString     Sat Aug 19 2017 12:20:40 GMT 0530  IST   undefined  > console.log  new Date   .toLocaleString     8/19/2017  12:20:40 PM  undefined  > console.log   new Date   .getTimezoneOffset      330  undefined  > console.log  navigator.userAgent   ReferenceError: navigator is not defined      at repl:1:14      at sigintHandlersWrap  vm.js:22:35       at sigintHandlersWrap  vm.js:96:12       at ContextifyScript.Script.runInThisContext  vm.js:21:12       at REPLServer.defaultEval  repl.js:313:29       at bound  domain.js:280:14       at REPLServer.runBound [as eval]  domain.js:293:12       at REPLServer.<anonymous>  repl.js:513:10       at emitOne  events.js:101:20       at REPLServer.emit  events.js:188:7   > console.log moment.version   2.18.1  undefined  >        ,nikhilw,closed,4,2017-08-19 06:57:58,2017-08-21 15:54:58,,,,0,1
10118,moment/moment,4133,Italian long date format shouldn t use comma between name of the day and number,First of all thanks for the great lib you created  it s very easy to use and full of options to configure       I have searched in issues and PR but I didn t find anything related to this  that s the reason for which I m opening this issue.    Currently  as of 1f613c2 or version 2.18.1  the long date format for Italian locale is this:       longDateFormat :            ...          LLLL :  dddd  D MMMM YYYY HH:mm            however there shouldn t be a comma between the name of the day and the number  so I propose to change it to:       longDateFormat :            ...          LLLL :  dddd D MMMM YYYY HH:mm              This is in order to keep the polymorphic behavior between the different locales.    Moreover I d ask of there is a way to have a polymorphic way to format only the date without the time  like  dddd D MMMM YYYYY . I didn t find any  so I had to use the  LLLL  format and strip off the time part to keep it working across the different locales.  ,svavassori,closed,1,2017-08-19 11:00:41,2017-12-17 00:28:59,,Language,,,0,1
10117,moment/moment,4134,[locale] it: Remove comma between weekday and date  fixes  4133,As described in issue  4133  there shouldn t be a comma between weekday and date in Italian locale.    I ve checked this by comparing the output of:     js  Intl.DateTimeFormat  it        weekday:  long      day:  numeric      month:  long      year:  numeric      hour:  2 digit      minute:  2 digit     .format new Date   ;  //  sabato 19 agosto 2017  15:55           I ve not addressed the fact that the browser native  Intl  implementation puts a comma between the date and time as I m not sure if moment is trying to mimic  Intl  functionality   and commas in that position are also missing in other locales   e.g.  de    en us    en gb ... ,ashsearle,closed,3,2017-08-19 15:00:52,2017-12-17 00:28:53,,Pending Next Release,,,1,1
10116,moment/moment,4135,Add months provides incorrect result,  Description of the Issue and Steps to Reproduce:       javascript  var date = moment  2017 09 01  ;  date.add 1   months  ;  console.log date.toISOString   ;    // this produces 2017 09 30T14:00:00.000Z       tested on version  2.18.1     I have tried passing different timezone  but the issue persists     Please include the values of all variables used.       Environment:    Chrome Version 60.0.3112.90  Official Build   64 bit  on OSX     Examples: Chrome 49 on OSX  Internet Explorer 10 on Windows 7  Node.JS 4.4.4 on Ubuntu 16.0.4      Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.       Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString       // Sat Aug 19 2017 13:06:07 GMT 1000  AEST   console.log  new Date   .toLocaleString        // 19/08/2017  13:06:07  console.log   new Date   .getTimezoneOffset        //  600  console.log  navigator.userAgent      // Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_6  AppleWebKit/537.36  KHTML  like Gecko  Chrome/60.0.3112.90 Safari/537.36  console.log moment.version      // 2.18.1          Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,lightbringer1991,closed,2,2017-08-20 03:10:59,2017-08-21 15:46:43,,,,0,1
10115,moment/moment,4136,Invalid dot in Latvian longDateFormat,In file  lv.js :     L :  DD.MM.YYYY.       should be without the dot in the end:     L :  DD.MM.YYYY   ,rayokao,closed,7,2017-08-21 06:26:15,2017-12-29 19:15:31,,Discussion,Language,,,0,1
10114,moment/moment,4137,[locale] lv: Avoid trailing dot after short date  fixes  4136,As reported  and confirmed with:     js  Intl.DateTimeFormat  lv        day:  2 digit      month:  2 digit      year:  numeric      .format new Date   ;  //  21.08.2017        ,ashsearle,closed,3,2017-08-21 13:33:20,2017-12-29 19:15:02,,locale approval needed,,,1,1
10113,moment/moment,4138,[misc] TS: Add missing  ss  property to RelativeTimeSpec and MomentRelativeTime,The property  ss  was missing in  RelativeTimeSpec  and  MomentRelativeTime  interfaces  although the docs say it exists.    I have only changed the  d.ts  file; I assume it is an independent change  and should not affect anything else.,dar5hak,closed,7,2017-08-21 17:46:19,2017-11-28 16:13:06,,Pending Next Release,,,1,1
10112,moment/moment,4139,Android Bug only with Chrome,I m not a pro with this stuff  but this line of code yields different results. I am using MomentJS 2.18.1.    Chrome  Safari  Internet Explorer  pretty much all browsers  desktop and ios mobile :  > moment Date.now   .format  HH:mm    > returns 14:27    Chrome on Android Mobile:  > moment Date.now   .format  HH:mm    > returns 20:27    Opera Mini on Android Mobile:  > moment Date.now   .format  HH:mm    > returns 14:27    Something about mobile chrome is losing the offset. However  Opera Mini on the same phone respects the offset. I have no idea what is causing this.,wayofthefuture,closed,2,2017-08-21 19:33:26,2017-08-22 21:03:04,,Troubleshooting,,,0,1
10111,moment/moment,4140,[locale] kn: Improve short months,,mohan-mu,closed,4,2017-08-23 02:10:43,2018-03-02 18:55:49,,Pending Next Release,,,1,1
10110,moment/moment,4141,Inconsistency adding date that doesn t account for BST ending,  Description of the Issue and Steps to Reproduce:      When adding time to a moment instance  using days doesn t appear to account for British Summer Time but adding hours does.      Environment:       Have tested this on Chrome and Firefox  macOS    doesn t look isolated to any particular environment. The following example can be run in the JavaScript console when on the https://momentjs.com site.     Examples:     In the following example  replicated in the browser console   I am adding 90 days to todays date  24 August 2017 08:07 . The difference in the two calculations is adding by days  90  or hours   24   90  .    When using  hours   the correct time is calculated and it accounts for BST ending on 29 October where we lose 1 hour. However adding 90 days doesn t account for BST ending and the hour is not deducted.       javascript  moment new Date   .add 2160   hours  .format  YYYY MM DD hh:mm:ss a    //  2017 11 22 07:07:16 am   moment new Date   .add 90   days  .format  YYYY MM DD hh:mm:ss a    //  2017 11 22 08:07:13 am            Other information that may be helpful:         js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version        ===       Thu Aug 24 2017 08:18:02 GMT 0100  BST   24/08/2017  08:18:02   60  Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_6  AppleWebKit/537.36  KHTML  like Gecko  Chrome/60.0.3112.101 Safari/537.36  2.18.1     ,kevbradwick,closed,3,2017-08-24 07:20:38,2017-08-25 02:29:29,,,,0,1
10109,moment/moment,4142,[new locale] mt: Maltese language ,Months and days names  long and short format  time format for the Maltese Language  ,alesma,closed,1,2017-08-28 08:40:56,2017-08-28 09:01:54,,,,1,1
10108,moment/moment,4143,[new locale] mt: Maltese language,Months and days names  long and short format  time format for the Maltese Language,alesma,closed,2,2017-08-28 09:09:16,2017-12-17 00:29:13,,Pending Next Release,,,1,1
10107,moment/moment,4144,Why are the months zero indexed when parsing a date array?,The backend response I m using to init moment: [2017  8  30]  30th of august 2017   is parsed as 2017 09 30 by moment. However  if I join the input array together with a dash   2017 8 30   it parses it as expected.    Why is the month the only number that is zero indexed in your constructor? What is the reasoning behind this? According to your documentation this is intended  but I find it confusing and odd.      ,Gruneau,closed,0,2017-08-29 08:39:49,2017-08-29 08:47:57,,,,0,1
10106,moment/moment,4145,noise in duration ISO string ,  Description of the Issue and Steps to Reproduce:      ISO8601 representation of durations includes floating point noise in some cases even though the duration value is clearly integral milliseconds.         use strict ;      const moment = require  moment  ;      let dur = moment.duration 123 ;      console.log  dur ;      console.log dur.toISOString   ;      dur = moment.duration 123456789 ;      console.log  dur ;      console.log dur.toISOString   ;            console.log  new Date   .toString         console.log  new Date   .toLocaleString         console.log  new Date   .getTimezoneOffset         console.log moment.version ;    produces:        123      PT0.123S      123456789      PT34H17M36.78900000000431S      Tue Aug 29 2017 06:53:18 GMT 0500  CDT       2017 8 29 06:53:18      300      2.18.1    Note the second duration has trailing  00000000431  noise in the seconds block.      Environment:      Node.js 4.5.0  6.9.5  and 8.4.0 on Ubuntu  ,pabigot,closed,1,2017-08-29 11:55:39,2017-09-03 15:57:07,,,,0,1
10105,moment/moment,4146,[bugfix] Floating point errors in ISO duration format  fixes  4145,Avoid a floating point error during millisecond  > second conversion when formatting duration in ISO format.    Floating point error is easy to trigger:     js  console.log String  123456789 / 1000    60  ;     ,ashsearle,closed,1,2017-08-29 18:56:21,2017-10-09 22:31:39,,Pending Next Release,,,1,1
10104,moment/moment,4147,days diff wrong,  Description of the Issue and Steps to Reproduce:    Today  2017 08 30 10AM  this gives  moment  2017 08 30  .diff moment     days    0  which is correct.    But this gives  moment  2017 08 31  .diff moment     days    0  which is wrong  should have been 1.      Environment:    Chrome      Other information that may be helpful:      The time zone setting of the machine the code is running on  tried different timezones  same issue    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version     VM222:1 Wed Aug 30 2017 10:57:57 GMT 0300  EEST   VM222:2 8/30/2017  10:57:57 AM  VM222:3  180  VM222:4 Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/60.0.3112.78 Safari/537.36  VM222:5 2.18.1          Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,mariusa,closed,2,2017-08-30 07:58:18,2017-09-05 07:41:19,,,,0,1
10103,moment/moment,4148,moment.unix,  unix transform bug       Unix timestamp:1504094300       Environment: zh cn      nodejs:any system:any       Other information that may be helpful:      just install moment and use    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log  moment.unix 1504094300 .format  YYYY MM DD hh:mm:ss          >  output : 2017 08 30 07:58  but actually it is 2017/8/30 19:58         Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,chuhanan,closed,2,2017-08-30 23:59:11,2017-09-03 14:44:34,,,,0,1
10102,moment/moment,4149,calendar bug report,  Description of the Issue and Steps to Reproduce:       Please include the values of all variables used.       Environment:       Examples: Chrome 60 on OSX   Node.JS 8.4.0 on OSX     Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.       Other information that may be helpful:      The time zone setting of the machine the code is running on Asia/Shanghai    The time and date at which the code was run 2017 09 07    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  // today 2017 08 31  console.log moment  2017 09 07  .calendar     // 09/07/2017  // it s Saturday next week indeed  console.log moment  2017 09 02  .calendar     //     00:00   // which means Saturday next week  but it s Saturday this week indeed          Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer.       source code:       js  calendar :      sameDay :  [Today at] LT    // today  right    nextDay :  [Tomorrow at] LT   // tomorrow  right    nextWeek :  dddd [at] LT   // this week  wrong    lastDay :  [Yesterday at] LT   // yesterday  right    lastWeek :  [Last] dddd [at] LT   // this week  wrong    sameElse :  L  // have no idea about this            today is 2017 08 31  in chinese:      2017 08 28   2017 09 03 from Monday to Sunday are all in this week.    2017 08 21   2017 08 27 are last XXXday    2017 09 04   2017 09 10 are next XXXday  ,willin,open,1,2017-08-31 01:17:41,0000-00-00 00:00:00,,Language,,,0,1
10101,moment/moment,4150,How to load all locales and get back all informations about them?,Hi      I m currently working on a multilingual product and i need to load all locales. Currently i have to import each locale manually  add an  index.d.ts  into the locale directory could let us made a simple  import from  moment/locale .    For more convenience i would like generate the language selector with the momentjs loaded locales.  Currently the method  moment.locales    give only the locales without informations like  [ fr   en   de ...]  and i would like obtain the language name  like that:  [   fr :  french      en :  english      de :  deutsch  ]   etc...    This kind of feature would be really usefull to generate selectors or any other frontend component wich list the availables locales.    Thank you ,antoine-pous,open,1,2017-08-31 12:55:32,0000-00-00 00:00:00,,Enhancement,,,0,1
10100,moment/moment,4151,Add support for consuming typings in global scope,From  I think  TypeScript 2.1  the recommended export formula for libraries which support UMD is to use the  export as namespace  structure. Without this  one cannot use the typed  moment  global variable. See this as a reference: https://github.com/Microsoft/TypeScript/wiki/What s new in TypeScript support for umd module definitions,cervengoc,closed,3,2017-08-31 19:57:14,2017-12-22 03:50:20,,Breaking change,Discussion,,,1,1
10099,moment/moment,4152,Stepping through days is not correct for Asia/Beirut.,  Description of the Issue and Steps to Reproduce:      I am seeing some strange behavior while using moment to step through each day between a moment range in timezone Asia/Beirut. I have created a minimal test case to demonstrate this behavior:         const moment = require  moment timezone  ;    const tzStart = moment  2015 03 27T19:21:24.000Z  .tz  Asia/Beirut  ;  const tzEnd = moment  2015 03 30T19:21:24.000Z  .tz  Asia/Beirut  ;  var startOfDay = tzStart.clone  ;  var endOfDay = tzStart.clone  ;  endOfDay.endOf  day  ;  console.log  startOfDay:     startOfDay.format   ;  console.log  endOfDay:     endOfDay.format   ;  while  endOfDay.isBefore tzEnd          console.log         ;        // Move to next day.      startOfDay.add 1   days  .startOf  day  ;      endOfDay.add 1   days  ;      console.log  startOfDay:     startOfDay.format   ;      console.log  endOfDay:     endOfDay.format   ;               Please include the values of all variables used.     The above script produces:    startOfDay: 2015 03 27T21:21:24 02:00  endOfDay: 2015 03 27T23:59:59 02:00    startOfDay: 2015 03 28T00:00:00 02:00  endOfDay: 2015 03 28T23:59:59 02:00      startOfDay: 2015 03 28T00:00:00 02:00    endOfDay: 2015 03 29T23:59:59 03:00      startOfDay: 2015 03 28T00:00:00 02:00    endOfDay: 2015 03 30T23:59:59 03:00    This doesn t seem correct to me  as startOfDay in last 2 groups  in bold  stay on 2015 03 28  rather than moving to the next day.    If I change the timezone to another one like Asia/Shanghai  it produces:    startOfDay: 2015 03 28T03:21:24 08:00  endOfDay: 2015 03 28T23:59:59 08:00    startOfDay: 2015 03 29T00:00:00 08:00  endOfDay: 2015 03 29T23:59:59 08:00    startOfDay: 2015 03 30T00:00:00 08:00  endOfDay: 2015 03 30T23:59:59 08:00    startOfDay: 2015 03 31T00:00:00 08:00  endOfDay: 2015 03 31T23:59:59 08:00    Which is correct.      Environment:       Node.JS v6.10.3 on Ubuntu 16.0.4       Other information that may be helpful:      The time zone setting of the machine the code is running on: UTC    The time and date at which the code was run: Fri Sep  1 12:10:09 UTC 2017    Other libraries in use: moment timezone    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log moment.version     Fri Sep 01 2017 12:11:55 GMT 0000  UTC   9/1/2017  12:11:55 PM  0  2.16.0       ,hifall,open,6,2017-09-01 12:13:28,0000-00-00 00:00:00,,Bug,,,0,1
10098,moment/moment,4153,4024: fix incorrect date when changing year from leap to normal,This is the fix for https://github.com/moment/moment/issues/4024    Changes:  If date is  29/02/xxxx   in which  xxxx  is a leap year  then:      when changing year to a normal year  the date should become  28/02/yyyy     when changing to a leap year  the date should become  29/02/zzzz ,lightbringer1991,closed,2,2017-09-01 13:08:18,2017-10-24 22:57:35,,,,1,1
10097,moment/moment,4154,[feature] add format constants to support output to HTML5 input type formats  see  3928 ,This is an updated version of https://github.com/moment/moment/pull/4009 since it has become stale    fixes https://github.com/moment/moment/issues/3928    Changes:  Added format constants to be used when formatting a moment object to a string that HTML5 input can use  as specified in https://www.w3schools.com/html/html_form_input_types.asp    Supports the following types       datetime local      date      time      week      month ,lightbringer1991,closed,0,2017-09-01 14:10:33,2017-12-17 00:28:22,,Pending Next Release,,,1,1
10096,moment/moment,4155,require moment without locales nor hacks,  Description of the Issue and Steps to Reproduce:    I am using moment in a webpack build.    It looks like require  moment   is the equivalent of using moment with locales.min.js from CDN  judging mainly by the size increase in my bundle .    Is there a way to require moment with only the default english locale?  i.e. the equivalen of moment.min.js from CDN .    I guess my question is related to  2373  2416      PLEASE do not suggest removing locales with the Webpack Ignore plugin  or similar hack  BECAUSE I CAN NOT.  We are using Angular CLI which does not support modifyng the pipeline.      We need to make all locales opt in      Environment:    Angular CLI  Node 8  ,aldo-roman,closed,15,2017-09-01 16:27:58,2017-09-01 18:02:19,,,,0,1
10095,moment/moment,4156,ISO regex does not support only years,  Description of the Issue and Steps to Reproduce:    While looking into parsedDateParts  I noticed that when creating a date with just a year  parsedDateParts is not filled with the year. Some investigation shows  that this is because in order to parse this date  moment.js has to fallback to createFromInputFallback  . Apparently years only is not recognised by the ISO regex es of moment.js As createFromInputFallback is deprecated  this seems like a problem to me.    Especially 4 digit years seems like part of the minimal expected support set for ISO dates  especially  since it does seem to support extended years aka.  YYYYYY . The regexes probably should be corrected for this.         > moment  1926  .parsingFlags  .parsedDateParts  < []  0   > moment  1926  .isValid    < true  > moment  1926  .year    < 1926         Direct test of the two regexes        2016 .match  /^ s   ?:[  ] d 6   d 4    ?: d d  d d W d d  d W d d  d d d  d d   ?: T     d d ?:: d d ?:: d d ?:[. ] d  ? ? ?  [    ] d d ?::? d d ?  s Z ? ? /  ;  null   2016 .match  /^ s   ?:[  ] d 6   d 4   ?: d d d d W d d d W d d  d d d  d d   ?: T     d d ?: d d ?: d d ?:[. ] d  ? ? ?  [    ] d d ?::? d d ?  s Z ? ? /  ;  null           Environment:      Safari  10.1.2  12603.3.8     Mac OS 10.12.6  16G29     but also    Firefox 54.0.1      Other information that may be helpful:    [Log] Mon Sep 04 2017 15:25:06 GMT 0200  CEST   [Log] 9/4/2017  3:25:06 PM  [Log]  120  [Log] Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_6  AppleWebKit/603.3.8  KHTML  like Gecko  Version/10.1.2 Safari/603.3.8  [Log] 2.18.1,hartman,closed,4,2017-09-04 14:32:10,2018-03-05 08:44:44,,Duplicate,Enhancement,,,0,1
10094,moment/moment,4157,Enhancement: Attempt to use AMD before commonjs,  Description of the Issue and Steps to Reproduce:      I would like to update the module template s  to try AMD before CommonJS.  This will enable runtime environments that implement AMD to work within Node.    Related to: https://github.com/umdjs/umd/pull/22     I ll send a pull request to update the template s  if there is support.,jasonmit,closed,1,2017-09-04 23:58:57,2017-09-04 23:59:18,,,,0,1
10093,moment/moment,4158,ERROR TypeError: a.toLowerCase is not a function at Xa  VM581 moment.min.js:6  ,this error comes up when using fullcalendar that uses moment js.    ERROR TypeError: a.toLowerCase is not a function at Xa  VM581 moment.min.js:6     at Ya  VM581 moment.min.js:6       at Function.bb [as localeData]  VM581 moment.min.js:6       at getMomentLocaleData     Please include the values of all variables used.       Environment:      Chrome 60 on windows 10 X64.        Other information that may be helpful:    using fullcalendar.js    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString   :  Wed Sep 06 2017 10:04:13 GMT 0300  Eastern Europe Daylight Time   console.log  new Date   .toLocaleString   :  9/6/2017  10:08:43 AM  console.log   new Date   .getTimezoneOffset   :   180  console.log  navigator.userAgent :  Mozilla/5.0  Windows NT 10.0; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/60.0.3112.113 Safari/537.36  console.log moment.version :  2.18.1         thanks,tomokohn,closed,2,2017-09-06 07:11:58,2017-09-06 07:37:28,,,,0,1
10092,moment/moment,4159,Support for extended ISO8601 date format with optional ZoneID,Question raised due to seeking compatibility between _moment.js_ parsing mechanism and Java 8  ZonedDateTime  formatter used during serialization.    _Java 8_ documentation [claims] https://docs.oracle.com/javase/8/docs/api/java/time/ZonedDateTime.html toString    ISO8601 compatibility with full _Date_/_Time_ format with _Zone Offset_ and   additional   _Zone ID_.    Example string taken directly from JavaDocs:       java       2007 12 03T10:15:30 01:00[Europe/Paris]          This one is used by serializer which output I use in our front end client using _moment.js_      This format though is [not parse able] https://runkit.com/pazkooda/moment js   extended iso8601 format with optional zone id/1.0.0  by _moment.js_.    For reference below is code used by example provided in above link:       javascript      var moment = require  moment         //trying to parse extended version used by Java 8 ZonedDateTime formatter      //that is claimed to follow ISO8601 standard      var java8ExampleDate = moment  2007 12 03T10:15:30 01:00[Europe/Paris]  ;         Question is: If _Java 8_ JavaDocs are correct can this be supported by _moment.js_?  If so than this issue should treated as request for such support  thus also remove _[Question]_ from summary.,pazkooda,closed,2,2017-09-06 20:33:45,2017-09-14 10:10:59,,,,0,1
10091,moment/moment,4160,Enhancing parsing ISO string with ignorable canonical zone ID. Resolves  4159,Adding support for ignorable Canonical Zone ID ISO string parsing so that     javascript      var moment = require  moment         var mom = moment  2007 12 03T10:15:30 01:00[Europe/Paris]  ;       can be also properly handled by _moment.js_.,pazkooda,closed,4,2017-09-06 22:16:13,2017-12-22 02:52:24,,,,1,1
10090,moment/moment,4161,[BUG] Wrong duration rounding,I think there is 5 years between 2015 01 01 and 2020 01 01. But momentjs don t think so.       start = moment  2015 01 01  ;  end = moment  2020 01 01  ;  duration = moment.duration end.diff start  ;  duration.years  ; // 4   duration.months  ; // 11       BUT       start = moment  2015 01 01  ;  end = moment  2020 01 01  .add 1   day  ;  duration = moment.duration end.diff start  ;  duration.years  ; // 5   duration.months  ; // 0       AND       start = moment  2015 01 01  ;  end = moment  2020 01 01  .add 23   hours  ;  duration = moment.duration end.diff start  ;  duration.years  ; // 4  duration.months  ; // 11              start = moment  2015 01 01  ;  end = moment  2020 03 01  .date 2   duration = moment.duration end.diff start  ;  duration.months  ; // 1        all snippets could be reproduced from browser console on http://momentjs.com/docs/ /get set/    Environment:    node v8.4.0 mac os      Other information that may be helpful:      GMT 6    Thu Sep 07 2017 21:59:49 GMT 0600   06     plain momentjs library,alexey-sh,open,2,2017-09-07 16:04:50,0000-00-00 00:00:00,,Troubleshooting,,,0,1
10089,moment/moment,4162,Spanish Language in US locale  date formatting incorrect,  Description of the Issue and Steps to Reproduce:    I have a long date  Nov 01  2015  with the date format  MMM D  YYYY . This works for the  en  locale  which is English US . However when switching to  es   how do I get this to still work? The localized date is now  nov 01  2015  with the same date format  MMM D  YYYY        js  moment.locale  en     >  en   moment  Nov 01  2015    MMM D  YYYY   true .isValid     > true  moment  nov 01  2015    MMM D  YYYY   true .isValid     > false         The Spanish date returns as an  Invalid Date ,absessive,open,4,2017-09-07 20:17:42,0000-00-00 00:00:00,,Language,Troubleshooting,,,0,1
10088,moment/moment,4163,Vulnerable Regular Expression,The following regular expression used to parse dates specified as strings is vulnerable to ReDoS:     js  /[0 9] [ a z u00A0  u05FF u0700  uD7FF uF900  uFDCF uFDF0  uFFEF]  [ u0600  u06FF /]   s ?[ u0600  u06FF]   1 2 /i       The slowdown is moderately low: for 50.000 characters around 2 seconds matching time. However  I would still suggest one of the following:     remove the regex     anchor the regex     limit the number of characters that can be matched by the repetition     limit the input size.    If needed  I can provide an actual example showing the slowdown.  ,cristianstaicu,closed,24,2017-09-08 09:34:22,2017-11-29 15:36:36,,Bug,Up-For-Grabs,,,0,1
10087,moment/moment,4164,Fix handling of DST jumps in Brazilian timezones in startOf/endOf,Fixes  3132    The approach taken here is a bit different than previous ideas  e.g.  3716  where startOf was called twice in endOf. Here we apply endOf much like startOf is done  so that startOf does not have to be called in endOf. Then in startOf it also checks for DST failures where some browsers return the previous or next day when they are set to a midnight that does not exist due to the DST jump. This is handled only for those time units which require it to avoid performance issues  but overall the performance impact should be very low as it only does a couple extra comparison in most cases.    The patch is demonstrated in https://jsfiddle.net/1gpr1fys/7/ in case you want to play with it and do your own tests. It logs all  true  in the console if you have the correct timezone  Brazil/Sao Paulo or Brasilia . Works in both Firefox and Chrome.    If you have another timezone that does the DST switch not at midnight  then tests 1 and 4 in the demo fail because they return midnight instead of 1am  that s normal. The test suite of moment though passes as it always mimicks the Brazil timezone in the tests checking for this behavior.  ,Seldaek,open,6,2017-09-08 12:54:08,0000-00-00 00:00:00,,Discussion,,,1,1
10086,moment/moment,4165,Wrong day difference in leap years,Hey team/community       Description of the Issue and Steps to Reproduce:    the year 2016 was a leap year so it contained 366 days instead of 365. So an according call to something like this:     js  let start = moment  2016 01 01        end   = moment  2016 12 31  ;    let diff = end.diff start   days  ;       should return 366 as result. But actually it returns 365 [Here is a codepen snippet to reproduce the behaviour] https://codepen.io/denkweite/pen/Vzojzy .  I think it s a bug  but maybe I just did something wrong?      update    You can reproduce this bug with this test     js  test  leap year difference   function assert         assert.equal moment [2016  11  31] .diff moment [2016  0  1]    days    366   leap year contains 366 days  ;      assert.equal moment [2016  1  29] .diff moment [2016  1  1]    days    29   february in leap year contains 29 days  ;    ;          Please include the values of all variables used.       Environment:    I use moment in an browser only environment  build with webpack     Some other useful information:     js   Sat Sep 09 2017 10:16:47 GMT 0200  CEST     9.9.2017  10:16:47    120   Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_6  AppleWebKit/537.36  KHTML  like Gecko  Chrome/60.0.3112.113 Safari/537.36    2.18.1      ,michaelfeinbier,closed,1,2017-09-09 08:20:05,2017-09-14 09:41:17,,,,0,1
10085,moment/moment,4166,Moment is crash after run hours,Hi  in my chat application in nodejs  after hours i receveid this error.    This crash my application.    I tried debugging the moment code  but I did not succeed.    <    JS stacktrace    >    ==== JS stack trace =========================================    Security context: 0x6dd3408cfb51 <JS Object>      1: createLocalOrUTC aka createLocalOrUTC  [/root/node/node_modules/live_webcam/node_modules/moment/moment.js:2577] [pc=0x6dd345ba109c]  this=0x6dd340804381 <undefined> input=0x6dd340804381 <undefined> format=0x6dd340804381 <undefined> locale=0x6dd340804381 <undefined> strict=0x6dd340804381 <undefined> isUTC=0x6dd340804271 <false>       2: createLocal aka createLocal  [/root/node/node_modules...    FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed   JavaScript heap out of memory   1: node::Abort   [node]   2: 0x109838c [node]   3: v8::Utils::ReportApiFailure char const   char const   [node]   4: v8::internal::V8::FatalProcessOutOfMemory char const   bool  [node]   5: v8::internal::Factory::NewTransitionArray int  [node]   6: v8::internal::TransitionArray::Insert v8::internal::Handle<v8::internal::Map>  v8::internal::Handle<v8::internal::Name>  v8::internal::Handle<v8::internal::Map>  v8::internal::SimpleTransitionFlag  [node]   7: v8::internal::Map::CopyReplaceDescriptors v8::internal::Handle<v8::internal::Map>  v8::internal::Handle<v8::internal::DescriptorArray>  v8::internal::Handle<v8::internal::LayoutDescriptor>  v8::internal::TransitionFlag  v8::internal::MaybeHandle<v8::internal::Name>  char const   v8::internal::SimpleTransitionFlag  [node]   8: v8::internal::Map::CopyAddDescriptor v8::internal::Handle<v8::internal::Map>  v8::internal::Descriptor   v8::internal::TransitionFlag  [node]   9: v8::internal::Map::CopyWithField v8::internal::Handle<v8::internal::Map>  v8::internal::Handle<v8::internal::Name>  v8::internal::Handle<v8::internal::FieldType>  v8::internal::PropertyAttributes  v8::internal::Representation  v8::internal::TransitionFlag  [node]  10: v8::internal::Map::TransitionToDataProperty v8::internal::Handle<v8::internal::Map>  v8::internal::Handle<v8::internal::Name>  v8::internal::Handle<v8::internal::Object>  v8::internal::PropertyAttributes  v8::internal::Object::StoreFromKeyed  [node]  11: v8::internal::LookupIterator::PrepareTransitionToDataProperty v8::internal::Handle<v8::internal::JSObject>  v8::internal::Handle<v8::internal::Object>  v8::internal::PropertyAttributes  v8::internal::Object::StoreFromKeyed  [node]  12: v8::internal::StoreIC::LookupForWrite v8::internal::LookupIterator   v8::internal::Handle<v8::internal::Object>  v8::internal::Object::StoreFromKeyed  [node]  13: v8::internal::StoreIC::UpdateCaches v8::internal::LookupIterator   v8::internal::Handle<v8::internal::Object>  v8::internal::Object::StoreFromKeyed  [node]  14: v8::internal::StoreIC::Store v8::internal::Handle<v8::internal::Object>  v8::internal::Handle<v8::internal::Name>  v8::internal::Handle<v8::internal::Object>  v8::internal::Object::StoreFromKeyed  [node]  15: v8::internal::Runtime_StoreIC_Miss int  v8::internal::Object    v8::internal::Isolate   [node]  16: 0x6dd3410092a7  Aborted    How i can fixed it?,RafaelSalomao1981,closed,1,2017-09-09 16:56:14,2017-09-14 09:29:38,,,,0,1
10084,moment/moment,4167,Format with year starting with 000 is 2000 based.,  Description of the Issue and Steps to Reproduce:      When I run:    moment  11/11/0005  .format  dddd  MMMM Do  YYYY       I am expecting to see:  Day  Month 0005  but instead I get  Friday  November 11th  2005 .  It works fine with    moment  11/11/0115  .format  dddd  MMMM Do  YYYY      for example.  Anything I am doing wrong?         console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version   Sat Sep 09 2017 15:50:11 GMT 0700  PDT   9/9/2017  3:50:11 PM  420  Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_6  AppleWebKit/537.36  KHTML  like Gecko  Chrome/60.0.3112.113 Safari/537.36  2.18.1     ,jrm2k6,closed,2,2017-09-09 22:52:25,2017-09-13 16:56:54,,,,0,1
10083,moment/moment,4168,Fixed german locales,Fixed german translation for  ein Monat   to  einen Monat   in all three german translations. Can you approve this  @lluchs? ,Sennahoi,closed,4,2017-09-11 11:27:22,2017-09-12 06:06:22,,,,1,1
10082,moment/moment,4169,[feature request] readonly typescript interface,Hello     Moments are not immutable. Maybe they will be some day  https://github.com/moment/moment rfcs/pull/2   but for now it doesn t look like this will be pushed through soon.    To provide a temporary solution for this  I propose to split the TypeScript definition of a Moment into two interfaces:  MomentReadonly   extending  Object   and  Moment   extending  MomentReadonly  . All pure methods can then be moved to the  MomentReadonly  class. An object with this interface will still be the fully mutable moment  but the functionality will be limited to only pure methods by the compiler.    This is comparable to the  ReadonlyArray<T>  interface  which also provides somewhat of a compile time readonly access to a regular mutable array. For more information about this  please see https://basarat.gitbooks.io/typescript/docs/types/readonly.html  especially  Difference from  const    example 2.    In case you are open to this change  but do not have time to do this  I can create a pull request for this.    Kind regards   Martijn Verbakel,mhverbakel,open,0,2017-09-11 12:41:27,0000-00-00 00:00:00,,TypeScript,,,0,1
10081,moment/moment,4170,No way to import Moment that makes both SystemJS and Rollup happy,  Description of the Issue and Steps to Reproduce:      A very common way to build Angular  2   applications is to use Rollup or Webpack for production builds and SystemJS for unit testing. However each of these build tools prefers a different way to import Moment.    For SystemJS  one must use         import   as moment from  moment ;         but this gives the error  Cannot call a namespace  under Rollup. Rollup will instead work with          import moment from  moment ;         but this results in  undefined  imports when using SystemJS.    This issue has been brought up before in https://github.com/moment/moment/issues/3748 and [on StackOverflow] https://stackoverflow.com/questions/39519823/using rollup for angular 2s aot compiler and importing moment js  but nobody has found a solution  only workarounds  like using a script to rewrite these imports between builds .      Environment:      Build time issue  Windows 10  NodeJS 7.10.0      Other information that may be helpful:    Using TypeScript 2.5.2 with Angular 4.3.6  SystemJS 0.20.18  Rollup 0.49.3.,benelliott,open,5,2017-09-11 15:29:22,0000-00-00 00:00:00,,Loading,Troubleshooting,,,0,1
10080,moment/moment,4171,Wrong locales when using in different files,I cannot explain this weird behaviour. Consider following files:       //file1.js  var Moment = require  moment  ;  Moment.locale  ru RU  ;  const MomentRange = require  moment range  ;  const moment = MomentRange.extendMoment Moment ;    //file2.js  var Moment = require  moment timezone  ;  Moment.locale  en US  ;  const MomentRange = require  moment range  ;  const moment = MomentRange.extendMoment Moment ;    //somewhere later in the same file  let m = moment  ;  m.locale  ; //  ru     unexpected behaviour               If all moment instances are local  the subsequent locale calls shouldn t change locales of the existing library instances  right? And if not  then how do I maintain several different locales across multiple files?    Momentjs version is 2.18.1,bloodcarter,open,1,2017-09-13 05:28:34,0000-00-00 00:00:00,,Troubleshooting,,,0,1
10079,moment/moment,4172,.fromNow   in days,Hello     Is there possible to use .fromNow   function with a specific date and get only a numeric answer in days?  Something like:     date =  2017 09 10  // yyyy MM dd  days = moment data .fromNow   // days should be equals the amount of the days until now     Thanks.,Ceceu,closed,1,2017-09-13 23:13:15,2017-09-14 10:05:22,,,,0,1
10078,moment/moment,4173,error when add day,         let day = moment  2017 09 20   YYYY MM DD  ;      console.log  day   day ;      let sunday = day.startOf  week  ;      let monday = day.startOf  week  .add  days:1  ;      let tuesday = day.startOf  week  .add  days:2  ;      let wednesday = day.startOf  week  .add 3   d  ;      let thursday = day.startOf  week  .add 4   d  ;      let friday = day.startOf  week  .add 5   d  ;      let saturday = day.endOf  week  ;        console.log  sunday   sunday ;      console.log  monday   monday ;      console.log  tuesday   tuesday ;      console.log  wednesday   wednesday ;      console.log  thursday   thursday ;      console.log  friday   friday ;      console.log  saturday   saturday ;        let firstDayOfWeekString = day.startOf  week  .format  YYYY MM DD HH:mm:ss  ;      let lastDayOfWeekString = day.endOf  week  .format  YYYY MM DD HH:mm:ss  ;        console.log  firstDayOfWeekString  firstDayOfWeekString ;      console.log  lastDayOfWeekString  lastDayOfWeekString ;         print:  day moment  2017 09 20T00:00:00.000    sunday moment  2017 09 23T23:59:59.999    monday moment  2017 09 23T23:59:59.999    tuesday moment  2017 09 23T23:59:59.999    wednesday moment  2017 09 23T23:59:59.999    thursday moment  2017 09 23T23:59:59.999    friday moment  2017 09 23T23:59:59.999    saturday moment  2017 09 23T23:59:59.999    firstDayOfWeekString 2017 09 17 00:00:00  lastDayOfWeekString 2017 09 23 23:59:59    ,longxianlin,closed,4,2017-09-15 13:46:18,2017-09-15 15:14:33,,,,0,1
10077,moment/moment,4174,moment returnning null for  3/30/2017 14:55:10.60 ,moment  3/30/2017 14:55:10.60   returns null  but moment  3/30/2017 14:55:10.60    MM/DD/YYYY   returns the correct amount.    environment : Java Rhino    I am working in an ERP system called netsuite and have a REST api that is using moment. When it calls the above  it is returning null.,Godrules500,closed,4,2017-09-15 15:12:45,2017-09-19 22:26:23,,,,0,1
10076,moment/moment,4175, duration.toISOString    doing some floating point  arithmetic for milliseconds ,  Description of the Issue and Steps to Reproduce:    It looks like  duration.toISOString    is not handling milliseconds properly  You can reproduce this in the most recent version of Chrome in the console on momentjs.com       javascript  duration = moment.duration  1:00:1.1  ;  duration.toISOString  ; // =>  PT1H1.099999999999909S     duration.milliseconds  ; // => 100         It looks like any duration over 1 minute with milliseconds is experiencing the problem        javascript  moment.duration  0:0:1.1  .toISOString   // =>  PT1.1S   moment.duration  0:0:59.1  .toISOString   // =>  PT59.1S   moment.duration  0:0:60.1  .toISOString   // =>  PT1M0.10000000000000142S            Environment:     new Date  .toString   : Fri Sep 15 2017 22:44:37 GMT 0700  Pacific Daylight Time    new Date  .toLocaleString   : 9/15/2017  10:44:37 PM   new Date   .getTimezoneOffset   : 420   navigator.userAgent : Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_6  AppleWebKit/537.36  KHTML  like Gecko  Chrome/63.0.3213.3 Safari/537.36   moment.version : 2.18.1,matthewlehner,closed,2,2017-09-16 05:52:16,2017-11-13 21:09:27,,,,0,1
10075,moment/moment,4176,4024 fix modify leap year to non,Fix for  4024     Changes:  Add new setter for year  when changing date from 29/02    to non leap year  the date is now 28th    to leap year  the date is 29th    Also included some tests  ,gatitoneku,closed,1,2017-09-16 06:46:35,2017-10-24 22:57:52,,,,1,1
10074,moment/moment,4177,[bugfix] fix local_update : normalize locale name on updating locale,This PR fixes a bug in  fromNow  when unnormalized locale name is used in  updateLocale .,JLHwung,open,8,2017-09-16 07:11:07,0000-00-00 00:00:00,,Needs Revision,,,1,1
10073,moment/moment,4178,DST bugs.,This is nothing too specific  just a question on DST issues in a more generic sense: it seems to me that moment/moment timezone have some long lasting issues related to DST  like  4152   3132  [ 327] https://github.com/moment/moment timezone/issues/327    2749  etc.    I wonder if fixing these is of high priority on your list?    Great great projects  BTW.,hifall,closed,2,2017-09-18 10:07:14,2017-09-19 22:23:45,,,,0,1
10072,moment/moment,4179,Strict parsing of date string including zz is failng,   js  console.log moment  Sunday 17 September 201709.00 BST    dddd D MMMM YYYYHH.mm zz   true .format   ;           Expect this to produce ISO date. Instead getting  Invalid date . Tried  moment  and  moment timezone .,gajus,closed,2,2017-09-18 10:58:48,2017-09-19 22:18:28,,,,0,1
10071,moment/moment,4180,endOf/startOf doesn t work with predefined Date Objects,  Description of the Issue and Steps to Reproduce:    I am trying to create a moment object from a Javascript Date Object and then set it to the end of the day.  While   moment  .endOf  day     does work     moment new Date   .endOf  day     doesn t work.      Environment:    Chrome Version 60.0.3112.113  Offizieller Build   64 Bit  on a Mac OSX    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  Tue Sep 19 2017 08:00:08 GMT 0200  CEST   19.9.2017  08:00:08   120  Mozilla/5.0  Macintosh; Intel Mac OS X 10_11_6  AppleWebKit/537.36  KHTML  like Gecko  Chrome/60.0.3112.113 Safari/537.36  2.18.1   ,bastiankemmer,closed,3,2017-09-19 06:01:03,2017-09-19 07:16:35,,,,0,1
10070,moment/moment,4181,Wrong month when using moment  .set  ,In MomentJs doc it is written :     > M MM 1..12 Month number    However  if I do :           const b = moment          .set             year : 2018           M: 9          ;      console.log b.format  MM   ;      // output 10                                                                const b = moment          .set             year : 2018           M: moment  .format  MM            ;      console.log b.format  MM   ;      // expect 9 output 10         Wed Sep 20 2017 12:00:13 GMT 0200  Paris  Madrid  heure d  t     VM134:2 20/09/2017   12:00:13  VM134:3  120  VM134:4 Mozilla/5.0  Windows NT 6.3; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/56.0.2924.87 Safari/537.36,stefdelec,closed,4,2017-09-20 10:00:32,2017-11-13 21:08:43,,,,0,1
10069,moment/moment,4182,Calendar sameElse bug,When using the calendar function  the script disregards the format of sameElse passed to the function.       js  moment  2016 09 01 14:12  .calendar null         sameDay:  h:mm a        nextDay:  [Tomorrow at] h:mm a        nextWeek:  dddd        lastDay:  [Yesterday at] h:mm a        sameWeek:  [Last] dddd [at] h:mm a        sameElse:  MMM DD  YYYY       ;    //Outputs 09/01/2016 instead of Sep 01  2016         This outputs:  09/01/2016  then instead it should be returning  Sep 1  2016 .,GerardBalaoro,closed,7,2017-09-20 12:58:03,2017-10-09 15:36:42,,,,0,1
10068,moment/moment,4183,[locale] Relative seconds i18n,Closes  3860 as is included in this PR.    It was not a small PR at first glance but every changes on i18n was limited to 1 locale per commit so it can makes review easier.    Most translation of  ss  is referenced from Unicode CLDR  duration second  property  the other CLDR missing locales are translated by searching  30 seconds  on Google pages.    It is recommended to squash merging for better commit history readability.    fixes https://github.com/moment/moment/issues/3981,JLHwung,closed,2,2017-09-21 06:05:45,2017-12-17 00:29:32,,Pending Next Release,,,1,1
10067,moment/moment,4184,[locale] id: Fix short name for august in id locale,I saw all the other use Agt for august short name.   like Android iPhone  ,duxinxiao,closed,7,2017-09-23 07:19:53,2018-03-02 18:56:21,,Language,Pending Next Release,,,1,1
10066,moment/moment,4185,Not correct parsing for Portoguese locale  20 de agosto de 2017  becomes  2017 09 20 ,  Description of the Issue and Steps to Reproduce:       require  moment    20 de agosto de 2017    DD de MMMM de YYYY     returns    moment  2017 09 20T00:00:00.000       Instead  I expect  moment  2017 08 20T00:00:00.000             Environment:      moment: v2.18  nodejs: v8.2.1        Other information that may be helpful:      The time zone setting of the machine the code is running on  > CEST 2017    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString    // Mon Sep 25 2017 01:34:40 GMT 0200  CEST   console.log  new Date   .toLocaleString    //   console.log   new Date   .getTimezoneOffset    // 2017 9 25 01:34:57  console.log  navigator.userAgent  // undefined  console.log moment.version  // 2.18.1         ,bitliner,closed,2,2017-09-24 23:35:42,2017-11-13 21:10:07,,,,0,1
10065,moment/moment,4186,Include .js.map file for production debugging,Please include a .js.map file for each minified .js file. This allows the minified code to be debugged by mapping it back to the original source file.,CJDennis,open,0,2017-09-25 00:11:05,0000-00-00 00:00:00,,Up-For-Grabs,,,0,1
10064,moment/moment,4187,Allow compilation without dynamic requires,The current master build of metro packager/react native really doesn t like dynamic require statements. Importing the current version of moment produces the error        TransformError: /.../moment/moment.js: require   must have a single string literal argument    This update moves things around so that it is possible to import a version of moment without lazy loaded locales  src/moment core.js  as big as the diff looks  it s just a rename . The existing loader is injected in moment.js  which reexports moment so that the previous behaviour of src/moment.js remains unchanged.   ,tqc,open,47,2017-09-26 07:14:42,0000-00-00 00:00:00,,Breaking change,Discussion,,,1,1
10063,moment/moment,4189,Swiss times formatted wrongly,FYI: Just noticed when checking out the project that our time  German  Swiss  is misformatted. For 2pm  it shows  14.00   single dot as separator  instead of  14:00  .,hardcodet,closed,4,2017-09-26 11:48:31,2017-12-17 00:29:45,,Language,,,0,1
10062,moment/moment,4190,Invalid Date with week ISO format,  Description of the Issue and Steps to Reproduce:    Transform a date to YYYY WW and back is not coherent: same sting produce a  Invalid Date          console.log  moment  2016 01 01  .format  YYYY WW     //  2016 53   console.log  moment  2016 53    YYYY WW  .toDate     //  Invalid date           Please include the values of all variables used.   no addition variables      Environment:    Version 61.0.3163.91  Official Build   64 bit  on OSX  Running from Italy  Europe ,nkint,closed,2,2017-09-26 12:44:45,2017-11-13 21:02:01,,,,0,1
10061,moment/moment,4191, moment.duration 65   days  .days  ;  gives 4,I m not sure what s going on  but I ve set up a very simple example. Basically the one in the title:    Here s a failing test: https://jsfiddle.net/yp1Lebnh/1/    ,nocksock,closed,2,2017-09-26 16:34:44,2017-09-28 16:13:18,,,,0,1
10060,moment/moment,4192,Difference of moments: Docs could be improved,I just tried to figure out how to get the difference between two moments. Naturally  I assumed that there is some function so that  x.diff_fun y   is a  duration .    Maybe I m spoiled  but in .NET  x   y  is a  TimeSpan  when  x  and  y  are  DateTime s.    I think there ought to be such a function in  moment  as well  or at least the docs should talk about an idiom at the discussion of  duration  or that of the  diff  and  subtract  functions  such as         moment.duration x.diff y           I needed SO to figure that this is the current idiom.  ,jtheisen,closed,5,2017-09-28 12:09:02,2018-03-05 08:04:56,,Documentation,,,0,1
10059,moment/moment,4193,Explanation about manipulation date with different locale. Is it a bug?, I posted the same question on [Stackoverflow ] https://stackoverflow.com/questions/46489512/momentjs explanation about manipulation date with different locale is it a bug but nobody  has been able to give me the correct answer.                  I want to get first day of the first week of the year.     So:        import moment from  moment ;             const jan = moment [2017  0] ;      const firstDayWeekYear = jan.clone  .week 1 .day 1 ;      console.log  jan   jan.format  DD/MMM/YYYY   ; // jan 01/Jan/2017      console.log  firstDayWeekYear   firstDayWeekYear.format  DD/MMM/YYYY   ; // firstDayWeekYear 02/Jan/2017   correct        but if I use the italian locale  I get this         import moment from  moment ;      import  moment/locale/it ;             const jan = moment [2017  0] ;      const firstDayWeekYear = jan.clone  .week 1 .day 1 ;      console.log  jan   jan.format  DD/MMM/YYYY   ; // 01/gen/2017      console.log  firstDayWeekYear   firstDayWeekYear.format  DD/MMM/YYYY   ; // firstDayWeekYear 11/gen/2016   why 2016?        in 2018 it works correctly again         const jan = moment [2018  0] ;          const firstDayWeekYear = jan.clone  .week 1 .day 1 ;          console.log  jan   jan.format  DD/MMM/YYYY   ; // 01/gen/2018          console.log  firstDayWeekYear   firstDayWeekYear.format  DD/MMM/YYYY   ; // firstDayWeekYear 01/gen/2018   correct        ...but in 2021...        const jan = moment [2021  0] ;      const firstDayWeekYear = jan.clone  .week 1 .day 1 ;      console.log  jan   jan.format  DD/MMM/YYYY   ; // 01/gen/2021      console.log  firstDayWeekYear   firstDayWeekYear.format  DD/MMM/YYYY   ; // firstDayWeekYear 30/dic/2019   why 2019?     Can someone explane to me why in the year after leap year that code doesn t work? Is it a bug?    P.S..:   moment.utc     and  jan.clone  .isoWeek 1 .day 1 ;  creates the same wrong date   11/gen/2016       Additiona info      Firefox 55.0.3  32 bit  on Window 10;    Nodejs 8.2.0 and npm 5.3.0    React 15.6.1,Nide83,closed,2,2017-09-29 17:05:59,2017-11-13 20:58:00,,,,0,1
10058,moment/moment,4194,Add jsDelivr hits badge,Hey  I noticed that moment is one of the most popular projects on jsDelivr  so I thought you might like this badge.,LukasDrgon,closed,1,2017-09-30 16:38:26,2017-10-25 00:06:05,,,,1,1
10057,moment/moment,4195,[locale] pt br: Simplify pt br past relativeTime,Just a little shorter version  same meaning    Author  @caio ribeiro pereira please verify   ,swalker2,closed,3,2017-10-01 03:24:12,2018-03-02 18:57:58,,Pending Next Release,,,1,1
10056,moment/moment,4196,moment [2017 n] .week 39 .day 1  giving different results changing n with some locales,moment [2017 n] .week 39 .day 1  gives different results changing n  depending on  dow  setted in locale       js  // this code is OK with  en  locale  same result for 0 < n < 11     // but gives wrong results with a locale using dow=1  Oct 3th for 0 < n < 2  Sept  25th for 2<=n<9  Oct 2th for n=9   var fwd = moment [2017] .week 39 .day 1   document.body.innerHTML  =  <p>    fwd.format  MMMM Do YYYY  ;    </p>   for i=0;i<12;i            fwd = moment [2017 i] .week 39 .day 1         document.body.innerHTML  =  <p>    fwd.format  MMMM Do YYYY  ;    </p>             any browser/OS    O.S. setted to Europe/Rome  tested with any starting date in 2017    // FULL EXAMPLE  https://jsfiddle.net/ropel/c2kzdmjt/5/    ,ropel,closed,1,2017-10-01 06:59:42,2017-11-13 20:53:16,,,,0,1
10055,moment/moment,4197,Modifying leap year to non leap year changes Feb 29 to Mar 1  4024,Hi    As this is my first PR on this project  and almost my first PR at all   a feedback would be greatly appreciated   Thanks           Laurent.,ldevernay,closed,1,2017-10-02 13:06:46,2017-10-24 22:57:17,,,,1,1
10054,moment/moment,4198,CS locale  l  longDateFormat is wrong,There should be no white spaces between the numbers in the  l  longDateFormat.  D.M.YYYY instead of D. M. YYYY  ,lukesahula,closed,3,2017-10-02 14:18:08,2017-12-20 03:11:43,,Language,,,0,1
10053,moment/moment,4199,[bugfix] Fix year setter on leap years  fixes  4024,This PR addresses issue  4024.    Setting the year from February 29th on leap year to some other date on a non leap year returned March 1st of the other date.    ,oddsson,closed,1,2017-10-03 01:18:22,2017-10-09 23:03:02,,,,1,1
10052,moment/moment,4200,[locale] Fix 4189: Updated time separator for German Swiss locale,Should be a straight forward update.     fixes  4189 ,joelmheim,closed,5,2017-10-03 21:24:36,2017-12-17 00:29:45,,Pending Next Release,,,1,1
10051,moment/moment,4201,Moment JS time format issue on initialization,Hi Moment JS Team     We are very happy with the working of moment js. Only thing is we have  an issue on date parsing on initialization.    When we have the command as follows  we get an issue on parsing    console.log moment  2005/05/01   DD.MM.YYYY  .format  DD.MM.YYYY   ;    Here the output obtained is:    20.05.2005    I know that the date given here and the format is wrong. So either the return value can say that the date is invalid as the format doesn t match or it could have parsed and given the output in a perfect way such that the output is 01.05.2005. But it produced a wrong result which is 20.05.2005 which is no where related to the date input given.    Environment : Browser Version : Chrome v56. OS : Windows 10    Timezone setting of the machine : Central European Summer Time  CEST .  Date and time : 04th October 2017 10:35 AM CEST,karthickshanmugam0689,closed,6,2017-10-04 08:35:40,2017-11-13 20:35:28,,,,0,1
10050,moment/moment,4202,Set Local but timezone doesn t change,Hi  I use  moment.locale  zh tw    to set default with  8 timezone.  But If I use  moment  .format  ZZ     it still show   0000 .  But  .valueOf    is correct.....,opjlmi,closed,0,2017-10-05 05:36:43,2017-10-07 06:52:13,,,,0,1
10049,moment/moment,4203,Module import doesn t work in the latest Chrome,  Description of the Issue and Steps to Reproduce:      Latest version of Chrome declares native modules import support. But the feature requires full module file name to be provided  including  .js  extension .  In the library code  import ...  entries don t have  .js  extensions which results 404 errors in the browser.    FYI: One thing that might  and does on some platforms  hide this issue is a web server configuration.  Apache web server on OSX seems has  MultiViews  setting enabled by default  which makes the server find  moment.js  file if there is no  moment  file found   but on Ubuntu  for example  this web server option is disabled which make the module loading fail.      Environment:      Chrome 61.0.3163.100  64 bit  on Ubuntu 16.04       js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   VM3015:1 Thu Oct 05 2017 19:30:43 GMT 0600   06   VM3015:2 05.10.2017  19:30:43  VM3015:3  360  VM3015:4 Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/61.0.3163.100 Safari/537.36       moment.js version is 2.18.1  ,arcady-zherdev,open,2,2017-10-05 13:37:16,0000-00-00 00:00:00,,Loading,,,0,1
10048,moment/moment,4204,exif format,DateTimeOriginal           moment  2017 09 29T12:53:54.000                  moment.invalid /  2017:09:29 10:03:38  /                 Deprecation warning: value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date    which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/ /warnings/js date/ for more info.          Example:        moment  2017:09:29 10:21:13    YYYY:mm:dd HH:MM:SS                moment.invalid /  2017:09:29 10:21:13  /           Format: https://sno.phy.queensu.ca/ phil/exiftool/faq.html Q5    Related issue?: https://phabricator.wikimedia.org/T63701,strarsis,closed,1,2017-10-05 16:29:52,2017-11-13 20:34:02,,,,0,1
10047,moment/moment,4205,Can standard locales work when using ES6 directly?,Related to  4042   4170   4187   4126    The files in moment/locale all start with  require  ../moment     which resolves to the ES5 transpiled version. Unfortunately  that has a different locale store to the ES6 version.    You can use  import  moment/src/locale/...    but that isn t ideal when the version of moment used can depend on the bundler and package.json rather than user code.     Replacing  ..moment  with  moment  in the locale header should work in most cases  but might break systems that translate require into loading a url.,tqc,open,0,2017-10-05 22:31:56,0000-00-00 00:00:00,,Loading,Up-For-Grabs,,,0,1
10046,moment/moment,4206,Breaking React Native v0.49 ,  Description of the Issue and Steps to Reproduce:      Use a React Native app with version v0.49     Get error:  TransformError: /Users/dannyvanderjagt/App/node_modules/moment/moment.js: require   must have a single string literal argument       Environment:      React Native v0.49     Moment.js v2.18.1  ,DannyvanderJagt,closed,1,2017-10-06 09:14:19,2017-10-06 09:41:51,,,,0,1
10045,moment/moment,4207,Alternative temporary workaround for React Native 0.49 issues,Note that this PR is not a robust fix  may allow difficult to debug runtime errors when using locales  and completely ignores the moment contribution guidelines.    React Native 0.49 really doesn t like dynamic require statements.  facebook/metro bundler 65  Importing the current version of moment produces the error        TransformError: /.../moment/moment.js: require   must have a single string literal argument    There is a more real fix in  4187  which works nicely for the normal scenario of  import moment from  moment  . However  it also involves using the ES6 code on the develop branch  which introduces it s own set of issues when the call to moment is somewhere deep in the dependency tree.    This version has a different set of problems to  4187  so may be useful as a quick fix if you are running into some of the thornier problems discussed there.,tqc,closed,3,2017-10-07 10:53:36,2017-10-10 21:19:23,,,,1,1
10044,moment/moment,4208,[Question] UTC   Locale   strict mode: doc out of date?,  Tldr  : why does createUTC has 4 parameters and doc only talk about 3?    Moment UTC s description  http://momentjs.com/docs/ /parsing/utc/  gives a method with 3 parameters  moment.utc String  String  String  . But when i look at https://github.com/moment/moment/blob/master/src/lib/create/utc.js  exported as moment.utc in https://github.com/moment/moment/blob/master/src/moment.js   I see 4 parameters  since 2013  commit 26c87e1cc5556fc99f322b800c2eadfdc3bb710f .    Is the doc out of date  or am I missing something?,briced,closed,1,2017-10-07 19:32:11,2017-10-07 19:54:32,,,,0,1
10043,moment/moment,4209,[locale] es us: Updated time format in accordance with CLDR and www.timeandunits.com,Simple format change for Spanish   US locale.,joelmheim,closed,0,2017-10-08 21:51:42,2017-12-17 00:37:02,,Pending Next Release,,,1,1
10042,moment/moment,4210,[locale] Russian LT/LTS: Updated time format in accordance with CLDR and www.timeandunits.com,Simple format change for Russian locale.,joelmheim,closed,7,2017-10-08 22:14:14,2017-12-17 00:37:23,,Pending Next Release,,,1,1
10041,moment/moment,4211,No way to specify Year character in Japanese locale without affecting all locale results  hard coding in format string  or checking for locale.,  Description of the Issue and Steps to Reproduce:       es6  moment.locale  ja    moment  .format  LL         Will output  2017 10 6    as expected  but how do I specify just the Year and Month  i.e.  2017 10    without having to hard code a check for Japanese?    I see that calling  moment  .format  MMM    outputs  10    with the month character appended   but  YYYYY  does not result in  2017    so  YYYYYMMM  outputs   0201710  .      Environment:    All    Output:    Mon Oct 09 2017 17:01:04 GMT 0900  Japan Standard Time   VM10714:2 10/9/2017  5:01:04 PM  VM10714:3  540  VM10714:4 Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/63.0.3230.0 Safari/537.36  VM10714:5 2.18.1  ,Panoplos,closed,3,2017-10-09 08:05:23,2017-11-13 20:32:04,,,,0,1
10040,moment/moment,4212,Fix Norwegian short months,Fixed some months wont shorted,l2aelba,closed,3,2017-10-09 13:35:15,2017-10-24 23:33:16,,,,1,1
10039,moment/moment,4213,[critical] Rename dynamic require to avoid React Native crash,This is a redo of  4207 without all the generated files.,ichernev,closed,1,2017-10-10 00:37:29,2017-10-10 06:33:56,,,,1,1
10038,moment/moment,4214,[critical] Move require rename inside try/catch,This is a fixup to  4213,ichernev,closed,1,2017-10-10 08:29:26,2017-10-10 08:31:36,,,,1,1
10037,moment/moment,4215,[misc] TS: Add duration.clone    for  4080,Add typings for  4080,ichernev,closed,1,2017-10-10 09:05:59,2017-10-10 09:09:01,,,,1,1
10036,moment/moment,4216,Webpack Error: Cannot find module  ./locale  after updating to 2.19.0,  Edit: If you set your dependency to 2.18.1  everything will be fine. We are coordinating with some other libraries to find a permanent solution      Edit 2 : Set   moment :  2.18.1   in your package.json      Edit 3: We believe this is fixed.      Hello.   Using create react app. After updating moment to 2.19.0 i have this error on load :     Error: Cannot find module  ./locale    > 9 stack frames were collapsed.  ./src/utils/Utils.js  src/utils/Utils.js:1  > 1   import moment from  moment ,GautierT,closed,73,2017-10-10 10:08:55,2017-10-12 22:58:56,,,,0,1
10035,moment/moment,4217,How to not import locales,Subj.  How do I escape adding locales in my bundle?,sneakyfildy,open,8,2017-10-10 10:41:31,0000-00-00 00:00:00,,Loading,,,0,1
10034,moment/moment,4218,Getting webpack error after update to 2.19.0,Don t know if it is related to  4216 because I m using  Angular 4.4.4  and that is a  React  issue  so I m posting this as a separate issue.    I got the following error after the update:       __WEBPACK_IMPORTED_MODULE_2_moment__ is not a function         I m using the following  moment  packages        moment :  2.19.0     @types/moment :  2.13.0              The code where I get the error is quite simple:         import   as moment from  moment ;  ...      if  moment  .year    == this.mainData.activeYear     ...       ,dushkostanoeski,closed,23,2017-10-10 11:50:14,2017-10-10 17:36:02,,,,0,1
10033,moment/moment,4219,Get last week of year returns a date of previous year.,Hi Guys     I ran into a problem with momentjs when trying get the last day of the last week in January 2017.  I use the locale  nl . It s Dutch.    I made the following code:       moment   year: 2017  month: 0   .week  5           This should return  Tue Jan 31 2017 . But it returns a date of   Sun Feb 07 2016 .    Any ideas?,ronaldgj,closed,2,2017-10-10 13:02:20,2017-11-13 20:26:44,,,,0,1
10032,moment/moment,4220,Mess with locales,Sorry for interrupting these concurrent locales battles.  Why locales are loaded/bundled automatically? I see no single reason to do that.  And this dynamic  require  usage. For what sake?    Can we have one nice simple solution to not have locales auto bundled/auto loaded?  There must be a separate locale loader which will resolve all troubles.    I ve spent half of my working day trying to understand  can we use this library on production and now I see how people are suggesting each other to remove files from node_modules       to not have excess 100KB in their compiled applications. This is ridiculous.  Talking about browser applications of course.,sneakyfildy,closed,3,2017-10-10 13:36:23,2017-10-10 13:45:08,,,,0,1
10031,moment/moment,4221,Formatting without time conversion,Hello everyone:    I m begining with moment.js    I have a DateTime value  and I want to parse the SAME ELEMENT  I do not want to convert based on the LocalTime or any kind of conversion. However I could not find a concrete example by using moment.js    That is what I have:  2017 03 22T14:55:05Z   the expected result is: 03/22/17 02:55 pm... BUT the result is 03/22/17 10:55 am  4 hours less .    Any help???,jhcastellanos,closed,1,2017-10-10 15:02:46,2017-10-10 15:07:20,,,,0,1
10030,moment/moment,4222,support cross origin path seperater for Windows,Regarding webpack compile issue on Window enviroment,milocosmopolitan,closed,2,2017-10-10 16:03:00,2017-10-11 15:06:53,,,,1,1
10029,moment/moment,4223,Uncaught TypeError: __webpack_require__.i ...  is not a function,  Description of the Issue and Steps to Reproduce:           Uncaught TypeError: __webpack_require__.i ...  is not a function      at Object.../../../../moment/src/lib/units/year.js  vendor.bundle.js:47527       at __webpack_require__  inline.bundle.js:55       at Object.../../../../moment/src/lib/moment/get set.js  vendor.bundle.js:44718       at __webpack_require__  inline.bundle.js:55       at Object.../../../../moment/src/lib/units/month.js  vendor.bundle.js:46328       at __webpack_require__  inline.bundle.js:55       at Object.../../../../moment/src/lib/locale/base config.js  vendor.bundle.js:43484       at __webpack_require__  inline.bundle.js:55       at Object.<anonymous>  vendor.bundle.js:43805       at Object.../../../../moment/src/lib/locale/locales.js  vendor.bundle.js:44010           Please include the values of all variables used.       Environment:       Examples: Chrome 49 on OSX  Internet Explorer 10 on Windows 7  Node.JS 4.4.4 on Ubuntu 16.0.4     Latest Chrome on Mac  Angular 4 on Kubernetes Linux Cluster     Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.       Other information that may be helpful:      The time zone setting of the machine the code is running on  UTC 2    The time and date at which the code was run  Just now.    Other libraries in use  TypeScript  Immutable.js  etc   Typescript  Angular4  Angular CLI    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  Logger of Browser          Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,nottinhill,closed,14,2017-10-10 20:17:06,2017-10-11 15:03:16,,,,0,1
10028,moment/moment,4224,karma unit tests failing after updating from 2.18.1 to 2.19.0: Object is not a constructor,Our unit tests suddenly started breaking when 2.19 was released this afternoon on lines like these ones:     ts  import   as moment from  moment ;  // ...  const oriDate = moment InstanceDate ; // where instanceDate is a ISO string representation of a date.       These are the kind of errors we re getting.         View Model initialization  2017 10 10T20:26:56.6318731Z       PhantomJS 2.1.1  Windows 8 0.0.0   2017 10 10T20:26:56.6318731Z     Object is not a constructor  evaluating  moment InstanceDate     2017 10 10T20:26:56.6318731Z     MeetingInstance@src/app/components/MeetingInstanceDisplay/test/MeetingInstanceDisplay.test.ts:74180:33  2017 10 10T20:26:56.6318731Z     src/app/components/MeetingInstanceDisplay/test/MeetingInstanceDisplay.test.ts:109614:69          Please include the values of all variables used.       Environment:    PhantomJS 2.1.1  Windows 8 0.0.0  with      Other information that may be helpful:    TimeZone of the machine running the unit test Eastern Standard Time  2017 10 10T20:26:56.6318731Z         Karma@latest  Sinon@latest  TypeScript@latest  Webpack@2.X and chai@latest    CC @ichernev ,baywet,closed,9,2017-10-10 22:26:44,2017-10-12 13:52:19,,,,0,1
10027,moment/moment,4225,[critical] Revert require rename  fixes  4216,Changes introduced in  4213 and  4214 broke webpack     4216. Reverting them,ichernev,closed,1,2017-10-10 22:27:09,2017-10-10 22:29:35,,,,1,1
10026,moment/moment,4226,Revert  jsnext:main  > module   3904  ,This reverts commit aea6a97463521ebadae2f0c53536f36768ddee0d.    This seems to be related to https://github.com/moment/moment/issues/4216 issuecomment 335489518,ichernev,closed,1,2017-10-10 23:20:28,2017-10-10 23:23:25,,,,1,1
10025,moment/moment,4227,Parsing failures with day of week tokens  ddd or dddd ,  Description of the Issue and Steps to Reproduce:       javascript  var timeStringOne =  Mon  01 Jan 0001 00:00:00 GMT ;  var dateFormat =  ddd  DD MMM YYYY HH:mm:ss ;  moment.utc timeStringOne  dateFormat .toDate  ;         2.18.1       fieldDate.toString     Sun Dec 31    0 16:00:00 GMT 0800  Pacific Standard Time           2.19.0       fieldDate.toString     Invalid Date        The above snippet works well with 2.18.1 but not with 2.19.0. It gives an InvalidDate.   Please include the values of all variables used.       Environment:   Windows 10/ OSX node.js version 7.10 and 8.5.0     Examples: Chrome 49 on OSX  Internet Explorer 10 on Windows 7  Node.JS 4.4.4 on Ubuntu 16.0.4      Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.       Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version             > var moment = require  moment  ;  undefined  > console.log   new Date   .toString     Tue Oct 10 2017 18:51:04 GMT 0700  Pacific Daylight Time   undefined  > console.log  new Date   .toLocaleString     2017 10 10 18:51:18  undefined  > console.log   new Date   .getTimezoneOffset     420  undefined  > console.log  navigator.userAgent   ReferenceError: navigator is not defined      at repl:1:14      at ContextifyScript.Script.runInThisContext  vm.js:44:33       at REPLServer.defaultEval  repl.js:239:29       at bound  domain.js:301:14       at REPLServer.runBound [as eval]  domain.js:314:12       at REPLServer.onLine  repl.js:440:10       at emitOne  events.js:120:20       at REPLServer.emit  events.js:210:7       at REPLServer.Interface._onLine  readline.js:279:10       at REPLServer.Interface._line  readline.js:626:8   > console.log moment.version   2.19.0  undefined  >          Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,amarzavery,closed,5,2017-10-11 01:52:13,2017-12-11 00:27:34,,Bug,High Priority,,,0,1
10024,moment/moment,4228,WARNING in ./node_modules/.2.19.0@moment/src/lib/locale/locales.js Module not found: Error: Can t resolve  ./locale ,WARNING in ./node_modules/.2.19.0@moment/src/lib/locale/locales.js  Module not found: Error: Can t resolve  ./locale  in  D: demows h5 travel plus node_modules .2.19.0@moment src lib locale     plugins: [      new webpack.IgnorePlugin /^ . /locale /  /moment /   ],fengxinming,closed,7,2017-10-11 03:04:58,2017-10-11 15:02:18,,,,0,1
10023,moment/moment,4229,__WEBPACK_IMPORTED_MODULE_0_moment__ is not a function,I got this issue this morning after run npm install again. Yesterday everything is ok. Have anyone had solution for this issue yet?,huyjack178,closed,8,2017-10-11 06:35:28,2017-10-11 15:02:46,,,,0,1
10022,moment/moment,4230,2.19.0 error ci ,2.19.0    [36mfront compile_1       [0m WARNING in ./ /moment/src/lib/locale/locales.js   [36mfront compile_1       [0m Module not found: Error: Can t resolve  ./locale  in  /app/node_modules/moment/src/lib/locale    [36mfront compile_1       [0m  @ ./ /moment/src/lib/locale/locales.js 65:16 60   [36mfront compile_1       [0m  @ ./ /moment/src/lib/locale/locale.js   [36mfront compile_1       [0m  @ ./ /moment/src/moment.js   [36mfront compile_1       [0m  @ ./resources/assets/js/bootstrap.js   [36mfront compile_1       [0m  @ ./resources/assets/js/vendor.js  2.18.0 work fine  check it  ,smokezp,closed,4,2017-10-11 12:24:49,2017-10-11 15:02:29,,,,0,1
10021,moment/moment,4231, Uncaught TypeError: __webpack_require__.i ...  is not a function in year.js  in version 2.19,I use moment.js new verison 2.19.0. use webpack to package and report this:        year.js:71  Uncaught TypeError: __webpack_require__.i ...  is not a function      at Object.defineProperty.value  year.js:71       at __webpack_require__  bootstrap 9cbcdb04d8c3de33cb10:19       at Object.defineProperty.value  constructor.js:77       at __webpack_require__  bootstrap 9cbcdb04d8c3de33cb10:19       at Object.<anonymous>  _object dp.js:16       at __webpack_require__  bootstrap 9cbcdb04d8c3de33cb10:19       at Object.<anonymous>  prototype.js:52       at __webpack_require__  bootstrap 9cbcdb04d8c3de33cb10:19       at Object.<anonymous>  valid.js:50       at Object.__webpack_exports__.a  locales.js:198        when back to v2.18  bug will be fixed.,lqs469,closed,1,2017-10-11 13:51:41,2017-10-11 13:59:44,,,,0,1
10020,moment/moment,4232,revert locale fallbacks in require  re add react native aliasing,This change reverts @ovangle s change from July to try a fallback try/catch for requiring locales. It maintains the change for react native of aliasing the require function. I pulled this change into webpack 2 and everything seems fine. In short  we appear to be able to  mostly  make everyone happy.,maggiepint,closed,2,2017-10-11 14:56:10,2017-10-11 20:50:07,,,,1,1
10019,moment/moment,4233,2.19 not compatible with angular/cli,  Description of the Issue and Steps to Reproduce:       After upgrading from moment 2.18 to 2.19  our angular/cli 1.4.5 application no longer builds with the AOT compiler. I have reproduced the problem by adding moment 2.19 to a vanilla application created with  ng new . The build fails with the following diagnostics.    WARNING in ./node_modules/moment/src/lib/locale/locales.js  Module not found: Error: Can t resolve  ./locale  in  /Users/a715139/ngnew/node_modules/moment/src/lib/locale   resolve  ./locale  in  /Users/a715139/ngnew/node_modules/moment/src/lib/locale     using description file: /Users/a715139/ngnew/node_modules/moment/package.json  relative path: ./src/lib/locale       Field  browser  doesn t contain a valid alias configuration    after using description file: /Users/a715139/ngnew/node_modules/moment/package.json  relative path: ./src/lib/locale       using description file: /Users/a715139/ngnew/node_modules/moment/package.json  relative path: ./src/lib/locale/locale         as directory          /Users/a715139/ngnew/node_modules/moment/src/lib/locale/locale doesn t exist  [/Users/a715139/ngnew/node_modules/moment/src/lib/locale/locale]   @ ./node_modules/moment/src/lib/locale/locales.js 65:16 60   @ ./node_modules/moment/src/lib/locale/locale.js   @ ./node_modules/moment/src/moment.js   @ ./src/app/app.component.ts   @ ./src/  _gendir/app/app.module.ngfactory.ts   @ ./src/main.ts   @ multi ./src/main.ts        Environment:      Mac OS X 10.11.6    I realize this is not issue only with moment  but rather an integration issue with angular/cli and moment.    The root cause appears to be the fact that webpack is confused by line 65 in src/lib/locale/locales.js into thinking that a file must exist at src/lib/locale/locale  but no such file exists. The solution is not clear to me.        js  pretendingNotToRequireV2  ./locale/    name ;            js  function loadLocale name         var oldLocale = null;        // TODO: Find a better way to register and load all the locales in Node      if   locales[name]     typeof module  ==  undefined                   module    module.exports             oldLocale = globalLocale._abbr;          try                // workaround for React Native 0.49               var pretendingNotToRequireV1 = require;              pretendingNotToRequireV1  moment/locale/    name ;            catch  e                 // In the test environment  the external module  moment               // can t be resolved because we re running inside it.              // Fallback to using the old relative import              try                    var pretendingNotToRequireV2 = require;                  pretendingNotToRequireV2  ./locale/    name ;                catch  e                            // because defineLocale currently also sets the global locale  we          // want to undo that for lazy loaded locales          getSetGlobalLocale oldLocale ;             return locales[name];          ,mike-bresnahan,closed,1,2017-10-11 15:45:27,2017-10-11 16:17:19,,,,0,1
10018,moment/moment,4234,Invalid date with format string parsed as valid,  Description of the Issue and Steps to Reproduce:    I m not too sure if this is a bug or intended  here s how to reproduce:       js  const moment = require  moment      const str1 =  MoNotADate   const str2 =  TuNotADate   const str3 =  MoNotADate   const str4 =  ThNotADate     console.log moment str1   ddd MMM DD YYYY  .isValid    // true  console.log moment str2   ddd MMM DD YYYY  .isValid    // true  console.log moment str3   ddd MMM DD YYYY  .isValid    // true  console.log moment str4   ddd MMM DD YYYY  .isValid    // true         As you can notice as long as week days starts with valid 2 character  Moment will think it s valid.      Environment:    Tried with Node.js v6 on macOS 10.12  [REPL.it] https://repl.it/languages/javascript  on Firefox Nightly    If you are reporting an issue  please run the following code in the environment you are using and include the output:       javascript  console.log   new Date   .toString     // Wed Oct 11 2017 09:26:37 GMT 0700  PDT     console.log  new Date   .toLocaleString     // 10/11/2017  9:26:37 AM    console.log   new Date   .getTimezoneOffset     // 420    console.log  navigator.userAgent   // Mozilla/5.0  Macintosh; Intel Mac OS X 10.12; rv:58.0  Gecko/20100101 Firefox/58.0    console.log moment.version   // 2.19.0     ,applefreak,closed,1,2017-10-11 16:31:37,2017-11-13 20:57:21,,Forgiving parsing,,,0,1
10017,moment/moment,4235,moment 2.19.0:  /min/moment with locales.min.js  has require   statement incompatible with React Native 0.49,I m trying to build a fork of  react native gifted chat   which depends on moment  using RN 0.49.3.  I am getting the following error:   Error: <foo>/node_modules/moment/min/moment with locales.min.js: require   must have a single string literal argument     I know a fix/workaround for this same error was included for the file  /moment.js  in moment 2.19.0  but this same issue also affects  /min/moment with locales.min.js     Thanks  ,jspiers,closed,9,2017-10-11 17:54:59,2017-10-12 19:36:05,,,,0,1
10016,moment/moment,4236,2.19.1: can no longer combine moment  moment timezone and moment business days,I used to be able to combine  moment    moment timezone   [ moment business days ] https://github.com/kalmecak/moment business days   and  moment range  but that one isn t a problem in this situation   like so:       javascrript  import  moment timezone ;  import moment from  moment business days ;  import   extendMoment   from  moment range ;    moment.locale  en us          week:            dow: 1  // Monday is the first day of the week              holidays: [           2017 10 09             2017 12 25             2018 01 01             2018 04 02             2018 05 21             2018 06 25             2018 07 02             2018 09 03             2018 10 08             2018 12 24             2018 12 25        ]       holidayFormat:  YYYY MM DD      ;    moment.tz.setDefault  America/Montreal  ;    export default extendMoment moment ;         This worked in all versions before upgrading to 2.19.1. Now I get the following error:       Uncaught TypeError: Cannot read property  setDefault  of undefined       And i traced it down to  moment.tz  no longer getting defined.    The problem is if I  import moment from moment timezone  then  moment business days  will no longer work.      Environment:      Chrome 61 on MacOS 10.12.6  Compiled with webpack    debug output:       js  Thu Oct 12 2017 12:29:48 GMT 0700  PDT   10/12/2017  12:29:48 PM  420  Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_6  AppleWebKit/537.36  KHTML  like Gecko  Chrome/61.0.3163.100 Safari/537.36  2.19.1         Any ideas?,jkudish,open,4,2017-10-12 19:31:20,0000-00-00 00:00:00,,Bug,Up-For-Grabs,,,0,1
10015,moment/moment,4237,Missing Dependencies error thrown,  Description of the Issue and Steps to Reproduce:     yarn add moment      Please include the values of all variables used.   I am adding them to a file that is already being used for a tessel 2 project.       Environment:    Mac  fish terminal  nodeJSv8.4 installed  Tessel 2      Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     this is the list of  missing dependencies  that I was asked to report to the package maintainer:  colony compiler    colors    colorsafeconsole    effess    hardware resolve    humanize    my local ip    nomnom    semver    structured clone    temp   and  usb .     Thanks for working to make this project grrrrrrrrreat   ,KyleWMiller,closed,2,2017-10-12 21:04:33,2017-11-16 21:11:17,,,,0,1
10014,moment/moment,4238,Calling moment.utc  2016 07 01  .year 2013 .toString   provides the wrong date,  Description of the Issue and Steps to Reproduce:      It seems like when setting the date to a date in the past and then setting the year to anything will push the outputted date to be at the end of the month.    If you call  moment.utc  2016 07 01  .year 2013 .toString    you will get  Wed Jul 31 2013 00:00:00 GMT 0000 . Notice how it is Jul 31 and not Jul 01.      Environment:      I ve reproduced this in Chrome 61 as well as in Node 5.10.1      Other information that may be helpful:      This seems to only be an issue if you are using a date from the year 2016. If you try  moment.utc  2015 07 01  .year 2013 .toString    it works fine.    I can confirm that this is not an issue previous to moment 2.19.0 . It only is an issue from 2.19.0       If you are reporting an issue  please run the following code in the environment you are using and include the output:       js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version               Thu Oct 12 2017 23:10:36 GMT 0300  ADT   10/12/2017  11:10:36 PM  180  Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_6  AppleWebKit/537.36  KHTML  like Gecko  Chrome/61.0.3163.100 Safari/537.36  2.19.1     ,stringbeans,closed,4,2017-10-13 02:11:50,2017-10-19 20:22:04,,,,0,1
10013,moment/moment,4239,[new locale] fil: Add filipino language tag  fil ,This addresses https://github.com/moment/moment/issues/3054    For the test  I simply copied [test/locale/tl ph.js] https://github.com/moment/moment/blob/develop/src/test/locale/tl ph.js  and changed the argument to  localeModule ,matthewdeeco,open,4,2017-10-13 10:03:52,0000-00-00 00:00:00,,Pending Next Release,,,1,1
10012,moment/moment,4240,[bugfix] Fix incorrect strict parsing with full width parentheses,This fixes https://github.com/moment/moment/issues/2867    My solution was to exclude  uFF08 and  uFF09 which are     and     respectively.,matthewdeeco,closed,1,2017-10-13 12:25:05,2017-12-17 00:37:44,,Pending Next Release,,,1,1
10011,moment/moment,4241,Moment return a wrong date occationally,  Description of the Issue and Steps to Reproduce:    We are having an issue is we have an observable  and subscript it with the  withLatestFrom  from another observable. one of the value in the observable from withLatestFrom is a moment object. We can confirm no new observation form the withLatestFrom but when the subscription to consume the moment object  the object somehow  Changed  after few times.     Please include the values of all variables used.       Environment:    Version 61.0.3163.100  Official Build   64 bit   Windows 10      Other information that may be helpful:    TypeScript  RxJS withLatestFrom    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log providerAndCards[1][0].BornOnDate   /   Moment  _isAMomentObject: true  _i:  2017 09 28T12:29:12Z   _f:  YYYY MM DDTHH:mm:ssZ   _tzm:  0  _isUTC: false      _a: 7  [2017  8  28  12  29  12  0]  _d:Tue Oct 10 2017 08:29:12 GMT 0400  Eastern Daylight Time      _f: YYYY MM DDTHH:mm:ssZ   _i: 2017 09 28T12:29:12Z   _isAMomentObject:true  _isUTC:false  _isValid:true  _locale:Locale  _calendar:      _longDateFormat:      _invalidDate:  Invalid date   _ordinalParse: / d 1 2  th st nd rd /  ordinal:        _pf: empty: false  unusedTokens: Array 0   unusedInput: Array 0   overflow:  1  charsLeftOver: 0      _tzm: 0  _z:null  __proto__:Object   /  console.log  providerAndCards[1][0].BornOnDate.toString     /  Tue Oct 10 2017 08:29:12 GMT 0400  /  console.log  providerAndCards[1][0].BornOnDate.toString   .toLocaleString     /  Tue Oct 10 2017 08:29:12 GMT 0400  /  console.log  navigator.userAgent   /  Mozilla/5.0  Windows NT 10.0; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/61.0.3163.100 Safari/537.36  /  console.log moment.version   /  2.15.2  /          Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,zhangxin511,closed,1,2017-10-13 15:15:07,2017-10-13 18:25:27,,,,0,1
10010,moment/moment,4242,[bugfix] updateLocale now tries to load parent  fixes  3626,This addresses  3626.    A fix was suggested in the comments but a PR wasn t submitted. I ve refactored the suggested fix which will check if the locale to update exists  if not found in the currently loaded locales  and load it before merging. This mitigates the merge with the current set locale if the submitted locale isn t found in the loaded locales array.    Not sure if it should continue to merge if the locale to merge with can t be loaded  but this could be another issue to discuss.,cmyers,closed,8,2017-10-14 23:51:14,2017-11-11 19:41:29,,Pending Next Release,,,1,1
10009,moment/moment,4243,Added ss translation to dutch relativeTime,I am a dutchy and I noticed that the ss translation was still missing : ,pndewit,closed,2,2017-10-16 07:06:09,2017-10-24 23:39:09,,,,1,1
10008,moment/moment,4244,Testing with enzyme,Hello     I m trying to create a test and I can t make it work because when I do moment  2017 09 10   in test environment it does not create a Moment Object. And because of that  the isBetween is always false.    This is my function         import moment from  moment     export const filteredStatistics =  data  startDate  endDate  =>      if startDate === null    endDate === null  return data.toJS        return data.filter element =>        const date = moment element.get  date           return date.isBetween startDate  endDate   days    []        .toJS              This is my test         import moment from  moment     describe  all dates      =>      it  returns original statistics      =>            const statistics = getOverviewStatistics  ctr   overview           const statDate = moment statistics.first  .get  date             const endDate = moment statistics.last  .get  date               const current = filteredStatistics statistics  statDate  endDate           const expected = statistics.toJS              expect current .toEqual expected                            I m using  moment :  ^2.19.1    enzyme :  ^2.9.1    react :  ^15.4.1 .  Do you know how can I test it?,ninahaack,closed,0,2017-10-16 14:58:20,2017-10-16 22:49:48,,,,0,1
10007,moment/moment,4245,moment moment  .toJSON    moment.defaultFormat  true .toString   returns  Invalid Date ,moment moment  .toJSON    moment.defaultFormat  true .toString   returns  Invalid Date     According to docs toJSON   produces ISO8601 formated string and moment.defaultFormat is ISO8601 format.  Taking this in account I would expect to get a valid date. ,goranbjelanovic,closed,1,2017-10-17 15:02:58,2017-10-17 15:24:49,,,,0,1
10006,moment/moment,4246,[misc] Add  ss  relative time key to typescript definition,Hi there     This patch adds  ss  to RelativeTimeKey to make the typescript definition more complete  and updates the typing tests to match.    First patch to moment.js  so please let me know if there s anything I m missing or if you have any suggestions for improvements ,xkxx,closed,8,2017-10-17 15:38:20,2017-12-11 00:39:36,,Pending Next Release,,,1,1
10005,moment/moment,4247,Update moment.js,fix typo,natfitz,closed,3,2017-10-17 21:21:10,2017-10-19 20:10:54,,,,1,1
10004,moment/moment,4248,Update moment with locales.js,fix typo,natfitz,closed,1,2017-10-17 21:36:16,2017-10-19 20:11:42,,,,1,1
10003,moment/moment,4249,Daylight saving time issue,The function endOf of 2017 10 15 returns a value greater than startOf of 2017 10 16      GMT 3h  Brazil    Chrome  Firefox and Edge   Windows 10    Chrome   Arch Linux    version 2.18.1    The code we ve done as fix:             let endOf = dates.clone  .endOf  day          const startOfDayAfter =        dates.clone  .add 1   days  .startOf  day          if  startOfDayAfter.isBefore endOf            endOf = startOfDayAfter.add  1   milliseconds              ,darakeon,closed,3,2017-10-17 22:30:31,2017-11-13 21:01:10,,,,0,1
10002,moment/moment,4250,Memoizing moment,Question about memoizing moment. We found that it is expensive to have moments calculate dates in a React component   especially when the data passed into moment has not changed. Wondering  how crazy would it be if we memoize all the functions on moment. For example   moment.isDate  could be memoized by  lodash/memoize .     Looking for thoughts / concerns.   ,mmahalwy,closed,3,2017-10-18 04:19:27,2017-11-13 19:05:35,,,,0,1
10001,moment/moment,4251,1 test failed. create:string with format  timezone offset   2705.4  ,    Client info       Date String   : Wed Oct 18 2017 14:46:07 GMT 0800  CST   Locale String : 2017/10/18   2:46:07  Offset        :  480  User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_6  AppleWebKit/537.36  KHTML  like Gecko  Chrome/61.0.3163.100 Safari/537.36  Moment Version: 2.19.1         ====        create:string with format  timezone offset   2705.4      parse timezone offset in utc       javascript  // Expected NaN  // Actual   NaN  NaN === NaN     ,hanzhijue,closed,0,2017-10-18 06:46:28,2017-12-17 00:38:50,,Unit Test Failed,,,0,1
10000,moment/moment,4252,Truly localized formatting.,There is an issue with the current localized formats. They lack the really useful formats like _date_ and _date with time_ .    Sure you can use _L_ or _l_ to get a date with correct separators  but there is no way to get a date in the natural format for each locale. Some locales might prefer the _L_ versions while others would prefer to have the _l_ version.    As for date and time  we do have _LLL_ yet it is defined as to use the name of the month which is OK and customary for English but not for all languages.    Thus I propose how redefining the localized formats work or extending it for example with Java style short  medium and long date and time formats.    We could for example have:  LDT: Date and time  in a format that is appropriate for most use cases.  English could be same as current _LLL_ and for example Finnish would be:  D.M.YYYY klo H.m.s .    Then for simple solution we could have _LLDT_  long date time   _LMDT_  medium date time  and _LSMD_  short date time . Or slightly more complex  yet much more versatile  solution where date and time could be specified individually with _LLD_  _LMD_ and _LSD_ and for time _LLT_  _LMT_ and _LST_.    ,Huulivoide,open,1,2017-10-18 09:46:17,0000-00-00 00:00:00,,New Feature,,,0,1
9999,moment/moment,4253,function add,  version: 2.18.1    I have a problem using function add       var d = moment  .add 1   day  ;       this is ok. but         var CURRENT_DATE = moment  ;  var TOMORROW = CURRENT_DATE.add 1   day    var DATE_FORMAT =  YYYYMMDD   console.log CURRENT_DATE.format DATE_FORMAT  ;  console.log TOMORROW.format DATE_FORMAT  ;       The result is the Same.  I expect values like       // expected  CURRENT_DATE ===  20171018   TOMORROW ===  20171019     // received  CURRENT_DATE ===  20171019   TOMORROW ===  20171019          maybe object moment need another function doesn t add the value of current object. ,blueshw,closed,2,2017-10-18 10:16:04,2017-10-19 20:23:04,,,,0,1
9998,moment/moment,4254,[bugfix] Fix endOf for daylight saving time,The endOf formula was not working for the day that the daylight saving  time starts.    Couldn t run tests locally  but running the test code worked.    resolves https://github.com/moment/moment/issues/4249,darakeon,closed,2,2017-10-18 22:55:43,2018-02-14 21:52:39,,Discussion,,,1,1
9997,moment/moment,4255,Fix year setter for random days in leap year,When changing a year from a random day  not the 29th of february  of a leap year  the day is shifted to the end of the month.    Fixes  4238,Kerumen,closed,3,2017-10-19 09:22:47,2017-11-04 14:37:50,,Pending Next Release,,,1,1
9996,moment/moment,4256,Moment.ISO_8601 is function,I m trying to format facebook datetimes and sql datetimes and using the constant mentioned in the docs would be very useful: but it does not work          const Moment = require  moment  ; //same with const Moment = require  moment timezone  ;  console.log Moment.ISO_8601 ;  //[Function]    const a =  2017 10 17T16:59:22 0000 ;  console.log Moment since  Moment.ISO_8601  ;  //null         Versions:        moment :  ^2.19.1     moment timezone :  ^0.5.13       ,damianobarbati,closed,1,2017-10-20 10:05:01,2017-10-20 14:52:05,,,,0,1
9995,moment/moment,4257,Add support for X / unix timestamp parsing in constructor [feature request],Being able to do the following would be so useful:       const moment = Moment value  [ X   Moment.ISO_8601] ; //automatically detect if timestamp or iso string       Right now I m falling back to detect in an if branch  value.match /^ d  /   and use different parsers.,damianobarbati,closed,2,2017-10-20 10:07:45,2017-11-13 22:15:47,,Troubleshooting,,,0,1
9994,moment/moment,4258,2.19.x: The year setter changes the date to the last day of the month when overwriting a leap year,  Description of the Issue    In version v2.19.0 and v2.19.1 if the date is in a leap year and you use the year setter to set the year to that same leap year again  the date portion is changed to the maximum date for that month.    ie if the date is 2016 01 05 and you set the year to 2016 again  the date changes to 2016 01 31    You d expect the date to remain the same.    This does not occur in v2.18.1    perhaps related to  from the changelog :    4199 [bugfix] Fix year setter on leap years  fixes  4024      Steps to Reproduce:    install moment in local folder:  npm install moment@2.19.0   save    contents of test.js file:     javascript  const moment = require  moment  ;    const anotherMoment = moment  05 Jan 2017    DD MMM YYYY  ;  console.log    anotherMoment.format  YYYY MM DD     ;  // outputs 2017 01 05    // Set the year to 2017 again  anotherMoment.year 2017 ;  console.log    anotherMoment.format  YYYY MM DD     ;  // outputs 2017 01 05    no change as expected    // set year to a leap year  anotherMoment.year 2016 ;  console.log    anotherMoment.format  YYYY MM DD     ;  // outputs 2016 01 05    year changes as expected    // set to the same leap year again  anotherMoment.year 2016 ;  console.log    anotherMoment.format  YYYY MM DD     ;  // outputs 2016 01 31    date has changed            Environment:    OS: Microsoft Windows 10 Pro  Version: 10.0.15063 Build 15063  Running in powershell as  node test.js   Node: v6.11.1        Other information that may be helpful:      The time zone setting of the machine the code is running on   UTC  02:00  Harare  Pretoria      The time and date at which the code was run  Fri Oct 20 2017 12:31:13 GMT 0200  South Africa Standard Time       Other libraries in use  TypeScript  Immutable.js  etc   None      If you are reporting an issue  please run the following code in the environment you are using and include the output:  console.log   new Date   .toString     Fri Oct 20 2017 12:31:13 GMT 0200  South Africa Standard Time     console.log  new Date   .toLocaleString     10/20/2017  12:31:13 PM    console.log   new Date   .getTimezoneOffset      120    console.log  navigator.userAgent   // not running in the browser    console.log moment.version   2.19.0  ,mbeets-afro,closed,1,2017-10-20 10:56:01,2017-11-10 20:55:28,,Bug,,,0,1
9993,moment/moment,4259,moment 2.19.x parse broken,  Description of the Issue and Steps to Reproduce:      Using moment 2.19.x  parsing seems to be broken. The only thing different between the below runs is a one hour difference. Somehow one is invalid and the other isn t. Both work fine in 2.18.1.         > require  moment  .utc  Fri Mar 04 15:00:00  0800 2016    ddd MMM DD HH:mm:ss Z YYYY    moment.invalid /  Fri Mar 04 15:00:00  0800 2016  /     > require  moment  .utc  Fri Mar 04 16:00:00  0800 2016    ddd MMM DD HH:mm:ss Z YYYY    moment.utc  2016 03 04T08:00:00.000 00:00             Environment:      Node v6.11.1.    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString    // => Fri Oct 20 2017 10:59:29 GMT 0700  PDT   console.log  new Date   .toLocaleString    // => 10/20/2017  10:59:29 AM  console.log   new Date   .getTimezoneOffset    // => 420  console.log  navigator.userAgent  // => undefined  console.log moment.version  => // 2.19.0       ,devongovett,closed,1,2017-10-20 18:00:38,2017-11-13 18:59:15,,,,0,1
9992,moment/moment,4260,Using pretext in russian locale,I use script for generate date in russian.      return console.log moment  .format  [ ] dddd Do MMMM [ ] LT  .toString   ;     Output             20              11:04    But one day of the week  Tuesday  have problem with generation date.    Wrong output    /          17              15:30.      Correct output         /             17              15:30.   Pretext always using only for Tuesday.        Description of the Issue and Steps to Reproduce:      time.sh script         /usr/bin/env node  var moment = require  moment  ;  moment.locale  ru  ;    return console.log moment  .format  [ ] dddd Do MMMM [ ] LT  .toString   ;       package.json               name :  time       version :  1.0.0       description :         main :  moment.js       scripts :         test :  echo   Error: no test specified      exit 1            keywords : []      author :         license :  ISC       dependencies :         moment :  ^2.19.1                    Environment:       NodeJS 8.6 on Ubuntu 16.04     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     Sat Oct 21 2017 14:10:42 GMT 0300  EEST   console.log  new Date   .toLocaleString     2017 10 21 14:11:15  console.log   new Date   .getTimezoneOffset      180  console.log  navigator.userAgent   n/a  console.log moment.version   2.19.1       ,DodgeCamaro,open,1,2017-10-21 11:25:55,0000-00-00 00:00:00,,Language,Troubleshooting,,,0,1
9991,moment/moment,4261,Weird  Invalid Date  return,I detected this issue trying to parse the following code:       javascript  moment  Tuesday  April 10 at 7:00 PM    dddd[ ] MMMM DD [at] H:mm A  .format  YYYY MM DD    //  Invalid date     moment  Monday  October 23 at 7:00 PM    dddd[ ] MMMM DD [at] H:mm A  .format  YYYY MM DD    //  2017 10 23          Chrome 61 on OSX       js  Sat Oct 21 2017 20:30:05 GMT 0200   02   10/21/2017  7:30:05 PM  120  Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_6  AppleWebKit/537.36  KHTML  like Gecko  Chrome/61.0.3163.100 Safari/537.36  2.19.1     ,obetomuniz,closed,4,2017-10-21 22:32:52,2017-11-13 18:57:42,,,,0,1
9990,moment/moment,4262,Duration compare/equality method?,Would this be hard to add? I am thinking something like the  isSame    method that standard moments have  but for durations.    Currently I m just comparing durations in my code by doing   moment.duration  .toISOString   === moment.duration  .toISOString       Additionally  if they could be compared like  moment.duration   === moment.duration    that would be great,Techn1x,closed,10,2017-10-23 00:37:52,2018-01-02 18:12:48,,New Feature,,,0,1
9989,moment/moment,4263,Moment.js timestamp and utc timestamp is not matched,I am using the unix   function of moment.js in node.js and it returns the timestamp and when i matched this timestamp with epoch timestamp  https://www.epochconverter.com/  then there is a difference of 18 20 sec.    moment  .unix      so anyone can help on this.,rajanmidd,closed,2,2017-10-23 12:58:21,2017-12-19 09:06:32,,Troubleshooting,,,0,1
9988,moment/moment,4264,Fix nl be date formatting,The  L  format of the  nl be  locale should not be DD/MM/YYYY but DD MM YYYY  exactly the same as the  nl  locale.    Also see:    https://en.wikipedia.org/wiki/Date_and_time_notation_in_Belgium    https://www.taaltelefoon.be/datumnotatie    http://trac2.assembla.com/Team6GPR/export/3/BIN normen.pdf,dhiemstra,closed,2,2017-10-23 14:55:03,2017-10-24 23:42:24,,,,1,1
9987,moment/moment,4265,Parsing dates with pattern DMYYYY does not work,Hello   I have a problem with following code:     javascript  moment  551960    DMYYYY   true ; // invalid date  //Object   _isAMomentObject: true  _i:  551960   _f:  DMYYYY   _strict: true  _isUTC: false  _pf: Object  _locale: Object  _d: Invalid Date  _isValid: false    moment  05051960    DMYYYY   true ; // valid date  //Object   _isAMomentObject: true  _i:  05051960   _f:  DMYYYY   _strict: true  _isUTC: false  _pf: Object  _locale: Object  _d: Date 1960 05 04T22:00:00.000Z  _isValid: true         What s the reason that string  551960  cannot be parsed?      This is my output:    Tue Oct 24 2017 08:55:36 GMT 0200  CEST    24.10.2017  08:55:36    120   Mozilla/5.0  X11; Ubuntu; Linux x86_64; rv:56.0  Gecko/20100101 Firefox/56.0     Thank you :smile:   ,wuarmin,closed,11,2017-10-24 07:01:50,2017-11-13 18:47:43,,,,0,1
9986,moment/moment,4266,6 tests failed. diff:diff key after  2762.8  diff:diff key before  2763.8  diff:diff key before singular  2764.8  diff:diff key before abbreviated  2765.8  diff:diff overflow  2768.2  diff:diff between utc and local  2769.4  ,    Client info       Date String   : Tue Oct 24 2017 16:49:52 GMT 0300  MSK   Locale String : October 24  2017 at 4:49:52 PM GMT 3  Offset        :  180  User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_11_6  AppleWebKit/601.7.8  KHTML  like Gecko  Version/9.1.3 Safari/601.7.8  Moment Version: 2.19.1         ====        diff:diff key after  2762.8      hour diff       javascript  // Expected  4  // Actual    5   5 ===  4         ====        diff:diff key before  2763.8      hour diff       javascript  // Expected 4  // Actual   5  5 === 4         ====        diff:diff key before singular  2764.8      hour diff singular       javascript  // Expected 4  // Actual   5  5 === 4         ====        diff:diff key before abbreviated  2765.8      hour diff abbreviated       javascript  // Expected 4  // Actual   5  5 === 4         ====        diff:diff overflow  2768.2      hour diff       javascript  // Expected 24  // Actual   25  25 === 24         ====        diff:diff between utc and local  2769.4      hour diff       javascript  // Expected 4  // Actual   5  5 === 4     ,ValeryKV,closed,1,2017-10-24 13:50:36,2017-11-13 18:38:41,,,,0,1
9985,moment/moment,4267,[locale] set french weekdaysMin in lowercase,As discussed in  4038  in french  from France and Belgium anyway  not sure at all about fr ch and fr ca   weekdays are written in lowercase.    And having the weekdaysMin capitalise wasn t making any real sense.,Elhebert,closed,12,2017-10-25 05:20:49,2017-12-17 00:38:00,,Pending Next Release,,,1,1
9984,moment/moment,4268,Support for 0 11  00 11 hours display format,Do you plane to support 0 11/00 11 hours display format? Like  K/KK  format pattern in SimpleDateFormat?    Thank you ,Scit,closed,4,2017-10-25 08:33:15,2017-11-03 08:50:25,,,,0,1
9983,moment/moment,4269,Moment object created before updateLocale   doesn t use changed locale,  Description of the Issue and Steps to Reproduce:    EASY to reproduce  https://codepen.io/anon/pen/jGgNoq    If you create the moment object before a call to updateLocale    The locale change is never taken into account for that object.       javascript  // January 1  var a = moment  2018 01 01  ;  // Print  January   OK   document.write a.format  MMMM   ;  // Change  January  string to  Test   moment.updateLocale  en     months: [ Test ]   ;  // Should print  Test   but prints  January   document.write a.format  MMMM   ;  // Create a new moment object from original  a = moment a.format   ;  // Now correct  prints  Test   document.write a.format  MMMM   ;           Environment:    All environments  moment 2.19.1,louisptremblay,closed,2,2017-10-25 12:47:50,2017-11-13 18:38:01,,,,0,1
9982,moment/moment,4270,Arabic months names are duplicates ,Hi team:  My team at Google use your library to translate months into a localized version. I noticed during QA that the Arabic months are duplicates for two different regions.     https://github.com/moment/moment/blob/develop/locale/ar.js L60 L73    For instance                       means  January January . One is for standard Arabic  the other for Levant Arabic. I speak Arabic natively  and this indeed does not look right    Could I create a PR to fix it?,Ahmed,closed,6,2017-10-26 04:24:36,2017-12-19 04:25:40,,Language,,,0,1
9981,moment/moment,4271,[locale] Fix Arabic locale for months,  Fixed months name for standard Arabic.       Fixes https://github.com/moment/moment/issues/4270,Ahmed,closed,1,2017-10-26 04:31:09,2017-12-17 00:38:23,,Pending Next Release,,,1,1
9980,moment/moment,4272,function is treated as string in Java Rhino,  Description of the Issue and Steps to Reproduce:    I am using momento in a java script which I am running u sing Java Rhino. When using format functionality of momento  it s not giving expected output. I had narrowed down the issue to the following code:   function addFormatToken  token  padded  ordinal  callback             var func = callback;          if  typeof callback ===  string                  func = function                       return this[callback]  ;               ;                     if  token                 formatTokenFunctions[token] = func;                     if  padded                 formatTokenFunctions[padded[0]] = function                  return zeroFill func.apply this  arguments   padded[1]  padded[2] ;               ;           ;          if  ordinal                 formatTokenFunctions[ordinal] = function                       return this.localeData  .ordinal func.apply this  arguments   token ;               ;                       The function _function     return zeroFill func.apply this  arguments   padded[1]  padded[2] ;  ;_  is treated as string and so I am getting this as output.    I am using moment version 2.14.1 and Mozilla Rhino version 1.7.6,prasanna-rays,closed,2,2017-10-26 11:38:26,2017-11-13 18:37:15,,,,0,1
9979,moment/moment,4273,moment diff issues involving last week of year.,  Description of the Issue and Steps to Reproduce:     const nMonths = moment overflow.end. value.split      .diff moment overflow.start.value.split         months   true ; start.value =any day within the last week of decemember end.value = any day after the start of the next year.      Please include the values of all variables used.       Environment:    jsfiddler.net     Examples: Chrome 49 on OSX  Internet Explorer 10 on Windows 7  Node.JS 4.4.4 on Ubuntu 16.0.4      Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.       Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version        Fri Oct 27 2017 04:11:11 GMT 0700  Pacific Daylight Time   10/27/2017  4:11:11 AM  420  Mozilla/5.0  Windows NT 10.0; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/61.0.3163.100 Safari/537.36  2.19.1     Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer.  ,dmcmillin,closed,1,2017-10-27 11:16:16,2017-11-13 18:35:17,,,,0,1
9978,moment/moment,4274,Date with year 1988 doesn t work correctly when setting year,  Description of the Issue and Steps to Reproduce:      When I have a moment object of which the year is 1988  e.g.  moment  1988 02 10     and I change the year  e.g.  date.year 2017   . Then the day of month is always changed to the last day of the month.      Environment:      Chrome Version 61.0.3163.100  Official Build   64 bit  on MacOS Sierra Version 10.12.6.  Examples can be run on the javascript console on the momentjs homepage.      Some incorrect examples::         js  moment  1988 02 10  .year 1999 .toString   // =>  Sun Feb 28 1999 00:00:00 GMT 0100   moment  1988 09 25  .year 2017 .toString   // =>  Sat Sep 30 2017 00:00:00 GMT 0200            Some good working examples:         js  moment  1989 02 10  .year 1999 .toString   // =>  Wed Feb 10 1999 00:00:00 GMT 0100   moment  1987 09 25  .year 2017 .toString   // =>  Mon Sep 25 2017 00:00:00 GMT 0200      ,daxhuiberts,closed,4,2017-10-27 12:15:32,2017-11-10 20:52:25,,Bug,,,0,1
9977,moment/moment,4275,[bugfix] Verify utc date weekdays using local weekday  fixes  4227 ,This fixes https://github.com/moment/moment/issues/4227 where datestrings with  ddd  or  dddd  in the format returned  Invalid Date  for times that would have different dates locally than in UTC.    This bug was introduced in 2.19.0 with the introduction of the  check for mismatching day of week  if condition. The issue stems from  Date.prototype.getDay    returns the day of week according to local time whereas for a .utc date  config._w.d  would be the day of week according to UTC. For example  since I live somewhere currently with UTC 04:00 offset       js   new Date  2017 10 28T03:59:59Z   .getDay   //  > 5   new Date  2017 10 28T04:00:00Z   .getDay   //  > 6         I was able to write test cases that failed for  me  beforehand and work after my change. However  since it uses the built in localization and Date object behind the scenes  the tests are specific to the timezone of the machine they re run on. I would really appreciate any pointers on how to make these test cases more robust  I haven t seen anything similar in the existing test base  and I ve tried overwriting  Date.prototype.getTimezoneOffset  to no avail .,ZachGawlik,closed,5,2017-10-28 18:35:33,2017-11-29 21:08:49,,High Priority,Pending Next Release,,,1,1
9976,moment/moment,4276,Chokes on a valid date parse: moment  Sun 07 Jan    ddd DD MMM    en   true ,   js  moment  Sun 07 Jan    ddd DD MMM    en   true .isValid  ; => false           Expect  true .,gajus,closed,3,2017-10-28 23:48:16,2017-11-13 18:32:42,,,,0,1
9975,moment/moment,4277,New token LD for localized day of month,Follow up to  3375 in a new issue  with a summary of current proposition.    The tokens used to format a moment based on its locale  LT LTS L l LL lll LLL lll LLLL llll  are configured in the source code with a fixed string of sub tokens  independently of the actual moment being formatted.    This is unfortunately insufficient to express how dates and times should be formatted in some locales. The sub tokens to use can vary with the actual date or time being formatted.    Example is French  where the way to pronounce and write day of month depends on the actual day of month. It is an ordinal for 1 and a cardinal for 2 . E.g. correct sub tokens for  LLL  are:      When day of month = 1:  Do MMMM YYYY HH:mm     Otherwise:  D MMMM YYYY HH:mm     Current code has to choose one of the two  for instance second one   and gets the date improperly formatted in about 1/30 cases.    I suggest to introduce new token  LD .  By default  it has the same value as  Do .  Locales can then refine. French locale would for example define:   LD : value of  Do  when day of month being formatted = 1  value of  D  otherwise   LLL :  LD MMMM YYYY HH:mm     Other ideas to implement this problem ?,fbonzon,open,0,2017-10-29 18:51:42,0000-00-00 00:00:00,,Language,New Feature,,,0,1
9974,moment/moment,4278,How get Google Calender date event s ?,  Description of the Issue and Steps to Reproduce:       Please include the values of all variables used.       Environment:       Firefox 56   Arch Linux x64     Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.       Other information that may be helpful:     Timezone: Europe/Amsterdam   30 10 2017 11:14    If you are reporting an issue  please run the following code in the environment you are using and include the output:       start:  app.js:6252:5  Object   _isAMomentObject: true  _i:  2017 10 30T00:00:00 02:00   _f:  YYYY MM DDTHH:mm:ssZ   _tzm: 120  _isUTC: false  _pf: Object  _locale: Object  _d: Date 2017 10 24T22:00:00.000Z  _isValid: true    app.js:6253:5  end:  app.js:6255:5  Object   _isAMomentObject: true  _i:  2017 10 31T23:59:59 02:00   _f:  YYYY MM DDTHH:mm:ssZ   _tzm: 120  _isUTC: false  _pf: Object  _locale: Object  _d: Date 2017 10 26T21:59:59.000Z  _isValid: true           This would be a date event for 30 10 2017.     Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,francoism90,closed,1,2017-10-30 10:16:53,2017-10-30 10:29:14,,,,0,1
9973,moment/moment,4279,.diff x   days   doesn t seem to use 24 hour days,  Description of the Issue and Steps to Reproduce:      There seems to be handling for DST that causes  .diff  to fail when used with days as units     Please include the values of all variables used.        js  > a = moment  2017 10 30T00:00:00Z    > b = moment  2017 10 29T00:00:00Z    > a.diff b   hours    24  > a.diff b   days    0  >           Environment:      OS X timezone CET  node v6.11.3       js  > console.log   new Date   .toString     Mon Oct 30 2017 17:59:49 GMT 0100  CET   > console.log  new Date   .toLocaleString     10/30/2017  5:59:49 PM  > console.log   new Date   .getTimezoneOffset      60  > console.log moment.version   2.19.1       ,kalleaaltonen,closed,2,2017-10-30 17:01:52,2017-11-13 18:30:05,,,,0,1
9972,moment/moment,4280,Unable to correctly parse moment  year:2017 month:10 day:31  ,I ve noticed in Chrome v62  on Windows 10  that the following line of code produces an invalid date for me  was using 2.18.1  problem also persists with 2.19.1 :       js  moment  year:2017 month:10 day:31  .calendar   //  Invalid date         But also:       js  moment  year:2017 month:10 day:30  .calendar   //  11/30/2017           Here s the environment:       js  console.log   new Date   .toString    // Tue Oct 31 2017 08:28:11 GMT 0100  Mitteleurop ische Zeit   console.log  new Date   .toLocaleString    // 31.10.2017  08:28:11  console.log   new Date   .getTimezoneOffset    //  60  console.log  navigator.userAgent  // Mozilla/5.0  Windows NT 10.0; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/62.0.3202.75 Safari/537.36  console.log moment.version  // 2.19.1         Not sure if this is a user error or not. Maybe I am overlooking a timezone issue.    How I use it: I have counters in Redis where the keys contain a YYMMDD suffix for every day. These timestamps are also generated by momentjs  via  moment  .utc  .format  YYMMDD    . When loading them for display  the YYMMDD part will be regex d into  year: YY  month: MM  day: DD  parts and fed into the object constructor.,MrManny,closed,3,2017-10-31 07:36:34,2017-11-01 12:22:08,,,,0,1
9971,moment/moment,4281,.format produces seconds value over 60,Moment.js formats time weirdly in Node.js:   [image] https://user images.githubusercontent.com/31615495/32215302 ece69ea6 be21 11e7 870e d829ab406a2e.png     As you can see  we got   2017 10 31T09:10:68  . 68 seconds?,dyatko,closed,1,2017-10-31 08:59:33,2017-10-31 10:02:26,,,,0,1
9970,moment/moment,4282,Locale aware format key that displays dates in official format,  Description of the Issue and Steps to Reproduce:      For example  when comparing Finnish and Swedish official date formats:     1.1.2018  in Finnish   2018 01 01  in Swedish    The locale aware formatting key  l   lowercase L  drops out leading zeroes which produces the correct format for Finnish dates  but incorrect one for Swedish dates. With  L  the problem swings other way around.    moment.js version 2.18.1      Is there any plans to add formatting key that would produce official date format based on the current culture?  ,xeii,open,0,2017-11-01 10:25:31,0000-00-00 00:00:00,,Language,,,0,1
9969,moment/moment,4283,rn0.49.5 bug  moment with locales.min.js  require   must have a single string literal argument,  Description of the Issue and Steps to Reproduce:       Please include the values of all variables used.       Environment:RN0.49.5    moment with locales.min.js  require   must have a single string literal argument ,ftb2010,closed,2,2017-11-02 03:48:19,2017-11-13 18:27:51,,,,0,1
9968,moment/moment,4284,Moment incorrectly validates times,   var time = moment  13:22rrr    HH:mm   en   true     time.isValid   //true   var time1 = moment  03:a5jojojo    HH:mm  true    time1.isValid   //true  Moment considers these times as valid ones.,alex-zh,closed,3,2017-11-02 07:01:52,2017-11-13 20:28:58,,Troubleshooting,,,0,1
9967,moment/moment,4285,moment.humanize giving incorrect value,  Description of the Issue and Steps to Reproduce:    I am using latest  2.19.1  version of moment library. I am having an input date  let s say 5:00 pm today  and then subtracting it from current time and then humanize it.         moment.duration moment  hour:17  .diff moment  hour:16  minute:45    .humanize     //15 minutes  moment.duration moment  hour:17  .diff moment  hour:17  minute:15    .humanize     //15 minutes           For line 2 above  it should differentiate output from line 1  which is just opposite.      Environment:    Chrome   Version 61.0.3163.100  Official Build   64 bit   OS   Windows 8     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version        Thu Nov 02 2017 17:21:49 GMT 1000  E. Australia Standard Time   durationFilters.js:104 02/11/2017  17:21:49  durationFilters.js:105  600  durationFilters.js:106 Mozilla/5.0  Windows NT 6.1; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/61.0.3163.100 Safari/537.36  durationFilters.js:107 2.11.1       Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,sprycoder,closed,1,2017-11-02 07:22:26,2017-11-03 03:45:58,,,,0,1
9966,moment/moment,4286,Using .fromNow   on moment skips time intervals,On a moment  using the .fromNow   function  it jumps from  45 minutes ago  to  an hour ago   skipping 46 59 minutes ago.,bdbrown4,closed,3,2017-11-02 15:20:09,2017-11-05 19:33:38,,,,0,1
9965,moment/moment,4287,.diff   returns negative value,  Description of the Issue and Steps to Reproduce:    execute  moment  2016 02 01  .diff  2016 03 01    days         Environment:     react 1.6      Examples: Chrome 49 on OSX  Internet Explorer 10 on Windows 7  Node.JS 4.4.4 on Ubuntu 16.0.4   chrome    Basically  I wanted to calculate days between these two dates and the result is   29 .,stackninigi,closed,3,2017-11-02 21:34:45,2017-11-13 18:23:19,,,,0,1
9964,moment/moment,4288,No space after number in relativeTime for zh cn and zh tw,  While using the relativeTime method  there is no spacing after the number for locales zh cn and zh tw       zh cn : https://github.com/moment/moment/blob/develop/src/locale/zh cn.js L81    zh tw : https://github.com/moment/moment/blob/develop/src/locale/zh tw.js L79      Examples: Chrome 50 on Windows 10  Internet Explorer 10  on Windows 10      [image] https://user images.githubusercontent.com/21033516/32366051 774995da c0a2 11e7 9888 96ae6a3e766b.png     ,MananS77,open,2,2017-11-03 08:53:11,0000-00-00 00:00:00,,Language,,,0,1
9963,moment/moment,4289,[misc] Fix spelling and formatting for U.S. for es us ,I believe this will fix the button near the bottom of https://momentjs.com. If not  feel free to delete this PR.,patik,closed,1,2017-11-03 15:29:24,2017-11-29 15:41:54,,Pending Next Release,,,1,1
9962,moment/moment,4290,incorrect result for 29feb19 by inValid  ,  Description of the Issue and Steps to Reproduce:        input    moment  29feb19  .isValid         output   returns true      input    moment  20190229  .isValid         output   returns false          input    moment  30feb19  .format  DD MM YYYY        output   02 03 2019           EXPECTED OUTPUT   invalid date              Please include the values of all variables used.       Environment:    node project    moment :  ^2.18.1    os    ubuntu 16.0.4  nodejs   6.11.3    machines time zone location kolkata       The time and date at which the code was run   6/Nov/17 3:29:11pm    Other libraries in use   react moment timezone,ketankulkarni,closed,1,2017-11-06 10:00:30,2017-11-13 18:22:13,,,,0,1
9961,moment/moment,4291,moment  minutes: 90  .format  H:mm   is Invalid date,  Description of the Issue and Steps to Reproduce:    Parse an integer value  e.g. 90  in minutes to H:mm  e.g. 1:30  like so:       moment  minutes: 90  .format  H:mm           Apparently this worked in version 2.2.1  see https://jsfiddle.net/L5cpovk9/  but doesn t seem to work anymore in the latest version  https://jsfiddle.net/bo6xqct1/ . I m always getting Invalid date unless my minutes value is below 60. I get why this is  invalid  cause there can t be more than 59 minutes in an hour  but i assumed  minutes  is for letting moment do the conversion  90  > hour:1 minute:30  and  minute  is for the actual minute value  0 59 . I m not sure if this is a bug or by design  but de docs could be clearer in the difference between minute and minutes.  Also looking at the minute s  setter it does mention if you exceed the 0 59 range  it will bubble up to the hour: https://momentjs.com/docs/ /get set/minute/,Fluxlicious,closed,1,2017-11-06 11:47:08,2017-11-13 18:22:00,,,,0,1
9960,moment/moment,4292,moment with locales,  Description of the Issue and Steps to Reproduce:    change to PT_PT locale   Please include the values of all variables used.               function                       timepicker  .datetimepicker                    format:  LT                                                          ;                          Environment:      : Chrome 62        Other information that may be helpful:      i want to see 24 hour clock and calendar with my local    If you are reporting an issue  please run the following code in the environment you are using and include the output:    the specified value does not conform to the required format HH:mm       this appear because it dont user 24 hour clock and also not in my language    Using moment with locales     Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,hsl1,closed,2,2017-11-06 14:43:06,2017-11-13 18:16:51,,,,0,1
9959,moment/moment,4293,month not visible,  Description of the Issue and Steps to Reproduce:      Please see that the month in the calendar is cutting because is opening to up.  Any way to fix the direction of opening?    http://prntscr.com/h6y76s      Environment:       Chrome 62    ,hsl1,closed,1,2017-11-06 16:16:52,2017-11-10 20:48:55,,,,0,1
9958,moment/moment,4294,ISO format. moment construction falls back to js Date  ,  Description of the Issue and Steps to Reproduce:        Environment: mozilla firefox 43.0.1         Other information that may be helpful:      The time zone setting  IST  5:30     The time and date :  2017 11 07 12:12 PM    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  t = moment  18:00    HH:mm  .format  07 10 2017 HH:mm  ;        var d = new Date t ;        convertStart = d.getTime  ;       ,shivamanhar,closed,2,2017-11-07 06:50:05,2017-11-13 18:16:22,,,,0,1
9957,moment/moment,4295,Feature Request: Pass relativeTimeThresholds to humanize   as argument,_Note:_ PR  4296 has been submitted for this.      Description of the Issue and Steps to Reproduce:      1. Have an application which wants to use different  relativeTimeThreshold  values in different parts of its application  1. Call  relativeTimeThreshold  in one part of the application      Desired:   There is a way to confine those relative time thresholds to that part of the application    Observed:   The changes are global      Proposal  Change the signature of  humanize  as follows:       typescript  export function humanize withSuffixOrOptions?: boolean   Options : string;    export interface Options        withSuffix?: boolean;      thresholds?: Thresholds;       // Define a type with the current set of keys accepted by relativeTimeThreshold  export type Thresholds = typeof thresholds;         Within  humanize   if  withSuffixOrOptions  is an object and it contains a  thresholds  property  that will be used instead of the  var thresholds  defined earlier in the file.,TedDriggs,open,2,2017-11-08 17:01:33,0000-00-00 00:00:00,,New Feature,,,0,1
9956,moment/moment,4296,[feature] Accept custom relative thresholds in duration.humanize,Fixes  4295 ,TedDriggs,open,0,2017-11-08 18:05:55,0000-00-00 00:00:00,,Needs docs,,,1,1
9955,moment/moment,4297,Date not being parsed as UTC as expected,,rlightner,closed,0,2017-11-10 02:39:29,2017-11-10 04:31:50,,,,0,1
9954,moment/moment,4298,Inconsistent behavior when parsing w/ specified format and locale.,  Description of the Issue and Steps to Reproduce:    As of  2.19.1  parsing behavior seems to have changed. It seems that the  HH  hour field may not be parsing correctly.      Environment:    Node 8.2.x on OSX.       js  console.log moment  Sun Oct 29 00:52:21  0000 2017    dd MMM DD HH:mm:ss ZZ YYYY    en  .isValid   ; // false  console.log moment  Sun Oct 29 10:52:21  0000 2017    dd MMM DD HH:mm:ss ZZ YYYY    en  .isValid   ; // true         On  2.18.1  I can confirm both above statements resolve as  true .,vjleblanc,closed,2,2017-11-10 17:13:06,2017-11-13 19:08:25,,Bug,,,0,1
9953,moment/moment,4299,Month method returns previous month,When I try to use month method on a date in an ISO format  I got a month number from the previous month. It behaves same in all browsers I ve tried on my Mac  Chrome 62  Firefox  56  Safari 11 .       js  moment  2016 10 20  .month    // returns 9  moment  2016 10 20  .toISOString   // returns  2016 10 19T22:00:00.000Z          My timezone info:       Fri Nov 10 2017 20:44:50 GMT 0100  CET   10/11/2017  20:44:50  timeoffset:  60  Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_6  AppleWebKit/537.36  KHTML  like Gecko  Chrome/62.0.3202.89 Safari/537.36  moment version: 2.19.1         Thanks for help. ,ondrejsevcik,closed,1,2017-11-10 19:47:20,2017-11-10 20:48:15,,,,0,1
9952,moment/moment,4300,moment  .format  YYYY MM DDTHH:mm:SS  ; returns   ,  Description of the Issue and Steps to Reproduce:    just run execute this line moment  .format  YYYY MM DDTHH:mm:SS  ; and I sometimes get empty string as result.   Please include the values of all variables used.       Environment:    google chrome 61.0.3163.100  Windows 10   Examples: Chrome 49 on OSX  Internet Explorer 10 on Windows 7  Node.JS 4.4.4 on Ubuntu 16.0.4      Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.       Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version           Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,Masber,closed,5,2017-11-11 13:41:27,2018-03-05 23:11:06,,Troubleshooting,,,0,1
9951,moment/moment,4301,Year format parsing with strict flag,   javascript  moment  07.17    MM.YYYY   true .format  ; // =>  Invalid date        But according to documentation YYYY is  4 or 2 digit year . Why is it  Invalid date ?     Environment:     Google Chrome Version 61.0.3163.100  Official Build   64 bit  on Linux Mint 17.3.         Sun Nov 12 2017 10:14:31 GMT 0200  IST   11/12/2017  10:14:31 AM   120  Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/61.0.3163.100 Safari/537.36  2.19.2       ,Kirill89,open,4,2017-11-12 08:18:29,0000-00-00 00:00:00,,Documentation,Enhancement,Up-For-Grabs,,,0,1
9950,moment/moment,4302,yarn check error  moment v 2.19.2 ,  Description of the Issue and Steps to Reproduce:    1. yarn check     error  react moment proptypes moment  not installed  2. after install    yarn add react moment proptypes   3. yarn check   not fix this error        Environment:    node 8.9.0  yarn 1.3.2  npm 5.5.1,alexeikaratai,closed,3,2017-11-12 20:55:56,2017-11-14 17:13:27,,,,0,1
9949,moment/moment,4303,Uppercased locale strings [DA],@mrbase do you agree with these changes? All other locales seem to have uppercase localisation strings  and from my testing we should as well.,Kosai106,closed,2,2017-11-13 13:18:56,2017-11-13 17:43:39,,,,1,1
9948,moment/moment,4304,Getting last Tuesday... without if conditions,I m trying to get last X day of either current week or previous week... just like php strotime  last tuesday     Should return the date for the Tuesday last week if you re on the Monday of this week or if it s now Wed you should get Tuesday of this week...     I m not sure how to do this without if statements of figuring out if you ve passed a specific day of the week already.,raptor235,closed,1,2017-11-13 18:09:37,2017-11-16 21:10:25,,,,0,1
9947,moment/moment,4305,Circular dependencies in moment,I found some circular dependencies in moment using madge:       madge   circular src    Processed 399 files  9.1s        Found 15 circular dependencies     1  lib/create/check overflow.js > lib/units/month.js > lib/create/utc.js > lib/create/from anything.js  2  lib/create/from anything.js > lib/create/from array.js > lib/create/local.js  3  lib/units/month.js > lib/create/utc.js > lib/create/from anything.js > lib/create/from array.js > lib/units/week calendar utils.js > lib/units/year.js > lib/moment/get set.js  4  lib/units/year.js > lib/moment/get set.js  5  lib/create/check overflow.js > lib/units/month.js > lib/create/utc.js > lib/create/from anything.js > lib/create/from string and array.js > lib/create/from string and format.js  6  lib/create/from string and format.js > lib/create/from string.js  7  lib/create/utc.js > lib/create/from anything.js > lib/create/from string and array.js > lib/create/from string and format.js > lib/create/from string.js > lib/units/day of week.js  8  lib/units/month.js > lib/create/utc.js > lib/create/from anything.js > lib/create/from string and array.js > lib/create/from string and format.js > lib/create/from string.js  9  lib/create/utc.js > lib/create/from anything.js > lib/create/from string and array.js > lib/create/valid.js  10  lib/units/month.js > lib/create/utc.js > lib/create/from anything.js > lib/locale/locales.js > lib/locale/base config.js  11  lib/duration/constructor.js > lib/duration/valid.js  12  lib/duration/create.js > lib/duration/constructor.js > lib/duration/valid.js  13  lib/duration/create.js > lib/units/offset.js  14  lib/duration/create.js > lib/units/offset.js > lib/moment/add subtract.js  15  test/helpers/common locale.js > test/qunit.js         I don t have any particular problem with this  I found out by analyzing my own sources that moment is the only package I have which have circular dependencies and I think it could be better without these.,nicolashenry,closed,2,2017-11-14 00:13:17,2017-11-16 21:07:35,,,,0,1
9946,moment/moment,4306,Duration of 0 and less than a second,  Description of the Issue and Steps to Reproduce:      The value of  moment.duration 0 .humanize    yields   a minute   which is an odd behavior.       Expected or desired behavior         moment.duration 0 .humanize  ;  //  now   moment.duration 0 .humanize true ;  //  just now          Rounding milliseconds would also behave the same for a duration of less than 500 ms.,yanickrochon,closed,4,2017-11-15 15:31:37,2017-11-16 22:16:33,,Troubleshooting,,,0,1
9945,moment/moment,4307,Parsed date is considered invalid,  Description of the Issue and Steps to Reproduce:    Parsing the date  Thu Nov 2 23:42:48 2017 0000  with format  ddd MMM D HH:mm:ss YYYYZZ  and strict set to true will return an invalid date.    Possible causes:  1. Bug in moments date parsing.  2.  More likely  I m using the wrong format string  but I swear I ve double and triple checked it with the docs.         const date = moment  Thu Nov 2 23:42:48 2017 0000    ddd MMM D HH:mm:ss YYYYZZ   true .locale  en  ;  console.log date.isValid   ; // Outputs false          Please include the values of all variables used.   See code.      Environment:    Chrome 62 on macOS  Firefox 57 on Ubuntu.  moment version 2.19.2        Other information that may be helpful:      The time zone setting of the machine the code is running on  macOS: GMT 0100  Ubuntu: GMT 0100    The time and date at which the code was run  Thursday Nov 16 around 9:30 am.    Other libraries in use  TypeScript  Immutable.js  etc   React  webpack  babel  et al.    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version   VM63:1 Thu Nov 16 2017 09:38:34 GMT 0100  CET   VM63:2 2017 11 16 09:38:34  VM63:3  60  VM63:4 Mozilla/5.0  Macintosh; Intel Mac OS X 10_13_1  AppleWebKit/537.36  KHTML  like Gecko  Chrome/62.0.3202.94 Safari/537.36  VM63:5 Uncaught ReferenceError: moment is not defined      at <anonymous>:5:13        Moment is used as a module  so it is not available in the global scope  version is 2.19.2 ,larsnystrom,closed,1,2017-11-16 08:48:14,2017-11-16 20:59:19,,,,0,1
9944,moment/moment,4308,add   method returns strange result,Tried the following code on the latest Chrome/Firefox browser but there s no actual time update  the date is still the same. I m using this moment lib: https://cdn.jsdelivr.net/npm/moment@2.19.2/moment.min.js.   Works fine   on my Node.js 9.x.x using the default version of moment. grabbed from the npm package manager.         var timer = new moment  2017 11 15 00:00:00    timer.add 10   seconds    // returns: 2017 11 15 00:00:00         P.S.  Browser run: moment.min.js  2.19.2  Node.js run: default 2.19.2,crafter999,closed,2,2017-11-16 13:35:12,2017-12-20 03:14:18,,Troubleshooting,,,0,1
9943,moment/moment,4309,Admin ,  Description of the Issue and Steps to Reproduce:       Please include the values of all variables used.       Environment:       Examples: Chrome 49 on OSX  Internet Explorer 10 on Windows 7  Node.JS 4.4.4 on Ubuntu 16.0.4      Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.       Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version           Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,propsn,closed,2,2017-11-18 02:51:05,2017-11-20 05:22:05,,,,0,1
9942,moment/moment,4310,[bugfix] Fix  3883 lazy load parentLocale in defineLocale  fallback to global if missing,Fixes  3883. It s currently possible to define a locale with a parent that is not yet defined. However  in the case of this bug when attempting to create a moment using a child locale with a parent that hasn t been loaded yet or hasn t been defined causes an exception to be thrown during prepareConfig.    This fix first attempts to load the parent locale during  defineLocale  if it can t be found initially.  If in the case that a moment is created or a locale is set with a child who s parent can t be loaded or hasn t been defined   chooseLocale  returns the global locale instead of null. This mitigates the error described in this bug report in the instance the parentLocale can t be located  and follows the same logic when defining a child can t load a parent. I ve added a test for this case.    As this is an edge case it may not be necessary  but makes for a nicer experience rather than having an unhandled exception thrown. I considered adding a warning in  chooseLocale  but this affected a number of tests.     Also  a warning was previously shown to indicate the parentLocale is missing but was removed  assuming due to the ability to define a parent after a child . However  the documentation specifies that it should still show the warning? I m assuming in this instance the documentation needs updating.    Apologies if these scenarios have already been discussed and addressed.,cmyers,closed,4,2017-11-18 21:21:09,2018-03-02 18:59:26,,Docs written,Pending Next Release,,,1,1
9941,moment/moment,4311,1 test failed. create:string with format  timezone offset   2705.4  ,    Client info       Date String   : Mon Nov 20 2017 10:15:07 GMT 0800  CST   Locale String : 2017/11/20   10:15:07  Offset        :  480  User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_6  AppleWebKit/537.36  KHTML  like Gecko  Chrome/62.0.3202.94 Safari/537.36  Moment Version: 2.19.2         ====        create:string with format  timezone offset   2705.4      parse timezone offset in utc       javascript  // Expected NaN  // Actual   NaN  NaN === NaN     ,DecKen,closed,2,2017-11-20 02:16:16,2017-12-11 06:26:24,,Duplicate,,,0,1
9940,moment/moment,4312,[bugfix] Fix  4251: Avoid RFC2822 in utc   test,In  zh cn  locale  among others  the end of [string with format  timezone offset  unit test] https://github.com/moment/moment/blob/328d51e7235b7a2d443bfdf69c1844939c115660/src/test/moment/create.js L357  attempts to create two dates using RFC formatted strings passed to  moment.utc    with explicit format strings.    This fails because it tries to parse the month and day of week using the users locale   zh cn   instead of the English required to parse RFC2822.    This PR removes the locale specific formatting from the unit test.    Fixes  4251 ,ashsearle,closed,2,2017-11-20 20:01:27,2017-12-17 00:38:50,,Pending Next Release,,,1,1
9939,moment/moment,4313,Uncaught TypeError: Moment ... .tz is not a function at <anonymous>:1:10,Attempting to test some timezone conversions in chrome console and I ve imported moment.js  moment with locales.js  and moment timezone with data.js with the same problem. I can run moment.version and come back with 2.19.2    When I try running moment  .tz  America/Chicago  .format  M   I get the uncaught error.    moment.version   2.19.2   moment  .tz  America/Chicago  .format  hh:mm:ss z    VM5252:1 Uncaught TypeError: moment ... .tz is not a function      at <anonymous>:1:10    Not 100   but fairly sure this happened after the newest Chrome update   Version 62.0.3202.94  Official Build   64 bit    Windows 7    Mon Nov 20 2017 16:11:52 GMT 0600  Central Standard Time   VM5257:2 11/20/2017  4:11:52 PM  VM5257:3 360  VM5257:4 Mozilla/5.0  Windows NT 6.1; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/62.0.3202.94 Safari/537.36    ,grrttmrtn,open,4,2017-11-20 22:12:23,0000-00-00 00:00:00,,Troubleshooting,,,0,1
9938,moment/moment,4314,[Bug] Time formatting,  Description of the Issue and Steps to Reproduce:         moment.utc  24:minutes    HH:mm  .isValid  ;  moment.utc  hours:24    HH:mm  .isValid  ;       are both returning true.    I would expect them to be false  as  hours  and  minutes  aren t valid values.    https://jsfiddle.net/thpp7t71/    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version        Tue Nov 21 2017 16:18:44 GMT 0000  GMT Standard Time   11/21/2017  4:18:44 PM   0  Mozilla/5.0  Windows NT 10.0; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/62.0.3202.94 Safari/537.36  2.13.0  it applies on the latest too though         ,cheng93,open,3,2017-11-21 16:20:05,0000-00-00 00:00:00,,Documentation,,,0,1
9937,moment/moment,4315,    moment.locale  de  ;  not working with minified moment with locales.min.js,with moment with locales.js it s working.  Version 2.19.2,pmbert,closed,2,2017-11-21 17:31:09,2017-12-03 13:41:58,,,,0,1
9936,moment/moment,4316,moment.max moments[i].isValid is not a function,  Description of the Issue and Steps to Reproduce:       moment.max moment   new Date          happens when last parameter is not moment           global.js:2673 Uncaught TypeError: moments[i].isValid is not a function      at pickBy  global.js:2673       at Function.max  global.js:2690       at <anonymous>:1:8           Environment:    any      Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version             Wed Nov 22 2017 15:26:08 GMT 0800  CST   VM97:2 2017/11/22   3:26:08  VM97:3  480  VM97:4 Mozilla/5.0  Macintosh; Intel Mac OS X 10_13_1  AppleWebKit/537.36  KHTML  like Gecko  Chrome/61.0.3163.100 Safari/537.36  VM97:5 2.19.2          Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,Diluka,closed,2,2017-11-22 07:28:25,2018-03-02 19:00:37,,,,0,1
9935,moment/moment,4317,Japanese says  next ...  when it shouldn t,When using the Japanese locale  the calendar   text includes the word  next  when it shouldn t  for example  Next Saturday .    Here s an example  used in an open console on https://momentjs.com  on a Wednesday      :     js  moment.locale  ja    moment  .add 3   days  .calendar    >>        18:30        Which translates in Google Translate to  Next Saturday 18: 30   when it should clearly be just  Saturday 18:30   just like the English version:     js  moment.locale  en    moment  .add 3   days  .calendar    >>  Saturday 18:30            Environment:    This was checked both on node  various versions   and on the console of https://momentjs.com.     js  console.log   new Date   .toString     >> Wed Nov 22 2017 18:40:02 GMT 0200  IST   console.log  new Date   .toLocaleString     >> 11/22/2017  6:40:02 PM  console.log   new Date   .getTimezoneOffset     >>  120  console.log  navigator.userAgent   >> Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_6  AppleWebKit/537.36  KHTML  like Gecko  Chrome/62.0.3202.94 Safari/537.36  console.log moment.version   >> 2.19.2     ,3LOK,open,2,2017-11-22 16:43:23,0000-00-00 00:00:00,,,,0,1
9934,moment/moment,4318,end of year   toISOString is wrong,  Description of the Issue and Steps to Reproduce:           const start = moment  2011 10 05T22:26:12 04:00  .endOf  year  .toISOString  ;  console.log start ;         Example codepen:  https://codepen.io/anon/pen/xPjdzw?editors=1111    Expected value:   2012 01 01T03:59:59.999Z      Please include the values of all variables used.       Environment:       Examples: Chrome 49 on OSX  Internet Explorer 10 on Windows 7  Node.JS 4.4.4 on Ubuntu 16.0.4   Codepen       Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.       Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version               Wed Nov 22 2017 11:48:01 GMT 0800  PST   11/22/2017  11:48:01 AM  480  Mozilla/5.0  Macintosh; Intel Mac OS X 10_13_1  AppleWebKit/605.1.13  KHTML  like Gecko  Version/11.1 Safari/605.1.13  2.19.2          Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,pencilcheck,closed,2,2017-11-22 19:49:05,2017-12-20 02:38:55,,,,0,1
9933,moment/moment,4319,Greetings API with I18n language support [New Feature Recomendation],It has been while I am searching for a way to greet my client  Good Morning  Good Evening etc   based on their system timing and the language of the site they are viewing.    So       I can pass in the language code and the function will return me the greeting text based on the system time.    I can pass in the language code and time ant the function will return a greeting text.,kt-12,closed,1,2017-11-23 09:31:47,2017-12-29 06:50:01,,,,0,1
9932,moment/moment,4320,Moment doesn t get local timezone, [screen shot 2017 11 24 at 10 02 07 pm] https://user images.githubusercontent.com/5382700/33215738 66b80662 d163 11e7 8d5b a303c523e102.png   ,thanhthang20,open,8,2017-11-24 15:04:45,0000-00-00 00:00:00,,,,0,1
9931,moment/moment,4322,isSame function return different result when it s type of first parameter is number or string,  Description of the Issue and Steps to Reproduce:         moment  2017 11 26  .isSame  2017    year   // true  moment  2017 11 26  .isSame 2017   year   // false           Environment:    Chrome 62.0.3202.94 on OSX    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString    // Sun Nov 26 2017 14:12:45 GMT 0800  HKT   console.log  new Date   .toLocaleString    // 2017/11/26   2:12:45  console.log   new Date   .getTimezoneOffset    //  480  console.log  navigator.userAgent  // Mozilla/5.0  Macintosh; Intel Mac OS X 10_13_1  AppleWebKit/537.36  KHTML  like Gecko  Chrome/62.0.3202.94 Safari/537.36  console.log moment.version  // 2.19.2          Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,JChehe,open,2,2017-11-26 06:17:46,0000-00-00 00:00:00,,Documentation,,,0,1
9930,moment/moment,4323,Invalid duration gets valid when wrapping/cloning,https://jsfiddle.net/kearnmachine/fLccczaa/1/,kearnmachine,open,2,2017-11-27 10:25:21,0000-00-00 00:00:00,,,,0,1
9929,moment/moment,4324,Strict mode with without requiring spaces?,Some locales contain spaces in its formats. For instance  in cs  [ D. M. YYYY ] https://github.com/moment/moment/blob/1f613c2cccdfd2aaeb646247ff22a8361b1cd7dd/src/locale/cs.js L100   spaces were added [because it is in cs.wikipedia style] https://github.com/moment/moment/pull/2016 issuecomment 187670054 .     This causes problems when parsing user input in these locales  people tends to write  1.2.2017  instead of  1. 2. 2017 .    What about to add an option to not require spaces in strict mode parsing?,n9,open,2,2017-11-27 16:34:30,0000-00-00 00:00:00,,Enhancement,,,0,1
9928,moment/moment,4325,Localized date without the year,Sometimes you want to be able to show a localized date without the year.  E.g.  en   Nov 19   du   19 nov    A common scenario is in newsfeeds  where you will generally show the year only when it isn t the current one  e.g.:    Just now    2 days ago    Nov 17  12:18PM    Nov 2  2016 12:28AM    This is currently not supported as a default format. A discussions about it can be seen here: https://stackoverflow.com/questions/27360102/locale and specific date format with moment js     IMHO the  moment  .format  l  ;  would be the ideal candidate for this  since the current representation  11/27/2017  is out of sync with the  l  style representations that all include the name of the month in some way.,mschipperheyn,open,2,2017-11-28 01:21:18,0000-00-00 00:00:00,,Enhancement,,,0,1
9927,moment/moment,4326,[bugfix] Fix for ReDOS vulnerability  see  4163 ,Limiting regex match to 256 chars  fixing  4163.    I did not change the minified versions because I assumed that would be part of some build process and could not find anything about it in  contributing . Please advise if this has to be done manually somehow.,migg24,closed,3,2017-11-28 08:18:20,2017-11-29 15:36:21,,High Priority,,,1,1
9926,moment/moment,4328,NSP reports regexp vulnerability  532,If running the node security platform scanner  the following vulnerability will be reported:    https://nodesecurity.io/advisories/532    Cause the most recent momentJS version is affected there s no mitigation path.                                                                                                                                                                                                  Regular Expression Denial of Service                                                                                                                                                                                                                                                                                          Name            moment                                                                                                                                                                                                                                                                                                                        CVSS            7.5  High                                                                                                                                                                                                                                                                                                                     Installed       2.19.2                                                                                                                                                                                                                                                                                                                        Vulnerable      All                                                                                                                                                                                                                                                                                                                           Patched         None                                                                                                                                                                                                                                                                                                                          Path            xxx@0.0.1 > moment@2.19.2                                                                                                                                                                                                                                                                                            More Info       https://nodesecurity.io/advisories/532                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Regular Expression Denial of Service                                                                                                                                                                                                                                                                                          Name            moment                                                                                                                                                                                                                                                                                                                        CVSS            7.5  High                                                                                                                                                                                                                                                                                                                     Installed       2.19.2                                                                                                                                                                                                                                                                                                                        Vulnerable      All                                                                                                                                                                                                                                                                                                                           Patched         None                                                                                                                                                                                                                                                                                                                          Path            xxx@0.0.1 > moment timezone@0.5.14 > moment@2.19.2                                                                                                                                                                                                                                                                   More Info       https://nodesecurity.io/advisories/532                                                                                                                                                                                                                                                                                       Use   force to continue.     ,modean,closed,3,2017-11-28 09:37:32,2017-12-14 05:58:47,,Duplicate,,,0,1
9925,moment/moment,4329,cannot create date object from date strings without leading 0 in day in Safari and IE,  Description of the Issue and Steps to Reproduce:    In IE and Safari try to run this code  new moment  2018 12 7       Please include the values of all variables used.    2018 12 7       Environment:    Latest IE and Safari        Other information that may be helpful:      The time zone setting of the machine the code is running on  UK London UTC 0    The time and date at which the code was run  28/22/2017    Other libraries in use  TypeScript  Immutable.js  etc   jQuery    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString      > Tue Nov 28 2017 15:12:55 GMT 0000  GMT Standard Time   console.log  new Date   .toLocaleString      > 28 / 11 / 2017   15 : 12 : 55  console.log   new Date   .getTimezoneOffset      > 0  console.log  navigator.userAgent    > Mozilla/5.0  Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; rv:11.0  like Gecko  console.log moment.version    > 2.19.1         Note: Unfortunately I do not have access to a Safari at this moment other then a phone and tablet     Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,botondev,closed,2,2017-11-28 15:13:50,2017-12-19 08:57:33,,,,0,1
9924,moment/moment,4330,Invalid date not isSame   as another same invalid date,  Description of the Issue and Steps to Reproduce:         js  const invalidDate1 = moment      const invalidDate2 = moment        invalidDate1.isSame invalidDate2    // => false           Expected         js  // => true?         Maybe it is expected to return  false  but I did not find any issue about this  nor any mentions about that in  isSame    documentation  so I wanted to make sure this is not a bug.    Edit: found test case here https://github.com/moment/moment/blob/68a68b8730fbb69515ddbfb1d62bcfe34a484ae1/src/test/moment/is_same.js L149    But why they  should not be equal  ? Same rationale as  NaN  ?      Use case      Edit: adding a use case FYI    I have a  didChange    method in a form component  to check if  save  button should be disabled or not. In the case of uninitialized  Moment  values  equality check forces me to also verify that dates can also be both invalid  which I find a bit awkward.      Environment:      Chrome OSX   Version 62.0.3202.94  Official Build   64 bit   OSX 10.13.1  17B48       Other information that may be helpful:      If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  Wed Nov 29 2017 10:11:34 GMT 0000  WET   29/11/2017  10:11:34  0  Mozilla/5.0  Macintosh; Intel Mac OS X 10_13_1  AppleWebKit/537.36  KHTML  like Gecko  Chrome/62.0.3202.94 Safari/537.36  2.18.1         ,pandaiolo,closed,2,2017-11-29 10:15:02,2018-03-05 08:09:38,,Documentation,,,0,1
9923,moment/moment,4331,Add months and then diff doesn t return the same added value,  Description of the Issue and Steps to Reproduce:      var startDate = moment  2016 11 29 13:00:00  ;  var endDate = startDate.clone  .add 3   month  ;  console.log endDate.diff startDate   month   ;      Expected output  Output should be 3    check url: https://runkit.com/embed/rglhuftgpnvv      Environment:    Chrome 61 on on Ubuntu 16.0.4     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  Wed Nov 29 2017 14:35:45 GMT 0000  WET   11/29/2017  2:35:45 PM  0  Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/61.0.3163.100 Safari/537.36  2.19.1  undefined          Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,ivospinheiro,closed,1,2017-11-29 14:39:50,2017-11-29 21:57:53,,,,0,1
9922,moment/moment,4332,[bugfix] Fix weekday verification for UTC and offset days  fixes  4227 , 4275  fix for  4227  but with a few changes:       Don t create a local date every time  just pull the UTC day out of the UTC constructed date     Some more tests,icambron,closed,1,2017-11-29 21:03:12,2017-12-11 00:27:27,,Bug-fix,High Priority,Pending Next Release,,,1,1
9921,moment/moment,4333,RFC 3339,Seems like there is an issue parsing RFC 3339 dates with moment. Have a Stack Overflow question open incase I m just missing something simple.    https://stackoverflow.com/questions/47562083/parse rfc 3339 date with javascript,EmperiorEric,open,1,2017-11-29 21:33:13,0000-00-00 00:00:00,,Troubleshooting,,,0,1
9920,moment/moment,4334,toInt excepts 1 argument  2 given,static analysis  sonarqube  in my project claims that this line has error    https://github.com/moment/moment/blob/4caa268356434f3ae9b5041985d62a0e8c246c78/moment.js L3669    because toInt accepts only one argument    on the other hand code appears to be working   moment  12th January of 2017    Do MMMM of YYYY  .format  Mo Do Yo   ,marcin-derlukiewicz,closed,0,2017-11-30 10:25:10,2017-12-11 00:23:41,,,,0,1
9919,moment/moment,4335,[new locale] Added locale en il ,Israel has many English speaking citizens / visitors  however  none of the existing English locales match the needed configuration in Israel.    en il vs en gb:  1. The first day of the week is Sunday.  2. The first week of the year is the week of January 1st.    en il vs en us:  1. The calendar format is DD/MM/YYYY.  2. It uses 24 hours clock.    This pull request includes tests.,3LOK,closed,1,2017-11-30 12:37:38,2018-03-02 19:00:15,,Pending Next Release,,,1,1
9918,moment/moment,4336,[bugfix] Fix  4334: Remove unused function call argument,,ashsearle,closed,1,2017-11-30 16:31:52,2017-12-11 00:23:25,,Pending Next Release,,,1,1
9917,moment/moment,4337,Incorrect weekdayMismatch for valid date,  Description of the Issue and Steps to Reproduce:      From moment 2.19.0  parsing a string like   Tue Nov 28 2017 17:54:41 GMT 0600  CST    specifying   ddd MMM D YYYY HH:mm:ss [GMT]Z   format parameter  no strict mode  will produce an Invalid Date.       js  moment  Tue Nov 28 2017 17:54:41 GMT 0600  CST     ddd MMM D YYYY HH:mm:ss [GMT]Z  .isValid  ; // false         The same code will output  true  using previous version of moment  e.g. 2.18.1 .    [Here] https://jsfiddle.net/sgna0op4/2/  a jsfiddle showing the issue.    I came across this issue while answering [this] https://stackoverflow.com/a/47550587/4131048  Stack Overflow question.      Environment:      Chrome 62 on Windows 7/10.    Environment output:     js  console.log   new Date   .toString    // => Thu Nov 30 2017 20:00:35 GMT 0100  ora solare Europa occidentale   console.log  new Date   .toLocaleString    // => 30/11/2017  20:00:35  console.log   new Date   .getTimezoneOffset    // =>  60  console.log  navigator.userAgent  // => Mozilla/5.0  Windows NT 6.1; WOW64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/62.0.3202.94 Safari/537.36  console.log moment.version  // => 2.19.3       ,vin-car,closed,1,2017-11-30 19:06:08,2017-12-05 17:45:30,,,,0,1
9916,moment/moment,4338,[bugfix] Fix startOf/endOf DST issues while boosting performance,These changes to  startOf  and  endOf  fix several DST related issues:    avoid using setHours/setMinutes/setSeconds   fixes  1990  fixes  2749  fixes  3580    use  Date.UTC  /  new Date  for units bigger than hours   fixes  3132  fixes  4152    Additionally  the changes supersede these pull requests:  3620   4164 and  4254     Benchmark results      Benchmark   moment 2.19.3   this PR   improvement                                 startOf second   2 598 171 ops/sec  1.24    5 322 216 ops/sec  1.56    2.0x      startOf minute   1 606 046 ops/sec  0.98    7 397 801 ops/sec  0.92    4.6x      startOf hour   1 069 176 ops/sec  0.96    5 015 984 ops/sec  0.91      4.6x      startOf date   811 815 ops/sec  1.08    1 162 031 ops/sec  0.89        1.4x      startOf day   827 911 ops/sec  0.83    1 170 806 ops/sec  1.25         1.4x      startOf isoWeek   274 302 ops/sec  1.06    973 431 ops/sec  1.09       3.5x      startOf week   298 240 ops/sec  1.00    1 188 010 ops/sec  0.94        3.9x      startOf month   653 227 ops/sec  0.85    1 447 224 ops/sec  0.76       2.2x      startOf quarter   381 496 ops/sec  0.85    1 221 562 ops/sec  0.93     3.2x      startOf year   425 796 ops/sec  0.98    2 047 534 ops/sec  1.02        4.8x      endOf second   200 544 ops/sec  0.92    5 496 719 ops/sec  1.00        27.4x      endOf minute   190 097 ops/sec  1.02    6 600 219 ops/sec  0.94        34.7x      endOf hour   331 129 ops/sec  0.86    4 612 042 ops/sec  0.88          13.9x      endOf date   249 577 ops/sec  1.10    1 239 091 ops/sec  0.96          4.9x       endOf day   251 496 ops/sec  1.01    1 240 042 ops/sec  1.35           4.9x       endOf isoWeek   160 238 ops/sec  1.73    917 050 ops/sec  0.85         5.7x       endOf week   174 334 ops/sec  2.02    1 216 138 ops/sec  0.88          6.9x       endOf month   200 123 ops/sec  1.24    1 480 412 ops/sec  2.05         7.3x       endOf quarter   159 346 ops/sec  0.99    1 165 512 ops/sec  1.02       7.3x       endOf year   165 736 ops/sec  1.70    2 026 810 ops/sec  1.67          12.2x      Additionally  fixed one more bug:  moment  0000 02 29    was created in year 1900 then reverted to year 0.  Unfortunately Feb 29th doesn t exist in 1900  so the moment ended up as  0000 03 01  instead.    New tests have been added to  start_end_of.js  that would have failed in earlier releases.,ashsearle,open,5,2017-12-01 00:45:33,0000-00-00 00:00:00,,,,1,1
9915,moment/moment,4339,SECURITY VULNERABILITIES   Regular Expression Denial of Service,Dependencies report Regular Expression Denial of Service in momentjs library  see here   https://david dm.org/uqlibrary/fez frontend  ,jannakha,closed,1,2017-12-01 01:52:34,2017-12-05 17:45:13,,,,0,1
9914,moment/moment,4340,How to edit style of text in moment timezone ?,I created a time of zone by  moment.tz id_zone .hour v .format  hh:mm:ss a    .I want to handle this time   for example   the hour displayed on a big size and minute on small size . Please is it possible with moment and moment timezone ?,Johnba1988,closed,1,2017-12-01 07:37:43,2017-12-05 17:45:40,,,,0,1
9913,moment/moment,4341,[feature] Prevent toISOString converting to UTC  issue  1751 ,A minimal effort to allow users to opt out of UTC conversion when calling  toISOString   :       js  moment  .toISOString  ;  moment  .toISOString   utc: false   ;         Example while running in Europe/London timezone:     js  moment  2017 07 01  .toISOString  ; // 2017 06 30T23:00:00.000Z  moment  2017 07 01  .toISOString   utc: false   ; // 2017 07 01T00:00:00.000 01:00         The PR preserves existing behaviour of converting to UTC by default.,ashsearle,closed,5,2017-12-03 12:27:51,2017-12-17 00:41:10,,Pending Next Release,,,1,1
9912,moment/moment,4342,Converting a string literal date to utc and formatting result in previous day,  Description of the Issue and Steps to Reproduce:    When a date from is passed to moment constructor and is converted to utc time and then formatted with  YYYY MM DD   it returns a string representation of previous date.  I m not sure if this is intended or a bug but I can t seem to understand the behaviour behind this.      Please include the values of all variables used.   Here is the full code. I expect it to return  2017 12 12  but it returns  2017 12 11   console.log moment  2017 12 12  .utc  .format  YYYY MM DD           Environment:    NodeJS v8.5.0 on Windows 10  Chrome 62.0 on Windows 10      Other information that may be helpful:    Timezone: Berlin time  UTC 1   Date of execution: 2017 12 5  y m d       If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version          Tue Dec 05 2017 18:28:02 GMT 0100  W. Europe Standard Time     12/5/2017  6:28:02 PM     60    Mozilla/5.0  Windows NT 10.0; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/62.0.3202.94 Safari/537.36    2.2.1  ,jangedoo,closed,2,2017-12-05 17:36:28,2017-12-05 23:35:44,,,,0,1
9911,moment/moment,4343,[feature] Declare module for projects that don t use any module system,I was working in my project and downloaded moment for the typing and when i started building it threw an error because i don t use RequireJS or AMD.     Feel free to check if this is the correct path to fix the problem  this fixed the issue for me and it might help others that might be facing the same problem,telmo-rodrigues,closed,1,2017-12-06 16:29:57,2017-12-06 16:39:24,,,,1,1
9910,moment/moment,4344,Feature request: Formatting duration in multiple time units,  Description of the Issue and Steps to Reproduce:    It s a subsequent feature request for  4295     1.  4295 will add support to format duration in  momentjs   existing relative formatting behavior.   2. Formatting duration via  .humanize    could be also achieved with multiple time units. e.g.        js  moment.duration   s: 100   .humanize   s: true    //  100 seconds   moment.duration   s: 100   .humanize   m: true    //  1 minute   moment.duration   s: 100   .humanize   m: true  s: true    //  1 minute 40 seconds   moment.duration   s: 100   .humanize   ms: true    //  10000 milliseconds        ,rokoroku,open,0,2017-12-07 05:17:56,0000-00-00 00:00:00,,Enhancement,,,0,1
9909,moment/moment,4345,Force deprecation warnings into real errors  not console logs,Hi     We re seeing console logs like this from time to time  but we can t trap this condition to print the input that caused it. Instead of console.logging  is there a way to force moment to throw an error in this case?         Dec 07 16:00:53 stardust backend app/web.1:  Deprecation warning: value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date    which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/ /warnings/js date/ for more info.   Dec 07 16:00:53 stardust backend app/web.1:  Arguments:    Dec 07 16:00:53 stardust backend app/web.1:  [0] _isAMomentObject: true  _isUTC: true  _useUTC: true  _l: undefined  _i: 3caf6199 9d10 4023 a032 1fc8dcd368d7  _f: undefined  _strict: undefined  _locale: [object Object]   Dec 07 16:00:53 stardust backend app/web.1:  Error   Dec 07 16:00:53 stardust backend app/web.1:      at Function.createFromInputFallback  /app/node_modules/moment/moment.js:324:94    Dec 07 16:00:53 stardust backend app/web.1:      at configFromString  /app/node_modules/moment/moment.js:2364:11    Dec 07 16:00:53 stardust backend app/web.1:      at configFromInput  /app/node_modules/moment/moment.js:2590:9    Dec 07 16:00:53 stardust backend app/web.1:      at prepareConfig  /app/node_modules/moment/moment.js:2573:9    Dec 07 16:00:53 stardust backend app/web.1:      at createFromConfig  /app/node_modules/moment/moment.js:2540:40    Dec 07 16:00:53 stardust backend app/web.1:      at createLocalOrUTC  /app/node_modules/moment/moment.js:2627:12    Dec 07 16:00:53 stardust backend app/web.1:      at Function.createUTC [as utc]  /app/node_modules/moment/moment.js:92:12    Dec 07 16:00:53 stardust backend app/web.1:      at big_helper  /app/util/home_grid_get_paged_reactions_v2.js:44:24    Dec 07 16:00:53 stardust backend app/web.1:      at Object.main  /app/util/home_grid_get_paged_reactions_v2.js:122:5    Dec 07 16:00:53 stardust backend app/web.1:      at router.route.post  /app/api/reactions.js:44:36    Dec 07 16:00:53 stardust backend app/web.1:      at Layer.handle  /app/node_modules/express/lib/router/layer.js:95:5    Dec 07 16:00:53 stardust backend app/web.1:      at Layer.wrapped  /app/node_modules/newrelic/lib/transaction/tracer/index.js:184:28    Dec 07 16:00:53 stardust backend app/web.1:      at Layer.wrappedLayerHandleRequest [as handle_request]  /app/node_modules/newrelic/lib/instrumentation/express.js:364:14    Dec 07 16:00:53 stardust backend app/web.1:      at next  /app/node_modules/express/lib/router/route.js:137:13    Dec 07 16:00:53 stardust backend app/web.1:      at Route.dispatch  /app/node_modules/express/lib/router/route.js:112:3    Dec 07 16:00:53 stardust backend app/web.1:      at Layer.wrappedHandle  /app/node_modules/newrelic/lib/instrumentation/express.js:597:19    Dec 07 16:00:53 stardust backend app/web.1:      at dispatch  eval at wrapHandle  /app/node_modules/newrelic/lib/instrumentation/express.js:440:19   <anonymous>:4:28    Dec 07 16:00:53 stardust backend app/web.1:      at Layer.handle  /app/node_modules/express/lib/router/layer.js:95:5    Dec 07 16:00:53 stardust backend app/web.1:      at Layer.wrapped  /app/node_modules/newrelic/lib/transaction/tracer/index.js:184:28    Dec 07 16:00:53 stardust backend app/web.1:      at Layer.wrappedLayerHandleRequest [as handle_request]  /app/node_modules/newrelic/lib/instrumentation/express.js:364:14    Dec 07 16:00:53 stardust backend app/web.1:      at /app/node_modules/express/lib/router/index.js:281:22   Dec 07 16:00:53 stardust backend app/web.1:      at Function.process_params  /app/node_modules/express/lib/router/index.js:335:12       ,GeoffreyPlitt,open,0,2017-12-08 00:17:58,0000-00-00 00:00:00,,,,0,1
9908,moment/moment,4346,why moment  .get  month   are zero indexed?,  Description of the Issue and Steps to Reproduce:    I have one question  Why the moment  .get  month   is zero indexed. Basically I post this question on stack overflow here :   https://stackoverflow.com/questions/47707420/why moment getmonth are zero indexed  But it seems like the creators have decided that way  so I wanna know why ?   The moment  .get  date   is not zero indexed but month is why ?   Please include the values of all variables used.       Environment:    Windows   Examples: Chrome 49 on OSX  Internet Explorer 10 on Windows 7  Node.JS 4.4.4 on Ubuntu 16.0.4      Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.       Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version           Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,786lokesh,closed,3,2017-12-08 08:30:58,2017-12-11 00:17:53,,,,0,1
9907,moment/moment,4347,Closure compiler warnings,Recent version of google closure compiler issues warnings:         ERROR: /home/davido/projects/gerrit2/polygerrit ui/app/BUILD:9:1: Compiling 822 JavaScript files to polygerrit ui/app/polygerrit_ui_closure_bin.js failed  Exit 1   bazel out/k8 fastbuild/bin/polygerrit ui/app/gr app.js:24671: ERROR   Parse error. Unnecessary escape:   .  is equivalent to just  .                   this._fullWeekdaysParse[i] = new RegExp  ^    this.weekdays mom     .replace  .     .?           i  ;                                                                                                       ^    ProTip:  JSC_UNNECESSARY_ESCAPE  or  unnecessaryEscape  can be added to the  suppress  attribute of:    //polygerrit ui/app:polygerrit_ui_closure_lib         To reproduce  clone [gerrit code review] https://gerrit.googlesource.com/gerrit   apply [this series] https://gerrit review.googlesource.com/ /c/gerrit/ /147234/  and run:             bazel build :polygerrit     ,davido,open,1,2017-12-13 22:08:05,0000-00-00 00:00:00,,Up-For-Grabs,,,0,1
9906,moment/moment,4348,method add, moment  2017 12 10  .add 9  days        the result  is wrong,lixinchuang,closed,5,2017-12-14 03:23:42,2017-12-14 08:11:51,,,,0,1
9905,moment/moment,4349,Australian locale  en au  has wrong first day of week,Sunday is considered the first day of the week in Australia and as specified in the latest Unicode CLDR  Common Locale Data Repository  32.0. Currently moment has this as Monday.    See       http://unicode.org/repos/cldr/trunk/common/supplemental/supplementalData.xml            <firstDay day= mon  territories=  001 AD AI AL AM AN AT AX AZ BA BE BG BM BN BY CH CL CM CR CY CZ DE DK EC EE ES FI FJ FO FR GB GE GF GP GR HR HU IS IT KG KZ LB LI LK LT LU LV MC MD ME MK MN MQ MY NL NO NZ PL PT RE RO RS RU SE SI SK SM TJ TM TR UA UY UZ VA VN XK />    <firstDay day= fri  territories= BD MV />    <firstDay day= sat  territories= AE AF BH DJ DZ EG IQ IR JO KW LY MA OM QA SD SY />    <firstDay day= sun  territories=  AG AR AS AU BR BS BT BW BZ CA CN CO DM DO ET GT GU HK HN ID IE IL IN JM JP KE KH KR LA MH MM MO MT MX MZ NI NP PA PE PH PK PR PY SA SG SV TH TN TT TW UM US VE VI WS YE ZA ZW />    <firstDay day= sun  territories= GB  alt= variant  references= Shorter Oxford Dictionary  5th edition  2002  />           https://github.com/unicode cldr/cldr core/blob/32.0.0/supplemental/weekData.json L73    I have not checked whether other locales first day of week is inconsistent with CLDR.      Steps to Reproduce:         import   as moment from  moment ;  import  moment/locale/en au ;  moment.locale  en au  ;  console.log moment.localeData  .firstDayOfWeek   ;         Expected Behaviour: Outputs  0   Actual Behaviour: Outputs  1   ,tmoschou,open,6,2017-12-14 03:39:39,0000-00-00 00:00:00,,Discussion,Language,,,0,1
9904,moment/moment,4350,[bugfix] Fix warnings flagged by closure compiler,Closes  4347.,davido,open,4,2017-12-14 06:49:32,0000-00-00 00:00:00,,Needs tests,,,1,1
9903,moment/moment,4351,[bugfix] define amd module to moment ,if define.amd is available then currently the moment library is defined as an anonymous factory.  moment needs to be named if it should be used in other modules.,b-dur,open,3,2017-12-14 15:17:57,0000-00-00 00:00:00,,Discussion,Help Wanted,,,1,1
9902,moment/moment,4353,Wrong codes for weekdaysMin and/or weekdaysShort,Why these all three are same ?  weekdays  weekdaysShort and weekdaysMin ??    https://github.com/moment/moment/blob/fea48bb69eda8c0459915d6aa66a910a4d43a55b/locale  /km.js L16    https://github.com/moment/moment/blob/fea48bb69eda8c0459915d6aa66a910a4d43a55b/locale/km.js L17    https://github.com/moment/moment/blob/fea48bb69eda8c0459915d6aa66a910a4d43a55b/locale/km.js L18,sja-odoo,closed,11,2017-12-15 05:46:21,2018-03-04 07:28:36,,,,0,1
9901,moment/moment,4354,Not right when call calendar occasionally,moment 1513069478736 .calendar      //  Last Tuesday at 5:04 PM  But   new Date 1513069478736    // Tue Dec 12 2017 17:04:38 GMT 0800  CST     Should not be     Last Tuesday     should be    Tuesday       moment version is 2.19.3     and I am in China,huiop368,closed,3,2017-12-15 08:23:08,2017-12-18 17:39:05,,,,0,1
9900,moment/moment,4355,Moment is trying to make sense of string that doesn t match format,  Description of the Issue and Steps to Reproduce:    I have provided invalid date string that doesn t match format  yet moment parses it to a date that is not desired.      moment timezone    _Version 0.5.13_         const moment = require  moment timezone  ;    let format1 =  YYYY MM DD   let format2 =  DD MM YYYY   let date1 =  01 01 2017   let date2 =  2017 01 01   moment date1  format1  // moment  2001 01 20T00:00:00.000    moment date1  format2  // moment  2017 01 01T00:00:00.000    moment date2  format1  // moment  2017 01 01T00:00:00.000    moment date2  format2  // moment  2001 01 20T00:00:00.000             Environment:    _Node.js: v8.9_    Linux   Windows Environment   easily replicable in all environments       Other information that may be helpful:      Tried on UTC timezone also     The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc   ,muhammadfaizan,closed,2,2017-12-15 09:11:31,2017-12-16 02:51:04,,,,0,1
9899,moment/moment,4356, YY  formatted dates wrap around to 1900 s,  Description of the Issue and Steps to Reproduce:    When accepting a date formatted as MM YY or MM/YY  is After/isBefore will return incorrect values for years ending in 69 and above. 01/68 is 2068  but 01/69 is 1969.    1. Create a script that accepts as user input a valid date in MM YY or MM/YY.  2. Compare the inputted value with the current date/time using IsBefore/IsAfter/FromNow    3. Return the results to the console.     Please include the values of all variables used.   Current date.  values 01/68 to 01/99      Environment:    Chrome: Version 63.0.3239.84  Official Build   64 bit   OS: Windows 10 64bit  Using validatejs library.         js          txtCreditCardExpiry:       presence:        message:  ^Cannot be blank             datetime: function value  attributes  attributeName  options  constraints         if  value          if  moment value   MM YY   true .isValid      moment value   MM/YY   true .isValid                    console.log moment value   MM YY  .utc  .toString      : is     moment value   MM YY  .utc  .fromNow   ;        if  moment moment     MM YY  .utc  .isAfter moment value   MM YY  .utc                      console.log moment  .utc  .toString        is after     moment value   MM YY  .utc  .toString   ;         return            expiryOnly: true           message:  ^Is expired                            else           console.log moment  .utc  .toString        is before     moment value   MM YY  .utc  .toString   ;         return null;                                        else                 return           dateOnly: true          expiryOnly: true          message:  ^Not a valid date                                               ,BBlayne,closed,2,2017-12-15 16:59:50,2017-12-18 19:27:54,,,,0,1
9898,moment/moment,4357,[misc] Add optional parameter keepOffset to toISOString,Update the typescript definition file to include the optional parameter keepOffset which was introduced in 2.20.0  @ashsearle @marwahaha ,blahDL,closed,0,2017-12-17 23:44:20,2017-12-19 04:23:15,,Pending Next Release,,,1,1
9897,moment/moment,4358,Is there a way to set the locale for parsing globally  separate from the output locale?,  Description of the Issue and Steps to Reproduce:      In my scenario  all of the dates I want to parse are in English  even if I want to format a date in another language. As far as I can tell  the only option is to set moment.locale  which sets the locale for everything at once.    ,jakelauer,open,0,2017-12-19 00:07:35,0000-00-00 00:00:00,,,,0,1
9896,moment/moment,4359,[locale] Fix Arabic locale for months  again ,Fixes  4270     ,marwahaha,closed,0,2017-12-19 03:39:59,2017-12-19 04:25:40,,,,1,1
9895,moment/moment,4360,[bugfix] Correct min/max TypeScript signatures, min  and  max  only work with moment instances  not Dates  strings  numbers etc.     Fixes  4316 ,ashsearle,closed,1,2017-12-19 08:56:51,2018-03-02 19:00:37,,Pending Next Release,,,1,1
9894,moment/moment,4361,[bugfix] remove  ordinal  for  Turkish  locale as they use  cardin ,Turkish don t use ordinal days but rather cardinals    https://github.com/moment/moment/issues/4122 issuecomment 353021460,alan-agius4,closed,4,2017-12-20 10:29:12,2018-03-02 19:01:05,,Pending Next Release,,,1,1
9893,moment/moment,4362,[new locale]Uyghur language and test for moment,Hey guys  here is the locale and test file for uyghur language.    Thanks.,boyaq,closed,1,2017-12-21 10:07:08,2017-12-21 10:17:05,,,,1,1
9892,moment/moment,4363,[new locale] Added locale ug cn,Hey guys  here is the locale and test file for uyghur language.    Thanks.,boyaq,closed,4,2017-12-21 10:41:32,2017-12-21 16:45:49,,,,1,1
9891,moment/moment,4364,[new locale] Added locale ug cn,Hey  here is the locale and test file for uyghur language.    Thanks.,boyaq,closed,3,2017-12-21 16:55:03,2017-12-26 04:17:54,,Pending Next Release,,,1,1
9890,moment/moment,4365,[new locale] kab: Create kab.js,Create kabyle moment js,belkacem77,open,1,2017-12-22 08:56:36,0000-00-00 00:00:00,,,,1,1
9889,moment/moment,4366,Add kab js test,Add kabyle js file,belkacem77,closed,1,2017-12-22 10:01:17,2017-12-22 19:33:27,,,,1,1
9888,moment/moment,4367,[bugfix] Fix  4127,I have fixed the issue that doesn t show the right result as described in  4127 issue.  I have followed the suggestion of @nekitk  and changed the <code>to</code> method. I also added some unit test,marcosvega91,open,4,2017-12-22 11:10:49,0000-00-00 00:00:00,,,,1,1
9887,moment/moment,4368,[locale] Update bo locale,The monthsShort and weekdaysMin of bo locale is aligned with Unicode CLDR v32  see http://www.unicode.org/repos/cldr/tags/release 32 0 1/common/main/bo.xml.    cc @vajradog,JLHwung,open,4,2017-12-22 14:51:20,0000-00-00 00:00:00,,locale approval needed,,,1,1
9886,moment/moment,4369,rename  bo  to  bo IN  and align  bo  with CLDR,According to Unicode CLDR  [here] http://www.unicode.org/repos/cldr/tags/release 32 0 1/common/main/bo.xml    the  bo  will have dateFormat as     xml  <availableFormats>  <dateFormatItem id= GyMMM >G y LLLL</dateFormatItem>  <dateFormatItem id= MMMd >MMM    d</dateFormatItem>  <dateFormatItem id= MMMEd >MMM    d  E</dateFormatItem>  <dateFormatItem id= MMMMd >MMMM       d</dateFormatItem>  <dateFormatItem id= yMMM >y LLL</dateFormatItem>  <dateFormatItem id= yMMMd >y      MMM    d</dateFormatItem>  <dateFormatItem id= yMMMMd >        y MMMM       d</dateFormatItem>  </availableFormats>       which is  bo CN  actually from the YMD dateFormat order. The current  longDateFormat  of  bo         js  longDateFormat :            LT :  A h:mm            LTS :  A h:mm:ss            L :  DD/MM/YYYY            LL :  D MMMM YYYY            LLL :  D MMMM YYYY  A h:mm            LLLL :  dddd  D MMMM YYYY  A h:mm               corresponds to  bo IN  after I review the DMY date format on [CLDR hi] http://www.unicode.org/repos/cldr/tags/release 32 0 1/common/main/hi.xml .    I suggest we rename  bo  locale to  bo IN  and align  bo  date accordingly.    This will break locale name compatibility and we should document that the user of  bo  locale should choose between  bo  and  bo IN .     cc @vajradog ,JLHwung,open,0,2017-12-22 14:56:38,0000-00-00 00:00:00,,,,0,1
9885,moment/moment,4370,First day of year is not correct according to locale.week.doy setting,Hi   I have set my locale of the moment to be     javascript    week:        dow: 1  // Monday is the first day of the week.      doy: 1 // The week that contains Jan 1st is the first week of the year.            So according to this setting  the Jan 1st should always be the 1st week of the year.  However it does not behave as expected.  The following code checks the date s  Jan 1st  2017  week.     javascript   console.log  dateInfo:   date     console.log  weekOfYear1:    date.week       console.log   weekOfYear2:    localeData.week date          And result is week parameter is in the newline below dateInfo :     javascript  dateInfo: Moment  _isAMomentObject: true  _isUTC: false  _pf:      _locale: Locale  _d: Sun Jan 01 2017 11:48:28 GMT 0500  Eastern Standard Time     _d: Sun Jan 01 2017 11:48:28 GMT 0500  Eastern Standard Time   constructor:   _isAMomentObject: true_isUTC: false_isValid: true_locale: Locale_abbr:  my US _backToToday:  Back to today _calendar:  sameDay:  [Today at] LT   nextDay:  [Tomorrow at] LT   nextWeek:  dddd [at] LT   lastDay:  [Yesterday at] LT   lastWeek:  [Last] dddd [at] LT     _clear:  Clear _config:  calendar:      longDateFormat:      invalidDate:  Invalid date   ordinal:   d   dayOfMonthOrdinalParse: / d 1 2 /    _dateFormat:  M/D/YYYY _dateSelect:  Select date _dateTimeFormat:  M/D/YYYY HH:mm:ss _dayFormat:  D _dayOfMonthOrdinalParse: / d 1 2 /_dayOfMonthOrdinalParseLenient: / d 1 2   d 1 2 /_decadeSelect:  Choose a decade _invalidDate:  Invalid date _longDateFormat:  LTS:  h:mm:ss A   LT:  h:mm A   L:  MM/DD/YYYY   LL:  MMMM D  YYYY   LLL:  MMMM D  YYYY h:mm A     _meridiemParse: /[ap] .?m? .?/i_month:  Month _monthBeforeYear: true_monthSelect:  Choose a month _months:  12  [ January    February    March    April    May    June    July    August    September    October    November    December ]_monthsShort:  12  [ Jan    Feb    Mar    Apr    May    Jun    Jul    Aug    Sep    Oct    Nov    Dec ]_nextCentury:  Next century _nextDecade:  Next decade _nextMonth:  Next month  PageDown  _nextYear:  Next year  Control   right  _now:  Now _ok:  Ok _ordinal:   d _previousCentury:  Last century _previousDecade:  Last decade _previousMonth:  Previous month  PageUp  _previousYear:  Last year  Control   left  _relativeTime:  future:  in  s   past:   s ago   s:  a few seconds   ss:   d seconds   m:  a minute     _timeSelect:  Select time _today:  Today   _week:  dow: 1  doy: 1   _weekdays:  7  [ Sunday    Monday    Tuesday    Wednesday    Thursday    Friday    Saturday ]_weekdaysMin:  7  [ Su    Mo    Tu    We    Th    Fr    Sa ]_weekdaysShort:  7  [ Sun    Mon    Tue    Wed    Thu    Fri    Sat ]_year:  Year _yearFormat:  YYYY _yearSelect:  Choose a year __proto__: Object_pf:  empty: false  unusedTokens: Array 0   unusedInput: Array 0   overflow:  2  charsLeftOver: 0    __proto__: Object  DateTBody.jsx:178 weekOfYear1:  52  DateTBody.jsx:179 weekOfYear2:  52       Am I doing something wrong or this is a bug?,bathpp,open,4,2017-12-22 17:03:43,0000-00-00 00:00:00,,,,0,1
9884,moment/moment,4371,[misc] fix deprecated rollup options,The test fails due to we have used deprecated rollup options for a long time and recently rollup 0.53.0 will [throw on unknown options] https://github.com/rollup/rollup/commit/afd30df8a368cec475b9c0265ff1b8812c07891f . Since we always use the latest rollup  the error is thrown as is.    This PR fixes the issue according to the deprecated warning on the older rollup options.    fixes https://github.com/moment/moment/issues/4373,JLHwung,closed,0,2017-12-22 18:07:20,2017-12-28 22:33:52,,Help Wanted,Pending Next Release,,,1,1
9883,moment/moment,4372,[new locale] ug cn: Added locale ug cn,Hey guys  sorry for the back and forth. I think this will be ready for merge.    Thanks for @JLHwung for mentioning unicode cldr data. It s now compatible with unicode cldr.,boyaq,closed,3,2017-12-26 04:17:12,2018-03-02 19:01:18,,Pending Next Release,,,1,1
9882,moment/moment,4373,rollup options ,  Description of the Issue and Steps to Reproduce:    Travis build failure because of a deprecated rollup option.    1. checkout develop branch    2. run  npm run test .     error message:      bash  Running  transpile raw  task  The following options have been renamed   please update your config: entry  > input  >> error transpiling Error: Unknown option found: moduleName. Allowed keys: input  legacy  treeshake  acorn  context  moduleContext  plugins  onwarn  watch  cache  preferConst  experimentalDynamicImport  entry  external  extend  amd  banner  footer  intro  format  outro  sourcemap  sourcemapFile  name  globals  interop  legacy  freeze  indent  strict  noConflict  paths  exports  file  pureExternalModules  >>     at Object.generate  /home/travis/build/moment/moment/node_modules/rollup/dist/rollup.js:19112:44   >>     at /home/travis/build/moment/moment/tasks/transpile.js:74:27  >>     at <anonymous>  >>     at process._tickCallback  internal/process/next_tick.js:160:7   Warning: Unknown option found: moduleName. Allowed keys: input  legacy  treeshake  acorn  context  moduleContext  plugins  onwarn  watch  cache  preferConst  experimentalDynamicImport  entry  external  extend  amd  banner  footer  intro  format  outro  sourcemap  sourcemapFile  name  globals  interop  legacy  freeze  indent  strict  noConflict  paths  exports  file  pureExternalModules  Use   force to continue.        Please include the values of all variables used.       Environment:    node 4  5  6  7  8  https://travis ci.org/moment/moment/jobs/321671316  https://travis ci.org/moment/moment/jobs/320362708      Related file:    moment used moduleName in tasks/transpile.js    https://github.com/moment/moment/blob/03073778ec18ee38e179208cd1af899e8d1848dc/tasks/transpile.js L56       javascript  var rollupOpts =                entry: opts.entry               plugins: [                  // babel                  ]             bundleOpts =                format:  umd                moduleName: opts.umdName  = null ? opts.umdName :  not_used            ;            if  opts.skipMoment                 // And this is what people call progress?              rollupOpts.external = [                   ./moment                     ../moment                     ../../moment                    path.resolve  src/moment                     path.resolve  build/tmp/moment                ];              bundleOpts.globals =   ;              bundleOpts.globals[path.resolve  src/moment  ] =  moment ;              bundleOpts.globals[path.resolve  build/tmp/moment  ] =  moment ;                       return rollup rollupOpts .then function  bundle                 return bundle.generate bundleOpts ;            .then function  result                 return result.code;    ;     ,boyaq,closed,0,2017-12-26 05:25:08,2017-12-28 22:33:52,,,,0,1
9881,moment/moment,4374,Wrong result related by  weeks  in 2017 12 31.,     var t = moment  2017 12 31    YYYY MM DD  ;    t.format  YYYYw  ;  //  20171   t.format  YYYYww  ; //  201701   t.format  YYYYwo  ; //  20171st          I think it is wrong..,kimtis,closed,2,2017-12-26 06:04:43,2017-12-26 06:16:23,,,,0,1
9880,moment/moment,4375,How to add my  Kurdish  language to moment?,Hi   I have translated momentjs to Kurdish.  How can i send it to you?  Thanks,kardoqadir,open,1,2017-12-27 14:13:56,0000-00-00 00:00:00,,Language,,,0,1
9879,moment/moment,4376,moment is not a function,I use moment in my node project  in the beginning  nothing is wrong  but  after a day  I get an error  moment is not a function          const moment = require  moment  ;  app.use function  req  res  next         app.locals.moment = moment    ;          span= moment article.date .format  L     ,WUSO01,closed,0,2017-12-28 04:00:40,2017-12-29 03:42:27,,,,0,1
9878,moment/moment,4377,[locale] es us: Update month parsing to be dot lenient  fixes  4162,This is the same PR as https://github.com/moment/moment/pull/3894/files  except for the  es us  locale.    @bustta   is this correct?,marwahaha,open,0,2017-12-29 06:36:55,0000-00-00 00:00:00,,locale approval needed,,,1,1
9877,moment/moment,4378,[misc] Add .ts defn for parseTwoDigitYear,fixes  4023   ,marwahaha,closed,0,2017-12-29 07:26:55,2018-03-05 08:13:24,,,,1,1
9876,moment/moment,4379,[locale] ko: Add trailing dot to L and l,fixes https://github.com/moment/moment/issues/4070,marwahaha,closed,4,2017-12-29 07:27:26,2018-03-02 19:02:14,,Pending Next Release,,,1,1
9875,moment/moment,4380,Invalid date sometimes when parsing with a format,Here is an example date  I ve logged in our app as  invalid     Sat  23 Dec 2017 18:03:35 GMT   this is then parsed in  moment  using the following fragment of code.       js  let lastModified = moment.utc date   ddd  D MMM YYYY HH:mm:ss [GMT]          .subtract 10   minutes          .format  YYYY MM DDTHH:mm:ss[Z]  ;         Then  lastModified  is  Invalid date   however this only seems to result in an invalid date some times  and not others.    I m starting to think I m overlooking something with the format I ve specified for parsing  but I am not entirely sure.,tombell,closed,1,2017-12-29 12:16:51,2018-01-04 07:27:21,,,,0,1
9874,moment/moment,4381,3 tests failed. create:string with format   years  2732.4  format:Y token  2896.6  week day:weekday first day of week Sunday  dow 0   3194.5  ,    Client info       Date String   : Fri Dec 29 2017 14:45:52 GMT 0000  GMT   Locale String : 29/12/2017  14:45:52  Offset        : 0  User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10.10; rv:42.0  Gecko/20100101 Firefox/42.0  Moment Version: 2.20.1         ====        create:string with format   years  2732.4      70 > 1970       javascript  // Expected 1970  // Actual   1969   1969  ===  1970          ====        format:Y token  2896.6      format 9999 with Y       javascript  // Expected 9999  // Actual   9998   9998  ===  9999          ====        week day:weekday first day of week Sunday  dow 0   3194.5      Jan  1 1970 is Thursday     4th day       javascript  // Expected 4  // Actual   3  3 === 4     ,goofballLogic,open,3,2017-12-29 14:43:36,0000-00-00 00:00:00,,Unit Test Failed,,,0,1
9873,moment/moment,4382,from  /to   wrong days calculation around a month  4127,,nishantgupta204,closed,1,2017-12-31 07:51:02,2017-12-31 08:09:41,,,,1,1
9872,moment/moment,4383,[bugfix] from  /to   wrong days calculation around a month  4127,,nishantgupta204,closed,1,2017-12-31 08:10:57,2017-12-31 09:23:45,,,,1,1
9871,moment/moment,4384,[bugfix] from  /to   wrong days calculation around a month  4127,Issue for the bug was that were calculating the time difference by finding the difference months and millisecond. While calculating the difference of months it was ignoring the decimal value which important when we are converting the months to days.  For example   for passing  1  value to monthstodays function will give 30. But passing  1.XX  value to monthstodays function will give 31.    Fix   I have removed the calculation of month difference. Just calculation the overall millisecond difference and calculating the duration based on that. ,nishantgupta204,closed,0,2017-12-31 09:28:48,2018-01-03 04:26:09,,,,1,1
9870,moment/moment,4385,Issue while running tests using grunt,After fixing a bug I ran the grunt command to build the project. Below is the issue I am getting while running the command.    >> build/umd/min/moment with locales.js    Running  concat:tests   concat  task  Running  qtest  task  Deprecation warning: testing deprecation  Arguments:  Error      at C: moment build umd test moment deprecate.js:154:94      at Object.<anonymous>  C: moment build umd test moment deprecate.js:173:5       at Test.run  C: moment node_modules qunitjs qunit qunit.js:136:18       at C: moment node_modules qunitjs qunit qunit.js:279:10      at process  C: moment node_modules qunitjs qunit qunit.js:1277:24       at Timeout._onTimeout  C: moment node_modules qunitjs qunit qunit.js:383:5       at ontimeout  timers.js:475:11       at tryOnTimeout  timers.js:310:5       at Timer.listOnTimeout  timers.js:270:5   woot Error: Process blocked for too long      at Timeout.<anonymous>  C: moment node_modules qunit lib testrunner.js:83:30       at ontimeout  timers.js:475:11       at tryOnTimeout  timers.js:310:5       at Timer.listOnTimeout  timers.js:270:5    files: 0     assertions: 0     failed: 0     passed: 0     runtime: 0     tests: 114     coverage:       files: 0        statements:   covered: 0  total: 0          branches:   covered: 0  total: 0          functions:   covered: 0  total: 0          lines:   covered: 0  total: 0          Please let me know what the issue is. ,nishantgupta204,open,7,2017-12-31 12:32:50,0000-00-00 00:00:00,,Troubleshooting,Up-For-Grabs,,,0,1
9869,moment/moment,4386,Uppercase function  undefind  for locale.,Hello   I m reviewing tutorial  https://momentjs.com/docs/ /i18n/locale data/      I got an issue for the following:    localeData = moment.localeData  ;  localeData.longDateFormat  ;    Uncaught TypeError:   Cannot read property  toUpperCase  of undefined      Also recently found.    localeData.relativeTime  ;    Uncaught TypeError:   Cannot read property  replace  of undefined    localeData.week  ;    Uncaught TypeError:   Cannot read property  year  of undefined    Please resolve this issue.  Thank you.,BMK91,open,1,2018-01-02 05:16:30,0000-00-00 00:00:00,,Bug,,,0,1
9868,moment/moment,4387,Time Format for Korean language should be 24H,  Description of the Issue and Steps to Reproduce:      Our Localization team has reported that Korean time is more formally used in writing as 24 hour format  hh:mm  but moment uses the more informal 12 hour time  A h:mm .      moment  .locale  ko  .format  LT   ,xdumaine,open,5,2018-01-02 19:32:14,0000-00-00 00:00:00,,Discussion,,,0,1
9867,moment/moment,4388,[bugfix] from  /to   wrong days calculation around a month  4127,Issue for the bug was that were calculating the time difference by finding the difference months and millisecond. While calculating the difference of months it was ignoring the decimal value which important when we are converting the months to days.  For example   for passing  1  value to monthstodays function will give 30. But passing  1.XX  value to monthstodays function will give 31.    Fix   I have removed the calculation of month difference. Just calculation the overall millisecond difference and calculating the duration based on that.,nishantgupta204,open,0,2018-01-03 05:49:54,0000-00-00 00:00:00,,,,1,1
9866,moment/moment,4389,isValid   inconsistent between browsers,I found that  isValid    is inconsistent between browsers when the string is formatted in a certain way.    Here is what I see in Firefox  57.0.3 :     [Firefox] https://image.ibb.co/khYChG/Capture.png     Here is what I see in Chrome  63.0.3239.108 :     [Chrome] https://image.ibb.co/d25Q2G/Capture2.png     Other formats I ve tried work  but  MM DD YYYY  is exhibiting this behavior.    I m using moment 2.19.4.,im1dermike,closed,2,2018-01-03 21:02:16,2018-01-04 13:36:52,,,,0,1
9865,moment/moment,4390,moment  .toISOString true  is not keep the local time,When I execute moment  .toISOString   the result is  2018 01 04T12:54:33.621Z  and when I execute moment  .toISOString true  the result is  2018 01 04T12:54:35.916 02:00   Shouldn t be  2018 01 04T10:54:35.916 02:00  ?      Environment:    Chrome 63.0.3239.108 on Windows 10 64 bit    The time and date at which the code was run  2018 01 04 10:54:35  America/S o Paulo     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  Thu Jan 04 2018 11:02:16 GMT 0200  Hor rio brasileiro de ver o   04/01/2018 11:02:16  120  Mozilla/5.0  Windows NT 10.0; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/63.0.3239.108 Safari/537.36  2.20.1             ,lira92,closed,1,2018-01-04 13:03:14,2018-03-02 19:03:06,,,,0,1
9864,moment/moment,4391,[bugfix] Fix  4390: use offset properly in toISOString,Bug was introduced in PR  4341.    I thought unit tests using  utc    and  utcOffset ...   were good enough  but the behaviour of moments in utc mode isn t the same as non utc moments with local timezone offsets.    I m not sure how to create unit tests for this  but PR continues to keep unit tests passing  and I ve checked behaviour by using this bash script:       bash    /bin/bash    moment=./build/umd/moment.js    for tz in Asia/Kathmandu America/Sao_Paulo Europe/London; do  echo  tz;  TZ= tz node  e    cat << EOF  var moment = require    moment   ;  var m = moment  ;  console.log m.toISOString   ;  console.log m.toISOString true  ;  EOF      done         Output:       Asia/Kathmandu  2018 01 04T19:06:41.943Z  2018 01 05T00:51:41.943 05:45  America/Sao_Paulo  2018 01 04T19:06:42.071Z  2018 01 04T17:06:42.071 02:00  Europe/London  2018 01 04T19:06:42.202Z  2018 01 04T19:06:42.202 00:00     ,ashsearle,closed,1,2018-01-04 19:08:50,2018-03-02 19:02:59,,Pending Next Release,,,1,1
9863,moment/moment,4392,[locale] Cambodian Locale: Translate AM/PM  change weekdaysShort and weekdaysMin,> Change weekdaysShort and weekdaysMin as discussed in  4353   > Translate AM/PM,kruyvanna,closed,1,2018-01-08 05:30:13,2018-03-04 07:28:29,,,,1,1
9862,moment/moment,4393,2 tests failed. diff:diff across DST  2794.17  diff:diff across DST  2794.19  ,    Client info       Date String   : Mon Jan 08 2018 17:23:05 GMT 0600  CST   Locale String : 1/8/2018  5:23:05 PM  Offset        : 360  User Agent    : Mozilla/5.0  Macintosh; Intel Mac OS X 10_13_2  AppleWebKit/537.36  KHTML  like Gecko  Chrome/63.0.3239.132 Safari/537.36  Moment Version: 2.20.1         ====        diff:diff across DST  2794.17      month diff across DST  lower bound       javascript  // Expected true  // Actual   false  false === true         ====        diff:diff across DST  2794.19      year diff across DST  lower bound       javascript  // Expected true  // Actual   false  false === true     ,mokingguy,open,0,2018-01-08 23:25:22,0000-00-00 00:00:00,,Unit Test Failed,,,0,1
9861,moment/moment,4394,Wrong formatting for week,  Description of the Issue and Steps to Reproduce:       format  returns wrong data when using Week format    correct:       js  moment  20180101010000    YYYYMMWWDDHHmm  .format  YYYY MM DD:HH   //  2018 01 01:00          wrong:     js  moment  2018011010000    YYYYMMWDDHHmm  .format  YYYY MM DD:HH   //  2018 01 10:00          Environment:    Chrome 49 on OSX       js  Tue Jan 09 2018 11:48:18 GMT 0200  EET   1/9/2018  11:48:18 AM   120  Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_6  AppleWebKit/537.36  KHTML  like Gecko  Chrome/63.0.3239.84 Safari/537.36  2.20.1           ,vgalkin,open,1,2018-01-09 09:47:33,0000-00-00 00:00:00,,Up-For-Grabs,,,0,1
9860,moment/moment,4395,[locale] Correct Hour Plural in Konkani and add a test,Correct Hour Plural in Konkani and add a test,WikiDiscoverer,closed,0,2018-01-09 13:49:37,2018-03-04 07:20:06,,,,1,1
9859,moment/moment,4396,maxTime is not applying in moment,I am using  moment  in my angular project. I am setting time using     this.when  .time = moment  .add 1   days  .set  hour:8 minute:0 second:0  ;   And restricting it using minTime and maxTime as below     this.timeOptions.minTime = this.timeOptions.maxTime = this.when  .time;   Here minTime is applying. But  maxTime is not applying.    See the below picture:     [image] https://user images.githubusercontent.com/2201186/34723824 e40293bc f571 11e7 8a95 dbc060da8029.png     But  somewhere else it is working fine. Help me solve this issue.    Thank you...,kamlekar,closed,0,2018-01-09 13:49:53,2018-01-10 05:49:28,,,,0,1
9858,moment/moment,4397,moment has no default member,  Description of the Issue and Steps to Reproduce:    Trying to implement instance locale in typescript project  https://momentjs.com/docs/ /i18n/instance locale/  but when I  import moment from  moment   I get error:   moment has no default export     purpose:  I need custom forms  shorten  like  sec  instead  seconds   of humanized strings in some parts of application  so I would like to use two locales in one view.       Environment:    typescript project      Other information that may be helpful:    TypeScript  Angular4    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version             Tue Jan 09 2018 15:46:46 GMT 0100  CET   VM12667:2 09/01/2018  15:46:46  VM12667:3  60  VM12667:4 Mozilla/5.0  Macintosh; Intel Mac OS X 10_13_1  AppleWebKit/537.36  KHTML  like Gecko  Chrome/63.0.3239.84 Safari/537.36  VM12667:5 Uncaught ReferenceError: moment is not defined      at <anonymous>:5:13            import   as moment from  moment ;  console.log  version   moment.version ;            version 2.20.1        I would like to prevent the  import   as moment from  moment ;  solution since it blocks three shaking in bundling    Many thanks  : ,luckylooke,closed,1,2018-01-09 14:51:00,2018-01-17 07:22:05,,,,0,1
9857,moment/moment,4398,Date is not correct using week no and year,moment  .day  Sunday  .year 2017 .week 47 .format  YYYY MM DD  ;    in the above iam asking sunday of the week but output 25/11/2017 which is saturday    but it is working correct for current year,sunithajanapareddy,closed,2,2018-01-12 05:02:12,2018-03-04 07:06:58,,Troubleshooting,,,0,1
9856,moment/moment,4399,[new locale] Occitan translation,What test should I do so my file is accepted?,Quenty31,open,4,2018-01-13 16:44:04,0000-00-00 00:00:00,,Needs Revision,Needs tests,,,1,1
9855,moment/moment,4400,Moment Parses Dates incorrectly,I have a date in the format  4:40PM / Sat 20 Jan . This date does not have a year associated  I know that it is either last year  this year or next year. So I append  2017    2018 and  2019  to the date and use  var date = moment  4:40PM / Sat 20 Jan    h:mm a / ddd DD MMM YYYY  ;  and then use  date.isValid    to determine whether the 20th of January fell on a Saturday in 2017  2018 or 2019  it at most happens every 6 years so it can t be more than one of these . This produces differing results in different environments  other dates like Mon 6 Feb seem to have an issue too.    The code is primarily running in a lambda function on AWS and sometimes thinks none of the years are valid and sometimes thinks the wrong year is valid. Unfortunately sometimes it works and sometimes it doesn t  even in the same environment  This makes it very difficult to reproduce or replicate. I have used google calendar on my phone to cross reference every date that is has been getting incorrect so I know that the dates I am selecting should be falling in certain years.    example code:         const moment = require  moment timezone  ;    let thisYear = 2017;  let datetime =  4:40PM / Sat 20 Jan ;  let years = [thisYear 1  thisYear  thisYear 1]; // make array of years to test date against    let date = null;  for  let year of years      let dateWithYear = datetime         year;   let testDate = moment dateWithYear   h:mm a / ddd DD MMM YYYY  ;   if  testDate.isValid         date = testDate;    console.log  Year for date     date.format       is     year ;    break;       else      console.log  Not from     year ;                expected results would be:          Not from 2017    Year for date ... is 2018          results getting sometimes are either:          Year for date ... is 2017          or          Not from 2017    Not from 2018    Not from 2019          moment version: 2.20.1  moment timezone version: 0.5.14,clethrill,closed,3,2018-01-15 01:09:31,2018-03-04 06:35:37,,,,0,1
9854,moment/moment,4401,Get Monday in a month,I want to get all monday for a specific month i am doing with the following code    const dayInMonths = [];      let filteredSelectedDay = moment monthDate         .startOf  month          .day  Month  ;    But its giving me incorrect result any thing i am doing wrong please help.,aftab1001,closed,2,2018-01-16 07:22:29,2018-03-05 18:25:07,,,,0,1
9853,moment/moment,4402,Get Days by week number in a year,I want to get Days week for example for year 2016 and WeekNumber 33  i want to get the Dates Ranges that lies in this week.How can i do this.,aftab1001,open,2,2018-01-16 07:47:22,0000-00-00 00:00:00,,Up-For-Grabs,,,0,1
9852,moment/moment,4403,Added export as namespace statement,To enable the use of the type definitions in a non module based application using moment as a global variable.     For context of this statement. Search for  UMD modules  in this page:    https://www.typescriptlang.org/docs/handbook/modules.html,airportyh,open,1,2018-01-17 14:11:06,0000-00-00 00:00:00,,,,1,1
9851,moment/moment,4404,Format method  take into account whitespaces in escaped characters,Hello      I use the moment library to display time using the format method.  I needed to let a space between the date and the hour but the white spaces that I ve set in the escaped characters are not taken into account. Specials characters like  t  are not taken into account either.    Here the syntaxt of my format:  moment  .format  DD/MM/YY [        GMT] HH:mm:ss   and the result is :    2018 01 08 GMT 08:02:17  and I would like  2018 01 08         GMT 08:02:17            replace   by whitespaces. I ve set   because the result github post trim the whitespaces.    current version of moment.js: 2.20.1    Thx,lequem,closed,2,2018-01-18 10:10:38,2018-01-26 12:40:33,,,,0,1
9850,moment/moment,4405,Overflow issue with .diff,When doing a diff in months between two dates  it doesn t account for the overflow. For example  if you add one month to January 31  you get February 28  because there is no overflow by default . However  if you then do a diff between January 31 and February 28  you get 0 months.    https://codepen.io/anon/pen/mpvbQJ?editors=0012    I think this might qualify as a bug because the behavior is inconsistent  but either way  is there a way around this? I want to count months in between 2 dates with no overflow.,enkay,open,1,2018-01-20 03:20:27,0000-00-00 00:00:00,,,,0,1
9849,moment/moment,4406,Invalid date formatting for new year holidays,Hi  everyone   I found strange issue for 31 December. I have the Date object like this:   Sun Dec 31 2017 00:00:00 GMT 0400   04      I use  format  function to get year and week number:   moment date   w YY   // Is equal to  1 17 .     I think it s wrong representation of this case. Probably is most useful to show  53 17  or  1 18 ?    Found in Chrome Version 59.0.3071.86  Official Build   64 bit  on Ubuntu 16.04,Imperat,closed,3,2018-01-22 11:17:28,2018-02-17 02:00:54,,,,0,1
9848,moment/moment,4407,Incorrect iso week number for 2018 12 31,I get the incorrect week number for the 2018 12 31 date. That s the end of the year  so it should be 52  or 53  but the result of  moment  2018 12 31  .format  WW    evaluates to 01.    Here s the example  http://jsfiddle.net/kasheftin/pasmo151/1/    Google Chrome Version 63.0.3239.132  Official Build   64 bit  Ubuntu 16.0.4  ,Kasheftin,closed,2,2018-01-22 16:35:30,2018-01-23 14:33:33,,,,0,1
9847,moment/moment,4408,Having trouble with mapping time and using moment functions.,  Description of the Issue and Steps to Reproduce:      I m trying to map an array of times and I keep getting an error that says variable.hour   is not a function.    Code       const data =  array  =>        let extractTimes = array.map  data => data.inserted_at        let timesToHours = extractTimes.map  time => time.hour          return transferHours              The array of extractTimes looks something like this:       [ 2018 01 19T16:57:29.991774    2018 01 17T17:20:16.207013    2018 01 17T17:19:48.717296    2018 01 16T14:22:13.814587    2018 01 12T20:18:55.274571    2018 01 12T16:11:17.606097 ]         I keep getting this error when I run   let timesToHours = extractTimes.map  time => time.hour       _TypeError: time.hour is not a function_          Environment:      Chrome Version 63.0.3239.132 on OSX     [image] https://user images.githubusercontent.com/30477884/35280560 9648dc8c 001e 11e8 947f 8eb77ad95fd7.png   ,sbcreates,closed,0,2018-01-23 14:20:27,2018-01-23 15:29:17,,,,0,1
9846,moment/moment,4409,Changing the year on a moment messes the utc offset,I m doing this:            moment.tz.setDefault  America/New_York  ;   const dateMoment = moment  2018 01 23T17:00:00 0700    YYYY MM DDTHH:mm:ssZZ  ;   const timeMoment = moment  2020 01 23T17:00:00 0700    YYYY MM DDTHH:mm:ssZZ  ;   const momContainingDate = timeMoment.clone  .year dateMoment.year   ;     if  timeMoment.utcOffset    == momContainingDate.utcOffset           console.log  UTC offset changed  ; // <   we always end up here        All  .clone    .year    .month    .date  and  .add  or  .subtract  mess the utc offset when we ve set a default timezone:      moment.tz.setDefault  America/New_York  ;      ,SudoPlz,closed,6,2018-01-23 16:02:44,2018-01-24 16:59:51,,,,0,1
9845,moment/moment,4410,[bugfix] Use ISO Year for weeksInISOYear instead of calendar year.,New Unit Test exemplifies issue in existing version:  weeksInISOYear  assumed that  this.year    was equal to the moment s ISO year. This is not the case when the new year starts on a Thursday and we are checking the Wednesday  e.g. December 31  2019 is in ISO year 2020 and ISO year 2020 has 53 weeks     The Thursday of the week is guaranteed to be in that day s ISO week  so this fix is rather simple.    Closes  3942.,alexthemitchell,open,0,2018-01-24 03:05:56,0000-00-00 00:00:00,,,,1,1
9844,moment/moment,4411,Can t get local .month  ,  Description of the Issue and Steps to Reproduce:      I expect  .month    to return the local zone month  or for there to be a way to get the local month number .  Instead  it always returns the UTC month.  In the following example  I would expect  a.month    or  a.local  .month    to return  0  instead of  11 .         > let a = moment  2018 01 01T00:00:00 01:00    > a.month    11  > a.local  .month    11  > a.utc  .month    11  > moment.version   2.20.1            Environment:        Electron/NodeJS on Ubuntu 17.10    and Chrome 63.0.3239.132  Official Build   64 bit  on macOS 10.12.6      Other information that may be helpful:        macOS timezone:  07:00    Ubuntu timezone:  01:00    Using TypeScript  but I can reproduce w/o it on https://momentjs.com/guides/ in the console.         console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version     VM214:1 Wed Jan 24 2018 13:48:55 GMT 0700  MST   VM214:2 1/24/2018  1:48:55 PM  VM214:3 420  VM214:4 Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_6  AppleWebKit/537.36  KHTML  like Gecko  Chrome/63.0.3239.132 Safari/537.36  VM214:5 2.20.1     ,iffy,closed,2,2018-01-24 20:52:03,2018-01-26 14:18:47,,,,0,1
9843,moment/moment,4412,Duration from format,Is there something like this in momentjs?  moment.duration  00:20:32 836    HH:mm:ss SSS  .seconds  ;  It would work like: https://momentjs.com/docs/ /parsing/string format/  I want to parse [.srt files] http://www.3playmedia.com/2017/03/08/create srt file/ ,jvitoroc,closed,1,2018-01-24 23:44:41,2018-03-04 07:34:17,,Duplicate,,,0,1
9842,moment/moment,4413,[locale] Fix Japanese locale,   Changed localized formats       LLLL : move the name of weekday      llll : move the name of weekday and use short format  like https://ja.wikipedia.org/        Changed calendar format                  or omitted                or omitted    added the logic to tell whether same week or not.         is not used ordinary  and native Japanese omits      often.        example    If today is 11th      Sun        Mon        Tue        Wed        Thu        Fri        Sat                                         1   2   3   4   5   6   7  8   9   10   __11__   12   13   14  15   16   17   18   19   20   21       1     7  are       means  last week       8     14  are       means  this week       15     21  are       means  next week .      Last Monday  is          but now  moment.js  says        .          means  Monday of last week   so that points to 2nd.      the original author: @baryon ,bgpat,closed,1,2018-01-25 08:05:36,2018-03-04 07:26:03,,,,1,1
9841,moment/moment,4414,Beginning of next day returns true for inBetween range including end of previous day.,  Description of the Issue and Steps to Reproduce:    A moment created from an ISO 8601 format string at the beginning of one day register as inBetween a date range that ends at the end of the previous day. Even with inclusion of edges  this should not be true.   Please include the values of all variables used.        > moment  2018 01 15T00:00:00.000Z  .isBetween moment.utc  2018 01 08    moment.utc  2018 01 14  .endOf  day     day    []    true         Environment:    Reproducible both on NodeJS 8.9.4 on High Sierra  on my dev machine  and Node 6.10 on the AWS Lambda runtime environment.      Other information that may be helpful:       js  > console.log   new Date   .toString     Thu Jan 25 2018 14:33:39 GMT 0600  CST   undefined  > console.log  new Date   .toLocaleString     2018 1 25 14:33:39  undefined  > console.log   new Date   .getTimezoneOffset     360  undefined  > console.log  navigator.userAgent   ReferenceError: navigator is not defined  > console.log moment.version   2.19.1  undefined     ,pettyalex,closed,2,2018-01-25 20:34:48,2018-01-25 21:34:12,,,,0,1
9840,moment/moment,4415,es US date format issues,  Description of the Issue and Steps to Reproduce:    The date format used in the  es US  locale for  LL    LLL   and  LLLL  format isn t as expected.    Even though  es US  uses MM/DD/YYYY format  as opposed to  es  which uses  DD/MM/YYYY  format  I would still expect dates in the long format to be the same in each  as [ D [de] MMMM [de] YYYY ] https://github.com/moment/moment/blob/develop/src/locale/es.js L39 .    Right now  es US  is using [ MMMM [de] D [de] YYYY ] https://github.com/moment/moment/blob/develop/src/locale/es us.js L30 .         > moment  .locale  es US  .format  LL  ;     unexpected   enero de 26 de 2018   > moment  .locale  es  .format  LL  ;        expected for es US as well as es   26 de enero de 2018          Two sources:  http://www.localeplanet.com/icu/es US/index.html  https://www.ibm.com/support/knowledgecenter/en/SSS28S_8.1.0/XFDL/i_xfdl_r_formats_es_US.html          Environment:      Chrome 63 on OS X and node v8.1.4    but this shouldn t matter.,mmarvick,open,4,2018-01-26 16:59:54,0000-00-00 00:00:00,,Discussion,locale approval needed,,,0,1
9839,moment/moment,4416,isBetween   with inclusive flags returns true for invalid date,  Description of the Issue and Steps to Reproduce:     isBetween    returns  true  when passed an invalid date with both inclusive flags set:       js  > const inval = new Date  foo    undefined  > moment inval   moment.invalid /  Invalid Date  /   > moment inval .isBetween  2010 01   2011 01    false  > moment inval .isBetween  2010 01   2011 01   null   false  > moment inval .isBetween  2010 01   2011 01   null         false  > moment inval .isBetween  2010 01   2011 01   null   []    true         Environment:    node 8.9.1 on Ubuntu 16.04 LTS      Other information that may be helpful:      If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version        output:     js  root@42796179bd1d:/work  node  v  v8.9.1  root@42796179bd1d:/work  node  > const moment = require  moment    undefined  > console.log   new Date   .toString     Fri Jan 26 2018 19:55:20 GMT 0000  UTC   undefined  > console.log  new Date   .toLocaleString     2018 1 26 19:55:20  undefined  > console.log   new Date   .getTimezoneOffset     0  undefined  > console.log  navigator.userAgent   ReferenceError: navigator is not defined      at repl:1:14      at ContextifyScript.Script.runInThisContext  vm.js:50:33       at REPLServer.defaultEval  repl.js:240:29       at bound  domain.js:301:14       at REPLServer.runBound [as eval]  domain.js:314:12       at REPLServer.onLine  repl.js:441:10       at emitOne  events.js:121:20       at REPLServer.emit  events.js:211:7       at REPLServer.Interface._onLine  readline.js:282:10       at REPLServer.Interface._line  readline.js:631:8   > console.log moment.version   2.20.1     ,mzbyszynski,open,0,2018-01-26 19:59:54,0000-00-00 00:00:00,,,,0,1
9838,moment/moment,4417,[bugfix] isBetween should return false for invalid dates,Changes to  isBetween  to fix a couple of issues from  4416 and  4114 .    Documentation states that  invalid.isBetween another  another   should return  false   but  4416 highlights a case where it doesn t.  This PR fixes  4416 and ensures  isBetween ..   return  false  no matter what unit or inclusivity flags are used:     js  // These should all return false:  invalid.isBetween another  another ;  valid.isBetween invalid  another ;  valid.isBetween another  invalid ;         The conversation in  4114 highlights some examples that are incompatible with current typescript bindings.  This PR fixes the typescript binding to match example code   explicitly allowing  null  to be passed in as the  units  value    and this now follows a faster code path to avoid cloning moments unnecessarily   i.e. fixes  4114.,ashsearle,open,0,2018-01-27 13:00:10,0000-00-00 00:00:00,,,,1,1
9837,moment/moment,4418,[bugfix] Strict RegEx added to M  d  e and E  fixes  3830,,cetinerhalil,closed,0,2018-01-29 13:29:43,2018-01-29 14:42:29,,,,1,1
9836,moment/moment,4419,Creating dodgy dates should fail  probably with an error,The REPL extract below shows the problem:       js  // date entered in reverse format  > var d = mo  2016 01 30    DD MM YYYY    undefined  > d  moment  2030 01 20T00:00:00.000    > d.isValid    true  // bonkers date format  and date entered in reverse format  > d = mo  2016 01 30    dd mm yyyy    undefined  > d  moment  2018 01 29T00:01:00.000    > d.isValid    true         Rather than the moment constructor refusing a date format that clearly doesn t matching the desired format  which I m suggesting should be the expected behaviour   it simply returns a best guess or today s date instead  This is dangerous because there s no indication that the input date was dodgy.        Environment:    node.js     js  > console.log   new Date   .toString     Mon Jan 29 2018 14:15:15 GMT 0000  GMT   undefined  > console.log  new Date   .toLocaleString     2018 1 29 14:15:15  undefined  > console.log   new Date   .getTimezoneOffset     0  undefined  > console.log  navigator.userAgent   ReferenceError: navigator is not defined      at repl:1:14      at ContextifyScript.Script.runInThisContext  vm.js:44:33       at REPLServer.defaultEval  repl.js:239:29       at bound  domain.js:301:14       at REPLServer.runBound [as eval]  domain.js:314:12       at REPLServer.onLine  repl.js:433:10       at emitOne  events.js:120:20       at REPLServer.emit  events.js:210:7       at REPLServer.Interface._onLine  readline.js:278:10       at REPLServer.Interface._line  readline.js:625:8   > console.log moment.version   2.19.2     ,RobinKnipe,closed,2,2018-01-29 14:19:26,2018-01-31 13:19:45,,,,0,1
9835,moment/moment,4420,[bugfix] Strict RegEx added to M  d  e and E  fixes  3830,,cetinerhalil,open,0,2018-01-29 14:57:13,0000-00-00 00:00:00,,,,1,1
9834,moment/moment,4421,momentWithLocales2.default.duration ... .format is not a function,I m using React Native and I m trying to change the language of my moment.js by changing import moment from  moment  to import moment from  moment/min/moment with locales .     import moment from  moment/min/moment with locales   import  moment duration format  // used by moment    However  I get an error  momentWithLocales2.default.duration ... .format is not a function  at this line:     const total = moment.duration this.props.stoveUsage.total   seconds  .format  H:mm     trim: false       before there was no error with just import moment from  moment ,VanessaChu,open,0,2018-01-30 20:32:52,0000-00-00 00:00:00,,,,0,1
9833,moment/moment,4422,How to change locale in momentJS in React Native?,This is what I have but it does not work.       import moment from  moment    import  moment/min/moment with locales    import  moment duration format  // used by moment                componentDidMount          console.log moment.locale         console.log moment.locale  zh cn          console.log moment.locale                  console log outputs: en  en  en  expected console log output: en  zh cn  zh cn    When I tried changing import moment from  moment  to import moment from  moment/min/moment with locales  but it throws an error on this line:     const total = moment.duration this.props.stoveUsage.total   seconds  .format  H:mm     trim: false          error: momentWithLocales2.default.duration ... .format is not a function        ,VanessaChu,open,6,2018-01-30 22:33:34,0000-00-00 00:00:00,,Troubleshooting,Up-For-Grabs,,,0,1
9832,moment/moment,4423,[new locale] Added Mongolian locale mn,Mongolian locale contributing request.,javkhaanj7,closed,5,2018-01-31 12:26:56,2018-03-04 06:29:08,,,,1,1
9831,moment/moment,4424,Why not parse both 1/30/1 and 30/1/1,I noticed if i do     var date = moment search      then i can t parse both 1/30/1 and 30/1/1 I assume its using my language settings to determine this     But if i use this code then I can parse both     var date = moment search  [ YYYY M D    YY M D    D M YYYY    D M YY    YYYY/M/D    YY/M/D    D/M/YYYY    D/M/YY    YYYY.M.D    YY.M.D    D.M.YY    D.M.YYYY ]  true      Is it possible to parse any dates greater than 1/12/1 not based on language settings?,yehudahkay,closed,0,2018-01-31 13:54:10,2018-01-31 13:58:24,,,,0,1
9830,moment/moment,4425,Moment returns an invalid date even when the format is passed to the constructor,Calling this code with a date string returned by Mongo through our Rest api.       let value =  2018 01 31T16:48:34.486Z ;  let date = this. moment value   YYYY mm ddTHH:MM:ss.SSSZ  ;       Returns an invalid moment.js date  ie: isValid   is false.       Moment  _isAMomentObject: true  _i:  2018 01 31T16:48:34.486Z   _f:  YYYY mm ddTHH:MM:ss.SSSZ   _tzm: 0  _isUTC: false      _d: Invalid Date     _f:  YYYY mm ddTHH:MM:ss.SSSZ   _i:  2018 01 31T16:48:34.486Z   _isAMomentObject: true  _isUTC: false  _isValid: false  _locale:  Locale  _calendar:      _longDateFormat:      _invalidDate:  Invalid date   ordinal:    _dayOfMonthOrdinalParse: / d 1 2  th st nd rd /      _pf:  empty: false  unusedTokens: Array 0   unusedInput: Array 0   overflow: 1  charsLeftOver: 0      _tzm: 0  __proto__: Object     ,xorbis,closed,2,2018-01-31 17:14:51,2018-02-01 13:48:51,,,,0,1
9829,moment/moment,4426,Get single letter abbreviation of week day.,  Description of the Issue and Steps to Reproduce:      I need to get single letter abbreviation of week day e.g.  R  for Thursday   F  for Friday   S  for Saturday   U  for Sunday.    Using  moment  .format  d    give the number of the day of the week.     Is this supported by moment or can I added explicitly?       Environment:      Chrome 63 on OSX.    Moment version: 2.20.1.,0xbsec,closed,4,2018-01-31 17:45:45,2018-02-01 16:19:30,,,,0,1
9828,moment/moment,4427,Wrong output when formatting date,  Description of the Issue and Steps to Reproduce:      I have a date in ISO_8601 format _ that s what it looks like _  when I try to give it the following  DD MM YYYY h:mm:ss a  format then it changes the time. Note that the time is  20  but after formatting this changes to  3  when it should be  8     Original:      2018 01 31T20:57:00Z   Converted:  31 01 2018 3:57:00 pm   Expected:  31 01 2018 8:57:00 pm      Please include the values of all variables used.      ts  let limitDate =  2018 01 31T20:57:00Z ;  moment limitDate  moment.ISO_8601 .format  DD MM YYYY h:mm:ss a   // 31 01 2018 3:57:00 pm           Environment:       Firefox 58    MS Windows 8    Running in an environment with NodeJS and Ionic v3       Other information that may be helpful:      The time zone: _Bogot   Lima  Quito  Rio Branco_    Other libraries in use: TypeScript  Ionic Framework v3  Node 8    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version     /   Output:  Wed Jan 31 2018 16:14:40 GMT 0500  31/1/2018 16:14:40  300  Mozilla/5.0  Windows NT 6.3; Win64; x64; rv:58.0  Gecko/20100101 Firefox/58.0  2.20.1   /     ,juliandavidmr,closed,1,2018-01-31 21:26:33,2018-02-01 15:44:15,,,,0,1
9827,moment/moment,4428,pre treat moment.min.js with dllplugin got warning,  Description of the Issue and Steps to Reproduce:      I am using webpack.dllplugin to pre treat some stable dependencies  include moment.    Some codes in my webpack.dll.config.js is shown here       javascript  module.exports =      entry:        vendor: [ moment/min/moment.min.js ]               And then I got warning:     > WARNING in ./ /moment/min/moment.min.js  Module not found: Error: Can t resolve  ./locale  in  E: workspace nms8 webpack node_modules moment min    @ ./ /moment/min/moment.min.js 1:8507 8529   @ dll vendor        Environment:      OS: Windows 10 pro  Node: v6.10.2  npm: v3.10.10  webpack: v2.2.1  moment: v2.19.3  ,ChrisShen93,open,0,2018-02-01 02:18:43,0000-00-00 00:00:00,,Troubleshooting,Up-For-Grabs,,,0,1
9826,moment/moment,4429,no default zh locale,  Description of the Issue and Steps to Reproduce:      There does not appear to be a default locale for zh       const moment = require  moment  ;  moment  20111031  .locale  zh  .fromNow  ;           Environment:       Node.JS 9.2.0 on Ubuntu 16.0.4     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     //Thu Feb 01 2018 14:03:21 GMT 0000  GMT   console.log  new Date   .toLocaleString     //2018 2 1 14:03:48  console.log   new Date   .getTimezoneOffset     //0  console.log  navigator.userAgent   //ReferenceError: navigator is not defined  console.log moment.version   //2.20.1     ,sambodo7,closed,1,2018-02-01 14:06:03,2018-02-01 14:34:41,,,,0,1
9825,moment/moment,4430,[locale] Fix zh tw locale,Properly add spaces between CJK characters and alphanumeric characters in calendar time format.    For @ben lin and @hehachris       Calendar Time                          12:00  >        12:00      13:00  >      13:00        locale                   [https://github.com/sparanoid/chinese copywriting guidelines] https://github.com/sparanoid/chinese copywriting guidelines          Facebook       ,ayhaadam,closed,2,2018-02-01 16:00:31,2018-03-05 07:36:39,,locale approval needed,,,1,1
9824,moment/moment,4431,startOf  week   for moment.locale  en ca   is not the same as for moment.locale  en ca  ,  dt: moment                console.log moment dt .locale  en ca  .startOf  week   .format  MMM D    //returns Jan 28      console.log moment dt .locale  zh cn  .startOf  week   .format  MMM D    //returns Jan 22         First console.log returns Jan 28 for locale  en ca   which is a Sunday  Second console.log returns Jan 22 for locale  zh cn   which is a Monday    Time is not in sync. ,VanessaChu,closed,1,2018-02-01 22:44:18,2018-02-05 00:23:18,,,,0,1
9823,moment/moment,4432,moment js is returning wrong formatted values for an iso timestamp,I m passing     2018 01 31T22:55:02.907Z    this timestamp to the moment   function but it returns the wrong value after formatting the date part.       console.log moment  2018 01 31T22:55:02.907Z  .format  YYYY MM DD   ;       This should return    2018 01 31    but rather it s returning    2018 02 01   .    It s adding one day to every date like that. I m suspecting some time zone based issue but I m not able to figure it out.,m-ketan,closed,0,2018-02-02 08:12:46,2018-02-02 10:28:13,,,,0,1
9822,moment/moment,4433,[feature] Enable moment.duration String Number   String ,Previous behavior:       javascript  moment.duration 5   days  .days  ;   // 5  moment.duration 5 .milliseconds  ;   // 5  moment.duration  5    days  .days  ; // 0  moment.duration  5  .milliseconds  ; // 0         New behavior:       javascript  moment.duration  5    days  .days  ; // 5  moment.duration  5  .milliseconds  ; // 5         This is consistent with how similar methods allow this signature  like  moment  .add  5    days   ,ZachGawlik,open,2,2018-02-03 22:38:55,0000-00-00 00:00:00,,,,1,1
9821,moment/moment,4434,YYYY in strict vs forgiving mode.,  Description of the Issue and Steps to Reproduce:    The documentation states that  YYYY from version 2.10.5 supports 2 digit years  and converts them to a year near 2000  same as YY   . However  this appears to be untrue in strict mode. [I demonstrated this in JSFiddle] https://jsfiddle.net/wj6dsxvv/     I wasn t sure if this was a bug or unclear documentation.       Environment:    Moment 2.20.1   Chrome: 64.0.3282.140  Node 7.7.2,newtang,closed,1,2018-02-04 00:17:08,2018-03-04 07:02:56,,Duplicate,,,0,1
9820,moment/moment,4435,Moment doesn t use  best fit  format to accurately convey errors.,  Description of the Issue and Steps to Reproduce:    I would like to convey to my users that their day choice is invalid in a date such as  2/30/2019 7:00pm .  Typically   parsingFlags    allows me to see there s an overflow error  and I can accurately report back to the user. However  if I use multiple formats  moment appears to report the  parsingFlags    for the final format  not necessarily the one that best  fit  the string argument. In my example   M/DD/YYYY h:mma    fits  much better than  MM D YYYY h:mm   but if it s the last format in my array I ll see the  parsingFlags    for that one. I [demonstrated this in jsfiddle.] https://jsfiddle.net/L5yyp80j/       Environment:    Moment 2.20.1    ,newtang,open,1,2018-02-04 03:50:28,0000-00-00 00:00:00,,,,0,1
9819,moment/moment,4436,Wrong year when i set dow = 5,     Chrome Version: 63.0.3239.132  OS Version: Windows10 1709  Moment.js Version: 2.10.6         I have set my locale of the moment to be     js  moment.locale  zh cn          week:            dow: 5  // Friday is the first day of week          doy: 1           ;          js  // print the start of the first week of 2018  console.log moment  year: 2018  .week 1 .startOf  week  .format  YYYY MM DD   ;  // print  2017 01 06   // print the end of the first week of 2018  console.log moment  year: 2018  .week 1 .endOf  week  .format  YYYY MM DD   ; // print  2017 01 12          how to solve the problem?,ArnoldFu,closed,0,2018-02-05 05:13:51,2018-02-06 11:04:01,,,,0,1
9818,moment/moment,4437,4 tests failed. America/Cancun:guess  1631.1  America/Fort_Nelson:guess  2469.1  America/Metlakatla:guess  4571.1  America/Metlakatla:guess  4571.2  ,    Client info       Date String   : Mon Feb 05 2018 13:32:24 GMT 0100  W. Europe Standard Time   Locale String : 2/5/2018  1:32:24 PM  Offset        :  60  User Agent    : Mozilla/5.0  Windows NT 10.0; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/64.0.3282.140 Safari/537.36         ====        America/Cancun:guess  1631.1             javascript  // Expected America/Cancun  // Actual   America/Panama   America/Panama  ==  America/Cancun          ====        America/Fort_Nelson:guess  2469.1             javascript  // Expected America/Fort_Nelson  // Actual   America/Phoenix   America/Phoenix  ==  America/Fort_Nelson          ====        America/Metlakatla:guess  4571.1             javascript  // Expected America/Metlakatla  // Actual   America/Anchorage   America/Anchorage  ==  America/Metlakatla          ====        America/Metlakatla:guess  4571.2             javascript  // Expected America/Metlakatla  // Actual   America/Anchorage   America/Anchorage  ==  America/Metlakatla      ,TastefulElk,open,0,2018-02-05 12:34:37,0000-00-00 00:00:00,,,,0,1
9817,moment/moment,4438,Types of property  relativeTime  are incompatible.,After this change https://github.com/moment/moment/issues/3137  I can merge  a single relativeTime handler  like         moment.updateLocale  en        relativeTime :        dd:  number  =>           if  number < 7                 return number     days ; // Moment uses  d  when it s just 1 day.                         else                var weeks = Math.round number / 7 ;              return weeks          weeks > 1 ?  weeks  :  week  ;                                        ;         But it throws Typescript error    Types of property  relativeTime  are incompatible.        Type    dd:  number: any  => string;    is not assignable to type  RelativeTimeSpec .          Property  future  is missing in type    dd:  number: any  => string;   .     The properties of RelativeTimeSpec interface should be marked optional in moment.d.ts.,shivijais,open,0,2018-02-06 08:37:23,0000-00-00 00:00:00,,,,0,1
9816,moment/moment,4439,Feature request: Get localised custom calendar strings,Yes we are able to use custom calendar to convert date  but I have not found the way how to get them localised.    I would like this code       moment  .calendar  null                 sameDay :  [Today]  L              ;       returns        Heute  06.02.2018        for locale  de   and  returns        Today  02/06/2018        for locale  en     Thanks :       Environment:    anywhere,luckylooke,open,4,2018-02-06 11:22:18,0000-00-00 00:00:00,,,,0,1
9815,moment/moment,4440,Feature Request: More ways to format timezone display,I would like to be able to display the timezone as  8 or  8.5 instead of either  0800 or  08:30. Can you add support for this?,tsujp,open,2,2018-02-07 09:25:18,0000-00-00 00:00:00,,Enhancement,,,0,1
9814,moment/moment,4441,Wrong date format for locales,I am trying to parse some dates and noticed some locales differ from the standards. For example  given this simple code       js  var localeData = moment.localeData  af ZA  ;  console.log localeData._config.longDateFormat.L ;         It will display DD/MM/YYYY. Although this is  commonly used   it is not technically the correct format for South Africa  it should be YYYY MM DD. Is it possible to change the locale info to include both formats?    ,craigvn,closed,3,2018-02-08 02:52:36,2018-03-04 06:50:12,,,,0,1
9813,moment/moment,4442,Unexpected behavior using .add,  Description of the Issue and Steps to Reproduce:    I am tring to create a array of dynamic size  starting from the first hour incrementing by 1 hour each step.  But for some reason that I can t figure out why the function works for some number  a little above the middle of this array .n issue  please run the following code in the environment you are using and include the output:     js  var start = moment  2018 01 28 00:00:00      var end = moment  2018 02 28 00:00:00      var duration = moment.duration end.diff start  .asHours      console.log  start:     moment start .format  YYYY MM DD HH:mm:SS     console.log  end:     moment start .format  YYYY MM DD HH:mm:SS       console.log  duration:     duration    hours      var arr = [];    arr[0] = start;    for  var i = 1; i < duration 1; i         arr[i] = moment arr[i 1] .add 1   hour  .format  YYYY MM DD HH:mm:SS         arr[duration] = end    for  var i = 0; i < duration; i         console.log moment arr[i] .format  YYYY MM DD HH:mm:SS             You can find the code here  https://jsbin.com/lehupunure/edit?js console  Any help would be welcome.,joaoapenas,closed,4,2018-02-08 03:07:14,2018-03-04 06:52:44,,Troubleshooting,,,0,1
9812,moment/moment,4443,Diff when a date time is set as 12:00 AM is not working correctly,  Description of the Issue and Steps to Reproduce:    Hi     I am trying to compare two dates the same day but with a different time for example :    08/02/2018 12:00 AM  and  08/02/2018 11:50 AM  but it looks that i get wrong results into comparison.  For example :   var dateA = moment  8 2 2018 12:00 AM   D M YYYY hh:mm A    var dateB = moment  8 2 2018 11:00 AM   D M YYYY hh:mm A      then :   dateA.isBefore dateB  => true.    is it an issue?   Or there is something i m doing wrong?    Thanks         Please include the values of all variables used.       Environment:       Examples: Chrome 49 on OSX  Internet Explorer 10 on Windows 7  Node.JS 4.4.4 on Ubuntu 16.0.4      Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.       Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  Thu Feb 08 2018 12:11:31 GMT 0000  GMT   08/02/2018  12:11:31   0  Mozilla/5.0  Macintosh; Intel Mac OS X 10_13_2  AppleWebKit/537.36  KHTML  like Gecko  Chrome/64.0.3282.140 Safari/537.36   2.18.1          Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,VitoAlbano,closed,2,2018-02-08 12:16:57,2018-02-09 10:16:21,,,,0,1
9811,moment/moment,4444,[misc] Add copyright date,moment.js is included in a Debian package. We need to know the copyright date. I guesses it from past commits  feel free to fix it  but please include the date.,aviau,open,2,2018-02-08 16:23:42,0000-00-00 00:00:00,,,,1,1
9810,moment/moment,4445,[bugfix] Fixing RelativeTimeSpec to allow update of a single relativeTime handler,We have the ability to update only a single relativeTime handler  but the typescript spec doesn t allow to do so.  Issue ref => https://github.com/moment/moment/issues/4438,shivijais,open,0,2018-02-09 14:38:53,0000-00-00 00:00:00,,,,1,1
9809,moment/moment,4446,[misc] Make comment in hour.js gender neutral,Nice to have a gender neutral codebase.,vaicine,closed,1,2018-02-12 14:04:37,2018-03-04 06:14:27,,,,1,1
9808,moment/moment,4447,Adding 24 hours to cross DST boundary  documentation incomplete ,  Description of the Issue and Steps to Reproduce:      The [Add documentation] https://momentjs.com/docs/ /manipulating/add/  gives this example:     js  var m = moment new Date 2011  2  12  5  0  0  ; // the day before DST in the US  m.hours  ; // 5  m.add 24   hours  .hours  ; // 6       Expected output:       5  6       Actual output:       5  5           Environment:      Moment: 2.20.1    node: v8.9.4    OS: Ubuntu 16.04.3 LTS      Other information that may be helpful:      Timezone: GMT    Date and time of test: Tue 13 Feb 11:33:33 GMT 2018       Tue Feb 13 2018 11:34:50 GMT 0000  GMT   2018 2 13 11:34:50  0  2.20.1         Apologies if this is a duplicate. I couldn t see a clear issue describing the mis match in documentation from current behaviour.,JamesBarwell,closed,1,2018-02-13 11:43:30,2018-03-11 17:44:23,,Documentation,,,0,1
9807,moment/moment,4448,moment.format   incorrect for locale= ar ,  Description of the Issue and Steps to Reproduce:    Go to https://momentjs.com/   scroll to Multiple Locale Support   click the  Arabic  button   scroll back up to the Format Dates section  see that the result of moment.format   is not a valid ISO8601 string  Note that moment.toISOString   gives the correct result    It is correct for other Arabic variants except for  ar sa .  It is also correct for other alternate alphabet languages like Hebrew and Russian.  Seems to be limited to these 2 Arabic variants.     Please include the values of all variables used.       Environment:       Examples: Chrome 49 on OSX  Internet Explorer 10 on Windows 7  Node.JS 4.4.4 on Ubuntu 16.0.4      Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.       Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     Thu Feb 15 2018 09:49:39 GMT 0500  EST    console.log  new Date   .toLocaleString     2/15/2018  9:49:23 AM   console.log   new Date   .getTimezoneOffset    300  console.log  navigator.userAgent   Mozilla/5.0  Macintosh; Intel Mac OS X 10_12_6  AppleWebKit/537.36  KHTML  like Gecko  Chrome/64.0.3282.140 Safari/537.36   console.log moment.version    2.10.6   but it is also evident on your homepage           Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,eschiebel,open,2,2018-02-15 14:52:11,0000-00-00 00:00:00,,,,0,1
9806,moment/moment,4449,BUG: fromNow   doesn t take care the timezone ,  How to reproduce    I have a variable _created_ returned from server in UTC format   example: 2018 02 15T00:30:31Z  I want to display the time interval from _created_  to user s local time  this is my code:         1:   moment _created_ .local  .fromNow      2:   moment moment _created_ .local  .toISOString   .fromNow      3:   var usertimezone = moment.tz.guess         var value = moment.utc _created_        var formatDate = moment.tz value  usertimezone        return formatDate.fromNow         All don t work.  I googled 3 hours  tons of people are bothered by this problem since   2013    and there is no solution  and this bug is not fixed.    Which is kind of disappointing for such a famous package.      Environment:    Chrome 53 on OSX    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version     Sat Feb 17 2018 03:45:28 GMT 0500  EST   2 2/17/2018  3:45:28 AM  300  Mozilla/5.0  Macintosh; Intel Mac OS X 10_13_3  AppleWebKit/537.36  KHTML  like Gecko  Chrome/64.0.3282.167 Safari/537.36  2.20.1     ,C0deZLee,closed,9,2018-02-17 08:50:51,2018-03-04 07:00:15,,Troubleshooting,,,0,1
9805,moment/moment,4450,Momentjs locale   changing the week dow has unexpected results,Environment:  momentjs: 2.19.2  angularjs: 1.5.3  Windows 10  Chrome Browser    I am writing a calendar with JavaScript/AngularJS 1.5.3 and MomentJS.    I need my calendar to be configurable so that it can start on any day. For example  Wed or Friday as the first day of the week.    What I did was to change the dow of the current locale:             moment.updateLocale moment.locale               week:   dow: 4          ;       However  I am seeing an issue now.    For Jan  2018:         var startOfMonthWeekNumber = moment  2018 01 01  .startOf  month  .week  ; //this is 52  console.log moment  2018 01 01  .startOf  month  .format  YYYY MM DD w  ; //2018 01 01 52  var endOfMonthWeekNumber = moment  2018 01 01  .endOf  month  .week  ; //this is 4         I believe that 52 belongs to the previous year.    How can I fix this issue with moment?    Here is the original code for my calendar:  https://jsfiddle.net/aubz88/ge5q9z5t/,aubrey-fowler,open,5,2018-02-19 13:41:54,0000-00-00 00:00:00,,,,0,1
9804,moment/moment,4451,Deprecation warning when trying to parse an implicitly to string converted moment object,  Description of the Issue and Steps to Reproduce:      Input:   moment moment             Console warning:       Deprecation warning: value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date   [...]         Environment:    any  tested in Chrome 66.0.3350.0 and Node.js 6.11.4        js  console.log   new Date   .toString    // Tue Feb 20 2018 08:02:33 GMT 0100  Mitteleurop ische Zeit   console.log  new Date   .toLocaleString    // 2018 2 20 08:02:52  console.log   new Date   .getTimezoneOffset    //  60  console.log  navigator.userAgent  // n.a.  console.log moment.version  // 2.20.1     ,DeBaum,closed,1,2018-02-20 07:15:31,2018-02-21 19:56:18,,,,0,1
9803,moment/moment,4452,combine datetimepicker and moment for Min date,I have combine datetimepicker and moment timezone with data.js  I could not wind how to set mindate set after 1 day and mintime after 4 hour  is any specific function with moment   Please help me with this code                       <div class= form group >                      <label class= label control >Datetime Picker</label>                      <input type= text  id= datetimepicker1  class= form control />                  </div>        document .ready function              var mind = moment.tz  Asia/Dhaka  .format  ;          var Date = moment.tz  Asia/Dhaka  .format  ;              datetimepicker1  .datetimepicker                locale:  en gb                timeZone:  Asia/Dhaka                defaultDate: Date               maxDate: mind               format:  DD MMM YYYY h:mm A             ;        ;     ,zitengine,closed,2,2018-02-22 08:43:39,2018-03-04 06:38:39,,,,0,1
9802,moment/moment,4453,[bugfix] Treat periods as periods  not regex anything period  for weekday parsing in strict mode.,Closes  4347   This can close  4350 too because this is that change  but with the required unit tests.,calebcauthon,open,0,2018-02-25 06:10:22,0000-00-00 00:00:00,,,,1,1
9801,moment/moment,4454,YYYYMMDDHHmmss as Integer  or  preparing  input before moment parses it ,Currently I am working on a project where in our current code base we work with timestamps in ms  and we are receiving data from an external service that uses the  YYYYMMDDHHmmss  format but sends it as integers. Moment parses correctly when the value is a string  but when it is an integer it thinks  correctly  it is a timestamp.    However  since our timestamps will never exceed 13 characters which allows us up to a date in the year 2286 I would like to allow parsing of 14 character numbers as the format above.    I can understand this is not something that you would want in most project. So I was thinking is there a way where I can  prepare  the value before moment parses it? With a hook or something.     So if I do this  moment 20180404100000   a hook is called where I can do a simple check like:         moment.beforeParse = function  value         // The return value in this function is passed along to as in moment value       if  typeof value ===  number              as_string = value               if  as_string.length === 14    return as_string                return value            So it will parse numbers with a length of 14 as the  YYYYMMDDHHmmss  format and other numbers as timestamps.,Matthijn,closed,2,2018-02-26 12:11:26,2018-02-28 10:53:05,,,,0,1
9800,moment/moment,4455,[misc] Add CodeTriage badge to moment/moment,Adds a badge showing the number of people helping this repo on CodeTriage.  [ [Open Source Helpers] https://www.codetriage.com/moment/moment/badges/users.svg ] https://www.codetriage.com/moment/moment       What is CodeTriage?  CodeTriage is an Open Source app that is designed to make contributing to Open Source projects easier. It works by sending subscribers a few open issues in their inbox. If subscribers get busy  there is an algorithm that backs off issue load so they do not get overwhelmed  [Read more about the CodeTriage project] https://www.codetriage.com/what .     Why am I getting this PR?  Your project was picked by the human  @schneems. They selected it from the projects submitted to https://www.codetriage.com and hand edited the PR. How did your project get added to [CodeTriage] https://www.codetriage.com/what ? Roughly about 1 year ago  [sarupbanskota] https://github.com/sarupbanskota  added this project to CodeTriage in order to start contributing. Since then  34 people have subscribed to help this repo.     What does adding a badge accomplish?  Adding a badge invites people to help contribute to your project. It also lets developers know that others are invested in the longterm success and maintainability of the project.  You can see an example of a CodeTriage badge on these popular OSS READMEs:    [ [Email clients like GMAIL do not render SVG images] https://www.codetriage.com/rails/rails/badges/users.svg ] https://www.codetriage.com/rails/rails  https://github.com/rails/rails   [ [Email clients like GMAIL do not render SVG images] https://www.codetriage.com/crystal lang/crystal/badges/users.svg ] https://www.codetriage.com/crystal lang/crystal  https://github.com/crystal lang/crystal     Have a question or comment?  While I am a bot  this PR was manually reviewed and monitored by a human   @schneems. My job is writing commit messages and handling PR logistics.  If you have any questions  you can reply back to this PR and they will be answered by @schneems. If you do not want a badge right now  no worries  close the PR  you will not hear from me again.  Thanks for making your project Open Source  Any feedback is greatly appreciated.,codetriage-readme-bot,closed,3,2018-02-26 19:51:22,2018-03-05 07:34:50,,,,1,1
9799,moment/moment,4456,locale: Georgian   fixed incorrectly used word,,torniker,closed,1,2018-02-27 14:47:43,2018-02-27 14:51:51,,,,1,1
9798,moment/moment,4457,locale Georgian   fixed incorrectly used word,,torniker,closed,0,2018-02-27 14:53:07,2018-02-27 14:54:18,,,,1,1
9797,moment/moment,4458,[locale] Georgian   fixed incorrectly used word,,torniker,closed,2,2018-02-27 14:54:49,2018-03-05 07:30:39,,,,1,1
9796,moment/moment,4459,TypeScript error TS2430: Interface  Moment  incorrectly extends interface  Object .,Full error message using TypeScript 2.7.1:       ERROR in [at loader] ./node_modules/moment/moment.d.ts:413:13       TS2430: Interface  Moment  incorrectly extends interface  Object .    Types of property  valueOf  are incompatible.      Type     => number  is not assignable to type     => Object .        Type  number  is not assignable to type  Object .         This affects versions 2.18.0 and up  based on the following commit:  https://github.com/moment/moment/commit/19b313d1c8cf5e2aa4577c9cc548efcffebc787b diff 3dd6cebe542b0e207494192c4bbf4a22  ,carmanchris31,open,1,2018-02-27 15:10:07,0000-00-00 00:00:00,,,,0,1
9795,moment/moment,4460,Subtracting days using .day x  subtracts an inconsistent amount,Try the below code in JSBin  using latest CDN . Same problem also happened in my project using node  2.20.1 .    First bit of code should subtract 6 days  but subtracts 12.  Second bit should subtract 5 days  but subtracts 11.         <script src= https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.20.1/moment.min.js ></script>  <script>  var date = moment  2017 11 18    YYYY MM DD  ;  console.log date.toString   ;    var dayOfWeek = date.day  ;  console.log dayOfWeek ;    date.day  dayOfWeek ;  console.log date.toString   ;              var date2 = moment  2017 11 18    YYYY MM DD  ;  console.log date2.toString     date2.day  5 ;  console.log date2.toString     </script>         Edit: Using moment  .subtract x  method works correctly and is perfect substitute. However  the docs do say that the above method should be possible https://momentjs.com/docs/ /get set/day/,pmarshall111,closed,2,2018-02-27 22:51:13,2018-02-28 09:44:43,,,,0,1
9794,moment/moment,4461,SEVERE BUG locale  en   with weekday  ,,gpietro,closed,0,2018-02-28 07:14:17,2018-02-28 07:16:28,,,,0,1
9793,moment/moment,4462,isValid   not working properly with format as second parameter,  Description of the Issue and Steps to Reproduce:    isValid   has a weird behavior. Using the browser  momentjs site open   if I type:     moment  2018 dkjsnaksaj x null  .isValid   >> false     But if I set the format of the string as a second parameter  then I get:     moment  2018 dkjsnaksaj x null    YYYY M DD  .isValid   >> true       Please include the values of all variables used.       Environment:      Chrome  64.0.3282.186  MacOS High Sierra   Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.       Other information that may be helpful:    Thu Mar 01 2018 15:15:41 GMT 0300   03   VM258:2 01/03/2018 15:15:41  VM258:3 180  VM258:4 Mozilla/5.0  Macintosh; Intel Mac OS X 10_13_3  AppleWebKit/537.36  KHTML  like Gecko  Chrome/64.0.3282.186 Safari/537.36  VM258:5 2.20.1  undefined,brunosiqueira,closed,2,2018-03-01 18:16:13,2018-03-04 06:48:18,,,,0,1
9792,moment/moment,4463,[misc] Update downloads badge to point to graph of downloads  ,      Noticed that your  npm  badge and  downloads  badge currently both point to the same page on npmjs.org      I was wondering if you might prefer having the download badge point to a download chart instead?    If not  feel free to close and apologies for the drive by PR  ,cheapsteak,closed,4,2018-03-02 00:57:40,2018-03-05 07:34:00,,Discussion,,,1,1
9791,moment/moment,4464,year   of 01/01/0001 returns 2001,  Using moment  01/01/0001  .year   returns 2001 instead of 0001 in windows Chrome typescript.  The date value is passed in from a webservice.         js  console.log   new Date   .toString     Fri Mar 02 2018 04:50:14 GMT 0800  Pacific Standard Time   console.log  new Date   .toLocaleString     3/2/2018  4:50:41 AM  console.log   new Date   .getTimezoneOffset     480  console.log  navigator.userAgent   Mozilla/5.0  Windows NT 10.0; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/64.0.3282.186 Safari/537.36  console.log moment.version   2.11.1       ,wirble,closed,1,2018-03-02 12:53:04,2018-03-04 06:32:17,,,,0,1
9790,moment/moment,4465,grunt test:browser fails,I think it has to do with the lazy load test as introduced here:  https://github.com/moment/moment/pull/4310/files diff c2c2426531dd2c2fe7d70ffc594ecaf9R188,marwahaha,closed,0,2018-03-02 20:26:29,2018-03-02 20:28:55,,,,0,1
9789,moment/moment,4466,[misc] Fix lazy load test,fixes  4465,marwahaha,closed,0,2018-03-02 20:27:47,2018-03-02 20:28:55,,,,1,1
9788,moment/moment,4467,Guid parsing as valid in strict mode,    moment  0d7879cc 8e5f 4cc8 9910 e54e48e9f9bb    YYYY MM DD  .isValid      gives you  true . You can verify this [currently on the momentjs page] http://momentjs.com/docs/ /parsing/is valid/          Fri Mar 02 2018 14:28:28 GMT 0600  CST   3/2/2018  2:28:28 PM  360  Mozilla/5.0  Macintosh; Intel Mac OS X 10_13_3  AppleWebKit/537.36  KHTML  like Gecko  Chrome/64.0.3282.186 Safari/537.36  2.20.1     ,togakangaroo,closed,4,2018-03-02 20:29:33,2018-03-04 06:33:21,,,,0,1
9787,moment/moment,4468,m.millisecond   returns zero,  Description of the Issue and Steps to Reproduce:    moment.millisecond   function is returning 0. It should return the number of milliseconds since epoch for the Moment instance its called on  [per docs] https://momentjs.com/docs/ /get set/millisecond/  . Oddly  the  .unix    function still works correctly.     [Example JS Fiddle to reproduce] https://jsfiddle.net/0nhyc3np/5/          function foo         m = moment  02/27/2018    MM/DD/YYYY  ;      console.log m.millisecond   ;      console.log m.unix   ;       foo  ;            Output is:       0  1519707600         This seems pretty basic  so I hope I m just doing something wrong.      Environment:    Version 64.0.3282.186  Official Build   64 bit  on Fedora 27      Other information that may be helpful:      The time zone setting of the machine the code is running on: Eastern Standard  New York  US     The time and date at which the code was run: 2018 03 02  4:15pm    Other libraries in use: Originally encountered in React  but ruled this out via JSFiddle.    If you are reporting an issue  please run the following code in the environment you are using and include the output:       console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version     Fri Mar 02 2018 16:18:50 GMT 0500  EST   3/2/2018  4:18:50 PM  300  Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/64.0.3282.186 Safari/537.36  2.20.1     ,jlbooker,closed,2,2018-03-02 21:34:31,2018-03-04 05:54:59,,,,0,1
9786,moment/moment,4469,Misbehavior in Safari,If your timezone is  3:30  Iran  These expressions:       moment new Date 2018 2 21 0 0 0  .startOf  day  .format  YY/MM/DD HH:mm:ss ZZ    moment new Date 2018 2 22 0 0 0  .startOf  day  .format  YY/MM/DD HH:mm:ss ZZ         both return   18/03/21 00:00:00  0330   in Safari.    Environment:  Safari 11.03  MacOS High Sierra  10.13.3     There s no problem in Chrome.       js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version        Result:        Sat Mar 03 2018 20:12:57 GMT 0330   0330     3/3/2018  8:12:57 PM    210   Mozilla/5.0  Macintosh; Intel Mac OS X 10_13_3  AppleWebKit/604.5.6  KHTML  like Gecko  Version/11.0.3 Safari/604.5.6    2.14.1          If you run this JSBin in Safari with the above mentioned timezone you should see the results mentioned above in console.,sassanh,open,4,2018-03-03 16:45:39,0000-00-00 00:00:00,,,,0,1
9785,moment/moment,4470,[feature] add support for [YYYY] as ISO8601 format,related to issue https://github.com/moment/moment/issues/3918  ,medinarkhov,open,15,2018-03-04 09:44:37,0000-00-00 00:00:00,,Docs written,,,1,1
9784,moment/moment,4471,[Suggestion] Make Strict Mode as default option,Would you like to make Strict mode a default parsing option?   moment  2018 03 03    YYYY MM DD    for Strict Mode   moment  2018 03 03    YYYY MM DD   false   for Forgiving Mode    According to the documentation  Strict mode is the recommended mode for parsing dates. Nevertheless  I noticed that so many issues have been raised because of NOT using Strict mode.  It it likely that similar issues will be raised again and again.     Just a suggestion  happy to help with implementation. Feel free to decline if you don t like the idea.,medinarkhov,open,0,2018-03-04 10:37:22,0000-00-00 00:00:00,,Breaking change,,,0,1
9783,moment/moment,4472,Twitter,  Description of the Issue and Steps to Reproduce:       Please include the values of all variables used.       Environment:       Examples: Chrome 49 on OSX  Internet Explorer 10 on Windows 7  Node.JS 4.4.4 on Ubuntu 16.0.4      Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.       Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version           Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,ToonLadyboy,closed,0,2018-03-04 14:40:13,2018-03-05 07:37:18,,,,0,1
9782,moment/moment,4473,Twitter,  Description of the Issue and Steps to Reproduce:       Please include the values of all variables used.       Environment:       Examples: Chrome 49 on OSX  Internet Explorer 10 on Windows 7  Node.JS 4.4.4 on Ubuntu 16.0.4      Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.       Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version           Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,ToonLadyboy,closed,1,2018-03-04 14:41:10,2018-03-05 07:37:35,,,,0,1
9781,moment/moment,4474,Calling add   on a moment object causes it to be mutated,  Description of the Issue and Steps to Reproduce:      When calling  .add  on a  moment  object  the object is mutated in a way which is hard to debug. For example:       js  const   expect   = require  chai  ;  const moment = require  moment  ;    const date1 = moment new Date  2018 03 04   ;    expect date1.format  YYYY MM DD   .to.equal  2018 03 04  ; // succeeds    const date2 = date1.add 3   days  ; // this  mutates  date1 so that date1 is now 2018 03 07        expect date2.format  YYYY MM DD   .to.equal  2018 03 07  ; // succeeds  expect date1.format  YYYY MM DD   .to.equal  2018 03 04  ; // FAIL: date1 has been mutated           Environment:       Node.JS v8.9.1 on Ubuntu 17.10   this really doesn t matter     Output of the following:       js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version               Sun Mar 04 2018 18:59:10 GMT 0000  GMT   2018 3 4 18:59:10  0  undefined  2.21.0          Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,felamaslen,closed,2,2018-03-04 19:00:06,2018-03-05 07:41:20,,Duplicate,,,0,1
9780,moment/moment,4475,[misc] Switch from JSCS to ESLint,I understood from [ 3943] https://github.com/moment/moment/pull/3943 issuecomment 299631525  and [ 3217] https://github.com/moment/moment/pull/3217 issue 72865760  that there was a plan to replace  JSCS  by  ESLint   since development of  JSCS  has stopped. This PR performs that migration. The  JSCS  rules have been replaced by their  closest  equivalent in  ESLint .    When running the new lint task I encountered quite some linting errors  despite the rules being equivalent. I went over the errors one by one  and concluded that ESLint is just much better at parsing and identifying the javascript styling.  JSCS  applied its indentation requirement incorrectly for example  or did not require the same object curly bracket spacing for  import  statements. All the errors have been fixed.    My suggestion would be to migrate from  JSHint  to  ESLint  as well  and to furthermore extend the  ESLint  config with the  eslint:recommended  rules  which are good at identifying common causes of bugs and errors.,TheDancingCode,open,2,2018-03-04 20:30:06,0000-00-00 00:00:00,,,,1,1
9779,moment/moment,4476,Calls to moment.updateLocale increases the memory usage,  Description of the Issue and Steps to Reproduce:      Calling  moment.updateLocale  fr   config   many times increases the memory usage  and is never reallocated.    Steps and a sample program to reproduce are described [in this  repository] https://github.com/inside/moment memory poc .      Environment:      Node.JS v8.9.4 on Ubuntu 16.04.4    This issue is probably also reproducible on the browser.       js  console.log  new Date   .toString     Mon Mar 05 2018 17:38:57 GMT 0100  CET     console.log  new Date   .toLocaleString     2018 3 5 17:38:57    console.log  new Date   .getTimezoneOffset      60    console.log navigator.userAgent   undefined  because the demo to reproduce is only on Node.JS     console.log moment.version   2.21.0     ,inside,open,2,2018-03-05 16:47:26,0000-00-00 00:00:00,,,,0,1
9778,moment/moment,4477,How to get the before date from the current date in ISO format?, I have followed below approach to get one day before day for the current date            var moment = require  moment  ;            var beforedate = moment  .subtract 1  days  ;            log.info  start date   beforedate.startOf  day  .toDate   ;            log.info  End date   beforedate.endOf  day  .toDate   ;   But it is giving the result like below   Sun Mar 05 2018 00:00:00 GMT 0530  Sun Mar 05 2018 23:59:59 GMT 0530  But I want above format in ISO  can you please help me on this .,bhanuprasad04,open,1,2018-03-05 18:38:41,0000-00-00 00:00:00,,Up-For-Grabs,,,0,1
9777,moment/moment,4478,[locale] ug cn: put abbr in lowercase,@ichernev   will this cause any issues?    I changed it so  grunt update locales  will work in the [momentjs.com repo] https://github.com/moment/momentjs.com  .,marwahaha,open,0,2018-03-05 21:12:19,0000-00-00 00:00:00,,,,1,1
9776,moment/moment,4479,set with object include day will add the day not set the day,  Description of the Issue and Steps to Reproduce:    1. Just create moment     js  mt = moment  .set  day: 6  ;  console.log moment  .format  YYYY MM DD HH:mm:ss   ; // 2018 03 06 07:39:25  console.log mt.format  YYYY MM DD HH:mm:ss   ; // 2018 03 10 07:39:25           Environment:    Node.JS v8.9.4 on Ubuntu 16.04.3 LTS      Other information that may be helpful:       js  console.log   new Date   .toString    // 2018 3 6 15:35:01  console.log  new Date   .toLocaleString    // 0  console.log   new Date   .getTimezoneOffset    // 2.18.1  console.log moment.version      ,seanmars,open,1,2018-03-06 07:40:41,0000-00-00 00:00:00,,,,0,1
9775,moment/moment,4480, G_YYYYMMDD  Parsing Error,  Description of the Issue and Steps to Reproduce:    http://jsfiddle.net/dp7rzmw5/8354/       moment  G_20180307    G_YYYYMMDD  .isValid   === false  moment  A_20180307    A_YYYYMMDD  .isValid   === true        Please include the values of all variables used.       Environment:       Examples: Chrome 49 on OSX  Internet Explorer 10 on Windows 7  Node.JS 4.4.4 on Ubuntu 16.0.4      Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.       Other information that may be helpful:      The time zone setting of the machine the code is running on    The time and date at which the code was run    Other libraries in use  TypeScript  Immutable.js  etc     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version        Wed Mar 07 2018 00:41:20 GMT 0900             2018. 3. 7.    12:41:20   540  Mozilla/5.0  Windows NT 10.0; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/64.0.3282.186 Safari/537.36  2.21.0     Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer. ,ybbarng,open,0,2018-03-06 15:43:22,0000-00-00 00:00:00,,,,0,1
9774,moment/moment,4481,Date constructor deprecated warning,I m generating a date from a variable  and then feeding it to moment  .              confirmationAge                 let newDate = moment.utc this.project.confirmed_at .local  .format               console.log newDate              return moment newDate .fromNow  ;                According to console.log  the date being passed to moment   looks like this:    2017 09 29T14:05:42 05:00    This should be an acceptable format  I think?   but I m getting the deprecation warning:  Deprecation warning: value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date    which is not reliable     I ve also tried indicating an explicit format  I also tried using Z and several other variants   but the warning continues:              return moment newDate   YYYY MM DDThh:mm:ss  HH:mm  .fromNow  ;    How can I get rid of this warning?                                                        Environment        console.log   new Date   .toString    // Wed Mar 07 2018 08:34:50 GMT 0600  CST       console.log  new Date   .toLocaleString    // 3/7/2018  8:34:50 AM      console.log   new Date   .getTimezoneOffset    // 360      console.log  navigator.userAgent  // Mozilla/5.0  Macintosh; Intel Mac OS X 10_13_3           AppleWebKit/537.36  KHTML  like Gecko  Chrome/64.0.3282.186 Safari/537.36            console.log moment.version  // 2.20.1,plweil,closed,1,2018-03-06 18:40:47,2018-03-08 15:56:51,,,,0,1
9773,moment/moment,4482,The moment dependency defined in package lock.json has a known moderate severity security vulnerability, [image] https://user images.githubusercontent.com/6169344/37078320 cb0cde16 2204 11e8 9b1c 13b2d5ea833e.png     The moment dependency defined in package lock.json has a known moderate severity security vulnerability in version range < 2.19.3 and should be updated.,apmeena,closed,4,2018-03-07 07:11:59,2018-03-09 22:30:04,,,,0,1
9772,moment/moment,4483,why date is changed to GMT while actually  03 and that on JSON?,Hi     At nodejs  I conole.log a date and get :   moment.parseZone  2018 03 07T00:00:00.000 03:00     but on Postman  on JSON  it is appeared to be    2018 03 06T21:00:00.000Z     Notice the difference on date  1 day is decreased and time is decreased 3 hours as well.  what can solve this? It should appear as it is on JSON  right?    And at the front end  reactjs  the date is read as 07 03 2018 without including .tz ...  for it.    I am afraid if I use the .tz ...  at front end  I will increase the hours and will lead to bugs. Or shall I leave date without .tz ...  at front end. I am confused of that different value on node and JSON.        Thank you for you help,msman,open,1,2018-03-07 12:58:18,0000-00-00 00:00:00,,,,0,1
9771,moment/moment,4484,Solution,https://github.com/moment/moment/blob/d0a45f0390c108cc18d71a3d3f38d040392483c5/moment.js L1830    Use https://www.npmjs.com/package/include all from sails.,ScreamZ,open,0,2018-03-07 17:25:23,0000-00-00 00:00:00,,,,0,1
9770,moment/moment,4485,Need to display minutes in moment format,  Description of the Query.    I need to display some minutes data in HH:mm:ss format  for example:   var data = 30  which in minutes   i want to show this in  HH:mm:ss  format like  00:30:00     and if i  data  = 1500  in minutes   then it must show this is  DD HH:mm:ss  format like  01 01:00:00     Can any body please help.,durgeshahire4,open,0,2018-03-08 06:11:39,0000-00-00 00:00:00,,Troubleshooting,,,0,1
9769,moment/moment,4486,update docs,Please update your docs  cause I ve just spent a few hours trying to figure out why can t I add a timestamp with  milisecons  to my created moment. Tried  ms  and it worked  but there is still  miliseconds  in the documentation,matejm91,open,5,2018-03-08 08:52:00,0000-00-00 00:00:00,,Troubleshooting,,,0,1
9768,moment/moment,4487,Bug: Incorrect toISOString true  in node.js,I am in  8 time zone.  I am using moment version 2.20.1 and node 9.4.0.  Local time is 2018 03 09 15:17:28 now.    Actual output:        moment  .toISOString true ; //2018 03 09T07:17:28.678 08:00    Expected output:        moment  .toISOString true ; //2018 03 09T15:17:28.678 08:00,wdetac,closed,2,2018-03-09 07:23:16,2018-03-12 03:57:02,,,,0,1
9767,moment/moment,4488,TypeScript docs has invalid ESM usage,The doc example [here] https://momentjs.com/docs/ /use it/typescript/ :         import   as moment from  moment ;    let now = moment  .format  LLLL  ;       Is performing a namespace object import but expecting the  moment  default export function. This is causing bundlers like parcel grief as they try to support this invalid ESM syntax.    Related to:  https://github.com/parcel bundler/parcel/pull/530      Update:      With [TypeScript 2.7] https://www.typescriptlang.org/docs/handbook/release notes/typescript 2 7.html  you can now flag to throw on this incorrect use and also support   import d from  cjs   with    esModuleInterop .,jdalton,open,1,2018-03-09 08:38:27,0000-00-00 00:00:00,,Up-For-Grabs,,,0,1
9766,moment/moment,4489,Moment BST  Timezones and a Random 11h,  Description of the Issue and Steps to Reproduce:              moment moment  2018 04 29  .startOf  month   .startOf  isoWeek  .toDate      Should be exactly equal to:            new Date  2018 03 26      However due to British summer time changing on that Sunday  moment returns an incorrect value for several reasons.    Most notably that BST does NOT change at midnight but at 2am.    Secondarily the moment in which the daylight savings is applied is not correct  IMO?    surely:       2018 03 25T23:00:00.000Z    ===    2018 03 26T00:00:00.000Z       Does not exist  or is reality 1am 2am  which avoids all this really  if I add 1 second to the first date I get:        2018 03 26T00:00:01.000Z       So.... I thought I d report this anyway      Please include the values of all variables used.     Basically  the start of the previous week from the start date of the month is wrong when given 2018 04 29 due to some daylight savings changes for BST.      Environment:      Jest  Node.JS 9.4 etc.     Examples: Chrome 49 on OSX  Internet Explorer 10 on Windows 7  Node.JS 4.4.4 on Ubuntu 16.0.4      Both the browser and the OS are important to us  particularly if you have an unsual environment like an IOT application.       Other information that may be helpful:      The time zone setting of the machine the code is running on    Europe/London      The time and date at which the code was run    13:46 9th March 2018      Other libraries in use  TypeScript  Immutable.js  etc     If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version        console.log   new Date   .toString           Fri Mar 09 2018 13:47:49 GMT 0000  GMT   console.log  new Date   .toLocaleString           2018 3 9 13:47:49  console.log   new Date   .getTimezoneOffset           0  console.log  navigator.userAgent         Mozilla/5.0  darwin  AppleWebKit/537.36  KHTML  like Gecko  jsdom/11.6.1  console.log moment.version         2.21.0     Ensure your issue is isolated to moment. Issues involving third party tools will be closed unless submitted by the tool s author/maintainer.     It s definitely an issue with moment     ,aphillipo,closed,1,2018-03-09 14:04:00,2018-03-09 16:09:59,,,,0,1
9765,moment/moment,4490,can close/delete,Disregard.,killemth,closed,0,2018-03-09 14:31:28,2018-03-09 14:37:55,,,,0,1
9764,moment/moment,4491,[locale] ru: fix mistakes in punctuation,Added a comma to the nextWeek and lastWeek calendar displays time.,baribadamshin,closed,1,2018-03-10 20:48:03,2018-03-10 20:50:17,,,,1,1
9763,moment/moment,4492,[locale] ru: add a comma to the calendar displays time,Fixed mistakes in punctuation,baribadamshin,open,3,2018-03-10 21:18:07,0000-00-00 00:00:00,,,,1,1
9762,moment/moment,4493,Cannot read property  humanize  of undefined,When I set locale as mn it produces error if I use updateLocale  On the contrary If I use locale instead of updateLocale there is no error  but gives depreciation warning.     Code as follows         moment.updateLocale  mn          relativeTime:            future:   s                  past:   s                 s:                    m:                     ...           ;    moment.locale  mn  ;         Environment:      Chrome    OSX    Node JS    React JS    Moment 2.17      Error:      Cannot read property  humanize  of undefined    ,munkhorgil,open,7,2018-03-11 16:57:47,0000-00-00 00:00:00,,,,0,1
9761,moment/moment,4494,Moment.d.ts 2.21 missing HTML5_FMT types,Moment is missing type definitions for the built in HTML5 Formats.         hooks.HTML5_FMT =        DATETIME_LOCAL:  YYYY MM DDTHH:mm               // <input type= datetime local  />      DATETIME_LOCAL_SECONDS:  YYYY MM DDTHH:mm:ss    // <input type= datetime local  step= 1  />      DATETIME_LOCAL_MS:  YYYY MM DDTHH:mm:ss.SSS     // <input type= datetime local  step= 0.001  />      DATE:  YYYY MM DD                               // <input type= date  />      TIME:  HH:mm                                    // <input type= time  />      TIME_SECONDS:  HH:mm:ss                         // <input type= time  step= 1  />      TIME_MS:  HH:mm:ss.SSS                          // <input type= time  step= 0.001  />      WEEK:  YYYY [W]WW                               // <input type= week  />      MONTH:  YYYY MM                                 // <input type= month  />   ;                Environment:    VSCode 1.2  TypeScript 2.7  Windows 10        ,Calidus,open,0,2018-03-12 14:21:47,0000-00-00 00:00:00,,,,0,1
9760,moment/moment,4495,[bugfix] Added HTML5_FMT to moment.d.ts,Resolved issue  4494 ,Calidus,open,0,2018-03-12 17:06:37,0000-00-00 00:00:00,,,,1,1
9759,moment/moment,4496,2 tests failed. locale:gu:calendar day  1107.6  locale:x pseudo:calendar day  2655.6  ,    Client info       Date String   : Mon Mar 12 2018 14:40:57 GMT 0700  Pacific Daylight Time   Locale String : 3/12/2018  2:40:57 PM  Offset        : 420  User Agent    : Mozilla/5.0  Windows NT 10.0; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/64.0.3282.186 Safari/537.36  Moment Version: 2.21.0         ====        locale:gu:calendar day  1107.6      yesterday at the same time       javascript  // Expected             :           // Actual               :                        :           ===              :                   ====        locale:x pseudo:calendar day  2655.6      yesterday at the same time       javascript  // Expected    st  rd     t 02:00  // Actual      st  rd     t 03:00      st  rd     t 03:00  ===     st  rd     t 02:00      ,EggePiston,open,0,2018-03-12 21:41:46,0000-00-00 00:00:00,,,,0,1
9758,moment/moment,4497,Default formats of format   function are missing milliseconds,I don t know if this is by design  and if yes why  but the default formats  local and utc  of the  format    function are missing milliseconds.    https://github.com/moment/moment/blob/b8bc8353c92172ee2e3669a62c854467f47daae4/src/lib/moment/format.js L56 L62  https://github.com/moment/moment/blob/b8bc8353c92172ee2e3669a62c854467f47daae4/src/lib/moment/format.js L5 L6        Example   :       js  // milliseconds are still there  moment 1520984439342   x  .utc   // moment.utc  2018 03 13T23:40:39.342 00:00      // milliseconds are missing  moment 1520984439342   x  .utc  .format   // 2018 03 13T23:40:39Z         I expect the  format    function to not filter any information by default if no custom format string is provided :        js  // milliseconds should be included :  moment 1520984439342   x  .utc  .format   // 2018 03 13T23:40:39.342Z       ,sylv3r,open,0,2018-03-14 00:00:47,0000-00-00 00:00:00,,,,0,1
9757,moment/moment,4498,Error in all versions above 2.18.1  include 2.21.0,Hello      I get this error when I update to any of the versions above 2.18.1. This error also exists in the latest version.    This error appears if I do import this way:   import moment from  moment ;     and disappears when I do import   import moment from  moment/moment ;     I could leave such a decision  but this error also appears in other modules that use moment.js.    Can you tell me what might be the error? how to solve it?         Uncaught TypeError: __webpack_require__.i ...  is not a function      at Object.../../node_modules/moment/src/lib/units/year.js  year.js:71       at __webpack_require__  bootstrap 0291de3ec1c68e6f9ac8:686       at fn  bootstrap 0291de3ec1c68e6f9ac8:105       at Object.../../node_modules/moment/src/lib/moment/get set.js  from.js:17       at __webpack_require__  bootstrap 0291de3ec1c68e6f9ac8:686       at fn  bootstrap 0291de3ec1c68e6f9ac8:105       at Object.../../node_modules/moment/src/lib/units/month.js  minute.js:29       at __webpack_require__  bootstrap 0291de3ec1c68e6f9ac8:686       at fn  bootstrap 0291de3ec1c68e6f9ac8:105       at Object.../../node_modules/moment/src/lib/locale/base config.js  format.js:92      ,Krappt,open,0,2018-03-14 00:19:54,0000-00-00 00:00:00,,,,0,1
9756,moment/moment,4499,duration.abs   returns negative number of days,  Description of the Issue and Steps to Reproduce:    I am trying to get the duration between two dates but the number of days is negative albeit the  abs  call:       js  var date1 = moment  2018 03 13 09:57:57  ;  var date2 = moment  2018 03 14 10:03:16  ;  var duration = moment.duration date1.diff date2  .abs  ;  duration.days  ; //  1  // duration._data =  days:  1  hours: 0  milliseconds: 0  minutes: 5  months: 0  seconds: 19  years: 0            Environment:    Chrome 60 on OpenSuse13.1      Other information that may be helpful:      The time zone setting of the machine the code is running on => GMT 0100  CET     The time and date at which the code was run =>  Wed Mar 14 2018 10:15:40 GMT 0100  CET      Other libraries in use  TypeScript  Immutable.js  etc  => I don t think it matters since the issue is reproducible in https://momentjs.com/    If you are reporting an issue  please run the following code in the environment you are using and include the output:     js  console.log   new Date   .toString     //  Wed Mar 14 2018 10:17:17 GMT 0100  CET    console.log  new Date   .toLocaleString     // 3/14/2018  10:17:31 AM  console.log   new Date   .getTimezoneOffset     //  60  console.log  navigator.userAgent   // Mozilla/5.0  X11; Linux x86_64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/60.0.3112.113 Safari/537.36  console.log moment.version   // 2.21.0       ,XeniaSiskaki,closed,2,2018-03-14 09:21:19,2018-03-15 08:43:57,,,,0,1
9755,moment/moment,4500,No Documentation for .set  day,I ve observed that I can set a day of the week with         openTime = moment.tz moment    todayWorkingHours.timeZoneName .set                     day :  1                    hour : todayWorkingHours.start_time.split  :  [0]                    m :todayWorkingHours.start_time.split  :  [1]                    s : 0  .format  ;              closeTime = moment.tz moment    todayWorkingHours.timeZoneName .set                     day : todayWorkingHours.end_day                    hour : todayWorkingHours.end_time.split  :  [0]                    m : todayWorkingHours.end_time.split  :  [1]                    s : 0                .subtract todayWorkingHours.lead_time   m  .format  ;         But in our code reviews one dev noticed that set for day is not documented. ,JamesWilkinson-ICFOlson,open,0,2018-03-14 18:02:24,0000-00-00 00:00:00,,,,0,1
9754,moment/moment,4501,Date formatting after setting default Timezone still using local timezone,I am using moment for date formatting in entire project.  I am formatting date like   var formattedDate = moment dateToFormat    dateToFormat is string like  2018 04 25T23:59:59.000Z .  While formatting it is picking local timezone and automatically formattedDate  =>date changes .It is adding  5.30 hrs when using from India.  I want to set global timezone  so that moment dateToFormat  should not change date time string.  I cant do it using moment.utc since in all files entire application  moment is used.Changing in all files not easy job.  I even added moment timezone plugin.And set timezone   moment.tz.setDefault  Europe/London   in my config file.  But even after setting default timezone  again it is considering local timezone while formatting.  Need to set timezone in one place all moment formatting should use this global timezone.How to achieve this?    ,sathya130887,open,0,2018-03-15 10:56:40,0000-00-00 00:00:00,,,,0,1
9753,moment/moment,4502,Wrong Belarusian translation: no cases.,There are some grammatical mistakes in Belarusian translation: cases are not taken into consideration. Russian language is similar to Belarusian  but Russian localisation has no mistakes.   E.g. instead of                      15:00  should be                      15:00 ,SobakaSlava,open,0,2018-03-15 12:01:26,0000-00-00 00:00:00,,,,0,1
9752,moment/moment,4503,Format method changes in the last 2.21 version,  Description of the Issue and Steps to Reproduce:      In your webpack configuration:      js  new webpack.ContextReplacementPlugin /moment[ /  ]locale /  /fr/   // Only french        Then in your javascript code     js  var d = moment  ;  moment.format  dddd   // returns  Saturday  in v2.21.0  moment.format  dddd   // return  Samedi  in v2.20.1       The previous behavior was great  it returned the day in the good language but not now,FloV22,open,0,2018-03-15 15:30:39,0000-00-00 00:00:00,,,,0,1
9751,moment/moment,4504,How to use submodul importing in moment?,Hi    How to use submodul importing in moment?   When i import like  import moment from  moment    the produce file so big.     [screen shot 2018 03 18 at 22 31 12] https://user images.githubusercontent.com/12455939/37567622 1f60da94 2afc 11e8 8537 cc018468989e.png   ,safeimuslim,open,2,2018-03-18 15:31:44,0000-00-00 00:00:00,,,,0,1
9750,moment/moment,4505, ./locale  path not found in moment/src/lib/locale/locales.js,     WARNING in ./node_modules/moment/src/lib/locale/locales.js  Module not found: Error: Can t resolve  ./locale  in  D: project fed ecloud client web node_modules moment src lib locale          I found that there is something wrong with the function below       javascript  function loadLocale name         var oldLocale = null;      // TODO: Find a better way to register and load all the locales in Node      if   locales[name]     typeof module  ==  undefined                   module    module.exports             try                oldLocale = globalLocale._abbr;              var aliasedRequire = require;              aliasedRequire  ./locale/    name ;              getSetGlobalLocale oldLocale ;            catch  e                 return locales[name];            aliasedRequire  ./locale/    name ;    should it be   ../locale/   ?      ,SunnySnail,open,1,2018-03-19 09:52:48,0000-00-00 00:00:00,,,,0,1
9749,moment/moment,4506,Display issue on DST transition day,   js  const moment1 = moment  2018 03 25      .startOf  day      .hour 12 ;    const moment2 = moment  2018 03 25      .startOf  day      .minute 12   60 ; // Here I m adding 12 hours in minutes         Output:     js  moment1: Sun Mar 25 2018 12:00:00 GMT 0200  moment2: Sun Mar 25 2018 13:00:00 GMT 0200         2018 03 25 is the day when the summertime will be activated. Why is the output different?  When using 2018 03 25  the day after   both dates are exactly the same.    Is there a difference between using the  .hour  and  .minute  method?,guidsen,open,1,2018-03-20 09:59:36,0000-00-00 00:00:00,,,,0,1
9748,moment/moment,4507,Compare methods should treat date strings in the same timezone,  Description of the Issue and Steps to Reproduce:      I d expect the compare methods to parse the first argument in the same timezone as the moment object it was called on:       js  moment  2018 01 01  .isSameOrAfter  2018 01 02    day   === false // ok  moment.utc  2018 01 01  .isSameOrAfter  2018 01 02    day   === true // issue  moment.utc  2018 01 01  .isSameOrAfter moment.utc  2018 01 02     day   === false // workaround           Environment:        Chrome 65 on Windows 10      Other information that may be helpful:         Wed Mar 21 2018 15:32:47 GMT 0100  Mitteleurop ische Zeit   21.3.2018  15:32:47   60  Mozilla/5.0  Windows NT 10.0; Win64; x64  AppleWebKit/537.36  KHTML  like Gecko  Chrome/65.0.3325.162 Safari/537.36  2.20.1     ,xehpuk,open,0,2018-03-21 14:39:50,0000-00-00 00:00:00,,,,0,1
9747,moment/moment,4508,Problem with parsing specific date string in catalan language,  Description of the Issue and Steps to Reproduce:    When creating a date from the string   4 de maig   using format   M DDDD   and locale   ca   I am getting a wrong date. The problem is reproducable through interactive node.js shell:       > moment = require  moment    ....  > moment.locale  ca     ca   > moment  2018 05 04  .format  D MMMM     4 de maig   > moment  4 de maig    D MMMM    moment  2018 03 04T00:00:00.000    > moment  4 de maig    D MMMM   true   moment.invalid /  4 de maig  /            Environment:     Node.JS v8.9.4 on macOS Sierra 10.13.3        > console.log   new Date   .toString     Wed Mar 21 2018 22:34:11 GMT 0100  CET   > console.log  new Date   .toLocaleString     2018 3 21 22:34:11  console.log   new Date   .getTimezoneOffset      60  > console.log moment.version   2.20.1         Any ideas what s going wrong here? Thanks for any suggestion in advance.,bkahraman,open,1,2018-03-21 21:38:24,0000-00-00 00:00:00,,,,0,1
9746,moment/moment,4509,bugfix Uppercase function  undefind  for locale  4386 ,Handled undefined casses and warning messages.,Eliyas,open,0,2018-03-22 13:53:06,0000-00-00 00:00:00,,,,1,1
9745,moment/moment,4510,setRelativeTime should pass current date to formatter,  Should provide a way for relativeTime formatter function  to access to current time:    Consider the requirements below         const baseTime = moment  2018 03 23 16:00:00    moment  2018 03 22 18:00:00  .from baseTime   // output:  a day ago        we might need to customize the text to:  18:00 Yesterday     There is no solution to do it right now because the relativeTime formatter cannot access to  baseTime .  From [this line] https://github.com/moment/moment/blob/develop/src/lib/locale/relative.js L23  we know that  this  is not pointing to current moment instance.    Any suggestions would be appreciated.,TylerYang,open,0,2018-03-23 08:30:14,0000-00-00 00:00:00,,,,0,1
9744,moment/moment,4511,[BUG] toISOString don t return timestamp in UTC,Hi all    I have some trouble with the  toISOString    method.  I want to get the UTC of date but the toISOString   method return my local timezone  GMT  1 .    This  moment  2018 03 23  .toISOString    should return  2018 03 23T00:00:00.000Z  but when i try it i have  2018 03 22T23:00:00.000Z .       js    var date = new Date  2018 03 23  .toISOString  ;  // 2018 03 23T00:00:00.000Z    var dateMoment = moment  2018 03 23  .toISOString  ;  // 2018 03 22T23:00:00.000Z           You can access to example here [https://jsbin.com/sozofer/edit?js console] https://jsbin.com/sozofer/edit?js console .        Environment    Tested on Chrome on 65 OSX  also Node 8.6.0 with the Moment 2.21.0 version.,workfel,open,1,2018-03-23 10:05:31,0000-00-00 00:00:00,,,,0,1
9743,moment/moment,4512,Parsed time after DST switch displayed with  1 hour than its current time. ,  Description of the Issue and Steps to Reproduce:    Parse and display the following timestring:  2018 03 25T19:00:00 01:00   Note  this time is after the DST switch.   When I display this time with  a.format  HH:mm   I would expect. 19:00.   But it shows  20:00.   Is there a way to print times in their current equivalent?  I suppose this issue is gone after next saturday  but will appear again over 6 months.      Please include the values of all variables used.   var a = moment  2018 03 25T19:00:00 01:00        Environment:    58.0.2  64 bit  Mozilla Firefox on Ubuntu  Ubuntu 16.04      Other information that may be helpful:    Location is amsterdam.   CET  Central European Time   UTC/GMT  1 hour    If you are reporting an issue  please run the following code in the environment you are using and include the output:  console.log   new Date   .toString     console.log  new Date   .toLocaleString     console.log   new Date   .getTimezoneOffset     console.log  navigator.userAgent   console.log moment.version   Fri Mar 23 2018 16:11:32 GMT 0100  CET   23/03/2018  16:11:32   60   Mozilla/5.0  X11; Ubuntu; Linux x86_64; rv:58.0  Gecko/20100101 Firefox/58.0code:4:1  2.21.0   bower installed    moment :  ^2.17.0      ,Webrow,open,1,2018-03-23 15:23:55,0000-00-00 00:00:00,,,,0,1
9742,moment/moment,4513,Add  module  support,Bundlers are now leveraging the  module  property to support es6 improts/exports. Would a PR for adding this property be welcome?,amilajack,open,0,2018-03-24 00:38:15,0000-00-00 00:00:00,,,,0,1
9741,moment/moment,4514,[Feature request] relativeTimeThreshold for weeks,  Description of the Issue and Steps to Reproduce:      Feature request : Add a  relativeTimeThreshold  for weeks.     Please include the values of all variables used.              moment.relativeTimeThreshold  d   21 ;      moment.relativeTimeThreshold  w   16 ; // Doesn t exist yet      console.log moment someDate .toNow true  ;           What is the use case or motivation for changing an existing behavior?      I want to display age of animals :octocat:     My problem is for puppy  a veterinary count in days  1 to 21days  AND weeks  4 to 16weeks  because the vaccines  and some other medicines  use this timeline.,WizardPC,open,0,2018-03-24 18:07:02,0000-00-00 00:00:00,,,,0,1
