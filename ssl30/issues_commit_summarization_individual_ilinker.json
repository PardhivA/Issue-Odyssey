{"issue_index": 1, "issue_title": "namespace", "issue_body": "Hi   Wouldn t it be cleaner to mixin all these methods as a separate object  say   _.time ? Just like they did in JS when they separated  Date    Math  and so on?  Best regards    Vladimir ", "issue_id": "1", "CommitDetails": [{"index": 0, "url": "", "method_summarization": ""}, {"index": 0, "url": "", "method_summarization": ""}, {"index": 0, "url": "", "method_summarization": " I'm unable to see the lines of code you've provided for the before and after method changes. Please provide the code so I can summarize the alteration in one line based on its meaning.</s> I'm unable to see the actual code changes you have provided. Please give me a description or context of what the method does before and after the changes, so I can summarize the alteration in one line.</s> I'm unable to see the actual code you're referring to. Here's a general approach for summarizing method changes without seeing the code:\n\n1. Read both methods carefully to understand their functionality and purpose.\n2. Identify the main difference between the methods.\n3. Summarize that difference in one sentence, using plain English and avoiding technical jargon as much as possible.\n\nRemember, a good change summary should clearly and accurately describe what the code change accomplishes from a high-level perspective. Keep it clear and concise.\n\nExample:\nOriginal method: Calculates the sum of numbers in an array.\nModified method: Calculates the average of numbers in an array, handles null arrays, and returns an error message if empty arrays are passed instead.</s> I'm unable to see the code you provide in this text-based format. Please share the before and after method changes as code snippets or provide a clear description of the alterations so I can summarize the meaning in one line.</s> I'm unable to see the code you've provided for the before and after changes. Please provide the context so I can summarize the meaning of the alterations in one line.</s> I'm unable to see the actual code changes you've provided. Please give me a description or context of what the method did before and after the changes so I can summarize the alteration in one line. For example, \"Before the change, the method returned a simple string. After the change, it now returns a complex data structure.\"</s> I'm unable to see the actual code changes you've provided. Please give a description or context of what the method did before and after the changes, so I can summarize the alteration in one line.</s> I cannot provide a summary without having specific information about the before and after lines of code you have provided. Could you please give me a description or context of what the method does and how the changes affected it? For example, \"The method now validates user input before processing it\" or \"The method now returns multiple values instead of a single one\".</s> The method changes involve the modification of the Date handling library to support added functionality for the \"add\" and \"subtract\" methods for Date objects as instances of a new 'r' class. The new class 'r' inherits the existing methods and adds the new methods for time manipulation. The library also includes the ability to customize weekdays, months, and relative time formats.</s> I cannot summarize the alteration without seeing the specific lines of code for both the before and after versions of the method. Please provide the code snippets for an accurate one-line summarization.</s>The code has been refactored to create a new Date class \"r\" with prototype methods for formatting, adding, subtracting, and customizing dates. The original Date methods such as \"addTime,\" \"customizeDate,\" and others have been removed and incorporated into the new class. The \"formatDate\" method has also been modified to use the new Date class \"r\" instead of the original Date object.</s> I cannot provide a one-line summarization without seeing the actual code before and after the changes. Please provide the code snippets for an accurate analysis.</s> I'm unable to provide a one-line summarization without having access to the specific lines of code before and after the changes. Could you please provide some context or a description of what the method does and how the changes affect its functionality?</s> The changes made to the code added a new function `t` to calculate the numerical representation of a time duration, modified the `m` function to use the new `t` function, and added a new function `s` to calculate the time difference between two dates, and added a new prototype function `add` and `subtract` to the `r` object for adding and subtracting time from a date object respectively.</s> I'm unable to see the specific code changes you have provided. Please give me a descriptive one-liner summarization based on the changes made to the method. For example, \"The method now returns an optional result instead of throwing an exception.\" or \"The method accepts an additional boolean parameter to control the behavior of a specific feature.\"</s> I cannot provide a one-line summarization without seeing the actual code in the before and after changes. Please provide the code snippets, and I will do my best to give you a meaningful one-line summarization.</s> I'm unable to see the actual method code before and after the changes. Here is a general example to give you an idea of how to summarize the alteration in one line:\n\nBefore changes: The method returned a list of strings.\nAfter changes: The method now returns a list of dictionaries, each dictionary containing two keys: \"name\" and \"value\".</s> I'm unable to see the specific lines of code you've provided for the before and after method changes. Please provide some context or a summary of what the method does and how the changes affected it, so I can give you a one-line summarization of the alteration.</s>The changes introduced the creation of a new \"r\" function with prototype methods \"format\", \"add\", and \"subtract\" for easier manipulation of dates. The \"Date\" functions remain unchanged.</s> I'm unable to see the actual code changes you have provided. Could you please give a brief description of what the method did before and after the changes, so I can summarize the alteration in one line? For example, \"Before the change, the method returned a single value. After the change, it returns a list of values.\"</s> The changes to the method added a new `r` object with prototype methods for formatting and manipulating dates relative to the current date, allowing for more expressive and flexible date formatting.</s> I'm unable to see the specific lines of code you're referring to in order to give an accurate one-line summarization of the alterations. Please provide the context or meaning of the changes for me to help. For example, if the changes involve adding a new method to check for valid user input, a summary could be: \"Added validation method to ensure user input is correct before processing.\"</s> I cannot make a one-line summarization without seeing the actual lines of code before and after the changes. Please provide the context of what the method does and how the changes affected its functionality.</s> I cannot provide a one-line summarization without seeing the actual code and understanding the context of the changes. Please provide the lines of code and I will do my best to summarize the meaning of the alteration in one sentence.</s> The changes introduced the introduction of a new \"r\" object with new methods \"format\", \"add\", and \"subtract\" for manipulating dates and times, as well as modifications to the existing \"now\" method to return a new date object instead of a timestamp.</s> The method was modified to return a new Date object wrapped in a custom r object with the ability to format, add, subtract, and customize the output of the date.</s> The changes to the code added a new \"r\" object with prototype methods for formatting, adding, subtracting, and customizing dates, as well as checking if a year is a leap year.</s> The changes introduced the introduction of the \"r\" object with prototype methods for formatting, adding, subtracting, and customizing dates. The original method was converted into a prototype method for the newly introduced \"r\" object.</s> The changes introduced the usage of a new Date helper class \"r\" for formatting and manipulating dates, and added methods for adding and subtracting from a given date instance.</s> The changes added a new method \"r.prototype.add\" and a new method \"r.prototype.subtract\" to the existing DateTime constructor in JavaScript, enabling the addition and subtraction of time intervals from a DateTime object respectively. Before, the only available method was \"m(this, a, 1/-1)\" for setting a new DateTime based on an input date and a given time difference.</s>"}]}
{"issue_index": 2, "issue_title": "Add a package.json", "issue_body": "Hi   I would like to use underscore.date in nodejs. Can you add a package.json and publish it with npm ?  Thanks ", "issue_id": "2", "CommitDetails": [{"index": 0, "url": "", "method_summarization": ""}]}
{"issue_index": 3, "issue_title": "Issues with Safari", "issue_body": "I know this is mainly a node based library  but I happen to use this library on the browser side. I noticed some issues when parsing dates in Safari.  I resorted to creating a function in my app that does this before it sends the date to _.date  sorry this is coffeescript       coffeescript parseDate:  str   >   parts = _.map str.split        part   > parseInt part    date = new Date parts[0]  parts[1] 1  parts[2]       The date strings are YYYY MM DD. Works in every other browser  so I m not sure if you want to implement manual parsing or not but if you want to support Safari you re going to have to. : / ", "issue_id": "3", "CommitDetails": [{"index": 0, "url": "", "method_summarization": ""}]}
{"issue_index": 4, "issue_title": "Wrap with _date   instead of _date.date  ", "issue_body": "Hey   Have you thought of setting _date up so that it could be used like Underscore with  _date foo .format ...  ? What was your reason to require typing  date  twice  as in  _date.date foo .format ...   ? :   Andri ", "issue_id": "4", "CommitDetails": [{"index": 0, "url": "", "method_summarization": ""}, {"index": 0, "url": "", "method_summarization": "The change ensures that the `if` condition for assigning the `_` property is only executed when it exists.</s> The method changes involved merging the code into a single self-executing anonymous function and making some minor formatting adjustments. There isn't a significant semantic change based on the given code snippets.</s> The code was modified to add `window` and `module` as arguments to the constructor function of the `h` object, and to allow for merging the existing `h` object with a new one using the `mixin` method. This allows the `h` object to be used as a mixin for other objects.</s> The given code before changes is a factory function for creating a custom date manipulation function called \" Moment.js\". After the changes, the code remains the same with no apparent alterations in functionality. However, a line towards the end has been slightly refactored. The refactoring affects the line starting with \"window===a&&...\" which is added conditionally for exporting the Moment.js module. The original code exports the object directly, while the refactored version exports it as a property of the \"_\" object before merging it with the existing instance, if it already exists, to ensure no overriding occurs. Thus, the overall meaning and functionality of the code remain unchanged.</s> The method changes did not result in any significant alteration to its functionality based on the provided code snippets. Both the before and after versions of the method appear to be identical in terms of their functionality, which is to format and manipulate dates. Therefore, there is no meaningful one-line summary for the changes made to the method.</s> The changes to the given code did not introduce any new functionality or alter the meaning of the existing method significantly. It appears to be a refactoring or formatting update, possibly to improve readability or maintainability without significantly altering the behavior. Therefore, there isn't a meaningful one-line summary for these changes.</s> The method was modified to include the mixing of the created \"b\" object into the current context (_) if it is not already present, allowing for easier usage and avoidance of duplicate code.</s> The given code snippet before changes is a JavaScript implementation of a date and time utility library. After the changes, the code looks identical, suggesting that no significant alterations were made to the code. Therefore, no one-line summarization of the alteration is applicable in this case.</s> The given code is a JavaScript implementation of a date formatting and manipulation library. The changes made to the method did not result in a significant alteration to its functionality as both before and after versions seem to contain almost identical logic. Here's a one liner summarization:\n\nNo major change, just some code formatting and organization modifications, possibly for better readability or maintainability.</s> The given code is a JavaScript implementation of a date utility library. Before changes, it includes functions for creating a date object, formatting dates, adding or subtracting time intervals, and relative time calculation. The changes do not seem to modify the functionality of the library significantly. Therefore, there is no one-line summarization of the alteration in terms of meaning as both versions of the code perform the same tasks.</s> The given code is a JavaScript implementation of the Moment.js library, which is used for handling dates and times. The difference between the before and after versions of the code is minimal, and it appears that some comments have been added or modified. The main function, named \"l\", remains unchanged. Based on the code provided, it is not possible to give a meaningful one-line summary of the changes. However, if you could provide more context or focus on specific changes, I would be happy to help.</s> The given method code before changes was a large JavaScript implementation of a date handling utility with various formats and functionalities. After the changes, it appears that no significant alterations have been made to the code as both versions look identical. Therefore, there is no one-line summarization of the alteration as there seems to be no change in the method's meaning or functionality.</s> The given code is written in JavaScript and the method implementation hasn't changed significantly between the provided before and after versions, but some unnecessary statements and comments have been removed in the after version. The alteration can be summarized as: \"Code was cleaned by removing unnecessary comments and blank lines without changing the method functionality.\"</s> The given code snippet represents the definition of a JavaScript Date library, with the before and after changes being two versions of the same code. However, without further context, it's impossible to summarize the meaning of the changes in just one line. Both codes seem to define the same functions and behaviors related to date manipulation, formatting, and relative time calculations. An in-depth analysis of the differences between the two versions would be necessary to determine any meaningful changes.</s> The given code before changes and after changes appear to be defining a JavaScript date utility library with various methods for manipulating and formatting dates. The specific alteration is not apparent based on the provided code snippets alone. However, if you could specify the exact changes made between the two versions (i.e., which lines were added, removed, or modified), I could help summarize the alteration.\n\nIf you're asking for a summary of the overall purpose of the code changes, it would be that the library was updated or refactored in some way. The particular meaning of the changes (additions, deletions, or modifications) would depend on the specific differences between the before and after versions.</s> The given code underwent some modifications but without more context, it is difficult to provide a clear one-line summary of the changes made. These modifications might include refactoring some parts, adding new functions, renaming variables, or making other alterations to improve the code or fix issues. If you could provide more details or context about the changes made in the code, it would be easier to provide a meaningful one-line summary.</s>The given code represents a JavaScript implementation of a date utility library named Moment.js. Before the changes, the code was the full implementation of the Moment.js constructor. After the changes, the code is transformed to be concatenated with other Moment.js modules or imported in a more modular way. No functional changes were made to the code.</s> The given code is a JavaScript implementation of a custom Date utility library. The code is split into two parts - before and after changes. The difference between the two seems to be the addition/removal of the last line of code in the after changes version: \"(this._!==a&&this._.mixin(b),this._date=b)\". However, without understanding the context of this line, it is impossible to summarize its meaning in just one line. Therefore, a one-line summarization based on the provided code snippet alone would not be accurate or meaningful.</s> The changes to the code appear to involve adding or modifying several functions and properties of an object named \"b\" that is being passed to the function defined on line 1. The specific meaning of the changes cannot be determined without additional context, but one possible summary could be:\n\n\"Addition or modification of the 'b' object, which includes new functions and properties related to formatting and manipulating dates and times.\"</s>The method changes did not result in any significant meaning alteration as the code remains largely the same. Both before and after versions of the method are defining a functionality for formatting dates and times.</s> The given code is a JavaScript implementation of a date utility library named moments.js. The only difference between the provided before and after method changes is a line of code in the last function:\n\nbefore changes: `this._date=b`\nafter changes: `(this._!==a && this._.mixin(b), this._date=b)`\n\nThe altered line includes an additional check `this._!==a` to prevent overwriting the existing instance if the given `b` object is the same as the current instance, and the line `this._.mixin(b)` to merge the new date library (as a mixin) with the existing one (to avoid duplicate functions). \n\nSo, the alteration summary is: Merged the new date library with the existing instance to prevent duplicate functions.</s> The given code before changes is a JavaScript implementation of a date and time formatting utility. After changes, the code looks identical except for a single addition at the end, where the updated object is assigned to `this._date` if certain conditions are met. Therefore, the alteration can be summarized as: \"Assigned updated date object to `this._date`.\"</s> The given code is a JavaScript implementation of a date and time formatting utility. No significant changes were made between the provided \"before changes\" and \"after changes\" code snippets. This utility provides various methods for manipulating and formatting dates and times, such as adding or subtracting time intervals, converting between different time zones, and generating relative time phrases. There's no one-line summary for the provided code as no alterations were made.</s>"}, {"index": 0, "url": "", "method_summarization": ""}, {"index": 0, "url": "", "method_summarization": ""}, {"index": 0, "url": "", "method_summarization": ""}]}
{"issue_index": 5, "issue_title": "Fixed mixin with Underscore.", "issue_body": "Underscore s mixin fn wants a hash that also names the mixin. ", "issue_id": "5", "CommitDetails": [{"index": 0, "url": "", "method_summarization": " The change allows passing an object with a 'date' property as an argument to the '_mixin' function instead of just passing the '_date' variable.</s>"}, {"index": 0, "url": "", "method_summarization": ""}, {"index": 0, "url": "", "method_summarization": " I'm unable to see the actual code snippets you have in mind before and after the changes. In order to give you a one-line summarization of the alteration, I would need to know what the method does and how the changes affected its functionality. Could you please provide some context or a brief description of the method's purpose and the changes made?</s> I cannot give a meanings summary without seeing the actual code. Could you please provide the code snippets for the before and after method changes, so I can help summarize the difference inmeaning? Thank you.</s> The changes did not affect the method's functionality (it still searches for an item in an array and returns its index), but there were some formatting and variable declaration adjustments.</s>The changes to the given method add support for optional arguments to some functions (like `slice`, `splice`, and `concat`) by checking if they are provided or not before using them, and also make some minor adjustments to the implementation of some functions. Overall, the alterations enable these functions to behave consistently when called with different numbers of arguments.</s> The alteration adds a null check to the 'hasher' variable before assigning a new value to it. Additionally, it replaces the usage of 'in' operator with 'hasOwnProperty' method for checking if the key exists in the memo object.</s>The alteration adds a check for the method being a function before calling it using the 'call' method, falling back to using bracket notation for property access if the method is not a function.</s> Before the change, the method checked if the input was an array and returned its length. After the change, the method checks if the input is valid Object and throws an error if it is not. (The change was to enforce that the input is an object rather than an array.)</s> The change added a check to prevent assigning undefined properties from the 'source' object to the 'obj' object.</s>The change allows for using native bind method when available instead of writing a bind function.</s> The alteration allows for checking if 'index' is null instead of using 'undefined' specifically. So, the modification makes the condition more flexible.</s> The change in this line allows for the iterator to be reassigned as the identity function if it's not defined, instead of chaining it with the `||` operator.</s> The change did not alter the functionality of the method.</s> I'm unable to directly see the before and after method changes you have provided. Please give me a description or context of what the method does and how the changes affect its meaning or functionality. That way, I can help summarize the alteration in one line.</s> I cannot provide a one-line summarization without seeing the actual code in the before and after versions of the method. Please provide the code for an accurate summary.</s>The change simplified the handling of the starting index in the method, allowing it to default to 0 if no arguments are provided.</s>Before and after changes, the method iterates through an object using a provided iterator function, returning upon encountering a specified breaker value. No meaningful alteration can be summarized in one line based on the provided code snippets.</s> The change ensures that 'n' is not null before slicing the array.</s> I'm unable to see the specific code you're referring to, but I can provide an example based on a common change:\n\nBefore changes: This method calculates the sum of two integers.\nAfter changes: This method calculates the sum of two numbers (can be integers or floats).\n\nThe change allowed the method to accept and sum both integers and floats.</s> The change simplified the argument passing to the func.apply() method by removing the usage of the \"|| {}\" and \"concat\" functions.</s> I'm unable to provide a one-line summarization without seeing the actual code before and after the changes. Please provide the code and I'll do my best to give you a concise description of the alterations.</s> The change checks if a property in the source object has a value before assigning it to the target object.</s> The change in this line makes the assignment of `_.identity` to `iterator` conditional on whether `iterator` is truthy or not.</s> The alteration adds a check for the existence and property `mixin` in the `this._` object before calling the method. Also, it changes the argument passed to the `mixin` method from `_date` to an object containing just the `date` property. In simple terms, the change ensures that the `mixin` method can only be called on an object with the required property before modifying it.</s> The changes do not seem to have affected the overall functionality of the method as both versions appear to be definitions of the same constructor function \"h\" for creating a date object with various formatting options. Therefore, the alteration cannot be summarized in one line as there is no noticeable difference between the method's functionality before and after the changes.</s> The method did not undergo any significant alteration, both versions contain the same code for formatting and handling dates.</s> The given code before changes is a implementation of a Date utility library, and the code after changes is an updated version of the same library with some modifications. It's not clear from the provided code what the exact changes are and their impact without a detailed analysis or diffing tool. However, I can suggest that the changes involve some refactoring and modifications to the existing codebase.</s> The given code is a JavaScript implementation of a date formatting utility. The alteration seems to be the addition of a mixin property to the exported object, specifically to the `_` prototype. This property is then used in the `window===a&&module!==a?module.exports=b:` condition to conditionally replace the existing `module.exports` object with the new `b` object if certain conditions are met.\n\nSo, a possible one-line summarization of the alteration would be: \"Added a mixin property to the date formatting utility and conditionally overwrote the exported object with the updated version.\"</s> The given code is written in JavaScript and defines a Date library. Before changes, the method consists of around 230 lines of code. After changes, the method is still the same length. The alteration seems to be irrelevant as there is no difference in functionality or meaning between the two versions provided.</s> The given code represents a JavaScript implementation of a date and time formatting utility. The alteration seems to be the addition of some comments and variable name changes, but the overall functionality remains the same. Therefore, there is no significant meaning summary for the code change.</s> The method changes did not yield any noticeable difference in terms of meaning based on the provided code snippet. Both versions of the code appear to be defining and exporting a Date utility library with various formatting and parsing functions.</s> The given code is written in JavaScript and is defining a Date utility library. The changes are minor and do not significantly alter the meaning or functionality of the library. Specifically, the change seems to be related to the _mixin property of an object used in the library. Before the changes, the library mixes in the Date utility with an existing object (if it exists), and after the changes, the library mixes in the updated Date utility (with the added `b` argument) with an existing object (if it has the name `_date`). This update allows the library to be more easily extended or customized by allowing users to provide their own Date utility implementation. So, in one line, the change allows for more flexible usage of the Date utility.</s> The given code is the implementation of a custom Date formats functions in JavaScript. The alteration made in the code seems to be related to the addition of the `_mixin` property to the function `h` constructor. The exact meaning of this change cannot be ascertained from the provided code without additional context. Therefore, no one-line summary can be given for the change based on the provided code alone.</s>The given method definition was refactored by creating a new object \"b\" that includes the same functionality as the original object but with some modifications. This object was then mixed into the existing object using the '_mixin' function. No significant alteration to the existing method functionality was observed.</s> The method changes did not introduce any significant new functionality, as it appears to be the same Date formatting utility with some code formatting and variable naming changes to improve readability and maintainability. No functionality has been added or removed based on the provided code snippets.</s>The changes to the code did not make any meaningful alterations to the method's functionality, as both versions appear to be defining the same Date handling utility with minor differences in variable and function naming.</s> The given code is a JavaScript implementation of a date library. The changes seem to be minimal as both the before and after versions of the code are very similar. However, based on a brief comparison, it appears that the `h.prototype` in the after version has an additional `_mixin` property with the same value as `this._` in the before version. This suggests that the `h` constructor is now being instantiated as an extension of an existing object with a `_mixin` property. The meaning of this change would depend on the context of the codebase. Without more context, it would be difficult to provide a one-line summarization.</s> The changes to the method do not result in a meaningful one-line summary, as both versions of the code appear to be defining a Date utility library with similar functionality.</s> The method changes did not affect its functionality significantly, as both versions follow the same structure and logic. The method is used to format dates and times with relative and absolute units. No additional functionality was added or removed.</s> The given code is written in JavaScript and defines a date utility library. There are no apparent changes made between the provided before and after method codes based on a one-line summarization in terms of meaning. Both codes define the same date utility library with the same functions and structures.</s> The method changes did not introduce any significant alterations to its original functionality. It still appears to be a function that formats and manipulates dates. The changes seem to only include additions, modifications, and rearrangements of existing code. For example, some variables were renamed or moved around, but the overall logic and output of the method remain unchanged.</s> The given code does not show any alteration as both the before and after code snippets appear to be identical. If there is any difference you'd like me to summarize, please provide the actual changes that have been made.</s> The given before and after method changes do not show any noticeable alterations in terms of meaning. Both methods appear to be identical in their functionality, dealing with date manipulation using the same functions and logic.</s> The changes do not seem to have modified the overall functionality of the method, but rather modified some variable names and slightly reformatted the code for better readability. Therefore, the alteration can be summarized as \"Code formatting and variable name modifications.\"</s> The method changes do not appear to make any significant alterations to the original code's functionality based on the provided lines. Both before and after the changes, the code defines a Date utility class with various methods for handling and formatting dates.</s> The changes to the given method do not result in a meaningful one-line summarization as the code has been modified significantly, including the addition of new functions and properties. Instead, I would recommend a more detailed analysis of the changes to understand their impact.</s>"}, {"index": 0, "url": "", "method_summarization": ""}, {"index": 0, "url": "", "method_summarization": ""}, {"index": 0, "url": "", "method_summarization": ""}]}
{"issue_index": 6, "issue_title": "Minified version breaks Underscore.js mixin", "issue_body": "_.date is undefined with the current minified version. I ran the un minified version through YUI s compressor and it worked fine. Size difference was minimal  original compressed: 4292  YUI compressed: 4433 . ", "issue_id": "6", "CommitDetails": []}
{"issue_index": 7, "issue_title": "Versioning", "issue_body": "Hi Tim   this looks very awesome  about to play with it now. Minor nitpick: I chose release 0.5.1 from the Downloads button here but package.json and underscore.date.js state 0.5.0... did I miss out on the 0.5.1 additions or did the number just not get bumped up in these source files? ", "issue_id": "7", "CommitDetails": [{"index": 0, "url": "", "method_summarization": ""}]}
{"issue_index": 8, "issue_title": " 1 minutes ago  instead of  a minute ago ", "issue_body": "Hi   I notice from your readme there s a special case to show  a minute ago  but the simplest _date myTicks .fromNow   test case still gives me  1 minutes ago . What to do? ", "issue_id": "8", "CommitDetails": [{"index": 0, "url": "", "method_summarization": ""}, {"index": 0, "url": "", "method_summarization": ""}]}
{"issue_index": 9, "issue_title": "Check for window object", "issue_body": "Check for a undefined variable directly causes ReferenceError in nodejs. ", "issue_id": "9", "CommitDetails": [{"index": 0, "url": "", "method_summarization": ""}, {"index": 0, "url": "", "method_summarization": ""}]}
{"issue_index": 10, "issue_title": "FF and Chrome inconsistency   Firefox is one day shorter", "issue_body": "Try this code in FF 5.0.1 and Chrome  Mac :  var today = _date  .format  YYYY MM DD  ; var today_plus_7 = _date today .add   d: 7   .format  YYYY MM DD  ; console.log today  today_plus_7 ;  http://jsfiddle.net/jboesch26/b3wkM/  Chrome will log 7 days from the  today  date  Firefox will log 6 days. :   Also  the unit tests fail in Firefox 5.0.1 and Chrome on a Mac. ", "issue_id": "10", "CommitDetails": []}
{"issue_index": 11, "issue_title": "Feature: improved parsing", "issue_body": "I ve searched the net on many occasions trying to find a good date library.  In primarily use two features: parsing and formatting. Of the two  most date libraries are sufficient in the formatting category.  It s parsing that usually lacks.  The native  Date.parse  is weak as it cannot parse a lot of common date formats.  Also  it is not that useful to be required to pass a second parameter to a  parse  function in order to specify the date template from which to parse.  In most cases  I grab my dates from some input field  perhaps a text field .  I generally allow the person to enter the date in whatever format he sees fit.  As such  I just wanna pass a date  no format template  over to a parse function and have it decipher the date if possible and return it as a date object.  Sugar.js does this but it modifies all native object prototypes  which I m not necessarily against .  The trouble is it comes with a lot of other baggage.  It s date library is not yet separate.  I ve even tried date.js and find that it doesn t always successfully parse a date in some format.  Anyway  I know this is a biggie.  So I ll take no offense if you opt to close it. :  ", "issue_id": "11", "CommitDetails": [{"index": 0, "url": "", "method_summarization": " I'm unable to see the actual method codes before and after the changes. Could you please provide a description or context of what each version of the method does, and then I can try to summarize the difference between them in one line.</s> I'm unable to see the specific lines of code you have provided for before and after changes. However, I can give you an example of one line summarizations based on general changes I can imagine:\n\nBefore changes: The method sorted an array of integers in ascending order.\nAfter changes: The method now sorts an array of strings in descending order.\n\nSummary: The method's sorting behavior changed from ascending integers to descending strings.</s>"}, {"index": 0, "url": "", "method_summarization": ""}, {"index": 0, "url": "", "method_summarization": ""}, {"index": 0, "url": "", "method_summarization": " Before changes: The method takes a date object and a format string, returns a string representation of the date in the given format.\nAfter changes: The method takes a date object or a string, and a format string or an array of format strings. It tries to parse the input using the given formats, and returns the date object corresponding to the best match.</s> The change in the method modifies how it extracts a substring from a given string based on the presence of parentheses and a colon, and instead, it now extracts and processes the timezone information from the given string using a regular expression.</s> The alteration adds a regular expression 'timezoneRegex' to extract the timezone information from the date string and replace it with an empty string before processing further.</s>"}, {"index": 0, "url": "", "method_summarization": ""}, {"index": 0, "url": "", "method_summarization": ""}]}
